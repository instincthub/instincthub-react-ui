"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/canvg";
exports.ids = ["vendor-chunks/canvg"];
exports.modules = {

/***/ "(ssr)/./node_modules/canvg/lib/index.es.js":
/*!********************************************!*\
  !*** ./node_modules/canvg/lib/index.es.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AElement: () => (/* binding */ AElement),\n/* harmony export */   AnimateColorElement: () => (/* binding */ AnimateColorElement),\n/* harmony export */   AnimateElement: () => (/* binding */ AnimateElement),\n/* harmony export */   AnimateTransformElement: () => (/* binding */ AnimateTransformElement),\n/* harmony export */   BoundingBox: () => (/* binding */ BoundingBox),\n/* harmony export */   CB1: () => (/* binding */ CB1),\n/* harmony export */   CB2: () => (/* binding */ CB2),\n/* harmony export */   CB3: () => (/* binding */ CB3),\n/* harmony export */   CB4: () => (/* binding */ CB4),\n/* harmony export */   Canvg: () => (/* binding */ Canvg),\n/* harmony export */   CircleElement: () => (/* binding */ CircleElement),\n/* harmony export */   ClipPathElement: () => (/* binding */ ClipPathElement),\n/* harmony export */   DefsElement: () => (/* binding */ DefsElement),\n/* harmony export */   DescElement: () => (/* binding */ DescElement),\n/* harmony export */   Document: () => (/* binding */ Document),\n/* harmony export */   Element: () => (/* binding */ Element),\n/* harmony export */   EllipseElement: () => (/* binding */ EllipseElement),\n/* harmony export */   FeColorMatrixElement: () => (/* binding */ FeColorMatrixElement),\n/* harmony export */   FeCompositeElement: () => (/* binding */ FeCompositeElement),\n/* harmony export */   FeDropShadowElement: () => (/* binding */ FeDropShadowElement),\n/* harmony export */   FeGaussianBlurElement: () => (/* binding */ FeGaussianBlurElement),\n/* harmony export */   FeMorphologyElement: () => (/* binding */ FeMorphologyElement),\n/* harmony export */   FilterElement: () => (/* binding */ FilterElement),\n/* harmony export */   Font: () => (/* binding */ Font),\n/* harmony export */   FontElement: () => (/* binding */ FontElement),\n/* harmony export */   FontFaceElement: () => (/* binding */ FontFaceElement),\n/* harmony export */   GElement: () => (/* binding */ GElement),\n/* harmony export */   GlyphElement: () => (/* binding */ GlyphElement),\n/* harmony export */   GradientElement: () => (/* binding */ GradientElement),\n/* harmony export */   ImageElement: () => (/* binding */ ImageElement),\n/* harmony export */   LineElement: () => (/* binding */ LineElement),\n/* harmony export */   LinearGradientElement: () => (/* binding */ LinearGradientElement),\n/* harmony export */   MarkerElement: () => (/* binding */ MarkerElement),\n/* harmony export */   MaskElement: () => (/* binding */ MaskElement),\n/* harmony export */   Matrix: () => (/* binding */ Matrix),\n/* harmony export */   MissingGlyphElement: () => (/* binding */ MissingGlyphElement),\n/* harmony export */   Mouse: () => (/* binding */ Mouse),\n/* harmony export */   PSEUDO_ZERO: () => (/* binding */ PSEUDO_ZERO),\n/* harmony export */   Parser: () => (/* binding */ Parser),\n/* harmony export */   PathElement: () => (/* binding */ PathElement),\n/* harmony export */   PathParser: () => (/* binding */ PathParser),\n/* harmony export */   PatternElement: () => (/* binding */ PatternElement),\n/* harmony export */   Point: () => (/* binding */ Point),\n/* harmony export */   PolygonElement: () => (/* binding */ PolygonElement),\n/* harmony export */   PolylineElement: () => (/* binding */ PolylineElement),\n/* harmony export */   Property: () => (/* binding */ Property),\n/* harmony export */   QB1: () => (/* binding */ QB1),\n/* harmony export */   QB2: () => (/* binding */ QB2),\n/* harmony export */   QB3: () => (/* binding */ QB3),\n/* harmony export */   RadialGradientElement: () => (/* binding */ RadialGradientElement),\n/* harmony export */   RectElement: () => (/* binding */ RectElement),\n/* harmony export */   RenderedElement: () => (/* binding */ RenderedElement),\n/* harmony export */   Rotate: () => (/* binding */ Rotate),\n/* harmony export */   SVGElement: () => (/* binding */ SVGElement),\n/* harmony export */   SVGFontLoader: () => (/* binding */ SVGFontLoader),\n/* harmony export */   Scale: () => (/* binding */ Scale),\n/* harmony export */   Screen: () => (/* binding */ Screen),\n/* harmony export */   Skew: () => (/* binding */ Skew),\n/* harmony export */   SkewX: () => (/* binding */ SkewX),\n/* harmony export */   SkewY: () => (/* binding */ SkewY),\n/* harmony export */   StopElement: () => (/* binding */ StopElement),\n/* harmony export */   StyleElement: () => (/* binding */ StyleElement),\n/* harmony export */   SymbolElement: () => (/* binding */ SymbolElement),\n/* harmony export */   TRefElement: () => (/* binding */ TRefElement),\n/* harmony export */   TSpanElement: () => (/* binding */ TSpanElement),\n/* harmony export */   TextElement: () => (/* binding */ TextElement),\n/* harmony export */   TextPathElement: () => (/* binding */ TextPathElement),\n/* harmony export */   TitleElement: () => (/* binding */ TitleElement),\n/* harmony export */   Transform: () => (/* binding */ Transform),\n/* harmony export */   Translate: () => (/* binding */ Translate),\n/* harmony export */   UnknownElement: () => (/* binding */ UnknownElement),\n/* harmony export */   UseElement: () => (/* binding */ UseElement),\n/* harmony export */   ViewPort: () => (/* binding */ ViewPort),\n/* harmony export */   compressSpaces: () => (/* binding */ compressSpaces),\n/* harmony export */   \"default\": () => (/* binding */ Canvg),\n/* harmony export */   getSelectorSpecificity: () => (/* binding */ getSelectorSpecificity),\n/* harmony export */   normalizeAttributeName: () => (/* binding */ normalizeAttributeName),\n/* harmony export */   normalizeColor: () => (/* binding */ normalizeColor),\n/* harmony export */   parseExternalUrl: () => (/* binding */ parseExternalUrl),\n/* harmony export */   presets: () => (/* binding */ index),\n/* harmony export */   toNumbers: () => (/* binding */ toNumbers),\n/* harmony export */   trimLeft: () => (/* binding */ trimLeft),\n/* harmony export */   trimRight: () => (/* binding */ trimRight),\n/* harmony export */   vectorMagnitude: () => (/* binding */ vectorMagnitude),\n/* harmony export */   vectorsAngle: () => (/* binding */ vectorsAngle),\n/* harmony export */   vectorsRatio: () => (/* binding */ vectorsRatio)\n/* harmony export */ });\n/* harmony import */ var core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.promise.js */ \"(ssr)/./node_modules/core-js/modules/es.promise.js\");\n/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ \"(ssr)/./node_modules/@babel/runtime/helpers/asyncToGenerator.js\");\n/* harmony import */ var core_js_modules_es_string_match_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.string.match.js */ \"(ssr)/./node_modules/core-js/modules/es.string.match.js\");\n/* harmony import */ var core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.string.replace.js */ \"(ssr)/./node_modules/core-js/modules/es.string.replace.js\");\n/* harmony import */ var core_js_modules_es_string_starts_with_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.string.starts-with.js */ \"(ssr)/./node_modules/core-js/modules/es.string.starts-with.js\");\n/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"(ssr)/./node_modules/core-js/modules/es.array.iterator.js\");\n/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"(ssr)/./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var core_js_modules_es_array_reduce_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.array.reduce.js */ \"(ssr)/./node_modules/core-js/modules/es.array.reduce.js\");\n/* harmony import */ var core_js_modules_es_string_ends_with_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es.string.ends-with.js */ \"(ssr)/./node_modules/core-js/modules/es.string.ends-with.js\");\n/* harmony import */ var core_js_modules_es_string_split_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/es.string.split.js */ \"(ssr)/./node_modules/core-js/modules/es.string.split.js\");\n/* harmony import */ var raf__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! raf */ \"(ssr)/./node_modules/raf/index.js\");\n/* harmony import */ var core_js_modules_es_string_trim_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/es.string.trim.js */ \"(ssr)/./node_modules/core-js/modules/es.string.trim.js\");\n/* harmony import */ var rgbcolor__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! rgbcolor */ \"(ssr)/./node_modules/rgbcolor/index.js\");\n/* harmony import */ var core_js_modules_es_array_index_of_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! core-js/modules/es.array.index-of.js */ \"(ssr)/./node_modules/core-js/modules/es.array.index-of.js\");\n/* harmony import */ var core_js_modules_es_string_includes_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! core-js/modules/es.string.includes.js */ \"(ssr)/./node_modules/core-js/modules/es.string.includes.js\");\n/* harmony import */ var core_js_modules_es_array_reverse_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! core-js/modules/es.array.reverse.js */ \"(ssr)/./node_modules/core-js/modules/es.array.reverse.js\");\n/* harmony import */ var svg_pathdata__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! svg-pathdata */ \"(ssr)/./node_modules/svg-pathdata/lib/SVGPathData.module.js\");\n/* harmony import */ var core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! core-js/modules/es.regexp.to-string.js */ \"(ssr)/./node_modules/core-js/modules/es.regexp.to-string.js\");\n/* harmony import */ var stackblur_canvas__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! stackblur-canvas */ \"(ssr)/./node_modules/stackblur-canvas/dist/stackblur-es.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _get() { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _callSuper(_this, derived, args) {\n  function isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n      return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    } catch (e) {\n      return false;\n    }\n  }\n  derived = _getPrototypeOf(derived);\n  return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));\n}\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\r\n * Options preset for `OffscreenCanvas`.\r\n * @param config - Preset requirements.\r\n * @param config.DOMParser - XML/HTML parser from string into DOM Document.\r\n * @returns Preset object.\r\n */\nfunction offscreen() {\n  var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    DOMParserFallback = _ref4.DOMParser;\n  var preset = {\n    window: null,\n    ignoreAnimation: true,\n    ignoreMouse: true,\n    DOMParser: DOMParserFallback,\n    createCanvas: function createCanvas(width, height) {\n      return new OffscreenCanvas(width, height);\n    },\n    createImage: function createImage(url) {\n      return _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var response, blob, img;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch(url);\n            case 2:\n              response = _context.sent;\n              _context.next = 5;\n              return response.blob();\n            case 5:\n              blob = _context.sent;\n              _context.next = 8;\n              return createImageBitmap(blob);\n            case 8:\n              img = _context.sent;\n              return _context.abrupt(\"return\", img);\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }))();\n    }\n  };\n  if (typeof DOMParser !== 'undefined' || typeof DOMParserFallback === 'undefined') {\n    Reflect.deleteProperty(preset, 'DOMParser');\n  }\n  return preset;\n}\n\n/**\r\n * Options preset for `node-canvas`.\r\n * @param config - Preset requirements.\r\n * @param config.DOMParser - XML/HTML parser from string into DOM Document.\r\n * @param config.canvas - `node-canvas` exports.\r\n * @param config.fetch - WHATWG-compatible `fetch` function.\r\n * @returns Preset object.\r\n */\nfunction node(_ref) {\n  var DOMParser = _ref.DOMParser,\n    canvas = _ref.canvas,\n    fetch = _ref.fetch;\n  return {\n    window: null,\n    ignoreAnimation: true,\n    ignoreMouse: true,\n    DOMParser: DOMParser,\n    fetch: fetch,\n    createCanvas: canvas.createCanvas,\n    createImage: canvas.loadImage\n  };\n}\nvar index = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  offscreen: offscreen,\n  node: node\n});\n\n/**\r\n * HTML-safe compress white-spaces.\r\n * @param str - String to compress.\r\n * @returns String.\r\n */\nfunction compressSpaces(str) {\n  return str.replace(/(?!\\u3000)\\s+/gm, ' ');\n}\n/**\r\n * HTML-safe left trim.\r\n * @param str - String to trim.\r\n * @returns String.\r\n */\n\nfunction trimLeft(str) {\n  return str.replace(/^[\\n \\t]+/, '');\n}\n/**\r\n * HTML-safe right trim.\r\n * @param str - String to trim.\r\n * @returns String.\r\n */\n\nfunction trimRight(str) {\n  return str.replace(/[\\n \\t]+$/, '');\n}\n/**\r\n * String to numbers array.\r\n * @param str - Numbers string.\r\n * @returns Numbers array.\r\n */\n\nfunction toNumbers(str) {\n  var matches = (str || '').match(/-?(\\d+(?:\\.\\d*(?:[eE][+-]?\\d+)?)?|\\.\\d+)(?=\\D|$)/gm) || [];\n  return matches.map(parseFloat);\n} // Microsoft Edge fix\n\nvar allUppercase = /^[A-Z-]+$/;\n/**\r\n * Normalize attribute name.\r\n * @param name - Attribute name.\r\n * @returns Normalized attribute name.\r\n */\n\nfunction normalizeAttributeName(name) {\n  if (allUppercase.test(name)) {\n    return name.toLowerCase();\n  }\n  return name;\n}\n/**\r\n * Parse external URL.\r\n * @param url - CSS url string.\r\n * @returns Parsed URL.\r\n */\n\nfunction parseExternalUrl(url) {\n  //                      single quotes [2]\n  //                      v         double quotes [3]\n  //                      v         v         no quotes [4]\n  //                      v         v         v\n  var urlMatch = /url\\(('([^']+)'|\"([^\"]+)\"|([^'\")]+))\\)/.exec(url) || [];\n  return urlMatch[2] || urlMatch[3] || urlMatch[4];\n}\n/**\r\n * Transform floats to integers in rgb colors.\r\n * @param color - Color to normalize.\r\n * @returns Normalized color.\r\n */\n\nfunction normalizeColor(color) {\n  if (!color.startsWith('rgb')) {\n    return color;\n  }\n  var rgbParts = 3;\n  var normalizedColor = color.replace(/\\d+(\\.\\d+)?/g, function (num, isFloat) {\n    return rgbParts-- && isFloat ? String(Math.round(parseFloat(num))) : num;\n  });\n  return normalizedColor;\n}\n\n// slightly modified version of https://github.com/keeganstreet/specificity/blob/master/specificity.js\nvar attributeRegex = /(\\[[^\\]]+\\])/g;\nvar idRegex = /(#[^\\s+>~.[:]+)/g;\nvar classRegex = /(\\.[^\\s+>~.[:]+)/g;\nvar pseudoElementRegex = /(::[^\\s+>~.[:]+|:first-line|:first-letter|:before|:after)/gi;\nvar pseudoClassWithBracketsRegex = /(:[\\w-]+\\([^)]*\\))/gi;\nvar pseudoClassRegex = /(:[^\\s+>~.[:]+)/g;\nvar elementRegex = /([^\\s+>~.[:]+)/g;\nfunction findSelectorMatch(selector, regex) {\n  var matches = regex.exec(selector);\n  if (!matches) {\n    return [selector, 0];\n  }\n  return [selector.replace(regex, ' '), matches.length];\n}\n/**\r\n * Measure selector specificity.\r\n * @param selector - Selector to measure.\r\n * @returns Specificity.\r\n */\n\nfunction getSelectorSpecificity(selector) {\n  var specificity = [0, 0, 0];\n  var currentSelector = selector.replace(/:not\\(([^)]*)\\)/g, '     $1 ').replace(/{[\\s\\S]*/gm, ' ');\n  var delta = 0;\n  var _findSelectorMatch = findSelectorMatch(currentSelector, attributeRegex);\n  var _findSelectorMatch2 = _slicedToArray(_findSelectorMatch, 2);\n  currentSelector = _findSelectorMatch2[0];\n  delta = _findSelectorMatch2[1];\n  specificity[1] += delta;\n  var _findSelectorMatch3 = findSelectorMatch(currentSelector, idRegex);\n  var _findSelectorMatch4 = _slicedToArray(_findSelectorMatch3, 2);\n  currentSelector = _findSelectorMatch4[0];\n  delta = _findSelectorMatch4[1];\n  specificity[0] += delta;\n  var _findSelectorMatch5 = findSelectorMatch(currentSelector, classRegex);\n  var _findSelectorMatch6 = _slicedToArray(_findSelectorMatch5, 2);\n  currentSelector = _findSelectorMatch6[0];\n  delta = _findSelectorMatch6[1];\n  specificity[1] += delta;\n  var _findSelectorMatch7 = findSelectorMatch(currentSelector, pseudoElementRegex);\n  var _findSelectorMatch8 = _slicedToArray(_findSelectorMatch7, 2);\n  currentSelector = _findSelectorMatch8[0];\n  delta = _findSelectorMatch8[1];\n  specificity[2] += delta;\n  var _findSelectorMatch9 = findSelectorMatch(currentSelector, pseudoClassWithBracketsRegex);\n  var _findSelectorMatch10 = _slicedToArray(_findSelectorMatch9, 2);\n  currentSelector = _findSelectorMatch10[0];\n  delta = _findSelectorMatch10[1];\n  specificity[1] += delta;\n  var _findSelectorMatch11 = findSelectorMatch(currentSelector, pseudoClassRegex);\n  var _findSelectorMatch12 = _slicedToArray(_findSelectorMatch11, 2);\n  currentSelector = _findSelectorMatch12[0];\n  delta = _findSelectorMatch12[1];\n  specificity[1] += delta;\n  currentSelector = currentSelector.replace(/[*\\s+>~]/g, ' ').replace(/[#.]/g, ' ');\n  // lgtm [js/useless-assignment-to-local]\n  var _findSelectorMatch13 = findSelectorMatch(currentSelector, elementRegex);\n  var _findSelectorMatch14 = _slicedToArray(_findSelectorMatch13, 2);\n  currentSelector = _findSelectorMatch14[0];\n  delta = _findSelectorMatch14[1];\n  specificity[2] += delta;\n  return specificity.join('');\n}\nvar PSEUDO_ZERO = .00000001;\n/**\r\n * Vector magnitude.\r\n * @param v\r\n * @returns Number result.\r\n */\n\nfunction vectorMagnitude(v) {\n  return Math.sqrt(Math.pow(v[0], 2) + Math.pow(v[1], 2));\n}\n/**\r\n * Ratio between two vectors.\r\n * @param u\r\n * @param v\r\n * @returns Number result.\r\n */\n\nfunction vectorsRatio(u, v) {\n  return (u[0] * v[0] + u[1] * v[1]) / (vectorMagnitude(u) * vectorMagnitude(v));\n}\n/**\r\n * Angle between two vectors.\r\n * @param u\r\n * @param v\r\n * @returns Number result.\r\n */\n\nfunction vectorsAngle(u, v) {\n  return (u[0] * v[1] < u[1] * v[0] ? -1 : 1) * Math.acos(vectorsRatio(u, v));\n}\nfunction CB1(t) {\n  return t * t * t;\n}\nfunction CB2(t) {\n  return 3 * t * t * (1 - t);\n}\nfunction CB3(t) {\n  return 3 * t * (1 - t) * (1 - t);\n}\nfunction CB4(t) {\n  return (1 - t) * (1 - t) * (1 - t);\n}\nfunction QB1(t) {\n  return t * t;\n}\nfunction QB2(t) {\n  return 2 * t * (1 - t);\n}\nfunction QB3(t) {\n  return (1 - t) * (1 - t);\n}\nvar Property = /*#__PURE__*/function () {\n  function Property(document, name, value) {\n    _classCallCheck(this, Property);\n    this.document = document;\n    this.name = name;\n    this.value = value;\n    this.isNormalizedColor = false;\n  }\n  return _createClass(Property, [{\n    key: \"split\",\n    value: function split() {\n      var separator = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ' ';\n      var document = this.document,\n        name = this.name;\n      return compressSpaces(this.getString()).trim().split(separator).map(function (value) {\n        return new Property(document, name, value);\n      });\n    }\n  }, {\n    key: \"hasValue\",\n    value: function hasValue(zeroIsValue) {\n      var value = this.value;\n      return value !== null && value !== '' && (zeroIsValue || value !== 0) && typeof value !== 'undefined';\n    }\n  }, {\n    key: \"isString\",\n    value: function isString(regexp) {\n      var value = this.value;\n      var result = typeof value === 'string';\n      if (!result || !regexp) {\n        return result;\n      }\n      return regexp.test(value);\n    }\n  }, {\n    key: \"isUrlDefinition\",\n    value: function isUrlDefinition() {\n      return this.isString(/^url\\(/);\n    }\n  }, {\n    key: \"isPixels\",\n    value: function isPixels() {\n      if (!this.hasValue()) {\n        return false;\n      }\n      var asString = this.getString();\n      switch (true) {\n        case asString.endsWith('px'):\n        case /^[0-9]+$/.test(asString):\n          return true;\n        default:\n          return false;\n      }\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(value) {\n      this.value = value;\n      return this;\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue(def) {\n      if (typeof def === 'undefined' || this.hasValue()) {\n        return this.value;\n      }\n      return def;\n    }\n  }, {\n    key: \"getNumber\",\n    value: function getNumber(def) {\n      if (!this.hasValue()) {\n        if (typeof def === 'undefined') {\n          return 0;\n        }\n        return parseFloat(def);\n      }\n      var value = this.value;\n      var n = parseFloat(value);\n      if (this.isString(/%$/)) {\n        n /= 100.0;\n      }\n      return n;\n    }\n  }, {\n    key: \"getString\",\n    value: function getString(def) {\n      if (typeof def === 'undefined' || this.hasValue()) {\n        return typeof this.value === 'undefined' ? '' : String(this.value);\n      }\n      return String(def);\n    }\n  }, {\n    key: \"getColor\",\n    value: function getColor(def) {\n      var color = this.getString(def);\n      if (this.isNormalizedColor) {\n        return color;\n      }\n      this.isNormalizedColor = true;\n      color = normalizeColor(color);\n      this.value = color;\n      return color;\n    }\n  }, {\n    key: \"getDpi\",\n    value: function getDpi() {\n      return 96.0; // TODO: compute?\n    }\n  }, {\n    key: \"getRem\",\n    value: function getRem() {\n      return this.document.rootEmSize;\n    }\n  }, {\n    key: \"getEm\",\n    value: function getEm() {\n      return this.document.emSize;\n    }\n  }, {\n    key: \"getUnits\",\n    value: function getUnits() {\n      return this.getString().replace(/[0-9.-]/g, '');\n    }\n  }, {\n    key: \"getPixels\",\n    value: function getPixels(axisOrIsFontSize) {\n      var processPercent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (!this.hasValue()) {\n        return 0;\n      }\n      var _ref5 = typeof axisOrIsFontSize === 'boolean' ? [undefined, axisOrIsFontSize] : [axisOrIsFontSize],\n        _ref6 = _slicedToArray(_ref5, 2),\n        axis = _ref6[0],\n        isFontSize = _ref6[1];\n      var viewPort = this.document.screen.viewPort;\n      switch (true) {\n        case this.isString(/vmin$/):\n          return this.getNumber() / 100.0 * Math.min(viewPort.computeSize('x'), viewPort.computeSize('y'));\n        case this.isString(/vmax$/):\n          return this.getNumber() / 100.0 * Math.max(viewPort.computeSize('x'), viewPort.computeSize('y'));\n        case this.isString(/vw$/):\n          return this.getNumber() / 100.0 * viewPort.computeSize('x');\n        case this.isString(/vh$/):\n          return this.getNumber() / 100.0 * viewPort.computeSize('y');\n        case this.isString(/rem$/):\n          return this.getNumber() * this.getRem();\n        case this.isString(/em$/):\n          return this.getNumber() * this.getEm();\n        case this.isString(/ex$/):\n          return this.getNumber() * this.getEm() / 2.0;\n        case this.isString(/px$/):\n          return this.getNumber();\n        case this.isString(/pt$/):\n          return this.getNumber() * this.getDpi() * (1.0 / 72.0);\n        case this.isString(/pc$/):\n          return this.getNumber() * 15;\n        case this.isString(/cm$/):\n          return this.getNumber() * this.getDpi() / 2.54;\n        case this.isString(/mm$/):\n          return this.getNumber() * this.getDpi() / 25.4;\n        case this.isString(/in$/):\n          return this.getNumber() * this.getDpi();\n        case this.isString(/%$/) && isFontSize:\n          return this.getNumber() * this.getEm();\n        case this.isString(/%$/):\n          return this.getNumber() * viewPort.computeSize(axis);\n        default:\n          {\n            var n = this.getNumber();\n            if (processPercent && n < 1.0) {\n              return n * viewPort.computeSize(axis);\n            }\n            return n;\n          }\n      }\n    }\n  }, {\n    key: \"getMilliseconds\",\n    value: function getMilliseconds() {\n      if (!this.hasValue()) {\n        return 0;\n      }\n      if (this.isString(/ms$/)) {\n        return this.getNumber();\n      }\n      return this.getNumber() * 1000;\n    }\n  }, {\n    key: \"getRadians\",\n    value: function getRadians() {\n      if (!this.hasValue()) {\n        return 0;\n      }\n      switch (true) {\n        case this.isString(/deg$/):\n          return this.getNumber() * (Math.PI / 180.0);\n        case this.isString(/grad$/):\n          return this.getNumber() * (Math.PI / 200.0);\n        case this.isString(/rad$/):\n          return this.getNumber();\n        default:\n          return this.getNumber() * (Math.PI / 180.0);\n      }\n    }\n  }, {\n    key: \"getDefinition\",\n    value: function getDefinition() {\n      var asString = this.getString();\n      var name = /#([^)'\"]+)/.exec(asString);\n      if (name) {\n        name = name[1];\n      }\n      if (!name) {\n        name = asString;\n      }\n      return this.document.definitions[name];\n    }\n  }, {\n    key: \"getFillStyleDefinition\",\n    value: function getFillStyleDefinition(element, opacity) {\n      var def = this.getDefinition();\n      if (!def) {\n        return null;\n      } // gradient\n\n      if (typeof def.createGradient === 'function') {\n        return def.createGradient(this.document.ctx, element, opacity);\n      } // pattern\n\n      if (typeof def.createPattern === 'function') {\n        if (def.getHrefAttribute().hasValue()) {\n          var patternTransform = def.getAttribute('patternTransform');\n          def = def.getHrefAttribute().getDefinition();\n          if (patternTransform.hasValue()) {\n            def.getAttribute('patternTransform', true).setValue(patternTransform.value);\n          }\n        }\n        return def.createPattern(this.document.ctx, element, opacity);\n      }\n      return null;\n    }\n  }, {\n    key: \"getTextBaseline\",\n    value: function getTextBaseline() {\n      if (!this.hasValue()) {\n        return null;\n      }\n      return Property.textBaselineMapping[this.getString()];\n    }\n  }, {\n    key: \"addOpacity\",\n    value: function addOpacity(opacity) {\n      var value = this.getColor();\n      var len = value.length;\n      var commas = 0; // Simulate old RGBColor version, which can't parse rgba.\n\n      for (var i = 0; i < len; i++) {\n        if (value[i] === ',') {\n          commas++;\n        }\n        if (commas === 3) {\n          break;\n        }\n      }\n      if (opacity.hasValue() && this.isString() && commas !== 3) {\n        var color = new rgbcolor__WEBPACK_IMPORTED_MODULE_13__(value);\n        if (color.ok) {\n          color.alpha = opacity.getNumber();\n          value = color.toRGBA();\n        }\n      }\n      return new Property(this.document, this.name, value);\n    }\n  }], [{\n    key: \"empty\",\n    value: function empty(document) {\n      return new Property(document, 'EMPTY', '');\n    }\n  }]);\n}();\nProperty.textBaselineMapping = {\n  'baseline': 'alphabetic',\n  'before-edge': 'top',\n  'text-before-edge': 'top',\n  'middle': 'middle',\n  'central': 'middle',\n  'after-edge': 'bottom',\n  'text-after-edge': 'bottom',\n  'ideographic': 'ideographic',\n  'alphabetic': 'alphabetic',\n  'hanging': 'hanging',\n  'mathematical': 'alphabetic'\n};\nvar ViewPort = /*#__PURE__*/function () {\n  function ViewPort() {\n    _classCallCheck(this, ViewPort);\n    this.viewPorts = [];\n  }\n  return _createClass(ViewPort, [{\n    key: \"clear\",\n    value: function clear() {\n      this.viewPorts = [];\n    }\n  }, {\n    key: \"setCurrent\",\n    value: function setCurrent(width, height) {\n      this.viewPorts.push({\n        width: width,\n        height: height\n      });\n    }\n  }, {\n    key: \"removeCurrent\",\n    value: function removeCurrent() {\n      this.viewPorts.pop();\n    }\n  }, {\n    key: \"getCurrent\",\n    value: function getCurrent() {\n      var viewPorts = this.viewPorts;\n      return viewPorts[viewPorts.length - 1];\n    }\n  }, {\n    key: \"width\",\n    get: function get() {\n      return this.getCurrent().width;\n    }\n  }, {\n    key: \"height\",\n    get: function get() {\n      return this.getCurrent().height;\n    }\n  }, {\n    key: \"computeSize\",\n    value: function computeSize(d) {\n      if (typeof d === 'number') {\n        return d;\n      }\n      if (d === 'x') {\n        return this.width;\n      }\n      if (d === 'y') {\n        return this.height;\n      }\n      return Math.sqrt(Math.pow(this.width, 2) + Math.pow(this.height, 2)) / Math.sqrt(2);\n    }\n  }]);\n}();\nvar Point = /*#__PURE__*/function () {\n  function Point(x, y) {\n    _classCallCheck(this, Point);\n    this.x = x;\n    this.y = y;\n  }\n  return _createClass(Point, [{\n    key: \"angleTo\",\n    value: function angleTo(point) {\n      return Math.atan2(point.y - this.y, point.x - this.x);\n    }\n  }, {\n    key: \"applyTransform\",\n    value: function applyTransform(transform) {\n      var x = this.x,\n        y = this.y;\n      var xp = x * transform[0] + y * transform[2] + transform[4];\n      var yp = x * transform[1] + y * transform[3] + transform[5];\n      this.x = xp;\n      this.y = yp;\n    }\n  }], [{\n    key: \"parse\",\n    value: function parse(point) {\n      var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var _toNumbers = toNumbers(point),\n        _toNumbers2 = _slicedToArray(_toNumbers, 2),\n        _toNumbers2$ = _toNumbers2[0],\n        x = _toNumbers2$ === void 0 ? defaultValue : _toNumbers2$,\n        _toNumbers2$2 = _toNumbers2[1],\n        y = _toNumbers2$2 === void 0 ? defaultValue : _toNumbers2$2;\n      return new Point(x, y);\n    }\n  }, {\n    key: \"parseScale\",\n    value: function parseScale(scale) {\n      var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var _toNumbers3 = toNumbers(scale),\n        _toNumbers4 = _slicedToArray(_toNumbers3, 2),\n        _toNumbers4$ = _toNumbers4[0],\n        x = _toNumbers4$ === void 0 ? defaultValue : _toNumbers4$,\n        _toNumbers4$2 = _toNumbers4[1],\n        y = _toNumbers4$2 === void 0 ? x : _toNumbers4$2;\n      return new Point(x, y);\n    }\n  }, {\n    key: \"parsePath\",\n    value: function parsePath(path) {\n      var points = toNumbers(path);\n      var len = points.length;\n      var pathPoints = [];\n      for (var i = 0; i < len; i += 2) {\n        pathPoints.push(new Point(points[i], points[i + 1]));\n      }\n      return pathPoints;\n    }\n  }]);\n}();\nvar Mouse = /*#__PURE__*/function () {\n  function Mouse(screen) {\n    _classCallCheck(this, Mouse);\n    this.screen = screen;\n    this.working = false;\n    this.events = [];\n    this.eventElements = []; // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\n    this.onClick = this.onClick.bind(this); // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\n    this.onMouseMove = this.onMouseMove.bind(this);\n  }\n  return _createClass(Mouse, [{\n    key: \"isWorking\",\n    value: function isWorking() {\n      return this.working;\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      if (this.working) {\n        return;\n      }\n      var screen = this.screen,\n        onClick = this.onClick,\n        onMouseMove = this.onMouseMove;\n      var canvas = screen.ctx.canvas;\n      canvas.onclick = onClick;\n      canvas.onmousemove = onMouseMove;\n      this.working = true;\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (!this.working) {\n        return;\n      }\n      var canvas = this.screen.ctx.canvas;\n      this.working = false;\n      canvas.onclick = null;\n      canvas.onmousemove = null;\n    }\n  }, {\n    key: \"hasEvents\",\n    value: function hasEvents() {\n      return this.working && this.events.length > 0;\n    }\n  }, {\n    key: \"runEvents\",\n    value: function runEvents() {\n      if (!this.working) {\n        return;\n      }\n      var document = this.screen,\n        events = this.events,\n        eventElements = this.eventElements;\n      var style = document.ctx.canvas.style;\n      if (style) {\n        style.cursor = '';\n      }\n      events.forEach(function (_ref, i) {\n        var run = _ref.run;\n        var element = eventElements[i];\n        while (element) {\n          run(element);\n          element = element.parent;\n        }\n      }); // done running, clear\n\n      this.events = [];\n      this.eventElements = [];\n    }\n  }, {\n    key: \"checkPath\",\n    value: function checkPath(element, ctx) {\n      if (!this.working || !ctx) {\n        return;\n      }\n      var events = this.events,\n        eventElements = this.eventElements;\n      events.forEach(function (_ref2, i) {\n        var x = _ref2.x,\n          y = _ref2.y;\n        if (!eventElements[i] && ctx.isPointInPath && ctx.isPointInPath(x, y)) {\n          eventElements[i] = element;\n        }\n      });\n    }\n  }, {\n    key: \"checkBoundingBox\",\n    value: function checkBoundingBox(element, boundingBox) {\n      if (!this.working || !boundingBox) {\n        return;\n      }\n      var events = this.events,\n        eventElements = this.eventElements;\n      events.forEach(function (_ref3, i) {\n        var x = _ref3.x,\n          y = _ref3.y;\n        if (!eventElements[i] && boundingBox.isPointInBox(x, y)) {\n          eventElements[i] = element;\n        }\n      });\n    }\n  }, {\n    key: \"mapXY\",\n    value: function mapXY(x, y) {\n      var _this$screen = this.screen,\n        window = _this$screen.window,\n        ctx = _this$screen.ctx;\n      var point = new Point(x, y);\n      var element = ctx.canvas;\n      while (element) {\n        point.x -= element.offsetLeft;\n        point.y -= element.offsetTop;\n        element = element.offsetParent;\n      }\n      if (window.scrollX) {\n        point.x += window.scrollX;\n      }\n      if (window.scrollY) {\n        point.y += window.scrollY;\n      }\n      return point;\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(event) {\n      var _this$mapXY = this.mapXY(event.clientX, event.clientY),\n        x = _this$mapXY.x,\n        y = _this$mapXY.y;\n      this.events.push({\n        type: 'onclick',\n        x: x,\n        y: y,\n        run: function run(eventTarget) {\n          if (eventTarget.onClick) {\n            eventTarget.onClick();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"onMouseMove\",\n    value: function onMouseMove(event) {\n      var _this$mapXY2 = this.mapXY(event.clientX, event.clientY),\n        x = _this$mapXY2.x,\n        y = _this$mapXY2.y;\n      this.events.push({\n        type: 'onmousemove',\n        x: x,\n        y: y,\n        run: function run(eventTarget) {\n          if (eventTarget.onMouseMove) {\n            eventTarget.onMouseMove();\n          }\n        }\n      });\n    }\n  }]);\n}();\nvar defaultWindow =  false ? 0 : null;\nvar defaultFetch$1 = typeof fetch !== 'undefined' ? fetch.bind(undefined) // `fetch` depends on context: `someObject.fetch(...)` will throw error.\n: null;\nvar Screen = /*#__PURE__*/function () {\n  function Screen(ctx) {\n    _classCallCheck(this, Screen);\n    var _ref7 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref7$fetch = _ref7.fetch,\n      fetch = _ref7$fetch === void 0 ? defaultFetch$1 : _ref7$fetch,\n      _ref7$window = _ref7.window,\n      window = _ref7$window === void 0 ? defaultWindow : _ref7$window;\n    this.ctx = ctx;\n    this.FRAMERATE = 30;\n    this.MAX_VIRTUAL_PIXELS = 30000;\n    this.CLIENT_WIDTH = 800;\n    this.CLIENT_HEIGHT = 600;\n    this.viewPort = new ViewPort();\n    this.mouse = new Mouse(this);\n    this.animations = [];\n    this.waits = [];\n    this.frameDuration = 0;\n    this.isReadyLock = false;\n    this.isFirstRender = true;\n    this.intervalId = null;\n    this.window = window;\n    this.fetch = fetch;\n  }\n  return _createClass(Screen, [{\n    key: \"wait\",\n    value: function wait(checker) {\n      this.waits.push(checker);\n    }\n  }, {\n    key: \"ready\",\n    value: function ready() {\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      if (!this.readyPromise) {\n        return Promise.resolve();\n      }\n      return this.readyPromise;\n    }\n  }, {\n    key: \"isReady\",\n    value: function isReady() {\n      if (this.isReadyLock) {\n        return true;\n      }\n      var isReadyLock = this.waits.every(function (_) {\n        return _();\n      });\n      if (isReadyLock) {\n        this.waits = [];\n        if (this.resolveReady) {\n          this.resolveReady();\n        }\n      }\n      this.isReadyLock = isReadyLock;\n      return isReadyLock;\n    }\n  }, {\n    key: \"setDefaults\",\n    value: function setDefaults(ctx) {\n      // initial values and defaults\n      ctx.strokeStyle = 'rgba(0,0,0,0)';\n      ctx.lineCap = 'butt';\n      ctx.lineJoin = 'miter';\n      ctx.miterLimit = 4;\n    }\n  }, {\n    key: \"setViewBox\",\n    value: function setViewBox(_ref) {\n      var document = _ref.document,\n        ctx = _ref.ctx,\n        aspectRatio = _ref.aspectRatio,\n        width = _ref.width,\n        desiredWidth = _ref.desiredWidth,\n        height = _ref.height,\n        desiredHeight = _ref.desiredHeight,\n        _ref$minX = _ref.minX,\n        minX = _ref$minX === void 0 ? 0 : _ref$minX,\n        _ref$minY = _ref.minY,\n        minY = _ref$minY === void 0 ? 0 : _ref$minY,\n        refX = _ref.refX,\n        refY = _ref.refY,\n        _ref$clip = _ref.clip,\n        clip = _ref$clip === void 0 ? false : _ref$clip,\n        _ref$clipX = _ref.clipX,\n        clipX = _ref$clipX === void 0 ? 0 : _ref$clipX,\n        _ref$clipY = _ref.clipY,\n        clipY = _ref$clipY === void 0 ? 0 : _ref$clipY;\n      // aspect ratio - http://www.w3.org/TR/SVG/coords.html#PreserveAspectRatioAttribute\n      var cleanAspectRatio = compressSpaces(aspectRatio).replace(/^defer\\s/, ''); // ignore defer\n\n      var _cleanAspectRatio$spl = cleanAspectRatio.split(' '),\n        _cleanAspectRatio$spl2 = _slicedToArray(_cleanAspectRatio$spl, 2),\n        aspectRatioAlign = _cleanAspectRatio$spl2[0],\n        aspectRatioMeetOrSlice = _cleanAspectRatio$spl2[1];\n      var align = aspectRatioAlign || 'xMidYMid';\n      var meetOrSlice = aspectRatioMeetOrSlice || 'meet'; // calculate scale\n\n      var scaleX = width / desiredWidth;\n      var scaleY = height / desiredHeight;\n      var scaleMin = Math.min(scaleX, scaleY);\n      var scaleMax = Math.max(scaleX, scaleY);\n      var finalDesiredWidth = desiredWidth;\n      var finalDesiredHeight = desiredHeight;\n      if (meetOrSlice === 'meet') {\n        finalDesiredWidth *= scaleMin;\n        finalDesiredHeight *= scaleMin;\n      }\n      if (meetOrSlice === 'slice') {\n        finalDesiredWidth *= scaleMax;\n        finalDesiredHeight *= scaleMax;\n      }\n      var refXProp = new Property(document, 'refX', refX);\n      var refYProp = new Property(document, 'refY', refY);\n      var hasRefs = refXProp.hasValue() && refYProp.hasValue();\n      if (hasRefs) {\n        ctx.translate(-scaleMin * refXProp.getPixels('x'), -scaleMin * refYProp.getPixels('y'));\n      }\n      if (clip) {\n        var scaledClipX = scaleMin * clipX;\n        var scaledClipY = scaleMin * clipY;\n        ctx.beginPath();\n        ctx.moveTo(scaledClipX, scaledClipY);\n        ctx.lineTo(width, scaledClipY);\n        ctx.lineTo(width, height);\n        ctx.lineTo(scaledClipX, height);\n        ctx.closePath();\n        ctx.clip();\n      }\n      if (!hasRefs) {\n        var isMeetMinY = meetOrSlice === 'meet' && scaleMin === scaleY;\n        var isSliceMaxY = meetOrSlice === 'slice' && scaleMax === scaleY;\n        var isMeetMinX = meetOrSlice === 'meet' && scaleMin === scaleX;\n        var isSliceMaxX = meetOrSlice === 'slice' && scaleMax === scaleX;\n        if (align.startsWith('xMid') && (isMeetMinY || isSliceMaxY)) {\n          ctx.translate(width / 2.0 - finalDesiredWidth / 2.0, 0);\n        }\n        if (align.endsWith('YMid') && (isMeetMinX || isSliceMaxX)) {\n          ctx.translate(0, height / 2.0 - finalDesiredHeight / 2.0);\n        }\n        if (align.startsWith('xMax') && (isMeetMinY || isSliceMaxY)) {\n          ctx.translate(width - finalDesiredWidth, 0);\n        }\n        if (align.endsWith('YMax') && (isMeetMinX || isSliceMaxX)) {\n          ctx.translate(0, height - finalDesiredHeight);\n        }\n      } // scale\n\n      switch (true) {\n        case align === 'none':\n          ctx.scale(scaleX, scaleY);\n          break;\n        case meetOrSlice === 'meet':\n          ctx.scale(scaleMin, scaleMin);\n          break;\n        case meetOrSlice === 'slice':\n          ctx.scale(scaleMax, scaleMax);\n          break;\n      } // translate\n\n      ctx.translate(-minX, -minY);\n    }\n  }, {\n    key: \"start\",\n    value: function start(element) {\n      var _this3 = this;\n      var _ref8 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref8$enableRedraw = _ref8.enableRedraw,\n        enableRedraw = _ref8$enableRedraw === void 0 ? false : _ref8$enableRedraw,\n        _ref8$ignoreMouse = _ref8.ignoreMouse,\n        ignoreMouse = _ref8$ignoreMouse === void 0 ? false : _ref8$ignoreMouse,\n        _ref8$ignoreAnimation = _ref8.ignoreAnimation,\n        ignoreAnimation = _ref8$ignoreAnimation === void 0 ? false : _ref8$ignoreAnimation,\n        _ref8$ignoreDimension = _ref8.ignoreDimensions,\n        ignoreDimensions = _ref8$ignoreDimension === void 0 ? false : _ref8$ignoreDimension,\n        _ref8$ignoreClear = _ref8.ignoreClear,\n        ignoreClear = _ref8$ignoreClear === void 0 ? false : _ref8$ignoreClear,\n        forceRedraw = _ref8.forceRedraw,\n        scaleWidth = _ref8.scaleWidth,\n        scaleHeight = _ref8.scaleHeight,\n        offsetX = _ref8.offsetX,\n        offsetY = _ref8.offsetY;\n      var FRAMERATE = this.FRAMERATE,\n        mouse = this.mouse;\n      var frameDuration = 1000 / FRAMERATE;\n      this.frameDuration = frameDuration;\n      this.readyPromise = new Promise(function (resolve) {\n        _this3.resolveReady = resolve;\n      });\n      if (this.isReady()) {\n        this.render(element, ignoreDimensions, ignoreClear, scaleWidth, scaleHeight, offsetX, offsetY);\n      }\n      if (!enableRedraw) {\n        return;\n      }\n      var now = Date.now();\n      var then = now;\n      var delta = 0;\n      var _tick = function tick() {\n        now = Date.now();\n        delta = now - then;\n        if (delta >= frameDuration) {\n          then = now - delta % frameDuration;\n          if (_this3.shouldUpdate(ignoreAnimation, forceRedraw)) {\n            _this3.render(element, ignoreDimensions, ignoreClear, scaleWidth, scaleHeight, offsetX, offsetY);\n            mouse.runEvents();\n          }\n        }\n        _this3.intervalId = raf__WEBPACK_IMPORTED_MODULE_11__(_tick);\n      };\n      if (!ignoreMouse) {\n        mouse.start();\n      }\n      this.intervalId = raf__WEBPACK_IMPORTED_MODULE_11__(_tick);\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (this.intervalId) {\n        raf__WEBPACK_IMPORTED_MODULE_11__.cancel(this.intervalId);\n        this.intervalId = null;\n      }\n      this.mouse.stop();\n    }\n  }, {\n    key: \"shouldUpdate\",\n    value: function shouldUpdate(ignoreAnimation, forceRedraw) {\n      // need update from animations?\n      if (!ignoreAnimation) {\n        var frameDuration = this.frameDuration;\n        var shouldUpdate = this.animations.reduce(function (shouldUpdate, animation) {\n          return animation.update(frameDuration) || shouldUpdate;\n        }, false);\n        if (shouldUpdate) {\n          return true;\n        }\n      } // need update from redraw?\n\n      if (typeof forceRedraw === 'function' && forceRedraw()) {\n        return true;\n      }\n      if (!this.isReadyLock && this.isReady()) {\n        return true;\n      } // need update from mouse events?\n\n      if (this.mouse.hasEvents()) {\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: \"render\",\n    value: function render(element, ignoreDimensions, ignoreClear, scaleWidth, scaleHeight, offsetX, offsetY) {\n      var CLIENT_WIDTH = this.CLIENT_WIDTH,\n        CLIENT_HEIGHT = this.CLIENT_HEIGHT,\n        viewPort = this.viewPort,\n        ctx = this.ctx,\n        isFirstRender = this.isFirstRender;\n      var canvas = ctx.canvas;\n      viewPort.clear();\n      if (canvas.width && canvas.height) {\n        viewPort.setCurrent(canvas.width, canvas.height);\n      } else {\n        viewPort.setCurrent(CLIENT_WIDTH, CLIENT_HEIGHT);\n      }\n      var widthStyle = element.getStyle('width');\n      var heightStyle = element.getStyle('height');\n      if (!ignoreDimensions && (isFirstRender || typeof scaleWidth !== 'number' && typeof scaleHeight !== 'number')) {\n        // set canvas size\n        if (widthStyle.hasValue()) {\n          canvas.width = widthStyle.getPixels('x');\n          if (canvas.style) {\n            canvas.style.width = \"\".concat(canvas.width, \"px\");\n          }\n        }\n        if (heightStyle.hasValue()) {\n          canvas.height = heightStyle.getPixels('y');\n          if (canvas.style) {\n            canvas.style.height = \"\".concat(canvas.height, \"px\");\n          }\n        }\n      }\n      var cWidth = canvas.clientWidth || canvas.width;\n      var cHeight = canvas.clientHeight || canvas.height;\n      if (ignoreDimensions && widthStyle.hasValue() && heightStyle.hasValue()) {\n        cWidth = widthStyle.getPixels('x');\n        cHeight = heightStyle.getPixels('y');\n      }\n      viewPort.setCurrent(cWidth, cHeight);\n      if (typeof offsetX === 'number') {\n        element.getAttribute('x', true).setValue(offsetX);\n      }\n      if (typeof offsetY === 'number') {\n        element.getAttribute('y', true).setValue(offsetY);\n      }\n      if (typeof scaleWidth === 'number' || typeof scaleHeight === 'number') {\n        var viewBox = toNumbers(element.getAttribute('viewBox').getString());\n        var xRatio = 0;\n        var yRatio = 0;\n        if (typeof scaleWidth === 'number') {\n          var _widthStyle = element.getStyle('width');\n          if (_widthStyle.hasValue()) {\n            xRatio = _widthStyle.getPixels('x') / scaleWidth;\n          } else if (!isNaN(viewBox[2])) {\n            xRatio = viewBox[2] / scaleWidth;\n          }\n        }\n        if (typeof scaleHeight === 'number') {\n          var _heightStyle = element.getStyle('height');\n          if (_heightStyle.hasValue()) {\n            yRatio = _heightStyle.getPixels('y') / scaleHeight;\n          } else if (!isNaN(viewBox[3])) {\n            yRatio = viewBox[3] / scaleHeight;\n          }\n        }\n        if (!xRatio) {\n          xRatio = yRatio;\n        }\n        if (!yRatio) {\n          yRatio = xRatio;\n        }\n        element.getAttribute('width', true).setValue(scaleWidth);\n        element.getAttribute('height', true).setValue(scaleHeight);\n        var transformStyle = element.getStyle('transform', true, true);\n        transformStyle.setValue(\"\".concat(transformStyle.getString(), \" scale(\").concat(1.0 / xRatio, \", \").concat(1.0 / yRatio, \")\"));\n      } // clear and render\n\n      if (!ignoreClear) {\n        ctx.clearRect(0, 0, cWidth, cHeight);\n      }\n      element.render(ctx);\n      if (isFirstRender) {\n        this.isFirstRender = false;\n      }\n    }\n  }]);\n}();\nScreen.defaultWindow = defaultWindow;\nScreen.defaultFetch = defaultFetch$1;\nvar defaultFetch = Screen.defaultFetch;\nvar DefaultDOMParser = typeof DOMParser !== 'undefined' ? DOMParser : null;\nvar Parser = /*#__PURE__*/function () {\n  function Parser() {\n    _classCallCheck(this, Parser);\n    var _ref9 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref9$fetch = _ref9.fetch,\n      fetch = _ref9$fetch === void 0 ? defaultFetch : _ref9$fetch,\n      _ref9$DOMParser = _ref9.DOMParser,\n      DOMParser = _ref9$DOMParser === void 0 ? DefaultDOMParser : _ref9$DOMParser;\n    this.fetch = fetch;\n    this.DOMParser = DOMParser;\n  }\n  return _createClass(Parser, [{\n    key: \"parse\",\n    value: function parse(resource) {\n      var _this = this;\n      return _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!resource.startsWith('<')) {\n                _context2.next = 2;\n                break;\n              }\n              return _context2.abrupt(\"return\", _this.parseFromString(resource));\n            case 2:\n              return _context2.abrupt(\"return\", _this.load(resource));\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }))();\n    }\n  }, {\n    key: \"parseFromString\",\n    value: function parseFromString(xml) {\n      var parser = new this.DOMParser();\n      try {\n        return this.checkDocument(parser.parseFromString(xml, 'image/svg+xml'));\n      } catch (err) {\n        return this.checkDocument(parser.parseFromString(xml, 'text/xml'));\n      }\n    }\n  }, {\n    key: \"checkDocument\",\n    value: function checkDocument(document) {\n      var parserError = document.getElementsByTagName('parsererror')[0];\n      if (parserError) {\n        throw new Error(parserError.textContent);\n      }\n      return document;\n    }\n  }, {\n    key: \"load\",\n    value: function load(url) {\n      var _this2 = this;\n      return _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var response, xml;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _this2.fetch(url);\n            case 2:\n              response = _context3.sent;\n              _context3.next = 5;\n              return response.text();\n            case 5:\n              xml = _context3.sent;\n              return _context3.abrupt(\"return\", _this2.parseFromString(xml));\n            case 7:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3);\n      }))();\n    }\n  }]);\n}();\nvar Translate = /*#__PURE__*/function () {\n  function Translate(_, point) {\n    _classCallCheck(this, Translate);\n    this.type = 'translate';\n    this.point = null;\n    this.point = Point.parse(point);\n  }\n  return _createClass(Translate, [{\n    key: \"apply\",\n    value: function apply(ctx) {\n      var _this$point = this.point,\n        x = _this$point.x,\n        y = _this$point.y;\n      ctx.translate(x || 0.0, y || 0.0);\n    }\n  }, {\n    key: \"unapply\",\n    value: function unapply(ctx) {\n      var _this$point2 = this.point,\n        x = _this$point2.x,\n        y = _this$point2.y;\n      ctx.translate(-1.0 * x || 0.0, -1.0 * y || 0.0);\n    }\n  }, {\n    key: \"applyToPoint\",\n    value: function applyToPoint(point) {\n      var _this$point3 = this.point,\n        x = _this$point3.x,\n        y = _this$point3.y;\n      point.applyTransform([1, 0, 0, 1, x || 0.0, y || 0.0]);\n    }\n  }]);\n}();\nvar Rotate = /*#__PURE__*/function () {\n  function Rotate(document, rotate, transformOrigin) {\n    _classCallCheck(this, Rotate);\n    this.type = 'rotate';\n    this.angle = null;\n    this.originX = null;\n    this.originY = null;\n    this.cx = 0;\n    this.cy = 0;\n    var numbers = toNumbers(rotate);\n    this.angle = new Property(document, 'angle', numbers[0]);\n    this.originX = transformOrigin[0];\n    this.originY = transformOrigin[1];\n    this.cx = numbers[1] || 0;\n    this.cy = numbers[2] || 0;\n  }\n  return _createClass(Rotate, [{\n    key: \"apply\",\n    value: function apply(ctx) {\n      var cx = this.cx,\n        cy = this.cy,\n        originX = this.originX,\n        originY = this.originY,\n        angle = this.angle;\n      var tx = cx + originX.getPixels('x');\n      var ty = cy + originY.getPixels('y');\n      ctx.translate(tx, ty);\n      ctx.rotate(angle.getRadians());\n      ctx.translate(-tx, -ty);\n    }\n  }, {\n    key: \"unapply\",\n    value: function unapply(ctx) {\n      var cx = this.cx,\n        cy = this.cy,\n        originX = this.originX,\n        originY = this.originY,\n        angle = this.angle;\n      var tx = cx + originX.getPixels('x');\n      var ty = cy + originY.getPixels('y');\n      ctx.translate(tx, ty);\n      ctx.rotate(-1.0 * angle.getRadians());\n      ctx.translate(-tx, -ty);\n    }\n  }, {\n    key: \"applyToPoint\",\n    value: function applyToPoint(point) {\n      var cx = this.cx,\n        cy = this.cy,\n        angle = this.angle;\n      var rad = angle.getRadians();\n      point.applyTransform([1, 0, 0, 1, cx || 0.0, cy || 0.0 // this.p.y\n      ]);\n\n      point.applyTransform([Math.cos(rad), Math.sin(rad), -Math.sin(rad), Math.cos(rad), 0, 0]);\n      point.applyTransform([1, 0, 0, 1, -cx || 0.0, -cy || 0.0 // -this.p.y\n      ]);\n    }\n  }]);\n}();\nvar Scale = /*#__PURE__*/function () {\n  function Scale(_, scale, transformOrigin) {\n    _classCallCheck(this, Scale);\n    this.type = 'scale';\n    this.scale = null;\n    this.originX = null;\n    this.originY = null;\n    var scaleSize = Point.parseScale(scale); // Workaround for node-canvas\n\n    if (scaleSize.x === 0 || scaleSize.y === 0) {\n      scaleSize.x = PSEUDO_ZERO;\n      scaleSize.y = PSEUDO_ZERO;\n    }\n    this.scale = scaleSize;\n    this.originX = transformOrigin[0];\n    this.originY = transformOrigin[1];\n  }\n  return _createClass(Scale, [{\n    key: \"apply\",\n    value: function apply(ctx) {\n      var _this$scale = this.scale,\n        x = _this$scale.x,\n        y = _this$scale.y,\n        originX = this.originX,\n        originY = this.originY;\n      var tx = originX.getPixels('x');\n      var ty = originY.getPixels('y');\n      ctx.translate(tx, ty);\n      ctx.scale(x, y || x);\n      ctx.translate(-tx, -ty);\n    }\n  }, {\n    key: \"unapply\",\n    value: function unapply(ctx) {\n      var _this$scale2 = this.scale,\n        x = _this$scale2.x,\n        y = _this$scale2.y,\n        originX = this.originX,\n        originY = this.originY;\n      var tx = originX.getPixels('x');\n      var ty = originY.getPixels('y');\n      ctx.translate(tx, ty);\n      ctx.scale(1.0 / x, 1.0 / y || x);\n      ctx.translate(-tx, -ty);\n    }\n  }, {\n    key: \"applyToPoint\",\n    value: function applyToPoint(point) {\n      var _this$scale3 = this.scale,\n        x = _this$scale3.x,\n        y = _this$scale3.y;\n      point.applyTransform([x || 0.0, 0, 0, y || 0.0, 0, 0]);\n    }\n  }]);\n}();\nvar Matrix = /*#__PURE__*/function () {\n  function Matrix(_, matrix, transformOrigin) {\n    _classCallCheck(this, Matrix);\n    this.type = 'matrix';\n    this.matrix = [];\n    this.originX = null;\n    this.originY = null;\n    this.matrix = toNumbers(matrix);\n    this.originX = transformOrigin[0];\n    this.originY = transformOrigin[1];\n  }\n  return _createClass(Matrix, [{\n    key: \"apply\",\n    value: function apply(ctx) {\n      var originX = this.originX,\n        originY = this.originY,\n        matrix = this.matrix;\n      var tx = originX.getPixels('x');\n      var ty = originY.getPixels('y');\n      ctx.translate(tx, ty);\n      ctx.transform(matrix[0], matrix[1], matrix[2], matrix[3], matrix[4], matrix[5]);\n      ctx.translate(-tx, -ty);\n    }\n  }, {\n    key: \"unapply\",\n    value: function unapply(ctx) {\n      var originX = this.originX,\n        originY = this.originY,\n        matrix = this.matrix;\n      var a = matrix[0];\n      var b = matrix[2];\n      var c = matrix[4];\n      var d = matrix[1];\n      var e = matrix[3];\n      var f = matrix[5];\n      var g = 0.0;\n      var h = 0.0;\n      var i = 1.0;\n      var det = 1 / (a * (e * i - f * h) - b * (d * i - f * g) + c * (d * h - e * g));\n      var tx = originX.getPixels('x');\n      var ty = originY.getPixels('y');\n      ctx.translate(tx, ty);\n      ctx.transform(det * (e * i - f * h), det * (f * g - d * i), det * (c * h - b * i), det * (a * i - c * g), det * (b * f - c * e), det * (c * d - a * f));\n      ctx.translate(-tx, -ty);\n    }\n  }, {\n    key: \"applyToPoint\",\n    value: function applyToPoint(point) {\n      point.applyTransform(this.matrix);\n    }\n  }]);\n}();\nvar Skew = /*#__PURE__*/function (_Matrix) {\n  function Skew(document, skew, transformOrigin) {\n    var _this4;\n    _classCallCheck(this, Skew);\n    _this4 = _callSuper(this, Skew, [document, skew, transformOrigin]);\n    _this4.type = 'skew';\n    _this4.angle = null;\n    _this4.angle = new Property(document, 'angle', skew);\n    return _this4;\n  }\n  _inherits(Skew, _Matrix);\n  return _createClass(Skew);\n}(Matrix);\nvar SkewX = /*#__PURE__*/function (_Skew) {\n  function SkewX(document, skew, transformOrigin) {\n    var _this5;\n    _classCallCheck(this, SkewX);\n    _this5 = _callSuper(this, SkewX, [document, skew, transformOrigin]);\n    _this5.type = 'skewX';\n    _this5.matrix = [1, 0, Math.tan(_this5.angle.getRadians()), 1, 0, 0];\n    return _this5;\n  }\n  _inherits(SkewX, _Skew);\n  return _createClass(SkewX);\n}(Skew);\nvar SkewY = /*#__PURE__*/function (_Skew2) {\n  function SkewY(document, skew, transformOrigin) {\n    var _this6;\n    _classCallCheck(this, SkewY);\n    _this6 = _callSuper(this, SkewY, [document, skew, transformOrigin]);\n    _this6.type = 'skewY';\n    _this6.matrix = [1, Math.tan(_this6.angle.getRadians()), 0, 1, 0, 0];\n    return _this6;\n  }\n  _inherits(SkewY, _Skew2);\n  return _createClass(SkewY);\n}(Skew);\nfunction parseTransforms(transform) {\n  return compressSpaces(transform).trim().replace(/\\)([a-zA-Z])/g, ') $1').replace(/\\)(\\s?,\\s?)/g, ') ').split(/\\s(?=[a-z])/);\n}\nfunction parseTransform(transform) {\n  var _transform$split = transform.split('('),\n    _transform$split2 = _slicedToArray(_transform$split, 2),\n    type = _transform$split2[0],\n    value = _transform$split2[1];\n  return [type.trim(), value.trim().replace(')', '')];\n}\nvar Transform = /*#__PURE__*/function () {\n  function Transform(document, transform, transformOrigin) {\n    var _this7 = this;\n    _classCallCheck(this, Transform);\n    this.document = document;\n    this.transforms = [];\n    var data = parseTransforms(transform);\n    data.forEach(function (transform) {\n      if (transform === 'none') {\n        return;\n      }\n      var _parseTransform = parseTransform(transform),\n        _parseTransform2 = _slicedToArray(_parseTransform, 2),\n        type = _parseTransform2[0],\n        value = _parseTransform2[1];\n      var TransformType = Transform.transformTypes[type];\n      if (typeof TransformType !== 'undefined') {\n        _this7.transforms.push(new TransformType(_this7.document, value, transformOrigin));\n      }\n    });\n  }\n  return _createClass(Transform, [{\n    key: \"apply\",\n    value: function apply(ctx) {\n      var transforms = this.transforms;\n      var len = transforms.length;\n      for (var i = 0; i < len; i++) {\n        transforms[i].apply(ctx);\n      }\n    }\n  }, {\n    key: \"unapply\",\n    value: function unapply(ctx) {\n      var transforms = this.transforms;\n      var len = transforms.length;\n      for (var i = len - 1; i >= 0; i--) {\n        transforms[i].unapply(ctx);\n      }\n    } // TODO: applyToPoint unused ... remove?\n  }, {\n    key: \"applyToPoint\",\n    value: function applyToPoint(point) {\n      var transforms = this.transforms;\n      var len = transforms.length;\n      for (var i = 0; i < len; i++) {\n        transforms[i].applyToPoint(point);\n      }\n    }\n  }], [{\n    key: \"fromElement\",\n    value: function fromElement(document, element) {\n      var transformStyle = element.getStyle('transform', false, true);\n      var _element$getStyle$spl = element.getStyle('transform-origin', false, true).split(),\n        _element$getStyle$spl2 = _slicedToArray(_element$getStyle$spl, 2),\n        transformOriginXProperty = _element$getStyle$spl2[0],\n        _element$getStyle$spl3 = _element$getStyle$spl2[1],\n        transformOriginYProperty = _element$getStyle$spl3 === void 0 ? transformOriginXProperty : _element$getStyle$spl3;\n      var transformOrigin = [transformOriginXProperty, transformOriginYProperty];\n      if (transformStyle.hasValue()) {\n        return new Transform(document, transformStyle.getString(), transformOrigin);\n      }\n      return null;\n    }\n  }]);\n}();\nTransform.transformTypes = {\n  translate: Translate,\n  rotate: Rotate,\n  scale: Scale,\n  matrix: Matrix,\n  skewX: SkewX,\n  skewY: SkewY\n};\nvar Element = /*#__PURE__*/function () {\n  function Element(document, node) {\n    var _this8 = this;\n    _classCallCheck(this, Element);\n    var captureTextNodes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    this.document = document;\n    this.node = node;\n    this.captureTextNodes = captureTextNodes;\n    this.attributes = Object.create(null);\n    this.styles = Object.create(null);\n    this.stylesSpecificity = Object.create(null);\n    this.animationFrozen = false;\n    this.animationFrozenValue = '';\n    this.parent = null;\n    this.children = [];\n    if (!node || node.nodeType !== 1) {\n      // ELEMENT_NODE\n      return;\n    } // add attributes\n\n    Array.from(node.attributes).forEach(function (attribute) {\n      var nodeName = normalizeAttributeName(attribute.nodeName);\n      _this8.attributes[nodeName] = new Property(document, nodeName, attribute.value);\n    });\n    this.addStylesFromStyleDefinition(); // add inline styles\n\n    if (this.getAttribute('style').hasValue()) {\n      var styles = this.getAttribute('style').getString().split(';').map(function (_) {\n        return _.trim();\n      });\n      styles.forEach(function (style) {\n        if (!style) {\n          return;\n        }\n        var _style$split$map = style.split(':').map(function (_) {\n            return _.trim();\n          }),\n          _style$split$map2 = _slicedToArray(_style$split$map, 2),\n          name = _style$split$map2[0],\n          value = _style$split$map2[1];\n        _this8.styles[name] = new Property(document, name, value);\n      });\n    }\n    var definitions = document.definitions;\n    var id = this.getAttribute('id'); // add id\n\n    if (id.hasValue()) {\n      if (!definitions[id.getString()]) {\n        definitions[id.getString()] = this;\n      }\n    }\n    Array.from(node.childNodes).forEach(function (childNode) {\n      if (childNode.nodeType === 1) {\n        _this8.addChild(childNode); // ELEMENT_NODE\n      } else if (captureTextNodes && (childNode.nodeType === 3 || childNode.nodeType === 4)) {\n        var textNode = document.createTextNode(childNode);\n        if (textNode.getText().length > 0) {\n          _this8.addChild(textNode); // TEXT_NODE\n        }\n      }\n    });\n  }\n  return _createClass(Element, [{\n    key: \"getAttribute\",\n    value: function getAttribute(name) {\n      var createIfNotExists = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var attr = this.attributes[name];\n      if (!attr && createIfNotExists) {\n        var _attr = new Property(this.document, name, '');\n        this.attributes[name] = _attr;\n        return _attr;\n      }\n      return attr || Property.empty(this.document);\n    }\n  }, {\n    key: \"getHrefAttribute\",\n    value: function getHrefAttribute() {\n      for (var key in this.attributes) {\n        if (key === 'href' || key.endsWith(':href')) {\n          return this.attributes[key];\n        }\n      }\n      return Property.empty(this.document);\n    }\n  }, {\n    key: \"getStyle\",\n    value: function getStyle(name) {\n      var createIfNotExists = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var skipAncestors = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var style = this.styles[name];\n      if (style) {\n        return style;\n      }\n      var attr = this.getAttribute(name);\n      if (attr !== null && attr !== void 0 && attr.hasValue()) {\n        this.styles[name] = attr; // move up to me to cache\n\n        return attr;\n      }\n      if (!skipAncestors) {\n        var parent = this.parent;\n        if (parent) {\n          var parentStyle = parent.getStyle(name);\n          if (parentStyle !== null && parentStyle !== void 0 && parentStyle.hasValue()) {\n            return parentStyle;\n          }\n        }\n      }\n      if (createIfNotExists) {\n        var _style = new Property(this.document, name, '');\n        this.styles[name] = _style;\n        return _style;\n      }\n      return style || Property.empty(this.document);\n    }\n  }, {\n    key: \"render\",\n    value: function render(ctx) {\n      // don't render display=none\n      // don't render visibility=hidden\n      if (this.getStyle('display').getString() === 'none' || this.getStyle('visibility').getString() === 'hidden') {\n        return;\n      }\n      ctx.save();\n      if (this.getStyle('mask').hasValue()) {\n        // mask\n        var mask = this.getStyle('mask').getDefinition();\n        if (mask) {\n          this.applyEffects(ctx);\n          mask.apply(ctx, this);\n        }\n      } else if (this.getStyle('filter').getValue('none') !== 'none') {\n        // filter\n        var filter = this.getStyle('filter').getDefinition();\n        if (filter) {\n          this.applyEffects(ctx);\n          filter.apply(ctx, this);\n        }\n      } else {\n        this.setContext(ctx);\n        this.renderChildren(ctx);\n        this.clearContext(ctx);\n      }\n      ctx.restore();\n    }\n  }, {\n    key: \"setContext\",\n    value: function setContext(_) {// NO RENDER\n    }\n  }, {\n    key: \"applyEffects\",\n    value: function applyEffects(ctx) {\n      // transform\n      var transform = Transform.fromElement(this.document, this);\n      if (transform) {\n        transform.apply(ctx);\n      } // clip\n\n      var clipPathStyleProp = this.getStyle('clip-path', false, true);\n      if (clipPathStyleProp.hasValue()) {\n        var clip = clipPathStyleProp.getDefinition();\n        if (clip) {\n          clip.apply(ctx);\n        }\n      }\n    }\n  }, {\n    key: \"clearContext\",\n    value: function clearContext(_) {// NO RENDER\n    }\n  }, {\n    key: \"renderChildren\",\n    value: function renderChildren(ctx) {\n      this.children.forEach(function (child) {\n        child.render(ctx);\n      });\n    }\n  }, {\n    key: \"addChild\",\n    value: function addChild(childNode) {\n      var child = childNode instanceof Element ? childNode : this.document.createElement(childNode);\n      child.parent = this;\n      if (!Element.ignoreChildTypes.includes(child.type)) {\n        this.children.push(child);\n      }\n    }\n  }, {\n    key: \"matchesSelector\",\n    value: function matchesSelector(selector) {\n      var _node$getAttribute;\n      var node = this.node;\n      if (typeof node.matches === 'function') {\n        return node.matches(selector);\n      }\n      var styleClasses = (_node$getAttribute = node.getAttribute) === null || _node$getAttribute === void 0 ? void 0 : _node$getAttribute.call(node, 'class');\n      if (!styleClasses || styleClasses === '') {\n        return false;\n      }\n      return styleClasses.split(' ').some(function (styleClass) {\n        return \".\".concat(styleClass) === selector;\n      });\n    }\n  }, {\n    key: \"addStylesFromStyleDefinition\",\n    value: function addStylesFromStyleDefinition() {\n      var _this$document = this.document,\n        styles = _this$document.styles,\n        stylesSpecificity = _this$document.stylesSpecificity;\n      for (var selector in styles) {\n        if (!selector.startsWith('@') && this.matchesSelector(selector)) {\n          var style = styles[selector];\n          var specificity = stylesSpecificity[selector];\n          if (style) {\n            for (var name in style) {\n              var existingSpecificity = this.stylesSpecificity[name];\n              if (typeof existingSpecificity === 'undefined') {\n                existingSpecificity = '000';\n              }\n              if (specificity >= existingSpecificity) {\n                this.styles[name] = style[name];\n                this.stylesSpecificity[name] = specificity;\n              }\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: \"removeStyles\",\n    value: function removeStyles(element, ignoreStyles) {\n      var toRestore = ignoreStyles.reduce(function (toRestore, name) {\n        var styleProp = element.getStyle(name);\n        if (!styleProp.hasValue()) {\n          return toRestore;\n        }\n        var value = styleProp.getString();\n        styleProp.setValue('');\n        return [].concat(_toConsumableArray(toRestore), [[name, value]]);\n      }, []);\n      return toRestore;\n    }\n  }, {\n    key: \"restoreStyles\",\n    value: function restoreStyles(element, styles) {\n      styles.forEach(function (_ref) {\n        var _ref10 = _slicedToArray(_ref, 2),\n          name = _ref10[0],\n          value = _ref10[1];\n        element.getStyle(name, true).setValue(value);\n      });\n    }\n  }, {\n    key: \"isFirstChild\",\n    value: function isFirstChild() {\n      var _this$parent;\n      return ((_this$parent = this.parent) === null || _this$parent === void 0 ? void 0 : _this$parent.children.indexOf(this)) === 0;\n    }\n  }]);\n}();\nElement.ignoreChildTypes = ['title'];\nvar UnknownElement = /*#__PURE__*/function (_Element) {\n  function UnknownElement(document, node, captureTextNodes) {\n    _classCallCheck(this, UnknownElement);\n    return _callSuper(this, UnknownElement, [document, node, captureTextNodes]);\n  }\n  _inherits(UnknownElement, _Element);\n  return _createClass(UnknownElement);\n}(Element);\nfunction wrapFontFamily(fontFamily) {\n  var trimmed = fontFamily.trim();\n  return /^('|\")/.test(trimmed) ? trimmed : \"\\\"\".concat(trimmed, \"\\\"\");\n}\nfunction prepareFontFamily(fontFamily) {\n  return typeof process === 'undefined' ? fontFamily : fontFamily.trim().split(',').map(wrapFontFamily).join(',');\n}\n/**\r\n * https://developer.mozilla.org/en-US/docs/Web/CSS/font-style\r\n * @param fontStyle\r\n * @returns CSS font style.\r\n */\n\nfunction prepareFontStyle(fontStyle) {\n  if (!fontStyle) {\n    return '';\n  }\n  var targetFontStyle = fontStyle.trim().toLowerCase();\n  switch (targetFontStyle) {\n    case 'normal':\n    case 'italic':\n    case 'oblique':\n    case 'inherit':\n    case 'initial':\n    case 'unset':\n      return targetFontStyle;\n    default:\n      if (/^oblique\\s+(-|)\\d+deg$/.test(targetFontStyle)) {\n        return targetFontStyle;\n      }\n      return '';\n  }\n}\n/**\r\n * https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight\r\n * @param fontWeight\r\n * @returns CSS font weight.\r\n */\n\nfunction prepareFontWeight(fontWeight) {\n  if (!fontWeight) {\n    return '';\n  }\n  var targetFontWeight = fontWeight.trim().toLowerCase();\n  switch (targetFontWeight) {\n    case 'normal':\n    case 'bold':\n    case 'lighter':\n    case 'bolder':\n    case 'inherit':\n    case 'initial':\n    case 'unset':\n      return targetFontWeight;\n    default:\n      if (/^[\\d.]+$/.test(targetFontWeight)) {\n        return targetFontWeight;\n      }\n      return '';\n  }\n}\nvar Font = /*#__PURE__*/function () {\n  function Font(fontStyle, fontVariant, fontWeight, fontSize, fontFamily, inherit) {\n    _classCallCheck(this, Font);\n    var inheritFont = inherit ? typeof inherit === 'string' ? Font.parse(inherit) : inherit : {};\n    this.fontFamily = fontFamily || inheritFont.fontFamily;\n    this.fontSize = fontSize || inheritFont.fontSize;\n    this.fontStyle = fontStyle || inheritFont.fontStyle;\n    this.fontWeight = fontWeight || inheritFont.fontWeight;\n    this.fontVariant = fontVariant || inheritFont.fontVariant;\n  }\n  return _createClass(Font, [{\n    key: \"toString\",\n    value: function toString() {\n      return [prepareFontStyle(this.fontStyle), this.fontVariant, prepareFontWeight(this.fontWeight), this.fontSize,\n      // Wrap fontFamily only on nodejs and only for canvas.ctx\n      prepareFontFamily(this.fontFamily)].join(' ').trim();\n    }\n  }], [{\n    key: \"parse\",\n    value: function parse() {\n      var font = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var inherit = arguments.length > 1 ? arguments[1] : undefined;\n      var fontStyle = '';\n      var fontVariant = '';\n      var fontWeight = '';\n      var fontSize = '';\n      var fontFamily = '';\n      var parts = compressSpaces(font).trim().split(' ');\n      var set = {\n        fontSize: false,\n        fontStyle: false,\n        fontWeight: false,\n        fontVariant: false\n      };\n      parts.forEach(function (part) {\n        switch (true) {\n          case !set.fontStyle && Font.styles.includes(part):\n            if (part !== 'inherit') {\n              fontStyle = part;\n            }\n            set.fontStyle = true;\n            break;\n          case !set.fontVariant && Font.variants.includes(part):\n            if (part !== 'inherit') {\n              fontVariant = part;\n            }\n            set.fontStyle = true;\n            set.fontVariant = true;\n            break;\n          case !set.fontWeight && Font.weights.includes(part):\n            if (part !== 'inherit') {\n              fontWeight = part;\n            }\n            set.fontStyle = true;\n            set.fontVariant = true;\n            set.fontWeight = true;\n            break;\n          case !set.fontSize:\n            if (part !== 'inherit') {\n              var _part$split = part.split('/');\n              var _part$split2 = _slicedToArray(_part$split, 1);\n              fontSize = _part$split2[0];\n            }\n            set.fontStyle = true;\n            set.fontVariant = true;\n            set.fontWeight = true;\n            set.fontSize = true;\n            break;\n          default:\n            if (part !== 'inherit') {\n              fontFamily += part;\n            }\n        }\n      });\n      return new Font(fontStyle, fontVariant, fontWeight, fontSize, fontFamily, inherit);\n    }\n  }]);\n}();\nFont.styles = 'normal|italic|oblique|inherit';\nFont.variants = 'normal|small-caps|inherit';\nFont.weights = 'normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900|inherit';\nvar BoundingBox = /*#__PURE__*/function () {\n  function BoundingBox() {\n    _classCallCheck(this, BoundingBox);\n    var x1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Number.NaN;\n    var y1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.NaN;\n    var x2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Number.NaN;\n    var y2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Number.NaN;\n    this.x1 = x1;\n    this.y1 = y1;\n    this.x2 = x2;\n    this.y2 = y2;\n    this.addPoint(x1, y1);\n    this.addPoint(x2, y2);\n  }\n  return _createClass(BoundingBox, [{\n    key: \"x\",\n    get: function get() {\n      return this.x1;\n    }\n  }, {\n    key: \"y\",\n    get: function get() {\n      return this.y1;\n    }\n  }, {\n    key: \"width\",\n    get: function get() {\n      return this.x2 - this.x1;\n    }\n  }, {\n    key: \"height\",\n    get: function get() {\n      return this.y2 - this.y1;\n    }\n  }, {\n    key: \"addPoint\",\n    value: function addPoint(x, y) {\n      if (typeof x !== 'undefined') {\n        if (isNaN(this.x1) || isNaN(this.x2)) {\n          this.x1 = x;\n          this.x2 = x;\n        }\n        if (x < this.x1) {\n          this.x1 = x;\n        }\n        if (x > this.x2) {\n          this.x2 = x;\n        }\n      }\n      if (typeof y !== 'undefined') {\n        if (isNaN(this.y1) || isNaN(this.y2)) {\n          this.y1 = y;\n          this.y2 = y;\n        }\n        if (y < this.y1) {\n          this.y1 = y;\n        }\n        if (y > this.y2) {\n          this.y2 = y;\n        }\n      }\n    }\n  }, {\n    key: \"addX\",\n    value: function addX(x) {\n      this.addPoint(x, null);\n    }\n  }, {\n    key: \"addY\",\n    value: function addY(y) {\n      this.addPoint(null, y);\n    }\n  }, {\n    key: \"addBoundingBox\",\n    value: function addBoundingBox(boundingBox) {\n      if (!boundingBox) {\n        return;\n      }\n      var x1 = boundingBox.x1,\n        y1 = boundingBox.y1,\n        x2 = boundingBox.x2,\n        y2 = boundingBox.y2;\n      this.addPoint(x1, y1);\n      this.addPoint(x2, y2);\n    }\n  }, {\n    key: \"sumCubic\",\n    value: function sumCubic(t, p0, p1, p2, p3) {\n      return Math.pow(1 - t, 3) * p0 + 3 * Math.pow(1 - t, 2) * t * p1 + 3 * (1 - t) * Math.pow(t, 2) * p2 + Math.pow(t, 3) * p3;\n    }\n  }, {\n    key: \"bezierCurveAdd\",\n    value: function bezierCurveAdd(forX, p0, p1, p2, p3) {\n      var b = 6 * p0 - 12 * p1 + 6 * p2;\n      var a = -3 * p0 + 9 * p1 - 9 * p2 + 3 * p3;\n      var c = 3 * p1 - 3 * p0;\n      if (a === 0) {\n        if (b === 0) {\n          return;\n        }\n        var t = -c / b;\n        if (0 < t && t < 1) {\n          if (forX) {\n            this.addX(this.sumCubic(t, p0, p1, p2, p3));\n          } else {\n            this.addY(this.sumCubic(t, p0, p1, p2, p3));\n          }\n        }\n        return;\n      }\n      var b2ac = Math.pow(b, 2) - 4 * c * a;\n      if (b2ac < 0) {\n        return;\n      }\n      var t1 = (-b + Math.sqrt(b2ac)) / (2 * a);\n      if (0 < t1 && t1 < 1) {\n        if (forX) {\n          this.addX(this.sumCubic(t1, p0, p1, p2, p3));\n        } else {\n          this.addY(this.sumCubic(t1, p0, p1, p2, p3));\n        }\n      }\n      var t2 = (-b - Math.sqrt(b2ac)) / (2 * a);\n      if (0 < t2 && t2 < 1) {\n        if (forX) {\n          this.addX(this.sumCubic(t2, p0, p1, p2, p3));\n        } else {\n          this.addY(this.sumCubic(t2, p0, p1, p2, p3));\n        }\n      }\n    } // from http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n  }, {\n    key: \"addBezierCurve\",\n    value: function addBezierCurve(p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y) {\n      this.addPoint(p0x, p0y);\n      this.addPoint(p3x, p3y);\n      this.bezierCurveAdd(true, p0x, p1x, p2x, p3x);\n      this.bezierCurveAdd(false, p0y, p1y, p2y, p3y);\n    }\n  }, {\n    key: \"addQuadraticCurve\",\n    value: function addQuadraticCurve(p0x, p0y, p1x, p1y, p2x, p2y) {\n      var cp1x = p0x + 2 / 3 * (p1x - p0x); // CP1 = QP0 + 2/3 *(QP1-QP0)\n\n      var cp1y = p0y + 2 / 3 * (p1y - p0y); // CP1 = QP0 + 2/3 *(QP1-QP0)\n\n      var cp2x = cp1x + 1 / 3 * (p2x - p0x); // CP2 = CP1 + 1/3 *(QP2-QP0)\n\n      var cp2y = cp1y + 1 / 3 * (p2y - p0y); // CP2 = CP1 + 1/3 *(QP2-QP0)\n\n      this.addBezierCurve(p0x, p0y, cp1x, cp2x, cp1y, cp2y, p2x, p2y);\n    }\n  }, {\n    key: \"isPointInBox\",\n    value: function isPointInBox(x, y) {\n      var x1 = this.x1,\n        y1 = this.y1,\n        x2 = this.x2,\n        y2 = this.y2;\n      return x1 <= x && x <= x2 && y1 <= y && y <= y2;\n    }\n  }]);\n}();\nvar PathParser = /*#__PURE__*/function (_SVGPathData) {\n  function PathParser(path) {\n    var _this9;\n    _classCallCheck(this, PathParser);\n    _this9 = _callSuper(this, PathParser, [path // Fix spaces after signs.\n    .replace(/([+\\-.])\\s+/gm, '$1') // Remove invalid part.\n    .replace(/[^MmZzLlHhVvCcSsQqTtAae\\d\\s.,+-].*/g, '')]);\n    _this9.control = null;\n    _this9.start = null;\n    _this9.current = null;\n    _this9.command = null;\n    _this9.commands = _this9.commands;\n    _this9.i = -1;\n    _this9.previousCommand = null;\n    _this9.points = [];\n    _this9.angles = [];\n    return _this9;\n  }\n  _inherits(PathParser, _SVGPathData);\n  return _createClass(PathParser, [{\n    key: \"reset\",\n    value: function reset() {\n      this.i = -1;\n      this.command = null;\n      this.previousCommand = null;\n      this.start = new Point(0, 0);\n      this.control = new Point(0, 0);\n      this.current = new Point(0, 0);\n      this.points = [];\n      this.angles = [];\n    }\n  }, {\n    key: \"isEnd\",\n    value: function isEnd() {\n      var i = this.i,\n        commands = this.commands;\n      return i >= commands.length - 1;\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      var command = this.commands[++this.i];\n      this.previousCommand = this.command;\n      this.command = command;\n      return command;\n    }\n  }, {\n    key: \"getPoint\",\n    value: function getPoint() {\n      var xProp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'x';\n      var yProp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'y';\n      var point = new Point(this.command[xProp], this.command[yProp]);\n      return this.makeAbsolute(point);\n    }\n  }, {\n    key: \"getAsControlPoint\",\n    value: function getAsControlPoint(xProp, yProp) {\n      var point = this.getPoint(xProp, yProp);\n      this.control = point;\n      return point;\n    }\n  }, {\n    key: \"getAsCurrentPoint\",\n    value: function getAsCurrentPoint(xProp, yProp) {\n      var point = this.getPoint(xProp, yProp);\n      this.current = point;\n      return point;\n    }\n  }, {\n    key: \"getReflectedControlPoint\",\n    value: function getReflectedControlPoint() {\n      var previousCommand = this.previousCommand.type;\n      if (previousCommand !== svg_pathdata__WEBPACK_IMPORTED_MODULE_17__.SVGPathData.CURVE_TO && previousCommand !== svg_pathdata__WEBPACK_IMPORTED_MODULE_17__.SVGPathData.SMOOTH_CURVE_TO && previousCommand !== svg_pathdata__WEBPACK_IMPORTED_MODULE_17__.SVGPathData.QUAD_TO && previousCommand !== svg_pathdata__WEBPACK_IMPORTED_MODULE_17__.SVGPathData.SMOOTH_QUAD_TO) {\n        return this.current;\n      } // reflect point\n\n      var _this$current = this.current,\n        cx = _this$current.x,\n        cy = _this$current.y,\n        _this$control = this.control,\n        ox = _this$control.x,\n        oy = _this$control.y;\n      var point = new Point(2 * cx - ox, 2 * cy - oy);\n      return point;\n    }\n  }, {\n    key: \"makeAbsolute\",\n    value: function makeAbsolute(point) {\n      if (this.command.relative) {\n        var _this$current2 = this.current,\n          x = _this$current2.x,\n          y = _this$current2.y;\n        point.x += x;\n        point.y += y;\n      }\n      return point;\n    }\n  }, {\n    key: \"addMarker\",\n    value: function addMarker(point, from, priorTo) {\n      var points = this.points,\n        angles = this.angles; // if the last angle isn't filled in because we didn't have this point yet ...\n\n      if (priorTo && angles.length > 0 && !angles[angles.length - 1]) {\n        angles[angles.length - 1] = points[points.length - 1].angleTo(priorTo);\n      }\n      this.addMarkerAngle(point, from ? from.angleTo(point) : null);\n    }\n  }, {\n    key: \"addMarkerAngle\",\n    value: function addMarkerAngle(point, angle) {\n      this.points.push(point);\n      this.angles.push(angle);\n    }\n  }, {\n    key: \"getMarkerPoints\",\n    value: function getMarkerPoints() {\n      return this.points;\n    }\n  }, {\n    key: \"getMarkerAngles\",\n    value: function getMarkerAngles() {\n      var angles = this.angles;\n      var len = angles.length;\n      for (var i = 0; i < len; i++) {\n        if (!angles[i]) {\n          for (var j = i + 1; j < len; j++) {\n            if (angles[j]) {\n              angles[i] = angles[j];\n              break;\n            }\n          }\n        }\n      }\n      return angles;\n    }\n  }]);\n}(svg_pathdata__WEBPACK_IMPORTED_MODULE_17__.SVGPathData);\nvar RenderedElement = /*#__PURE__*/function (_Element2) {\n  function RenderedElement() {\n    var _this10;\n    _classCallCheck(this, RenderedElement);\n    _this10 = _callSuper(this, RenderedElement, arguments);\n    _this10.modifiedEmSizeStack = false;\n    return _this10;\n  }\n  _inherits(RenderedElement, _Element2);\n  return _createClass(RenderedElement, [{\n    key: \"calculateOpacity\",\n    value: function calculateOpacity() {\n      var opacity = 1.0; // eslint-disable-next-line @typescript-eslint/no-this-alias, consistent-this\n\n      var element = this;\n      while (element) {\n        var opacityStyle = element.getStyle('opacity', false, true); // no ancestors on style call\n\n        if (opacityStyle.hasValue(true)) {\n          opacity *= opacityStyle.getNumber();\n        }\n        element = element.parent;\n      }\n      return opacity;\n    }\n  }, {\n    key: \"setContext\",\n    value: function setContext(ctx) {\n      var fromMeasure = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (!fromMeasure) {\n        // causes stack overflow when measuring text with gradients\n        // fill\n        var fillStyleProp = this.getStyle('fill');\n        var fillOpacityStyleProp = this.getStyle('fill-opacity');\n        var strokeStyleProp = this.getStyle('stroke');\n        var strokeOpacityProp = this.getStyle('stroke-opacity');\n        if (fillStyleProp.isUrlDefinition()) {\n          var fillStyle = fillStyleProp.getFillStyleDefinition(this, fillOpacityStyleProp);\n          if (fillStyle) {\n            ctx.fillStyle = fillStyle;\n          }\n        } else if (fillStyleProp.hasValue()) {\n          if (fillStyleProp.getString() === 'currentColor') {\n            fillStyleProp.setValue(this.getStyle('color').getColor());\n          }\n          var _fillStyle = fillStyleProp.getColor();\n          if (_fillStyle !== 'inherit') {\n            ctx.fillStyle = _fillStyle === 'none' ? 'rgba(0,0,0,0)' : _fillStyle;\n          }\n        }\n        if (fillOpacityStyleProp.hasValue()) {\n          var _fillStyle2 = new Property(this.document, 'fill', ctx.fillStyle).addOpacity(fillOpacityStyleProp).getColor();\n          ctx.fillStyle = _fillStyle2;\n        } // stroke\n\n        if (strokeStyleProp.isUrlDefinition()) {\n          var strokeStyle = strokeStyleProp.getFillStyleDefinition(this, strokeOpacityProp);\n          if (strokeStyle) {\n            ctx.strokeStyle = strokeStyle;\n          }\n        } else if (strokeStyleProp.hasValue()) {\n          if (strokeStyleProp.getString() === 'currentColor') {\n            strokeStyleProp.setValue(this.getStyle('color').getColor());\n          }\n          var _strokeStyle = strokeStyleProp.getString();\n          if (_strokeStyle !== 'inherit') {\n            ctx.strokeStyle = _strokeStyle === 'none' ? 'rgba(0,0,0,0)' : _strokeStyle;\n          }\n        }\n        if (strokeOpacityProp.hasValue()) {\n          var _strokeStyle2 = new Property(this.document, 'stroke', ctx.strokeStyle).addOpacity(strokeOpacityProp).getString();\n          ctx.strokeStyle = _strokeStyle2;\n        }\n        var strokeWidthStyleProp = this.getStyle('stroke-width');\n        if (strokeWidthStyleProp.hasValue()) {\n          var newLineWidth = strokeWidthStyleProp.getPixels();\n          ctx.lineWidth = !newLineWidth ? PSEUDO_ZERO // browsers don't respect 0 (or node-canvas? :-)\n          : newLineWidth;\n        }\n        var strokeLinecapStyleProp = this.getStyle('stroke-linecap');\n        var strokeLinejoinStyleProp = this.getStyle('stroke-linejoin');\n        var strokeMiterlimitProp = this.getStyle('stroke-miterlimit'); // NEED TEST\n        // const pointOrderStyleProp = this.getStyle('paint-order');\n\n        var strokeDasharrayStyleProp = this.getStyle('stroke-dasharray');\n        var strokeDashoffsetProp = this.getStyle('stroke-dashoffset');\n        if (strokeLinecapStyleProp.hasValue()) {\n          ctx.lineCap = strokeLinecapStyleProp.getString();\n        }\n        if (strokeLinejoinStyleProp.hasValue()) {\n          ctx.lineJoin = strokeLinejoinStyleProp.getString();\n        }\n        if (strokeMiterlimitProp.hasValue()) {\n          ctx.miterLimit = strokeMiterlimitProp.getNumber();\n        } // NEED TEST\n        // if (pointOrderStyleProp.hasValue()) {\n        // \t// ?\n        // \tctx.paintOrder = pointOrderStyleProp.getValue();\n        // }\n\n        if (strokeDasharrayStyleProp.hasValue() && strokeDasharrayStyleProp.getString() !== 'none') {\n          var gaps = toNumbers(strokeDasharrayStyleProp.getString());\n          if (typeof ctx.setLineDash !== 'undefined') {\n            ctx.setLineDash(gaps);\n          } else\n            // @ts-expect-error Handle browser prefix.\n            if (typeof ctx.webkitLineDash !== 'undefined') {\n              // @ts-expect-error Handle browser prefix.\n              ctx.webkitLineDash = gaps;\n            } else\n              // @ts-expect-error Handle browser prefix.\n              if (typeof ctx.mozDash !== 'undefined' && !(gaps.length === 1 && gaps[0] === 0)) {\n                // @ts-expect-error Handle browser prefix.\n                ctx.mozDash = gaps;\n              }\n          var offset = strokeDashoffsetProp.getPixels();\n          if (typeof ctx.lineDashOffset !== 'undefined') {\n            ctx.lineDashOffset = offset;\n          } else\n            // @ts-expect-error Handle browser prefix.\n            if (typeof ctx.webkitLineDashOffset !== 'undefined') {\n              // @ts-expect-error Handle browser prefix.\n              ctx.webkitLineDashOffset = offset;\n            } else\n              // @ts-expect-error Handle browser prefix.\n              if (typeof ctx.mozDashOffset !== 'undefined') {\n                // @ts-expect-error Handle browser prefix.\n                ctx.mozDashOffset = offset;\n              }\n        }\n      } // font\n\n      this.modifiedEmSizeStack = false;\n      if (typeof ctx.font !== 'undefined') {\n        var fontStyleProp = this.getStyle('font');\n        var fontStyleStyleProp = this.getStyle('font-style');\n        var fontVariantStyleProp = this.getStyle('font-variant');\n        var fontWeightStyleProp = this.getStyle('font-weight');\n        var fontSizeStyleProp = this.getStyle('font-size');\n        var fontFamilyStyleProp = this.getStyle('font-family');\n        var font = new Font(fontStyleStyleProp.getString(), fontVariantStyleProp.getString(), fontWeightStyleProp.getString(), fontSizeStyleProp.hasValue() ? \"\".concat(fontSizeStyleProp.getPixels(true), \"px\") : '', fontFamilyStyleProp.getString(), Font.parse(fontStyleProp.getString(), ctx.font));\n        fontStyleStyleProp.setValue(font.fontStyle);\n        fontVariantStyleProp.setValue(font.fontVariant);\n        fontWeightStyleProp.setValue(font.fontWeight);\n        fontSizeStyleProp.setValue(font.fontSize);\n        fontFamilyStyleProp.setValue(font.fontFamily);\n        ctx.font = font.toString();\n        if (fontSizeStyleProp.isPixels()) {\n          this.document.emSize = fontSizeStyleProp.getPixels();\n          this.modifiedEmSizeStack = true;\n        }\n      }\n      if (!fromMeasure) {\n        // effects\n        this.applyEffects(ctx); // opacity\n\n        ctx.globalAlpha = this.calculateOpacity();\n      }\n    }\n  }, {\n    key: \"clearContext\",\n    value: function clearContext(ctx) {\n      _get(_getPrototypeOf(RenderedElement.prototype), \"clearContext\", this).call(this, ctx);\n      if (this.modifiedEmSizeStack) {\n        this.document.popEmSize();\n      }\n    }\n  }]);\n}(Element);\nvar PathElement = /*#__PURE__*/function (_RenderedElement) {\n  function PathElement(document, node, captureTextNodes) {\n    var _this11;\n    _classCallCheck(this, PathElement);\n    _this11 = _callSuper(this, PathElement, [document, node, captureTextNodes]);\n    _this11.type = 'path';\n    _this11.pathParser = null;\n    _this11.pathParser = new PathParser(_this11.getAttribute('d').getString());\n    return _this11;\n  }\n  _inherits(PathElement, _RenderedElement);\n  return _createClass(PathElement, [{\n    key: \"path\",\n    value: function path(ctx) {\n      var pathParser = this.pathParser;\n      var boundingBox = new BoundingBox();\n      pathParser.reset();\n      if (ctx) {\n        ctx.beginPath();\n      }\n      while (!pathParser.isEnd()) {\n        switch (pathParser.next().type) {\n          case PathParser.MOVE_TO:\n            this.pathM(ctx, boundingBox);\n            break;\n          case PathParser.LINE_TO:\n            this.pathL(ctx, boundingBox);\n            break;\n          case PathParser.HORIZ_LINE_TO:\n            this.pathH(ctx, boundingBox);\n            break;\n          case PathParser.VERT_LINE_TO:\n            this.pathV(ctx, boundingBox);\n            break;\n          case PathParser.CURVE_TO:\n            this.pathC(ctx, boundingBox);\n            break;\n          case PathParser.SMOOTH_CURVE_TO:\n            this.pathS(ctx, boundingBox);\n            break;\n          case PathParser.QUAD_TO:\n            this.pathQ(ctx, boundingBox);\n            break;\n          case PathParser.SMOOTH_QUAD_TO:\n            this.pathT(ctx, boundingBox);\n            break;\n          case PathParser.ARC:\n            this.pathA(ctx, boundingBox);\n            break;\n          case PathParser.CLOSE_PATH:\n            this.pathZ(ctx, boundingBox);\n            break;\n        }\n      }\n      return boundingBox;\n    }\n  }, {\n    key: \"getBoundingBox\",\n    value: function getBoundingBox(_) {\n      return this.path();\n    }\n  }, {\n    key: \"getMarkers\",\n    value: function getMarkers() {\n      var pathParser = this.pathParser;\n      var points = pathParser.getMarkerPoints();\n      var angles = pathParser.getMarkerAngles();\n      var markers = points.map(function (point, i) {\n        return [point, angles[i]];\n      });\n      return markers;\n    }\n  }, {\n    key: \"renderChildren\",\n    value: function renderChildren(ctx) {\n      this.path(ctx);\n      this.document.screen.mouse.checkPath(this, ctx);\n      var fillRuleStyleProp = this.getStyle('fill-rule');\n      if (ctx.fillStyle !== '') {\n        if (fillRuleStyleProp.getString('inherit') !== 'inherit') {\n          ctx.fill(fillRuleStyleProp.getString());\n        } else {\n          ctx.fill();\n        }\n      }\n      if (ctx.strokeStyle !== '') {\n        if (this.getAttribute('vector-effect').getString() === 'non-scaling-stroke') {\n          ctx.save();\n          ctx.setTransform(1, 0, 0, 1, 0, 0);\n          ctx.stroke();\n          ctx.restore();\n        } else {\n          ctx.stroke();\n        }\n      }\n      var markers = this.getMarkers();\n      if (markers) {\n        var markersLastIndex = markers.length - 1;\n        var markerStartStyleProp = this.getStyle('marker-start');\n        var markerMidStyleProp = this.getStyle('marker-mid');\n        var markerEndStyleProp = this.getStyle('marker-end');\n        if (markerStartStyleProp.isUrlDefinition()) {\n          var marker = markerStartStyleProp.getDefinition();\n          var _markers$ = _slicedToArray(markers[0], 2),\n            point = _markers$[0],\n            angle = _markers$[1];\n          marker.render(ctx, point, angle);\n        }\n        if (markerMidStyleProp.isUrlDefinition()) {\n          var _marker = markerMidStyleProp.getDefinition();\n          for (var i = 1; i < markersLastIndex; i++) {\n            var _markers$i = _slicedToArray(markers[i], 2),\n              _point = _markers$i[0],\n              _angle = _markers$i[1];\n            _marker.render(ctx, _point, _angle);\n          }\n        }\n        if (markerEndStyleProp.isUrlDefinition()) {\n          var _marker2 = markerEndStyleProp.getDefinition();\n          var _markers$markersLastI = _slicedToArray(markers[markersLastIndex], 2),\n            _point2 = _markers$markersLastI[0],\n            _angle2 = _markers$markersLastI[1];\n          _marker2.render(ctx, _point2, _angle2);\n        }\n      }\n    }\n  }, {\n    key: \"pathM\",\n    value: function pathM(ctx, boundingBox) {\n      var pathParser = this.pathParser;\n      var _PathElement$pathM = PathElement.pathM(pathParser),\n        point = _PathElement$pathM.point;\n      var x = point.x,\n        y = point.y;\n      pathParser.addMarker(point);\n      boundingBox.addPoint(x, y);\n      if (ctx) {\n        ctx.moveTo(x, y);\n      }\n    }\n  }, {\n    key: \"pathL\",\n    value: function pathL(ctx, boundingBox) {\n      var pathParser = this.pathParser;\n      var _PathElement$pathL = PathElement.pathL(pathParser),\n        current = _PathElement$pathL.current,\n        point = _PathElement$pathL.point;\n      var x = point.x,\n        y = point.y;\n      pathParser.addMarker(point, current);\n      boundingBox.addPoint(x, y);\n      if (ctx) {\n        ctx.lineTo(x, y);\n      }\n    }\n  }, {\n    key: \"pathH\",\n    value: function pathH(ctx, boundingBox) {\n      var pathParser = this.pathParser;\n      var _PathElement$pathH = PathElement.pathH(pathParser),\n        current = _PathElement$pathH.current,\n        point = _PathElement$pathH.point;\n      var x = point.x,\n        y = point.y;\n      pathParser.addMarker(point, current);\n      boundingBox.addPoint(x, y);\n      if (ctx) {\n        ctx.lineTo(x, y);\n      }\n    }\n  }, {\n    key: \"pathV\",\n    value: function pathV(ctx, boundingBox) {\n      var pathParser = this.pathParser;\n      var _PathElement$pathV = PathElement.pathV(pathParser),\n        current = _PathElement$pathV.current,\n        point = _PathElement$pathV.point;\n      var x = point.x,\n        y = point.y;\n      pathParser.addMarker(point, current);\n      boundingBox.addPoint(x, y);\n      if (ctx) {\n        ctx.lineTo(x, y);\n      }\n    }\n  }, {\n    key: \"pathC\",\n    value: function pathC(ctx, boundingBox) {\n      var pathParser = this.pathParser;\n      var _PathElement$pathC = PathElement.pathC(pathParser),\n        current = _PathElement$pathC.current,\n        point = _PathElement$pathC.point,\n        controlPoint = _PathElement$pathC.controlPoint,\n        currentPoint = _PathElement$pathC.currentPoint;\n      pathParser.addMarker(currentPoint, controlPoint, point);\n      boundingBox.addBezierCurve(current.x, current.y, point.x, point.y, controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);\n      if (ctx) {\n        ctx.bezierCurveTo(point.x, point.y, controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);\n      }\n    }\n  }, {\n    key: \"pathS\",\n    value: function pathS(ctx, boundingBox) {\n      var pathParser = this.pathParser;\n      var _PathElement$pathS = PathElement.pathS(pathParser),\n        current = _PathElement$pathS.current,\n        point = _PathElement$pathS.point,\n        controlPoint = _PathElement$pathS.controlPoint,\n        currentPoint = _PathElement$pathS.currentPoint;\n      pathParser.addMarker(currentPoint, controlPoint, point);\n      boundingBox.addBezierCurve(current.x, current.y, point.x, point.y, controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);\n      if (ctx) {\n        ctx.bezierCurveTo(point.x, point.y, controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);\n      }\n    }\n  }, {\n    key: \"pathQ\",\n    value: function pathQ(ctx, boundingBox) {\n      var pathParser = this.pathParser;\n      var _PathElement$pathQ = PathElement.pathQ(pathParser),\n        current = _PathElement$pathQ.current,\n        controlPoint = _PathElement$pathQ.controlPoint,\n        currentPoint = _PathElement$pathQ.currentPoint;\n      pathParser.addMarker(currentPoint, controlPoint, controlPoint);\n      boundingBox.addQuadraticCurve(current.x, current.y, controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);\n      if (ctx) {\n        ctx.quadraticCurveTo(controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);\n      }\n    }\n  }, {\n    key: \"pathT\",\n    value: function pathT(ctx, boundingBox) {\n      var pathParser = this.pathParser;\n      var _PathElement$pathT = PathElement.pathT(pathParser),\n        current = _PathElement$pathT.current,\n        controlPoint = _PathElement$pathT.controlPoint,\n        currentPoint = _PathElement$pathT.currentPoint;\n      pathParser.addMarker(currentPoint, controlPoint, controlPoint);\n      boundingBox.addQuadraticCurve(current.x, current.y, controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);\n      if (ctx) {\n        ctx.quadraticCurveTo(controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);\n      }\n    }\n  }, {\n    key: \"pathA\",\n    value: function pathA(ctx, boundingBox) {\n      var pathParser = this.pathParser;\n      var _PathElement$pathA = PathElement.pathA(pathParser),\n        currentPoint = _PathElement$pathA.currentPoint,\n        rX = _PathElement$pathA.rX,\n        rY = _PathElement$pathA.rY,\n        sweepFlag = _PathElement$pathA.sweepFlag,\n        xAxisRotation = _PathElement$pathA.xAxisRotation,\n        centp = _PathElement$pathA.centp,\n        a1 = _PathElement$pathA.a1,\n        ad = _PathElement$pathA.ad; // for markers\n\n      var dir = 1 - sweepFlag ? 1.0 : -1.0;\n      var ah = a1 + dir * (ad / 2.0);\n      var halfWay = new Point(centp.x + rX * Math.cos(ah), centp.y + rY * Math.sin(ah));\n      pathParser.addMarkerAngle(halfWay, ah - dir * Math.PI / 2);\n      pathParser.addMarkerAngle(currentPoint, ah - dir * Math.PI);\n      boundingBox.addPoint(currentPoint.x, currentPoint.y); // TODO: this is too naive, make it better\n\n      if (ctx && !isNaN(a1) && !isNaN(ad)) {\n        var r = rX > rY ? rX : rY;\n        var sx = rX > rY ? 1 : rX / rY;\n        var sy = rX > rY ? rY / rX : 1;\n        ctx.translate(centp.x, centp.y);\n        ctx.rotate(xAxisRotation);\n        ctx.scale(sx, sy);\n        ctx.arc(0, 0, r, a1, a1 + ad, Boolean(1 - sweepFlag));\n        ctx.scale(1 / sx, 1 / sy);\n        ctx.rotate(-xAxisRotation);\n        ctx.translate(-centp.x, -centp.y);\n      }\n    }\n  }, {\n    key: \"pathZ\",\n    value: function pathZ(ctx, boundingBox) {\n      PathElement.pathZ(this.pathParser);\n      if (ctx) {\n        // only close path if it is not a straight line\n        if (boundingBox.x1 !== boundingBox.x2 && boundingBox.y1 !== boundingBox.y2) {\n          ctx.closePath();\n        }\n      }\n    }\n  }], [{\n    key: \"pathM\",\n    value: function pathM(pathParser) {\n      var point = pathParser.getAsCurrentPoint();\n      pathParser.start = pathParser.current;\n      return {\n        point: point\n      };\n    }\n  }, {\n    key: \"pathL\",\n    value: function pathL(pathParser) {\n      var current = pathParser.current;\n      var point = pathParser.getAsCurrentPoint();\n      return {\n        current: current,\n        point: point\n      };\n    }\n  }, {\n    key: \"pathH\",\n    value: function pathH(pathParser) {\n      var current = pathParser.current,\n        command = pathParser.command;\n      var point = new Point((command.relative ? current.x : 0) + command.x, current.y);\n      pathParser.current = point;\n      return {\n        current: current,\n        point: point\n      };\n    }\n  }, {\n    key: \"pathV\",\n    value: function pathV(pathParser) {\n      var current = pathParser.current,\n        command = pathParser.command;\n      var point = new Point(current.x, (command.relative ? current.y : 0) + command.y);\n      pathParser.current = point;\n      return {\n        current: current,\n        point: point\n      };\n    }\n  }, {\n    key: \"pathC\",\n    value: function pathC(pathParser) {\n      var current = pathParser.current;\n      var point = pathParser.getPoint('x1', 'y1');\n      var controlPoint = pathParser.getAsControlPoint('x2', 'y2');\n      var currentPoint = pathParser.getAsCurrentPoint();\n      return {\n        current: current,\n        point: point,\n        controlPoint: controlPoint,\n        currentPoint: currentPoint\n      };\n    }\n  }, {\n    key: \"pathS\",\n    value: function pathS(pathParser) {\n      var current = pathParser.current;\n      var point = pathParser.getReflectedControlPoint();\n      var controlPoint = pathParser.getAsControlPoint('x2', 'y2');\n      var currentPoint = pathParser.getAsCurrentPoint();\n      return {\n        current: current,\n        point: point,\n        controlPoint: controlPoint,\n        currentPoint: currentPoint\n      };\n    }\n  }, {\n    key: \"pathQ\",\n    value: function pathQ(pathParser) {\n      var current = pathParser.current;\n      var controlPoint = pathParser.getAsControlPoint('x1', 'y1');\n      var currentPoint = pathParser.getAsCurrentPoint();\n      return {\n        current: current,\n        controlPoint: controlPoint,\n        currentPoint: currentPoint\n      };\n    }\n  }, {\n    key: \"pathT\",\n    value: function pathT(pathParser) {\n      var current = pathParser.current;\n      var controlPoint = pathParser.getReflectedControlPoint();\n      pathParser.control = controlPoint;\n      var currentPoint = pathParser.getAsCurrentPoint();\n      return {\n        current: current,\n        controlPoint: controlPoint,\n        currentPoint: currentPoint\n      };\n    }\n  }, {\n    key: \"pathA\",\n    value: function pathA(pathParser) {\n      var current = pathParser.current,\n        command = pathParser.command;\n      var rX = command.rX,\n        rY = command.rY,\n        xRot = command.xRot,\n        lArcFlag = command.lArcFlag,\n        sweepFlag = command.sweepFlag;\n      var xAxisRotation = xRot * (Math.PI / 180.0);\n      var currentPoint = pathParser.getAsCurrentPoint(); // Conversion from endpoint to center parameterization\n      // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n      // x1', y1'\n\n      var currp = new Point(Math.cos(xAxisRotation) * (current.x - currentPoint.x) / 2.0 + Math.sin(xAxisRotation) * (current.y - currentPoint.y) / 2.0, -Math.sin(xAxisRotation) * (current.x - currentPoint.x) / 2.0 + Math.cos(xAxisRotation) * (current.y - currentPoint.y) / 2.0); // adjust radii\n\n      var l = Math.pow(currp.x, 2) / Math.pow(rX, 2) + Math.pow(currp.y, 2) / Math.pow(rY, 2);\n      if (l > 1) {\n        rX *= Math.sqrt(l);\n        rY *= Math.sqrt(l);\n      } // cx', cy'\n\n      var s = (lArcFlag === sweepFlag ? -1 : 1) * Math.sqrt((Math.pow(rX, 2) * Math.pow(rY, 2) - Math.pow(rX, 2) * Math.pow(currp.y, 2) - Math.pow(rY, 2) * Math.pow(currp.x, 2)) / (Math.pow(rX, 2) * Math.pow(currp.y, 2) + Math.pow(rY, 2) * Math.pow(currp.x, 2)));\n      if (isNaN(s)) {\n        s = 0;\n      }\n      var cpp = new Point(s * rX * currp.y / rY, s * -rY * currp.x / rX); // cx, cy\n\n      var centp = new Point((current.x + currentPoint.x) / 2.0 + Math.cos(xAxisRotation) * cpp.x - Math.sin(xAxisRotation) * cpp.y, (current.y + currentPoint.y) / 2.0 + Math.sin(xAxisRotation) * cpp.x + Math.cos(xAxisRotation) * cpp.y); // initial angle\n\n      var a1 = vectorsAngle([1, 0], [(currp.x - cpp.x) / rX, (currp.y - cpp.y) / rY]); // θ1\n      // angle delta\n\n      var u = [(currp.x - cpp.x) / rX, (currp.y - cpp.y) / rY];\n      var v = [(-currp.x - cpp.x) / rX, (-currp.y - cpp.y) / rY];\n      var ad = vectorsAngle(u, v); // Δθ\n\n      if (vectorsRatio(u, v) <= -1) {\n        ad = Math.PI;\n      }\n      if (vectorsRatio(u, v) >= 1) {\n        ad = 0;\n      }\n      return {\n        currentPoint: currentPoint,\n        rX: rX,\n        rY: rY,\n        sweepFlag: sweepFlag,\n        xAxisRotation: xAxisRotation,\n        centp: centp,\n        a1: a1,\n        ad: ad\n      };\n    }\n  }, {\n    key: \"pathZ\",\n    value: function pathZ(pathParser) {\n      pathParser.current = pathParser.start;\n    }\n  }]);\n}(RenderedElement);\nvar GlyphElement = /*#__PURE__*/function (_PathElement) {\n  function GlyphElement(document, node, captureTextNodes) {\n    var _this12;\n    _classCallCheck(this, GlyphElement);\n    _this12 = _callSuper(this, GlyphElement, [document, node, captureTextNodes]);\n    _this12.type = 'glyph';\n    _this12.horizAdvX = _this12.getAttribute('horiz-adv-x').getNumber();\n    _this12.unicode = _this12.getAttribute('unicode').getString();\n    _this12.arabicForm = _this12.getAttribute('arabic-form').getString();\n    return _this12;\n  }\n  _inherits(GlyphElement, _PathElement);\n  return _createClass(GlyphElement);\n}(PathElement);\nvar TextElement = /*#__PURE__*/function (_RenderedElement2) {\n  function TextElement(document, node, captureTextNodes) {\n    var _this13;\n    _classCallCheck(this, TextElement);\n    _this13 = _callSuper(this, TextElement, [document, node, (this instanceof TextElement ? this.constructor : void 0) === TextElement ? true : captureTextNodes]);\n    _this13.type = 'text';\n    _this13.x = 0;\n    _this13.y = 0;\n    _this13.measureCache = -1;\n    return _this13;\n  }\n  _inherits(TextElement, _RenderedElement2);\n  return _createClass(TextElement, [{\n    key: \"setContext\",\n    value: function setContext(ctx) {\n      var fromMeasure = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      _get(_getPrototypeOf(TextElement.prototype), \"setContext\", this).call(this, ctx, fromMeasure);\n      var textBaseline = this.getStyle('dominant-baseline').getTextBaseline() || this.getStyle('alignment-baseline').getTextBaseline();\n      if (textBaseline) {\n        ctx.textBaseline = textBaseline;\n      }\n    }\n  }, {\n    key: \"initializeCoordinates\",\n    value: function initializeCoordinates() {\n      this.x = 0;\n      this.y = 0;\n      this.leafTexts = [];\n      this.textChunkStart = 0;\n      this.minX = Number.POSITIVE_INFINITY;\n      this.maxX = Number.NEGATIVE_INFINITY;\n    }\n  }, {\n    key: \"getBoundingBox\",\n    value: function getBoundingBox(ctx) {\n      var _this14 = this;\n      if (this.type !== 'text') {\n        return this.getTElementBoundingBox(ctx);\n      } // first, calculate child positions\n\n      this.initializeCoordinates();\n      this.adjustChildCoordinatesRecursive(ctx);\n      var boundingBox = null; // then calculate bounding box\n\n      this.children.forEach(function (_, i) {\n        var childBoundingBox = _this14.getChildBoundingBox(ctx, _this14, _this14, i);\n        if (!boundingBox) {\n          boundingBox = childBoundingBox;\n        } else {\n          boundingBox.addBoundingBox(childBoundingBox);\n        }\n      });\n      return boundingBox;\n    }\n  }, {\n    key: \"getFontSize\",\n    value: function getFontSize() {\n      var document = this.document,\n        parent = this.parent;\n      var inheritFontSize = Font.parse(document.ctx.font).fontSize;\n      var fontSize = parent.getStyle('font-size').getNumber(inheritFontSize);\n      return fontSize;\n    }\n  }, {\n    key: \"getTElementBoundingBox\",\n    value: function getTElementBoundingBox(ctx) {\n      var fontSize = this.getFontSize();\n      return new BoundingBox(this.x, this.y - fontSize, this.x + this.measureText(ctx), this.y);\n    }\n  }, {\n    key: \"getGlyph\",\n    value: function getGlyph(font, text, i) {\n      var _char = text[i];\n      var glyph = null;\n      if (font.isArabic) {\n        var len = text.length;\n        var prevChar = text[i - 1];\n        var nextChar = text[i + 1];\n        var arabicForm = 'isolated';\n        if ((i === 0 || prevChar === ' ') && i < len - 1 && nextChar !== ' ') {\n          arabicForm = 'terminal';\n        }\n        if (i > 0 && prevChar !== ' ' && i < len - 1 && nextChar !== ' ') {\n          arabicForm = 'medial';\n        }\n        if (i > 0 && prevChar !== ' ' && (i === len - 1 || nextChar === ' ')) {\n          arabicForm = 'initial';\n        }\n        if (typeof font.glyphs[_char] !== 'undefined') {\n          // NEED TEST\n          var maybeGlyph = font.glyphs[_char];\n          glyph = maybeGlyph instanceof GlyphElement ? maybeGlyph : maybeGlyph[arabicForm];\n        }\n      } else {\n        glyph = font.glyphs[_char];\n      }\n      if (!glyph) {\n        glyph = font.missingGlyph;\n      }\n      return glyph;\n    }\n  }, {\n    key: \"getText\",\n    value: function getText() {\n      return '';\n    }\n  }, {\n    key: \"getTextFromNode\",\n    value: function getTextFromNode(node) {\n      var textNode = node || this.node;\n      var childNodes = Array.from(textNode.parentNode.childNodes);\n      var index = childNodes.indexOf(textNode);\n      var lastIndex = childNodes.length - 1;\n      var text = compressSpaces(\n      // textNode.value\n      // || textNode.text\n      textNode.textContent || '');\n      if (index === 0) {\n        text = trimLeft(text);\n      }\n      if (index === lastIndex) {\n        text = trimRight(text);\n      }\n      return text;\n    }\n  }, {\n    key: \"renderChildren\",\n    value: function renderChildren(ctx) {\n      var _this15 = this;\n      if (this.type !== 'text') {\n        this.renderTElementChildren(ctx);\n        return;\n      } // first, calculate child positions\n\n      this.initializeCoordinates();\n      this.adjustChildCoordinatesRecursive(ctx); // then render\n\n      this.children.forEach(function (_, i) {\n        _this15.renderChild(ctx, _this15, _this15, i);\n      });\n      var mouse = this.document.screen.mouse; // Do not calc bounding box if mouse is not working.\n\n      if (mouse.isWorking()) {\n        mouse.checkBoundingBox(this, this.getBoundingBox(ctx));\n      }\n    }\n  }, {\n    key: \"renderTElementChildren\",\n    value: function renderTElementChildren(ctx) {\n      var document = this.document,\n        parent = this.parent;\n      var renderText = this.getText();\n      var customFont = parent.getStyle('font-family').getDefinition();\n      if (customFont) {\n        var unitsPerEm = customFont.fontFace.unitsPerEm;\n        var ctxFont = Font.parse(document.ctx.font);\n        var fontSize = parent.getStyle('font-size').getNumber(ctxFont.fontSize);\n        var fontStyle = parent.getStyle('font-style').getString(ctxFont.fontStyle);\n        var scale = fontSize / unitsPerEm;\n        var text = customFont.isRTL ? renderText.split('').reverse().join('') : renderText;\n        var dx = toNumbers(parent.getAttribute('dx').getString());\n        var len = text.length;\n        for (var i = 0; i < len; i++) {\n          var glyph = this.getGlyph(customFont, text, i);\n          ctx.translate(this.x, this.y);\n          ctx.scale(scale, -scale);\n          var lw = ctx.lineWidth;\n          ctx.lineWidth = ctx.lineWidth * unitsPerEm / fontSize;\n          if (fontStyle === 'italic') {\n            ctx.transform(1, 0, .4, 1, 0, 0);\n          }\n          glyph.render(ctx);\n          if (fontStyle === 'italic') {\n            ctx.transform(1, 0, -.4, 1, 0, 0);\n          }\n          ctx.lineWidth = lw;\n          ctx.scale(1 / scale, -1 / scale);\n          ctx.translate(-this.x, -this.y);\n          this.x += fontSize * (glyph.horizAdvX || customFont.horizAdvX) / unitsPerEm;\n          if (typeof dx[i] !== 'undefined' && !isNaN(dx[i])) {\n            this.x += dx[i];\n          }\n        }\n        return;\n      }\n      var x = this.x,\n        y = this.y; // NEED TEST\n      // if (ctx.paintOrder === 'stroke') {\n      // \tif (ctx.strokeStyle) {\n      // \t\tctx.strokeText(renderText, x, y);\n      // \t}\n      // \tif (ctx.fillStyle) {\n      // \t\tctx.fillText(renderText, x, y);\n      // \t}\n      // } else {\n\n      if (ctx.fillStyle) {\n        ctx.fillText(renderText, x, y);\n      }\n      if (ctx.strokeStyle) {\n        ctx.strokeText(renderText, x, y);\n      } // }\n    }\n  }, {\n    key: \"applyAnchoring\",\n    value: function applyAnchoring() {\n      if (this.textChunkStart >= this.leafTexts.length) {\n        return;\n      } // This is basically the \"Apply anchoring\" part of https://www.w3.org/TR/SVG2/text.html#TextLayoutAlgorithm.\n      // The difference is that we apply the anchoring as soon as a chunk is finished. This saves some extra looping.\n      // Vertical text is not supported.\n\n      var firstElement = this.leafTexts[this.textChunkStart];\n      var textAnchor = firstElement.getStyle('text-anchor').getString('start');\n      var isRTL = false; // we treat RTL like LTR\n\n      var shift = 0;\n      if (textAnchor === 'start' && !isRTL || textAnchor === 'end' && isRTL) {\n        shift = firstElement.x - this.minX;\n      } else if (textAnchor === 'end' && !isRTL || textAnchor === 'start' && isRTL) {\n        shift = firstElement.x - this.maxX;\n      } else {\n        shift = firstElement.x - (this.minX + this.maxX) / 2;\n      }\n      for (var i = this.textChunkStart; i < this.leafTexts.length; i++) {\n        this.leafTexts[i].x += shift;\n      } // start new chunk\n\n      this.minX = Number.POSITIVE_INFINITY;\n      this.maxX = Number.NEGATIVE_INFINITY;\n      this.textChunkStart = this.leafTexts.length;\n    }\n  }, {\n    key: \"adjustChildCoordinatesRecursive\",\n    value: function adjustChildCoordinatesRecursive(ctx) {\n      var _this16 = this;\n      this.children.forEach(function (_, i) {\n        _this16.adjustChildCoordinatesRecursiveCore(ctx, _this16, _this16, i);\n      });\n      this.applyAnchoring();\n    }\n  }, {\n    key: \"adjustChildCoordinatesRecursiveCore\",\n    value: function adjustChildCoordinatesRecursiveCore(ctx, textParent, parent, i) {\n      var child = parent.children[i];\n      if (child.children.length > 0) {\n        child.children.forEach(function (_, i) {\n          textParent.adjustChildCoordinatesRecursiveCore(ctx, textParent, child, i);\n        });\n      } else {\n        // only leafs are relevant\n        this.adjustChildCoordinates(ctx, textParent, parent, i);\n      }\n    }\n  }, {\n    key: \"adjustChildCoordinates\",\n    value: function adjustChildCoordinates(ctx, textParent, parent, i) {\n      var child = parent.children[i];\n      if (typeof child.measureText !== 'function') {\n        return child;\n      }\n      ctx.save();\n      child.setContext(ctx, true);\n      var xAttr = child.getAttribute('x');\n      var yAttr = child.getAttribute('y');\n      var dxAttr = child.getAttribute('dx');\n      var dyAttr = child.getAttribute('dy');\n      var customFont = child.getStyle('font-family').getDefinition();\n      var isRTL = Boolean(customFont) && customFont.isRTL;\n      if (i === 0) {\n        // First children inherit attributes from parent(s). Positional attributes\n        // are only inherited from a parent to it's first child.\n        if (!xAttr.hasValue()) {\n          xAttr.setValue(child.getInheritedAttribute('x'));\n        }\n        if (!yAttr.hasValue()) {\n          yAttr.setValue(child.getInheritedAttribute('y'));\n        }\n        if (!dxAttr.hasValue()) {\n          dxAttr.setValue(child.getInheritedAttribute('dx'));\n        }\n        if (!dyAttr.hasValue()) {\n          dyAttr.setValue(child.getInheritedAttribute('dy'));\n        }\n      }\n      var width = child.measureText(ctx);\n      if (isRTL) {\n        textParent.x -= width;\n      }\n      if (xAttr.hasValue()) {\n        // an \"x\" attribute marks the start of a new chunk\n        textParent.applyAnchoring();\n        child.x = xAttr.getPixels('x');\n        if (dxAttr.hasValue()) {\n          child.x += dxAttr.getPixels('x');\n        }\n      } else {\n        if (dxAttr.hasValue()) {\n          textParent.x += dxAttr.getPixels('x');\n        }\n        child.x = textParent.x;\n      }\n      textParent.x = child.x;\n      if (!isRTL) {\n        textParent.x += width;\n      }\n      if (yAttr.hasValue()) {\n        child.y = yAttr.getPixels('y');\n        if (dyAttr.hasValue()) {\n          child.y += dyAttr.getPixels('y');\n        }\n      } else {\n        if (dyAttr.hasValue()) {\n          textParent.y += dyAttr.getPixels('y');\n        }\n        child.y = textParent.y;\n      }\n      textParent.y = child.y; // update the current chunk and it's bounds\n\n      textParent.leafTexts.push(child);\n      textParent.minX = Math.min(textParent.minX, child.x, child.x + width);\n      textParent.maxX = Math.max(textParent.maxX, child.x, child.x + width);\n      child.clearContext(ctx);\n      ctx.restore();\n      return child;\n    }\n  }, {\n    key: \"getChildBoundingBox\",\n    value: function getChildBoundingBox(ctx, textParent, parent, i) {\n      var child = parent.children[i]; // not a text node?\n\n      if (typeof child.getBoundingBox !== 'function') {\n        return null;\n      }\n      var boundingBox = child.getBoundingBox(ctx);\n      if (!boundingBox) {\n        return null;\n      }\n      child.children.forEach(function (_, i) {\n        var childBoundingBox = textParent.getChildBoundingBox(ctx, textParent, child, i);\n        boundingBox.addBoundingBox(childBoundingBox);\n      });\n      return boundingBox;\n    }\n  }, {\n    key: \"renderChild\",\n    value: function renderChild(ctx, textParent, parent, i) {\n      var child = parent.children[i];\n      child.render(ctx);\n      child.children.forEach(function (_, i) {\n        textParent.renderChild(ctx, textParent, child, i);\n      });\n    }\n  }, {\n    key: \"measureText\",\n    value: function measureText(ctx) {\n      var measureCache = this.measureCache;\n      if (~measureCache) {\n        return measureCache;\n      }\n      var renderText = this.getText();\n      var measure = this.measureTargetText(ctx, renderText);\n      this.measureCache = measure;\n      return measure;\n    }\n  }, {\n    key: \"measureTargetText\",\n    value: function measureTargetText(ctx, targetText) {\n      if (!targetText.length) {\n        return 0;\n      }\n      var parent = this.parent;\n      var customFont = parent.getStyle('font-family').getDefinition();\n      if (customFont) {\n        var fontSize = this.getFontSize();\n        var text = customFont.isRTL ? targetText.split('').reverse().join('') : targetText;\n        var dx = toNumbers(parent.getAttribute('dx').getString());\n        var len = text.length;\n        var _measure = 0;\n        for (var i = 0; i < len; i++) {\n          var glyph = this.getGlyph(customFont, text, i);\n          _measure += (glyph.horizAdvX || customFont.horizAdvX) * fontSize / customFont.fontFace.unitsPerEm;\n          if (typeof dx[i] !== 'undefined' && !isNaN(dx[i])) {\n            _measure += dx[i];\n          }\n        }\n        return _measure;\n      }\n      if (!ctx.measureText) {\n        return targetText.length * 10;\n      }\n      ctx.save();\n      this.setContext(ctx, true);\n      var _ctx$measureText = ctx.measureText(targetText),\n        measure = _ctx$measureText.width;\n      this.clearContext(ctx);\n      ctx.restore();\n      return measure;\n    }\n    /**\r\n     * Inherits positional attributes from {@link TextElement} parent(s). Attributes\r\n     * are only inherited from a parent to its first child.\r\n     * @param name - The attribute name.\r\n     * @returns The attribute value or null.\r\n     */\n  }, {\n    key: \"getInheritedAttribute\",\n    value: function getInheritedAttribute(name) {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias,consistent-this\n      var current = this;\n      while (current instanceof TextElement && current.isFirstChild()) {\n        var parentAttr = current.parent.getAttribute(name);\n        if (parentAttr.hasValue(true)) {\n          return parentAttr.getValue('0');\n        }\n        current = current.parent;\n      }\n      return null;\n    }\n  }]);\n}(RenderedElement);\nvar TSpanElement = /*#__PURE__*/function (_TextElement) {\n  function TSpanElement(document, node, captureTextNodes) {\n    var _this17;\n    _classCallCheck(this, TSpanElement);\n    _this17 = _callSuper(this, TSpanElement, [document, node, (this instanceof TSpanElement ? this.constructor : void 0) === TSpanElement ? true : captureTextNodes]);\n    _this17.type = 'tspan'; // if this node has children, then they own the text\n\n    _this17.text = _this17.children.length > 0 ? '' : _this17.getTextFromNode();\n    return _this17;\n  }\n  _inherits(TSpanElement, _TextElement);\n  return _createClass(TSpanElement, [{\n    key: \"getText\",\n    value: function getText() {\n      return this.text;\n    }\n  }]);\n}(TextElement);\nvar TextNode = /*#__PURE__*/function (_TSpanElement) {\n  function TextNode() {\n    var _this18;\n    _classCallCheck(this, TextNode);\n    _this18 = _callSuper(this, TextNode, arguments);\n    _this18.type = 'textNode';\n    return _this18;\n  }\n  _inherits(TextNode, _TSpanElement);\n  return _createClass(TextNode);\n}(TSpanElement);\nvar SVGElement = /*#__PURE__*/function (_RenderedElement3) {\n  function SVGElement() {\n    var _this19;\n    _classCallCheck(this, SVGElement);\n    _this19 = _callSuper(this, SVGElement, arguments);\n    _this19.type = 'svg';\n    _this19.root = false;\n    return _this19;\n  }\n  _inherits(SVGElement, _RenderedElement3);\n  return _createClass(SVGElement, [{\n    key: \"setContext\",\n    value: function setContext(ctx) {\n      var _this$node$parentNode;\n      var document = this.document;\n      var screen = document.screen,\n        window = document.window;\n      var canvas = ctx.canvas;\n      screen.setDefaults(ctx);\n      if (canvas.style && typeof ctx.font !== 'undefined' && window && typeof window.getComputedStyle !== 'undefined') {\n        ctx.font = window.getComputedStyle(canvas).getPropertyValue('font');\n        var fontSizeProp = new Property(document, 'fontSize', Font.parse(ctx.font).fontSize);\n        if (fontSizeProp.hasValue()) {\n          document.rootEmSize = fontSizeProp.getPixels('y');\n          document.emSize = document.rootEmSize;\n        }\n      } // create new view port\n\n      if (!this.getAttribute('x').hasValue()) {\n        this.getAttribute('x', true).setValue(0);\n      }\n      if (!this.getAttribute('y').hasValue()) {\n        this.getAttribute('y', true).setValue(0);\n      }\n      var _screen$viewPort = screen.viewPort,\n        width = _screen$viewPort.width,\n        height = _screen$viewPort.height;\n      if (!this.getStyle('width').hasValue()) {\n        this.getStyle('width', true).setValue('100%');\n      }\n      if (!this.getStyle('height').hasValue()) {\n        this.getStyle('height', true).setValue('100%');\n      }\n      if (!this.getStyle('color').hasValue()) {\n        this.getStyle('color', true).setValue('black');\n      }\n      var refXAttr = this.getAttribute('refX');\n      var refYAttr = this.getAttribute('refY');\n      var viewBoxAttr = this.getAttribute('viewBox');\n      var viewBox = viewBoxAttr.hasValue() ? toNumbers(viewBoxAttr.getString()) : null;\n      var clip = !this.root && this.getStyle('overflow').getValue('hidden') !== 'visible';\n      var minX = 0;\n      var minY = 0;\n      var clipX = 0;\n      var clipY = 0;\n      if (viewBox) {\n        minX = viewBox[0];\n        minY = viewBox[1];\n      }\n      if (!this.root) {\n        width = this.getStyle('width').getPixels('x');\n        height = this.getStyle('height').getPixels('y');\n        if (this.type === 'marker') {\n          clipX = minX;\n          clipY = minY;\n          minX = 0;\n          minY = 0;\n        }\n      }\n      screen.viewPort.setCurrent(width, height); // Default value of transform-origin is center only for root SVG elements\n      // https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform-origin\n\n      if (this.node // is not temporary SVGElement\n      && (!this.parent || ((_this$node$parentNode = this.node.parentNode) === null || _this$node$parentNode === void 0 ? void 0 : _this$node$parentNode.nodeName) === 'foreignObject') && this.getStyle('transform', false, true).hasValue() && !this.getStyle('transform-origin', false, true).hasValue()) {\n        this.getStyle('transform-origin', true, true).setValue('50% 50%');\n      }\n      _get(_getPrototypeOf(SVGElement.prototype), \"setContext\", this).call(this, ctx);\n      ctx.translate(this.getAttribute('x').getPixels('x'), this.getAttribute('y').getPixels('y'));\n      if (viewBox) {\n        width = viewBox[2];\n        height = viewBox[3];\n      }\n      document.setViewBox({\n        ctx: ctx,\n        aspectRatio: this.getAttribute('preserveAspectRatio').getString(),\n        width: screen.viewPort.width,\n        desiredWidth: width,\n        height: screen.viewPort.height,\n        desiredHeight: height,\n        minX: minX,\n        minY: minY,\n        refX: refXAttr.getValue(),\n        refY: refYAttr.getValue(),\n        clip: clip,\n        clipX: clipX,\n        clipY: clipY\n      });\n      if (viewBox) {\n        screen.viewPort.removeCurrent();\n        screen.viewPort.setCurrent(width, height);\n      }\n    }\n  }, {\n    key: \"clearContext\",\n    value: function clearContext(ctx) {\n      _get(_getPrototypeOf(SVGElement.prototype), \"clearContext\", this).call(this, ctx);\n      this.document.screen.viewPort.removeCurrent();\n    }\n    /**\r\n     * Resize SVG to fit in given size.\r\n     * @param width\r\n     * @param height\r\n     * @param preserveAspectRatio\r\n     */\n  }, {\n    key: \"resize\",\n    value: function resize(width) {\n      var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : width;\n      var preserveAspectRatio = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var widthAttr = this.getAttribute('width', true);\n      var heightAttr = this.getAttribute('height', true);\n      var viewBoxAttr = this.getAttribute('viewBox');\n      var styleAttr = this.getAttribute('style');\n      var originWidth = widthAttr.getNumber(0);\n      var originHeight = heightAttr.getNumber(0);\n      if (preserveAspectRatio) {\n        if (typeof preserveAspectRatio === 'string') {\n          this.getAttribute('preserveAspectRatio', true).setValue(preserveAspectRatio);\n        } else {\n          var preserveAspectRatioAttr = this.getAttribute('preserveAspectRatio');\n          if (preserveAspectRatioAttr.hasValue()) {\n            preserveAspectRatioAttr.setValue(preserveAspectRatioAttr.getString().replace(/^\\s*(\\S.*\\S)\\s*$/, '$1'));\n          }\n        }\n      }\n      widthAttr.setValue(width);\n      heightAttr.setValue(height);\n      if (!viewBoxAttr.hasValue()) {\n        viewBoxAttr.setValue(\"0 0 \".concat(originWidth || width, \" \").concat(originHeight || height));\n      }\n      if (styleAttr.hasValue()) {\n        var widthStyle = this.getStyle('width');\n        var heightStyle = this.getStyle('height');\n        if (widthStyle.hasValue()) {\n          widthStyle.setValue(\"\".concat(width, \"px\"));\n        }\n        if (heightStyle.hasValue()) {\n          heightStyle.setValue(\"\".concat(height, \"px\"));\n        }\n      }\n    }\n  }]);\n}(RenderedElement);\nvar RectElement = /*#__PURE__*/function (_PathElement2) {\n  function RectElement() {\n    var _this20;\n    _classCallCheck(this, RectElement);\n    _this20 = _callSuper(this, RectElement, arguments);\n    _this20.type = 'rect';\n    return _this20;\n  }\n  _inherits(RectElement, _PathElement2);\n  return _createClass(RectElement, [{\n    key: \"path\",\n    value: function path(ctx) {\n      var x = this.getAttribute('x').getPixels('x');\n      var y = this.getAttribute('y').getPixels('y');\n      var width = this.getStyle('width', false, true).getPixels('x');\n      var height = this.getStyle('height', false, true).getPixels('y');\n      var rxAttr = this.getAttribute('rx');\n      var ryAttr = this.getAttribute('ry');\n      var rx = rxAttr.getPixels('x');\n      var ry = ryAttr.getPixels('y');\n      if (rxAttr.hasValue() && !ryAttr.hasValue()) {\n        ry = rx;\n      }\n      if (ryAttr.hasValue() && !rxAttr.hasValue()) {\n        rx = ry;\n      }\n      rx = Math.min(rx, width / 2.0);\n      ry = Math.min(ry, height / 2.0);\n      if (ctx) {\n        var KAPPA = 4 * ((Math.sqrt(2) - 1) / 3);\n        ctx.beginPath(); // always start the path so we don't fill prior paths\n\n        if (height > 0 && width > 0) {\n          ctx.moveTo(x + rx, y);\n          ctx.lineTo(x + width - rx, y);\n          ctx.bezierCurveTo(x + width - rx + KAPPA * rx, y, x + width, y + ry - KAPPA * ry, x + width, y + ry);\n          ctx.lineTo(x + width, y + height - ry);\n          ctx.bezierCurveTo(x + width, y + height - ry + KAPPA * ry, x + width - rx + KAPPA * rx, y + height, x + width - rx, y + height);\n          ctx.lineTo(x + rx, y + height);\n          ctx.bezierCurveTo(x + rx - KAPPA * rx, y + height, x, y + height - ry + KAPPA * ry, x, y + height - ry);\n          ctx.lineTo(x, y + ry);\n          ctx.bezierCurveTo(x, y + ry - KAPPA * ry, x + rx - KAPPA * rx, y, x + rx, y);\n          ctx.closePath();\n        }\n      }\n      return new BoundingBox(x, y, x + width, y + height);\n    }\n  }, {\n    key: \"getMarkers\",\n    value: function getMarkers() {\n      return null;\n    }\n  }]);\n}(PathElement);\nvar CircleElement = /*#__PURE__*/function (_PathElement3) {\n  function CircleElement() {\n    var _this21;\n    _classCallCheck(this, CircleElement);\n    _this21 = _callSuper(this, CircleElement, arguments);\n    _this21.type = 'circle';\n    return _this21;\n  }\n  _inherits(CircleElement, _PathElement3);\n  return _createClass(CircleElement, [{\n    key: \"path\",\n    value: function path(ctx) {\n      var cx = this.getAttribute('cx').getPixels('x');\n      var cy = this.getAttribute('cy').getPixels('y');\n      var r = this.getAttribute('r').getPixels();\n      if (ctx && r > 0) {\n        ctx.beginPath();\n        ctx.arc(cx, cy, r, 0, Math.PI * 2, false);\n        ctx.closePath();\n      }\n      return new BoundingBox(cx - r, cy - r, cx + r, cy + r);\n    }\n  }, {\n    key: \"getMarkers\",\n    value: function getMarkers() {\n      return null;\n    }\n  }]);\n}(PathElement);\nvar EllipseElement = /*#__PURE__*/function (_PathElement4) {\n  function EllipseElement() {\n    var _this22;\n    _classCallCheck(this, EllipseElement);\n    _this22 = _callSuper(this, EllipseElement, arguments);\n    _this22.type = 'ellipse';\n    return _this22;\n  }\n  _inherits(EllipseElement, _PathElement4);\n  return _createClass(EllipseElement, [{\n    key: \"path\",\n    value: function path(ctx) {\n      var KAPPA = 4 * ((Math.sqrt(2) - 1) / 3);\n      var rx = this.getAttribute('rx').getPixels('x');\n      var ry = this.getAttribute('ry').getPixels('y');\n      var cx = this.getAttribute('cx').getPixels('x');\n      var cy = this.getAttribute('cy').getPixels('y');\n      if (ctx && rx > 0 && ry > 0) {\n        ctx.beginPath();\n        ctx.moveTo(cx + rx, cy);\n        ctx.bezierCurveTo(cx + rx, cy + KAPPA * ry, cx + KAPPA * rx, cy + ry, cx, cy + ry);\n        ctx.bezierCurveTo(cx - KAPPA * rx, cy + ry, cx - rx, cy + KAPPA * ry, cx - rx, cy);\n        ctx.bezierCurveTo(cx - rx, cy - KAPPA * ry, cx - KAPPA * rx, cy - ry, cx, cy - ry);\n        ctx.bezierCurveTo(cx + KAPPA * rx, cy - ry, cx + rx, cy - KAPPA * ry, cx + rx, cy);\n        ctx.closePath();\n      }\n      return new BoundingBox(cx - rx, cy - ry, cx + rx, cy + ry);\n    }\n  }, {\n    key: \"getMarkers\",\n    value: function getMarkers() {\n      return null;\n    }\n  }]);\n}(PathElement);\nvar LineElement = /*#__PURE__*/function (_PathElement5) {\n  function LineElement() {\n    var _this23;\n    _classCallCheck(this, LineElement);\n    _this23 = _callSuper(this, LineElement, arguments);\n    _this23.type = 'line';\n    return _this23;\n  }\n  _inherits(LineElement, _PathElement5);\n  return _createClass(LineElement, [{\n    key: \"getPoints\",\n    value: function getPoints() {\n      return [new Point(this.getAttribute('x1').getPixels('x'), this.getAttribute('y1').getPixels('y')), new Point(this.getAttribute('x2').getPixels('x'), this.getAttribute('y2').getPixels('y'))];\n    }\n  }, {\n    key: \"path\",\n    value: function path(ctx) {\n      var _this$getPoints = this.getPoints(),\n        _this$getPoints2 = _slicedToArray(_this$getPoints, 2),\n        _this$getPoints2$ = _this$getPoints2[0],\n        x0 = _this$getPoints2$.x,\n        y0 = _this$getPoints2$.y,\n        _this$getPoints2$2 = _this$getPoints2[1],\n        x1 = _this$getPoints2$2.x,\n        y1 = _this$getPoints2$2.y;\n      if (ctx) {\n        ctx.beginPath();\n        ctx.moveTo(x0, y0);\n        ctx.lineTo(x1, y1);\n      }\n      return new BoundingBox(x0, y0, x1, y1);\n    }\n  }, {\n    key: \"getMarkers\",\n    value: function getMarkers() {\n      var _this$getPoints3 = this.getPoints(),\n        _this$getPoints4 = _slicedToArray(_this$getPoints3, 2),\n        p0 = _this$getPoints4[0],\n        p1 = _this$getPoints4[1];\n      var a = p0.angleTo(p1);\n      return [[p0, a], [p1, a]];\n    }\n  }]);\n}(PathElement);\nvar PolylineElement = /*#__PURE__*/function (_PathElement6) {\n  function PolylineElement(document, node, captureTextNodes) {\n    var _this24;\n    _classCallCheck(this, PolylineElement);\n    _this24 = _callSuper(this, PolylineElement, [document, node, captureTextNodes]);\n    _this24.type = 'polyline';\n    _this24.points = [];\n    _this24.points = Point.parsePath(_this24.getAttribute('points').getString());\n    return _this24;\n  }\n  _inherits(PolylineElement, _PathElement6);\n  return _createClass(PolylineElement, [{\n    key: \"path\",\n    value: function path(ctx) {\n      var points = this.points;\n      var _points = _slicedToArray(points, 1),\n        _points$ = _points[0],\n        x0 = _points$.x,\n        y0 = _points$.y;\n      var boundingBox = new BoundingBox(x0, y0);\n      if (ctx) {\n        ctx.beginPath();\n        ctx.moveTo(x0, y0);\n      }\n      points.forEach(function (_ref) {\n        var x = _ref.x,\n          y = _ref.y;\n        boundingBox.addPoint(x, y);\n        if (ctx) {\n          ctx.lineTo(x, y);\n        }\n      });\n      return boundingBox;\n    }\n  }, {\n    key: \"getMarkers\",\n    value: function getMarkers() {\n      var points = this.points;\n      var lastIndex = points.length - 1;\n      var markers = [];\n      points.forEach(function (point, i) {\n        if (i === lastIndex) {\n          return;\n        }\n        markers.push([point, point.angleTo(points[i + 1])]);\n      });\n      if (markers.length > 0) {\n        markers.push([points[points.length - 1], markers[markers.length - 1][1]]);\n      }\n      return markers;\n    }\n  }]);\n}(PathElement);\nvar PolygonElement = /*#__PURE__*/function (_PolylineElement) {\n  function PolygonElement() {\n    var _this25;\n    _classCallCheck(this, PolygonElement);\n    _this25 = _callSuper(this, PolygonElement, arguments);\n    _this25.type = 'polygon';\n    return _this25;\n  }\n  _inherits(PolygonElement, _PolylineElement);\n  return _createClass(PolygonElement, [{\n    key: \"path\",\n    value: function path(ctx) {\n      var boundingBox = _get(_getPrototypeOf(PolygonElement.prototype), \"path\", this).call(this, ctx);\n      var _this$points = _slicedToArray(this.points, 1),\n        _this$points$ = _this$points[0],\n        x = _this$points$.x,\n        y = _this$points$.y;\n      if (ctx) {\n        ctx.lineTo(x, y);\n        ctx.closePath();\n      }\n      return boundingBox;\n    }\n  }]);\n}(PolylineElement);\nvar PatternElement = /*#__PURE__*/function (_Element3) {\n  function PatternElement() {\n    var _this26;\n    _classCallCheck(this, PatternElement);\n    _this26 = _callSuper(this, PatternElement, arguments);\n    _this26.type = 'pattern';\n    return _this26;\n  }\n  _inherits(PatternElement, _Element3);\n  return _createClass(PatternElement, [{\n    key: \"createPattern\",\n    value: function createPattern(ctx, _, parentOpacityProp) {\n      var width = this.getStyle('width').getPixels('x', true);\n      var height = this.getStyle('height').getPixels('y', true); // render me using a temporary svg element\n\n      var patternSvg = new SVGElement(this.document, null);\n      patternSvg.attributes.viewBox = new Property(this.document, 'viewBox', this.getAttribute('viewBox').getValue());\n      patternSvg.attributes.width = new Property(this.document, 'width', \"\".concat(width, \"px\"));\n      patternSvg.attributes.height = new Property(this.document, 'height', \"\".concat(height, \"px\"));\n      patternSvg.attributes.transform = new Property(this.document, 'transform', this.getAttribute('patternTransform').getValue());\n      patternSvg.children = this.children;\n      var patternCanvas = this.document.createCanvas(width, height);\n      var patternCtx = patternCanvas.getContext('2d');\n      var xAttr = this.getAttribute('x');\n      var yAttr = this.getAttribute('y');\n      if (xAttr.hasValue() && yAttr.hasValue()) {\n        patternCtx.translate(xAttr.getPixels('x', true), yAttr.getPixels('y', true));\n      }\n      if (parentOpacityProp.hasValue()) {\n        this.styles['fill-opacity'] = parentOpacityProp;\n      } else {\n        Reflect.deleteProperty(this.styles, 'fill-opacity');\n      } // render 3x3 grid so when we transform there's no white space on edges\n\n      for (var x = -1; x <= 1; x++) {\n        for (var y = -1; y <= 1; y++) {\n          patternCtx.save();\n          patternSvg.attributes.x = new Property(this.document, 'x', x * patternCanvas.width);\n          patternSvg.attributes.y = new Property(this.document, 'y', y * patternCanvas.height);\n          patternSvg.render(patternCtx);\n          patternCtx.restore();\n        }\n      }\n      var pattern = ctx.createPattern(patternCanvas, 'repeat');\n      return pattern;\n    }\n  }]);\n}(Element);\nvar MarkerElement = /*#__PURE__*/function (_Element4) {\n  function MarkerElement() {\n    var _this27;\n    _classCallCheck(this, MarkerElement);\n    _this27 = _callSuper(this, MarkerElement, arguments);\n    _this27.type = 'marker';\n    return _this27;\n  }\n  _inherits(MarkerElement, _Element4);\n  return _createClass(MarkerElement, [{\n    key: \"render\",\n    value: function render(ctx, point, angle) {\n      if (!point) {\n        return;\n      }\n      var x = point.x,\n        y = point.y;\n      var orient = this.getAttribute('orient').getString('auto');\n      var markerUnits = this.getAttribute('markerUnits').getString('strokeWidth');\n      ctx.translate(x, y);\n      if (orient === 'auto') {\n        ctx.rotate(angle);\n      }\n      if (markerUnits === 'strokeWidth') {\n        ctx.scale(ctx.lineWidth, ctx.lineWidth);\n      }\n      ctx.save(); // render me using a temporary svg element\n\n      var markerSvg = new SVGElement(this.document, null);\n      markerSvg.type = this.type;\n      markerSvg.attributes.viewBox = new Property(this.document, 'viewBox', this.getAttribute('viewBox').getValue());\n      markerSvg.attributes.refX = new Property(this.document, 'refX', this.getAttribute('refX').getValue());\n      markerSvg.attributes.refY = new Property(this.document, 'refY', this.getAttribute('refY').getValue());\n      markerSvg.attributes.width = new Property(this.document, 'width', this.getAttribute('markerWidth').getValue());\n      markerSvg.attributes.height = new Property(this.document, 'height', this.getAttribute('markerHeight').getValue());\n      markerSvg.attributes.overflow = new Property(this.document, 'overflow', this.getAttribute('overflow').getValue());\n      markerSvg.attributes.fill = new Property(this.document, 'fill', this.getAttribute('fill').getColor('black'));\n      markerSvg.attributes.stroke = new Property(this.document, 'stroke', this.getAttribute('stroke').getValue('none'));\n      markerSvg.children = this.children;\n      markerSvg.render(ctx);\n      ctx.restore();\n      if (markerUnits === 'strokeWidth') {\n        ctx.scale(1 / ctx.lineWidth, 1 / ctx.lineWidth);\n      }\n      if (orient === 'auto') {\n        ctx.rotate(-angle);\n      }\n      ctx.translate(-x, -y);\n    }\n  }]);\n}(Element);\nvar DefsElement = /*#__PURE__*/function (_Element5) {\n  function DefsElement() {\n    var _this28;\n    _classCallCheck(this, DefsElement);\n    _this28 = _callSuper(this, DefsElement, arguments);\n    _this28.type = 'defs';\n    return _this28;\n  }\n  _inherits(DefsElement, _Element5);\n  return _createClass(DefsElement, [{\n    key: \"render\",\n    value: function render() {// NOOP\n    }\n  }]);\n}(Element);\nvar GElement = /*#__PURE__*/function (_RenderedElement4) {\n  function GElement() {\n    var _this29;\n    _classCallCheck(this, GElement);\n    _this29 = _callSuper(this, GElement, arguments);\n    _this29.type = 'g';\n    return _this29;\n  }\n  _inherits(GElement, _RenderedElement4);\n  return _createClass(GElement, [{\n    key: \"getBoundingBox\",\n    value: function getBoundingBox(ctx) {\n      var boundingBox = new BoundingBox();\n      this.children.forEach(function (child) {\n        boundingBox.addBoundingBox(child.getBoundingBox(ctx));\n      });\n      return boundingBox;\n    }\n  }]);\n}(RenderedElement);\nvar GradientElement = /*#__PURE__*/function (_Element6) {\n  function GradientElement(document, node, captureTextNodes) {\n    var _this30;\n    _classCallCheck(this, GradientElement);\n    _this30 = _callSuper(this, GradientElement, [document, node, captureTextNodes]);\n    _this30.attributesToInherit = ['gradientUnits'];\n    _this30.stops = [];\n    var _this31 = _this30,\n      stops = _this31.stops,\n      children = _this31.children;\n    children.forEach(function (child) {\n      if (child.type === 'stop') {\n        stops.push(child);\n      }\n    });\n    return _this30;\n  }\n  _inherits(GradientElement, _Element6);\n  return _createClass(GradientElement, [{\n    key: \"getGradientUnits\",\n    value: function getGradientUnits() {\n      return this.getAttribute('gradientUnits').getString('objectBoundingBox');\n    }\n  }, {\n    key: \"createGradient\",\n    value: function createGradient(ctx, element, parentOpacityProp) {\n      var _this32 = this;\n      // eslint-disable-next-line @typescript-eslint/no-this-alias, consistent-this\n      var stopsContainer = this;\n      if (this.getHrefAttribute().hasValue()) {\n        stopsContainer = this.getHrefAttribute().getDefinition();\n        this.inheritStopContainer(stopsContainer);\n      }\n      var _stopsContainer = stopsContainer,\n        stops = _stopsContainer.stops;\n      var gradient = this.getGradient(ctx, element);\n      if (!gradient) {\n        return this.addParentOpacity(parentOpacityProp, stops[stops.length - 1].color);\n      }\n      stops.forEach(function (stop) {\n        gradient.addColorStop(stop.offset, _this32.addParentOpacity(parentOpacityProp, stop.color));\n      });\n      if (this.getAttribute('gradientTransform').hasValue()) {\n        // render as transformed pattern on temporary canvas\n        var document = this.document;\n        var _document$screen = document.screen,\n          MAX_VIRTUAL_PIXELS = _document$screen.MAX_VIRTUAL_PIXELS,\n          viewPort = _document$screen.viewPort;\n        var _viewPort$viewPorts = _slicedToArray(viewPort.viewPorts, 1),\n          rootView = _viewPort$viewPorts[0];\n        var rect = new RectElement(document, null);\n        rect.attributes.x = new Property(document, 'x', -MAX_VIRTUAL_PIXELS / 3.0);\n        rect.attributes.y = new Property(document, 'y', -MAX_VIRTUAL_PIXELS / 3.0);\n        rect.attributes.width = new Property(document, 'width', MAX_VIRTUAL_PIXELS);\n        rect.attributes.height = new Property(document, 'height', MAX_VIRTUAL_PIXELS);\n        var group = new GElement(document, null);\n        group.attributes.transform = new Property(document, 'transform', this.getAttribute('gradientTransform').getValue());\n        group.children = [rect];\n        var patternSvg = new SVGElement(document, null);\n        patternSvg.attributes.x = new Property(document, 'x', 0);\n        patternSvg.attributes.y = new Property(document, 'y', 0);\n        patternSvg.attributes.width = new Property(document, 'width', rootView.width);\n        patternSvg.attributes.height = new Property(document, 'height', rootView.height);\n        patternSvg.children = [group];\n        var patternCanvas = document.createCanvas(rootView.width, rootView.height);\n        var patternCtx = patternCanvas.getContext('2d');\n        patternCtx.fillStyle = gradient;\n        patternSvg.render(patternCtx);\n        return patternCtx.createPattern(patternCanvas, 'no-repeat');\n      }\n      return gradient;\n    }\n  }, {\n    key: \"inheritStopContainer\",\n    value: function inheritStopContainer(stopsContainer) {\n      var _this33 = this;\n      this.attributesToInherit.forEach(function (attributeToInherit) {\n        if (!_this33.getAttribute(attributeToInherit).hasValue() && stopsContainer.getAttribute(attributeToInherit).hasValue()) {\n          _this33.getAttribute(attributeToInherit, true).setValue(stopsContainer.getAttribute(attributeToInherit).getValue());\n        }\n      });\n    }\n  }, {\n    key: \"addParentOpacity\",\n    value: function addParentOpacity(parentOpacityProp, color) {\n      if (parentOpacityProp.hasValue()) {\n        var colorProp = new Property(this.document, 'color', color);\n        return colorProp.addOpacity(parentOpacityProp).getColor();\n      }\n      return color;\n    }\n  }]);\n}(Element);\nvar LinearGradientElement = /*#__PURE__*/function (_GradientElement) {\n  function LinearGradientElement(document, node, captureTextNodes) {\n    var _this34;\n    _classCallCheck(this, LinearGradientElement);\n    _this34 = _callSuper(this, LinearGradientElement, [document, node, captureTextNodes]);\n    _this34.type = 'linearGradient';\n    _this34.attributesToInherit.push('x1', 'y1', 'x2', 'y2');\n    return _this34;\n  }\n  _inherits(LinearGradientElement, _GradientElement);\n  return _createClass(LinearGradientElement, [{\n    key: \"getGradient\",\n    value: function getGradient(ctx, element) {\n      var isBoundingBoxUnits = this.getGradientUnits() === 'objectBoundingBox';\n      var boundingBox = isBoundingBoxUnits ? element.getBoundingBox(ctx) : null;\n      if (isBoundingBoxUnits && !boundingBox) {\n        return null;\n      }\n      if (!this.getAttribute('x1').hasValue() && !this.getAttribute('y1').hasValue() && !this.getAttribute('x2').hasValue() && !this.getAttribute('y2').hasValue()) {\n        this.getAttribute('x1', true).setValue(0);\n        this.getAttribute('y1', true).setValue(0);\n        this.getAttribute('x2', true).setValue(1);\n        this.getAttribute('y2', true).setValue(0);\n      }\n      var x1 = isBoundingBoxUnits ? boundingBox.x + boundingBox.width * this.getAttribute('x1').getNumber() : this.getAttribute('x1').getPixels('x');\n      var y1 = isBoundingBoxUnits ? boundingBox.y + boundingBox.height * this.getAttribute('y1').getNumber() : this.getAttribute('y1').getPixels('y');\n      var x2 = isBoundingBoxUnits ? boundingBox.x + boundingBox.width * this.getAttribute('x2').getNumber() : this.getAttribute('x2').getPixels('x');\n      var y2 = isBoundingBoxUnits ? boundingBox.y + boundingBox.height * this.getAttribute('y2').getNumber() : this.getAttribute('y2').getPixels('y');\n      if (x1 === x2 && y1 === y2) {\n        return null;\n      }\n      return ctx.createLinearGradient(x1, y1, x2, y2);\n    }\n  }]);\n}(GradientElement);\nvar RadialGradientElement = /*#__PURE__*/function (_GradientElement2) {\n  function RadialGradientElement(document, node, captureTextNodes) {\n    var _this35;\n    _classCallCheck(this, RadialGradientElement);\n    _this35 = _callSuper(this, RadialGradientElement, [document, node, captureTextNodes]);\n    _this35.type = 'radialGradient';\n    _this35.attributesToInherit.push('cx', 'cy', 'r', 'fx', 'fy', 'fr');\n    return _this35;\n  }\n  _inherits(RadialGradientElement, _GradientElement2);\n  return _createClass(RadialGradientElement, [{\n    key: \"getGradient\",\n    value: function getGradient(ctx, element) {\n      var isBoundingBoxUnits = this.getGradientUnits() === 'objectBoundingBox';\n      var boundingBox = element.getBoundingBox(ctx);\n      if (isBoundingBoxUnits && !boundingBox) {\n        return null;\n      }\n      if (!this.getAttribute('cx').hasValue()) {\n        this.getAttribute('cx', true).setValue('50%');\n      }\n      if (!this.getAttribute('cy').hasValue()) {\n        this.getAttribute('cy', true).setValue('50%');\n      }\n      if (!this.getAttribute('r').hasValue()) {\n        this.getAttribute('r', true).setValue('50%');\n      }\n      var cx = isBoundingBoxUnits ? boundingBox.x + boundingBox.width * this.getAttribute('cx').getNumber() : this.getAttribute('cx').getPixels('x');\n      var cy = isBoundingBoxUnits ? boundingBox.y + boundingBox.height * this.getAttribute('cy').getNumber() : this.getAttribute('cy').getPixels('y');\n      var fx = cx;\n      var fy = cy;\n      if (this.getAttribute('fx').hasValue()) {\n        fx = isBoundingBoxUnits ? boundingBox.x + boundingBox.width * this.getAttribute('fx').getNumber() : this.getAttribute('fx').getPixels('x');\n      }\n      if (this.getAttribute('fy').hasValue()) {\n        fy = isBoundingBoxUnits ? boundingBox.y + boundingBox.height * this.getAttribute('fy').getNumber() : this.getAttribute('fy').getPixels('y');\n      }\n      var r = isBoundingBoxUnits ? (boundingBox.width + boundingBox.height) / 2.0 * this.getAttribute('r').getNumber() : this.getAttribute('r').getPixels();\n      var fr = this.getAttribute('fr').getPixels();\n      return ctx.createRadialGradient(fx, fy, fr, cx, cy, r);\n    }\n  }]);\n}(GradientElement);\nvar StopElement = /*#__PURE__*/function (_Element7) {\n  function StopElement(document, node, captureTextNodes) {\n    var _this36;\n    _classCallCheck(this, StopElement);\n    _this36 = _callSuper(this, StopElement, [document, node, captureTextNodes]);\n    _this36.type = 'stop';\n    var offset = Math.max(0, Math.min(1, _this36.getAttribute('offset').getNumber()));\n    var stopOpacity = _this36.getStyle('stop-opacity');\n    var stopColor = _this36.getStyle('stop-color', true);\n    if (stopColor.getString() === '') {\n      stopColor.setValue('#000');\n    }\n    if (stopOpacity.hasValue()) {\n      stopColor = stopColor.addOpacity(stopOpacity);\n    }\n    _this36.offset = offset;\n    _this36.color = stopColor.getColor();\n    return _this36;\n  }\n  _inherits(StopElement, _Element7);\n  return _createClass(StopElement);\n}(Element);\nvar AnimateElement = /*#__PURE__*/function (_Element8) {\n  function AnimateElement(document, node, captureTextNodes) {\n    var _this37;\n    _classCallCheck(this, AnimateElement);\n    _this37 = _callSuper(this, AnimateElement, [document, node, captureTextNodes]);\n    _this37.type = 'animate';\n    _this37.duration = 0;\n    _this37.initialValue = null;\n    _this37.initialUnits = '';\n    _this37.removed = false;\n    _this37.frozen = false;\n    document.screen.animations.push(_this37);\n    _this37.begin = _this37.getAttribute('begin').getMilliseconds();\n    _this37.maxDuration = _this37.begin + _this37.getAttribute('dur').getMilliseconds();\n    _this37.from = _this37.getAttribute('from');\n    _this37.to = _this37.getAttribute('to');\n    _this37.values = new Property(document, 'values', null);\n    var valuesAttr = _this37.getAttribute('values');\n    if (valuesAttr.hasValue()) {\n      _this37.values.setValue(valuesAttr.getString().split(';'));\n    }\n    return _this37;\n  }\n  _inherits(AnimateElement, _Element8);\n  return _createClass(AnimateElement, [{\n    key: \"getProperty\",\n    value: function getProperty() {\n      var attributeType = this.getAttribute('attributeType').getString();\n      var attributeName = this.getAttribute('attributeName').getString();\n      if (attributeType === 'CSS') {\n        return this.parent.getStyle(attributeName, true);\n      }\n      return this.parent.getAttribute(attributeName, true);\n    }\n  }, {\n    key: \"calcValue\",\n    value: function calcValue() {\n      var initialUnits = this.initialUnits;\n      var _this$getProgress = this.getProgress(),\n        progress = _this$getProgress.progress,\n        from = _this$getProgress.from,\n        to = _this$getProgress.to; // tween value linearly\n\n      var newValue = from.getNumber() + (to.getNumber() - from.getNumber()) * progress;\n      if (initialUnits === '%') {\n        newValue *= 100.0; // numValue() returns 0-1 whereas properties are 0-100\n      }\n\n      return \"\".concat(newValue).concat(initialUnits);\n    }\n  }, {\n    key: \"update\",\n    value: function update(delta) {\n      var parent = this.parent;\n      var prop = this.getProperty(); // set initial value\n\n      if (!this.initialValue) {\n        this.initialValue = prop.getString();\n        this.initialUnits = prop.getUnits();\n      } // if we're past the end time\n\n      if (this.duration > this.maxDuration) {\n        var fill = this.getAttribute('fill').getString('remove'); // loop for indefinitely repeating animations\n\n        if (this.getAttribute('repeatCount').getString() === 'indefinite' || this.getAttribute('repeatDur').getString() === 'indefinite') {\n          this.duration = 0;\n        } else if (fill === 'freeze' && !this.frozen) {\n          this.frozen = true;\n          parent.animationFrozen = true;\n          parent.animationFrozenValue = prop.getString();\n        } else if (fill === 'remove' && !this.removed) {\n          this.removed = true;\n          prop.setValue(parent.animationFrozen ? parent.animationFrozenValue : this.initialValue);\n          return true;\n        }\n        return false;\n      }\n      this.duration += delta; // if we're past the begin time\n\n      var updated = false;\n      if (this.begin < this.duration) {\n        var newValue = this.calcValue(); // tween\n\n        var typeAttr = this.getAttribute('type');\n        if (typeAttr.hasValue()) {\n          // for transform, etc.\n          var type = typeAttr.getString();\n          newValue = \"\".concat(type, \"(\").concat(newValue, \")\");\n        }\n        prop.setValue(newValue);\n        updated = true;\n      }\n      return updated;\n    }\n  }, {\n    key: \"getProgress\",\n    value: function getProgress() {\n      var document = this.document,\n        values = this.values;\n      var result = {\n        progress: (this.duration - this.begin) / (this.maxDuration - this.begin)\n      };\n      if (values.hasValue()) {\n        var p = result.progress * (values.getValue().length - 1);\n        var lb = Math.floor(p);\n        var ub = Math.ceil(p);\n        result.from = new Property(document, 'from', parseFloat(values.getValue()[lb]));\n        result.to = new Property(document, 'to', parseFloat(values.getValue()[ub]));\n        result.progress = (p - lb) / (ub - lb);\n      } else {\n        result.from = this.from;\n        result.to = this.to;\n      }\n      return result;\n    }\n  }]);\n}(Element);\nvar AnimateColorElement = /*#__PURE__*/function (_AnimateElement) {\n  function AnimateColorElement() {\n    var _this38;\n    _classCallCheck(this, AnimateColorElement);\n    _this38 = _callSuper(this, AnimateColorElement, arguments);\n    _this38.type = 'animateColor';\n    return _this38;\n  }\n  _inherits(AnimateColorElement, _AnimateElement);\n  return _createClass(AnimateColorElement, [{\n    key: \"calcValue\",\n    value: function calcValue() {\n      var _this$getProgress2 = this.getProgress(),\n        progress = _this$getProgress2.progress,\n        from = _this$getProgress2.from,\n        to = _this$getProgress2.to;\n      var colorFrom = new rgbcolor__WEBPACK_IMPORTED_MODULE_13__(from.getColor());\n      var colorTo = new rgbcolor__WEBPACK_IMPORTED_MODULE_13__(to.getColor());\n      if (colorFrom.ok && colorTo.ok) {\n        // tween color linearly\n        var r = colorFrom.r + (colorTo.r - colorFrom.r) * progress;\n        var g = colorFrom.g + (colorTo.g - colorFrom.g) * progress;\n        var b = colorFrom.b + (colorTo.b - colorFrom.b) * progress; // ? alpha\n\n        return \"rgb(\".concat(Math.floor(r), \", \").concat(Math.floor(g), \", \").concat(Math.floor(b), \")\");\n      }\n      return this.getAttribute('from').getColor();\n    }\n  }]);\n}(AnimateElement);\nvar AnimateTransformElement = /*#__PURE__*/function (_AnimateElement2) {\n  function AnimateTransformElement() {\n    var _this39;\n    _classCallCheck(this, AnimateTransformElement);\n    _this39 = _callSuper(this, AnimateTransformElement, arguments);\n    _this39.type = 'animateTransform';\n    return _this39;\n  }\n  _inherits(AnimateTransformElement, _AnimateElement2);\n  return _createClass(AnimateTransformElement, [{\n    key: \"calcValue\",\n    value: function calcValue() {\n      var _this$getProgress3 = this.getProgress(),\n        progress = _this$getProgress3.progress,\n        from = _this$getProgress3.from,\n        to = _this$getProgress3.to; // tween value linearly\n\n      var transformFrom = toNumbers(from.getString());\n      var transformTo = toNumbers(to.getString());\n      var newValue = transformFrom.map(function (from, i) {\n        var to = transformTo[i];\n        return from + (to - from) * progress;\n      }).join(' ');\n      return newValue;\n    }\n  }]);\n}(AnimateElement);\nvar FontElement = /*#__PURE__*/function (_Element9) {\n  function FontElement(document, node, captureTextNodes) {\n    var _this40;\n    _classCallCheck(this, FontElement);\n    _this40 = _callSuper(this, FontElement, [document, node, captureTextNodes]);\n    _this40.type = 'font';\n    _this40.glyphs = Object.create(null);\n    _this40.horizAdvX = _this40.getAttribute('horiz-adv-x').getNumber();\n    var definitions = document.definitions;\n    var _this41 = _this40,\n      children = _this41.children;\n    var _iterator = _createForOfIteratorHelper(children),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var child = _step.value;\n        switch (child.type) {\n          case 'font-face':\n            {\n              _this40.fontFace = child;\n              var fontFamilyStyle = child.getStyle('font-family');\n              if (fontFamilyStyle.hasValue()) {\n                definitions[fontFamilyStyle.getString()] = _this40;\n              }\n              break;\n            }\n          case 'missing-glyph':\n            _this40.missingGlyph = child;\n            break;\n          case 'glyph':\n            {\n              var glyph = child;\n              if (glyph.arabicForm) {\n                _this40.isRTL = true;\n                _this40.isArabic = true;\n                if (typeof _this40.glyphs[glyph.unicode] === 'undefined') {\n                  _this40.glyphs[glyph.unicode] = Object.create(null);\n                }\n                _this40.glyphs[glyph.unicode][glyph.arabicForm] = glyph;\n              } else {\n                _this40.glyphs[glyph.unicode] = glyph;\n              }\n              break;\n            }\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    return _this40;\n  }\n  _inherits(FontElement, _Element9);\n  return _createClass(FontElement, [{\n    key: \"render\",\n    value: function render() {// NO RENDER\n    }\n  }]);\n}(Element);\nvar FontFaceElement = /*#__PURE__*/function (_Element10) {\n  function FontFaceElement(document, node, captureTextNodes) {\n    var _this42;\n    _classCallCheck(this, FontFaceElement);\n    _this42 = _callSuper(this, FontFaceElement, [document, node, captureTextNodes]);\n    _this42.type = 'font-face';\n    _this42.ascent = _this42.getAttribute('ascent').getNumber();\n    _this42.descent = _this42.getAttribute('descent').getNumber();\n    _this42.unitsPerEm = _this42.getAttribute('units-per-em').getNumber();\n    return _this42;\n  }\n  _inherits(FontFaceElement, _Element10);\n  return _createClass(FontFaceElement);\n}(Element);\nvar MissingGlyphElement = /*#__PURE__*/function (_PathElement7) {\n  function MissingGlyphElement() {\n    var _this43;\n    _classCallCheck(this, MissingGlyphElement);\n    _this43 = _callSuper(this, MissingGlyphElement, arguments);\n    _this43.type = 'missing-glyph';\n    _this43.horizAdvX = 0;\n    return _this43;\n  }\n  _inherits(MissingGlyphElement, _PathElement7);\n  return _createClass(MissingGlyphElement);\n}(PathElement);\nvar TRefElement = /*#__PURE__*/function (_TextElement2) {\n  function TRefElement() {\n    var _this44;\n    _classCallCheck(this, TRefElement);\n    _this44 = _callSuper(this, TRefElement, arguments);\n    _this44.type = 'tref';\n    return _this44;\n  }\n  _inherits(TRefElement, _TextElement2);\n  return _createClass(TRefElement, [{\n    key: \"getText\",\n    value: function getText() {\n      var element = this.getHrefAttribute().getDefinition();\n      if (element) {\n        var firstChild = element.children[0];\n        if (firstChild) {\n          return firstChild.getText();\n        }\n      }\n      return '';\n    }\n  }]);\n}(TextElement);\nvar AElement = /*#__PURE__*/function (_TextElement3) {\n  function AElement(document, node, captureTextNodes) {\n    var _this45;\n    _classCallCheck(this, AElement);\n    _this45 = _callSuper(this, AElement, [document, node, captureTextNodes]);\n    _this45.type = 'a';\n    var childNodes = node.childNodes;\n    var firstChild = childNodes[0];\n    var hasText = childNodes.length > 0 && Array.from(childNodes).every(function (node) {\n      return node.nodeType === 3;\n    });\n    _this45.hasText = hasText;\n    _this45.text = hasText ? _this45.getTextFromNode(firstChild) : '';\n    return _this45;\n  }\n  _inherits(AElement, _TextElement3);\n  return _createClass(AElement, [{\n    key: \"getText\",\n    value: function getText() {\n      return this.text;\n    }\n  }, {\n    key: \"renderChildren\",\n    value: function renderChildren(ctx) {\n      if (this.hasText) {\n        // render as text element\n        _get(_getPrototypeOf(AElement.prototype), \"renderChildren\", this).call(this, ctx);\n        var document = this.document,\n          x = this.x,\n          y = this.y;\n        var mouse = document.screen.mouse;\n        var fontSize = new Property(document, 'fontSize', Font.parse(document.ctx.font).fontSize); // Do not calc bounding box if mouse is not working.\n\n        if (mouse.isWorking()) {\n          mouse.checkBoundingBox(this, new BoundingBox(x, y - fontSize.getPixels('y'), x + this.measureText(ctx), y));\n        }\n      } else if (this.children.length > 0) {\n        // render as temporary group\n        var g = new GElement(this.document, null);\n        g.children = this.children;\n        g.parent = this;\n        g.render(ctx);\n      }\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick() {\n      var window = this.document.window;\n      if (window) {\n        window.open(this.getHrefAttribute().getString());\n      }\n    }\n  }, {\n    key: \"onMouseMove\",\n    value: function onMouseMove() {\n      var ctx = this.document.ctx;\n      ctx.canvas.style.cursor = 'pointer';\n    }\n  }]);\n}(TextElement);\nfunction ownKeys$2(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys$2(Object(source), true).forEach(function (key) {\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_7__(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$2(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nvar TextPathElement = /*#__PURE__*/function (_TextElement4) {\n  function TextPathElement(document, node, captureTextNodes) {\n    var _this46;\n    _classCallCheck(this, TextPathElement);\n    _this46 = _callSuper(this, TextPathElement, [document, node, captureTextNodes]);\n    _this46.type = 'textPath';\n    _this46.textWidth = 0;\n    _this46.textHeight = 0;\n    _this46.pathLength = -1;\n    _this46.glyphInfo = null;\n    _this46.letterSpacingCache = [];\n    _this46.measuresCache = new Map([['', 0]]);\n    var pathElement = _this46.getHrefAttribute().getDefinition();\n    _this46.text = _this46.getTextFromNode();\n    _this46.dataArray = _this46.parsePathData(pathElement);\n    return _this46;\n  }\n  _inherits(TextPathElement, _TextElement4);\n  return _createClass(TextPathElement, [{\n    key: \"getText\",\n    value: function getText() {\n      return this.text;\n    }\n  }, {\n    key: \"path\",\n    value: function path(ctx) {\n      var dataArray = this.dataArray;\n      if (ctx) {\n        ctx.beginPath();\n      }\n      dataArray.forEach(function (_ref) {\n        var type = _ref.type,\n          points = _ref.points;\n        switch (type) {\n          case PathParser.LINE_TO:\n            if (ctx) {\n              ctx.lineTo(points[0], points[1]);\n            }\n            break;\n          case PathParser.MOVE_TO:\n            if (ctx) {\n              ctx.moveTo(points[0], points[1]);\n            }\n            break;\n          case PathParser.CURVE_TO:\n            if (ctx) {\n              ctx.bezierCurveTo(points[0], points[1], points[2], points[3], points[4], points[5]);\n            }\n            break;\n          case PathParser.QUAD_TO:\n            if (ctx) {\n              ctx.quadraticCurveTo(points[0], points[1], points[2], points[3]);\n            }\n            break;\n          case PathParser.ARC:\n            {\n              var _points2 = _slicedToArray(points, 8),\n                cx = _points2[0],\n                cy = _points2[1],\n                rx = _points2[2],\n                ry = _points2[3],\n                theta = _points2[4],\n                dTheta = _points2[5],\n                psi = _points2[6],\n                fs = _points2[7];\n              var r = rx > ry ? rx : ry;\n              var scaleX = rx > ry ? 1 : rx / ry;\n              var scaleY = rx > ry ? ry / rx : 1;\n              if (ctx) {\n                ctx.translate(cx, cy);\n                ctx.rotate(psi);\n                ctx.scale(scaleX, scaleY);\n                ctx.arc(0, 0, r, theta, theta + dTheta, Boolean(1 - fs));\n                ctx.scale(1 / scaleX, 1 / scaleY);\n                ctx.rotate(-psi);\n                ctx.translate(-cx, -cy);\n              }\n              break;\n            }\n          case PathParser.CLOSE_PATH:\n            if (ctx) {\n              ctx.closePath();\n            }\n            break;\n        }\n      });\n    }\n  }, {\n    key: \"renderChildren\",\n    value: function renderChildren(ctx) {\n      this.setTextData(ctx);\n      ctx.save();\n      var textDecoration = this.parent.getStyle('text-decoration').getString();\n      var fontSize = this.getFontSize();\n      var glyphInfo = this.glyphInfo;\n      var fill = ctx.fillStyle;\n      if (textDecoration === 'underline') {\n        ctx.beginPath();\n      }\n      glyphInfo.forEach(function (glyph, i) {\n        var p0 = glyph.p0,\n          p1 = glyph.p1,\n          rotation = glyph.rotation,\n          partialText = glyph.text;\n        ctx.save();\n        ctx.translate(p0.x, p0.y);\n        ctx.rotate(rotation);\n        if (ctx.fillStyle) {\n          ctx.fillText(partialText, 0, 0);\n        }\n        if (ctx.strokeStyle) {\n          ctx.strokeText(partialText, 0, 0);\n        }\n        ctx.restore();\n        if (textDecoration === 'underline') {\n          if (i === 0) {\n            ctx.moveTo(p0.x, p0.y + fontSize / 8);\n          }\n          ctx.lineTo(p1.x, p1.y + fontSize / 5);\n        } // // To assist with debugging visually, uncomment following\n        //\n        // ctx.beginPath();\n        // if (i % 2)\n        // \tctx.strokeStyle = 'red';\n        // else\n        // \tctx.strokeStyle = 'green';\n        // ctx.moveTo(p0.x, p0.y);\n        // ctx.lineTo(p1.x, p1.y);\n        // ctx.stroke();\n        // ctx.closePath();\n      });\n\n      if (textDecoration === 'underline') {\n        ctx.lineWidth = fontSize / 20;\n        ctx.strokeStyle = fill;\n        ctx.stroke();\n        ctx.closePath();\n      }\n      ctx.restore();\n    }\n  }, {\n    key: \"getLetterSpacingAt\",\n    value: function getLetterSpacingAt() {\n      var idx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      return this.letterSpacingCache[idx] || 0;\n    }\n  }, {\n    key: \"findSegmentToFitChar\",\n    value: function findSegmentToFitChar(ctx, anchor, textFullWidth, fullPathWidth, spacesNumber, inputOffset, dy, c, charI) {\n      var offset = inputOffset;\n      var glyphWidth = this.measureText(ctx, c);\n      if (c === ' ' && anchor === 'justify' && textFullWidth < fullPathWidth) {\n        glyphWidth += (fullPathWidth - textFullWidth) / spacesNumber;\n      }\n      if (charI > -1) {\n        offset += this.getLetterSpacingAt(charI);\n      }\n      var splineStep = this.textHeight / 20;\n      var p0 = this.getEquidistantPointOnPath(offset, splineStep, 0);\n      var p1 = this.getEquidistantPointOnPath(offset + glyphWidth, splineStep, 0);\n      var segment = {\n        p0: p0,\n        p1: p1\n      };\n      var rotation = p0 && p1 ? Math.atan2(p1.y - p0.y, p1.x - p0.x) : 0;\n      if (dy) {\n        var dyX = Math.cos(Math.PI / 2 + rotation) * dy;\n        var dyY = Math.cos(-rotation) * dy;\n        segment.p0 = _objectSpread$2(_objectSpread$2({}, p0), {}, {\n          x: p0.x + dyX,\n          y: p0.y + dyY\n        });\n        segment.p1 = _objectSpread$2(_objectSpread$2({}, p1), {}, {\n          x: p1.x + dyX,\n          y: p1.y + dyY\n        });\n      }\n      offset += glyphWidth;\n      return {\n        offset: offset,\n        segment: segment,\n        rotation: rotation\n      };\n    }\n  }, {\n    key: \"measureText\",\n    value: function measureText(ctx, text) {\n      var measuresCache = this.measuresCache;\n      var targetText = text || this.getText();\n      if (measuresCache.has(targetText)) {\n        return measuresCache.get(targetText);\n      }\n      var measure = this.measureTargetText(ctx, targetText);\n      measuresCache.set(targetText, measure);\n      return measure;\n    } // This method supposes what all custom fonts already loaded.\n    // If some font will be loaded after this method call, <textPath> will not be rendered correctly.\n    // You need to call this method manually to update glyphs cache.\n  }, {\n    key: \"setTextData\",\n    value: function setTextData(ctx) {\n      var _this47 = this;\n      if (this.glyphInfo) {\n        return;\n      }\n      var renderText = this.getText();\n      var chars = renderText.split('');\n      var spacesNumber = renderText.split(' ').length - 1;\n      var dx = this.parent.getAttribute('dx').split().map(function (_) {\n        return _.getPixels('x');\n      });\n      var dy = this.parent.getAttribute('dy').getPixels('y');\n      var anchor = this.parent.getStyle('text-anchor').getString('start');\n      var thisSpacing = this.getStyle('letter-spacing');\n      var parentSpacing = this.parent.getStyle('letter-spacing');\n      var letterSpacing = 0;\n      if (!thisSpacing.hasValue() || thisSpacing.getValue() === 'inherit') {\n        letterSpacing = parentSpacing.getPixels();\n      } else if (thisSpacing.hasValue()) {\n        if (thisSpacing.getValue() !== 'initial' && thisSpacing.getValue() !== 'unset') {\n          letterSpacing = thisSpacing.getPixels();\n        }\n      } // fill letter-spacing cache\n\n      var letterSpacingCache = [];\n      var textLen = renderText.length;\n      this.letterSpacingCache = letterSpacingCache;\n      for (var i = 0; i < textLen; i++) {\n        letterSpacingCache.push(typeof dx[i] !== 'undefined' ? dx[i] : letterSpacing);\n      }\n      var dxSum = letterSpacingCache.reduce(function (acc, cur, i) {\n        return i === 0 ? 0 : acc + cur || 0;\n      }, 0);\n      var textWidth = this.measureText(ctx);\n      var textFullWidth = Math.max(textWidth + dxSum, 0);\n      this.textWidth = textWidth;\n      this.textHeight = this.getFontSize();\n      this.glyphInfo = [];\n      var fullPathWidth = this.getPathLength();\n      var startOffset = this.getStyle('startOffset').getNumber(0) * fullPathWidth;\n      var offset = 0;\n      if (anchor === 'middle' || anchor === 'center') {\n        offset = -textFullWidth / 2;\n      }\n      if (anchor === 'end' || anchor === 'right') {\n        offset = -textFullWidth;\n      }\n      offset += startOffset;\n      chars.forEach(function (_char2, i) {\n        // Find such segment what distance between p0 and p1 is approx. width of glyph\n        var _this47$findSegmentTo = _this47.findSegmentToFitChar(ctx, anchor, textFullWidth, fullPathWidth, spacesNumber, offset, dy, _char2, i),\n          nextOffset = _this47$findSegmentTo.offset,\n          segment = _this47$findSegmentTo.segment,\n          rotation = _this47$findSegmentTo.rotation;\n        offset = nextOffset;\n        if (!segment.p0 || !segment.p1) {\n          return;\n        } // const width = this.getLineLength(\n        // \tsegment.p0.x,\n        // \tsegment.p0.y,\n        // \tsegment.p1.x,\n        // \tsegment.p1.y\n        // );\n        // Note: Since glyphs are rendered one at a time, any kerning pair data built into the font will not be used.\n        // Can foresee having a rough pair table built in that the developer can override as needed.\n        // Or use \"dx\" attribute of the <text> node as a naive replacement\n        // const kern = 0;\n        // placeholder for future implementation\n        // const midpoint = this.getPointOnLine(\n        // \tkern + width / 2.0,\n        // \tsegment.p0.x, segment.p0.y, segment.p1.x, segment.p1.y\n        // );\n\n        _this47.glyphInfo.push({\n          // transposeX: midpoint.x,\n          // transposeY: midpoint.y,\n          text: chars[i],\n          p0: segment.p0,\n          p1: segment.p1,\n          rotation: rotation\n        });\n      });\n    }\n  }, {\n    key: \"parsePathData\",\n    value: function parsePathData(path) {\n      this.pathLength = -1; // reset path length\n\n      if (!path) {\n        return [];\n      }\n      var pathCommands = [];\n      var pathParser = path.pathParser;\n      pathParser.reset(); // convert l, H, h, V, and v to L\n\n      while (!pathParser.isEnd()) {\n        var current = pathParser.current;\n        var startX = current ? current.x : 0;\n        var startY = current ? current.y : 0;\n        var command = pathParser.next();\n        var nextCommandType = command.type;\n        var points = [];\n        switch (command.type) {\n          case PathParser.MOVE_TO:\n            this.pathM(pathParser, points);\n            break;\n          case PathParser.LINE_TO:\n            nextCommandType = this.pathL(pathParser, points);\n            break;\n          case PathParser.HORIZ_LINE_TO:\n            nextCommandType = this.pathH(pathParser, points);\n            break;\n          case PathParser.VERT_LINE_TO:\n            nextCommandType = this.pathV(pathParser, points);\n            break;\n          case PathParser.CURVE_TO:\n            this.pathC(pathParser, points);\n            break;\n          case PathParser.SMOOTH_CURVE_TO:\n            nextCommandType = this.pathS(pathParser, points);\n            break;\n          case PathParser.QUAD_TO:\n            this.pathQ(pathParser, points);\n            break;\n          case PathParser.SMOOTH_QUAD_TO:\n            nextCommandType = this.pathT(pathParser, points);\n            break;\n          case PathParser.ARC:\n            points = this.pathA(pathParser);\n            break;\n          case PathParser.CLOSE_PATH:\n            PathElement.pathZ(pathParser);\n            break;\n        }\n        if (command.type !== PathParser.CLOSE_PATH) {\n          pathCommands.push({\n            type: nextCommandType,\n            points: points,\n            start: {\n              x: startX,\n              y: startY\n            },\n            pathLength: this.calcLength(startX, startY, nextCommandType, points)\n          });\n        } else {\n          pathCommands.push({\n            type: PathParser.CLOSE_PATH,\n            points: [],\n            pathLength: 0\n          });\n        }\n      }\n      return pathCommands;\n    }\n  }, {\n    key: \"pathM\",\n    value: function pathM(pathParser, points) {\n      var _PathElement$pathM$po = PathElement.pathM(pathParser).point,\n        x = _PathElement$pathM$po.x,\n        y = _PathElement$pathM$po.y;\n      points.push(x, y);\n    }\n  }, {\n    key: \"pathL\",\n    value: function pathL(pathParser, points) {\n      var _PathElement$pathL$po = PathElement.pathL(pathParser).point,\n        x = _PathElement$pathL$po.x,\n        y = _PathElement$pathL$po.y;\n      points.push(x, y);\n      return PathParser.LINE_TO;\n    }\n  }, {\n    key: \"pathH\",\n    value: function pathH(pathParser, points) {\n      var _PathElement$pathH$po = PathElement.pathH(pathParser).point,\n        x = _PathElement$pathH$po.x,\n        y = _PathElement$pathH$po.y;\n      points.push(x, y);\n      return PathParser.LINE_TO;\n    }\n  }, {\n    key: \"pathV\",\n    value: function pathV(pathParser, points) {\n      var _PathElement$pathV$po = PathElement.pathV(pathParser).point,\n        x = _PathElement$pathV$po.x,\n        y = _PathElement$pathV$po.y;\n      points.push(x, y);\n      return PathParser.LINE_TO;\n    }\n  }, {\n    key: \"pathC\",\n    value: function pathC(pathParser, points) {\n      var _PathElement$pathC2 = PathElement.pathC(pathParser),\n        point = _PathElement$pathC2.point,\n        controlPoint = _PathElement$pathC2.controlPoint,\n        currentPoint = _PathElement$pathC2.currentPoint;\n      points.push(point.x, point.y, controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);\n    }\n  }, {\n    key: \"pathS\",\n    value: function pathS(pathParser, points) {\n      var _PathElement$pathS2 = PathElement.pathS(pathParser),\n        point = _PathElement$pathS2.point,\n        controlPoint = _PathElement$pathS2.controlPoint,\n        currentPoint = _PathElement$pathS2.currentPoint;\n      points.push(point.x, point.y, controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);\n      return PathParser.CURVE_TO;\n    }\n  }, {\n    key: \"pathQ\",\n    value: function pathQ(pathParser, points) {\n      var _PathElement$pathQ2 = PathElement.pathQ(pathParser),\n        controlPoint = _PathElement$pathQ2.controlPoint,\n        currentPoint = _PathElement$pathQ2.currentPoint;\n      points.push(controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);\n    }\n  }, {\n    key: \"pathT\",\n    value: function pathT(pathParser, points) {\n      var _PathElement$pathT2 = PathElement.pathT(pathParser),\n        controlPoint = _PathElement$pathT2.controlPoint,\n        currentPoint = _PathElement$pathT2.currentPoint;\n      points.push(controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);\n      return PathParser.QUAD_TO;\n    }\n  }, {\n    key: \"pathA\",\n    value: function pathA(pathParser) {\n      var _PathElement$pathA2 = PathElement.pathA(pathParser),\n        rX = _PathElement$pathA2.rX,\n        rY = _PathElement$pathA2.rY,\n        sweepFlag = _PathElement$pathA2.sweepFlag,\n        xAxisRotation = _PathElement$pathA2.xAxisRotation,\n        centp = _PathElement$pathA2.centp,\n        a1 = _PathElement$pathA2.a1,\n        ad = _PathElement$pathA2.ad;\n      if (sweepFlag === 0 && ad > 0) {\n        ad -= 2 * Math.PI;\n      }\n      if (sweepFlag === 1 && ad < 0) {\n        ad += 2 * Math.PI;\n      }\n      return [centp.x, centp.y, rX, rY, a1, ad, xAxisRotation, sweepFlag];\n    }\n  }, {\n    key: \"calcLength\",\n    value: function calcLength(x, y, commandType, points) {\n      var len = 0;\n      var p1 = null;\n      var p2 = null;\n      var t = 0;\n      switch (commandType) {\n        case PathParser.LINE_TO:\n          return this.getLineLength(x, y, points[0], points[1]);\n        case PathParser.CURVE_TO:\n          // Approximates by breaking curve into 100 line segments\n          len = 0.0;\n          p1 = this.getPointOnCubicBezier(0, x, y, points[0], points[1], points[2], points[3], points[4], points[5]);\n          for (t = 0.01; t <= 1; t += 0.01) {\n            p2 = this.getPointOnCubicBezier(t, x, y, points[0], points[1], points[2], points[3], points[4], points[5]);\n            len += this.getLineLength(p1.x, p1.y, p2.x, p2.y);\n            p1 = p2;\n          }\n          return len;\n        case PathParser.QUAD_TO:\n          // Approximates by breaking curve into 100 line segments\n          len = 0.0;\n          p1 = this.getPointOnQuadraticBezier(0, x, y, points[0], points[1], points[2], points[3]);\n          for (t = 0.01; t <= 1; t += 0.01) {\n            p2 = this.getPointOnQuadraticBezier(t, x, y, points[0], points[1], points[2], points[3]);\n            len += this.getLineLength(p1.x, p1.y, p2.x, p2.y);\n            p1 = p2;\n          }\n          return len;\n        case PathParser.ARC:\n          {\n            // Approximates by breaking curve into line segments\n            len = 0.0;\n            var start = points[4]; // 4 = theta\n\n            var dTheta = points[5]; // 5 = dTheta\n\n            var end = points[4] + dTheta;\n            var inc = Math.PI / 180.0; // 1 degree resolution\n\n            if (Math.abs(start - end) < inc) {\n              inc = Math.abs(start - end);\n            } // Note: for purpose of calculating arc length, not going to worry about rotating X-axis by angle psi\n\n            p1 = this.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], start, 0);\n            if (dTheta < 0) {\n              // clockwise\n              for (t = start - inc; t > end; t -= inc) {\n                p2 = this.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], t, 0);\n                len += this.getLineLength(p1.x, p1.y, p2.x, p2.y);\n                p1 = p2;\n              }\n            } else {\n              // counter-clockwise\n              for (t = start + inc; t < end; t += inc) {\n                p2 = this.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], t, 0);\n                len += this.getLineLength(p1.x, p1.y, p2.x, p2.y);\n                p1 = p2;\n              }\n            }\n            p2 = this.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], end, 0);\n            len += this.getLineLength(p1.x, p1.y, p2.x, p2.y);\n            return len;\n          }\n      }\n      return 0;\n    }\n  }, {\n    key: \"getPointOnLine\",\n    value: function getPointOnLine(dist, p1x, p1y, p2x, p2y) {\n      var fromX = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : p1x;\n      var fromY = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : p1y;\n      var m = (p2y - p1y) / (p2x - p1x + PSEUDO_ZERO);\n      var run = Math.sqrt(dist * dist / (1 + m * m));\n      if (p2x < p1x) {\n        run *= -1;\n      }\n      var rise = m * run;\n      var pt = null;\n      if (p2x === p1x) {\n        // vertical line\n        pt = {\n          x: fromX,\n          y: fromY + rise\n        };\n      } else if ((fromY - p1y) / (fromX - p1x + PSEUDO_ZERO) === m) {\n        pt = {\n          x: fromX + run,\n          y: fromY + rise\n        };\n      } else {\n        var ix = 0;\n        var iy = 0;\n        var len = this.getLineLength(p1x, p1y, p2x, p2y);\n        if (len < PSEUDO_ZERO) {\n          return null;\n        }\n        var u = (fromX - p1x) * (p2x - p1x) + (fromY - p1y) * (p2y - p1y);\n        u /= len * len;\n        ix = p1x + u * (p2x - p1x);\n        iy = p1y + u * (p2y - p1y);\n        var pRise = this.getLineLength(fromX, fromY, ix, iy);\n        var pRun = Math.sqrt(dist * dist - pRise * pRise);\n        run = Math.sqrt(pRun * pRun / (1 + m * m));\n        if (p2x < p1x) {\n          run *= -1;\n        }\n        rise = m * run;\n        pt = {\n          x: ix + run,\n          y: iy + rise\n        };\n      }\n      return pt;\n    }\n  }, {\n    key: \"getPointOnPath\",\n    value: function getPointOnPath(distance) {\n      var fullLen = this.getPathLength();\n      var cumulativePathLength = 0;\n      var p = null;\n      if (distance < -0.00005 || distance - 0.00005 > fullLen) {\n        return null;\n      }\n      var dataArray = this.dataArray;\n      var _iterator2 = _createForOfIteratorHelper(dataArray),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var command = _step2.value;\n          if (command && (command.pathLength < 0.00005 || cumulativePathLength + command.pathLength + 0.00005 < distance)) {\n            cumulativePathLength += command.pathLength;\n            continue;\n          }\n          var delta = distance - cumulativePathLength;\n          var currentT = 0;\n          switch (command.type) {\n            case PathParser.LINE_TO:\n              p = this.getPointOnLine(delta, command.start.x, command.start.y, command.points[0], command.points[1], command.start.x, command.start.y);\n              break;\n            case PathParser.ARC:\n              {\n                var start = command.points[4]; // 4 = theta\n\n                var dTheta = command.points[5]; // 5 = dTheta\n\n                var end = command.points[4] + dTheta;\n                currentT = start + delta / command.pathLength * dTheta;\n                if (dTheta < 0 && currentT < end || dTheta >= 0 && currentT > end) {\n                  break;\n                }\n                p = this.getPointOnEllipticalArc(command.points[0], command.points[1], command.points[2], command.points[3], currentT, command.points[6]);\n                break;\n              }\n            case PathParser.CURVE_TO:\n              currentT = delta / command.pathLength;\n              if (currentT > 1) {\n                currentT = 1;\n              }\n              p = this.getPointOnCubicBezier(currentT, command.start.x, command.start.y, command.points[0], command.points[1], command.points[2], command.points[3], command.points[4], command.points[5]);\n              break;\n            case PathParser.QUAD_TO:\n              currentT = delta / command.pathLength;\n              if (currentT > 1) {\n                currentT = 1;\n              }\n              p = this.getPointOnQuadraticBezier(currentT, command.start.x, command.start.y, command.points[0], command.points[1], command.points[2], command.points[3]);\n              break;\n          }\n          if (p) {\n            return p;\n          }\n          break;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      return null;\n    }\n  }, {\n    key: \"getLineLength\",\n    value: function getLineLength(x1, y1, x2, y2) {\n      return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n    }\n  }, {\n    key: \"getPathLength\",\n    value: function getPathLength() {\n      if (this.pathLength === -1) {\n        this.pathLength = this.dataArray.reduce(function (length, command) {\n          return command.pathLength > 0 ? length + command.pathLength : length;\n        }, 0);\n      }\n      return this.pathLength;\n    }\n  }, {\n    key: \"getPointOnCubicBezier\",\n    value: function getPointOnCubicBezier(pct, p1x, p1y, p2x, p2y, p3x, p3y, p4x, p4y) {\n      var x = p4x * CB1(pct) + p3x * CB2(pct) + p2x * CB3(pct) + p1x * CB4(pct);\n      var y = p4y * CB1(pct) + p3y * CB2(pct) + p2y * CB3(pct) + p1y * CB4(pct);\n      return {\n        x: x,\n        y: y\n      };\n    }\n  }, {\n    key: \"getPointOnQuadraticBezier\",\n    value: function getPointOnQuadraticBezier(pct, p1x, p1y, p2x, p2y, p3x, p3y) {\n      var x = p3x * QB1(pct) + p2x * QB2(pct) + p1x * QB3(pct);\n      var y = p3y * QB1(pct) + p2y * QB2(pct) + p1y * QB3(pct);\n      return {\n        x: x,\n        y: y\n      };\n    }\n  }, {\n    key: \"getPointOnEllipticalArc\",\n    value: function getPointOnEllipticalArc(cx, cy, rx, ry, theta, psi) {\n      var cosPsi = Math.cos(psi);\n      var sinPsi = Math.sin(psi);\n      var pt = {\n        x: rx * Math.cos(theta),\n        y: ry * Math.sin(theta)\n      };\n      return {\n        x: cx + (pt.x * cosPsi - pt.y * sinPsi),\n        y: cy + (pt.x * sinPsi + pt.y * cosPsi)\n      };\n    } // TODO need some optimisations. possibly build cache only for curved segments?\n  }, {\n    key: \"buildEquidistantCache\",\n    value: function buildEquidistantCache(inputStep, inputPrecision) {\n      var fullLen = this.getPathLength();\n      var precision = inputPrecision || 0.25; // accuracy vs performance\n\n      var step = inputStep || fullLen / 100;\n      if (!this.equidistantCache || this.equidistantCache.step !== step || this.equidistantCache.precision !== precision) {\n        // Prepare cache\n        this.equidistantCache = {\n          step: step,\n          precision: precision,\n          points: []\n        }; // Calculate points\n\n        var s = 0;\n        for (var l = 0; l <= fullLen; l += precision) {\n          var p0 = this.getPointOnPath(l);\n          var p1 = this.getPointOnPath(l + precision);\n          if (!p0 || !p1) {\n            continue;\n          }\n          s += this.getLineLength(p0.x, p0.y, p1.x, p1.y);\n          if (s >= step) {\n            this.equidistantCache.points.push({\n              x: p0.x,\n              y: p0.y,\n              distance: l\n            });\n            s -= step;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"getEquidistantPointOnPath\",\n    value: function getEquidistantPointOnPath(targetDistance, step, precision) {\n      this.buildEquidistantCache(step, precision);\n      if (targetDistance < 0 || targetDistance - this.getPathLength() > 0.00005) {\n        return null;\n      }\n      var idx = Math.round(targetDistance / this.getPathLength() * (this.equidistantCache.points.length - 1));\n      return this.equidistantCache.points[idx] || null;\n    }\n  }]);\n}(TextElement);\nvar dataUriRegex = /^\\s*data:(([^/,;]+\\/[^/,;]+)(?:;([^,;=]+=[^,;=]+))?)?(?:;(base64))?,(.*)$/i;\nvar ImageElement = /*#__PURE__*/function (_RenderedElement5) {\n  function ImageElement(document, node, captureTextNodes) {\n    var _this48;\n    _classCallCheck(this, ImageElement);\n    _this48 = _callSuper(this, ImageElement, [document, node, captureTextNodes]);\n    _this48.type = 'image';\n    _this48.loaded = false;\n    var href = _this48.getHrefAttribute().getString();\n    if (!href) {\n      return _possibleConstructorReturn(_this48);\n    }\n    var isSvg = href.endsWith('.svg') || /^\\s*data:image\\/svg\\+xml/i.test(href);\n    document.images.push(_this48);\n    if (!isSvg) {\n      void _this48.loadImage(href);\n    } else {\n      void _this48.loadSvg(href);\n    }\n    _this48.isSvg = isSvg;\n    return _this48;\n  }\n  _inherits(ImageElement, _RenderedElement5);\n  return _createClass(ImageElement, [{\n    key: \"loadImage\",\n    value: function loadImage(href) {\n      var _this = this;\n      return _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var image;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              _context4.next = 3;\n              return _this.document.createImage(href);\n            case 3:\n              image = _context4.sent;\n              _this.image = image;\n              _context4.next = 10;\n              break;\n            case 7:\n              _context4.prev = 7;\n              _context4.t0 = _context4[\"catch\"](0);\n              console.error(\"Error while loading image \\\"\".concat(href, \"\\\":\"), _context4.t0);\n            case 10:\n              _this.loaded = true;\n            case 11:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, null, [[0, 7]]);\n      }))();\n    }\n  }, {\n    key: \"loadSvg\",\n    value: function loadSvg(href) {\n      var _this2 = this;\n      return _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var match, data, response, svg;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              match = dataUriRegex.exec(href);\n              if (!match) {\n                _context5.next = 6;\n                break;\n              }\n              data = match[5];\n              if (match[4] === 'base64') {\n                _this2.image = atob(data);\n              } else {\n                _this2.image = decodeURIComponent(data);\n              }\n              _context5.next = 19;\n              break;\n            case 6:\n              _context5.prev = 6;\n              _context5.next = 9;\n              return _this2.document.fetch(href);\n            case 9:\n              response = _context5.sent;\n              _context5.next = 12;\n              return response.text();\n            case 12:\n              svg = _context5.sent;\n              _this2.image = svg;\n              _context5.next = 19;\n              break;\n            case 16:\n              _context5.prev = 16;\n              _context5.t0 = _context5[\"catch\"](6);\n              console.error(\"Error while loading image \\\"\".concat(href, \"\\\":\"), _context5.t0);\n            case 19:\n              _this2.loaded = true;\n            case 20:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, null, [[6, 16]]);\n      }))();\n    }\n  }, {\n    key: \"renderChildren\",\n    value: function renderChildren(ctx) {\n      var document = this.document,\n        image = this.image,\n        loaded = this.loaded;\n      var x = this.getAttribute('x').getPixels('x');\n      var y = this.getAttribute('y').getPixels('y');\n      var width = this.getStyle('width').getPixels('x');\n      var height = this.getStyle('height').getPixels('y');\n      if (!loaded || !image || !width || !height) {\n        return;\n      }\n      ctx.save();\n      ctx.translate(x, y);\n      if (this.isSvg) {\n        var subDocument = document.canvg.forkString(ctx, this.image, {\n          ignoreMouse: true,\n          ignoreAnimation: true,\n          ignoreDimensions: true,\n          ignoreClear: true,\n          offsetX: 0,\n          offsetY: 0,\n          scaleWidth: width,\n          scaleHeight: height\n        });\n        subDocument.document.documentElement.parent = this;\n        void subDocument.render();\n      } else {\n        var _image = this.image;\n        document.setViewBox({\n          ctx: ctx,\n          aspectRatio: this.getAttribute('preserveAspectRatio').getString(),\n          width: width,\n          desiredWidth: _image.width,\n          height: height,\n          desiredHeight: _image.height\n        });\n        if (this.loaded) {\n          if (typeof _image.complete === 'undefined' || _image.complete) {\n            ctx.drawImage(_image, 0, 0);\n          }\n        }\n      }\n      ctx.restore();\n    }\n  }, {\n    key: \"getBoundingBox\",\n    value: function getBoundingBox() {\n      var x = this.getAttribute('x').getPixels('x');\n      var y = this.getAttribute('y').getPixels('y');\n      var width = this.getStyle('width').getPixels('x');\n      var height = this.getStyle('height').getPixels('y');\n      return new BoundingBox(x, y, x + width, y + height);\n    }\n  }]);\n}(RenderedElement);\nvar SymbolElement = /*#__PURE__*/function (_RenderedElement6) {\n  function SymbolElement() {\n    var _this49;\n    _classCallCheck(this, SymbolElement);\n    _this49 = _callSuper(this, SymbolElement, arguments);\n    _this49.type = 'symbol';\n    return _this49;\n  }\n  _inherits(SymbolElement, _RenderedElement6);\n  return _createClass(SymbolElement, [{\n    key: \"render\",\n    value: function render(_) {// NO RENDER\n    }\n  }]);\n}(RenderedElement);\nvar SVGFontLoader = /*#__PURE__*/function () {\n  function SVGFontLoader(document) {\n    _classCallCheck(this, SVGFontLoader);\n    this.document = document;\n    this.loaded = false;\n    document.fonts.push(this);\n  }\n  return _createClass(SVGFontLoader, [{\n    key: \"load\",\n    value: function load(fontFamily, url) {\n      var _this = this;\n      return _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var document, svgDocument, fonts;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.prev = 0;\n              document = _this.document;\n              _context6.next = 4;\n              return document.canvg.parser.load(url);\n            case 4:\n              svgDocument = _context6.sent;\n              fonts = svgDocument.getElementsByTagName('font');\n              Array.from(fonts).forEach(function (fontNode) {\n                var font = document.createElement(fontNode);\n                document.definitions[fontFamily] = font;\n              });\n              _context6.next = 12;\n              break;\n            case 9:\n              _context6.prev = 9;\n              _context6.t0 = _context6[\"catch\"](0);\n              console.error(\"Error while loading font \\\"\".concat(url, \"\\\":\"), _context6.t0);\n            case 12:\n              _this.loaded = true;\n            case 13:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, null, [[0, 9]]);\n      }))();\n    }\n  }]);\n}();\nvar StyleElement = /*#__PURE__*/function (_Element11) {\n  function StyleElement(document, node, captureTextNodes) {\n    var _this50;\n    _classCallCheck(this, StyleElement);\n    _this50 = _callSuper(this, StyleElement, [document, node, captureTextNodes]);\n    _this50.type = 'style';\n    var css = compressSpaces(Array.from(node.childNodes) // NEED TEST\n    .map(function (_) {\n      return _.textContent;\n    }).join('').replace(/(\\/\\*([^*]|[\\r\\n]|(\\*+([^*/]|[\\r\\n])))*\\*+\\/)|(^[\\s]*\\/\\/.*)/gm, '') // remove comments\n    .replace(/@import.*;/g, '') // remove imports\n    );\n\n    var cssDefs = css.split('}');\n    cssDefs.forEach(function (_) {\n      var def = _.trim();\n      if (!def) {\n        return;\n      }\n      var cssParts = def.split('{');\n      var cssClasses = cssParts[0].split(',');\n      var cssProps = cssParts[1].split(';');\n      cssClasses.forEach(function (_) {\n        var cssClass = _.trim();\n        if (!cssClass) {\n          return;\n        }\n        var props = document.styles[cssClass] || {};\n        cssProps.forEach(function (cssProp) {\n          var prop = cssProp.indexOf(':');\n          var name = cssProp.substr(0, prop).trim();\n          var value = cssProp.substr(prop + 1, cssProp.length - prop).trim();\n          if (name && value) {\n            props[name] = new Property(document, name, value);\n          }\n        });\n        document.styles[cssClass] = props;\n        document.stylesSpecificity[cssClass] = getSelectorSpecificity(cssClass);\n        if (cssClass === '@font-face') {\n          //  && !nodeEnv\n          var fontFamily = props['font-family'].getString().replace(/\"|'/g, '');\n          var srcs = props.src.getString().split(',');\n          srcs.forEach(function (src) {\n            if (src.indexOf('format(\"svg\")') > 0) {\n              var url = parseExternalUrl(src);\n              if (url) {\n                void new SVGFontLoader(document).load(fontFamily, url);\n              }\n            }\n          });\n        }\n      });\n    });\n    return _this50;\n  }\n  _inherits(StyleElement, _Element11);\n  return _createClass(StyleElement);\n}(Element);\nStyleElement.parseExternalUrl = parseExternalUrl;\nvar UseElement = /*#__PURE__*/function (_RenderedElement7) {\n  function UseElement() {\n    var _this51;\n    _classCallCheck(this, UseElement);\n    _this51 = _callSuper(this, UseElement, arguments);\n    _this51.type = 'use';\n    return _this51;\n  }\n  _inherits(UseElement, _RenderedElement7);\n  return _createClass(UseElement, [{\n    key: \"setContext\",\n    value: function setContext(ctx) {\n      _get(_getPrototypeOf(UseElement.prototype), \"setContext\", this).call(this, ctx);\n      var xAttr = this.getAttribute('x');\n      var yAttr = this.getAttribute('y');\n      if (xAttr.hasValue()) {\n        ctx.translate(xAttr.getPixels('x'), 0);\n      }\n      if (yAttr.hasValue()) {\n        ctx.translate(0, yAttr.getPixels('y'));\n      }\n    }\n  }, {\n    key: \"path\",\n    value: function path(ctx) {\n      var element = this.element;\n      if (element) {\n        element.path(ctx);\n      }\n    }\n  }, {\n    key: \"renderChildren\",\n    value: function renderChildren(ctx) {\n      var document = this.document,\n        element = this.element;\n      if (element) {\n        var tempSvg = element;\n        if (element.type === 'symbol') {\n          // render me using a temporary svg element in symbol cases (http://www.w3.org/TR/SVG/struct.html#UseElement)\n          tempSvg = new SVGElement(document, null);\n          tempSvg.attributes.viewBox = new Property(document, 'viewBox', element.getAttribute('viewBox').getString());\n          tempSvg.attributes.preserveAspectRatio = new Property(document, 'preserveAspectRatio', element.getAttribute('preserveAspectRatio').getString());\n          tempSvg.attributes.overflow = new Property(document, 'overflow', element.getAttribute('overflow').getString());\n          tempSvg.children = element.children; // element is still the parent of the children\n\n          element.styles.opacity = new Property(document, 'opacity', this.calculateOpacity());\n        }\n        if (tempSvg.type === 'svg') {\n          var widthStyle = this.getStyle('width', false, true);\n          var heightStyle = this.getStyle('height', false, true); // if symbol or svg, inherit width/height from me\n\n          if (widthStyle.hasValue()) {\n            tempSvg.attributes.width = new Property(document, 'width', widthStyle.getString());\n          }\n          if (heightStyle.hasValue()) {\n            tempSvg.attributes.height = new Property(document, 'height', heightStyle.getString());\n          }\n        }\n        var oldParent = tempSvg.parent;\n        tempSvg.parent = this;\n        tempSvg.render(ctx);\n        tempSvg.parent = oldParent;\n      }\n    }\n  }, {\n    key: \"getBoundingBox\",\n    value: function getBoundingBox(ctx) {\n      var element = this.element;\n      if (element) {\n        return element.getBoundingBox(ctx);\n      }\n      return null;\n    }\n  }, {\n    key: \"elementTransform\",\n    value: function elementTransform() {\n      var document = this.document,\n        element = this.element;\n      return Transform.fromElement(document, element);\n    }\n  }, {\n    key: \"element\",\n    get: function get() {\n      if (!this.cachedElement) {\n        this.cachedElement = this.getHrefAttribute().getDefinition();\n      }\n      return this.cachedElement;\n    }\n  }]);\n}(RenderedElement);\nfunction imGet(img, x, y, width, _height, rgba) {\n  return img[y * width * 4 + x * 4 + rgba];\n}\nfunction imSet(img, x, y, width, _height, rgba, val) {\n  img[y * width * 4 + x * 4 + rgba] = val;\n}\nfunction m(matrix, i, v) {\n  var mi = matrix[i];\n  return mi * v;\n}\nfunction c(a, m1, m2, m3) {\n  return m1 + Math.cos(a) * m2 + Math.sin(a) * m3;\n}\nvar FeColorMatrixElement = /*#__PURE__*/function (_Element12) {\n  function FeColorMatrixElement(document, node, captureTextNodes) {\n    var _this52;\n    _classCallCheck(this, FeColorMatrixElement);\n    _this52 = _callSuper(this, FeColorMatrixElement, [document, node, captureTextNodes]);\n    _this52.type = 'feColorMatrix';\n    var matrix = toNumbers(_this52.getAttribute('values').getString());\n    switch (_this52.getAttribute('type').getString('matrix')) {\n      // http://www.w3.org/TR/SVG/filters.html#feColorMatrixElement\n      case 'saturate':\n        {\n          var s = matrix[0];\n          /* eslint-disable array-element-newline */\n\n          matrix = [0.213 + 0.787 * s, 0.715 - 0.715 * s, 0.072 - 0.072 * s, 0, 0, 0.213 - 0.213 * s, 0.715 + 0.285 * s, 0.072 - 0.072 * s, 0, 0, 0.213 - 0.213 * s, 0.715 - 0.715 * s, 0.072 + 0.928 * s, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1];\n          /* eslint-enable array-element-newline */\n\n          break;\n        }\n      case 'hueRotate':\n        {\n          var a = matrix[0] * Math.PI / 180.0;\n          /* eslint-disable array-element-newline */\n\n          matrix = [c(a, 0.213, 0.787, -0.213), c(a, 0.715, -0.715, -0.715), c(a, 0.072, -0.072, 0.928), 0, 0, c(a, 0.213, -0.213, 0.143), c(a, 0.715, 0.285, 0.140), c(a, 0.072, -0.072, -0.283), 0, 0, c(a, 0.213, -0.213, -0.787), c(a, 0.715, -0.715, 0.715), c(a, 0.072, 0.928, 0.072), 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1];\n          /* eslint-enable array-element-newline */\n\n          break;\n        }\n      case 'luminanceToAlpha':\n        /* eslint-disable array-element-newline */\n        matrix = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2125, 0.7154, 0.0721, 0, 0, 0, 0, 0, 0, 1];\n        /* eslint-enable array-element-newline */\n\n        break;\n    }\n    _this52.matrix = matrix;\n    _this52.includeOpacity = _this52.getAttribute('includeOpacity').hasValue();\n    return _this52;\n  }\n  _inherits(FeColorMatrixElement, _Element12);\n  return _createClass(FeColorMatrixElement, [{\n    key: \"apply\",\n    value: function apply(ctx, _x, _y, width, height) {\n      // assuming x==0 && y==0 for now\n      var includeOpacity = this.includeOpacity,\n        matrix = this.matrix;\n      var srcData = ctx.getImageData(0, 0, width, height);\n      for (var y = 0; y < height; y++) {\n        for (var x = 0; x < width; x++) {\n          var r = imGet(srcData.data, x, y, width, height, 0);\n          var g = imGet(srcData.data, x, y, width, height, 1);\n          var b = imGet(srcData.data, x, y, width, height, 2);\n          var a = imGet(srcData.data, x, y, width, height, 3);\n          var nr = m(matrix, 0, r) + m(matrix, 1, g) + m(matrix, 2, b) + m(matrix, 3, a) + m(matrix, 4, 1);\n          var ng = m(matrix, 5, r) + m(matrix, 6, g) + m(matrix, 7, b) + m(matrix, 8, a) + m(matrix, 9, 1);\n          var nb = m(matrix, 10, r) + m(matrix, 11, g) + m(matrix, 12, b) + m(matrix, 13, a) + m(matrix, 14, 1);\n          var na = m(matrix, 15, r) + m(matrix, 16, g) + m(matrix, 17, b) + m(matrix, 18, a) + m(matrix, 19, 1);\n          if (includeOpacity) {\n            nr = 0;\n            ng = 0;\n            nb = 0;\n            na *= a / 255;\n          }\n          imSet(srcData.data, x, y, width, height, 0, nr);\n          imSet(srcData.data, x, y, width, height, 1, ng);\n          imSet(srcData.data, x, y, width, height, 2, nb);\n          imSet(srcData.data, x, y, width, height, 3, na);\n        }\n      }\n      ctx.clearRect(0, 0, width, height);\n      ctx.putImageData(srcData, 0, 0);\n    }\n  }]);\n}(Element);\nvar MaskElement = /*#__PURE__*/function (_Element13) {\n  function MaskElement() {\n    var _this53;\n    _classCallCheck(this, MaskElement);\n    _this53 = _callSuper(this, MaskElement, arguments);\n    _this53.type = 'mask';\n    return _this53;\n  }\n  _inherits(MaskElement, _Element13);\n  return _createClass(MaskElement, [{\n    key: \"apply\",\n    value: function apply(ctx, element) {\n      var document = this.document; // render as temp svg\n\n      var x = this.getAttribute('x').getPixels('x');\n      var y = this.getAttribute('y').getPixels('y');\n      var width = this.getStyle('width').getPixels('x');\n      var height = this.getStyle('height').getPixels('y');\n      if (!width && !height) {\n        var boundingBox = new BoundingBox();\n        this.children.forEach(function (child) {\n          boundingBox.addBoundingBox(child.getBoundingBox(ctx));\n        });\n        x = Math.floor(boundingBox.x1);\n        y = Math.floor(boundingBox.y1);\n        width = Math.floor(boundingBox.width);\n        height = Math.floor(boundingBox.height);\n      }\n      var ignoredStyles = this.removeStyles(element, MaskElement.ignoreStyles);\n      var maskCanvas = document.createCanvas(x + width, y + height);\n      var maskCtx = maskCanvas.getContext('2d');\n      document.screen.setDefaults(maskCtx);\n      this.renderChildren(maskCtx); // convert mask to alpha with a fake node\n      // TODO: refactor out apply from feColorMatrix\n\n      new FeColorMatrixElement(document, {\n        nodeType: 1,\n        childNodes: [],\n        attributes: [{\n          nodeName: 'type',\n          value: 'luminanceToAlpha'\n        }, {\n          nodeName: 'includeOpacity',\n          value: 'true'\n        }]\n      }).apply(maskCtx, 0, 0, x + width, y + height);\n      var tmpCanvas = document.createCanvas(x + width, y + height);\n      var tmpCtx = tmpCanvas.getContext('2d');\n      document.screen.setDefaults(tmpCtx);\n      element.render(tmpCtx);\n      tmpCtx.globalCompositeOperation = 'destination-in';\n      tmpCtx.fillStyle = maskCtx.createPattern(maskCanvas, 'no-repeat');\n      tmpCtx.fillRect(0, 0, x + width, y + height);\n      ctx.fillStyle = tmpCtx.createPattern(tmpCanvas, 'no-repeat');\n      ctx.fillRect(0, 0, x + width, y + height); // reassign mask\n\n      this.restoreStyles(element, ignoredStyles);\n    }\n  }, {\n    key: \"render\",\n    value: function render(_) {// NO RENDER\n    }\n  }]);\n}(Element);\nMaskElement.ignoreStyles = ['mask', 'transform', 'clip-path'];\nvar noop = function noop() {// NOOP\n};\nvar ClipPathElement = /*#__PURE__*/function (_Element14) {\n  function ClipPathElement() {\n    var _this54;\n    _classCallCheck(this, ClipPathElement);\n    _this54 = _callSuper(this, ClipPathElement, arguments);\n    _this54.type = 'clipPath';\n    return _this54;\n  }\n  _inherits(ClipPathElement, _Element14);\n  return _createClass(ClipPathElement, [{\n    key: \"apply\",\n    value: function apply(ctx) {\n      var document = this.document;\n      var contextProto = Reflect.getPrototypeOf(ctx);\n      var beginPath = ctx.beginPath,\n        closePath = ctx.closePath;\n      if (contextProto) {\n        contextProto.beginPath = noop;\n        contextProto.closePath = noop;\n      }\n      Reflect.apply(beginPath, ctx, []);\n      this.children.forEach(function (child) {\n        if (typeof child.path === 'undefined') {\n          return;\n        }\n        var transform = typeof child.elementTransform !== 'undefined' ? child.elementTransform() : null; // handle <use />\n\n        if (!transform) {\n          transform = Transform.fromElement(document, child);\n        }\n        if (transform) {\n          transform.apply(ctx);\n        }\n        child.path(ctx);\n        if (contextProto) {\n          contextProto.closePath = closePath;\n        }\n        if (transform) {\n          transform.unapply(ctx);\n        }\n      });\n      Reflect.apply(closePath, ctx, []);\n      ctx.clip();\n      if (contextProto) {\n        contextProto.beginPath = beginPath;\n        contextProto.closePath = closePath;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render(_) {// NO RENDER\n    }\n  }]);\n}(Element);\nvar FilterElement = /*#__PURE__*/function (_Element15) {\n  function FilterElement() {\n    var _this55;\n    _classCallCheck(this, FilterElement);\n    _this55 = _callSuper(this, FilterElement, arguments);\n    _this55.type = 'filter';\n    return _this55;\n  }\n  _inherits(FilterElement, _Element15);\n  return _createClass(FilterElement, [{\n    key: \"apply\",\n    value: function apply(ctx, element) {\n      // render as temp svg\n      var document = this.document,\n        children = this.children;\n      var boundingBox = element.getBoundingBox(ctx);\n      if (!boundingBox) {\n        return;\n      }\n      var px = 0;\n      var py = 0;\n      children.forEach(function (child) {\n        var efd = child.extraFilterDistance || 0;\n        px = Math.max(px, efd);\n        py = Math.max(py, efd);\n      });\n      var width = Math.floor(boundingBox.width);\n      var height = Math.floor(boundingBox.height);\n      var tmpCanvasWidth = width + 2 * px;\n      var tmpCanvasHeight = height + 2 * py;\n      if (tmpCanvasWidth < 1 || tmpCanvasHeight < 1) {\n        return;\n      }\n      var x = Math.floor(boundingBox.x);\n      var y = Math.floor(boundingBox.y);\n      var ignoredStyles = this.removeStyles(element, FilterElement.ignoreStyles);\n      var tmpCanvas = document.createCanvas(tmpCanvasWidth, tmpCanvasHeight);\n      var tmpCtx = tmpCanvas.getContext('2d');\n      document.screen.setDefaults(tmpCtx);\n      tmpCtx.translate(-x + px, -y + py);\n      element.render(tmpCtx); // apply filters\n\n      children.forEach(function (child) {\n        if (typeof child.apply === 'function') {\n          child.apply(tmpCtx, 0, 0, tmpCanvasWidth, tmpCanvasHeight);\n        }\n      }); // render on me\n\n      ctx.drawImage(tmpCanvas, 0, 0, tmpCanvasWidth, tmpCanvasHeight, x - px, y - py, tmpCanvasWidth, tmpCanvasHeight);\n      this.restoreStyles(element, ignoredStyles);\n    }\n  }, {\n    key: \"render\",\n    value: function render(_) {// NO RENDER\n    }\n  }]);\n}(Element);\nFilterElement.ignoreStyles = ['filter', 'transform', 'clip-path'];\nvar FeDropShadowElement = /*#__PURE__*/function (_Element16) {\n  function FeDropShadowElement(document, node, captureTextNodes) {\n    var _this56;\n    _classCallCheck(this, FeDropShadowElement);\n    _this56 = _callSuper(this, FeDropShadowElement, [document, node, captureTextNodes]);\n    _this56.type = 'feDropShadow';\n    _this56.addStylesFromStyleDefinition();\n    return _this56;\n  }\n  _inherits(FeDropShadowElement, _Element16);\n  return _createClass(FeDropShadowElement, [{\n    key: \"apply\",\n    value: function apply(_, _x, _y, _width, _height) {// TODO: implement\n    }\n  }]);\n}(Element);\nvar FeMorphologyElement = /*#__PURE__*/function (_Element17) {\n  function FeMorphologyElement() {\n    var _this57;\n    _classCallCheck(this, FeMorphologyElement);\n    _this57 = _callSuper(this, FeMorphologyElement, arguments);\n    _this57.type = 'feMorphology';\n    return _this57;\n  }\n  _inherits(FeMorphologyElement, _Element17);\n  return _createClass(FeMorphologyElement, [{\n    key: \"apply\",\n    value: function apply(_, _x, _y, _width, _height) {// TODO: implement\n    }\n  }]);\n}(Element);\nvar FeCompositeElement = /*#__PURE__*/function (_Element18) {\n  function FeCompositeElement() {\n    var _this58;\n    _classCallCheck(this, FeCompositeElement);\n    _this58 = _callSuper(this, FeCompositeElement, arguments);\n    _this58.type = 'feComposite';\n    return _this58;\n  }\n  _inherits(FeCompositeElement, _Element18);\n  return _createClass(FeCompositeElement, [{\n    key: \"apply\",\n    value: function apply(_, _x, _y, _width, _height) {// TODO: implement\n    }\n  }]);\n}(Element);\nvar FeGaussianBlurElement = /*#__PURE__*/function (_Element19) {\n  function FeGaussianBlurElement(document, node, captureTextNodes) {\n    var _this59;\n    _classCallCheck(this, FeGaussianBlurElement);\n    _this59 = _callSuper(this, FeGaussianBlurElement, [document, node, captureTextNodes]);\n    _this59.type = 'feGaussianBlur';\n    _this59.blurRadius = Math.floor(_this59.getAttribute('stdDeviation').getNumber());\n    _this59.extraFilterDistance = _this59.blurRadius;\n    return _this59;\n  }\n  _inherits(FeGaussianBlurElement, _Element19);\n  return _createClass(FeGaussianBlurElement, [{\n    key: \"apply\",\n    value: function apply(ctx, x, y, width, height) {\n      var document = this.document,\n        blurRadius = this.blurRadius;\n      var body = document.window ? document.window.document.body : null;\n      var canvas = ctx.canvas; // StackBlur requires canvas be on document\n\n      canvas.id = document.getUniqueId();\n      if (body) {\n        canvas.style.display = 'none';\n        body.appendChild(canvas);\n      }\n      (0,stackblur_canvas__WEBPACK_IMPORTED_MODULE_19__.canvasRGBA)(canvas, x, y, width, height, blurRadius);\n      if (body) {\n        body.removeChild(canvas);\n      }\n    }\n  }]);\n}(Element);\nvar TitleElement = /*#__PURE__*/function (_Element20) {\n  function TitleElement() {\n    var _this60;\n    _classCallCheck(this, TitleElement);\n    _this60 = _callSuper(this, TitleElement, arguments);\n    _this60.type = 'title';\n    return _this60;\n  }\n  _inherits(TitleElement, _Element20);\n  return _createClass(TitleElement);\n}(Element);\nvar DescElement = /*#__PURE__*/function (_Element21) {\n  function DescElement() {\n    var _this61;\n    _classCallCheck(this, DescElement);\n    _this61 = _callSuper(this, DescElement, arguments);\n    _this61.type = 'desc';\n    return _this61;\n  }\n  _inherits(DescElement, _Element21);\n  return _createClass(DescElement);\n}(Element);\nvar elements = {\n  'svg': SVGElement,\n  'rect': RectElement,\n  'circle': CircleElement,\n  'ellipse': EllipseElement,\n  'line': LineElement,\n  'polyline': PolylineElement,\n  'polygon': PolygonElement,\n  'path': PathElement,\n  'pattern': PatternElement,\n  'marker': MarkerElement,\n  'defs': DefsElement,\n  'linearGradient': LinearGradientElement,\n  'radialGradient': RadialGradientElement,\n  'stop': StopElement,\n  'animate': AnimateElement,\n  'animateColor': AnimateColorElement,\n  'animateTransform': AnimateTransformElement,\n  'font': FontElement,\n  'font-face': FontFaceElement,\n  'missing-glyph': MissingGlyphElement,\n  'glyph': GlyphElement,\n  'text': TextElement,\n  'tspan': TSpanElement,\n  'tref': TRefElement,\n  'a': AElement,\n  'textPath': TextPathElement,\n  'image': ImageElement,\n  'g': GElement,\n  'symbol': SymbolElement,\n  'style': StyleElement,\n  'use': UseElement,\n  'mask': MaskElement,\n  'clipPath': ClipPathElement,\n  'filter': FilterElement,\n  'feDropShadow': FeDropShadowElement,\n  'feMorphology': FeMorphologyElement,\n  'feComposite': FeCompositeElement,\n  'feColorMatrix': FeColorMatrixElement,\n  'feGaussianBlur': FeGaussianBlurElement,\n  'title': TitleElement,\n  'desc': DescElement\n};\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys$1(Object(source), true).forEach(function (key) {\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_7__(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$1(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction createCanvas(width, height) {\n  var canvas = document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n  return canvas;\n}\nfunction createImage(_x) {\n  return _createImage.apply(this, arguments);\n}\nfunction _createImage() {\n  _createImage = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(src) {\n    var anonymousCrossOrigin,\n      image,\n      _args6 = arguments;\n    return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n      while (1) switch (_context7.prev = _context7.next) {\n        case 0:\n          anonymousCrossOrigin = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : false;\n          image = document.createElement('img');\n          if (anonymousCrossOrigin) {\n            image.crossOrigin = 'Anonymous';\n          }\n          return _context7.abrupt(\"return\", new Promise(function (resolve, reject) {\n            image.onload = function () {\n              resolve(image);\n            };\n            image.onerror = function (_event, _source, _lineno, _colno, error) {\n              reject(error);\n            };\n            image.src = src;\n          }));\n        case 4:\n        case \"end\":\n          return _context7.stop();\n      }\n    }, _callee7);\n  }));\n  return _createImage.apply(this, arguments);\n}\nvar Document = /*#__PURE__*/function () {\n  function Document(canvg) {\n    _classCallCheck(this, Document);\n    var _ref11 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref11$rootEmSize = _ref11.rootEmSize,\n      rootEmSize = _ref11$rootEmSize === void 0 ? 12 : _ref11$rootEmSize,\n      _ref11$emSize = _ref11.emSize,\n      emSize = _ref11$emSize === void 0 ? 12 : _ref11$emSize,\n      _ref11$createCanvas = _ref11.createCanvas,\n      createCanvas = _ref11$createCanvas === void 0 ? Document.createCanvas : _ref11$createCanvas,\n      _ref11$createImage = _ref11.createImage,\n      createImage = _ref11$createImage === void 0 ? Document.createImage : _ref11$createImage,\n      anonymousCrossOrigin = _ref11.anonymousCrossOrigin;\n    this.canvg = canvg;\n    this.definitions = Object.create(null);\n    this.styles = Object.create(null);\n    this.stylesSpecificity = Object.create(null);\n    this.images = [];\n    this.fonts = [];\n    this.emSizeStack = [];\n    this.uniqueId = 0;\n    this.screen = canvg.screen;\n    this.rootEmSize = rootEmSize;\n    this.emSize = emSize;\n    this.createCanvas = createCanvas;\n    this.createImage = this.bindCreateImage(createImage, anonymousCrossOrigin);\n    this.screen.wait(this.isImagesLoaded.bind(this));\n    this.screen.wait(this.isFontsLoaded.bind(this));\n  }\n  return _createClass(Document, [{\n    key: \"bindCreateImage\",\n    value: function bindCreateImage(createImage, anonymousCrossOrigin) {\n      if (typeof anonymousCrossOrigin === 'boolean') {\n        return function (source, forceAnonymousCrossOrigin) {\n          return createImage(source, typeof forceAnonymousCrossOrigin === 'boolean' ? forceAnonymousCrossOrigin : anonymousCrossOrigin);\n        };\n      }\n      return createImage;\n    }\n  }, {\n    key: \"window\",\n    get: function get() {\n      return this.screen.window;\n    }\n  }, {\n    key: \"fetch\",\n    get: function get() {\n      return this.screen.fetch;\n    }\n  }, {\n    key: \"ctx\",\n    get: function get() {\n      return this.screen.ctx;\n    }\n  }, {\n    key: \"emSize\",\n    get: function get() {\n      var emSizeStack = this.emSizeStack;\n      return emSizeStack[emSizeStack.length - 1];\n    },\n    set: function set(value) {\n      var emSizeStack = this.emSizeStack;\n      emSizeStack.push(value);\n    }\n  }, {\n    key: \"popEmSize\",\n    value: function popEmSize() {\n      var emSizeStack = this.emSizeStack;\n      emSizeStack.pop();\n    }\n  }, {\n    key: \"getUniqueId\",\n    value: function getUniqueId() {\n      return \"canvg\".concat(++this.uniqueId);\n    }\n  }, {\n    key: \"isImagesLoaded\",\n    value: function isImagesLoaded() {\n      return this.images.every(function (_) {\n        return _.loaded;\n      });\n    }\n  }, {\n    key: \"isFontsLoaded\",\n    value: function isFontsLoaded() {\n      return this.fonts.every(function (_) {\n        return _.loaded;\n      });\n    }\n  }, {\n    key: \"createDocumentElement\",\n    value: function createDocumentElement(document) {\n      var documentElement = this.createElement(document.documentElement);\n      documentElement.root = true;\n      documentElement.addStylesFromStyleDefinition();\n      this.documentElement = documentElement;\n      return documentElement;\n    }\n  }, {\n    key: \"createElement\",\n    value: function createElement(node) {\n      var elementType = node.nodeName.replace(/^[^:]+:/, '');\n      var ElementType = Document.elementTypes[elementType];\n      if (typeof ElementType !== 'undefined') {\n        return new ElementType(this, node);\n      }\n      return new UnknownElement(this, node);\n    }\n  }, {\n    key: \"createTextNode\",\n    value: function createTextNode(node) {\n      return new TextNode(this, node);\n    }\n  }, {\n    key: \"setViewBox\",\n    value: function setViewBox(config) {\n      this.screen.setViewBox(_objectSpread$1({\n        document: this\n      }, config));\n    }\n  }]);\n}();\nDocument.createCanvas = createCanvas;\nDocument.createImage = createImage;\nDocument.elementTypes = elements;\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_7__(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\n/**\r\n * SVG renderer on canvas.\r\n */\nvar Canvg = /*#__PURE__*/function () {\n  /**\r\n   * Main constructor.\r\n   * @param ctx - Rendering context.\r\n   * @param svg - SVG Document.\r\n   * @param options - Rendering options.\r\n   */\n  function Canvg(ctx, svg) {\n    _classCallCheck(this, Canvg);\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    this.parser = new Parser(options);\n    this.screen = new Screen(ctx, options);\n    this.options = options;\n    var document = new Document(this, options);\n    var documentElement = document.createDocumentElement(svg);\n    this.document = document;\n    this.documentElement = documentElement;\n  }\n  /**\r\n   * Create Canvg instance from SVG source string or URL.\r\n   * @param ctx - Rendering context.\r\n   * @param svg - SVG source string or URL.\r\n   * @param options - Rendering options.\r\n   * @returns Canvg instance.\r\n   */\n  return _createClass(Canvg, [{\n    key: \"fork\",\n    value:\n    /**\r\n     * Create new Canvg instance with inherited options.\r\n     * @param ctx - Rendering context.\r\n     * @param svg - SVG source string or URL.\r\n     * @param options - Rendering options.\r\n     * @returns Canvg instance.\r\n     */\n\n    function fork(ctx, svg) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return Canvg.from(ctx, svg, _objectSpread(_objectSpread({}, this.options), options));\n    }\n    /**\r\n     * Create new Canvg instance with inherited options.\r\n     * @param ctx - Rendering context.\r\n     * @param svg - SVG source string.\r\n     * @param options - Rendering options.\r\n     * @returns Canvg instance.\r\n     */\n  }, {\n    key: \"forkString\",\n    value: function forkString(ctx, svg) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return Canvg.fromString(ctx, svg, _objectSpread(_objectSpread({}, this.options), options));\n    }\n    /**\r\n     * Document is ready promise.\r\n     * @returns Ready promise.\r\n     */\n  }, {\n    key: \"ready\",\n    value: function ready() {\n      return this.screen.ready();\n    }\n    /**\r\n     * Document is ready value.\r\n     * @returns Is ready or not.\r\n     */\n  }, {\n    key: \"isReady\",\n    value: function isReady() {\n      return this.screen.isReady();\n    }\n    /**\r\n     * Render only first frame, ignoring animations and mouse.\r\n     * @param options - Rendering options.\r\n     */\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _arguments2 = arguments,\n        _this = this;\n      return _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        var options;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              options = _arguments2.length > 0 && _arguments2[0] !== undefined ? _arguments2[0] : {};\n              _this.start(_objectSpread({\n                enableRedraw: true,\n                ignoreAnimation: true,\n                ignoreMouse: true\n              }, options));\n              _context8.next = 4;\n              return _this.ready();\n            case 4:\n              _this.stop();\n            case 5:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8);\n      }))();\n    }\n    /**\r\n     * Start rendering.\r\n     * @param options - Render options.\r\n     */\n  }, {\n    key: \"start\",\n    value: function start() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var documentElement = this.documentElement,\n        screen = this.screen,\n        baseOptions = this.options;\n      screen.start(documentElement, _objectSpread(_objectSpread({\n        enableRedraw: true\n      }, baseOptions), options));\n    }\n    /**\r\n     * Stop rendering.\r\n     */\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.screen.stop();\n    }\n    /**\r\n     * Resize SVG to fit in given size.\r\n     * @param width\r\n     * @param height\r\n     * @param preserveAspectRatio\r\n     */\n  }, {\n    key: \"resize\",\n    value: function resize(width) {\n      var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : width;\n      var preserveAspectRatio = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      this.documentElement.resize(width, height, preserveAspectRatio);\n    }\n  }], [{\n    key: \"from\",\n    value: function from(ctx, svg) {\n      var _arguments = arguments;\n      return _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var options, parser, svgDocument;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              options = _arguments.length > 2 && _arguments[2] !== undefined ? _arguments[2] : {};\n              parser = new Parser(options);\n              _context9.next = 4;\n              return parser.parse(svg);\n            case 4:\n              svgDocument = _context9.sent;\n              return _context9.abrupt(\"return\", new Canvg(ctx, svgDocument, options));\n            case 6:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9);\n      }))();\n    }\n    /**\r\n     * Create Canvg instance from SVG source string.\r\n     * @param ctx - Rendering context.\r\n     * @param svg - SVG source string.\r\n     * @param options - Rendering options.\r\n     * @returns Canvg instance.\r\n     */\n  }, {\n    key: \"fromString\",\n    value: function fromString(ctx, svg) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var parser = new Parser(options);\n      var svgDocument = parser.parseFromString(svg);\n      return new Canvg(ctx, svgDocument, options);\n    }\n  }]);\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/canvg/lib/index.es.js\n");

/***/ })

};
;