"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/prosemirror-tables";
exports.ids = ["vendor-chunks/prosemirror-tables"];
exports.modules = {

/***/ "(ssr)/./node_modules/prosemirror-tables/dist/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/prosemirror-tables/dist/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CellBookmark: () => (/* binding */ CellBookmark),\n/* harmony export */   CellSelection: () => (/* binding */ CellSelection),\n/* harmony export */   ResizeState: () => (/* binding */ ResizeState),\n/* harmony export */   TableMap: () => (/* binding */ TableMap),\n/* harmony export */   TableView: () => (/* binding */ TableView),\n/* harmony export */   __clipCells: () => (/* binding */ clipCells),\n/* harmony export */   __insertCells: () => (/* binding */ insertCells),\n/* harmony export */   __pastedCells: () => (/* binding */ pastedCells),\n/* harmony export */   addColSpan: () => (/* binding */ addColSpan),\n/* harmony export */   addColumn: () => (/* binding */ addColumn),\n/* harmony export */   addColumnAfter: () => (/* binding */ addColumnAfter),\n/* harmony export */   addColumnBefore: () => (/* binding */ addColumnBefore),\n/* harmony export */   addRow: () => (/* binding */ addRow),\n/* harmony export */   addRowAfter: () => (/* binding */ addRowAfter),\n/* harmony export */   addRowBefore: () => (/* binding */ addRowBefore),\n/* harmony export */   cellAround: () => (/* binding */ cellAround),\n/* harmony export */   cellNear: () => (/* binding */ cellNear),\n/* harmony export */   colCount: () => (/* binding */ colCount),\n/* harmony export */   columnIsHeader: () => (/* binding */ columnIsHeader),\n/* harmony export */   columnResizing: () => (/* binding */ columnResizing),\n/* harmony export */   columnResizingPluginKey: () => (/* binding */ columnResizingPluginKey),\n/* harmony export */   deleteCellSelection: () => (/* binding */ deleteCellSelection),\n/* harmony export */   deleteColumn: () => (/* binding */ deleteColumn),\n/* harmony export */   deleteRow: () => (/* binding */ deleteRow),\n/* harmony export */   deleteTable: () => (/* binding */ deleteTable),\n/* harmony export */   findCell: () => (/* binding */ findCell),\n/* harmony export */   fixTables: () => (/* binding */ fixTables),\n/* harmony export */   fixTablesKey: () => (/* binding */ fixTablesKey),\n/* harmony export */   goToNextCell: () => (/* binding */ goToNextCell),\n/* harmony export */   handlePaste: () => (/* binding */ handlePaste),\n/* harmony export */   inSameTable: () => (/* binding */ inSameTable),\n/* harmony export */   isInTable: () => (/* binding */ isInTable),\n/* harmony export */   mergeCells: () => (/* binding */ mergeCells),\n/* harmony export */   moveCellForward: () => (/* binding */ moveCellForward),\n/* harmony export */   nextCell: () => (/* binding */ nextCell),\n/* harmony export */   pointsAtCell: () => (/* binding */ pointsAtCell),\n/* harmony export */   removeColSpan: () => (/* binding */ removeColSpan),\n/* harmony export */   removeColumn: () => (/* binding */ removeColumn),\n/* harmony export */   removeRow: () => (/* binding */ removeRow),\n/* harmony export */   rowIsHeader: () => (/* binding */ rowIsHeader),\n/* harmony export */   selectedRect: () => (/* binding */ selectedRect),\n/* harmony export */   selectionCell: () => (/* binding */ selectionCell),\n/* harmony export */   setCellAttr: () => (/* binding */ setCellAttr),\n/* harmony export */   splitCell: () => (/* binding */ splitCell),\n/* harmony export */   splitCellWithType: () => (/* binding */ splitCellWithType),\n/* harmony export */   tableEditing: () => (/* binding */ tableEditing),\n/* harmony export */   tableEditingKey: () => (/* binding */ tableEditingKey),\n/* harmony export */   tableNodeTypes: () => (/* binding */ tableNodeTypes),\n/* harmony export */   tableNodes: () => (/* binding */ tableNodes),\n/* harmony export */   toggleHeader: () => (/* binding */ toggleHeader),\n/* harmony export */   toggleHeaderCell: () => (/* binding */ toggleHeaderCell),\n/* harmony export */   toggleHeaderColumn: () => (/* binding */ toggleHeaderColumn),\n/* harmony export */   toggleHeaderRow: () => (/* binding */ toggleHeaderRow),\n/* harmony export */   updateColumnsOnResize: () => (/* binding */ updateColumnsOnResize)\n/* harmony export */ });\n/* harmony import */ var prosemirror_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-state */ \"(ssr)/./node_modules/prosemirror-state/dist/index.js\");\n/* harmony import */ var prosemirror_model__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prosemirror-model */ \"(ssr)/./node_modules/prosemirror-model/dist/index.js\");\n/* harmony import */ var prosemirror_view__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prosemirror-view */ \"(ssr)/./node_modules/prosemirror-view/dist/index.js\");\n/* harmony import */ var prosemirror_keymap__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! prosemirror-keymap */ \"(ssr)/./node_modules/prosemirror-keymap/dist/index.js\");\n/* harmony import */ var prosemirror_transform__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! prosemirror-transform */ \"(ssr)/./node_modules/prosemirror-transform/dist/index.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _callSuper(_this, derived, args) {\n  function isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n      return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    } catch (e) {\n      return false;\n    }\n  }\n  derived = _getPrototypeOf(derived);\n  return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));\n}\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n// src/index.ts\n\n\n// src/cellselection.ts\n\n\n\n\n// src/tablemap.ts\nvar readFromCache;\nvar addToCache;\nif (typeof WeakMap != \"undefined\") {\n  var cache = /* @__PURE__ */new WeakMap();\n  readFromCache = function readFromCache(key) {\n    return cache.get(key);\n  };\n  addToCache = function addToCache(key, value) {\n    cache.set(key, value);\n    return value;\n  };\n} else {\n  var _cache = [];\n  var cacheSize = 10;\n  var cachePos = 0;\n  readFromCache = function readFromCache(key) {\n    for (var i = 0; i < _cache.length; i += 2) if (_cache[i] == key) return _cache[i + 1];\n  };\n  addToCache = function addToCache(key, value) {\n    if (cachePos == cacheSize) cachePos = 0;\n    _cache[cachePos++] = key;\n    return _cache[cachePos++] = value;\n  };\n}\nvar TableMap = /*#__PURE__*/function () {\n  function TableMap(width, height, map, problems) {\n    _classCallCheck(this, TableMap);\n    this.width = width;\n    this.height = height;\n    this.map = map;\n    this.problems = problems;\n  }\n  // Find the dimensions of the cell at the given position.\n  return _createClass(TableMap, [{\n    key: \"findCell\",\n    value: function findCell(pos) {\n      for (var i = 0; i < this.map.length; i++) {\n        var curPos = this.map[i];\n        if (curPos != pos) continue;\n        var left = i % this.width;\n        var top = i / this.width | 0;\n        var right = left + 1;\n        var bottom = top + 1;\n        for (var j = 1; right < this.width && this.map[i + j] == curPos; j++) {\n          right++;\n        }\n        for (var _j = 1; bottom < this.height && this.map[i + this.width * _j] == curPos; _j++) {\n          bottom++;\n        }\n        return {\n          left: left,\n          top: top,\n          right: right,\n          bottom: bottom\n        };\n      }\n      throw new RangeError(\"No cell with offset \".concat(pos, \" found\"));\n    }\n    // Find the left side of the cell at the given position.\n  }, {\n    key: \"colCount\",\n    value: function colCount(pos) {\n      for (var i = 0; i < this.map.length; i++) {\n        if (this.map[i] == pos) {\n          return i % this.width;\n        }\n      }\n      throw new RangeError(\"No cell with offset \".concat(pos, \" found\"));\n    }\n    // Find the next cell in the given direction, starting from the cell\n    // at `pos`, if any.\n  }, {\n    key: \"nextCell\",\n    value: function nextCell(pos, axis, dir) {\n      var _this$findCell = this.findCell(pos),\n        left = _this$findCell.left,\n        right = _this$findCell.right,\n        top = _this$findCell.top,\n        bottom = _this$findCell.bottom;\n      if (axis == \"horiz\") {\n        if (dir < 0 ? left == 0 : right == this.width) return null;\n        return this.map[top * this.width + (dir < 0 ? left - 1 : right)];\n      } else {\n        if (dir < 0 ? top == 0 : bottom == this.height) return null;\n        return this.map[left + this.width * (dir < 0 ? top - 1 : bottom)];\n      }\n    }\n    // Get the rectangle spanning the two given cells.\n  }, {\n    key: \"rectBetween\",\n    value: function rectBetween(a, b) {\n      var _this$findCell2 = this.findCell(a),\n        leftA = _this$findCell2.left,\n        rightA = _this$findCell2.right,\n        topA = _this$findCell2.top,\n        bottomA = _this$findCell2.bottom;\n      var _this$findCell3 = this.findCell(b),\n        leftB = _this$findCell3.left,\n        rightB = _this$findCell3.right,\n        topB = _this$findCell3.top,\n        bottomB = _this$findCell3.bottom;\n      return {\n        left: Math.min(leftA, leftB),\n        top: Math.min(topA, topB),\n        right: Math.max(rightA, rightB),\n        bottom: Math.max(bottomA, bottomB)\n      };\n    }\n    // Return the position of all cells that have the top left corner in\n    // the given rectangle.\n  }, {\n    key: \"cellsInRect\",\n    value: function cellsInRect(rect) {\n      var result = [];\n      var seen = {};\n      for (var row = rect.top; row < rect.bottom; row++) {\n        for (var col = rect.left; col < rect.right; col++) {\n          var index = row * this.width + col;\n          var pos = this.map[index];\n          if (seen[pos]) continue;\n          seen[pos] = true;\n          if (col == rect.left && col && this.map[index - 1] == pos || row == rect.top && row && this.map[index - this.width] == pos) {\n            continue;\n          }\n          result.push(pos);\n        }\n      }\n      return result;\n    }\n    // Return the position at which the cell at the given row and column\n    // starts, or would start, if a cell started there.\n  }, {\n    key: \"positionAt\",\n    value: function positionAt(row, col, table) {\n      for (var i = 0, rowStart = 0;; i++) {\n        var rowEnd = rowStart + table.child(i).nodeSize;\n        if (i == row) {\n          var index = col + row * this.width;\n          var rowEndIndex = (row + 1) * this.width;\n          while (index < rowEndIndex && this.map[index] < rowStart) index++;\n          return index == rowEndIndex ? rowEnd - 1 : this.map[index];\n        }\n        rowStart = rowEnd;\n      }\n    }\n    // Find the table map for the given table node.\n  }], [{\n    key: \"get\",\n    value: function get(table) {\n      return readFromCache(table) || addToCache(table, computeMap(table));\n    }\n  }]);\n}();\nfunction computeMap(table) {\n  if (table.type.spec.tableRole != \"table\") throw new RangeError(\"Not a table node: \" + table.type.name);\n  var width = findWidth(table),\n    height = table.childCount;\n  var map = [];\n  var mapPos = 0;\n  var problems = null;\n  var colWidths = [];\n  for (var i = 0, e = width * height; i < e; i++) map[i] = 0;\n  for (var row = 0, pos = 0; row < height; row++) {\n    var rowNode = table.child(row);\n    pos++;\n    for (var _i = 0;; _i++) {\n      while (mapPos < map.length && map[mapPos] != 0) mapPos++;\n      if (_i == rowNode.childCount) break;\n      var cellNode = rowNode.child(_i);\n      var _cellNode$attrs = cellNode.attrs,\n        colspan = _cellNode$attrs.colspan,\n        rowspan = _cellNode$attrs.rowspan,\n        colwidth = _cellNode$attrs.colwidth;\n      for (var h = 0; h < rowspan; h++) {\n        if (h + row >= height) {\n          (problems || (problems = [])).push({\n            type: \"overlong_rowspan\",\n            pos: pos,\n            n: rowspan - h\n          });\n          break;\n        }\n        var start = mapPos + h * width;\n        for (var w = 0; w < colspan; w++) {\n          if (map[start + w] == 0) map[start + w] = pos;else (problems || (problems = [])).push({\n            type: \"collision\",\n            row: row,\n            pos: pos,\n            n: colspan - w\n          });\n          var colW = colwidth && colwidth[w];\n          if (colW) {\n            var widthIndex = (start + w) % width * 2,\n              prev = colWidths[widthIndex];\n            if (prev == null || prev != colW && colWidths[widthIndex + 1] == 1) {\n              colWidths[widthIndex] = colW;\n              colWidths[widthIndex + 1] = 1;\n            } else if (prev == colW) {\n              colWidths[widthIndex + 1]++;\n            }\n          }\n        }\n      }\n      mapPos += colspan;\n      pos += cellNode.nodeSize;\n    }\n    var expectedPos = (row + 1) * width;\n    var missing = 0;\n    while (mapPos < expectedPos) if (map[mapPos++] == 0) missing++;\n    if (missing) (problems || (problems = [])).push({\n      type: \"missing\",\n      row: row,\n      n: missing\n    });\n    pos++;\n  }\n  if (width === 0 || height === 0) (problems || (problems = [])).push({\n    type: \"zero_sized\"\n  });\n  var tableMap = new TableMap(width, height, map, problems);\n  var badWidths = false;\n  for (var _i2 = 0; !badWidths && _i2 < colWidths.length; _i2 += 2) if (colWidths[_i2] != null && colWidths[_i2 + 1] < height) badWidths = true;\n  if (badWidths) findBadColWidths(tableMap, colWidths, table);\n  return tableMap;\n}\nfunction findWidth(table) {\n  var width = -1;\n  var hasRowSpan = false;\n  for (var row = 0; row < table.childCount; row++) {\n    var rowNode = table.child(row);\n    var rowWidth = 0;\n    if (hasRowSpan) for (var j = 0; j < row; j++) {\n      var prevRow = table.child(j);\n      for (var i = 0; i < prevRow.childCount; i++) {\n        var cell = prevRow.child(i);\n        if (j + cell.attrs.rowspan > row) rowWidth += cell.attrs.colspan;\n      }\n    }\n    for (var _i3 = 0; _i3 < rowNode.childCount; _i3++) {\n      var _cell = rowNode.child(_i3);\n      rowWidth += _cell.attrs.colspan;\n      if (_cell.attrs.rowspan > 1) hasRowSpan = true;\n    }\n    if (width == -1) width = rowWidth;else if (width != rowWidth) width = Math.max(width, rowWidth);\n  }\n  return width;\n}\nfunction findBadColWidths(map, colWidths, table) {\n  if (!map.problems) map.problems = [];\n  var seen = {};\n  for (var i = 0; i < map.map.length; i++) {\n    var pos = map.map[i];\n    if (seen[pos]) continue;\n    seen[pos] = true;\n    var node = table.nodeAt(pos);\n    if (!node) {\n      throw new RangeError(\"No cell with offset \".concat(pos, \" found\"));\n    }\n    var updated = null;\n    var attrs = node.attrs;\n    for (var j = 0; j < attrs.colspan; j++) {\n      var col = (i + j) % map.width;\n      var colWidth = colWidths[col * 2];\n      if (colWidth != null && (!attrs.colwidth || attrs.colwidth[j] != colWidth)) (updated || (updated = freshColWidth(attrs)))[j] = colWidth;\n    }\n    if (updated) map.problems.unshift({\n      type: \"colwidth mismatch\",\n      pos: pos,\n      colwidth: updated\n    });\n  }\n}\nfunction freshColWidth(attrs) {\n  if (attrs.colwidth) return attrs.colwidth.slice();\n  var result = [];\n  for (var i = 0; i < attrs.colspan; i++) result.push(0);\n  return result;\n}\n\n// src/util.ts\n\n\n// src/schema.ts\nfunction getCellAttrs(dom, extraAttrs) {\n  if (typeof dom === \"string\") {\n    return {};\n  }\n  var widthAttr = dom.getAttribute(\"data-colwidth\");\n  var widths = widthAttr && /^\\d+(,\\d+)*$/.test(widthAttr) ? widthAttr.split(\",\").map(function (s) {\n    return Number(s);\n  }) : null;\n  var colspan = Number(dom.getAttribute(\"colspan\") || 1);\n  var result = {\n    colspan: colspan,\n    rowspan: Number(dom.getAttribute(\"rowspan\") || 1),\n    colwidth: widths && widths.length == colspan ? widths : null\n  };\n  for (var prop in extraAttrs) {\n    var getter = extraAttrs[prop].getFromDOM;\n    var value = getter && getter(dom);\n    if (value != null) {\n      result[prop] = value;\n    }\n  }\n  return result;\n}\nfunction setCellAttrs(node, extraAttrs) {\n  var attrs = {};\n  if (node.attrs.colspan != 1) attrs.colspan = node.attrs.colspan;\n  if (node.attrs.rowspan != 1) attrs.rowspan = node.attrs.rowspan;\n  if (node.attrs.colwidth) attrs[\"data-colwidth\"] = node.attrs.colwidth.join(\",\");\n  for (var prop in extraAttrs) {\n    var setter = extraAttrs[prop].setDOMAttr;\n    if (setter) setter(node.attrs[prop], attrs);\n  }\n  return attrs;\n}\nfunction tableNodes(options) {\n  var extraAttrs = options.cellAttributes || {};\n  var cellAttrs = {\n    colspan: {\n      \"default\": 1\n    },\n    rowspan: {\n      \"default\": 1\n    },\n    colwidth: {\n      \"default\": null\n    }\n  };\n  for (var prop in extraAttrs) cellAttrs[prop] = {\n    \"default\": extraAttrs[prop][\"default\"]\n  };\n  return {\n    table: {\n      content: \"table_row+\",\n      tableRole: \"table\",\n      isolating: true,\n      group: options.tableGroup,\n      parseDOM: [{\n        tag: \"table\"\n      }],\n      toDOM: function toDOM() {\n        return [\"table\", [\"tbody\", 0]];\n      }\n    },\n    table_row: {\n      content: \"(table_cell | table_header)*\",\n      tableRole: \"row\",\n      parseDOM: [{\n        tag: \"tr\"\n      }],\n      toDOM: function toDOM() {\n        return [\"tr\", 0];\n      }\n    },\n    table_cell: {\n      content: options.cellContent,\n      attrs: cellAttrs,\n      tableRole: \"cell\",\n      isolating: true,\n      parseDOM: [{\n        tag: \"td\",\n        getAttrs: function getAttrs(dom) {\n          return getCellAttrs(dom, extraAttrs);\n        }\n      }],\n      toDOM: function toDOM(node) {\n        return [\"td\", setCellAttrs(node, extraAttrs), 0];\n      }\n    },\n    table_header: {\n      content: options.cellContent,\n      attrs: cellAttrs,\n      tableRole: \"header_cell\",\n      isolating: true,\n      parseDOM: [{\n        tag: \"th\",\n        getAttrs: function getAttrs(dom) {\n          return getCellAttrs(dom, extraAttrs);\n        }\n      }],\n      toDOM: function toDOM(node) {\n        return [\"th\", setCellAttrs(node, extraAttrs), 0];\n      }\n    }\n  };\n}\nfunction tableNodeTypes(schema) {\n  var result = schema.cached.tableNodeTypes;\n  if (!result) {\n    result = schema.cached.tableNodeTypes = {};\n    for (var name in schema.nodes) {\n      var type = schema.nodes[name],\n        role = type.spec.tableRole;\n      if (role) result[role] = type;\n    }\n  }\n  return result;\n}\n\n// src/util.ts\nvar tableEditingKey = new prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey(\"selectingCells\");\nfunction cellAround($pos) {\n  for (var d = $pos.depth - 1; d > 0; d--) if ($pos.node(d).type.spec.tableRole == \"row\") return $pos.node(0).resolve($pos.before(d + 1));\n  return null;\n}\nfunction cellWrapping($pos) {\n  for (var d = $pos.depth; d > 0; d--) {\n    var role = $pos.node(d).type.spec.tableRole;\n    if (role === \"cell\" || role === \"header_cell\") return $pos.node(d);\n  }\n  return null;\n}\nfunction isInTable(state) {\n  var $head = state.selection.$head;\n  for (var d = $head.depth; d > 0; d--) if ($head.node(d).type.spec.tableRole == \"row\") return true;\n  return false;\n}\nfunction selectionCell(state) {\n  var sel = state.selection;\n  if (\"$anchorCell\" in sel && sel.$anchorCell) {\n    return sel.$anchorCell.pos > sel.$headCell.pos ? sel.$anchorCell : sel.$headCell;\n  } else if (\"node\" in sel && sel.node && sel.node.type.spec.tableRole == \"cell\") {\n    return sel.$anchor;\n  }\n  var $cell = cellAround(sel.$head) || cellNear(sel.$head);\n  if ($cell) {\n    return $cell;\n  }\n  throw new RangeError(\"No cell found around position \".concat(sel.head));\n}\nfunction cellNear($pos) {\n  for (var after = $pos.nodeAfter, pos = $pos.pos; after; after = after.firstChild, pos++) {\n    var role = after.type.spec.tableRole;\n    if (role == \"cell\" || role == \"header_cell\") return $pos.doc.resolve(pos);\n  }\n  for (var before = $pos.nodeBefore, _pos = $pos.pos; before; before = before.lastChild, _pos--) {\n    var _role = before.type.spec.tableRole;\n    if (_role == \"cell\" || _role == \"header_cell\") return $pos.doc.resolve(_pos - before.nodeSize);\n  }\n}\nfunction pointsAtCell($pos) {\n  return $pos.parent.type.spec.tableRole == \"row\" && !!$pos.nodeAfter;\n}\nfunction moveCellForward($pos) {\n  return $pos.node(0).resolve($pos.pos + $pos.nodeAfter.nodeSize);\n}\nfunction inSameTable($cellA, $cellB) {\n  return $cellA.depth == $cellB.depth && $cellA.pos >= $cellB.start(-1) && $cellA.pos <= $cellB.end(-1);\n}\nfunction findCell($pos) {\n  return TableMap.get($pos.node(-1)).findCell($pos.pos - $pos.start(-1));\n}\nfunction colCount($pos) {\n  return TableMap.get($pos.node(-1)).colCount($pos.pos - $pos.start(-1));\n}\nfunction nextCell($pos, axis, dir) {\n  var table = $pos.node(-1);\n  var map = TableMap.get(table);\n  var tableStart = $pos.start(-1);\n  var moved = map.nextCell($pos.pos - tableStart, axis, dir);\n  return moved == null ? null : $pos.node(0).resolve(tableStart + moved);\n}\nfunction removeColSpan(attrs, pos) {\n  var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var result = _objectSpread(_objectSpread({}, attrs), {}, {\n    colspan: attrs.colspan - n\n  });\n  if (result.colwidth) {\n    result.colwidth = result.colwidth.slice();\n    result.colwidth.splice(pos, n);\n    if (!result.colwidth.some(function (w) {\n      return w > 0;\n    })) result.colwidth = null;\n  }\n  return result;\n}\nfunction addColSpan(attrs, pos) {\n  var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var result = _objectSpread(_objectSpread({}, attrs), {}, {\n    colspan: attrs.colspan + n\n  });\n  if (result.colwidth) {\n    result.colwidth = result.colwidth.slice();\n    for (var i = 0; i < n; i++) result.colwidth.splice(pos, 0, 0);\n  }\n  return result;\n}\nfunction columnIsHeader(map, table, col) {\n  var headerCell = tableNodeTypes(table.type.schema).header_cell;\n  for (var row = 0; row < map.height; row++) if (table.nodeAt(map.map[col + row * map.width]).type != headerCell) return false;\n  return true;\n}\n\n// src/cellselection.ts\nvar CellSelection = /*#__PURE__*/function (_Selection) {\n  // A table selection is identified by its anchor and head cells. The\n  // positions given to this constructor should point _before_ two\n  // cells in the same table. They may be the same, to select a single\n  // cell.\n  function _CellSelection($anchorCell) {\n    var _this2;\n    var $headCell = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : $anchorCell;\n    _classCallCheck(this, _CellSelection);\n    var table = $anchorCell.node(-1);\n    var map = TableMap.get(table);\n    var tableStart = $anchorCell.start(-1);\n    var rect = map.rectBetween($anchorCell.pos - tableStart, $headCell.pos - tableStart);\n    var doc = $anchorCell.node(0);\n    var cells = map.cellsInRect(rect).filter(function (p) {\n      return p != $headCell.pos - tableStart;\n    });\n    cells.unshift($headCell.pos - tableStart);\n    var ranges = cells.map(function (pos) {\n      var cell = table.nodeAt(pos);\n      if (!cell) {\n        throw RangeError(\"No cell with offset \".concat(pos, \" found\"));\n      }\n      var from = tableStart + pos + 1;\n      return new prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.SelectionRange(doc.resolve(from), doc.resolve(from + cell.content.size));\n    });\n    _this2 = _callSuper(this, _CellSelection, [ranges[0].$from, ranges[0].$to, ranges]);\n    _this2.$anchorCell = $anchorCell;\n    _this2.$headCell = $headCell;\n    return _this2;\n  }\n  _inherits(_CellSelection, _Selection);\n  return _createClass(_CellSelection, [{\n    key: \"map\",\n    value: function map(doc, mapping) {\n      var $anchorCell = doc.resolve(mapping.map(this.$anchorCell.pos));\n      var $headCell = doc.resolve(mapping.map(this.$headCell.pos));\n      if (pointsAtCell($anchorCell) && pointsAtCell($headCell) && inSameTable($anchorCell, $headCell)) {\n        var tableChanged = this.$anchorCell.node(-1) != $anchorCell.node(-1);\n        if (tableChanged && this.isRowSelection()) return _CellSelection.rowSelection($anchorCell, $headCell);else if (tableChanged && this.isColSelection()) return _CellSelection.colSelection($anchorCell, $headCell);else return new _CellSelection($anchorCell, $headCell);\n      }\n      return prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.between($anchorCell, $headCell);\n    }\n    // Returns a rectangular slice of table rows containing the selected\n    // cells.\n  }, {\n    key: \"content\",\n    value: function content() {\n      var table = this.$anchorCell.node(-1);\n      var map = TableMap.get(table);\n      var tableStart = this.$anchorCell.start(-1);\n      var rect = map.rectBetween(this.$anchorCell.pos - tableStart, this.$headCell.pos - tableStart);\n      var seen = {};\n      var rows = [];\n      for (var row = rect.top; row < rect.bottom; row++) {\n        var rowContent = [];\n        for (var index = row * map.width + rect.left, col = rect.left; col < rect.right; col++, index++) {\n          var pos = map.map[index];\n          if (seen[pos]) continue;\n          seen[pos] = true;\n          var cellRect = map.findCell(pos);\n          var cell = table.nodeAt(pos);\n          if (!cell) {\n            throw RangeError(\"No cell with offset \".concat(pos, \" found\"));\n          }\n          var extraLeft = rect.left - cellRect.left;\n          var extraRight = cellRect.right - rect.right;\n          if (extraLeft > 0 || extraRight > 0) {\n            var attrs = cell.attrs;\n            if (extraLeft > 0) {\n              attrs = removeColSpan(attrs, 0, extraLeft);\n            }\n            if (extraRight > 0) {\n              attrs = removeColSpan(attrs, attrs.colspan - extraRight, extraRight);\n            }\n            if (cellRect.left < rect.left) {\n              cell = cell.type.createAndFill(attrs);\n              if (!cell) {\n                throw RangeError(\"Could not create cell with attrs \".concat(JSON.stringify(attrs)));\n              }\n            } else {\n              cell = cell.type.create(attrs, cell.content);\n            }\n          }\n          if (cellRect.top < rect.top || cellRect.bottom > rect.bottom) {\n            var _attrs = _objectSpread(_objectSpread({}, cell.attrs), {}, {\n              rowspan: Math.min(cellRect.bottom, rect.bottom) - Math.max(cellRect.top, rect.top)\n            });\n            if (cellRect.top < rect.top) {\n              cell = cell.type.createAndFill(_attrs);\n            } else {\n              cell = cell.type.create(_attrs, cell.content);\n            }\n          }\n          rowContent.push(cell);\n        }\n        rows.push(table.child(row).copy(prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Fragment.from(rowContent)));\n      }\n      var fragment = this.isColSelection() && this.isRowSelection() ? table : rows;\n      return new prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Fragment.from(fragment), 1, 1);\n    }\n  }, {\n    key: \"replace\",\n    value: function replace(tr) {\n      var content = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Slice.empty;\n      var mapFrom = tr.steps.length,\n        ranges = this.ranges;\n      for (var i = 0; i < ranges.length; i++) {\n        var _ranges$i = ranges[i],\n          $from = _ranges$i.$from,\n          $to = _ranges$i.$to,\n          mapping = tr.mapping.slice(mapFrom);\n        tr.replace(mapping.map($from.pos), mapping.map($to.pos), i ? prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Slice.empty : content);\n      }\n      var sel = prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Selection.findFrom(tr.doc.resolve(tr.mapping.slice(mapFrom).map(this.to)), -1);\n      if (sel) tr.setSelection(sel);\n    }\n  }, {\n    key: \"replaceWith\",\n    value: function replaceWith(tr, node) {\n      this.replace(tr, new prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Fragment.from(node), 0, 0));\n    }\n  }, {\n    key: \"forEachCell\",\n    value: function forEachCell(f) {\n      var table = this.$anchorCell.node(-1);\n      var map = TableMap.get(table);\n      var tableStart = this.$anchorCell.start(-1);\n      var cells = map.cellsInRect(map.rectBetween(this.$anchorCell.pos - tableStart, this.$headCell.pos - tableStart));\n      for (var i = 0; i < cells.length; i++) {\n        f(table.nodeAt(cells[i]), tableStart + cells[i]);\n      }\n    }\n    // True if this selection goes all the way from the top to the\n    // bottom of the table.\n  }, {\n    key: \"isColSelection\",\n    value: function isColSelection() {\n      var anchorTop = this.$anchorCell.index(-1);\n      var headTop = this.$headCell.index(-1);\n      if (Math.min(anchorTop, headTop) > 0) return false;\n      var anchorBottom = anchorTop + this.$anchorCell.nodeAfter.attrs.rowspan;\n      var headBottom = headTop + this.$headCell.nodeAfter.attrs.rowspan;\n      return Math.max(anchorBottom, headBottom) == this.$headCell.node(-1).childCount;\n    }\n    // Returns the smallest column selection that covers the given anchor\n    // and head cell.\n  }, {\n    key: \"isRowSelection\",\n    value:\n    // True if this selection goes all the way from the left to the\n    // right of the table.\n    function isRowSelection() {\n      var table = this.$anchorCell.node(-1);\n      var map = TableMap.get(table);\n      var tableStart = this.$anchorCell.start(-1);\n      var anchorLeft = map.colCount(this.$anchorCell.pos - tableStart);\n      var headLeft = map.colCount(this.$headCell.pos - tableStart);\n      if (Math.min(anchorLeft, headLeft) > 0) return false;\n      var anchorRight = anchorLeft + this.$anchorCell.nodeAfter.attrs.colspan;\n      var headRight = headLeft + this.$headCell.nodeAfter.attrs.colspan;\n      return Math.max(anchorRight, headRight) == map.width;\n    }\n  }, {\n    key: \"eq\",\n    value: function eq(other) {\n      return other instanceof _CellSelection && other.$anchorCell.pos == this.$anchorCell.pos && other.$headCell.pos == this.$headCell.pos;\n    }\n    // Returns the smallest row selection that covers the given anchor\n    // and head cell.\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        type: \"cell\",\n        anchor: this.$anchorCell.pos,\n        head: this.$headCell.pos\n      };\n    }\n  }, {\n    key: \"getBookmark\",\n    value: function getBookmark() {\n      return new CellBookmark(this.$anchorCell.pos, this.$headCell.pos);\n    }\n  }], [{\n    key: \"colSelection\",\n    value: function colSelection($anchorCell) {\n      var $headCell = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : $anchorCell;\n      var table = $anchorCell.node(-1);\n      var map = TableMap.get(table);\n      var tableStart = $anchorCell.start(-1);\n      var anchorRect = map.findCell($anchorCell.pos - tableStart);\n      var headRect = map.findCell($headCell.pos - tableStart);\n      var doc = $anchorCell.node(0);\n      if (anchorRect.top <= headRect.top) {\n        if (anchorRect.top > 0) $anchorCell = doc.resolve(tableStart + map.map[anchorRect.left]);\n        if (headRect.bottom < map.height) $headCell = doc.resolve(tableStart + map.map[map.width * (map.height - 1) + headRect.right - 1]);\n      } else {\n        if (headRect.top > 0) $headCell = doc.resolve(tableStart + map.map[headRect.left]);\n        if (anchorRect.bottom < map.height) $anchorCell = doc.resolve(tableStart + map.map[map.width * (map.height - 1) + anchorRect.right - 1]);\n      }\n      return new _CellSelection($anchorCell, $headCell);\n    }\n  }, {\n    key: \"rowSelection\",\n    value: function rowSelection($anchorCell) {\n      var $headCell = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : $anchorCell;\n      var table = $anchorCell.node(-1);\n      var map = TableMap.get(table);\n      var tableStart = $anchorCell.start(-1);\n      var anchorRect = map.findCell($anchorCell.pos - tableStart);\n      var headRect = map.findCell($headCell.pos - tableStart);\n      var doc = $anchorCell.node(0);\n      if (anchorRect.left <= headRect.left) {\n        if (anchorRect.left > 0) $anchorCell = doc.resolve(tableStart + map.map[anchorRect.top * map.width]);\n        if (headRect.right < map.width) $headCell = doc.resolve(tableStart + map.map[map.width * (headRect.top + 1) - 1]);\n      } else {\n        if (headRect.left > 0) $headCell = doc.resolve(tableStart + map.map[headRect.top * map.width]);\n        if (anchorRect.right < map.width) $anchorCell = doc.resolve(tableStart + map.map[map.width * (anchorRect.top + 1) - 1]);\n      }\n      return new _CellSelection($anchorCell, $headCell);\n    }\n  }, {\n    key: \"fromJSON\",\n    value: function fromJSON(doc, json) {\n      return new _CellSelection(doc.resolve(json.anchor), doc.resolve(json.head));\n    }\n  }, {\n    key: \"create\",\n    value: function create(doc, anchorCell) {\n      var headCell = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : anchorCell;\n      return new _CellSelection(doc.resolve(anchorCell), doc.resolve(headCell));\n    }\n  }]);\n}(prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Selection);\nCellSelection.prototype.visible = false;\nprosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Selection.jsonID(\"cell\", CellSelection);\nvar CellBookmark = /*#__PURE__*/function () {\n  function _CellBookmark(anchor, head) {\n    _classCallCheck(this, _CellBookmark);\n    this.anchor = anchor;\n    this.head = head;\n  }\n  return _createClass(_CellBookmark, [{\n    key: \"map\",\n    value: function map(mapping) {\n      return new _CellBookmark(mapping.map(this.anchor), mapping.map(this.head));\n    }\n  }, {\n    key: \"resolve\",\n    value: function resolve(doc) {\n      var $anchorCell = doc.resolve(this.anchor),\n        $headCell = doc.resolve(this.head);\n      if ($anchorCell.parent.type.spec.tableRole == \"row\" && $headCell.parent.type.spec.tableRole == \"row\" && $anchorCell.index() < $anchorCell.parent.childCount && $headCell.index() < $headCell.parent.childCount && inSameTable($anchorCell, $headCell)) return new CellSelection($anchorCell, $headCell);else return prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Selection.near($headCell, 1);\n    }\n  }]);\n}();\nfunction drawCellSelection(state) {\n  if (!(state.selection instanceof CellSelection)) return null;\n  var cells = [];\n  state.selection.forEachCell(function (node, pos) {\n    cells.push(prosemirror_view__WEBPACK_IMPORTED_MODULE_2__.Decoration.node(pos, pos + node.nodeSize, {\n      \"class\": \"selectedCell\"\n    }));\n  });\n  return prosemirror_view__WEBPACK_IMPORTED_MODULE_2__.DecorationSet.create(state.doc, cells);\n}\nfunction isCellBoundarySelection(_ref) {\n  var $from = _ref.$from,\n    $to = _ref.$to;\n  if ($from.pos == $to.pos || $from.pos < $to.pos - 6) return false;\n  var afterFrom = $from.pos;\n  var beforeTo = $to.pos;\n  var depth = $from.depth;\n  for (; depth >= 0; depth--, afterFrom++) if ($from.after(depth + 1) < $from.end(depth)) break;\n  for (var d = $to.depth; d >= 0; d--, beforeTo--) if ($to.before(d + 1) > $to.start(d)) break;\n  return afterFrom == beforeTo && /row|table/.test($from.node(depth).type.spec.tableRole);\n}\nfunction isTextSelectionAcrossCells(_ref2) {\n  var $from = _ref2.$from,\n    $to = _ref2.$to;\n  var fromCellBoundaryNode;\n  var toCellBoundaryNode;\n  for (var i = $from.depth; i > 0; i--) {\n    var node = $from.node(i);\n    if (node.type.spec.tableRole === \"cell\" || node.type.spec.tableRole === \"header_cell\") {\n      fromCellBoundaryNode = node;\n      break;\n    }\n  }\n  for (var _i4 = $to.depth; _i4 > 0; _i4--) {\n    var _node = $to.node(_i4);\n    if (_node.type.spec.tableRole === \"cell\" || _node.type.spec.tableRole === \"header_cell\") {\n      toCellBoundaryNode = _node;\n      break;\n    }\n  }\n  return fromCellBoundaryNode !== toCellBoundaryNode && $to.parentOffset === 0;\n}\nfunction normalizeSelection(state, tr, allowTableNodeSelection) {\n  var sel = (tr || state).selection;\n  var doc = (tr || state).doc;\n  var normalize;\n  var role;\n  if (sel instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.NodeSelection && (role = sel.node.type.spec.tableRole)) {\n    if (role == \"cell\" || role == \"header_cell\") {\n      normalize = CellSelection.create(doc, sel.from);\n    } else if (role == \"row\") {\n      var $cell = doc.resolve(sel.from + 1);\n      normalize = CellSelection.rowSelection($cell, $cell);\n    } else if (!allowTableNodeSelection) {\n      var map = TableMap.get(sel.node);\n      var start = sel.from + 1;\n      var lastCell = start + map.map[map.width * map.height - 1];\n      normalize = CellSelection.create(doc, start + 1, lastCell);\n    }\n  } else if (sel instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection && isCellBoundarySelection(sel)) {\n    normalize = prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.create(doc, sel.from);\n  } else if (sel instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection && isTextSelectionAcrossCells(sel)) {\n    normalize = prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.create(doc, sel.$from.start(), sel.$from.end());\n  }\n  if (normalize) (tr || (tr = state.tr)).setSelection(normalize);\n  return tr;\n}\n\n// src/fixtables.ts\n\nvar fixTablesKey = new prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey(\"fix-tables\");\nfunction changedDescendants(old, cur, offset, f) {\n  var oldSize = old.childCount,\n    curSize = cur.childCount;\n  outer: for (var i = 0, j = 0; i < curSize; i++) {\n    var child = cur.child(i);\n    for (var scan = j, e = Math.min(oldSize, i + 3); scan < e; scan++) {\n      if (old.child(scan) == child) {\n        j = scan + 1;\n        offset += child.nodeSize;\n        continue outer;\n      }\n    }\n    f(child, offset);\n    if (j < oldSize && old.child(j).sameMarkup(child)) changedDescendants(old.child(j), child, offset + 1, f);else child.nodesBetween(0, child.content.size, f, offset + 1);\n    offset += child.nodeSize;\n  }\n}\nfunction fixTables(state, oldState) {\n  var tr;\n  var check = function check(node, pos) {\n    if (node.type.spec.tableRole == \"table\") tr = fixTable(state, node, pos, tr);\n  };\n  if (!oldState) state.doc.descendants(check);else if (oldState.doc != state.doc) changedDescendants(oldState.doc, state.doc, 0, check);\n  return tr;\n}\nfunction fixTable(state, table, tablePos, tr) {\n  var map = TableMap.get(table);\n  if (!map.problems) return tr;\n  if (!tr) tr = state.tr;\n  var mustAdd = [];\n  for (var i = 0; i < map.height; i++) mustAdd.push(0);\n  for (var _i5 = 0; _i5 < map.problems.length; _i5++) {\n    var prob = map.problems[_i5];\n    if (prob.type == \"collision\") {\n      var cell = table.nodeAt(prob.pos);\n      if (!cell) continue;\n      var attrs = cell.attrs;\n      for (var j = 0; j < attrs.rowspan; j++) mustAdd[prob.row + j] += prob.n;\n      tr.setNodeMarkup(tr.mapping.map(tablePos + 1 + prob.pos), null, removeColSpan(attrs, attrs.colspan - prob.n, prob.n));\n    } else if (prob.type == \"missing\") {\n      mustAdd[prob.row] += prob.n;\n    } else if (prob.type == \"overlong_rowspan\") {\n      var _cell2 = table.nodeAt(prob.pos);\n      if (!_cell2) continue;\n      tr.setNodeMarkup(tr.mapping.map(tablePos + 1 + prob.pos), null, _objectSpread(_objectSpread({}, _cell2.attrs), {}, {\n        rowspan: _cell2.attrs.rowspan - prob.n\n      }));\n    } else if (prob.type == \"colwidth mismatch\") {\n      var _cell3 = table.nodeAt(prob.pos);\n      if (!_cell3) continue;\n      tr.setNodeMarkup(tr.mapping.map(tablePos + 1 + prob.pos), null, _objectSpread(_objectSpread({}, _cell3.attrs), {}, {\n        colwidth: prob.colwidth\n      }));\n    } else if (prob.type == \"zero_sized\") {\n      var pos = tr.mapping.map(tablePos);\n      tr[\"delete\"](pos, pos + table.nodeSize);\n    }\n  }\n  var first, last;\n  for (var _i6 = 0; _i6 < mustAdd.length; _i6++) if (mustAdd[_i6]) {\n    if (first == null) first = _i6;\n    last = _i6;\n  }\n  for (var _i7 = 0, _pos2 = tablePos + 1; _i7 < map.height; _i7++) {\n    var row = table.child(_i7);\n    var end = _pos2 + row.nodeSize;\n    var add = mustAdd[_i7];\n    if (add > 0) {\n      var role = \"cell\";\n      if (row.firstChild) {\n        role = row.firstChild.type.spec.tableRole;\n      }\n      var nodes = [];\n      for (var _j2 = 0; _j2 < add; _j2++) {\n        var node = tableNodeTypes(state.schema)[role].createAndFill();\n        if (node) nodes.push(node);\n      }\n      var side = (_i7 == 0 || first == _i7 - 1) && last == _i7 ? _pos2 + 1 : end - 1;\n      tr.insert(tr.mapping.map(side), nodes);\n    }\n    _pos2 = end;\n  }\n  return tr.setMeta(fixTablesKey, {\n    fixTables: true\n  });\n}\n\n// src/input.ts\n\n\n\n\n// src/commands.ts\n\n\nfunction selectedRect(state) {\n  var sel = state.selection;\n  var $pos = selectionCell(state);\n  var table = $pos.node(-1);\n  var tableStart = $pos.start(-1);\n  var map = TableMap.get(table);\n  var rect = sel instanceof CellSelection ? map.rectBetween(sel.$anchorCell.pos - tableStart, sel.$headCell.pos - tableStart) : map.findCell($pos.pos - tableStart);\n  return _objectSpread(_objectSpread({}, rect), {}, {\n    tableStart: tableStart,\n    map: map,\n    table: table\n  });\n}\nfunction addColumn(tr, _ref3, col) {\n  var map = _ref3.map,\n    tableStart = _ref3.tableStart,\n    table = _ref3.table;\n  var refColumn = col > 0 ? -1 : 0;\n  if (columnIsHeader(map, table, col + refColumn)) {\n    refColumn = col == 0 || col == map.width ? null : 0;\n  }\n  for (var row = 0; row < map.height; row++) {\n    var index = row * map.width + col;\n    if (col > 0 && col < map.width && map.map[index - 1] == map.map[index]) {\n      var pos = map.map[index];\n      var cell = table.nodeAt(pos);\n      tr.setNodeMarkup(tr.mapping.map(tableStart + pos), null, addColSpan(cell.attrs, col - map.colCount(pos)));\n      row += cell.attrs.rowspan - 1;\n    } else {\n      var type = refColumn == null ? tableNodeTypes(table.type.schema).cell : table.nodeAt(map.map[index + refColumn]).type;\n      var _pos3 = map.positionAt(row, col, table);\n      tr.insert(tr.mapping.map(tableStart + _pos3), type.createAndFill());\n    }\n  }\n  return tr;\n}\nfunction addColumnBefore(state, dispatch) {\n  if (!isInTable(state)) return false;\n  if (dispatch) {\n    var rect = selectedRect(state);\n    dispatch(addColumn(state.tr, rect, rect.left));\n  }\n  return true;\n}\nfunction addColumnAfter(state, dispatch) {\n  if (!isInTable(state)) return false;\n  if (dispatch) {\n    var rect = selectedRect(state);\n    dispatch(addColumn(state.tr, rect, rect.right));\n  }\n  return true;\n}\nfunction removeColumn(tr, _ref4, col) {\n  var map = _ref4.map,\n    table = _ref4.table,\n    tableStart = _ref4.tableStart;\n  var mapStart = tr.mapping.maps.length;\n  for (var row = 0; row < map.height;) {\n    var index = row * map.width + col;\n    var pos = map.map[index];\n    var cell = table.nodeAt(pos);\n    var attrs = cell.attrs;\n    if (col > 0 && map.map[index - 1] == pos || col < map.width - 1 && map.map[index + 1] == pos) {\n      tr.setNodeMarkup(tr.mapping.slice(mapStart).map(tableStart + pos), null, removeColSpan(attrs, col - map.colCount(pos)));\n    } else {\n      var start = tr.mapping.slice(mapStart).map(tableStart + pos);\n      tr[\"delete\"](start, start + cell.nodeSize);\n    }\n    row += attrs.rowspan;\n  }\n}\nfunction deleteColumn(state, dispatch) {\n  if (!isInTable(state)) return false;\n  if (dispatch) {\n    var rect = selectedRect(state);\n    var tr = state.tr;\n    if (rect.left == 0 && rect.right == rect.map.width) return false;\n    for (var i = rect.right - 1;; i--) {\n      removeColumn(tr, rect, i);\n      if (i == rect.left) break;\n      var table = rect.tableStart ? tr.doc.nodeAt(rect.tableStart - 1) : tr.doc;\n      if (!table) {\n        throw RangeError(\"No table found\");\n      }\n      rect.table = table;\n      rect.map = TableMap.get(table);\n    }\n    dispatch(tr);\n  }\n  return true;\n}\nfunction rowIsHeader(map, table, row) {\n  var _a;\n  var headerCell = tableNodeTypes(table.type.schema).header_cell;\n  for (var col = 0; col < map.width; col++) if (((_a = table.nodeAt(map.map[col + row * map.width])) == null ? void 0 : _a.type) != headerCell) return false;\n  return true;\n}\nfunction addRow(tr, _ref5, row) {\n  var map = _ref5.map,\n    tableStart = _ref5.tableStart,\n    table = _ref5.table;\n  var _a;\n  var rowPos = tableStart;\n  for (var i = 0; i < row; i++) rowPos += table.child(i).nodeSize;\n  var cells = [];\n  var refRow = row > 0 ? -1 : 0;\n  if (rowIsHeader(map, table, row + refRow)) refRow = row == 0 || row == map.height ? null : 0;\n  for (var col = 0, index = map.width * row; col < map.width; col++, index++) {\n    if (row > 0 && row < map.height && map.map[index] == map.map[index - map.width]) {\n      var pos = map.map[index];\n      var attrs = table.nodeAt(pos).attrs;\n      tr.setNodeMarkup(tableStart + pos, null, _objectSpread(_objectSpread({}, attrs), {}, {\n        rowspan: attrs.rowspan + 1\n      }));\n      col += attrs.colspan - 1;\n    } else {\n      var type = refRow == null ? tableNodeTypes(table.type.schema).cell : (_a = table.nodeAt(map.map[index + refRow * map.width])) == null ? void 0 : _a.type;\n      var node = type == null ? void 0 : type.createAndFill();\n      if (node) cells.push(node);\n    }\n  }\n  tr.insert(rowPos, tableNodeTypes(table.type.schema).row.create(null, cells));\n  return tr;\n}\nfunction addRowBefore(state, dispatch) {\n  if (!isInTable(state)) return false;\n  if (dispatch) {\n    var rect = selectedRect(state);\n    dispatch(addRow(state.tr, rect, rect.top));\n  }\n  return true;\n}\nfunction addRowAfter(state, dispatch) {\n  if (!isInTable(state)) return false;\n  if (dispatch) {\n    var rect = selectedRect(state);\n    dispatch(addRow(state.tr, rect, rect.bottom));\n  }\n  return true;\n}\nfunction removeRow(tr, _ref6, row) {\n  var map = _ref6.map,\n    table = _ref6.table,\n    tableStart = _ref6.tableStart;\n  var rowPos = 0;\n  for (var i = 0; i < row; i++) rowPos += table.child(i).nodeSize;\n  var nextRow = rowPos + table.child(row).nodeSize;\n  var mapFrom = tr.mapping.maps.length;\n  tr[\"delete\"](rowPos + tableStart, nextRow + tableStart);\n  var seen = /* @__PURE__ */new Set();\n  for (var col = 0, index = row * map.width; col < map.width; col++, index++) {\n    var pos = map.map[index];\n    if (seen.has(pos)) continue;\n    seen.add(pos);\n    if (row > 0 && pos == map.map[index - map.width]) {\n      var attrs = table.nodeAt(pos).attrs;\n      tr.setNodeMarkup(tr.mapping.slice(mapFrom).map(pos + tableStart), null, _objectSpread(_objectSpread({}, attrs), {}, {\n        rowspan: attrs.rowspan - 1\n      }));\n      col += attrs.colspan - 1;\n    } else if (row < map.height && pos == map.map[index + map.width]) {\n      var cell = table.nodeAt(pos);\n      var _attrs2 = cell.attrs;\n      var copy = cell.type.create(_objectSpread(_objectSpread({}, _attrs2), {}, {\n        rowspan: cell.attrs.rowspan - 1\n      }), cell.content);\n      var newPos = map.positionAt(row + 1, col, table);\n      tr.insert(tr.mapping.slice(mapFrom).map(tableStart + newPos), copy);\n      col += _attrs2.colspan - 1;\n    }\n  }\n}\nfunction deleteRow(state, dispatch) {\n  if (!isInTable(state)) return false;\n  if (dispatch) {\n    var rect = selectedRect(state),\n      tr = state.tr;\n    if (rect.top == 0 && rect.bottom == rect.map.height) return false;\n    for (var i = rect.bottom - 1;; i--) {\n      removeRow(tr, rect, i);\n      if (i == rect.top) break;\n      var table = rect.tableStart ? tr.doc.nodeAt(rect.tableStart - 1) : tr.doc;\n      if (!table) {\n        throw RangeError(\"No table found\");\n      }\n      rect.table = table;\n      rect.map = TableMap.get(rect.table);\n    }\n    dispatch(tr);\n  }\n  return true;\n}\nfunction isEmpty(cell) {\n  var c = cell.content;\n  return c.childCount == 1 && c.child(0).isTextblock && c.child(0).childCount == 0;\n}\nfunction cellsOverlapRectangle(_ref7, rect) {\n  var width = _ref7.width,\n    height = _ref7.height,\n    map = _ref7.map;\n  var indexTop = rect.top * width + rect.left,\n    indexLeft = indexTop;\n  var indexBottom = (rect.bottom - 1) * width + rect.left,\n    indexRight = indexTop + (rect.right - rect.left - 1);\n  for (var i = rect.top; i < rect.bottom; i++) {\n    if (rect.left > 0 && map[indexLeft] == map[indexLeft - 1] || rect.right < width && map[indexRight] == map[indexRight + 1]) return true;\n    indexLeft += width;\n    indexRight += width;\n  }\n  for (var _i8 = rect.left; _i8 < rect.right; _i8++) {\n    if (rect.top > 0 && map[indexTop] == map[indexTop - width] || rect.bottom < height && map[indexBottom] == map[indexBottom + width]) return true;\n    indexTop++;\n    indexBottom++;\n  }\n  return false;\n}\nfunction mergeCells(state, dispatch) {\n  var sel = state.selection;\n  if (!(sel instanceof CellSelection) || sel.$anchorCell.pos == sel.$headCell.pos) return false;\n  var rect = selectedRect(state),\n    map = rect.map;\n  if (cellsOverlapRectangle(map, rect)) return false;\n  if (dispatch) {\n    var tr = state.tr;\n    var seen = {};\n    var content = prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Fragment.empty;\n    var mergedPos;\n    var mergedCell;\n    for (var row = rect.top; row < rect.bottom; row++) {\n      for (var col = rect.left; col < rect.right; col++) {\n        var cellPos = map.map[row * map.width + col];\n        var cell = rect.table.nodeAt(cellPos);\n        if (seen[cellPos] || !cell) continue;\n        seen[cellPos] = true;\n        if (mergedPos == null) {\n          mergedPos = cellPos;\n          mergedCell = cell;\n        } else {\n          if (!isEmpty(cell)) content = content.append(cell.content);\n          var mapped = tr.mapping.map(cellPos + rect.tableStart);\n          tr[\"delete\"](mapped, mapped + cell.nodeSize);\n        }\n      }\n    }\n    if (mergedPos == null || mergedCell == null) {\n      return true;\n    }\n    tr.setNodeMarkup(mergedPos + rect.tableStart, null, _objectSpread(_objectSpread({}, addColSpan(mergedCell.attrs, mergedCell.attrs.colspan, rect.right - rect.left - mergedCell.attrs.colspan)), {}, {\n      rowspan: rect.bottom - rect.top\n    }));\n    if (content.size) {\n      var end = mergedPos + 1 + mergedCell.content.size;\n      var start = isEmpty(mergedCell) ? mergedPos + 1 : end;\n      tr.replaceWith(start + rect.tableStart, end + rect.tableStart, content);\n    }\n    tr.setSelection(new CellSelection(tr.doc.resolve(mergedPos + rect.tableStart)));\n    dispatch(tr);\n  }\n  return true;\n}\nfunction splitCell(state, dispatch) {\n  var nodeTypes = tableNodeTypes(state.schema);\n  return splitCellWithType(function (_ref8) {\n    var node = _ref8.node;\n    return nodeTypes[node.type.spec.tableRole];\n  })(state, dispatch);\n}\nfunction splitCellWithType(getCellType) {\n  return function (state, dispatch) {\n    var _a;\n    var sel = state.selection;\n    var cellNode;\n    var cellPos;\n    if (!(sel instanceof CellSelection)) {\n      cellNode = cellWrapping(sel.$from);\n      if (!cellNode) return false;\n      cellPos = (_a = cellAround(sel.$from)) == null ? void 0 : _a.pos;\n    } else {\n      if (sel.$anchorCell.pos != sel.$headCell.pos) return false;\n      cellNode = sel.$anchorCell.nodeAfter;\n      cellPos = sel.$anchorCell.pos;\n    }\n    if (cellNode == null || cellPos == null) {\n      return false;\n    }\n    if (cellNode.attrs.colspan == 1 && cellNode.attrs.rowspan == 1) {\n      return false;\n    }\n    if (dispatch) {\n      var baseAttrs = cellNode.attrs;\n      var attrs = [];\n      var colwidth = baseAttrs.colwidth;\n      if (baseAttrs.rowspan > 1) baseAttrs = _objectSpread(_objectSpread({}, baseAttrs), {}, {\n        rowspan: 1\n      });\n      if (baseAttrs.colspan > 1) baseAttrs = _objectSpread(_objectSpread({}, baseAttrs), {}, {\n        colspan: 1\n      });\n      var rect = selectedRect(state),\n        tr = state.tr;\n      for (var i = 0; i < rect.right - rect.left; i++) attrs.push(colwidth ? _objectSpread(_objectSpread({}, baseAttrs), {}, {\n        colwidth: colwidth && colwidth[i] ? [colwidth[i]] : null\n      }) : baseAttrs);\n      var lastCell;\n      for (var row = rect.top; row < rect.bottom; row++) {\n        var pos = rect.map.positionAt(row, rect.left, rect.table);\n        if (row == rect.top) pos += cellNode.nodeSize;\n        for (var col = rect.left, _i9 = 0; col < rect.right; col++, _i9++) {\n          if (col == rect.left && row == rect.top) continue;\n          tr.insert(lastCell = tr.mapping.map(pos + rect.tableStart, 1), getCellType({\n            node: cellNode,\n            row: row,\n            col: col\n          }).createAndFill(attrs[_i9]));\n        }\n      }\n      tr.setNodeMarkup(cellPos, getCellType({\n        node: cellNode,\n        row: rect.top,\n        col: rect.left\n      }), attrs[0]);\n      if (sel instanceof CellSelection) tr.setSelection(new CellSelection(tr.doc.resolve(sel.$anchorCell.pos), lastCell ? tr.doc.resolve(lastCell) : void 0));\n      dispatch(tr);\n    }\n    return true;\n  };\n}\nfunction setCellAttr(name, value) {\n  return function (state, dispatch) {\n    if (!isInTable(state)) return false;\n    var $cell = selectionCell(state);\n    if ($cell.nodeAfter.attrs[name] === value) return false;\n    if (dispatch) {\n      var tr = state.tr;\n      if (state.selection instanceof CellSelection) state.selection.forEachCell(function (node, pos) {\n        if (node.attrs[name] !== value) tr.setNodeMarkup(pos, null, _objectSpread(_objectSpread({}, node.attrs), {}, _defineProperty({}, name, value)));\n      });else tr.setNodeMarkup($cell.pos, null, _objectSpread(_objectSpread({}, $cell.nodeAfter.attrs), {}, _defineProperty({}, name, value)));\n      dispatch(tr);\n    }\n    return true;\n  };\n}\nfunction deprecated_toggleHeader(type) {\n  return function (state, dispatch) {\n    if (!isInTable(state)) return false;\n    if (dispatch) {\n      var types = tableNodeTypes(state.schema);\n      var rect = selectedRect(state),\n        tr = state.tr;\n      var cells = rect.map.cellsInRect(type == \"column\" ? {\n        left: rect.left,\n        top: 0,\n        right: rect.right,\n        bottom: rect.map.height\n      } : type == \"row\" ? {\n        left: 0,\n        top: rect.top,\n        right: rect.map.width,\n        bottom: rect.bottom\n      } : rect);\n      var nodes = cells.map(function (pos) {\n        return rect.table.nodeAt(pos);\n      });\n      for (var i = 0; i < cells.length; i++) if (nodes[i].type == types.header_cell) tr.setNodeMarkup(rect.tableStart + cells[i], types.cell, nodes[i].attrs);\n      if (tr.steps.length == 0) for (var _i10 = 0; _i10 < cells.length; _i10++) tr.setNodeMarkup(rect.tableStart + cells[_i10], types.header_cell, nodes[_i10].attrs);\n      dispatch(tr);\n    }\n    return true;\n  };\n}\nfunction isHeaderEnabledByType(type, rect, types) {\n  var cellPositions = rect.map.cellsInRect({\n    left: 0,\n    top: 0,\n    right: type == \"row\" ? rect.map.width : 1,\n    bottom: type == \"column\" ? rect.map.height : 1\n  });\n  for (var i = 0; i < cellPositions.length; i++) {\n    var cell = rect.table.nodeAt(cellPositions[i]);\n    if (cell && cell.type !== types.header_cell) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction toggleHeader(type, options) {\n  options = options || {\n    useDeprecatedLogic: false\n  };\n  if (options.useDeprecatedLogic) return deprecated_toggleHeader(type);\n  return function (state, dispatch) {\n    if (!isInTable(state)) return false;\n    if (dispatch) {\n      var types = tableNodeTypes(state.schema);\n      var rect = selectedRect(state),\n        tr = state.tr;\n      var isHeaderRowEnabled = isHeaderEnabledByType(\"row\", rect, types);\n      var isHeaderColumnEnabled = isHeaderEnabledByType(\"column\", rect, types);\n      var isHeaderEnabled = type === \"column\" ? isHeaderRowEnabled : type === \"row\" ? isHeaderColumnEnabled : false;\n      var selectionStartsAt = isHeaderEnabled ? 1 : 0;\n      var cellsRect = type == \"column\" ? {\n        left: 0,\n        top: selectionStartsAt,\n        right: 1,\n        bottom: rect.map.height\n      } : type == \"row\" ? {\n        left: selectionStartsAt,\n        top: 0,\n        right: rect.map.width,\n        bottom: 1\n      } : rect;\n      var newType = type == \"column\" ? isHeaderColumnEnabled ? types.cell : types.header_cell : type == \"row\" ? isHeaderRowEnabled ? types.cell : types.header_cell : types.cell;\n      rect.map.cellsInRect(cellsRect).forEach(function (relativeCellPos) {\n        var cellPos = relativeCellPos + rect.tableStart;\n        var cell = tr.doc.nodeAt(cellPos);\n        if (cell) {\n          tr.setNodeMarkup(cellPos, newType, cell.attrs);\n        }\n      });\n      dispatch(tr);\n    }\n    return true;\n  };\n}\nvar toggleHeaderRow = toggleHeader(\"row\", {\n  useDeprecatedLogic: true\n});\nvar toggleHeaderColumn = toggleHeader(\"column\", {\n  useDeprecatedLogic: true\n});\nvar toggleHeaderCell = toggleHeader(\"cell\", {\n  useDeprecatedLogic: true\n});\nfunction findNextCell($cell, dir) {\n  if (dir < 0) {\n    var before = $cell.nodeBefore;\n    if (before) return $cell.pos - before.nodeSize;\n    for (var row = $cell.index(-1) - 1, rowEnd = $cell.before(); row >= 0; row--) {\n      var rowNode = $cell.node(-1).child(row);\n      var lastChild = rowNode.lastChild;\n      if (lastChild) {\n        return rowEnd - 1 - lastChild.nodeSize;\n      }\n      rowEnd -= rowNode.nodeSize;\n    }\n  } else {\n    if ($cell.index() < $cell.parent.childCount - 1) {\n      return $cell.pos + $cell.nodeAfter.nodeSize;\n    }\n    var table = $cell.node(-1);\n    for (var _row = $cell.indexAfter(-1), rowStart = $cell.after(); _row < table.childCount; _row++) {\n      var _rowNode = table.child(_row);\n      if (_rowNode.childCount) return rowStart + 1;\n      rowStart += _rowNode.nodeSize;\n    }\n  }\n  return null;\n}\nfunction goToNextCell(direction) {\n  return function (state, dispatch) {\n    if (!isInTable(state)) return false;\n    var cell = findNextCell(selectionCell(state), direction);\n    if (cell == null) return false;\n    if (dispatch) {\n      var $cell = state.doc.resolve(cell);\n      dispatch(state.tr.setSelection(prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.between($cell, moveCellForward($cell))).scrollIntoView());\n    }\n    return true;\n  };\n}\nfunction deleteTable(state, dispatch) {\n  var $pos = state.selection.$anchor;\n  for (var d = $pos.depth; d > 0; d--) {\n    var node = $pos.node(d);\n    if (node.type.spec.tableRole == \"table\") {\n      if (dispatch) dispatch(state.tr[\"delete\"]($pos.before(d), $pos.after(d)).scrollIntoView());\n      return true;\n    }\n  }\n  return false;\n}\nfunction deleteCellSelection(state, dispatch) {\n  var sel = state.selection;\n  if (!(sel instanceof CellSelection)) return false;\n  if (dispatch) {\n    var tr = state.tr;\n    var baseContent = tableNodeTypes(state.schema).cell.createAndFill().content;\n    sel.forEachCell(function (cell, pos) {\n      if (!cell.content.eq(baseContent)) tr.replace(tr.mapping.map(pos + 1), tr.mapping.map(pos + cell.nodeSize - 1), new prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Slice(baseContent, 0, 0));\n    });\n    if (tr.docChanged) dispatch(tr);\n  }\n  return true;\n}\n\n// src/copypaste.ts\n\n\nfunction pastedCells(slice) {\n  if (!slice.size) return null;\n  var content = slice.content,\n    openStart = slice.openStart,\n    openEnd = slice.openEnd;\n  while (content.childCount == 1 && (openStart > 0 && openEnd > 0 || content.child(0).type.spec.tableRole == \"table\")) {\n    openStart--;\n    openEnd--;\n    content = content.child(0).content;\n  }\n  var first = content.child(0);\n  var role = first.type.spec.tableRole;\n  var schema = first.type.schema,\n    rows = [];\n  if (role == \"row\") {\n    for (var i = 0; i < content.childCount; i++) {\n      var cells = content.child(i).content;\n      var left = i ? 0 : Math.max(0, openStart - 1);\n      var right = i < content.childCount - 1 ? 0 : Math.max(0, openEnd - 1);\n      if (left || right) cells = fitSlice(tableNodeTypes(schema).row, new prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Slice(cells, left, right)).content;\n      rows.push(cells);\n    }\n  } else if (role == \"cell\" || role == \"header_cell\") {\n    rows.push(openStart || openEnd ? fitSlice(tableNodeTypes(schema).row, new prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Slice(content, openStart, openEnd)).content : content);\n  } else {\n    return null;\n  }\n  return ensureRectangular(schema, rows);\n}\nfunction ensureRectangular(schema, rows) {\n  var widths = [];\n  for (var i = 0; i < rows.length; i++) {\n    var row = rows[i];\n    for (var j = row.childCount - 1; j >= 0; j--) {\n      var _row$child$attrs = row.child(j).attrs,\n        rowspan = _row$child$attrs.rowspan,\n        colspan = _row$child$attrs.colspan;\n      for (var r = i; r < i + rowspan; r++) widths[r] = (widths[r] || 0) + colspan;\n    }\n  }\n  var width = 0;\n  for (var _r = 0; _r < widths.length; _r++) width = Math.max(width, widths[_r]);\n  for (var _r2 = 0; _r2 < widths.length; _r2++) {\n    if (_r2 >= rows.length) rows.push(prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Fragment.empty);\n    if (widths[_r2] < width) {\n      var empty = tableNodeTypes(schema).cell.createAndFill();\n      var cells = [];\n      for (var _i11 = widths[_r2]; _i11 < width; _i11++) {\n        cells.push(empty);\n      }\n      rows[_r2] = rows[_r2].append(prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Fragment.from(cells));\n    }\n  }\n  return {\n    height: rows.length,\n    width: width,\n    rows: rows\n  };\n}\nfunction fitSlice(nodeType, slice) {\n  var node = nodeType.createAndFill();\n  var tr = new prosemirror_transform__WEBPACK_IMPORTED_MODULE_3__.Transform(node).replace(0, node.content.size, slice);\n  return tr.doc;\n}\nfunction clipCells(_ref9, newWidth, newHeight) {\n  var width = _ref9.width,\n    height = _ref9.height,\n    rows = _ref9.rows;\n  if (width != newWidth) {\n    var added = [];\n    var newRows = [];\n    for (var row = 0; row < rows.length; row++) {\n      var frag = rows[row],\n        cells = [];\n      for (var col = added[row] || 0, i = 0; col < newWidth; i++) {\n        var cell = frag.child(i % frag.childCount);\n        if (col + cell.attrs.colspan > newWidth) cell = cell.type.createChecked(removeColSpan(cell.attrs, cell.attrs.colspan, col + cell.attrs.colspan - newWidth), cell.content);\n        cells.push(cell);\n        col += cell.attrs.colspan;\n        for (var j = 1; j < cell.attrs.rowspan; j++) added[row + j] = (added[row + j] || 0) + cell.attrs.colspan;\n      }\n      newRows.push(prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Fragment.from(cells));\n    }\n    rows = newRows;\n    width = newWidth;\n  }\n  if (height != newHeight) {\n    var _newRows = [];\n    for (var _row2 = 0, _i12 = 0; _row2 < newHeight; _row2++, _i12++) {\n      var _cells = [],\n        source = rows[_i12 % height];\n      for (var _j3 = 0; _j3 < source.childCount; _j3++) {\n        var _cell4 = source.child(_j3);\n        if (_row2 + _cell4.attrs.rowspan > newHeight) _cell4 = _cell4.type.create(_objectSpread(_objectSpread({}, _cell4.attrs), {}, {\n          rowspan: Math.max(1, newHeight - _cell4.attrs.rowspan)\n        }), _cell4.content);\n        _cells.push(_cell4);\n      }\n      _newRows.push(prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Fragment.from(_cells));\n    }\n    rows = _newRows;\n    height = newHeight;\n  }\n  return {\n    width: width,\n    height: height,\n    rows: rows\n  };\n}\nfunction growTable(tr, map, table, start, width, height, mapFrom) {\n  var schema = tr.doc.type.schema;\n  var types = tableNodeTypes(schema);\n  var empty;\n  var emptyHead;\n  if (width > map.width) {\n    for (var row = 0, rowEnd = 0; row < map.height; row++) {\n      var rowNode = table.child(row);\n      rowEnd += rowNode.nodeSize;\n      var cells = [];\n      var add = void 0;\n      if (rowNode.lastChild == null || rowNode.lastChild.type == types.cell) add = empty || (empty = types.cell.createAndFill());else add = emptyHead || (emptyHead = types.header_cell.createAndFill());\n      for (var i = map.width; i < width; i++) cells.push(add);\n      tr.insert(tr.mapping.slice(mapFrom).map(rowEnd - 1 + start), cells);\n    }\n  }\n  if (height > map.height) {\n    var _cells2 = [];\n    for (var _i13 = 0, start2 = (map.height - 1) * map.width; _i13 < Math.max(map.width, width); _i13++) {\n      var header = _i13 >= map.width ? false : table.nodeAt(map.map[start2 + _i13]).type == types.header_cell;\n      _cells2.push(header ? emptyHead || (emptyHead = types.header_cell.createAndFill()) : empty || (empty = types.cell.createAndFill()));\n    }\n    var emptyRow = types.row.create(null, prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Fragment.from(_cells2)),\n      rows = [];\n    for (var _i14 = map.height; _i14 < height; _i14++) rows.push(emptyRow);\n    tr.insert(tr.mapping.slice(mapFrom).map(start + table.nodeSize - 2), rows);\n  }\n  return !!(empty || emptyHead);\n}\nfunction isolateHorizontal(tr, map, table, start, left, right, top, mapFrom) {\n  if (top == 0 || top == map.height) return false;\n  var found = false;\n  for (var col = left; col < right; col++) {\n    var index = top * map.width + col,\n      pos = map.map[index];\n    if (map.map[index - map.width] == pos) {\n      found = true;\n      var cell = table.nodeAt(pos);\n      var _map$findCell = map.findCell(pos),\n        cellTop = _map$findCell.top,\n        cellLeft = _map$findCell.left;\n      tr.setNodeMarkup(tr.mapping.slice(mapFrom).map(pos + start), null, _objectSpread(_objectSpread({}, cell.attrs), {}, {\n        rowspan: top - cellTop\n      }));\n      tr.insert(tr.mapping.slice(mapFrom).map(map.positionAt(top, cellLeft, table)), cell.type.createAndFill(_objectSpread(_objectSpread({}, cell.attrs), {}, {\n        rowspan: cellTop + cell.attrs.rowspan - top\n      })));\n      col += cell.attrs.colspan - 1;\n    }\n  }\n  return found;\n}\nfunction isolateVertical(tr, map, table, start, top, bottom, left, mapFrom) {\n  if (left == 0 || left == map.width) return false;\n  var found = false;\n  for (var row = top; row < bottom; row++) {\n    var index = row * map.width + left,\n      pos = map.map[index];\n    if (map.map[index - 1] == pos) {\n      found = true;\n      var cell = table.nodeAt(pos);\n      var cellLeft = map.colCount(pos);\n      var updatePos = tr.mapping.slice(mapFrom).map(pos + start);\n      tr.setNodeMarkup(updatePos, null, removeColSpan(cell.attrs, left - cellLeft, cell.attrs.colspan - (left - cellLeft)));\n      tr.insert(updatePos + cell.nodeSize, cell.type.createAndFill(removeColSpan(cell.attrs, 0, left - cellLeft)));\n      row += cell.attrs.rowspan - 1;\n    }\n  }\n  return found;\n}\nfunction insertCells(state, dispatch, tableStart, rect, cells) {\n  var table = tableStart ? state.doc.nodeAt(tableStart - 1) : state.doc;\n  if (!table) {\n    throw new Error(\"No table found\");\n  }\n  var map = TableMap.get(table);\n  var top = rect.top,\n    left = rect.left;\n  var right = left + cells.width,\n    bottom = top + cells.height;\n  var tr = state.tr;\n  var mapFrom = 0;\n  function recomp() {\n    table = tableStart ? tr.doc.nodeAt(tableStart - 1) : tr.doc;\n    if (!table) {\n      throw new Error(\"No table found\");\n    }\n    map = TableMap.get(table);\n    mapFrom = tr.mapping.maps.length;\n  }\n  if (growTable(tr, map, table, tableStart, right, bottom, mapFrom)) recomp();\n  if (isolateHorizontal(tr, map, table, tableStart, left, right, top, mapFrom)) recomp();\n  if (isolateHorizontal(tr, map, table, tableStart, left, right, bottom, mapFrom)) recomp();\n  if (isolateVertical(tr, map, table, tableStart, top, bottom, left, mapFrom)) recomp();\n  if (isolateVertical(tr, map, table, tableStart, top, bottom, right, mapFrom)) recomp();\n  for (var row = top; row < bottom; row++) {\n    var from = map.positionAt(row, left, table),\n      to = map.positionAt(row, right, table);\n    tr.replace(tr.mapping.slice(mapFrom).map(from + tableStart), tr.mapping.slice(mapFrom).map(to + tableStart), new prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Slice(cells.rows[row - top], 0, 0));\n  }\n  recomp();\n  tr.setSelection(new CellSelection(tr.doc.resolve(tableStart + map.positionAt(top, left, table)), tr.doc.resolve(tableStart + map.positionAt(bottom - 1, right - 1, table))));\n  dispatch(tr);\n}\n\n// src/input.ts\nvar handleKeyDown = (0,prosemirror_keymap__WEBPACK_IMPORTED_MODULE_4__.keydownHandler)({\n  ArrowLeft: arrow(\"horiz\", -1),\n  ArrowRight: arrow(\"horiz\", 1),\n  ArrowUp: arrow(\"vert\", -1),\n  ArrowDown: arrow(\"vert\", 1),\n  \"Shift-ArrowLeft\": shiftArrow(\"horiz\", -1),\n  \"Shift-ArrowRight\": shiftArrow(\"horiz\", 1),\n  \"Shift-ArrowUp\": shiftArrow(\"vert\", -1),\n  \"Shift-ArrowDown\": shiftArrow(\"vert\", 1),\n  Backspace: deleteCellSelection,\n  \"Mod-Backspace\": deleteCellSelection,\n  Delete: deleteCellSelection,\n  \"Mod-Delete\": deleteCellSelection\n});\nfunction maybeSetSelection(state, dispatch, selection) {\n  if (selection.eq(state.selection)) return false;\n  if (dispatch) dispatch(state.tr.setSelection(selection).scrollIntoView());\n  return true;\n}\nfunction arrow(axis, dir) {\n  return function (state, dispatch, view) {\n    if (!view) return false;\n    var sel = state.selection;\n    if (sel instanceof CellSelection) {\n      return maybeSetSelection(state, dispatch, prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Selection.near(sel.$headCell, dir));\n    }\n    if (axis != \"horiz\" && !sel.empty) return false;\n    var end = atEndOfCell(view, axis, dir);\n    if (end == null) return false;\n    if (axis == \"horiz\") {\n      return maybeSetSelection(state, dispatch, prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Selection.near(state.doc.resolve(sel.head + dir), dir));\n    } else {\n      var $cell = state.doc.resolve(end);\n      var $next = nextCell($cell, axis, dir);\n      var newSel;\n      if ($next) newSel = prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Selection.near($next, 1);else if (dir < 0) newSel = prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Selection.near(state.doc.resolve($cell.before(-1)), -1);else newSel = prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Selection.near(state.doc.resolve($cell.after(-1)), 1);\n      return maybeSetSelection(state, dispatch, newSel);\n    }\n  };\n}\nfunction shiftArrow(axis, dir) {\n  return function (state, dispatch, view) {\n    if (!view) return false;\n    var sel = state.selection;\n    var cellSel;\n    if (sel instanceof CellSelection) {\n      cellSel = sel;\n    } else {\n      var end = atEndOfCell(view, axis, dir);\n      if (end == null) return false;\n      cellSel = new CellSelection(state.doc.resolve(end));\n    }\n    var $head = nextCell(cellSel.$headCell, axis, dir);\n    if (!$head) return false;\n    return maybeSetSelection(state, dispatch, new CellSelection(cellSel.$anchorCell, $head));\n  };\n}\nfunction handleTripleClick(view, pos) {\n  var doc = view.state.doc,\n    $cell = cellAround(doc.resolve(pos));\n  if (!$cell) return false;\n  view.dispatch(view.state.tr.setSelection(new CellSelection($cell)));\n  return true;\n}\nfunction handlePaste(view, _, slice) {\n  if (!isInTable(view.state)) return false;\n  var cells = pastedCells(slice);\n  var sel = view.state.selection;\n  if (sel instanceof CellSelection) {\n    if (!cells) cells = {\n      width: 1,\n      height: 1,\n      rows: [prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Fragment.from(fitSlice(tableNodeTypes(view.state.schema).cell, slice))]\n    };\n    var table = sel.$anchorCell.node(-1);\n    var start = sel.$anchorCell.start(-1);\n    var rect = TableMap.get(table).rectBetween(sel.$anchorCell.pos - start, sel.$headCell.pos - start);\n    cells = clipCells(cells, rect.right - rect.left, rect.bottom - rect.top);\n    insertCells(view.state, view.dispatch, start, rect, cells);\n    return true;\n  } else if (cells) {\n    var $cell = selectionCell(view.state);\n    var _start = $cell.start(-1);\n    insertCells(view.state, view.dispatch, _start, TableMap.get($cell.node(-1)).findCell($cell.pos - _start), cells);\n    return true;\n  } else {\n    return false;\n  }\n}\nfunction handleMouseDown(view, startEvent) {\n  var _a;\n  if (startEvent.ctrlKey || startEvent.metaKey) return;\n  var startDOMCell = domInCell(view, startEvent.target);\n  var $anchor;\n  if (startEvent.shiftKey && view.state.selection instanceof CellSelection) {\n    setCellSelection(view.state.selection.$anchorCell, startEvent);\n    startEvent.preventDefault();\n  } else if (startEvent.shiftKey && startDOMCell && ($anchor = cellAround(view.state.selection.$anchor)) != null && ((_a = cellUnderMouse(view, startEvent)) == null ? void 0 : _a.pos) != $anchor.pos) {\n    setCellSelection($anchor, startEvent);\n    startEvent.preventDefault();\n  } else if (!startDOMCell) {\n    return;\n  }\n  function setCellSelection($anchor2, event) {\n    var $head = cellUnderMouse(view, event);\n    var starting = tableEditingKey.getState(view.state) == null;\n    if (!$head || !inSameTable($anchor2, $head)) {\n      if (starting) $head = $anchor2;else return;\n    }\n    var selection = new CellSelection($anchor2, $head);\n    if (starting || !view.state.selection.eq(selection)) {\n      var tr = view.state.tr.setSelection(selection);\n      if (starting) tr.setMeta(tableEditingKey, $anchor2.pos);\n      view.dispatch(tr);\n    }\n  }\n  function stop() {\n    view.root.removeEventListener(\"mouseup\", stop);\n    view.root.removeEventListener(\"dragstart\", stop);\n    view.root.removeEventListener(\"mousemove\", move);\n    if (tableEditingKey.getState(view.state) != null) view.dispatch(view.state.tr.setMeta(tableEditingKey, -1));\n  }\n  function move(_event) {\n    var event = _event;\n    var anchor = tableEditingKey.getState(view.state);\n    var $anchor2;\n    if (anchor != null) {\n      $anchor2 = view.state.doc.resolve(anchor);\n    } else if (domInCell(view, event.target) != startDOMCell) {\n      $anchor2 = cellUnderMouse(view, startEvent);\n      if (!$anchor2) return stop();\n    }\n    if ($anchor2) setCellSelection($anchor2, event);\n  }\n  view.root.addEventListener(\"mouseup\", stop);\n  view.root.addEventListener(\"dragstart\", stop);\n  view.root.addEventListener(\"mousemove\", move);\n}\nfunction atEndOfCell(view, axis, dir) {\n  if (!(view.state.selection instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection)) return null;\n  var $head = view.state.selection.$head;\n  for (var d = $head.depth - 1; d >= 0; d--) {\n    var parent = $head.node(d),\n      index = dir < 0 ? $head.index(d) : $head.indexAfter(d);\n    if (index != (dir < 0 ? 0 : parent.childCount)) return null;\n    if (parent.type.spec.tableRole == \"cell\" || parent.type.spec.tableRole == \"header_cell\") {\n      var cellPos = $head.before(d);\n      var dirStr = axis == \"vert\" ? dir > 0 ? \"down\" : \"up\" : dir > 0 ? \"right\" : \"left\";\n      return view.endOfTextblock(dirStr) ? cellPos : null;\n    }\n  }\n  return null;\n}\nfunction domInCell(view, dom) {\n  for (; dom && dom != view.dom; dom = dom.parentNode) {\n    if (dom.nodeName == \"TD\" || dom.nodeName == \"TH\") {\n      return dom;\n    }\n  }\n  return null;\n}\nfunction cellUnderMouse(view, event) {\n  var mousePos = view.posAtCoords({\n    left: event.clientX,\n    top: event.clientY\n  });\n  if (!mousePos) return null;\n  return mousePos ? cellAround(view.state.doc.resolve(mousePos.pos)) : null;\n}\n\n// src/columnresizing.ts\n\n\n\n// src/tableview.ts\nvar TableView = /*#__PURE__*/function () {\n  function TableView(node, defaultCellMinWidth) {\n    _classCallCheck(this, TableView);\n    this.node = node;\n    this.defaultCellMinWidth = defaultCellMinWidth;\n    this.dom = document.createElement(\"div\");\n    this.dom.className = \"tableWrapper\";\n    this.table = this.dom.appendChild(document.createElement(\"table\"));\n    this.table.style.setProperty(\"--default-cell-min-width\", \"\".concat(defaultCellMinWidth, \"px\"));\n    this.colgroup = this.table.appendChild(document.createElement(\"colgroup\"));\n    updateColumnsOnResize(node, this.colgroup, this.table, defaultCellMinWidth);\n    this.contentDOM = this.table.appendChild(document.createElement(\"tbody\"));\n  }\n  return _createClass(TableView, [{\n    key: \"update\",\n    value: function update(node) {\n      if (node.type != this.node.type) return false;\n      this.node = node;\n      updateColumnsOnResize(node, this.colgroup, this.table, this.defaultCellMinWidth);\n      return true;\n    }\n  }, {\n    key: \"ignoreMutation\",\n    value: function ignoreMutation(record) {\n      return record.type == \"attributes\" && (record.target == this.table || this.colgroup.contains(record.target));\n    }\n  }]);\n}();\nfunction updateColumnsOnResize(node, colgroup, table, defaultCellMinWidth, overrideCol, overrideValue) {\n  var _a;\n  var totalWidth = 0;\n  var fixedWidth = true;\n  var nextDOM = colgroup.firstChild;\n  var row = node.firstChild;\n  if (!row) return;\n  for (var i = 0, col = 0; i < row.childCount; i++) {\n    var _row$child$attrs2 = row.child(i).attrs,\n      colspan = _row$child$attrs2.colspan,\n      colwidth = _row$child$attrs2.colwidth;\n    for (var j = 0; j < colspan; j++, col++) {\n      var hasWidth = overrideCol == col ? overrideValue : colwidth && colwidth[j];\n      var cssWidth = hasWidth ? hasWidth + \"px\" : \"\";\n      totalWidth += hasWidth || defaultCellMinWidth;\n      if (!hasWidth) fixedWidth = false;\n      if (!nextDOM) {\n        var col2 = document.createElement(\"col\");\n        col2.style.width = cssWidth;\n        colgroup.appendChild(col2);\n      } else {\n        if (nextDOM.style.width != cssWidth) {\n          nextDOM.style.width = cssWidth;\n        }\n        nextDOM = nextDOM.nextSibling;\n      }\n    }\n  }\n  while (nextDOM) {\n    var after = nextDOM.nextSibling;\n    (_a = nextDOM.parentNode) == null ? void 0 : _a.removeChild(nextDOM);\n    nextDOM = after;\n  }\n  if (fixedWidth) {\n    table.style.width = totalWidth + \"px\";\n    table.style.minWidth = \"\";\n  } else {\n    table.style.width = \"\";\n    table.style.minWidth = totalWidth + \"px\";\n  }\n}\n\n// src/columnresizing.ts\nvar columnResizingPluginKey = new prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey(\"tableColumnResizing\");\nfunction columnResizing() {\n  var _ref10 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    _ref10$handleWidth = _ref10.handleWidth,\n    handleWidth = _ref10$handleWidth === void 0 ? 5 : _ref10$handleWidth,\n    _ref10$cellMinWidth = _ref10.cellMinWidth,\n    cellMinWidth = _ref10$cellMinWidth === void 0 ? 25 : _ref10$cellMinWidth,\n    _ref10$defaultCellMin = _ref10.defaultCellMinWidth,\n    defaultCellMinWidth = _ref10$defaultCellMin === void 0 ? 100 : _ref10$defaultCellMin,\n    _ref10$View = _ref10.View,\n    View = _ref10$View === void 0 ? TableView : _ref10$View,\n    _ref10$lastColumnResi = _ref10.lastColumnResizable,\n    lastColumnResizable = _ref10$lastColumnResi === void 0 ? true : _ref10$lastColumnResi;\n  var plugin = new prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n    key: columnResizingPluginKey,\n    state: {\n      init: function init(_, state) {\n        var _a, _b;\n        var nodeViews = (_b = (_a = plugin.spec) == null ? void 0 : _a.props) == null ? void 0 : _b.nodeViews;\n        var tableName = tableNodeTypes(state.schema).table.name;\n        if (View && nodeViews) {\n          nodeViews[tableName] = function (node, view) {\n            return new View(node, defaultCellMinWidth, view);\n          };\n        }\n        return new ResizeState(-1, false);\n      },\n      apply: function apply(tr, prev) {\n        return prev.apply(tr);\n      }\n    },\n    props: {\n      attributes: function attributes(state) {\n        var pluginState = columnResizingPluginKey.getState(state);\n        return pluginState && pluginState.activeHandle > -1 ? {\n          \"class\": \"resize-cursor\"\n        } : {};\n      },\n      handleDOMEvents: {\n        mousemove: function mousemove(view, event) {\n          handleMouseMove(view, event, handleWidth, lastColumnResizable);\n        },\n        mouseleave: function mouseleave(view) {\n          handleMouseLeave(view);\n        },\n        mousedown: function mousedown(view, event) {\n          handleMouseDown2(view, event, cellMinWidth, defaultCellMinWidth);\n        }\n      },\n      decorations: function decorations(state) {\n        var pluginState = columnResizingPluginKey.getState(state);\n        if (pluginState && pluginState.activeHandle > -1) {\n          return handleDecorations(state, pluginState.activeHandle);\n        }\n      },\n      nodeViews: {}\n    }\n  });\n  return plugin;\n}\nvar ResizeState = /*#__PURE__*/function () {\n  function _ResizeState(activeHandle, dragging) {\n    _classCallCheck(this, _ResizeState);\n    this.activeHandle = activeHandle;\n    this.dragging = dragging;\n  }\n  return _createClass(_ResizeState, [{\n    key: \"apply\",\n    value: function apply(tr) {\n      var state = this;\n      var action = tr.getMeta(columnResizingPluginKey);\n      if (action && action.setHandle != null) return new _ResizeState(action.setHandle, false);\n      if (action && action.setDragging !== void 0) return new _ResizeState(state.activeHandle, action.setDragging);\n      if (state.activeHandle > -1 && tr.docChanged) {\n        var handle = tr.mapping.map(state.activeHandle, -1);\n        if (!pointsAtCell(tr.doc.resolve(handle))) {\n          handle = -1;\n        }\n        return new _ResizeState(handle, state.dragging);\n      }\n      return state;\n    }\n  }]);\n}();\nfunction handleMouseMove(view, event, handleWidth, lastColumnResizable) {\n  if (!view.editable) return;\n  var pluginState = columnResizingPluginKey.getState(view.state);\n  if (!pluginState) return;\n  if (!pluginState.dragging) {\n    var target = domCellAround(event.target);\n    var cell = -1;\n    if (target) {\n      var _target$getBoundingCl = target.getBoundingClientRect(),\n        left = _target$getBoundingCl.left,\n        right = _target$getBoundingCl.right;\n      if (event.clientX - left <= handleWidth) cell = edgeCell(view, event, \"left\", handleWidth);else if (right - event.clientX <= handleWidth) cell = edgeCell(view, event, \"right\", handleWidth);\n    }\n    if (cell != pluginState.activeHandle) {\n      if (!lastColumnResizable && cell !== -1) {\n        var $cell = view.state.doc.resolve(cell);\n        var table = $cell.node(-1);\n        var map = TableMap.get(table);\n        var tableStart = $cell.start(-1);\n        var col = map.colCount($cell.pos - tableStart) + $cell.nodeAfter.attrs.colspan - 1;\n        if (col == map.width - 1) {\n          return;\n        }\n      }\n      updateHandle(view, cell);\n    }\n  }\n}\nfunction handleMouseLeave(view) {\n  if (!view.editable) return;\n  var pluginState = columnResizingPluginKey.getState(view.state);\n  if (pluginState && pluginState.activeHandle > -1 && !pluginState.dragging) updateHandle(view, -1);\n}\nfunction handleMouseDown2(view, event, cellMinWidth, defaultCellMinWidth) {\n  var _a;\n  if (!view.editable) return false;\n  var win = (_a = view.dom.ownerDocument.defaultView) != null ? _a : window;\n  var pluginState = columnResizingPluginKey.getState(view.state);\n  if (!pluginState || pluginState.activeHandle == -1 || pluginState.dragging) return false;\n  var cell = view.state.doc.nodeAt(pluginState.activeHandle);\n  var width = currentColWidth(view, pluginState.activeHandle, cell.attrs);\n  view.dispatch(view.state.tr.setMeta(columnResizingPluginKey, {\n    setDragging: {\n      startX: event.clientX,\n      startWidth: width\n    }\n  }));\n  function finish(event2) {\n    win.removeEventListener(\"mouseup\", finish);\n    win.removeEventListener(\"mousemove\", move);\n    var pluginState2 = columnResizingPluginKey.getState(view.state);\n    if (pluginState2 == null ? void 0 : pluginState2.dragging) {\n      updateColumnWidth(view, pluginState2.activeHandle, draggedWidth(pluginState2.dragging, event2, cellMinWidth));\n      view.dispatch(view.state.tr.setMeta(columnResizingPluginKey, {\n        setDragging: null\n      }));\n    }\n  }\n  function move(event2) {\n    if (!event2.which) return finish(event2);\n    var pluginState2 = columnResizingPluginKey.getState(view.state);\n    if (!pluginState2) return;\n    if (pluginState2.dragging) {\n      var dragged = draggedWidth(pluginState2.dragging, event2, cellMinWidth);\n      displayColumnWidth(view, pluginState2.activeHandle, dragged, defaultCellMinWidth);\n    }\n  }\n  displayColumnWidth(view, pluginState.activeHandle, width, defaultCellMinWidth);\n  win.addEventListener(\"mouseup\", finish);\n  win.addEventListener(\"mousemove\", move);\n  event.preventDefault();\n  return true;\n}\nfunction currentColWidth(view, cellPos, _ref11) {\n  var colspan = _ref11.colspan,\n    colwidth = _ref11.colwidth;\n  var width = colwidth && colwidth[colwidth.length - 1];\n  if (width) return width;\n  var dom = view.domAtPos(cellPos);\n  var node = dom.node.childNodes[dom.offset];\n  var domWidth = node.offsetWidth,\n    parts = colspan;\n  if (colwidth) {\n    for (var i = 0; i < colspan; i++) if (colwidth[i]) {\n      domWidth -= colwidth[i];\n      parts--;\n    }\n  }\n  return domWidth / parts;\n}\nfunction domCellAround(target) {\n  while (target && target.nodeName != \"TD\" && target.nodeName != \"TH\") target = target.classList && target.classList.contains(\"ProseMirror\") ? null : target.parentNode;\n  return target;\n}\nfunction edgeCell(view, event, side, handleWidth) {\n  var offset = side == \"right\" ? -handleWidth : handleWidth;\n  var found = view.posAtCoords({\n    left: event.clientX + offset,\n    top: event.clientY\n  });\n  if (!found) return -1;\n  var pos = found.pos;\n  var $cell = cellAround(view.state.doc.resolve(pos));\n  if (!$cell) return -1;\n  if (side == \"right\") return $cell.pos;\n  var map = TableMap.get($cell.node(-1)),\n    start = $cell.start(-1);\n  var index = map.map.indexOf($cell.pos - start);\n  return index % map.width == 0 ? -1 : start + map.map[index - 1];\n}\nfunction draggedWidth(dragging, event, resizeMinWidth) {\n  var offset = event.clientX - dragging.startX;\n  return Math.max(resizeMinWidth, dragging.startWidth + offset);\n}\nfunction updateHandle(view, value) {\n  view.dispatch(view.state.tr.setMeta(columnResizingPluginKey, {\n    setHandle: value\n  }));\n}\nfunction updateColumnWidth(view, cell, width) {\n  var $cell = view.state.doc.resolve(cell);\n  var table = $cell.node(-1),\n    map = TableMap.get(table),\n    start = $cell.start(-1);\n  var col = map.colCount($cell.pos - start) + $cell.nodeAfter.attrs.colspan - 1;\n  var tr = view.state.tr;\n  for (var row = 0; row < map.height; row++) {\n    var mapIndex = row * map.width + col;\n    if (row && map.map[mapIndex] == map.map[mapIndex - map.width]) continue;\n    var pos = map.map[mapIndex];\n    var attrs = table.nodeAt(pos).attrs;\n    var index = attrs.colspan == 1 ? 0 : col - map.colCount(pos);\n    if (attrs.colwidth && attrs.colwidth[index] == width) continue;\n    var colwidth = attrs.colwidth ? attrs.colwidth.slice() : zeroes(attrs.colspan);\n    colwidth[index] = width;\n    tr.setNodeMarkup(start + pos, null, _objectSpread(_objectSpread({}, attrs), {}, {\n      colwidth: colwidth\n    }));\n  }\n  if (tr.docChanged) view.dispatch(tr);\n}\nfunction displayColumnWidth(view, cell, width, defaultCellMinWidth) {\n  var $cell = view.state.doc.resolve(cell);\n  var table = $cell.node(-1),\n    start = $cell.start(-1);\n  var col = TableMap.get(table).colCount($cell.pos - start) + $cell.nodeAfter.attrs.colspan - 1;\n  var dom = view.domAtPos($cell.start(-1)).node;\n  while (dom && dom.nodeName != \"TABLE\") {\n    dom = dom.parentNode;\n  }\n  if (!dom) return;\n  updateColumnsOnResize(table, dom.firstChild, dom, defaultCellMinWidth, col, width);\n}\nfunction zeroes(n) {\n  return Array(n).fill(0);\n}\nfunction handleDecorations(state, cell) {\n  var _a;\n  var decorations = [];\n  var $cell = state.doc.resolve(cell);\n  var table = $cell.node(-1);\n  if (!table) {\n    return prosemirror_view__WEBPACK_IMPORTED_MODULE_2__.DecorationSet.empty;\n  }\n  var map = TableMap.get(table);\n  var start = $cell.start(-1);\n  var col = map.colCount($cell.pos - start) + $cell.nodeAfter.attrs.colspan - 1;\n  for (var row = 0; row < map.height; row++) {\n    var index = col + row * map.width;\n    if ((col == map.width - 1 || map.map[index] != map.map[index + 1]) && (row == 0 || map.map[index] != map.map[index - map.width])) {\n      var cellPos = map.map[index];\n      var pos = start + cellPos + table.nodeAt(cellPos).nodeSize - 1;\n      var dom = document.createElement(\"div\");\n      dom.className = \"column-resize-handle\";\n      if ((_a = columnResizingPluginKey.getState(state)) == null ? void 0 : _a.dragging) {\n        decorations.push(prosemirror_view__WEBPACK_IMPORTED_MODULE_2__.Decoration.node(start + cellPos, start + cellPos + table.nodeAt(cellPos).nodeSize, {\n          \"class\": \"column-resize-dragging\"\n        }));\n      }\n      decorations.push(prosemirror_view__WEBPACK_IMPORTED_MODULE_2__.Decoration.widget(pos, dom));\n    }\n  }\n  return prosemirror_view__WEBPACK_IMPORTED_MODULE_2__.DecorationSet.create(state.doc, decorations);\n}\n\n// src/index.ts\nfunction tableEditing() {\n  var _ref12 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    _ref12$allowTableNode = _ref12.allowTableNodeSelection,\n    allowTableNodeSelection = _ref12$allowTableNode === void 0 ? false : _ref12$allowTableNode;\n  return new prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n    key: tableEditingKey,\n    // This piece of state is used to remember when a mouse-drag\n    // cell-selection is happening, so that it can continue even as\n    // transactions (which might move its anchor cell) come in.\n    state: {\n      init: function init() {\n        return null;\n      },\n      apply: function apply(tr, cur) {\n        var set = tr.getMeta(tableEditingKey);\n        if (set != null) return set == -1 ? null : set;\n        if (cur == null || !tr.docChanged) return cur;\n        var _tr$mapping$mapResult = tr.mapping.mapResult(cur),\n          deleted = _tr$mapping$mapResult.deleted,\n          pos = _tr$mapping$mapResult.pos;\n        return deleted ? null : pos;\n      }\n    },\n    props: {\n      decorations: drawCellSelection,\n      handleDOMEvents: {\n        mousedown: handleMouseDown\n      },\n      createSelectionBetween: function createSelectionBetween(view) {\n        return tableEditingKey.getState(view.state) != null ? view.state.selection : null;\n      },\n      handleTripleClick: handleTripleClick,\n      handleKeyDown: handleKeyDown,\n      handlePaste: handlePaste\n    },\n    appendTransaction: function appendTransaction(_, oldState, state) {\n      return normalizeSelection(state, fixTables(state, oldState), allowTableNodeSelection);\n    }\n  });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/prosemirror-tables/dist/index.js\n");

/***/ })

};
;