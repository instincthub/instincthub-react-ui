"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/refractor";
exports.ids = ["vendor-chunks/refractor"];
exports.modules = {

/***/ "(ssr)/./node_modules/refractor/core.js":
/*!****************************************!*\
  !*** ./node_modules/refractor/core.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\n/* global window, self */\n\n// istanbul ignore next - Don't allow Prism to run on page load in browser or\n// to start messaging from workers.\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nvar ctx = (typeof globalThis === \"undefined\" ? \"undefined\" : _typeof(globalThis)) === 'object' ? globalThis : (typeof self === \"undefined\" ? \"undefined\" : _typeof(self)) === 'object' ? self :  false ? 0 : (typeof global === \"undefined\" ? \"undefined\" : _typeof(global)) === 'object' ? global : {};\nvar restore = capture();\nctx.Prism = {\n  manual: true,\n  disableWorkerMessageHandler: true\n};\n\n// Load all stuff in `prism.js` itself, except for `prism-file-highlight.js`.\n// The wrapped non-leaky grammars are loaded instead of Prism’s originals.\nvar h = __webpack_require__(/*! hastscript */ \"(ssr)/./node_modules/hastscript/index.js\");\nvar decode = __webpack_require__(/*! parse-entities */ \"(ssr)/./node_modules/parse-entities/index.js\");\nvar Prism = __webpack_require__(/*! prismjs/components/prism-core */ \"(ssr)/./node_modules/refractor/node_modules/prismjs/components/prism-core.js\");\nvar markup = __webpack_require__(/*! ./lang/markup */ \"(ssr)/./node_modules/refractor/lang/markup.js\");\nvar css = __webpack_require__(/*! ./lang/css */ \"(ssr)/./node_modules/refractor/lang/css.js\");\nvar clike = __webpack_require__(/*! ./lang/clike */ \"(ssr)/./node_modules/refractor/lang/clike.js\");\nvar js = __webpack_require__(/*! ./lang/javascript */ \"(ssr)/./node_modules/refractor/lang/javascript.js\");\nrestore();\nvar own = {}.hasOwnProperty;\n\n// Inherit.\nfunction Refractor() {}\nRefractor.prototype = Prism;\n\n// Construct.\nvar refract = new Refractor();\n\n// Expose.\nmodule.exports = refract;\n\n// Create.\nrefract.highlight = highlight;\nrefract.register = register;\nrefract.alias = alias;\nrefract.registered = registered;\nrefract.listLanguages = listLanguages;\n\n// Register bundled grammars.\nregister(markup);\nregister(css);\nregister(clike);\nregister(js);\nrefract.util.encode = encode;\nrefract.Token.stringify = stringify;\nfunction register(grammar) {\n  if (typeof grammar !== 'function' || !grammar.displayName) {\n    throw new Error('Expected `function` for `grammar`, got `' + grammar + '`');\n  }\n\n  // Do not duplicate registrations.\n  if (refract.languages[grammar.displayName] === undefined) {\n    grammar(refract);\n  }\n}\nfunction alias(name, alias) {\n  var languages = refract.languages;\n  var map = name;\n  var key;\n  var list;\n  var length;\n  var index;\n  if (alias) {\n    map = {};\n    map[name] = alias;\n  }\n  for (key in map) {\n    list = map[key];\n    list = typeof list === 'string' ? [list] : list;\n    length = list.length;\n    index = -1;\n    while (++index < length) {\n      languages[list[index]] = languages[key];\n    }\n  }\n}\nfunction highlight(value, name) {\n  var sup = Prism.highlight;\n  var grammar;\n  if (typeof value !== 'string') {\n    throw new Error('Expected `string` for `value`, got `' + value + '`');\n  }\n\n  // `name` is a grammar object.\n  if (refract.util.type(name) === 'Object') {\n    grammar = name;\n    name = null;\n  } else {\n    if (typeof name !== 'string') {\n      throw new Error('Expected `string` for `name`, got `' + name + '`');\n    }\n    if (own.call(refract.languages, name)) {\n      grammar = refract.languages[name];\n    } else {\n      throw new Error('Unknown language: `' + name + '` is not registered');\n    }\n  }\n  return sup.call(this, value, grammar, name);\n}\nfunction registered(language) {\n  if (typeof language !== 'string') {\n    throw new Error('Expected `string` for `language`, got `' + language + '`');\n  }\n  return own.call(refract.languages, language);\n}\nfunction listLanguages() {\n  var languages = refract.languages;\n  var list = [];\n  var language;\n  for (language in languages) {\n    if (own.call(languages, language) && _typeof(languages[language]) === 'object') {\n      list.push(language);\n    }\n  }\n  return list;\n}\nfunction stringify(value, language, parent) {\n  var env;\n  if (typeof value === 'string') {\n    return {\n      type: 'text',\n      value: value\n    };\n  }\n  if (refract.util.type(value) === 'Array') {\n    return stringifyAll(value, language);\n  }\n  env = {\n    type: value.type,\n    content: refract.Token.stringify(value.content, language, parent),\n    tag: 'span',\n    classes: ['token', value.type],\n    attributes: {},\n    language: language,\n    parent: parent\n  };\n  if (value.alias) {\n    env.classes = env.classes.concat(value.alias);\n  }\n  refract.hooks.run('wrap', env);\n  return h(env.tag + '.' + env.classes.join('.'), attributes(env.attributes), env.content);\n}\nfunction stringifyAll(values, language) {\n  var result = [];\n  var length = values.length;\n  var index = -1;\n  var value;\n  while (++index < length) {\n    value = values[index];\n    if (value !== '' && value !== null && value !== undefined) {\n      result.push(value);\n    }\n  }\n  index = -1;\n  length = result.length;\n  while (++index < length) {\n    value = result[index];\n    result[index] = refract.Token.stringify(value, language, result);\n  }\n  return result;\n}\nfunction encode(tokens) {\n  return tokens;\n}\nfunction attributes(attrs) {\n  var key;\n  for (key in attrs) {\n    attrs[key] = decode(attrs[key]);\n  }\n  return attrs;\n}\nfunction capture() {\n  var defined = ('Prism' in ctx);\n  /* istanbul ignore next */\n  var current = defined ? ctx.Prism : undefined;\n  return restore;\n  function restore() {\n    /* istanbul ignore else - Clean leaks after Prism. */\n    if (defined) {\n      ctx.Prism = current;\n    } else {\n      delete ctx.Prism;\n    }\n    defined = undefined;\n    current = undefined;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/core.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/index.js":
/*!*****************************************!*\
  !*** ./node_modules/refractor/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar refractor = __webpack_require__(/*! ./core.js */ \"(ssr)/./node_modules/refractor/core.js\");\nmodule.exports = refractor;\nrefractor.register(__webpack_require__(/*! ./lang/abap.js */ \"(ssr)/./node_modules/refractor/lang/abap.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/abnf.js */ \"(ssr)/./node_modules/refractor/lang/abnf.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/actionscript.js */ \"(ssr)/./node_modules/refractor/lang/actionscript.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/ada.js */ \"(ssr)/./node_modules/refractor/lang/ada.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/agda.js */ \"(ssr)/./node_modules/refractor/lang/agda.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/al.js */ \"(ssr)/./node_modules/refractor/lang/al.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/antlr4.js */ \"(ssr)/./node_modules/refractor/lang/antlr4.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/apacheconf.js */ \"(ssr)/./node_modules/refractor/lang/apacheconf.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/apex.js */ \"(ssr)/./node_modules/refractor/lang/apex.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/apl.js */ \"(ssr)/./node_modules/refractor/lang/apl.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/applescript.js */ \"(ssr)/./node_modules/refractor/lang/applescript.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/aql.js */ \"(ssr)/./node_modules/refractor/lang/aql.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/arduino.js */ \"(ssr)/./node_modules/refractor/lang/arduino.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/arff.js */ \"(ssr)/./node_modules/refractor/lang/arff.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/asciidoc.js */ \"(ssr)/./node_modules/refractor/lang/asciidoc.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/asm6502.js */ \"(ssr)/./node_modules/refractor/lang/asm6502.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/asmatmel.js */ \"(ssr)/./node_modules/refractor/lang/asmatmel.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/aspnet.js */ \"(ssr)/./node_modules/refractor/lang/aspnet.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/autohotkey.js */ \"(ssr)/./node_modules/refractor/lang/autohotkey.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/autoit.js */ \"(ssr)/./node_modules/refractor/lang/autoit.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/avisynth.js */ \"(ssr)/./node_modules/refractor/lang/avisynth.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/avro-idl.js */ \"(ssr)/./node_modules/refractor/lang/avro-idl.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/bash.js */ \"(ssr)/./node_modules/refractor/lang/bash.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/basic.js */ \"(ssr)/./node_modules/refractor/lang/basic.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/batch.js */ \"(ssr)/./node_modules/refractor/lang/batch.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/bbcode.js */ \"(ssr)/./node_modules/refractor/lang/bbcode.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/bicep.js */ \"(ssr)/./node_modules/refractor/lang/bicep.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/birb.js */ \"(ssr)/./node_modules/refractor/lang/birb.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/bison.js */ \"(ssr)/./node_modules/refractor/lang/bison.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/bnf.js */ \"(ssr)/./node_modules/refractor/lang/bnf.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/brainfuck.js */ \"(ssr)/./node_modules/refractor/lang/brainfuck.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/brightscript.js */ \"(ssr)/./node_modules/refractor/lang/brightscript.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/bro.js */ \"(ssr)/./node_modules/refractor/lang/bro.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/bsl.js */ \"(ssr)/./node_modules/refractor/lang/bsl.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/c.js */ \"(ssr)/./node_modules/refractor/lang/c.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/cfscript.js */ \"(ssr)/./node_modules/refractor/lang/cfscript.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/chaiscript.js */ \"(ssr)/./node_modules/refractor/lang/chaiscript.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/cil.js */ \"(ssr)/./node_modules/refractor/lang/cil.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/clojure.js */ \"(ssr)/./node_modules/refractor/lang/clojure.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/cmake.js */ \"(ssr)/./node_modules/refractor/lang/cmake.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/cobol.js */ \"(ssr)/./node_modules/refractor/lang/cobol.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/coffeescript.js */ \"(ssr)/./node_modules/refractor/lang/coffeescript.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/concurnas.js */ \"(ssr)/./node_modules/refractor/lang/concurnas.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/coq.js */ \"(ssr)/./node_modules/refractor/lang/coq.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/cpp.js */ \"(ssr)/./node_modules/refractor/lang/cpp.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/crystal.js */ \"(ssr)/./node_modules/refractor/lang/crystal.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/csharp.js */ \"(ssr)/./node_modules/refractor/lang/csharp.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/cshtml.js */ \"(ssr)/./node_modules/refractor/lang/cshtml.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/csp.js */ \"(ssr)/./node_modules/refractor/lang/csp.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/css-extras.js */ \"(ssr)/./node_modules/refractor/lang/css-extras.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/csv.js */ \"(ssr)/./node_modules/refractor/lang/csv.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/cypher.js */ \"(ssr)/./node_modules/refractor/lang/cypher.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/d.js */ \"(ssr)/./node_modules/refractor/lang/d.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/dart.js */ \"(ssr)/./node_modules/refractor/lang/dart.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/dataweave.js */ \"(ssr)/./node_modules/refractor/lang/dataweave.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/dax.js */ \"(ssr)/./node_modules/refractor/lang/dax.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/dhall.js */ \"(ssr)/./node_modules/refractor/lang/dhall.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/diff.js */ \"(ssr)/./node_modules/refractor/lang/diff.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/django.js */ \"(ssr)/./node_modules/refractor/lang/django.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/dns-zone-file.js */ \"(ssr)/./node_modules/refractor/lang/dns-zone-file.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/docker.js */ \"(ssr)/./node_modules/refractor/lang/docker.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/dot.js */ \"(ssr)/./node_modules/refractor/lang/dot.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/ebnf.js */ \"(ssr)/./node_modules/refractor/lang/ebnf.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/editorconfig.js */ \"(ssr)/./node_modules/refractor/lang/editorconfig.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/eiffel.js */ \"(ssr)/./node_modules/refractor/lang/eiffel.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/ejs.js */ \"(ssr)/./node_modules/refractor/lang/ejs.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/elixir.js */ \"(ssr)/./node_modules/refractor/lang/elixir.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/elm.js */ \"(ssr)/./node_modules/refractor/lang/elm.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/erb.js */ \"(ssr)/./node_modules/refractor/lang/erb.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/erlang.js */ \"(ssr)/./node_modules/refractor/lang/erlang.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/etlua.js */ \"(ssr)/./node_modules/refractor/lang/etlua.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/excel-formula.js */ \"(ssr)/./node_modules/refractor/lang/excel-formula.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/factor.js */ \"(ssr)/./node_modules/refractor/lang/factor.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/false.js */ \"(ssr)/./node_modules/refractor/lang/false.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/firestore-security-rules.js */ \"(ssr)/./node_modules/refractor/lang/firestore-security-rules.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/flow.js */ \"(ssr)/./node_modules/refractor/lang/flow.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/fortran.js */ \"(ssr)/./node_modules/refractor/lang/fortran.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/fsharp.js */ \"(ssr)/./node_modules/refractor/lang/fsharp.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/ftl.js */ \"(ssr)/./node_modules/refractor/lang/ftl.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/gap.js */ \"(ssr)/./node_modules/refractor/lang/gap.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/gcode.js */ \"(ssr)/./node_modules/refractor/lang/gcode.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/gdscript.js */ \"(ssr)/./node_modules/refractor/lang/gdscript.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/gedcom.js */ \"(ssr)/./node_modules/refractor/lang/gedcom.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/gherkin.js */ \"(ssr)/./node_modules/refractor/lang/gherkin.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/git.js */ \"(ssr)/./node_modules/refractor/lang/git.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/glsl.js */ \"(ssr)/./node_modules/refractor/lang/glsl.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/gml.js */ \"(ssr)/./node_modules/refractor/lang/gml.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/gn.js */ \"(ssr)/./node_modules/refractor/lang/gn.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/go-module.js */ \"(ssr)/./node_modules/refractor/lang/go-module.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/go.js */ \"(ssr)/./node_modules/refractor/lang/go.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/graphql.js */ \"(ssr)/./node_modules/refractor/lang/graphql.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/groovy.js */ \"(ssr)/./node_modules/refractor/lang/groovy.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/haml.js */ \"(ssr)/./node_modules/refractor/lang/haml.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/handlebars.js */ \"(ssr)/./node_modules/refractor/lang/handlebars.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/haskell.js */ \"(ssr)/./node_modules/refractor/lang/haskell.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/haxe.js */ \"(ssr)/./node_modules/refractor/lang/haxe.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/hcl.js */ \"(ssr)/./node_modules/refractor/lang/hcl.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/hlsl.js */ \"(ssr)/./node_modules/refractor/lang/hlsl.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/hoon.js */ \"(ssr)/./node_modules/refractor/lang/hoon.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/hpkp.js */ \"(ssr)/./node_modules/refractor/lang/hpkp.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/hsts.js */ \"(ssr)/./node_modules/refractor/lang/hsts.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/http.js */ \"(ssr)/./node_modules/refractor/lang/http.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/ichigojam.js */ \"(ssr)/./node_modules/refractor/lang/ichigojam.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/icon.js */ \"(ssr)/./node_modules/refractor/lang/icon.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/icu-message-format.js */ \"(ssr)/./node_modules/refractor/lang/icu-message-format.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/idris.js */ \"(ssr)/./node_modules/refractor/lang/idris.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/iecst.js */ \"(ssr)/./node_modules/refractor/lang/iecst.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/ignore.js */ \"(ssr)/./node_modules/refractor/lang/ignore.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/inform7.js */ \"(ssr)/./node_modules/refractor/lang/inform7.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/ini.js */ \"(ssr)/./node_modules/refractor/lang/ini.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/io.js */ \"(ssr)/./node_modules/refractor/lang/io.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/j.js */ \"(ssr)/./node_modules/refractor/lang/j.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/java.js */ \"(ssr)/./node_modules/refractor/lang/java.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/javadoc.js */ \"(ssr)/./node_modules/refractor/lang/javadoc.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/javadoclike.js */ \"(ssr)/./node_modules/refractor/lang/javadoclike.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/javastacktrace.js */ \"(ssr)/./node_modules/refractor/lang/javastacktrace.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/jexl.js */ \"(ssr)/./node_modules/refractor/lang/jexl.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/jolie.js */ \"(ssr)/./node_modules/refractor/lang/jolie.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/jq.js */ \"(ssr)/./node_modules/refractor/lang/jq.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/js-extras.js */ \"(ssr)/./node_modules/refractor/lang/js-extras.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/js-templates.js */ \"(ssr)/./node_modules/refractor/lang/js-templates.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/jsdoc.js */ \"(ssr)/./node_modules/refractor/lang/jsdoc.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/json.js */ \"(ssr)/./node_modules/refractor/lang/json.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/json5.js */ \"(ssr)/./node_modules/refractor/lang/json5.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/jsonp.js */ \"(ssr)/./node_modules/refractor/lang/jsonp.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/jsstacktrace.js */ \"(ssr)/./node_modules/refractor/lang/jsstacktrace.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/jsx.js */ \"(ssr)/./node_modules/refractor/lang/jsx.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/julia.js */ \"(ssr)/./node_modules/refractor/lang/julia.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/keepalived.js */ \"(ssr)/./node_modules/refractor/lang/keepalived.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/keyman.js */ \"(ssr)/./node_modules/refractor/lang/keyman.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/kotlin.js */ \"(ssr)/./node_modules/refractor/lang/kotlin.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/kumir.js */ \"(ssr)/./node_modules/refractor/lang/kumir.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/kusto.js */ \"(ssr)/./node_modules/refractor/lang/kusto.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/latex.js */ \"(ssr)/./node_modules/refractor/lang/latex.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/latte.js */ \"(ssr)/./node_modules/refractor/lang/latte.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/less.js */ \"(ssr)/./node_modules/refractor/lang/less.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/lilypond.js */ \"(ssr)/./node_modules/refractor/lang/lilypond.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/liquid.js */ \"(ssr)/./node_modules/refractor/lang/liquid.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/lisp.js */ \"(ssr)/./node_modules/refractor/lang/lisp.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/livescript.js */ \"(ssr)/./node_modules/refractor/lang/livescript.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/llvm.js */ \"(ssr)/./node_modules/refractor/lang/llvm.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/log.js */ \"(ssr)/./node_modules/refractor/lang/log.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/lolcode.js */ \"(ssr)/./node_modules/refractor/lang/lolcode.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/lua.js */ \"(ssr)/./node_modules/refractor/lang/lua.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/magma.js */ \"(ssr)/./node_modules/refractor/lang/magma.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/makefile.js */ \"(ssr)/./node_modules/refractor/lang/makefile.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/markdown.js */ \"(ssr)/./node_modules/refractor/lang/markdown.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/markup-templating.js */ \"(ssr)/./node_modules/refractor/lang/markup-templating.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/matlab.js */ \"(ssr)/./node_modules/refractor/lang/matlab.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/maxscript.js */ \"(ssr)/./node_modules/refractor/lang/maxscript.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/mel.js */ \"(ssr)/./node_modules/refractor/lang/mel.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/mermaid.js */ \"(ssr)/./node_modules/refractor/lang/mermaid.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/mizar.js */ \"(ssr)/./node_modules/refractor/lang/mizar.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/mongodb.js */ \"(ssr)/./node_modules/refractor/lang/mongodb.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/monkey.js */ \"(ssr)/./node_modules/refractor/lang/monkey.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/moonscript.js */ \"(ssr)/./node_modules/refractor/lang/moonscript.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/n1ql.js */ \"(ssr)/./node_modules/refractor/lang/n1ql.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/n4js.js */ \"(ssr)/./node_modules/refractor/lang/n4js.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/nand2tetris-hdl.js */ \"(ssr)/./node_modules/refractor/lang/nand2tetris-hdl.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/naniscript.js */ \"(ssr)/./node_modules/refractor/lang/naniscript.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/nasm.js */ \"(ssr)/./node_modules/refractor/lang/nasm.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/neon.js */ \"(ssr)/./node_modules/refractor/lang/neon.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/nevod.js */ \"(ssr)/./node_modules/refractor/lang/nevod.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/nginx.js */ \"(ssr)/./node_modules/refractor/lang/nginx.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/nim.js */ \"(ssr)/./node_modules/refractor/lang/nim.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/nix.js */ \"(ssr)/./node_modules/refractor/lang/nix.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/nsis.js */ \"(ssr)/./node_modules/refractor/lang/nsis.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/objectivec.js */ \"(ssr)/./node_modules/refractor/lang/objectivec.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/ocaml.js */ \"(ssr)/./node_modules/refractor/lang/ocaml.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/opencl.js */ \"(ssr)/./node_modules/refractor/lang/opencl.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/openqasm.js */ \"(ssr)/./node_modules/refractor/lang/openqasm.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/oz.js */ \"(ssr)/./node_modules/refractor/lang/oz.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/parigp.js */ \"(ssr)/./node_modules/refractor/lang/parigp.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/parser.js */ \"(ssr)/./node_modules/refractor/lang/parser.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/pascal.js */ \"(ssr)/./node_modules/refractor/lang/pascal.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/pascaligo.js */ \"(ssr)/./node_modules/refractor/lang/pascaligo.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/pcaxis.js */ \"(ssr)/./node_modules/refractor/lang/pcaxis.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/peoplecode.js */ \"(ssr)/./node_modules/refractor/lang/peoplecode.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/perl.js */ \"(ssr)/./node_modules/refractor/lang/perl.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/php-extras.js */ \"(ssr)/./node_modules/refractor/lang/php-extras.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/php.js */ \"(ssr)/./node_modules/refractor/lang/php.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/phpdoc.js */ \"(ssr)/./node_modules/refractor/lang/phpdoc.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/plsql.js */ \"(ssr)/./node_modules/refractor/lang/plsql.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/powerquery.js */ \"(ssr)/./node_modules/refractor/lang/powerquery.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/powershell.js */ \"(ssr)/./node_modules/refractor/lang/powershell.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/processing.js */ \"(ssr)/./node_modules/refractor/lang/processing.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/prolog.js */ \"(ssr)/./node_modules/refractor/lang/prolog.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/promql.js */ \"(ssr)/./node_modules/refractor/lang/promql.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/properties.js */ \"(ssr)/./node_modules/refractor/lang/properties.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/protobuf.js */ \"(ssr)/./node_modules/refractor/lang/protobuf.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/psl.js */ \"(ssr)/./node_modules/refractor/lang/psl.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/pug.js */ \"(ssr)/./node_modules/refractor/lang/pug.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/puppet.js */ \"(ssr)/./node_modules/refractor/lang/puppet.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/pure.js */ \"(ssr)/./node_modules/refractor/lang/pure.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/purebasic.js */ \"(ssr)/./node_modules/refractor/lang/purebasic.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/purescript.js */ \"(ssr)/./node_modules/refractor/lang/purescript.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/python.js */ \"(ssr)/./node_modules/refractor/lang/python.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/q.js */ \"(ssr)/./node_modules/refractor/lang/q.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/qml.js */ \"(ssr)/./node_modules/refractor/lang/qml.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/qore.js */ \"(ssr)/./node_modules/refractor/lang/qore.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/qsharp.js */ \"(ssr)/./node_modules/refractor/lang/qsharp.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/r.js */ \"(ssr)/./node_modules/refractor/lang/r.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/racket.js */ \"(ssr)/./node_modules/refractor/lang/racket.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/reason.js */ \"(ssr)/./node_modules/refractor/lang/reason.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/regex.js */ \"(ssr)/./node_modules/refractor/lang/regex.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/rego.js */ \"(ssr)/./node_modules/refractor/lang/rego.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/renpy.js */ \"(ssr)/./node_modules/refractor/lang/renpy.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/rest.js */ \"(ssr)/./node_modules/refractor/lang/rest.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/rip.js */ \"(ssr)/./node_modules/refractor/lang/rip.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/roboconf.js */ \"(ssr)/./node_modules/refractor/lang/roboconf.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/robotframework.js */ \"(ssr)/./node_modules/refractor/lang/robotframework.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/ruby.js */ \"(ssr)/./node_modules/refractor/lang/ruby.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/rust.js */ \"(ssr)/./node_modules/refractor/lang/rust.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/sas.js */ \"(ssr)/./node_modules/refractor/lang/sas.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/sass.js */ \"(ssr)/./node_modules/refractor/lang/sass.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/scala.js */ \"(ssr)/./node_modules/refractor/lang/scala.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/scheme.js */ \"(ssr)/./node_modules/refractor/lang/scheme.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/scss.js */ \"(ssr)/./node_modules/refractor/lang/scss.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/shell-session.js */ \"(ssr)/./node_modules/refractor/lang/shell-session.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/smali.js */ \"(ssr)/./node_modules/refractor/lang/smali.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/smalltalk.js */ \"(ssr)/./node_modules/refractor/lang/smalltalk.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/smarty.js */ \"(ssr)/./node_modules/refractor/lang/smarty.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/sml.js */ \"(ssr)/./node_modules/refractor/lang/sml.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/solidity.js */ \"(ssr)/./node_modules/refractor/lang/solidity.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/solution-file.js */ \"(ssr)/./node_modules/refractor/lang/solution-file.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/soy.js */ \"(ssr)/./node_modules/refractor/lang/soy.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/sparql.js */ \"(ssr)/./node_modules/refractor/lang/sparql.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/splunk-spl.js */ \"(ssr)/./node_modules/refractor/lang/splunk-spl.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/sqf.js */ \"(ssr)/./node_modules/refractor/lang/sqf.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/sql.js */ \"(ssr)/./node_modules/refractor/lang/sql.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/squirrel.js */ \"(ssr)/./node_modules/refractor/lang/squirrel.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/stan.js */ \"(ssr)/./node_modules/refractor/lang/stan.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/stylus.js */ \"(ssr)/./node_modules/refractor/lang/stylus.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/swift.js */ \"(ssr)/./node_modules/refractor/lang/swift.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/systemd.js */ \"(ssr)/./node_modules/refractor/lang/systemd.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/t4-cs.js */ \"(ssr)/./node_modules/refractor/lang/t4-cs.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/t4-templating.js */ \"(ssr)/./node_modules/refractor/lang/t4-templating.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/t4-vb.js */ \"(ssr)/./node_modules/refractor/lang/t4-vb.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/tap.js */ \"(ssr)/./node_modules/refractor/lang/tap.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/tcl.js */ \"(ssr)/./node_modules/refractor/lang/tcl.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/textile.js */ \"(ssr)/./node_modules/refractor/lang/textile.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/toml.js */ \"(ssr)/./node_modules/refractor/lang/toml.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/tremor.js */ \"(ssr)/./node_modules/refractor/lang/tremor.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/tsx.js */ \"(ssr)/./node_modules/refractor/lang/tsx.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/tt2.js */ \"(ssr)/./node_modules/refractor/lang/tt2.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/turtle.js */ \"(ssr)/./node_modules/refractor/lang/turtle.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/twig.js */ \"(ssr)/./node_modules/refractor/lang/twig.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/typescript.js */ \"(ssr)/./node_modules/refractor/lang/typescript.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/typoscript.js */ \"(ssr)/./node_modules/refractor/lang/typoscript.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/unrealscript.js */ \"(ssr)/./node_modules/refractor/lang/unrealscript.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/uorazor.js */ \"(ssr)/./node_modules/refractor/lang/uorazor.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/uri.js */ \"(ssr)/./node_modules/refractor/lang/uri.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/v.js */ \"(ssr)/./node_modules/refractor/lang/v.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/vala.js */ \"(ssr)/./node_modules/refractor/lang/vala.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/vbnet.js */ \"(ssr)/./node_modules/refractor/lang/vbnet.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/velocity.js */ \"(ssr)/./node_modules/refractor/lang/velocity.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/verilog.js */ \"(ssr)/./node_modules/refractor/lang/verilog.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/vhdl.js */ \"(ssr)/./node_modules/refractor/lang/vhdl.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/vim.js */ \"(ssr)/./node_modules/refractor/lang/vim.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/visual-basic.js */ \"(ssr)/./node_modules/refractor/lang/visual-basic.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/warpscript.js */ \"(ssr)/./node_modules/refractor/lang/warpscript.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/wasm.js */ \"(ssr)/./node_modules/refractor/lang/wasm.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/web-idl.js */ \"(ssr)/./node_modules/refractor/lang/web-idl.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/wiki.js */ \"(ssr)/./node_modules/refractor/lang/wiki.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/wolfram.js */ \"(ssr)/./node_modules/refractor/lang/wolfram.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/wren.js */ \"(ssr)/./node_modules/refractor/lang/wren.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/xeora.js */ \"(ssr)/./node_modules/refractor/lang/xeora.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/xml-doc.js */ \"(ssr)/./node_modules/refractor/lang/xml-doc.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/xojo.js */ \"(ssr)/./node_modules/refractor/lang/xojo.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/xquery.js */ \"(ssr)/./node_modules/refractor/lang/xquery.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/yaml.js */ \"(ssr)/./node_modules/refractor/lang/yaml.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/yang.js */ \"(ssr)/./node_modules/refractor/lang/yang.js\"));\nrefractor.register(__webpack_require__(/*! ./lang/zig.js */ \"(ssr)/./node_modules/refractor/lang/zig.js\"));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/abap.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/abap.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = abap;\nabap.displayName = 'abap';\nabap.aliases = [];\nfunction abap(Prism) {\n  Prism.languages.abap = {\n    comment: /^\\*.*/m,\n    string: /(`|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    'string-template': {\n      pattern: /([|}])(?:\\\\.|[^\\\\|{\\r\\n])*(?=[|{])/,\n      lookbehind: true,\n      alias: 'string'\n    },\n    /* End Of Line comments should not interfere with strings when the\n    quote character occurs within them. We assume a string being highlighted\n    inside an EOL comment is more acceptable than the opposite.\n    */\n    'eol-comment': {\n      pattern: /(^|\\s)\".*/m,\n      lookbehind: true,\n      alias: 'comment'\n    },\n    keyword: {\n      pattern: /(\\s|\\.|^)(?:SCIENTIFIC_WITH_LEADING_ZERO|SCALE_PRESERVING_SCIENTIFIC|RMC_COMMUNICATION_FAILURE|END-ENHANCEMENT-SECTION|MULTIPLY-CORRESPONDING|SUBTRACT-CORRESPONDING|VERIFICATION-MESSAGE|DIVIDE-CORRESPONDING|ENHANCEMENT-SECTION|CURRENCY_CONVERSION|RMC_SYSTEM_FAILURE|START-OF-SELECTION|MOVE-CORRESPONDING|RMC_INVALID_STATUS|CUSTOMER-FUNCTION|END-OF-DEFINITION|ENHANCEMENT-POINT|SYSTEM-EXCEPTIONS|ADD-CORRESPONDING|SCALE_PRESERVING|SELECTION-SCREEN|CURSOR-SELECTION|END-OF-SELECTION|LOAD-OF-PROGRAM|SCROLL-BOUNDARY|SELECTION-TABLE|EXCEPTION-TABLE|IMPLEMENTATIONS|PARAMETER-TABLE|RIGHT-JUSTIFIED|UNIT_CONVERSION|AUTHORITY-CHECK|LIST-PROCESSING|SIGN_AS_POSTFIX|COL_BACKGROUND|IMPLEMENTATION|INTERFACE-POOL|TRANSFORMATION|IDENTIFICATION|ENDENHANCEMENT|LINE-SELECTION|INITIALIZATION|LEFT-JUSTIFIED|SELECT-OPTIONS|SELECTION-SETS|COMMUNICATION|CORRESPONDING|DECIMAL_SHIFT|PRINT-CONTROL|VALUE-REQUEST|CHAIN-REQUEST|FUNCTION-POOL|FIELD-SYMBOLS|FUNCTIONALITY|INVERTED-DATE|SELECTION-SET|CLASS-METHODS|OUTPUT-LENGTH|CLASS-CODING|COL_NEGATIVE|ERRORMESSAGE|FIELD-GROUPS|HELP-REQUEST|NO-EXTENSION|NO-TOPOFPAGE|REDEFINITION|DISPLAY-MODE|ENDINTERFACE|EXIT-COMMAND|FIELD-SYMBOL|NO-SCROLLING|SHORTDUMP-ID|ACCESSPOLICY|CLASS-EVENTS|COL_POSITIVE|DECLARATIONS|ENHANCEMENTS|FILTER-TABLE|SWITCHSTATES|SYNTAX-CHECK|TRANSPORTING|ASYNCHRONOUS|SYNTAX-TRACE|TOKENIZATION|USER-COMMAND|WITH-HEADING|ABAP-SOURCE|BREAK-POINT|CHAIN-INPUT|COMPRESSION|FIXED-POINT|NEW-SECTION|NON-UNICODE|OCCURRENCES|RESPONSIBLE|SYSTEM-CALL|TRACE-TABLE|ABBREVIATED|CHAR-TO-HEX|END-OF-FILE|ENDFUNCTION|ENVIRONMENT|ASSOCIATION|COL_HEADING|EDITOR-CALL|END-OF-PAGE|ENGINEERING|IMPLEMENTED|INTENSIFIED|RADIOBUTTON|SYSTEM-EXIT|TOP-OF-PAGE|TRANSACTION|APPLICATION|CONCATENATE|DESTINATION|ENHANCEMENT|IMMEDIATELY|NO-GROUPING|PRECOMPILED|REPLACEMENT|TITLE-LINES|ACTIVATION|BYTE-ORDER|CLASS-POOL|CONNECTION|CONVERSION|DEFINITION|DEPARTMENT|EXPIRATION|INHERITING|MESSAGE-ID|NO-HEADING|PERFORMING|QUEUE-ONLY|RIGHTSPACE|SCIENTIFIC|STATUSINFO|STRUCTURES|SYNCPOINTS|WITH-TITLE|ATTRIBUTES|BOUNDARIES|CLASS-DATA|COL_NORMAL|DD\\/MM\\/YYYY|DESCENDING|INTERFACES|LINE-COUNT|MM\\/DD\\/YYYY|NON-UNIQUE|PRESERVING|SELECTIONS|STATEMENTS|SUBROUTINE|TRUNCATION|TYPE-POOLS|ARITHMETIC|BACKGROUND|ENDPROVIDE|EXCEPTIONS|IDENTIFIER|INDEX-LINE|OBLIGATORY|PARAMETERS|PERCENTAGE|PUSHBUTTON|RESOLUTION|COMPONENTS|DEALLOCATE|DISCONNECT|DUPLICATES|FIRST-LINE|HEAD-LINES|NO-DISPLAY|OCCURRENCE|RESPECTING|RETURNCODE|SUBMATCHES|TRACE-FILE|ASCENDING|BYPASSING|ENDMODULE|EXCEPTION|EXCLUDING|EXPORTING|INCREMENT|MATCHCODE|PARAMETER|PARTIALLY|PREFERRED|REFERENCE|REPLACING|RETURNING|SELECTION|SEPARATED|SPECIFIED|STATEMENT|TIMESTAMP|TYPE-POOL|ACCEPTING|APPENDAGE|ASSIGNING|COL_GROUP|COMPARING|CONSTANTS|DANGEROUS|IMPORTING|INSTANCES|LEFTSPACE|LOG-POINT|QUICKINFO|READ-ONLY|SCROLLING|SQLSCRIPT|STEP-LOOP|TOP-LINES|TRANSLATE|APPENDING|AUTHORITY|CHARACTER|COMPONENT|CONDITION|DIRECTORY|DUPLICATE|MESSAGING|RECEIVING|SUBSCREEN|ACCORDING|COL_TOTAL|END-LINES|ENDMETHOD|ENDSELECT|EXPANDING|EXTENSION|INCLUDING|INFOTYPES|INTERFACE|INTERVALS|LINE-SIZE|PF-STATUS|PROCEDURE|PROTECTED|REQUESTED|RESUMABLE|RIGHTPLUS|SAP-SPOOL|SECONDARY|STRUCTURE|SUBSTRING|TABLEVIEW|NUMOFCHAR|ADJACENT|ANALYSIS|ASSIGNED|BACKWARD|CHANNELS|CHECKBOX|CONTINUE|CRITICAL|DATAINFO|DD\\/MM\\/YY|DURATION|ENCODING|ENDCLASS|FUNCTION|LEFTPLUS|LINEFEED|MM\\/DD\\/YY|OVERFLOW|RECEIVED|SKIPPING|SORTABLE|STANDARD|SUBTRACT|SUPPRESS|TABSTRIP|TITLEBAR|TRUNCATE|UNASSIGN|WHENEVER|ANALYZER|COALESCE|COMMENTS|CONDENSE|DECIMALS|DEFERRED|ENDWHILE|EXPLICIT|KEYWORDS|MESSAGES|POSITION|PRIORITY|RECEIVER|RENAMING|TIMEZONE|TRAILING|ALLOCATE|CENTERED|CIRCULAR|CONTROLS|CURRENCY|DELETING|DESCRIBE|DISTANCE|ENDCATCH|EXPONENT|EXTENDED|GENERATE|IGNORING|INCLUDES|INTERNAL|MAJOR-ID|MODIFIER|NEW-LINE|OPTIONAL|PROPERTY|ROLLBACK|STARTING|SUPPLIED|ABSTRACT|CHANGING|CONTEXTS|CREATING|CUSTOMER|DATABASE|DAYLIGHT|DEFINING|DISTINCT|DIVISION|ENABLING|ENDCHAIN|ESCAPING|HARMLESS|IMPLICIT|INACTIVE|LANGUAGE|MINOR-ID|MULTIPLY|NEW-PAGE|NO-TITLE|POS_HIGH|SEPARATE|TEXTPOOL|TRANSFER|SELECTOR|DBMAXLEN|ITERATOR|ARCHIVE|BIT-XOR|BYTE-CO|COLLECT|COMMENT|CURRENT|DEFAULT|DISPLAY|ENDFORM|EXTRACT|LEADING|LISTBOX|LOCATOR|MEMBERS|METHODS|NESTING|POS_LOW|PROCESS|PROVIDE|RAISING|RESERVE|SECONDS|SUMMARY|VISIBLE|BETWEEN|BIT-AND|BYTE-CS|CLEANUP|COMPUTE|CONTROL|CONVERT|DATASET|ENDCASE|FORWARD|HEADERS|HOTSPOT|INCLUDE|INVERSE|KEEPING|NO-ZERO|OBJECTS|OVERLAY|PADDING|PATTERN|PROGRAM|REFRESH|SECTION|SUMMING|TESTING|VERSION|WINDOWS|WITHOUT|BIT-NOT|BYTE-CA|BYTE-NA|CASTING|CONTEXT|COUNTRY|DYNAMIC|ENABLED|ENDLOOP|EXECUTE|FRIENDS|HANDLER|HEADING|INITIAL|\\*-INPUT|LOGFILE|MAXIMUM|MINIMUM|NO-GAPS|NO-SIGN|PRAGMAS|PRIMARY|PRIVATE|REDUCED|REPLACE|REQUEST|RESULTS|UNICODE|WARNING|ALIASES|BYTE-CN|BYTE-NS|CALLING|COL_KEY|COLUMNS|CONNECT|ENDEXEC|ENTRIES|EXCLUDE|FILTERS|FURTHER|HELP-ID|LOGICAL|MAPPING|MESSAGE|NAMETAB|OPTIONS|PACKAGE|PERFORM|RECEIVE|STATICS|VARYING|BINDING|CHARLEN|GREATER|XSTRLEN|ACCEPT|APPEND|DETAIL|ELSEIF|ENDING|ENDTRY|FORMAT|FRAMES|GIVING|HASHED|HEADER|IMPORT|INSERT|MARGIN|MODULE|NATIVE|OBJECT|OFFSET|REMOTE|RESUME|SAVING|SIMPLE|SUBMIT|TABBED|TOKENS|UNIQUE|UNPACK|UPDATE|WINDOW|YELLOW|ACTUAL|ASPECT|CENTER|CURSOR|DELETE|DIALOG|DIVIDE|DURING|ERRORS|EVENTS|EXTEND|FILTER|HANDLE|HAVING|IGNORE|LITTLE|MEMORY|NO-GAP|OCCURS|OPTION|PERSON|PLACES|PUBLIC|REDUCE|REPORT|RESULT|SINGLE|SORTED|SWITCH|SYNTAX|TARGET|VALUES|WRITER|ASSERT|BLOCKS|BOUNDS|BUFFER|CHANGE|COLUMN|COMMIT|CONCAT|COPIES|CREATE|DDMMYY|DEFINE|ENDIAN|ESCAPE|EXPAND|KERNEL|LAYOUT|LEGACY|LEVELS|MMDDYY|NUMBER|OUTPUT|RANGES|READER|RETURN|SCREEN|SEARCH|SELECT|SHARED|SOURCE|STABLE|STATIC|SUBKEY|SUFFIX|TABLES|UNWIND|YYMMDD|ASSIGN|BACKUP|BEFORE|BINARY|BIT-OR|BLANKS|CLIENT|CODING|COMMON|DEMAND|DYNPRO|EXCEPT|EXISTS|EXPORT|FIELDS|GLOBAL|GROUPS|LENGTH|LOCALE|MEDIUM|METHOD|MODIFY|NESTED|OTHERS|REJECT|SCROLL|SUPPLY|SYMBOL|ENDFOR|STRLEN|ALIGN|BEGIN|BOUND|ENDAT|ENTRY|EVENT|FINAL|FLUSH|GRANT|INNER|SHORT|USING|WRITE|AFTER|BLACK|BLOCK|CLOCK|COLOR|COUNT|DUMMY|EMPTY|ENDDO|ENDON|GREEN|INDEX|INOUT|LEAVE|LEVEL|LINES|MODIF|ORDER|OUTER|RANGE|RESET|RETRY|RIGHT|SMART|SPLIT|STYLE|TABLE|THROW|UNDER|UNTIL|UPPER|UTF-8|WHERE|ALIAS|BLANK|CLEAR|CLOSE|EXACT|FETCH|FIRST|FOUND|GROUP|LLANG|LOCAL|OTHER|REGEX|SPOOL|TITLE|TYPES|VALID|WHILE|ALPHA|BOXED|CATCH|CHAIN|CHECK|CLASS|COVER|ENDIF|EQUIV|FIELD|FLOOR|FRAME|INPUT|LOWER|MATCH|NODES|PAGES|PRINT|RAISE|ROUND|SHIFT|SPACE|SPOTS|STAMP|STATE|TASKS|TIMES|TRMAC|ULINE|UNION|VALUE|WIDTH|EQUAL|LOG10|TRUNC|BLOB|CASE|CEIL|CLOB|COND|EXIT|FILE|GAPS|HOLD|INCL|INTO|KEEP|KEYS|LAST|LINE|LONG|LPAD|MAIL|MODE|OPEN|PINK|READ|ROWS|TEST|THEN|ZERO|AREA|BACK|BADI|BYTE|CAST|EDIT|EXEC|FAIL|FIND|FKEQ|FONT|FREE|GKEQ|HIDE|INIT|ITNO|LATE|LOOP|MAIN|MARK|MOVE|NEXT|NULL|RISK|ROLE|UNIT|WAIT|ZONE|BASE|CALL|CODE|DATA|DATE|FKGE|GKGE|HIGH|KIND|LEFT|LIST|MASK|MESH|NAME|NODE|PACK|PAGE|POOL|SEND|SIGN|SIZE|SOME|STOP|TASK|TEXT|TIME|USER|VARY|WITH|WORD|BLUE|CONV|COPY|DEEP|ELSE|FORM|FROM|HINT|ICON|JOIN|LIKE|LOAD|ONLY|PART|SCAN|SKIP|SORT|TYPE|UNIX|VIEW|WHEN|WORK|ACOS|ASIN|ATAN|COSH|EACH|FRAC|LESS|RTTI|SINH|SQRT|TANH|AVG|BIT|DIV|ISO|LET|OUT|PAD|SQL|ALL|CI_|CPI|END|LOB|LPI|MAX|MIN|NEW|OLE|RUN|SET|\\?TO|YES|ABS|ADD|AND|BIG|FOR|HDB|JOB|LOW|NOT|SAP|TRY|VIA|XML|ANY|GET|IDS|KEY|MOD|OFF|PUT|RAW|RED|REF|SUM|TAB|XSD|CNT|COS|EXP|LOG|SIN|TAN|XOR|AT|CO|CP|DO|GT|ID|IF|NS|OR|BT|CA|CS|GE|NA|NB|EQ|IN|LT|NE|NO|OF|ON|PF|TO|AS|BY|CN|IS|LE|NP|UP|E|I|M|O|Z|C|X)\\b/i,\n      lookbehind: true\n    },\n    /* Numbers can be only integers. Decimal or Hex appear only as strings */\n    number: /\\b\\d+\\b/,\n    /* Operators must always be surrounded by whitespace, they cannot be put\n    adjacent to operands.\n    */\n    operator: {\n      pattern: /(\\s)(?:\\*\\*?|<[=>]?|>=?|\\?=|[-+\\/=])(?=\\s)/,\n      lookbehind: true\n    },\n    'string-operator': {\n      pattern: /(\\s)&&?(?=\\s)/,\n      lookbehind: true,\n      /* The official editor highlights */\n      alias: 'keyword'\n    },\n    'token-operator': [{\n      /* Special operators used to access structure components, class methods/attributes, etc. */\n      pattern: /(\\w)(?:->?|=>|[~|{}])(?=\\w)/,\n      lookbehind: true,\n      alias: 'punctuation'\n    }, {\n      /* Special tokens used do delimit string templates */\n      pattern: /[|{}]/,\n      alias: 'punctuation'\n    }],\n    punctuation: /[,.:()]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/abap.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/abnf.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/abnf.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = abnf;\nabnf.displayName = 'abnf';\nabnf.aliases = [];\nfunction abnf(Prism) {\n  ;\n  (function (Prism) {\n    var coreRules = '(?:ALPHA|BIT|CHAR|CR|CRLF|CTL|DIGIT|DQUOTE|HEXDIG|HTAB|LF|LWSP|OCTET|SP|VCHAR|WSP)';\n    Prism.languages.abnf = {\n      comment: /;.*/,\n      string: {\n        pattern: /(?:%[is])?\"[^\"\\n\\r]*\"/,\n        greedy: true,\n        inside: {\n          punctuation: /^%[is]/\n        }\n      },\n      range: {\n        pattern: /%(?:b[01]+-[01]+|d\\d+-\\d+|x[A-F\\d]+-[A-F\\d]+)/i,\n        alias: 'number'\n      },\n      terminal: {\n        pattern: /%(?:b[01]+(?:\\.[01]+)*|d\\d+(?:\\.\\d+)*|x[A-F\\d]+(?:\\.[A-F\\d]+)*)/i,\n        alias: 'number'\n      },\n      repetition: {\n        pattern: /(^|[^\\w-])(?:\\d*\\*\\d*|\\d+)/,\n        lookbehind: true,\n        alias: 'operator'\n      },\n      definition: {\n        pattern: /(^[ \\t]*)(?:[a-z][\\w-]*|<[^<>\\r\\n]*>)(?=\\s*=)/m,\n        lookbehind: true,\n        alias: 'keyword',\n        inside: {\n          punctuation: /<|>/\n        }\n      },\n      'core-rule': {\n        pattern: RegExp('(?:(^|[^<\\\\w-])' + coreRules + '|<' + coreRules + '>)(?![\\\\w-])', 'i'),\n        lookbehind: true,\n        alias: ['rule', 'constant'],\n        inside: {\n          punctuation: /<|>/\n        }\n      },\n      rule: {\n        pattern: /(^|[^<\\w-])[a-z][\\w-]*|<[^<>\\r\\n]*>/i,\n        lookbehind: true,\n        inside: {\n          punctuation: /<|>/\n        }\n      },\n      operator: /=\\/?|\\//,\n      punctuation: /[()\\[\\]]/\n    };\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvYWJuZi5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLElBQUk7QUFDckJBLElBQUksQ0FBQ0MsV0FBVyxHQUFHLE1BQU07QUFDekJELElBQUksQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDakIsU0FBU0YsSUFBSUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ25CO0VBQUMsQ0FBQyxVQUFVQSxLQUFLLEVBQUU7SUFDakIsSUFBSUMsU0FBUyxHQUNYLG9GQUFvRjtJQUN0RkQsS0FBSyxDQUFDRSxTQUFTLENBQUNMLElBQUksR0FBRztNQUNyQk0sT0FBTyxFQUFFLEtBQUs7TUFDZEMsTUFBTSxFQUFFO1FBQ05DLE9BQU8sRUFBRSx1QkFBdUI7UUFDaENDLE1BQU0sRUFBRSxJQUFJO1FBQ1pDLE1BQU0sRUFBRTtVQUNOQyxXQUFXLEVBQUU7UUFDZjtNQUNGLENBQUM7TUFDREMsS0FBSyxFQUFFO1FBQ0xKLE9BQU8sRUFBRSxnREFBZ0Q7UUFDekRLLEtBQUssRUFBRTtNQUNULENBQUM7TUFDREMsUUFBUSxFQUFFO1FBQ1JOLE9BQU8sRUFDTCxrRUFBa0U7UUFDcEVLLEtBQUssRUFBRTtNQUNULENBQUM7TUFDREUsVUFBVSxFQUFFO1FBQ1ZQLE9BQU8sRUFBRSw0QkFBNEI7UUFDckNRLFVBQVUsRUFBRSxJQUFJO1FBQ2hCSCxLQUFLLEVBQUU7TUFDVCxDQUFDO01BQ0RJLFVBQVUsRUFBRTtRQUNWVCxPQUFPLEVBQUUsZ0RBQWdEO1FBQ3pEUSxVQUFVLEVBQUUsSUFBSTtRQUNoQkgsS0FBSyxFQUFFLFNBQVM7UUFDaEJILE1BQU0sRUFBRTtVQUNOQyxXQUFXLEVBQUU7UUFDZjtNQUNGLENBQUM7TUFDRCxXQUFXLEVBQUU7UUFDWEgsT0FBTyxFQUFFVSxNQUFNLENBQ2IsaUJBQWlCLEdBQUdkLFNBQVMsR0FBRyxJQUFJLEdBQUdBLFNBQVMsR0FBRyxjQUFjLEVBQ2pFLEdBQ0YsQ0FBQztRQUNEWSxVQUFVLEVBQUUsSUFBSTtRQUNoQkgsS0FBSyxFQUFFLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQztRQUMzQkgsTUFBTSxFQUFFO1VBQ05DLFdBQVcsRUFBRTtRQUNmO01BQ0YsQ0FBQztNQUNEUSxJQUFJLEVBQUU7UUFDSlgsT0FBTyxFQUFFLHNDQUFzQztRQUMvQ1EsVUFBVSxFQUFFLElBQUk7UUFDaEJOLE1BQU0sRUFBRTtVQUNOQyxXQUFXLEVBQUU7UUFDZjtNQUNGLENBQUM7TUFDRFMsUUFBUSxFQUFFLFNBQVM7TUFDbkJULFdBQVcsRUFBRTtJQUNmLENBQUM7RUFDSCxDQUFDLEVBQUVSLEtBQUssQ0FBQztBQUNYIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcYWJuZi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBhYm5mXG5hYm5mLmRpc3BsYXlOYW1lID0gJ2FibmYnXG5hYm5mLmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24gYWJuZihQcmlzbSkge1xuICA7KGZ1bmN0aW9uIChQcmlzbSkge1xuICAgIHZhciBjb3JlUnVsZXMgPVxuICAgICAgJyg/OkFMUEhBfEJJVHxDSEFSfENSfENSTEZ8Q1RMfERJR0lUfERRVU9URXxIRVhESUd8SFRBQnxMRnxMV1NQfE9DVEVUfFNQfFZDSEFSfFdTUCknXG4gICAgUHJpc20ubGFuZ3VhZ2VzLmFibmYgPSB7XG4gICAgICBjb21tZW50OiAvOy4qLyxcbiAgICAgIHN0cmluZzoge1xuICAgICAgICBwYXR0ZXJuOiAvKD86JVtpc10pP1wiW15cIlxcblxccl0qXCIvLFxuICAgICAgICBncmVlZHk6IHRydWUsXG4gICAgICAgIGluc2lkZToge1xuICAgICAgICAgIHB1bmN0dWF0aW9uOiAvXiVbaXNdL1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcmFuZ2U6IHtcbiAgICAgICAgcGF0dGVybjogLyUoPzpiWzAxXSstWzAxXSt8ZFxcZCstXFxkK3x4W0EtRlxcZF0rLVtBLUZcXGRdKykvaSxcbiAgICAgICAgYWxpYXM6ICdudW1iZXInXG4gICAgICB9LFxuICAgICAgdGVybWluYWw6IHtcbiAgICAgICAgcGF0dGVybjpcbiAgICAgICAgICAvJSg/OmJbMDFdKyg/OlxcLlswMV0rKSp8ZFxcZCsoPzpcXC5cXGQrKSp8eFtBLUZcXGRdKyg/OlxcLltBLUZcXGRdKykqKS9pLFxuICAgICAgICBhbGlhczogJ251bWJlcidcbiAgICAgIH0sXG4gICAgICByZXBldGl0aW9uOiB7XG4gICAgICAgIHBhdHRlcm46IC8oXnxbXlxcdy1dKSg/OlxcZCpcXCpcXGQqfFxcZCspLyxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgYWxpYXM6ICdvcGVyYXRvcidcbiAgICAgIH0sXG4gICAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIHBhdHRlcm46IC8oXlsgXFx0XSopKD86W2Etel1bXFx3LV0qfDxbXjw+XFxyXFxuXSo+KSg/PVxccyo9KS9tLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICBhbGlhczogJ2tleXdvcmQnLFxuICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICBwdW5jdHVhdGlvbjogLzx8Pi9cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgICdjb3JlLXJ1bGUnOiB7XG4gICAgICAgIHBhdHRlcm46IFJlZ0V4cChcbiAgICAgICAgICAnKD86KF58W148XFxcXHctXSknICsgY29yZVJ1bGVzICsgJ3w8JyArIGNvcmVSdWxlcyArICc+KSg/IVtcXFxcdy1dKScsXG4gICAgICAgICAgJ2knXG4gICAgICAgICksXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGFsaWFzOiBbJ3J1bGUnLCAnY29uc3RhbnQnXSxcbiAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgcHVuY3R1YXRpb246IC88fD4vXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBydWxlOiB7XG4gICAgICAgIHBhdHRlcm46IC8oXnxbXjxcXHctXSlbYS16XVtcXHctXSp8PFtePD5cXHJcXG5dKj4vaSxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgcHVuY3R1YXRpb246IC88fD4vXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvcGVyYXRvcjogLz1cXC8/fFxcLy8sXG4gICAgICBwdW5jdHVhdGlvbjogL1soKVxcW1xcXV0vXG4gICAgfVxuICB9KShQcmlzbSlcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiYWJuZiIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwiY29yZVJ1bGVzIiwibGFuZ3VhZ2VzIiwiY29tbWVudCIsInN0cmluZyIsInBhdHRlcm4iLCJncmVlZHkiLCJpbnNpZGUiLCJwdW5jdHVhdGlvbiIsInJhbmdlIiwiYWxpYXMiLCJ0ZXJtaW5hbCIsInJlcGV0aXRpb24iLCJsb29rYmVoaW5kIiwiZGVmaW5pdGlvbiIsIlJlZ0V4cCIsInJ1bGUiLCJvcGVyYXRvciJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/abnf.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/actionscript.js":
/*!*****************************************************!*\
  !*** ./node_modules/refractor/lang/actionscript.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = actionscript;\nactionscript.displayName = 'actionscript';\nactionscript.aliases = [];\nfunction actionscript(Prism) {\n  Prism.languages.actionscript = Prism.languages.extend('javascript', {\n    keyword: /\\b(?:as|break|case|catch|class|const|default|delete|do|dynamic|each|else|extends|final|finally|for|function|get|if|implements|import|in|include|instanceof|interface|internal|is|namespace|native|new|null|override|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|use|var|void|while|with)\\b/,\n    operator: /\\+\\+|--|(?:[+\\-*\\/%^]|&&?|\\|\\|?|<<?|>>?>?|[!=]=?)=?|[~?@]/\n  });\n  Prism.languages.actionscript['class-name'].alias = 'function'; // doesn't work with AS because AS is too complex\n  delete Prism.languages.actionscript['parameter'];\n  delete Prism.languages.actionscript['literal-property'];\n  if (Prism.languages.markup) {\n    Prism.languages.insertBefore('actionscript', 'string', {\n      xml: {\n        pattern: /(^|[^.])<\\/?\\w+(?:\\s+[^\\s>\\/=]+=(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\])*\\2)*\\s*\\/?>/,\n        lookbehind: true,\n        inside: Prism.languages.markup\n      }\n    });\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvYWN0aW9uc2NyaXB0LmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsWUFBWTtBQUM3QkEsWUFBWSxDQUFDQyxXQUFXLEdBQUcsY0FBYztBQUN6Q0QsWUFBWSxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUN6QixTQUFTRixZQUFZQSxDQUFDRyxLQUFLLEVBQUU7RUFDM0JBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixZQUFZLEdBQUdHLEtBQUssQ0FBQ0MsU0FBUyxDQUFDQyxNQUFNLENBQUMsWUFBWSxFQUFFO0lBQ2xFQyxPQUFPLEVBQ0wsc1VBQXNVO0lBQ3hVQyxRQUFRLEVBQUU7RUFDWixDQUFDLENBQUM7RUFDRkosS0FBSyxDQUFDQyxTQUFTLENBQUNKLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQ1EsS0FBSyxHQUFHLFVBQVUsRUFBQztFQUM5RCxPQUFPTCxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osWUFBWSxDQUFDLFdBQVcsQ0FBQztFQUNoRCxPQUFPRyxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osWUFBWSxDQUFDLGtCQUFrQixDQUFDO0VBQ3ZELElBQUlHLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSyxNQUFNLEVBQUU7SUFDMUJOLEtBQUssQ0FBQ0MsU0FBUyxDQUFDTSxZQUFZLENBQUMsY0FBYyxFQUFFLFFBQVEsRUFBRTtNQUNyREMsR0FBRyxFQUFFO1FBQ0hDLE9BQU8sRUFDTCwyRUFBMkU7UUFDN0VDLFVBQVUsRUFBRSxJQUFJO1FBQ2hCQyxNQUFNLEVBQUVYLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSztNQUMxQjtJQUNGLENBQUMsQ0FBQztFQUNKO0FBQ0YiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxhY3Rpb25zY3JpcHQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gYWN0aW9uc2NyaXB0XG5hY3Rpb25zY3JpcHQuZGlzcGxheU5hbWUgPSAnYWN0aW9uc2NyaXB0J1xuYWN0aW9uc2NyaXB0LmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24gYWN0aW9uc2NyaXB0KFByaXNtKSB7XG4gIFByaXNtLmxhbmd1YWdlcy5hY3Rpb25zY3JpcHQgPSBQcmlzbS5sYW5ndWFnZXMuZXh0ZW5kKCdqYXZhc2NyaXB0Jywge1xuICAgIGtleXdvcmQ6XG4gICAgICAvXFxiKD86YXN8YnJlYWt8Y2FzZXxjYXRjaHxjbGFzc3xjb25zdHxkZWZhdWx0fGRlbGV0ZXxkb3xkeW5hbWljfGVhY2h8ZWxzZXxleHRlbmRzfGZpbmFsfGZpbmFsbHl8Zm9yfGZ1bmN0aW9ufGdldHxpZnxpbXBsZW1lbnRzfGltcG9ydHxpbnxpbmNsdWRlfGluc3RhbmNlb2Z8aW50ZXJmYWNlfGludGVybmFsfGlzfG5hbWVzcGFjZXxuYXRpdmV8bmV3fG51bGx8b3ZlcnJpZGV8cGFja2FnZXxwcml2YXRlfHByb3RlY3RlZHxwdWJsaWN8cmV0dXJufHNldHxzdGF0aWN8c3VwZXJ8c3dpdGNofHRoaXN8dGhyb3d8dHJ5fHR5cGVvZnx1c2V8dmFyfHZvaWR8d2hpbGV8d2l0aClcXGIvLFxuICAgIG9wZXJhdG9yOiAvXFwrXFwrfC0tfCg/OlsrXFwtKlxcLyVeXXwmJj98XFx8XFx8P3w8PD98Pj4/Pj98WyE9XT0/KT0/fFt+P0BdL1xuICB9KVxuICBQcmlzbS5sYW5ndWFnZXMuYWN0aW9uc2NyaXB0WydjbGFzcy1uYW1lJ10uYWxpYXMgPSAnZnVuY3Rpb24nIC8vIGRvZXNuJ3Qgd29yayB3aXRoIEFTIGJlY2F1c2UgQVMgaXMgdG9vIGNvbXBsZXhcbiAgZGVsZXRlIFByaXNtLmxhbmd1YWdlcy5hY3Rpb25zY3JpcHRbJ3BhcmFtZXRlciddXG4gIGRlbGV0ZSBQcmlzbS5sYW5ndWFnZXMuYWN0aW9uc2NyaXB0WydsaXRlcmFsLXByb3BlcnR5J11cbiAgaWYgKFByaXNtLmxhbmd1YWdlcy5tYXJrdXApIHtcbiAgICBQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdhY3Rpb25zY3JpcHQnLCAnc3RyaW5nJywge1xuICAgICAgeG1sOiB7XG4gICAgICAgIHBhdHRlcm46XG4gICAgICAgICAgLyhefFteLl0pPFxcLz9cXHcrKD86XFxzK1teXFxzPlxcLz1dKz0oXCJ8JykoPzpcXFxcW1xcc1xcU118KD8hXFwyKVteXFxcXF0pKlxcMikqXFxzKlxcLz8+LyxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgaW5zaWRlOiBQcmlzbS5sYW5ndWFnZXMubWFya3VwXG4gICAgICB9XG4gICAgfSlcbiAgfVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJhY3Rpb25zY3JpcHQiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImxhbmd1YWdlcyIsImV4dGVuZCIsImtleXdvcmQiLCJvcGVyYXRvciIsImFsaWFzIiwibWFya3VwIiwiaW5zZXJ0QmVmb3JlIiwieG1sIiwicGF0dGVybiIsImxvb2tiZWhpbmQiLCJpbnNpZGUiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/actionscript.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/ada.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/ada.js ***!
  \********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = ada;\nada.displayName = 'ada';\nada.aliases = [];\nfunction ada(Prism) {\n  Prism.languages.ada = {\n    comment: /--.*/,\n    string: /\"(?:\"\"|[^\"\\r\\f\\n])*\"/,\n    number: [{\n      pattern: /\\b\\d(?:_?\\d)*#[\\dA-F](?:_?[\\dA-F])*(?:\\.[\\dA-F](?:_?[\\dA-F])*)?#(?:E[+-]?\\d(?:_?\\d)*)?/i\n    }, {\n      pattern: /\\b\\d(?:_?\\d)*(?:\\.\\d(?:_?\\d)*)?(?:E[+-]?\\d(?:_?\\d)*)?\\b/i\n    }],\n    'attr-name': /\\b'\\w+/,\n    keyword: /\\b(?:abort|abs|abstract|accept|access|aliased|all|and|array|at|begin|body|case|constant|declare|delay|delta|digits|do|else|elsif|end|entry|exception|exit|for|function|generic|goto|if|in|interface|is|limited|loop|mod|new|not|null|of|others|out|overriding|package|pragma|private|procedure|protected|raise|range|record|rem|renames|requeue|return|reverse|select|separate|some|subtype|synchronized|tagged|task|terminate|then|type|until|use|when|while|with|xor)\\b/i,\n    \"boolean\": /\\b(?:false|true)\\b/i,\n    operator: /<[=>]?|>=?|=>?|:=|\\/=?|\\*\\*?|[&+-]/,\n    punctuation: /\\.\\.?|[,;():]/,\n    \"char\": /'.'/,\n    variable: /\\b[a-z](?:\\w)*\\b/i\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvYWRhLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsR0FBRztBQUNwQkEsR0FBRyxDQUFDQyxXQUFXLEdBQUcsS0FBSztBQUN2QkQsR0FBRyxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNoQixTQUFTRixHQUFHQSxDQUFDRyxLQUFLLEVBQUU7RUFDbEJBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixHQUFHLEdBQUc7SUFDcEJLLE9BQU8sRUFBRSxNQUFNO0lBQ2ZDLE1BQU0sRUFBRSxzQkFBc0I7SUFDOUJDLE1BQU0sRUFBRSxDQUNOO01BQ0VDLE9BQU8sRUFDTDtJQUNKLENBQUMsRUFDRDtNQUNFQSxPQUFPLEVBQUU7SUFDWCxDQUFDLENBQ0Y7SUFDRCxXQUFXLEVBQUUsUUFBUTtJQUNyQkMsT0FBTyxFQUNMLDRjQUE0YztJQUM5YyxXQUFTLHFCQUFxQjtJQUM5QkMsUUFBUSxFQUFFLG9DQUFvQztJQUM5Q0MsV0FBVyxFQUFFLGVBQWU7SUFDNUIsUUFBTSxLQUFLO0lBQ1hDLFFBQVEsRUFBRTtFQUNaLENBQUM7QUFDSCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXGFkYS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBhZGFcbmFkYS5kaXNwbGF5TmFtZSA9ICdhZGEnXG5hZGEuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBhZGEoUHJpc20pIHtcbiAgUHJpc20ubGFuZ3VhZ2VzLmFkYSA9IHtcbiAgICBjb21tZW50OiAvLS0uKi8sXG4gICAgc3RyaW5nOiAvXCIoPzpcIlwifFteXCJcXHJcXGZcXG5dKSpcIi8sXG4gICAgbnVtYmVyOiBbXG4gICAgICB7XG4gICAgICAgIHBhdHRlcm46XG4gICAgICAgICAgL1xcYlxcZCg/Ol8/XFxkKSojW1xcZEEtRl0oPzpfP1tcXGRBLUZdKSooPzpcXC5bXFxkQS1GXSg/Ol8/W1xcZEEtRl0pKik/Iyg/OkVbKy1dP1xcZCg/Ol8/XFxkKSopPy9pXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBwYXR0ZXJuOiAvXFxiXFxkKD86Xz9cXGQpKig/OlxcLlxcZCg/Ol8/XFxkKSopPyg/OkVbKy1dP1xcZCg/Ol8/XFxkKSopP1xcYi9pXG4gICAgICB9XG4gICAgXSxcbiAgICAnYXR0ci1uYW1lJzogL1xcYidcXHcrLyxcbiAgICBrZXl3b3JkOlxuICAgICAgL1xcYig/OmFib3J0fGFic3xhYnN0cmFjdHxhY2NlcHR8YWNjZXNzfGFsaWFzZWR8YWxsfGFuZHxhcnJheXxhdHxiZWdpbnxib2R5fGNhc2V8Y29uc3RhbnR8ZGVjbGFyZXxkZWxheXxkZWx0YXxkaWdpdHN8ZG98ZWxzZXxlbHNpZnxlbmR8ZW50cnl8ZXhjZXB0aW9ufGV4aXR8Zm9yfGZ1bmN0aW9ufGdlbmVyaWN8Z290b3xpZnxpbnxpbnRlcmZhY2V8aXN8bGltaXRlZHxsb29wfG1vZHxuZXd8bm90fG51bGx8b2Z8b3RoZXJzfG91dHxvdmVycmlkaW5nfHBhY2thZ2V8cHJhZ21hfHByaXZhdGV8cHJvY2VkdXJlfHByb3RlY3RlZHxyYWlzZXxyYW5nZXxyZWNvcmR8cmVtfHJlbmFtZXN8cmVxdWV1ZXxyZXR1cm58cmV2ZXJzZXxzZWxlY3R8c2VwYXJhdGV8c29tZXxzdWJ0eXBlfHN5bmNocm9uaXplZHx0YWdnZWR8dGFza3x0ZXJtaW5hdGV8dGhlbnx0eXBlfHVudGlsfHVzZXx3aGVufHdoaWxlfHdpdGh8eG9yKVxcYi9pLFxuICAgIGJvb2xlYW46IC9cXGIoPzpmYWxzZXx0cnVlKVxcYi9pLFxuICAgIG9wZXJhdG9yOiAvPFs9Pl0/fD49P3w9Pj98Oj18XFwvPT98XFwqXFwqP3xbJistXS8sXG4gICAgcHVuY3R1YXRpb246IC9cXC5cXC4/fFssOygpOl0vLFxuICAgIGNoYXI6IC8nLicvLFxuICAgIHZhcmlhYmxlOiAvXFxiW2Etel0oPzpcXHcpKlxcYi9pXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiYWRhIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJjb21tZW50Iiwic3RyaW5nIiwibnVtYmVyIiwicGF0dGVybiIsImtleXdvcmQiLCJvcGVyYXRvciIsInB1bmN0dWF0aW9uIiwidmFyaWFibGUiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/ada.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/agda.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/agda.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = agda;\nagda.displayName = 'agda';\nagda.aliases = [];\nfunction agda(Prism) {\n  ;\n  (function (Prism) {\n    Prism.languages.agda = {\n      comment: /\\{-[\\s\\S]*?(?:-\\}|$)|--.*/,\n      string: {\n        pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,\n        greedy: true\n      },\n      punctuation: /[(){}⦃⦄.;@]/,\n      'class-name': {\n        pattern: /((?:data|record) +)\\S+/,\n        lookbehind: true\n      },\n      \"function\": {\n        pattern: /(^[ \\t]*)(?!\\s)[^:\\r\\n]+(?=:)/m,\n        lookbehind: true\n      },\n      operator: {\n        pattern: /(^\\s*|\\s)(?:[=|:∀→λ\\\\?_]|->)(?=\\s)/,\n        lookbehind: true\n      },\n      keyword: /\\b(?:Set|abstract|constructor|data|eta-equality|field|forall|hiding|import|in|inductive|infix|infixl|infixr|instance|let|macro|module|mutual|no-eta-equality|open|overlap|pattern|postulate|primitive|private|public|quote|quoteContext|quoteGoal|quoteTerm|record|renaming|rewrite|syntax|tactic|unquote|unquoteDecl|unquoteDef|using|variable|where|with)\\b/\n    };\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvYWdkYS5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLElBQUk7QUFDckJBLElBQUksQ0FBQ0MsV0FBVyxHQUFHLE1BQU07QUFDekJELElBQUksQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDakIsU0FBU0YsSUFBSUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ25CO0VBQUMsQ0FBQyxVQUFVQSxLQUFLLEVBQUU7SUFDakJBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixJQUFJLEdBQUc7TUFDckJLLE9BQU8sRUFBRSwyQkFBMkI7TUFDcENDLE1BQU0sRUFBRTtRQUNOQyxPQUFPLEVBQUUscUNBQXFDO1FBQzlDQyxNQUFNLEVBQUU7TUFDVixDQUFDO01BQ0RDLFdBQVcsRUFBRSxhQUFhO01BQzFCLFlBQVksRUFBRTtRQUNaRixPQUFPLEVBQUUsd0JBQXdCO1FBQ2pDRyxVQUFVLEVBQUU7TUFDZCxDQUFDO01BQ0QsWUFBVTtRQUNSSCxPQUFPLEVBQUUsZ0NBQWdDO1FBQ3pDRyxVQUFVLEVBQUU7TUFDZCxDQUFDO01BQ0RDLFFBQVEsRUFBRTtRQUNSSixPQUFPLEVBQUUsb0NBQW9DO1FBQzdDRyxVQUFVLEVBQUU7TUFDZCxDQUFDO01BQ0RFLE9BQU8sRUFDTDtJQUNKLENBQUM7RUFDSCxDQUFDLEVBQUVULEtBQUssQ0FBQztBQUNYIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcYWdkYS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBhZ2RhXG5hZ2RhLmRpc3BsYXlOYW1lID0gJ2FnZGEnXG5hZ2RhLmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24gYWdkYShQcmlzbSkge1xuICA7KGZ1bmN0aW9uIChQcmlzbSkge1xuICAgIFByaXNtLmxhbmd1YWdlcy5hZ2RhID0ge1xuICAgICAgY29tbWVudDogL1xcey1bXFxzXFxTXSo/KD86LVxcfXwkKXwtLS4qLyxcbiAgICAgIHN0cmluZzoge1xuICAgICAgICBwYXR0ZXJuOiAvXCIoPzpcXFxcKD86XFxyXFxufFtcXHNcXFNdKXxbXlxcXFxcXHJcXG5cIl0pKlwiLyxcbiAgICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgICB9LFxuICAgICAgcHVuY3R1YXRpb246IC9bKCl7feKmg+KmhC47QF0vLFxuICAgICAgJ2NsYXNzLW5hbWUnOiB7XG4gICAgICAgIHBhdHRlcm46IC8oKD86ZGF0YXxyZWNvcmQpICspXFxTKy8sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH0sXG4gICAgICBmdW5jdGlvbjoge1xuICAgICAgICBwYXR0ZXJuOiAvKF5bIFxcdF0qKSg/IVxccylbXjpcXHJcXG5dKyg/PTopL20sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH0sXG4gICAgICBvcGVyYXRvcjoge1xuICAgICAgICBwYXR0ZXJuOiAvKF5cXHMqfFxccykoPzpbPXw64oiA4oaSzrtcXFxcP19dfC0+KSg/PVxccykvLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICB9LFxuICAgICAga2V5d29yZDpcbiAgICAgICAgL1xcYig/OlNldHxhYnN0cmFjdHxjb25zdHJ1Y3RvcnxkYXRhfGV0YS1lcXVhbGl0eXxmaWVsZHxmb3JhbGx8aGlkaW5nfGltcG9ydHxpbnxpbmR1Y3RpdmV8aW5maXh8aW5maXhsfGluZml4cnxpbnN0YW5jZXxsZXR8bWFjcm98bW9kdWxlfG11dHVhbHxuby1ldGEtZXF1YWxpdHl8b3BlbnxvdmVybGFwfHBhdHRlcm58cG9zdHVsYXRlfHByaW1pdGl2ZXxwcml2YXRlfHB1YmxpY3xxdW90ZXxxdW90ZUNvbnRleHR8cXVvdGVHb2FsfHF1b3RlVGVybXxyZWNvcmR8cmVuYW1pbmd8cmV3cml0ZXxzeW50YXh8dGFjdGljfHVucXVvdGV8dW5xdW90ZURlY2x8dW5xdW90ZURlZnx1c2luZ3x2YXJpYWJsZXx3aGVyZXx3aXRoKVxcYi9cbiAgICB9XG4gIH0pKFByaXNtKVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJhZ2RhIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJjb21tZW50Iiwic3RyaW5nIiwicGF0dGVybiIsImdyZWVkeSIsInB1bmN0dWF0aW9uIiwibG9va2JlaGluZCIsIm9wZXJhdG9yIiwia2V5d29yZCJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/agda.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/al.js":
/*!*******************************************!*\
  !*** ./node_modules/refractor/lang/al.js ***!
  \*******************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = al;\nal.displayName = 'al';\nal.aliases = [];\nfunction al(Prism) {\n  // based on https://github.com/microsoft/AL/blob/master/grammar/alsyntax.tmlanguage\n  Prism.languages.al = {\n    comment: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,\n    string: {\n      pattern: /'(?:''|[^'\\r\\n])*'(?!')|\"(?:\"\"|[^\"\\r\\n])*\"(?!\")/,\n      greedy: true\n    },\n    \"function\": {\n      pattern: /(\\b(?:event|procedure|trigger)\\s+|(?:^|[^.])\\.\\s*)[a-z_]\\w*(?=\\s*\\()/i,\n      lookbehind: true\n    },\n    keyword: [\n    // keywords\n    /\\b(?:array|asserterror|begin|break|case|do|downto|else|end|event|exit|for|foreach|function|if|implements|in|indataset|interface|internal|local|of|procedure|program|protected|repeat|runonclient|securityfiltering|suppressdispose|temporary|then|to|trigger|until|var|while|with|withevents)\\b/i,\n    // objects and metadata that are used like keywords\n    /\\b(?:action|actions|addafter|addbefore|addfirst|addlast|area|assembly|chartpart|codeunit|column|controladdin|cuegroup|customizes|dataitem|dataset|dotnet|elements|enum|enumextension|extends|field|fieldattribute|fieldelement|fieldgroup|fieldgroups|fields|filter|fixed|grid|group|key|keys|label|labels|layout|modify|moveafter|movebefore|movefirst|movelast|page|pagecustomization|pageextension|part|profile|query|repeater|report|requestpage|schema|separator|systempart|table|tableelement|tableextension|textattribute|textelement|type|usercontrol|value|xmlport)\\b/i],\n    number: /\\b(?:0x[\\da-f]+|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?)(?:F|LL?|U(?:LL?)?)?\\b/i,\n    \"boolean\": /\\b(?:false|true)\\b/i,\n    variable: /\\b(?:Curr(?:FieldNo|Page|Report)|x?Rec|RequestOptionsPage)\\b/,\n    'class-name': /\\b(?:automation|biginteger|bigtext|blob|boolean|byte|char|clienttype|code|completiontriggererrorlevel|connectiontype|database|dataclassification|datascope|date|dateformula|datetime|decimal|defaultlayout|dialog|dictionary|dotnetassembly|dotnettypedeclaration|duration|errorinfo|errortype|executioncontext|executionmode|fieldclass|fieldref|fieldtype|file|filterpagebuilder|guid|httpclient|httpcontent|httpheaders|httprequestmessage|httpresponsemessage|instream|integer|joker|jsonarray|jsonobject|jsontoken|jsonvalue|keyref|list|moduledependencyinfo|moduleinfo|none|notification|notificationscope|objecttype|option|outstream|pageresult|record|recordid|recordref|reportformat|securityfilter|sessionsettings|tableconnectiontype|tablefilter|testaction|testfield|testfilterfield|testpage|testpermissions|testrequestpage|text|textbuilder|textconst|textencoding|time|transactionmodel|transactiontype|variant|verbosity|version|view|views|webserviceactioncontext|webserviceactionresultcode|xmlattribute|xmlattributecollection|xmlcdata|xmlcomment|xmldeclaration|xmldocument|xmldocumenttype|xmlelement|xmlnamespacemanager|xmlnametable|xmlnode|xmlnodelist|xmlprocessinginstruction|xmlreadoptions|xmltext|xmlwriteoptions)\\b/i,\n    operator: /\\.\\.|:[=:]|[-+*/]=?|<>|[<>]=?|=|\\b(?:and|div|mod|not|or|xor)\\b/i,\n    punctuation: /[()\\[\\]{}:.;,]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvYWwuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxFQUFFO0FBQ25CQSxFQUFFLENBQUNDLFdBQVcsR0FBRyxJQUFJO0FBQ3JCRCxFQUFFLENBQUNFLE9BQU8sR0FBRyxFQUFFO0FBQ2YsU0FBU0YsRUFBRUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ2pCO0VBQ0FBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixFQUFFLEdBQUc7SUFDbkJLLE9BQU8sRUFBRSx5QkFBeUI7SUFDbENDLE1BQU0sRUFBRTtNQUNOQyxPQUFPLEVBQUUsaURBQWlEO01BQzFEQyxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0QsWUFBVTtNQUNSRCxPQUFPLEVBQ0wsdUVBQXVFO01BQ3pFRSxVQUFVLEVBQUU7SUFDZCxDQUFDO0lBQ0RDLE9BQU8sRUFBRTtJQUNQO0lBQ0Esa1NBQWtTO0lBQUU7SUFDcFMsaWpCQUFpakIsQ0FDbGpCO0lBQ0RDLE1BQU0sRUFDSiwrRUFBK0U7SUFDakYsV0FBUyxxQkFBcUI7SUFDOUJDLFFBQVEsRUFBRSw4REFBOEQ7SUFDeEUsWUFBWSxFQUNWLDJyQ0FBMnJDO0lBQzdyQ0MsUUFBUSxFQUFFLGlFQUFpRTtJQUMzRUMsV0FBVyxFQUFFO0VBQ2YsQ0FBQztBQUNIIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcYWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gYWxcbmFsLmRpc3BsYXlOYW1lID0gJ2FsJ1xuYWwuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBhbChQcmlzbSkge1xuICAvLyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L0FML2Jsb2IvbWFzdGVyL2dyYW1tYXIvYWxzeW50YXgudG1sYW5ndWFnZVxuICBQcmlzbS5sYW5ndWFnZXMuYWwgPSB7XG4gICAgY29tbWVudDogL1xcL1xcLy4qfFxcL1xcKltcXHNcXFNdKj9cXCpcXC8vLFxuICAgIHN0cmluZzoge1xuICAgICAgcGF0dGVybjogLycoPzonJ3xbXidcXHJcXG5dKSonKD8hJyl8XCIoPzpcIlwifFteXCJcXHJcXG5dKSpcIig/IVwiKS8sXG4gICAgICBncmVlZHk6IHRydWVcbiAgICB9LFxuICAgIGZ1bmN0aW9uOiB7XG4gICAgICBwYXR0ZXJuOlxuICAgICAgICAvKFxcYig/OmV2ZW50fHByb2NlZHVyZXx0cmlnZ2VyKVxccyt8KD86XnxbXi5dKVxcLlxccyopW2Etel9dXFx3Kig/PVxccypcXCgpL2ksXG4gICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgfSxcbiAgICBrZXl3b3JkOiBbXG4gICAgICAvLyBrZXl3b3Jkc1xuICAgICAgL1xcYig/OmFycmF5fGFzc2VydGVycm9yfGJlZ2lufGJyZWFrfGNhc2V8ZG98ZG93bnRvfGVsc2V8ZW5kfGV2ZW50fGV4aXR8Zm9yfGZvcmVhY2h8ZnVuY3Rpb258aWZ8aW1wbGVtZW50c3xpbnxpbmRhdGFzZXR8aW50ZXJmYWNlfGludGVybmFsfGxvY2FsfG9mfHByb2NlZHVyZXxwcm9ncmFtfHByb3RlY3RlZHxyZXBlYXR8cnVub25jbGllbnR8c2VjdXJpdHlmaWx0ZXJpbmd8c3VwcHJlc3NkaXNwb3NlfHRlbXBvcmFyeXx0aGVufHRvfHRyaWdnZXJ8dW50aWx8dmFyfHdoaWxlfHdpdGh8d2l0aGV2ZW50cylcXGIvaSwgLy8gb2JqZWN0cyBhbmQgbWV0YWRhdGEgdGhhdCBhcmUgdXNlZCBsaWtlIGtleXdvcmRzXG4gICAgICAvXFxiKD86YWN0aW9ufGFjdGlvbnN8YWRkYWZ0ZXJ8YWRkYmVmb3JlfGFkZGZpcnN0fGFkZGxhc3R8YXJlYXxhc3NlbWJseXxjaGFydHBhcnR8Y29kZXVuaXR8Y29sdW1ufGNvbnRyb2xhZGRpbnxjdWVncm91cHxjdXN0b21pemVzfGRhdGFpdGVtfGRhdGFzZXR8ZG90bmV0fGVsZW1lbnRzfGVudW18ZW51bWV4dGVuc2lvbnxleHRlbmRzfGZpZWxkfGZpZWxkYXR0cmlidXRlfGZpZWxkZWxlbWVudHxmaWVsZGdyb3VwfGZpZWxkZ3JvdXBzfGZpZWxkc3xmaWx0ZXJ8Zml4ZWR8Z3JpZHxncm91cHxrZXl8a2V5c3xsYWJlbHxsYWJlbHN8bGF5b3V0fG1vZGlmeXxtb3ZlYWZ0ZXJ8bW92ZWJlZm9yZXxtb3ZlZmlyc3R8bW92ZWxhc3R8cGFnZXxwYWdlY3VzdG9taXphdGlvbnxwYWdlZXh0ZW5zaW9ufHBhcnR8cHJvZmlsZXxxdWVyeXxyZXBlYXRlcnxyZXBvcnR8cmVxdWVzdHBhZ2V8c2NoZW1hfHNlcGFyYXRvcnxzeXN0ZW1wYXJ0fHRhYmxlfHRhYmxlZWxlbWVudHx0YWJsZWV4dGVuc2lvbnx0ZXh0YXR0cmlidXRlfHRleHRlbGVtZW50fHR5cGV8dXNlcmNvbnRyb2x8dmFsdWV8eG1scG9ydClcXGIvaVxuICAgIF0sXG4gICAgbnVtYmVyOlxuICAgICAgL1xcYig/OjB4W1xcZGEtZl0rfCg/OlxcZCsoPzpcXC5cXGQqKT98XFwuXFxkKykoPzplWystXT9cXGQrKT8pKD86RnxMTD98VSg/OkxMPyk/KT9cXGIvaSxcbiAgICBib29sZWFuOiAvXFxiKD86ZmFsc2V8dHJ1ZSlcXGIvaSxcbiAgICB2YXJpYWJsZTogL1xcYig/OkN1cnIoPzpGaWVsZE5vfFBhZ2V8UmVwb3J0KXx4P1JlY3xSZXF1ZXN0T3B0aW9uc1BhZ2UpXFxiLyxcbiAgICAnY2xhc3MtbmFtZSc6XG4gICAgICAvXFxiKD86YXV0b21hdGlvbnxiaWdpbnRlZ2VyfGJpZ3RleHR8YmxvYnxib29sZWFufGJ5dGV8Y2hhcnxjbGllbnR0eXBlfGNvZGV8Y29tcGxldGlvbnRyaWdnZXJlcnJvcmxldmVsfGNvbm5lY3Rpb250eXBlfGRhdGFiYXNlfGRhdGFjbGFzc2lmaWNhdGlvbnxkYXRhc2NvcGV8ZGF0ZXxkYXRlZm9ybXVsYXxkYXRldGltZXxkZWNpbWFsfGRlZmF1bHRsYXlvdXR8ZGlhbG9nfGRpY3Rpb25hcnl8ZG90bmV0YXNzZW1ibHl8ZG90bmV0dHlwZWRlY2xhcmF0aW9ufGR1cmF0aW9ufGVycm9yaW5mb3xlcnJvcnR5cGV8ZXhlY3V0aW9uY29udGV4dHxleGVjdXRpb25tb2RlfGZpZWxkY2xhc3N8ZmllbGRyZWZ8ZmllbGR0eXBlfGZpbGV8ZmlsdGVycGFnZWJ1aWxkZXJ8Z3VpZHxodHRwY2xpZW50fGh0dHBjb250ZW50fGh0dHBoZWFkZXJzfGh0dHByZXF1ZXN0bWVzc2FnZXxodHRwcmVzcG9uc2VtZXNzYWdlfGluc3RyZWFtfGludGVnZXJ8am9rZXJ8anNvbmFycmF5fGpzb25vYmplY3R8anNvbnRva2VufGpzb252YWx1ZXxrZXlyZWZ8bGlzdHxtb2R1bGVkZXBlbmRlbmN5aW5mb3xtb2R1bGVpbmZvfG5vbmV8bm90aWZpY2F0aW9ufG5vdGlmaWNhdGlvbnNjb3BlfG9iamVjdHR5cGV8b3B0aW9ufG91dHN0cmVhbXxwYWdlcmVzdWx0fHJlY29yZHxyZWNvcmRpZHxyZWNvcmRyZWZ8cmVwb3J0Zm9ybWF0fHNlY3VyaXR5ZmlsdGVyfHNlc3Npb25zZXR0aW5nc3x0YWJsZWNvbm5lY3Rpb250eXBlfHRhYmxlZmlsdGVyfHRlc3RhY3Rpb258dGVzdGZpZWxkfHRlc3RmaWx0ZXJmaWVsZHx0ZXN0cGFnZXx0ZXN0cGVybWlzc2lvbnN8dGVzdHJlcXVlc3RwYWdlfHRleHR8dGV4dGJ1aWxkZXJ8dGV4dGNvbnN0fHRleHRlbmNvZGluZ3x0aW1lfHRyYW5zYWN0aW9ubW9kZWx8dHJhbnNhY3Rpb250eXBlfHZhcmlhbnR8dmVyYm9zaXR5fHZlcnNpb258dmlld3x2aWV3c3x3ZWJzZXJ2aWNlYWN0aW9uY29udGV4dHx3ZWJzZXJ2aWNlYWN0aW9ucmVzdWx0Y29kZXx4bWxhdHRyaWJ1dGV8eG1sYXR0cmlidXRlY29sbGVjdGlvbnx4bWxjZGF0YXx4bWxjb21tZW50fHhtbGRlY2xhcmF0aW9ufHhtbGRvY3VtZW50fHhtbGRvY3VtZW50dHlwZXx4bWxlbGVtZW50fHhtbG5hbWVzcGFjZW1hbmFnZXJ8eG1sbmFtZXRhYmxlfHhtbG5vZGV8eG1sbm9kZWxpc3R8eG1scHJvY2Vzc2luZ2luc3RydWN0aW9ufHhtbHJlYWRvcHRpb25zfHhtbHRleHR8eG1sd3JpdGVvcHRpb25zKVxcYi9pLFxuICAgIG9wZXJhdG9yOiAvXFwuXFwufDpbPTpdfFstKyovXT0/fDw+fFs8Pl09P3w9fFxcYig/OmFuZHxkaXZ8bW9kfG5vdHxvcnx4b3IpXFxiL2ksXG4gICAgcHVuY3R1YXRpb246IC9bKClcXFtcXF17fTouOyxdL1xuICB9XG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImFsIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJjb21tZW50Iiwic3RyaW5nIiwicGF0dGVybiIsImdyZWVkeSIsImxvb2tiZWhpbmQiLCJrZXl3b3JkIiwibnVtYmVyIiwidmFyaWFibGUiLCJvcGVyYXRvciIsInB1bmN0dWF0aW9uIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/al.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/antlr4.js":
/*!***********************************************!*\
  !*** ./node_modules/refractor/lang/antlr4.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = antlr4;\nantlr4.displayName = 'antlr4';\nantlr4.aliases = ['g4'];\nfunction antlr4(Prism) {\n  Prism.languages.antlr4 = {\n    comment: /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    string: {\n      pattern: /'(?:\\\\.|[^\\\\'\\r\\n])*'/,\n      greedy: true\n    },\n    'character-class': {\n      pattern: /\\[(?:\\\\.|[^\\\\\\]\\r\\n])*\\]/,\n      greedy: true,\n      alias: 'regex',\n      inside: {\n        range: {\n          pattern: /([^[]|(?:^|[^\\\\])(?:\\\\\\\\)*\\\\\\[)-(?!\\])/,\n          lookbehind: true,\n          alias: 'punctuation'\n        },\n        escape: /\\\\(?:u(?:[a-fA-F\\d]{4}|\\{[a-fA-F\\d]+\\})|[pP]\\{[=\\w-]+\\}|[^\\r\\nupP])/,\n        punctuation: /[\\[\\]]/\n      }\n    },\n    action: {\n      pattern: /\\{(?:[^{}]|\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})*\\})*\\}/,\n      greedy: true,\n      inside: {\n        content: {\n          // this might be C, C++, Python, Java, C#, or any other language ANTLR4 compiles to\n          pattern: /(\\{)[\\s\\S]+(?=\\})/,\n          lookbehind: true\n        },\n        punctuation: /[{}]/\n      }\n    },\n    command: {\n      pattern: /(->\\s*(?!\\s))(?:\\s*(?:,\\s*)?\\b[a-z]\\w*(?:\\s*\\([^()\\r\\n]*\\))?)+(?=\\s*;)/i,\n      lookbehind: true,\n      inside: {\n        \"function\": /\\b\\w+(?=\\s*(?:[,(]|$))/,\n        punctuation: /[,()]/\n      }\n    },\n    annotation: {\n      pattern: /@\\w+(?:::\\w+)*/,\n      alias: 'keyword'\n    },\n    label: {\n      pattern: /#[ \\t]*\\w+/,\n      alias: 'punctuation'\n    },\n    keyword: /\\b(?:catch|channels|finally|fragment|grammar|import|lexer|locals|mode|options|parser|returns|throws|tokens)\\b/,\n    definition: [{\n      pattern: /\\b[a-z]\\w*(?=\\s*:)/,\n      alias: ['rule', 'class-name']\n    }, {\n      pattern: /\\b[A-Z]\\w*(?=\\s*:)/,\n      alias: ['token', 'constant']\n    }],\n    constant: /\\b[A-Z][A-Z_]*\\b/,\n    operator: /\\.\\.|->|[|~]|[*+?]\\??/,\n    punctuation: /[;:()=]/\n  };\n  Prism.languages.g4 = Prism.languages.antlr4;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvYW50bHI0LmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsTUFBTTtBQUN2QkEsTUFBTSxDQUFDQyxXQUFXLEdBQUcsUUFBUTtBQUM3QkQsTUFBTSxDQUFDRSxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUM7QUFDdkIsU0FBU0YsTUFBTUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ3JCQSxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osTUFBTSxHQUFHO0lBQ3ZCSyxPQUFPLEVBQUUsK0JBQStCO0lBQ3hDQyxNQUFNLEVBQUU7TUFDTkMsT0FBTyxFQUFFLHVCQUF1QjtNQUNoQ0MsTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUNELGlCQUFpQixFQUFFO01BQ2pCRCxPQUFPLEVBQUUsMEJBQTBCO01BQ25DQyxNQUFNLEVBQUUsSUFBSTtNQUNaQyxLQUFLLEVBQUUsT0FBTztNQUNkQyxNQUFNLEVBQUU7UUFDTkMsS0FBSyxFQUFFO1VBQ0xKLE9BQU8sRUFBRSx3Q0FBd0M7VUFDakRLLFVBQVUsRUFBRSxJQUFJO1VBQ2hCSCxLQUFLLEVBQUU7UUFDVCxDQUFDO1FBQ0RJLE1BQU0sRUFDSixxRUFBcUU7UUFDdkVDLFdBQVcsRUFBRTtNQUNmO0lBQ0YsQ0FBQztJQUNEQyxNQUFNLEVBQUU7TUFDTlIsT0FBTyxFQUFFLHlEQUF5RDtNQUNsRUMsTUFBTSxFQUFFLElBQUk7TUFDWkUsTUFBTSxFQUFFO1FBQ05NLE9BQU8sRUFBRTtVQUNQO1VBQ0FULE9BQU8sRUFBRSxtQkFBbUI7VUFDNUJLLFVBQVUsRUFBRTtRQUNkLENBQUM7UUFDREUsV0FBVyxFQUFFO01BQ2Y7SUFDRixDQUFDO0lBQ0RHLE9BQU8sRUFBRTtNQUNQVixPQUFPLEVBQ0wseUVBQXlFO01BQzNFSyxVQUFVLEVBQUUsSUFBSTtNQUNoQkYsTUFBTSxFQUFFO1FBQ04sWUFBVSx3QkFBd0I7UUFDbENJLFdBQVcsRUFBRTtNQUNmO0lBQ0YsQ0FBQztJQUNESSxVQUFVLEVBQUU7TUFDVlgsT0FBTyxFQUFFLGdCQUFnQjtNQUN6QkUsS0FBSyxFQUFFO0lBQ1QsQ0FBQztJQUNEVSxLQUFLLEVBQUU7TUFDTFosT0FBTyxFQUFFLFlBQVk7TUFDckJFLEtBQUssRUFBRTtJQUNULENBQUM7SUFDRFcsT0FBTyxFQUNMLCtHQUErRztJQUNqSEMsVUFBVSxFQUFFLENBQ1Y7TUFDRWQsT0FBTyxFQUFFLG9CQUFvQjtNQUM3QkUsS0FBSyxFQUFFLENBQUMsTUFBTSxFQUFFLFlBQVk7SUFDOUIsQ0FBQyxFQUNEO01BQ0VGLE9BQU8sRUFBRSxvQkFBb0I7TUFDN0JFLEtBQUssRUFBRSxDQUFDLE9BQU8sRUFBRSxVQUFVO0lBQzdCLENBQUMsQ0FDRjtJQUNEYSxRQUFRLEVBQUUsa0JBQWtCO0lBQzVCQyxRQUFRLEVBQUUsdUJBQXVCO0lBQ2pDVCxXQUFXLEVBQUU7RUFDZixDQUFDO0VBQ0RYLEtBQUssQ0FBQ0MsU0FBUyxDQUFDb0IsRUFBRSxHQUFHckIsS0FBSyxDQUFDQyxTQUFTLENBQUNKLE1BQU07QUFDN0MiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxhbnRscjQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gYW50bHI0XG5hbnRscjQuZGlzcGxheU5hbWUgPSAnYW50bHI0J1xuYW50bHI0LmFsaWFzZXMgPSBbJ2c0J11cbmZ1bmN0aW9uIGFudGxyNChQcmlzbSkge1xuICBQcmlzbS5sYW5ndWFnZXMuYW50bHI0ID0ge1xuICAgIGNvbW1lbnQ6IC9cXC9cXC8uKnxcXC9cXCpbXFxzXFxTXSo/KD86XFwqXFwvfCQpLyxcbiAgICBzdHJpbmc6IHtcbiAgICAgIHBhdHRlcm46IC8nKD86XFxcXC58W15cXFxcJ1xcclxcbl0pKicvLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICAnY2hhcmFjdGVyLWNsYXNzJzoge1xuICAgICAgcGF0dGVybjogL1xcWyg/OlxcXFwufFteXFxcXFxcXVxcclxcbl0pKlxcXS8sXG4gICAgICBncmVlZHk6IHRydWUsXG4gICAgICBhbGlhczogJ3JlZ2V4JyxcbiAgICAgIGluc2lkZToge1xuICAgICAgICByYW5nZToge1xuICAgICAgICAgIHBhdHRlcm46IC8oW15bXXwoPzpefFteXFxcXF0pKD86XFxcXFxcXFwpKlxcXFxcXFspLSg/IVxcXSkvLFxuICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgICAgYWxpYXM6ICdwdW5jdHVhdGlvbidcbiAgICAgICAgfSxcbiAgICAgICAgZXNjYXBlOlxuICAgICAgICAgIC9cXFxcKD86dSg/OlthLWZBLUZcXGRdezR9fFxce1thLWZBLUZcXGRdK1xcfSl8W3BQXVxce1s9XFx3LV0rXFx9fFteXFxyXFxudXBQXSkvLFxuICAgICAgICBwdW5jdHVhdGlvbjogL1tcXFtcXF1dL1xuICAgICAgfVxuICAgIH0sXG4gICAgYWN0aW9uOiB7XG4gICAgICBwYXR0ZXJuOiAvXFx7KD86W157fV18XFx7KD86W157fV18XFx7KD86W157fV18XFx7W157fV0qXFx9KSpcXH0pKlxcfSkqXFx9LyxcbiAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgIGluc2lkZToge1xuICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgLy8gdGhpcyBtaWdodCBiZSBDLCBDKyssIFB5dGhvbiwgSmF2YSwgQyMsIG9yIGFueSBvdGhlciBsYW5ndWFnZSBBTlRMUjQgY29tcGlsZXMgdG9cbiAgICAgICAgICBwYXR0ZXJuOiAvKFxceylbXFxzXFxTXSsoPz1cXH0pLyxcbiAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIHB1bmN0dWF0aW9uOiAvW3t9XS9cbiAgICAgIH1cbiAgICB9LFxuICAgIGNvbW1hbmQ6IHtcbiAgICAgIHBhdHRlcm46XG4gICAgICAgIC8oLT5cXHMqKD8hXFxzKSkoPzpcXHMqKD86LFxccyopP1xcYlthLXpdXFx3Kig/OlxccypcXChbXigpXFxyXFxuXSpcXCkpPykrKD89XFxzKjspL2ksXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgIGZ1bmN0aW9uOiAvXFxiXFx3Kyg/PVxccyooPzpbLChdfCQpKS8sXG4gICAgICAgIHB1bmN0dWF0aW9uOiAvWywoKV0vXG4gICAgICB9XG4gICAgfSxcbiAgICBhbm5vdGF0aW9uOiB7XG4gICAgICBwYXR0ZXJuOiAvQFxcdysoPzo6OlxcdyspKi8sXG4gICAgICBhbGlhczogJ2tleXdvcmQnXG4gICAgfSxcbiAgICBsYWJlbDoge1xuICAgICAgcGF0dGVybjogLyNbIFxcdF0qXFx3Ky8sXG4gICAgICBhbGlhczogJ3B1bmN0dWF0aW9uJ1xuICAgIH0sXG4gICAga2V5d29yZDpcbiAgICAgIC9cXGIoPzpjYXRjaHxjaGFubmVsc3xmaW5hbGx5fGZyYWdtZW50fGdyYW1tYXJ8aW1wb3J0fGxleGVyfGxvY2Fsc3xtb2RlfG9wdGlvbnN8cGFyc2VyfHJldHVybnN8dGhyb3dzfHRva2VucylcXGIvLFxuICAgIGRlZmluaXRpb246IFtcbiAgICAgIHtcbiAgICAgICAgcGF0dGVybjogL1xcYlthLXpdXFx3Kig/PVxccyo6KS8sXG4gICAgICAgIGFsaWFzOiBbJ3J1bGUnLCAnY2xhc3MtbmFtZSddXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBwYXR0ZXJuOiAvXFxiW0EtWl1cXHcqKD89XFxzKjopLyxcbiAgICAgICAgYWxpYXM6IFsndG9rZW4nLCAnY29uc3RhbnQnXVxuICAgICAgfVxuICAgIF0sXG4gICAgY29uc3RhbnQ6IC9cXGJbQS1aXVtBLVpfXSpcXGIvLFxuICAgIG9wZXJhdG9yOiAvXFwuXFwufC0+fFt8fl18WyorP11cXD8/LyxcbiAgICBwdW5jdHVhdGlvbjogL1s7OigpPV0vXG4gIH1cbiAgUHJpc20ubGFuZ3VhZ2VzLmc0ID0gUHJpc20ubGFuZ3VhZ2VzLmFudGxyNFxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJhbnRscjQiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImxhbmd1YWdlcyIsImNvbW1lbnQiLCJzdHJpbmciLCJwYXR0ZXJuIiwiZ3JlZWR5IiwiYWxpYXMiLCJpbnNpZGUiLCJyYW5nZSIsImxvb2tiZWhpbmQiLCJlc2NhcGUiLCJwdW5jdHVhdGlvbiIsImFjdGlvbiIsImNvbnRlbnQiLCJjb21tYW5kIiwiYW5ub3RhdGlvbiIsImxhYmVsIiwia2V5d29yZCIsImRlZmluaXRpb24iLCJjb25zdGFudCIsIm9wZXJhdG9yIiwiZzQiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/antlr4.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/apacheconf.js":
/*!***************************************************!*\
  !*** ./node_modules/refractor/lang/apacheconf.js ***!
  \***************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = apacheconf;\napacheconf.displayName = 'apacheconf';\napacheconf.aliases = [];\nfunction apacheconf(Prism) {\n  Prism.languages.apacheconf = {\n    comment: /#.*/,\n    'directive-inline': {\n      pattern: /(^[\\t ]*)\\b(?:AcceptFilter|AcceptPathInfo|AccessFileName|Action|Add(?:Alt|AltByEncoding|AltByType|Charset|DefaultCharset|Description|Encoding|Handler|Icon|IconByEncoding|IconByType|InputFilter|Language|ModuleInfo|OutputFilter|OutputFilterByType|Type)|Alias|AliasMatch|Allow(?:CONNECT|EncodedSlashes|Methods|Override|OverrideList)?|Anonymous(?:_LogEmail|_MustGiveEmail|_NoUserID|_VerifyEmail)?|AsyncRequestWorkerFactor|Auth(?:BasicAuthoritative|BasicFake|BasicProvider|BasicUseDigestAlgorithm|DBDUserPWQuery|DBDUserRealmQuery|DBMGroupFile|DBMType|DBMUserFile|Digest(?:Algorithm|Domain|NonceLifetime|Provider|Qop|ShmemSize)|Form(?:Authoritative|Body|DisableNoStore|FakeBasicAuth|Location|LoginRequiredLocation|LoginSuccessLocation|LogoutLocation|Method|Mimetype|Password|Provider|SitePassphrase|Size|Username)|GroupFile|LDAP(?:AuthorizePrefix|BindAuthoritative|BindDN|BindPassword|CharsetConfig|CompareAsUser|CompareDNOnServer|DereferenceAliases|GroupAttribute|GroupAttributeIsDN|InitialBindAsUser|InitialBindPattern|MaxSubGroupDepth|RemoteUserAttribute|RemoteUserIsDN|SearchAsUser|SubGroupAttribute|SubGroupClass|Url)|Merging|Name|nCache(?:Context|Enable|ProvideFor|SOCache|Timeout)|nzFcgiCheckAuthnProvider|nzFcgiDefineProvider|Type|UserFile|zDBDLoginToReferer|zDBDQuery|zDBDRedirectQuery|zDBMType|zSendForbiddenOnFailure)|BalancerGrowth|BalancerInherit|BalancerMember|BalancerPersist|BrowserMatch|BrowserMatchNoCase|BufferedLogs|BufferSize|Cache(?:DefaultExpire|DetailHeader|DirLength|DirLevels|Disable|Enable|File|Header|IgnoreCacheControl|IgnoreHeaders|IgnoreNoLastMod|IgnoreQueryString|IgnoreURLSessionIdentifiers|KeyBaseURL|LastModifiedFactor|Lock|LockMaxAge|LockPath|MaxExpire|MaxFileSize|MinExpire|MinFileSize|NegotiatedDocs|QuickHandler|ReadSize|ReadTime|Root|Socache(?:MaxSize|MaxTime|MinTime|ReadSize|ReadTime)?|StaleOnError|StoreExpired|StoreNoStore|StorePrivate)|CGIDScriptTimeout|CGIMapExtension|CharsetDefault|CharsetOptions|CharsetSourceEnc|CheckCaseOnly|CheckSpelling|ChrootDir|ContentDigest|CookieDomain|CookieExpires|CookieName|CookieStyle|CookieTracking|CoreDumpDirectory|CustomLog|Dav|DavDepthInfinity|DavGenericLockDB|DavLockDB|DavMinTimeout|DBDExptime|DBDInitSQL|DBDKeep|DBDMax|DBDMin|DBDParams|DBDPersist|DBDPrepareSQL|DBDriver|DefaultIcon|DefaultLanguage|DefaultRuntimeDir|DefaultType|Define|Deflate(?:BufferSize|CompressionLevel|FilterNote|InflateLimitRequestBody|InflateRatio(?:Burst|Limit)|MemLevel|WindowSize)|Deny|DirectoryCheckHandler|DirectoryIndex|DirectoryIndexRedirect|DirectorySlash|DocumentRoot|DTracePrivileges|DumpIOInput|DumpIOOutput|EnableExceptionHook|EnableMMAP|EnableSendfile|Error|ErrorDocument|ErrorLog|ErrorLogFormat|Example|ExpiresActive|ExpiresByType|ExpiresDefault|ExtendedStatus|ExtFilterDefine|ExtFilterOptions|FallbackResource|FileETag|FilterChain|FilterDeclare|FilterProtocol|FilterProvider|FilterTrace|ForceLanguagePriority|ForceType|ForensicLog|GprofDir|GracefulShutdownTimeout|Group|Header|HeaderName|Heartbeat(?:Address|Listen|MaxServers|Storage)|HostnameLookups|IdentityCheck|IdentityCheckTimeout|ImapBase|ImapDefault|ImapMenu|Include|IncludeOptional|Index(?:HeadInsert|Ignore|IgnoreReset|Options|OrderDefault|StyleSheet)|InputSed|ISAPI(?:AppendLogToErrors|AppendLogToQuery|CacheFile|FakeAsync|LogNotSupported|ReadAheadBuffer)|KeepAlive|KeepAliveTimeout|KeptBodySize|LanguagePriority|LDAP(?:CacheEntries|CacheTTL|ConnectionPoolTTL|ConnectionTimeout|LibraryDebug|OpCacheEntries|OpCacheTTL|ReferralHopLimit|Referrals|Retries|RetryDelay|SharedCacheFile|SharedCacheSize|Timeout|TrustedClientCert|TrustedGlobalCert|TrustedMode|VerifyServerCert)|Limit(?:InternalRecursion|Request(?:Body|Fields|FieldSize|Line)|XMLRequestBody)|Listen|ListenBackLog|LoadFile|LoadModule|LogFormat|LogLevel|LogMessage|LuaAuthzProvider|LuaCodeCache|Lua(?:Hook(?:AccessChecker|AuthChecker|CheckUserID|Fixups|InsertFilter|Log|MapToStorage|TranslateName|TypeChecker)|Inherit|InputFilter|MapHandler|OutputFilter|PackageCPath|PackagePath|QuickHandler|Root|Scope)|Max(?:ConnectionsPerChild|KeepAliveRequests|MemFree|RangeOverlaps|RangeReversals|Ranges|RequestWorkers|SpareServers|SpareThreads|Threads)|MergeTrailers|MetaDir|MetaFiles|MetaSuffix|MimeMagicFile|MinSpareServers|MinSpareThreads|MMapFile|ModemStandard|ModMimeUsePathInfo|MultiviewsMatch|Mutex|NameVirtualHost|NoProxy|NWSSLTrustedCerts|NWSSLUpgradeable|Options|Order|OutputSed|PassEnv|PidFile|PrivilegesMode|Protocol|ProtocolEcho|Proxy(?:AddHeaders|BadHeader|Block|Domain|ErrorOverride|ExpressDBMFile|ExpressDBMType|ExpressEnable|FtpDirCharset|FtpEscapeWildcards|FtpListOnWildcard|HTML(?:BufSize|CharsetOut|DocType|Enable|Events|Extended|Fixups|Interp|Links|Meta|StripComments|URLMap)|IOBufferSize|MaxForwards|Pass(?:Inherit|InterpolateEnv|Match|Reverse|ReverseCookieDomain|ReverseCookiePath)?|PreserveHost|ReceiveBufferSize|Remote|RemoteMatch|Requests|SCGIInternalRedirect|SCGISendfile|Set|SourceAddress|Status|Timeout|Via)|ReadmeName|ReceiveBufferSize|Redirect|RedirectMatch|RedirectPermanent|RedirectTemp|ReflectorHeader|RemoteIP(?:Header|InternalProxy|InternalProxyList|ProxiesHeader|TrustedProxy|TrustedProxyList)|RemoveCharset|RemoveEncoding|RemoveHandler|RemoveInputFilter|RemoveLanguage|RemoveOutputFilter|RemoveType|RequestHeader|RequestReadTimeout|Require|Rewrite(?:Base|Cond|Engine|Map|Options|Rule)|RLimitCPU|RLimitMEM|RLimitNPROC|Satisfy|ScoreBoardFile|Script(?:Alias|AliasMatch|InterpreterSource|Log|LogBuffer|LogLength|Sock)?|SecureListen|SeeRequestTail|SendBufferSize|Server(?:Admin|Alias|Limit|Name|Path|Root|Signature|Tokens)|Session(?:Cookie(?:Name|Name2|Remove)|Crypto(?:Cipher|Driver|Passphrase|PassphraseFile)|DBD(?:CookieName|CookieName2|CookieRemove|DeleteLabel|InsertLabel|PerUser|SelectLabel|UpdateLabel)|Env|Exclude|Header|Include|MaxAge)?|SetEnv|SetEnvIf|SetEnvIfExpr|SetEnvIfNoCase|SetHandler|SetInputFilter|SetOutputFilter|SSIEndTag|SSIErrorMsg|SSIETag|SSILastModified|SSILegacyExprParser|SSIStartTag|SSITimeFormat|SSIUndefinedEcho|SSL(?:CACertificateFile|CACertificatePath|CADNRequestFile|CADNRequestPath|CARevocationCheck|CARevocationFile|CARevocationPath|CertificateChainFile|CertificateFile|CertificateKeyFile|CipherSuite|Compression|CryptoDevice|Engine|FIPS|HonorCipherOrder|InsecureRenegotiation|OCSP(?:DefaultResponder|Enable|OverrideResponder|ResponderTimeout|ResponseMaxAge|ResponseTimeSkew|UseRequestNonce)|OpenSSLConfCmd|Options|PassPhraseDialog|Protocol|Proxy(?:CACertificateFile|CACertificatePath|CARevocation(?:Check|File|Path)|CheckPeer(?:CN|Expire|Name)|CipherSuite|Engine|MachineCertificate(?:ChainFile|File|Path)|Protocol|Verify|VerifyDepth)|RandomSeed|RenegBufferSize|Require|RequireSSL|Session(?:Cache|CacheTimeout|TicketKeyFile|Tickets)|SRPUnknownUserSeed|SRPVerifierFile|Stapling(?:Cache|ErrorCacheTimeout|FakeTryLater|ForceURL|ResponderTimeout|ResponseMaxAge|ResponseTimeSkew|ReturnResponderErrors|StandardCacheTimeout)|StrictSNIVHostCheck|UserName|UseStapling|VerifyClient|VerifyDepth)|StartServers|StartThreads|Substitute|Suexec|SuexecUserGroup|ThreadLimit|ThreadsPerChild|ThreadStackSize|TimeOut|TraceEnable|TransferLog|TypesConfig|UnDefine|UndefMacro|UnsetEnv|Use|UseCanonicalName|UseCanonicalPhysicalPort|User|UserDir|VHostCGIMode|VHostCGIPrivs|VHostGroup|VHostPrivs|VHostSecure|VHostUser|Virtual(?:DocumentRoot|ScriptAlias)(?:IP)?|WatchdogInterval|XBitHack|xml2EncAlias|xml2EncDefault|xml2StartParse)\\b/im,\n      lookbehind: true,\n      alias: 'property'\n    },\n    'directive-block': {\n      pattern: /<\\/?\\b(?:Auth[nz]ProviderAlias|Directory|DirectoryMatch|Else|ElseIf|Files|FilesMatch|If|IfDefine|IfModule|IfVersion|Limit|LimitExcept|Location|LocationMatch|Macro|Proxy|Require(?:All|Any|None)|VirtualHost)\\b.*>/i,\n      inside: {\n        'directive-block': {\n          pattern: /^<\\/?\\w+/,\n          inside: {\n            punctuation: /^<\\/?/\n          },\n          alias: 'tag'\n        },\n        'directive-block-parameter': {\n          pattern: /.*[^>]/,\n          inside: {\n            punctuation: /:/,\n            string: {\n              pattern: /(\"|').*\\1/,\n              inside: {\n                variable: /[$%]\\{?(?:\\w\\.?[-+:]?)+\\}?/\n              }\n            }\n          },\n          alias: 'attr-value'\n        },\n        punctuation: />/\n      },\n      alias: 'tag'\n    },\n    'directive-flags': {\n      pattern: /\\[(?:[\\w=],?)+\\]/,\n      alias: 'keyword'\n    },\n    string: {\n      pattern: /(\"|').*\\1/,\n      inside: {\n        variable: /[$%]\\{?(?:\\w\\.?[-+:]?)+\\}?/\n      }\n    },\n    variable: /[$%]\\{?(?:\\w\\.?[-+:]?)+\\}?/,\n    regex: /\\^?.*\\$|\\^.*\\$?/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/apacheconf.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/apex.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/apex.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar refractorSql = __webpack_require__(/*! ./sql.js */ \"(ssr)/./node_modules/refractor/lang/sql.js\");\nmodule.exports = apex;\napex.displayName = 'apex';\napex.aliases = [];\nfunction apex(Prism) {\n  Prism.register(refractorSql);\n  (function (Prism) {\n    var keywords = /\\b(?:(?:after|before)(?=\\s+[a-z])|abstract|activate|and|any|array|as|asc|autonomous|begin|bigdecimal|blob|boolean|break|bulk|by|byte|case|cast|catch|char|class|collect|commit|const|continue|currency|date|datetime|decimal|default|delete|desc|do|double|else|end|enum|exception|exit|export|extends|final|finally|float|for|from|get(?=\\s*[{};])|global|goto|group|having|hint|if|implements|import|in|inner|insert|instanceof|int|integer|interface|into|join|like|limit|list|long|loop|map|merge|new|not|null|nulls|number|object|of|on|or|outer|override|package|parallel|pragma|private|protected|public|retrieve|return|rollback|select|set|short|sObject|sort|static|string|super|switch|synchronized|system|testmethod|then|this|throw|time|transaction|transient|trigger|try|undelete|update|upsert|using|virtual|void|webservice|when|where|while|(?:inherited|with|without)\\s+sharing)\\b/i;\n    var className = /\\b(?:(?=[a-z_]\\w*\\s*[<\\[])|(?!<keyword>))[A-Z_]\\w*(?:\\s*\\.\\s*[A-Z_]\\w*)*\\b(?:\\s*(?:\\[\\s*\\]|<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>))*/.source.replace(/<keyword>/g, function () {\n      return keywords.source;\n    });\n    /** @param {string} pattern */\n    function insertClassName(pattern) {\n      return RegExp(pattern.replace(/<CLASS-NAME>/g, function () {\n        return className;\n      }), 'i');\n    }\n    var classNameInside = {\n      keyword: keywords,\n      punctuation: /[()\\[\\]{};,:.<>]/\n    };\n    Prism.languages.apex = {\n      comment: Prism.languages.clike.comment,\n      string: Prism.languages.clike.string,\n      sql: {\n        pattern: /((?:[=,({:]|\\breturn)\\s*)\\[[^\\[\\]]*\\]/i,\n        lookbehind: true,\n        greedy: true,\n        alias: 'language-sql',\n        inside: Prism.languages.sql\n      },\n      annotation: {\n        pattern: /@\\w+\\b/,\n        alias: 'punctuation'\n      },\n      'class-name': [{\n        pattern: insertClassName(/(\\b(?:class|enum|extends|implements|instanceof|interface|new|trigger\\s+\\w+\\s+on)\\s+)<CLASS-NAME>/.source),\n        lookbehind: true,\n        inside: classNameInside\n      }, {\n        // cast\n        pattern: insertClassName(/(\\(\\s*)<CLASS-NAME>(?=\\s*\\)\\s*[\\w(])/.source),\n        lookbehind: true,\n        inside: classNameInside\n      }, {\n        // variable/parameter declaration and return types\n        pattern: insertClassName(/<CLASS-NAME>(?=\\s*\\w+\\s*[;=,(){:])/.source),\n        inside: classNameInside\n      }],\n      trigger: {\n        pattern: /(\\btrigger\\s+)\\w+\\b/i,\n        lookbehind: true,\n        alias: 'class-name'\n      },\n      keyword: keywords,\n      \"function\": /\\b[a-z_]\\w*(?=\\s*\\()/i,\n      \"boolean\": /\\b(?:false|true)\\b/i,\n      number: /(?:\\B\\.\\d+|\\b\\d+(?:\\.\\d+|L)?)\\b/i,\n      operator: /[!=](?:==?)?|\\?\\.?|&&|\\|\\||--|\\+\\+|[-+*/^&|]=?|:|<<?=?|>{1,3}=?/,\n      punctuation: /[()\\[\\]{};,.]/\n    };\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvYXBleC5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFDWixJQUFJQSxZQUFZLEdBQUdDLG1CQUFPLENBQUMsNERBQVUsQ0FBQztBQUN0Q0MsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLElBQUk7QUFDckJBLElBQUksQ0FBQ0MsV0FBVyxHQUFHLE1BQU07QUFDekJELElBQUksQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDakIsU0FBU0YsSUFBSUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ25CQSxLQUFLLENBQUNDLFFBQVEsQ0FBQ1IsWUFBWSxDQUFDO0VBQzNCLENBQUMsVUFBVU8sS0FBSyxFQUFFO0lBQ2pCLElBQUlFLFFBQVEsR0FDVix3MkJBQXcyQjtJQUMxMkIsSUFBSUMsU0FBUyxHQUNYLGtJQUFrSSxDQUFDQyxNQUFNLENBQUNDLE9BQU8sQ0FDL0ksWUFBWSxFQUNaLFlBQVk7TUFDVixPQUFPSCxRQUFRLENBQUNFLE1BQU07SUFDeEIsQ0FDRixDQUFDO0lBQ0g7SUFDQSxTQUFTRSxlQUFlQSxDQUFDQyxPQUFPLEVBQUU7TUFDaEMsT0FBT0MsTUFBTSxDQUNYRCxPQUFPLENBQUNGLE9BQU8sQ0FBQyxlQUFlLEVBQUUsWUFBWTtRQUMzQyxPQUFPRixTQUFTO01BQ2xCLENBQUMsQ0FBQyxFQUNGLEdBQ0YsQ0FBQztJQUNIO0lBQ0EsSUFBSU0sZUFBZSxHQUFHO01BQ3BCQyxPQUFPLEVBQUVSLFFBQVE7TUFDakJTLFdBQVcsRUFBRTtJQUNmLENBQUM7SUFDRFgsS0FBSyxDQUFDWSxTQUFTLENBQUNmLElBQUksR0FBRztNQUNyQmdCLE9BQU8sRUFBRWIsS0FBSyxDQUFDWSxTQUFTLENBQUNFLEtBQUssQ0FBQ0QsT0FBTztNQUN0Q0UsTUFBTSxFQUFFZixLQUFLLENBQUNZLFNBQVMsQ0FBQ0UsS0FBSyxDQUFDQyxNQUFNO01BQ3BDQyxHQUFHLEVBQUU7UUFDSFQsT0FBTyxFQUFFLHdDQUF3QztRQUNqRFUsVUFBVSxFQUFFLElBQUk7UUFDaEJDLE1BQU0sRUFBRSxJQUFJO1FBQ1pDLEtBQUssRUFBRSxjQUFjO1FBQ3JCQyxNQUFNLEVBQUVwQixLQUFLLENBQUNZLFNBQVMsQ0FBQ0k7TUFDMUIsQ0FBQztNQUNESyxVQUFVLEVBQUU7UUFDVmQsT0FBTyxFQUFFLFFBQVE7UUFDakJZLEtBQUssRUFBRTtNQUNULENBQUM7TUFDRCxZQUFZLEVBQUUsQ0FDWjtRQUNFWixPQUFPLEVBQUVELGVBQWUsQ0FDdEIsa0dBQWtHLENBQy9GRixNQUNMLENBQUM7UUFDRGEsVUFBVSxFQUFFLElBQUk7UUFDaEJHLE1BQU0sRUFBRVg7TUFDVixDQUFDLEVBQ0Q7UUFDRTtRQUNBRixPQUFPLEVBQUVELGVBQWUsQ0FDdEIsc0NBQXNDLENBQUNGLE1BQ3pDLENBQUM7UUFDRGEsVUFBVSxFQUFFLElBQUk7UUFDaEJHLE1BQU0sRUFBRVg7TUFDVixDQUFDLEVBQ0Q7UUFDRTtRQUNBRixPQUFPLEVBQUVELGVBQWUsQ0FBQyxvQ0FBb0MsQ0FBQ0YsTUFBTSxDQUFDO1FBQ3JFZ0IsTUFBTSxFQUFFWDtNQUNWLENBQUMsQ0FDRjtNQUNEYSxPQUFPLEVBQUU7UUFDUGYsT0FBTyxFQUFFLHNCQUFzQjtRQUMvQlUsVUFBVSxFQUFFLElBQUk7UUFDaEJFLEtBQUssRUFBRTtNQUNULENBQUM7TUFDRFQsT0FBTyxFQUFFUixRQUFRO01BQ2pCLFlBQVUsdUJBQXVCO01BQ2pDLFdBQVMscUJBQXFCO01BQzlCcUIsTUFBTSxFQUFFLGtDQUFrQztNQUMxQ0MsUUFBUSxFQUNOLGlFQUFpRTtNQUNuRWIsV0FBVyxFQUFFO0lBQ2YsQ0FBQztFQUNILENBQUMsRUFBRVgsS0FBSyxDQUFDO0FBQ1giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxhcGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xudmFyIHJlZnJhY3RvclNxbCA9IHJlcXVpcmUoJy4vc3FsLmpzJylcbm1vZHVsZS5leHBvcnRzID0gYXBleFxuYXBleC5kaXNwbGF5TmFtZSA9ICdhcGV4J1xuYXBleC5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIGFwZXgoUHJpc20pIHtcbiAgUHJpc20ucmVnaXN0ZXIocmVmcmFjdG9yU3FsKVxuICA7KGZ1bmN0aW9uIChQcmlzbSkge1xuICAgIHZhciBrZXl3b3JkcyA9XG4gICAgICAvXFxiKD86KD86YWZ0ZXJ8YmVmb3JlKSg/PVxccytbYS16XSl8YWJzdHJhY3R8YWN0aXZhdGV8YW5kfGFueXxhcnJheXxhc3xhc2N8YXV0b25vbW91c3xiZWdpbnxiaWdkZWNpbWFsfGJsb2J8Ym9vbGVhbnxicmVha3xidWxrfGJ5fGJ5dGV8Y2FzZXxjYXN0fGNhdGNofGNoYXJ8Y2xhc3N8Y29sbGVjdHxjb21taXR8Y29uc3R8Y29udGludWV8Y3VycmVuY3l8ZGF0ZXxkYXRldGltZXxkZWNpbWFsfGRlZmF1bHR8ZGVsZXRlfGRlc2N8ZG98ZG91YmxlfGVsc2V8ZW5kfGVudW18ZXhjZXB0aW9ufGV4aXR8ZXhwb3J0fGV4dGVuZHN8ZmluYWx8ZmluYWxseXxmbG9hdHxmb3J8ZnJvbXxnZXQoPz1cXHMqW3t9O10pfGdsb2JhbHxnb3RvfGdyb3VwfGhhdmluZ3xoaW50fGlmfGltcGxlbWVudHN8aW1wb3J0fGlufGlubmVyfGluc2VydHxpbnN0YW5jZW9mfGludHxpbnRlZ2VyfGludGVyZmFjZXxpbnRvfGpvaW58bGlrZXxsaW1pdHxsaXN0fGxvbmd8bG9vcHxtYXB8bWVyZ2V8bmV3fG5vdHxudWxsfG51bGxzfG51bWJlcnxvYmplY3R8b2Z8b258b3J8b3V0ZXJ8b3ZlcnJpZGV8cGFja2FnZXxwYXJhbGxlbHxwcmFnbWF8cHJpdmF0ZXxwcm90ZWN0ZWR8cHVibGljfHJldHJpZXZlfHJldHVybnxyb2xsYmFja3xzZWxlY3R8c2V0fHNob3J0fHNPYmplY3R8c29ydHxzdGF0aWN8c3RyaW5nfHN1cGVyfHN3aXRjaHxzeW5jaHJvbml6ZWR8c3lzdGVtfHRlc3RtZXRob2R8dGhlbnx0aGlzfHRocm93fHRpbWV8dHJhbnNhY3Rpb258dHJhbnNpZW50fHRyaWdnZXJ8dHJ5fHVuZGVsZXRlfHVwZGF0ZXx1cHNlcnR8dXNpbmd8dmlydHVhbHx2b2lkfHdlYnNlcnZpY2V8d2hlbnx3aGVyZXx3aGlsZXwoPzppbmhlcml0ZWR8d2l0aHx3aXRob3V0KVxccytzaGFyaW5nKVxcYi9pXG4gICAgdmFyIGNsYXNzTmFtZSA9XG4gICAgICAvXFxiKD86KD89W2Etel9dXFx3KlxccypbPFxcW10pfCg/ITxrZXl3b3JkPikpW0EtWl9dXFx3Kig/OlxccypcXC5cXHMqW0EtWl9dXFx3KikqXFxiKD86XFxzKig/OlxcW1xccypcXF18PCg/OltePD5dfDwoPzpbXjw+XXw8W148Pl0qPikqPikqPikpKi8uc291cmNlLnJlcGxhY2UoXG4gICAgICAgIC88a2V5d29yZD4vZyxcbiAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBrZXl3b3Jkcy5zb3VyY2VcbiAgICAgICAgfVxuICAgICAgKVxuICAgIC8qKiBAcGFyYW0ge3N0cmluZ30gcGF0dGVybiAqL1xuICAgIGZ1bmN0aW9uIGluc2VydENsYXNzTmFtZShwYXR0ZXJuKSB7XG4gICAgICByZXR1cm4gUmVnRXhwKFxuICAgICAgICBwYXR0ZXJuLnJlcGxhY2UoLzxDTEFTUy1OQU1FPi9nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIGNsYXNzTmFtZVxuICAgICAgICB9KSxcbiAgICAgICAgJ2knXG4gICAgICApXG4gICAgfVxuICAgIHZhciBjbGFzc05hbWVJbnNpZGUgPSB7XG4gICAgICBrZXl3b3JkOiBrZXl3b3JkcyxcbiAgICAgIHB1bmN0dWF0aW9uOiAvWygpXFxbXFxde307LDouPD5dL1xuICAgIH1cbiAgICBQcmlzbS5sYW5ndWFnZXMuYXBleCA9IHtcbiAgICAgIGNvbW1lbnQ6IFByaXNtLmxhbmd1YWdlcy5jbGlrZS5jb21tZW50LFxuICAgICAgc3RyaW5nOiBQcmlzbS5sYW5ndWFnZXMuY2xpa2Uuc3RyaW5nLFxuICAgICAgc3FsOiB7XG4gICAgICAgIHBhdHRlcm46IC8oKD86Wz0sKHs6XXxcXGJyZXR1cm4pXFxzKilcXFtbXlxcW1xcXV0qXFxdL2ksXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgICAgYWxpYXM6ICdsYW5ndWFnZS1zcWwnLFxuICAgICAgICBpbnNpZGU6IFByaXNtLmxhbmd1YWdlcy5zcWxcbiAgICAgIH0sXG4gICAgICBhbm5vdGF0aW9uOiB7XG4gICAgICAgIHBhdHRlcm46IC9AXFx3K1xcYi8sXG4gICAgICAgIGFsaWFzOiAncHVuY3R1YXRpb24nXG4gICAgICB9LFxuICAgICAgJ2NsYXNzLW5hbWUnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwYXR0ZXJuOiBpbnNlcnRDbGFzc05hbWUoXG4gICAgICAgICAgICAvKFxcYig/OmNsYXNzfGVudW18ZXh0ZW5kc3xpbXBsZW1lbnRzfGluc3RhbmNlb2Z8aW50ZXJmYWNlfG5ld3x0cmlnZ2VyXFxzK1xcdytcXHMrb24pXFxzKyk8Q0xBU1MtTkFNRT4vXG4gICAgICAgICAgICAgIC5zb3VyY2VcbiAgICAgICAgICApLFxuICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgICAgaW5zaWRlOiBjbGFzc05hbWVJbnNpZGVcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIC8vIGNhc3RcbiAgICAgICAgICBwYXR0ZXJuOiBpbnNlcnRDbGFzc05hbWUoXG4gICAgICAgICAgICAvKFxcKFxccyopPENMQVNTLU5BTUU+KD89XFxzKlxcKVxccypbXFx3KF0pLy5zb3VyY2VcbiAgICAgICAgICApLFxuICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgICAgaW5zaWRlOiBjbGFzc05hbWVJbnNpZGVcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIC8vIHZhcmlhYmxlL3BhcmFtZXRlciBkZWNsYXJhdGlvbiBhbmQgcmV0dXJuIHR5cGVzXG4gICAgICAgICAgcGF0dGVybjogaW5zZXJ0Q2xhc3NOYW1lKC88Q0xBU1MtTkFNRT4oPz1cXHMqXFx3K1xccypbOz0sKCl7Ol0pLy5zb3VyY2UpLFxuICAgICAgICAgIGluc2lkZTogY2xhc3NOYW1lSW5zaWRlXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICB0cmlnZ2VyOiB7XG4gICAgICAgIHBhdHRlcm46IC8oXFxidHJpZ2dlclxccyspXFx3K1xcYi9pLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICBhbGlhczogJ2NsYXNzLW5hbWUnXG4gICAgICB9LFxuICAgICAga2V5d29yZDoga2V5d29yZHMsXG4gICAgICBmdW5jdGlvbjogL1xcYlthLXpfXVxcdyooPz1cXHMqXFwoKS9pLFxuICAgICAgYm9vbGVhbjogL1xcYig/OmZhbHNlfHRydWUpXFxiL2ksXG4gICAgICBudW1iZXI6IC8oPzpcXEJcXC5cXGQrfFxcYlxcZCsoPzpcXC5cXGQrfEwpPylcXGIvaSxcbiAgICAgIG9wZXJhdG9yOlxuICAgICAgICAvWyE9XSg/Oj09Pyk/fFxcP1xcLj98JiZ8XFx8XFx8fC0tfFxcK1xcK3xbLSsqL14mfF09P3w6fDw8Pz0/fD57MSwzfT0/LyxcbiAgICAgIHB1bmN0dWF0aW9uOiAvWygpXFxbXFxde307LC5dL1xuICAgIH1cbiAgfSkoUHJpc20pXG59XG4iXSwibmFtZXMiOlsicmVmcmFjdG9yU3FsIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJhcGV4IiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJyZWdpc3RlciIsImtleXdvcmRzIiwiY2xhc3NOYW1lIiwic291cmNlIiwicmVwbGFjZSIsImluc2VydENsYXNzTmFtZSIsInBhdHRlcm4iLCJSZWdFeHAiLCJjbGFzc05hbWVJbnNpZGUiLCJrZXl3b3JkIiwicHVuY3R1YXRpb24iLCJsYW5ndWFnZXMiLCJjb21tZW50IiwiY2xpa2UiLCJzdHJpbmciLCJzcWwiLCJsb29rYmVoaW5kIiwiZ3JlZWR5IiwiYWxpYXMiLCJpbnNpZGUiLCJhbm5vdGF0aW9uIiwidHJpZ2dlciIsIm51bWJlciIsIm9wZXJhdG9yIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/apex.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/apl.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/apl.js ***!
  \********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = apl;\napl.displayName = 'apl';\napl.aliases = [];\nfunction apl(Prism) {\n  Prism.languages.apl = {\n    comment: /(?:⍝|#[! ]).*$/m,\n    string: {\n      pattern: /'(?:[^'\\r\\n]|'')*'/,\n      greedy: true\n    },\n    number: /¯?(?:\\d*\\.?\\b\\d+(?:e[+¯]?\\d+)?|¯|∞)(?:j¯?(?:(?:\\d+(?:\\.\\d+)?|\\.\\d+)(?:e[+¯]?\\d+)?|¯|∞))?/i,\n    statement: /:[A-Z][a-z][A-Za-z]*\\b/,\n    'system-function': {\n      pattern: /⎕[A-Z]+/i,\n      alias: 'function'\n    },\n    constant: /[⍬⌾#⎕⍞]/,\n    \"function\": /[-+×÷⌈⌊∣|⍳⍸?*⍟○!⌹<≤=>≥≠≡≢∊⍷∪∩~∨∧⍱⍲⍴,⍪⌽⊖⍉↑↓⊂⊃⊆⊇⌷⍋⍒⊤⊥⍕⍎⊣⊢⍁⍂≈⍯↗¤→]/,\n    'monadic-operator': {\n      pattern: /[\\\\\\/⌿⍀¨⍨⌶&∥]/,\n      alias: 'operator'\n    },\n    'dyadic-operator': {\n      pattern: /[.⍣⍠⍤∘⌸@⌺⍥]/,\n      alias: 'operator'\n    },\n    assignment: {\n      pattern: /←/,\n      alias: 'keyword'\n    },\n    punctuation: /[\\[;\\]()◇⋄]/,\n    dfn: {\n      pattern: /[{}⍺⍵⍶⍹∇⍫:]/,\n      alias: 'builtin'\n    }\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvYXBsLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsR0FBRztBQUNwQkEsR0FBRyxDQUFDQyxXQUFXLEdBQUcsS0FBSztBQUN2QkQsR0FBRyxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNoQixTQUFTRixHQUFHQSxDQUFDRyxLQUFLLEVBQUU7RUFDbEJBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixHQUFHLEdBQUc7SUFDcEJLLE9BQU8sRUFBRSxpQkFBaUI7SUFDMUJDLE1BQU0sRUFBRTtNQUNOQyxPQUFPLEVBQUUsb0JBQW9CO01BQzdCQyxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0RDLE1BQU0sRUFDSiwyRkFBMkY7SUFDN0ZDLFNBQVMsRUFBRSx3QkFBd0I7SUFDbkMsaUJBQWlCLEVBQUU7TUFDakJILE9BQU8sRUFBRSxVQUFVO01BQ25CSSxLQUFLLEVBQUU7SUFDVCxDQUFDO0lBQ0RDLFFBQVEsRUFBRSxTQUFTO0lBQ25CLFlBQVUsaUVBQWlFO0lBQzNFLGtCQUFrQixFQUFFO01BQ2xCTCxPQUFPLEVBQUUsZUFBZTtNQUN4QkksS0FBSyxFQUFFO0lBQ1QsQ0FBQztJQUNELGlCQUFpQixFQUFFO01BQ2pCSixPQUFPLEVBQUUsYUFBYTtNQUN0QkksS0FBSyxFQUFFO0lBQ1QsQ0FBQztJQUNERSxVQUFVLEVBQUU7TUFDVk4sT0FBTyxFQUFFLEdBQUc7TUFDWkksS0FBSyxFQUFFO0lBQ1QsQ0FBQztJQUNERyxXQUFXLEVBQUUsYUFBYTtJQUMxQkMsR0FBRyxFQUFFO01BQ0hSLE9BQU8sRUFBRSxhQUFhO01BQ3RCSSxLQUFLLEVBQUU7SUFDVDtFQUNGLENBQUM7QUFDSCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXGFwbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBhcGxcbmFwbC5kaXNwbGF5TmFtZSA9ICdhcGwnXG5hcGwuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBhcGwoUHJpc20pIHtcbiAgUHJpc20ubGFuZ3VhZ2VzLmFwbCA9IHtcbiAgICBjb21tZW50OiAvKD864o2dfCNbISBdKS4qJC9tLFxuICAgIHN0cmluZzoge1xuICAgICAgcGF0dGVybjogLycoPzpbXidcXHJcXG5dfCcnKSonLyxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgbnVtYmVyOlxuICAgICAgL8KvPyg/OlxcZCpcXC4/XFxiXFxkKyg/OmVbK8KvXT9cXGQrKT98wq984oieKSg/OmrCrz8oPzooPzpcXGQrKD86XFwuXFxkKyk/fFxcLlxcZCspKD86ZVsrwq9dP1xcZCspP3zCr3ziiJ4pKT8vaSxcbiAgICBzdGF0ZW1lbnQ6IC86W0EtWl1bYS16XVtBLVphLXpdKlxcYi8sXG4gICAgJ3N5c3RlbS1mdW5jdGlvbic6IHtcbiAgICAgIHBhdHRlcm46IC/ijpVbQS1aXSsvaSxcbiAgICAgIGFsaWFzOiAnZnVuY3Rpb24nXG4gICAgfSxcbiAgICBjb25zdGFudDogL1vijazijL4j4o6V4o2eXS8sXG4gICAgZnVuY3Rpb246IC9bLSvDl8O34oyI4oyK4oijfOKNs+KNuD8q4o2f4peLIeKMuTziiaQ9PuKJpeKJoOKJoeKJouKIiuKNt+KIquKIqX7iiKjiiKfijbHijbLijbQs4o2q4oy94oqW4o2J4oaR4oaT4oqC4oqD4oqG4oqH4oy34o2L4o2S4oqk4oql4o2V4o2O4oqj4oqi4o2B4o2C4omI4o2v4oaXwqTihpJdLyxcbiAgICAnbW9uYWRpYy1vcGVyYXRvcic6IHtcbiAgICAgIHBhdHRlcm46IC9bXFxcXFxcL+KMv+KNgMKo4o2o4oy2JuKIpV0vLFxuICAgICAgYWxpYXM6ICdvcGVyYXRvcidcbiAgICB9LFxuICAgICdkeWFkaWMtb3BlcmF0b3InOiB7XG4gICAgICBwYXR0ZXJuOiAvWy7ijaPijaDijaTiiJjijLhA4oy64o2lXS8sXG4gICAgICBhbGlhczogJ29wZXJhdG9yJ1xuICAgIH0sXG4gICAgYXNzaWdubWVudDoge1xuICAgICAgcGF0dGVybjogL+KGkC8sXG4gICAgICBhbGlhczogJ2tleXdvcmQnXG4gICAgfSxcbiAgICBwdW5jdHVhdGlvbjogL1tcXFs7XFxdKCnil4fii4RdLyxcbiAgICBkZm46IHtcbiAgICAgIHBhdHRlcm46IC9be33ijbrijbXijbbijbniiIfijas6XS8sXG4gICAgICBhbGlhczogJ2J1aWx0aW4nXG4gICAgfVxuICB9XG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImFwbCIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwiY29tbWVudCIsInN0cmluZyIsInBhdHRlcm4iLCJncmVlZHkiLCJudW1iZXIiLCJzdGF0ZW1lbnQiLCJhbGlhcyIsImNvbnN0YW50IiwiYXNzaWdubWVudCIsInB1bmN0dWF0aW9uIiwiZGZuIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/apl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/applescript.js":
/*!****************************************************!*\
  !*** ./node_modules/refractor/lang/applescript.js ***!
  \****************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = applescript;\napplescript.displayName = 'applescript';\napplescript.aliases = [];\nfunction applescript(Prism) {\n  Prism.languages.applescript = {\n    comment: [\n    // Allow one level of nesting\n    /\\(\\*(?:\\(\\*(?:[^*]|\\*(?!\\)))*\\*\\)|(?!\\(\\*)[\\s\\S])*?\\*\\)/, /--.+/, /#.+/],\n    string: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n    number: /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e-?\\d+)?\\b/i,\n    operator: [/[&=≠≤≥*+\\-\\/÷^]|[<>]=?/, /\\b(?:(?:begin|end|start)s? with|(?:contains?|(?:does not|doesn't) contain)|(?:is|isn't|is not) (?:contained by|in)|(?:(?:is|isn't|is not) )?(?:greater|less) than(?: or equal)?(?: to)?|(?:comes|(?:does not|doesn't) come) (?:after|before)|(?:is|isn't|is not) equal(?: to)?|(?:(?:does not|doesn't) equal|equal to|equals|is not|isn't)|(?:a )?(?:ref(?: to)?|reference to)|(?:and|as|div|mod|not|or))\\b/],\n    keyword: /\\b(?:about|above|after|against|apart from|around|aside from|at|back|before|beginning|behind|below|beneath|beside|between|but|by|considering|continue|copy|does|eighth|else|end|equal|error|every|exit|false|fifth|first|for|fourth|from|front|get|given|global|if|ignoring|in|instead of|into|is|it|its|last|local|me|middle|my|ninth|of|on|onto|out of|over|prop|property|put|repeat|return|returning|second|set|seventh|since|sixth|some|tell|tenth|that|the|then|third|through|thru|timeout|times|to|transaction|true|try|until|where|while|whose|with|without)\\b/,\n    'class-name': /\\b(?:POSIX file|RGB color|alias|application|boolean|centimeters|centimetres|class|constant|cubic centimeters|cubic centimetres|cubic feet|cubic inches|cubic meters|cubic metres|cubic yards|date|degrees Celsius|degrees Fahrenheit|degrees Kelvin|feet|file|gallons|grams|inches|integer|kilograms|kilometers|kilometres|list|liters|litres|meters|metres|miles|number|ounces|pounds|quarts|real|record|reference|script|square feet|square kilometers|square kilometres|square meters|square metres|square miles|square yards|text|yards)\\b/,\n    punctuation: /[{}():,¬«»《》]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvYXBwbGVzY3JpcHQuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxXQUFXO0FBQzVCQSxXQUFXLENBQUNDLFdBQVcsR0FBRyxhQUFhO0FBQ3ZDRCxXQUFXLENBQUNFLE9BQU8sR0FBRyxFQUFFO0FBQ3hCLFNBQVNGLFdBQVdBLENBQUNHLEtBQUssRUFBRTtFQUMxQkEsS0FBSyxDQUFDQyxTQUFTLENBQUNKLFdBQVcsR0FBRztJQUM1QkssT0FBTyxFQUFFO0lBQ1A7SUFDQSx5REFBeUQsRUFDekQsTUFBTSxFQUNOLEtBQUssQ0FDTjtJQUNEQyxNQUFNLEVBQUUsdUJBQXVCO0lBQy9CQyxNQUFNLEVBQUUsMkNBQTJDO0lBQ25EQyxRQUFRLEVBQUUsQ0FDUix3QkFBd0IsRUFDeEIsNllBQTZZLENBQzlZO0lBQ0RDLE9BQU8sRUFDTCxzaUJBQXNpQjtJQUN4aUIsWUFBWSxFQUNWLGdoQkFBZ2hCO0lBQ2xoQkMsV0FBVyxFQUFFO0VBQ2YsQ0FBQztBQUNIIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcYXBwbGVzY3JpcHQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gYXBwbGVzY3JpcHRcbmFwcGxlc2NyaXB0LmRpc3BsYXlOYW1lID0gJ2FwcGxlc2NyaXB0J1xuYXBwbGVzY3JpcHQuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBhcHBsZXNjcmlwdChQcmlzbSkge1xuICBQcmlzbS5sYW5ndWFnZXMuYXBwbGVzY3JpcHQgPSB7XG4gICAgY29tbWVudDogW1xuICAgICAgLy8gQWxsb3cgb25lIGxldmVsIG9mIG5lc3RpbmdcbiAgICAgIC9cXChcXCooPzpcXChcXCooPzpbXipdfFxcKig/IVxcKSkpKlxcKlxcKXwoPyFcXChcXCopW1xcc1xcU10pKj9cXCpcXCkvLFxuICAgICAgLy0tLisvLFxuICAgICAgLyMuKy9cbiAgICBdLFxuICAgIHN0cmluZzogL1wiKD86XFxcXC58W15cIlxcXFxcXHJcXG5dKSpcIi8sXG4gICAgbnVtYmVyOiAvKD86XFxiXFxkKyg/OlxcLlxcZCopP3xcXEJcXC5cXGQrKSg/OmUtP1xcZCspP1xcYi9pLFxuICAgIG9wZXJhdG9yOiBbXG4gICAgICAvWyY94omg4omk4omlKitcXC1cXC/Dt15dfFs8Pl09Py8sXG4gICAgICAvXFxiKD86KD86YmVnaW58ZW5kfHN0YXJ0KXM/IHdpdGh8KD86Y29udGFpbnM/fCg/OmRvZXMgbm90fGRvZXNuJ3QpIGNvbnRhaW4pfCg/OmlzfGlzbid0fGlzIG5vdCkgKD86Y29udGFpbmVkIGJ5fGluKXwoPzooPzppc3xpc24ndHxpcyBub3QpICk/KD86Z3JlYXRlcnxsZXNzKSB0aGFuKD86IG9yIGVxdWFsKT8oPzogdG8pP3woPzpjb21lc3woPzpkb2VzIG5vdHxkb2Vzbid0KSBjb21lKSAoPzphZnRlcnxiZWZvcmUpfCg/OmlzfGlzbid0fGlzIG5vdCkgZXF1YWwoPzogdG8pP3woPzooPzpkb2VzIG5vdHxkb2Vzbid0KSBlcXVhbHxlcXVhbCB0b3xlcXVhbHN8aXMgbm90fGlzbid0KXwoPzphICk/KD86cmVmKD86IHRvKT98cmVmZXJlbmNlIHRvKXwoPzphbmR8YXN8ZGl2fG1vZHxub3R8b3IpKVxcYi9cbiAgICBdLFxuICAgIGtleXdvcmQ6XG4gICAgICAvXFxiKD86YWJvdXR8YWJvdmV8YWZ0ZXJ8YWdhaW5zdHxhcGFydCBmcm9tfGFyb3VuZHxhc2lkZSBmcm9tfGF0fGJhY2t8YmVmb3JlfGJlZ2lubmluZ3xiZWhpbmR8YmVsb3d8YmVuZWF0aHxiZXNpZGV8YmV0d2VlbnxidXR8Ynl8Y29uc2lkZXJpbmd8Y29udGludWV8Y29weXxkb2VzfGVpZ2h0aHxlbHNlfGVuZHxlcXVhbHxlcnJvcnxldmVyeXxleGl0fGZhbHNlfGZpZnRofGZpcnN0fGZvcnxmb3VydGh8ZnJvbXxmcm9udHxnZXR8Z2l2ZW58Z2xvYmFsfGlmfGlnbm9yaW5nfGlufGluc3RlYWQgb2Z8aW50b3xpc3xpdHxpdHN8bGFzdHxsb2NhbHxtZXxtaWRkbGV8bXl8bmludGh8b2Z8b258b250b3xvdXQgb2Z8b3Zlcnxwcm9wfHByb3BlcnR5fHB1dHxyZXBlYXR8cmV0dXJufHJldHVybmluZ3xzZWNvbmR8c2V0fHNldmVudGh8c2luY2V8c2l4dGh8c29tZXx0ZWxsfHRlbnRofHRoYXR8dGhlfHRoZW58dGhpcmR8dGhyb3VnaHx0aHJ1fHRpbWVvdXR8dGltZXN8dG98dHJhbnNhY3Rpb258dHJ1ZXx0cnl8dW50aWx8d2hlcmV8d2hpbGV8d2hvc2V8d2l0aHx3aXRob3V0KVxcYi8sXG4gICAgJ2NsYXNzLW5hbWUnOlxuICAgICAgL1xcYig/OlBPU0lYIGZpbGV8UkdCIGNvbG9yfGFsaWFzfGFwcGxpY2F0aW9ufGJvb2xlYW58Y2VudGltZXRlcnN8Y2VudGltZXRyZXN8Y2xhc3N8Y29uc3RhbnR8Y3ViaWMgY2VudGltZXRlcnN8Y3ViaWMgY2VudGltZXRyZXN8Y3ViaWMgZmVldHxjdWJpYyBpbmNoZXN8Y3ViaWMgbWV0ZXJzfGN1YmljIG1ldHJlc3xjdWJpYyB5YXJkc3xkYXRlfGRlZ3JlZXMgQ2Vsc2l1c3xkZWdyZWVzIEZhaHJlbmhlaXR8ZGVncmVlcyBLZWx2aW58ZmVldHxmaWxlfGdhbGxvbnN8Z3JhbXN8aW5jaGVzfGludGVnZXJ8a2lsb2dyYW1zfGtpbG9tZXRlcnN8a2lsb21ldHJlc3xsaXN0fGxpdGVyc3xsaXRyZXN8bWV0ZXJzfG1ldHJlc3xtaWxlc3xudW1iZXJ8b3VuY2VzfHBvdW5kc3xxdWFydHN8cmVhbHxyZWNvcmR8cmVmZXJlbmNlfHNjcmlwdHxzcXVhcmUgZmVldHxzcXVhcmUga2lsb21ldGVyc3xzcXVhcmUga2lsb21ldHJlc3xzcXVhcmUgbWV0ZXJzfHNxdWFyZSBtZXRyZXN8c3F1YXJlIG1pbGVzfHNxdWFyZSB5YXJkc3x0ZXh0fHlhcmRzKVxcYi8sXG4gICAgcHVuY3R1YXRpb246IC9be30oKToswqzCq8K744CK44CLXS9cbiAgfVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJhcHBsZXNjcmlwdCIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwiY29tbWVudCIsInN0cmluZyIsIm51bWJlciIsIm9wZXJhdG9yIiwia2V5d29yZCIsInB1bmN0dWF0aW9uIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/applescript.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/aql.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/aql.js ***!
  \********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = aql;\naql.displayName = 'aql';\naql.aliases = [];\nfunction aql(Prism) {\n  Prism.languages.aql = {\n    comment: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,\n    property: {\n      pattern: /([{,]\\s*)(?:(?!\\d)\\w+|([\"'´`])(?:(?!\\2)[^\\\\\\r\\n]|\\\\.)*\\2)(?=\\s*:)/,\n      lookbehind: true,\n      greedy: true\n    },\n    string: {\n      pattern: /([\"'])(?:(?!\\1)[^\\\\\\r\\n]|\\\\.)*\\1/,\n      greedy: true\n    },\n    identifier: {\n      pattern: /([´`])(?:(?!\\1)[^\\\\\\r\\n]|\\\\.)*\\1/,\n      greedy: true\n    },\n    variable: /@@?\\w+/,\n    keyword: [{\n      pattern: /(\\bWITH\\s+)COUNT(?=\\s+INTO\\b)/i,\n      lookbehind: true\n    }, /\\b(?:AGGREGATE|ALL|AND|ANY|ASC|COLLECT|DESC|DISTINCT|FILTER|FOR|GRAPH|IN|INBOUND|INSERT|INTO|K_PATHS|K_SHORTEST_PATHS|LET|LIKE|LIMIT|NONE|NOT|NULL|OR|OUTBOUND|REMOVE|REPLACE|RETURN|SHORTEST_PATH|SORT|UPDATE|UPSERT|WINDOW|WITH)\\b/i,\n    // pseudo keywords get a lookbehind to avoid false positives\n    {\n      pattern: /(^|[^\\w.[])(?:KEEP|PRUNE|SEARCH|TO)\\b/i,\n      lookbehind: true\n    }, {\n      pattern: /(^|[^\\w.[])(?:CURRENT|NEW|OLD)\\b/,\n      lookbehind: true\n    }, {\n      pattern: /\\bOPTIONS(?=\\s*\\{)/i\n    }],\n    \"function\": /\\b(?!\\d)\\w+(?=\\s*\\()/,\n    \"boolean\": /\\b(?:false|true)\\b/i,\n    range: {\n      pattern: /\\.\\./,\n      alias: 'operator'\n    },\n    number: [/\\b0b[01]+/i, /\\b0x[0-9a-f]+/i, /(?:\\B\\.\\d+|\\b(?:0|[1-9]\\d*)(?:\\.\\d+)?)(?:e[+-]?\\d+)?/i],\n    operator: /\\*{2,}|[=!]~|[!=<>]=?|&&|\\|\\||[-+*/%]/,\n    punctuation: /::|[?.:,;()[\\]{}]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvYXFsLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsR0FBRztBQUNwQkEsR0FBRyxDQUFDQyxXQUFXLEdBQUcsS0FBSztBQUN2QkQsR0FBRyxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNoQixTQUFTRixHQUFHQSxDQUFDRyxLQUFLLEVBQUU7RUFDbEJBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixHQUFHLEdBQUc7SUFDcEJLLE9BQU8sRUFBRSx5QkFBeUI7SUFDbENDLFFBQVEsRUFBRTtNQUNSQyxPQUFPLEVBQ0wsbUVBQW1FO01BQ3JFQyxVQUFVLEVBQUUsSUFBSTtNQUNoQkMsTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUNEQyxNQUFNLEVBQUU7TUFDTkgsT0FBTyxFQUFFLGtDQUFrQztNQUMzQ0UsTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUNERSxVQUFVLEVBQUU7TUFDVkosT0FBTyxFQUFFLGtDQUFrQztNQUMzQ0UsTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUNERyxRQUFRLEVBQUUsUUFBUTtJQUNsQkMsT0FBTyxFQUFFLENBQ1A7TUFDRU4sT0FBTyxFQUFFLGdDQUFnQztNQUN6Q0MsVUFBVSxFQUFFO0lBQ2QsQ0FBQyxFQUNELHVPQUF1TztJQUFFO0lBQ3pPO01BQ0VELE9BQU8sRUFBRSx3Q0FBd0M7TUFDakRDLFVBQVUsRUFBRTtJQUNkLENBQUMsRUFDRDtNQUNFRCxPQUFPLEVBQUUsa0NBQWtDO01BQzNDQyxVQUFVLEVBQUU7SUFDZCxDQUFDLEVBQ0Q7TUFDRUQsT0FBTyxFQUFFO0lBQ1gsQ0FBQyxDQUNGO0lBQ0QsWUFBVSxzQkFBc0I7SUFDaEMsV0FBUyxxQkFBcUI7SUFDOUJPLEtBQUssRUFBRTtNQUNMUCxPQUFPLEVBQUUsTUFBTTtNQUNmUSxLQUFLLEVBQUU7SUFDVCxDQUFDO0lBQ0RDLE1BQU0sRUFBRSxDQUNOLFlBQVksRUFDWixnQkFBZ0IsRUFDaEIsdURBQXVELENBQ3hEO0lBQ0RDLFFBQVEsRUFBRSx1Q0FBdUM7SUFDakRDLFdBQVcsRUFBRTtFQUNmLENBQUM7QUFDSCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXGFxbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBhcWxcbmFxbC5kaXNwbGF5TmFtZSA9ICdhcWwnXG5hcWwuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBhcWwoUHJpc20pIHtcbiAgUHJpc20ubGFuZ3VhZ2VzLmFxbCA9IHtcbiAgICBjb21tZW50OiAvXFwvXFwvLip8XFwvXFwqW1xcc1xcU10qP1xcKlxcLy8sXG4gICAgcHJvcGVydHk6IHtcbiAgICAgIHBhdHRlcm46XG4gICAgICAgIC8oW3ssXVxccyopKD86KD8hXFxkKVxcdyt8KFtcIifCtGBdKSg/Oig/IVxcMilbXlxcXFxcXHJcXG5dfFxcXFwuKSpcXDIpKD89XFxzKjopLyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBncmVlZHk6IHRydWVcbiAgICB9LFxuICAgIHN0cmluZzoge1xuICAgICAgcGF0dGVybjogLyhbXCInXSkoPzooPyFcXDEpW15cXFxcXFxyXFxuXXxcXFxcLikqXFwxLyxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgaWRlbnRpZmllcjoge1xuICAgICAgcGF0dGVybjogLyhbwrRgXSkoPzooPyFcXDEpW15cXFxcXFxyXFxuXXxcXFxcLikqXFwxLyxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgdmFyaWFibGU6IC9AQD9cXHcrLyxcbiAgICBrZXl3b3JkOiBbXG4gICAgICB7XG4gICAgICAgIHBhdHRlcm46IC8oXFxiV0lUSFxccyspQ09VTlQoPz1cXHMrSU5UT1xcYikvaSxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIC9cXGIoPzpBR0dSRUdBVEV8QUxMfEFORHxBTll8QVNDfENPTExFQ1R8REVTQ3xESVNUSU5DVHxGSUxURVJ8Rk9SfEdSQVBIfElOfElOQk9VTkR8SU5TRVJUfElOVE98S19QQVRIU3xLX1NIT1JURVNUX1BBVEhTfExFVHxMSUtFfExJTUlUfE5PTkV8Tk9UfE5VTEx8T1J8T1VUQk9VTkR8UkVNT1ZFfFJFUExBQ0V8UkVUVVJOfFNIT1JURVNUX1BBVEh8U09SVHxVUERBVEV8VVBTRVJUfFdJTkRPV3xXSVRIKVxcYi9pLCAvLyBwc2V1ZG8ga2V5d29yZHMgZ2V0IGEgbG9va2JlaGluZCB0byBhdm9pZCBmYWxzZSBwb3NpdGl2ZXNcbiAgICAgIHtcbiAgICAgICAgcGF0dGVybjogLyhefFteXFx3LltdKSg/OktFRVB8UFJVTkV8U0VBUkNIfFRPKVxcYi9pLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBwYXR0ZXJuOiAvKF58W15cXHcuW10pKD86Q1VSUkVOVHxORVd8T0xEKVxcYi8sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHBhdHRlcm46IC9cXGJPUFRJT05TKD89XFxzKlxceykvaVxuICAgICAgfVxuICAgIF0sXG4gICAgZnVuY3Rpb246IC9cXGIoPyFcXGQpXFx3Kyg/PVxccypcXCgpLyxcbiAgICBib29sZWFuOiAvXFxiKD86ZmFsc2V8dHJ1ZSlcXGIvaSxcbiAgICByYW5nZToge1xuICAgICAgcGF0dGVybjogL1xcLlxcLi8sXG4gICAgICBhbGlhczogJ29wZXJhdG9yJ1xuICAgIH0sXG4gICAgbnVtYmVyOiBbXG4gICAgICAvXFxiMGJbMDFdKy9pLFxuICAgICAgL1xcYjB4WzAtOWEtZl0rL2ksXG4gICAgICAvKD86XFxCXFwuXFxkK3xcXGIoPzowfFsxLTldXFxkKikoPzpcXC5cXGQrKT8pKD86ZVsrLV0/XFxkKyk/L2lcbiAgICBdLFxuICAgIG9wZXJhdG9yOiAvXFwqezIsfXxbPSFdfnxbIT08Pl09P3wmJnxcXHxcXHx8Wy0rKi8lXS8sXG4gICAgcHVuY3R1YXRpb246IC86OnxbPy46LDsoKVtcXF17fV0vXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiYXFsIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJjb21tZW50IiwicHJvcGVydHkiLCJwYXR0ZXJuIiwibG9va2JlaGluZCIsImdyZWVkeSIsInN0cmluZyIsImlkZW50aWZpZXIiLCJ2YXJpYWJsZSIsImtleXdvcmQiLCJyYW5nZSIsImFsaWFzIiwibnVtYmVyIiwib3BlcmF0b3IiLCJwdW5jdHVhdGlvbiJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/aql.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/arduino.js":
/*!************************************************!*\
  !*** ./node_modules/refractor/lang/arduino.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar refractorCpp = __webpack_require__(/*! ./cpp.js */ \"(ssr)/./node_modules/refractor/lang/cpp.js\");\nmodule.exports = arduino;\narduino.displayName = 'arduino';\narduino.aliases = ['ino'];\nfunction arduino(Prism) {\n  Prism.register(refractorCpp);\n  Prism.languages.arduino = Prism.languages.extend('cpp', {\n    keyword: /\\b(?:String|array|bool|boolean|break|byte|case|catch|continue|default|do|double|else|finally|for|function|goto|if|in|instanceof|int|integer|long|loop|new|null|return|setup|string|switch|throw|try|void|while|word)\\b/,\n    constant: /\\b(?:ANALOG_MESSAGE|DEFAULT|DIGITAL_MESSAGE|EXTERNAL|FIRMATA_STRING|HIGH|INPUT|INPUT_PULLUP|INTERNAL|INTERNAL1V1|INTERNAL2V56|LED_BUILTIN|LOW|OUTPUT|REPORT_ANALOG|REPORT_DIGITAL|SET_PIN_MODE|SYSEX_START|SYSTEM_RESET)\\b/,\n    builtin: /\\b(?:Audio|BSSID|Bridge|Client|Console|EEPROM|Esplora|EsploraTFT|Ethernet|EthernetClient|EthernetServer|EthernetUDP|File|FileIO|FileSystem|Firmata|GPRS|GSM|GSMBand|GSMClient|GSMModem|GSMPIN|GSMScanner|GSMServer|GSMVoiceCall|GSM_SMS|HttpClient|IPAddress|IRread|Keyboard|KeyboardController|LiquidCrystal|LiquidCrystal_I2C|Mailbox|Mouse|MouseController|PImage|Process|RSSI|RobotControl|RobotMotor|SD|SPI|SSID|Scheduler|Serial|Server|Servo|SoftwareSerial|Stepper|Stream|TFT|Task|USBHost|WiFi|WiFiClient|WiFiServer|WiFiUDP|Wire|YunClient|YunServer|abs|addParameter|analogRead|analogReadResolution|analogReference|analogWrite|analogWriteResolution|answerCall|attach|attachGPRS|attachInterrupt|attached|autoscroll|available|background|beep|begin|beginPacket|beginSD|beginSMS|beginSpeaker|beginTFT|beginTransmission|beginWrite|bit|bitClear|bitRead|bitSet|bitWrite|blink|blinkVersion|buffer|changePIN|checkPIN|checkPUK|checkReg|circle|cityNameRead|cityNameWrite|clear|clearScreen|click|close|compassRead|config|connect|connected|constrain|cos|countryNameRead|countryNameWrite|createChar|cursor|debugPrint|delay|delayMicroseconds|detach|detachInterrupt|digitalRead|digitalWrite|disconnect|display|displayLogos|drawBMP|drawCompass|encryptionType|end|endPacket|endSMS|endTransmission|endWrite|exists|exitValue|fill|find|findUntil|flush|gatewayIP|get|getAsynchronously|getBand|getButton|getCurrentCarrier|getIMEI|getKey|getModifiers|getOemKey|getPINUsed|getResult|getSignalStrength|getSocket|getVoiceCallStatus|getXChange|getYChange|hangCall|height|highByte|home|image|interrupts|isActionDone|isDirectory|isListening|isPIN|isPressed|isValid|keyPressed|keyReleased|keyboardRead|knobRead|leftToRight|line|lineFollowConfig|listen|listenOnLocalhost|loadImage|localIP|lowByte|macAddress|maintain|map|max|messageAvailable|micros|millis|min|mkdir|motorsStop|motorsWrite|mouseDragged|mouseMoved|mousePressed|mouseReleased|move|noAutoscroll|noBlink|noBuffer|noCursor|noDisplay|noFill|noInterrupts|noListenOnLocalhost|noStroke|noTone|onReceive|onRequest|open|openNextFile|overflow|parseCommand|parseFloat|parseInt|parsePacket|pauseMode|peek|pinMode|playFile|playMelody|point|pointTo|position|pow|prepare|press|print|printFirmwareVersion|printVersion|println|process|processInput|pulseIn|put|random|randomSeed|read|readAccelerometer|readBlue|readButton|readBytes|readBytesUntil|readGreen|readJoystickButton|readJoystickSwitch|readJoystickX|readJoystickY|readLightSensor|readMessage|readMicrophone|readNetworks|readRed|readSlider|readString|readStringUntil|readTemperature|ready|rect|release|releaseAll|remoteIP|remoteNumber|remotePort|remove|requestFrom|retrieveCallingNumber|rewindDirectory|rightToLeft|rmdir|robotNameRead|robotNameWrite|run|runAsynchronously|runShellCommand|runShellCommandAsynchronously|running|scanNetworks|scrollDisplayLeft|scrollDisplayRight|seek|sendAnalog|sendDigitalPortPair|sendDigitalPorts|sendString|sendSysex|serialEvent|setBand|setBitOrder|setClockDivider|setCursor|setDNS|setDataMode|setFirmwareVersion|setMode|setPINUsed|setSpeed|setTextSize|setTimeout|shiftIn|shiftOut|shutdown|sin|size|sqrt|startLoop|step|stop|stroke|subnetMask|switchPIN|tan|tempoWrite|text|tone|transfer|tuneWrite|turn|updateIR|userNameRead|userNameWrite|voiceCall|waitContinue|width|write|writeBlue|writeGreen|writeJSON|writeMessage|writeMicroseconds|writeRGB|writeRed|yield)\\b/\n  });\n  Prism.languages.ino = Prism.languages.arduino;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvYXJkdWluby5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFDWixJQUFJQSxZQUFZLEdBQUdDLG1CQUFPLENBQUMsNERBQVUsQ0FBQztBQUN0Q0MsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLE9BQU87QUFDeEJBLE9BQU8sQ0FBQ0MsV0FBVyxHQUFHLFNBQVM7QUFDL0JELE9BQU8sQ0FBQ0UsT0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDO0FBQ3pCLFNBQVNGLE9BQU9BLENBQUNHLEtBQUssRUFBRTtFQUN0QkEsS0FBSyxDQUFDQyxRQUFRLENBQUNSLFlBQVksQ0FBQztFQUM1Qk8sS0FBSyxDQUFDRSxTQUFTLENBQUNMLE9BQU8sR0FBR0csS0FBSyxDQUFDRSxTQUFTLENBQUNDLE1BQU0sQ0FBQyxLQUFLLEVBQUU7SUFDdERDLE9BQU8sRUFDTCx3TkFBd047SUFDMU5DLFFBQVEsRUFDTiw0TkFBNE47SUFDOU5DLE9BQU8sRUFDTDtFQUNKLENBQUMsQ0FBQztFQUNGTixLQUFLLENBQUNFLFNBQVMsQ0FBQ0ssR0FBRyxHQUFHUCxLQUFLLENBQUNFLFNBQVMsQ0FBQ0wsT0FBTztBQUMvQyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXGFyZHVpbm8uanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG52YXIgcmVmcmFjdG9yQ3BwID0gcmVxdWlyZSgnLi9jcHAuanMnKVxubW9kdWxlLmV4cG9ydHMgPSBhcmR1aW5vXG5hcmR1aW5vLmRpc3BsYXlOYW1lID0gJ2FyZHVpbm8nXG5hcmR1aW5vLmFsaWFzZXMgPSBbJ2lubyddXG5mdW5jdGlvbiBhcmR1aW5vKFByaXNtKSB7XG4gIFByaXNtLnJlZ2lzdGVyKHJlZnJhY3RvckNwcClcbiAgUHJpc20ubGFuZ3VhZ2VzLmFyZHVpbm8gPSBQcmlzbS5sYW5ndWFnZXMuZXh0ZW5kKCdjcHAnLCB7XG4gICAga2V5d29yZDpcbiAgICAgIC9cXGIoPzpTdHJpbmd8YXJyYXl8Ym9vbHxib29sZWFufGJyZWFrfGJ5dGV8Y2FzZXxjYXRjaHxjb250aW51ZXxkZWZhdWx0fGRvfGRvdWJsZXxlbHNlfGZpbmFsbHl8Zm9yfGZ1bmN0aW9ufGdvdG98aWZ8aW58aW5zdGFuY2VvZnxpbnR8aW50ZWdlcnxsb25nfGxvb3B8bmV3fG51bGx8cmV0dXJufHNldHVwfHN0cmluZ3xzd2l0Y2h8dGhyb3d8dHJ5fHZvaWR8d2hpbGV8d29yZClcXGIvLFxuICAgIGNvbnN0YW50OlxuICAgICAgL1xcYig/OkFOQUxPR19NRVNTQUdFfERFRkFVTFR8RElHSVRBTF9NRVNTQUdFfEVYVEVSTkFMfEZJUk1BVEFfU1RSSU5HfEhJR0h8SU5QVVR8SU5QVVRfUFVMTFVQfElOVEVSTkFMfElOVEVSTkFMMVYxfElOVEVSTkFMMlY1NnxMRURfQlVJTFRJTnxMT1d8T1VUUFVUfFJFUE9SVF9BTkFMT0d8UkVQT1JUX0RJR0lUQUx8U0VUX1BJTl9NT0RFfFNZU0VYX1NUQVJUfFNZU1RFTV9SRVNFVClcXGIvLFxuICAgIGJ1aWx0aW46XG4gICAgICAvXFxiKD86QXVkaW98QlNTSUR8QnJpZGdlfENsaWVudHxDb25zb2xlfEVFUFJPTXxFc3Bsb3JhfEVzcGxvcmFURlR8RXRoZXJuZXR8RXRoZXJuZXRDbGllbnR8RXRoZXJuZXRTZXJ2ZXJ8RXRoZXJuZXRVRFB8RmlsZXxGaWxlSU98RmlsZVN5c3RlbXxGaXJtYXRhfEdQUlN8R1NNfEdTTUJhbmR8R1NNQ2xpZW50fEdTTU1vZGVtfEdTTVBJTnxHU01TY2FubmVyfEdTTVNlcnZlcnxHU01Wb2ljZUNhbGx8R1NNX1NNU3xIdHRwQ2xpZW50fElQQWRkcmVzc3xJUnJlYWR8S2V5Ym9hcmR8S2V5Ym9hcmRDb250cm9sbGVyfExpcXVpZENyeXN0YWx8TGlxdWlkQ3J5c3RhbF9JMkN8TWFpbGJveHxNb3VzZXxNb3VzZUNvbnRyb2xsZXJ8UEltYWdlfFByb2Nlc3N8UlNTSXxSb2JvdENvbnRyb2x8Um9ib3RNb3RvcnxTRHxTUEl8U1NJRHxTY2hlZHVsZXJ8U2VyaWFsfFNlcnZlcnxTZXJ2b3xTb2Z0d2FyZVNlcmlhbHxTdGVwcGVyfFN0cmVhbXxURlR8VGFza3xVU0JIb3N0fFdpRml8V2lGaUNsaWVudHxXaUZpU2VydmVyfFdpRmlVRFB8V2lyZXxZdW5DbGllbnR8WXVuU2VydmVyfGFic3xhZGRQYXJhbWV0ZXJ8YW5hbG9nUmVhZHxhbmFsb2dSZWFkUmVzb2x1dGlvbnxhbmFsb2dSZWZlcmVuY2V8YW5hbG9nV3JpdGV8YW5hbG9nV3JpdGVSZXNvbHV0aW9ufGFuc3dlckNhbGx8YXR0YWNofGF0dGFjaEdQUlN8YXR0YWNoSW50ZXJydXB0fGF0dGFjaGVkfGF1dG9zY3JvbGx8YXZhaWxhYmxlfGJhY2tncm91bmR8YmVlcHxiZWdpbnxiZWdpblBhY2tldHxiZWdpblNEfGJlZ2luU01TfGJlZ2luU3BlYWtlcnxiZWdpblRGVHxiZWdpblRyYW5zbWlzc2lvbnxiZWdpbldyaXRlfGJpdHxiaXRDbGVhcnxiaXRSZWFkfGJpdFNldHxiaXRXcml0ZXxibGlua3xibGlua1ZlcnNpb258YnVmZmVyfGNoYW5nZVBJTnxjaGVja1BJTnxjaGVja1BVS3xjaGVja1JlZ3xjaXJjbGV8Y2l0eU5hbWVSZWFkfGNpdHlOYW1lV3JpdGV8Y2xlYXJ8Y2xlYXJTY3JlZW58Y2xpY2t8Y2xvc2V8Y29tcGFzc1JlYWR8Y29uZmlnfGNvbm5lY3R8Y29ubmVjdGVkfGNvbnN0cmFpbnxjb3N8Y291bnRyeU5hbWVSZWFkfGNvdW50cnlOYW1lV3JpdGV8Y3JlYXRlQ2hhcnxjdXJzb3J8ZGVidWdQcmludHxkZWxheXxkZWxheU1pY3Jvc2Vjb25kc3xkZXRhY2h8ZGV0YWNoSW50ZXJydXB0fGRpZ2l0YWxSZWFkfGRpZ2l0YWxXcml0ZXxkaXNjb25uZWN0fGRpc3BsYXl8ZGlzcGxheUxvZ29zfGRyYXdCTVB8ZHJhd0NvbXBhc3N8ZW5jcnlwdGlvblR5cGV8ZW5kfGVuZFBhY2tldHxlbmRTTVN8ZW5kVHJhbnNtaXNzaW9ufGVuZFdyaXRlfGV4aXN0c3xleGl0VmFsdWV8ZmlsbHxmaW5kfGZpbmRVbnRpbHxmbHVzaHxnYXRld2F5SVB8Z2V0fGdldEFzeW5jaHJvbm91c2x5fGdldEJhbmR8Z2V0QnV0dG9ufGdldEN1cnJlbnRDYXJyaWVyfGdldElNRUl8Z2V0S2V5fGdldE1vZGlmaWVyc3xnZXRPZW1LZXl8Z2V0UElOVXNlZHxnZXRSZXN1bHR8Z2V0U2lnbmFsU3RyZW5ndGh8Z2V0U29ja2V0fGdldFZvaWNlQ2FsbFN0YXR1c3xnZXRYQ2hhbmdlfGdldFlDaGFuZ2V8aGFuZ0NhbGx8aGVpZ2h0fGhpZ2hCeXRlfGhvbWV8aW1hZ2V8aW50ZXJydXB0c3xpc0FjdGlvbkRvbmV8aXNEaXJlY3Rvcnl8aXNMaXN0ZW5pbmd8aXNQSU58aXNQcmVzc2VkfGlzVmFsaWR8a2V5UHJlc3NlZHxrZXlSZWxlYXNlZHxrZXlib2FyZFJlYWR8a25vYlJlYWR8bGVmdFRvUmlnaHR8bGluZXxsaW5lRm9sbG93Q29uZmlnfGxpc3RlbnxsaXN0ZW5PbkxvY2FsaG9zdHxsb2FkSW1hZ2V8bG9jYWxJUHxsb3dCeXRlfG1hY0FkZHJlc3N8bWFpbnRhaW58bWFwfG1heHxtZXNzYWdlQXZhaWxhYmxlfG1pY3Jvc3xtaWxsaXN8bWlufG1rZGlyfG1vdG9yc1N0b3B8bW90b3JzV3JpdGV8bW91c2VEcmFnZ2VkfG1vdXNlTW92ZWR8bW91c2VQcmVzc2VkfG1vdXNlUmVsZWFzZWR8bW92ZXxub0F1dG9zY3JvbGx8bm9CbGlua3xub0J1ZmZlcnxub0N1cnNvcnxub0Rpc3BsYXl8bm9GaWxsfG5vSW50ZXJydXB0c3xub0xpc3Rlbk9uTG9jYWxob3N0fG5vU3Ryb2tlfG5vVG9uZXxvblJlY2VpdmV8b25SZXF1ZXN0fG9wZW58b3Blbk5leHRGaWxlfG92ZXJmbG93fHBhcnNlQ29tbWFuZHxwYXJzZUZsb2F0fHBhcnNlSW50fHBhcnNlUGFja2V0fHBhdXNlTW9kZXxwZWVrfHBpbk1vZGV8cGxheUZpbGV8cGxheU1lbG9keXxwb2ludHxwb2ludFRvfHBvc2l0aW9ufHBvd3xwcmVwYXJlfHByZXNzfHByaW50fHByaW50RmlybXdhcmVWZXJzaW9ufHByaW50VmVyc2lvbnxwcmludGxufHByb2Nlc3N8cHJvY2Vzc0lucHV0fHB1bHNlSW58cHV0fHJhbmRvbXxyYW5kb21TZWVkfHJlYWR8cmVhZEFjY2VsZXJvbWV0ZXJ8cmVhZEJsdWV8cmVhZEJ1dHRvbnxyZWFkQnl0ZXN8cmVhZEJ5dGVzVW50aWx8cmVhZEdyZWVufHJlYWRKb3lzdGlja0J1dHRvbnxyZWFkSm95c3RpY2tTd2l0Y2h8cmVhZEpveXN0aWNrWHxyZWFkSm95c3RpY2tZfHJlYWRMaWdodFNlbnNvcnxyZWFkTWVzc2FnZXxyZWFkTWljcm9waG9uZXxyZWFkTmV0d29ya3N8cmVhZFJlZHxyZWFkU2xpZGVyfHJlYWRTdHJpbmd8cmVhZFN0cmluZ1VudGlsfHJlYWRUZW1wZXJhdHVyZXxyZWFkeXxyZWN0fHJlbGVhc2V8cmVsZWFzZUFsbHxyZW1vdGVJUHxyZW1vdGVOdW1iZXJ8cmVtb3RlUG9ydHxyZW1vdmV8cmVxdWVzdEZyb218cmV0cmlldmVDYWxsaW5nTnVtYmVyfHJld2luZERpcmVjdG9yeXxyaWdodFRvTGVmdHxybWRpcnxyb2JvdE5hbWVSZWFkfHJvYm90TmFtZVdyaXRlfHJ1bnxydW5Bc3luY2hyb25vdXNseXxydW5TaGVsbENvbW1hbmR8cnVuU2hlbGxDb21tYW5kQXN5bmNocm9ub3VzbHl8cnVubmluZ3xzY2FuTmV0d29ya3N8c2Nyb2xsRGlzcGxheUxlZnR8c2Nyb2xsRGlzcGxheVJpZ2h0fHNlZWt8c2VuZEFuYWxvZ3xzZW5kRGlnaXRhbFBvcnRQYWlyfHNlbmREaWdpdGFsUG9ydHN8c2VuZFN0cmluZ3xzZW5kU3lzZXh8c2VyaWFsRXZlbnR8c2V0QmFuZHxzZXRCaXRPcmRlcnxzZXRDbG9ja0RpdmlkZXJ8c2V0Q3Vyc29yfHNldEROU3xzZXREYXRhTW9kZXxzZXRGaXJtd2FyZVZlcnNpb258c2V0TW9kZXxzZXRQSU5Vc2VkfHNldFNwZWVkfHNldFRleHRTaXplfHNldFRpbWVvdXR8c2hpZnRJbnxzaGlmdE91dHxzaHV0ZG93bnxzaW58c2l6ZXxzcXJ0fHN0YXJ0TG9vcHxzdGVwfHN0b3B8c3Ryb2tlfHN1Ym5ldE1hc2t8c3dpdGNoUElOfHRhbnx0ZW1wb1dyaXRlfHRleHR8dG9uZXx0cmFuc2Zlcnx0dW5lV3JpdGV8dHVybnx1cGRhdGVJUnx1c2VyTmFtZVJlYWR8dXNlck5hbWVXcml0ZXx2b2ljZUNhbGx8d2FpdENvbnRpbnVlfHdpZHRofHdyaXRlfHdyaXRlQmx1ZXx3cml0ZUdyZWVufHdyaXRlSlNPTnx3cml0ZU1lc3NhZ2V8d3JpdGVNaWNyb3NlY29uZHN8d3JpdGVSR0J8d3JpdGVSZWR8eWllbGQpXFxiL1xuICB9KVxuICBQcmlzbS5sYW5ndWFnZXMuaW5vID0gUHJpc20ubGFuZ3VhZ2VzLmFyZHVpbm9cbn1cbiJdLCJuYW1lcyI6WyJyZWZyYWN0b3JDcHAiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImFyZHVpbm8iLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsInJlZ2lzdGVyIiwibGFuZ3VhZ2VzIiwiZXh0ZW5kIiwia2V5d29yZCIsImNvbnN0YW50IiwiYnVpbHRpbiIsImlubyJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/arduino.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/arff.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/arff.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = arff;\narff.displayName = 'arff';\narff.aliases = [];\nfunction arff(Prism) {\n  Prism.languages.arff = {\n    comment: /%.*/,\n    string: {\n      pattern: /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true\n    },\n    keyword: /@(?:attribute|data|end|relation)\\b/i,\n    number: /\\b\\d+(?:\\.\\d+)?\\b/,\n    punctuation: /[{},]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvYXJmZi5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLElBQUk7QUFDckJBLElBQUksQ0FBQ0MsV0FBVyxHQUFHLE1BQU07QUFDekJELElBQUksQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDakIsU0FBU0YsSUFBSUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ25CQSxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osSUFBSSxHQUFHO0lBQ3JCSyxPQUFPLEVBQUUsS0FBSztJQUNkQyxNQUFNLEVBQUU7TUFDTkMsT0FBTyxFQUFFLGtDQUFrQztNQUMzQ0MsTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUNEQyxPQUFPLEVBQUUscUNBQXFDO0lBQzlDQyxNQUFNLEVBQUUsbUJBQW1CO0lBQzNCQyxXQUFXLEVBQUU7RUFDZixDQUFDO0FBQ0giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxhcmZmLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGFyZmZcbmFyZmYuZGlzcGxheU5hbWUgPSAnYXJmZidcbmFyZmYuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBhcmZmKFByaXNtKSB7XG4gIFByaXNtLmxhbmd1YWdlcy5hcmZmID0ge1xuICAgIGNvbW1lbnQ6IC8lLiovLFxuICAgIHN0cmluZzoge1xuICAgICAgcGF0dGVybjogLyhbXCInXSkoPzpcXFxcLnwoPyFcXDEpW15cXFxcXFxyXFxuXSkqXFwxLyxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAga2V5d29yZDogL0AoPzphdHRyaWJ1dGV8ZGF0YXxlbmR8cmVsYXRpb24pXFxiL2ksXG4gICAgbnVtYmVyOiAvXFxiXFxkKyg/OlxcLlxcZCspP1xcYi8sXG4gICAgcHVuY3R1YXRpb246IC9be30sXS9cbiAgfVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJhcmZmIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJjb21tZW50Iiwic3RyaW5nIiwicGF0dGVybiIsImdyZWVkeSIsImtleXdvcmQiLCJudW1iZXIiLCJwdW5jdHVhdGlvbiJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/arff.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/asciidoc.js":
/*!*************************************************!*\
  !*** ./node_modules/refractor/lang/asciidoc.js ***!
  \*************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = asciidoc;\nasciidoc.displayName = 'asciidoc';\nasciidoc.aliases = ['adoc'];\nfunction asciidoc(Prism) {\n  ;\n  (function (Prism) {\n    var attributes = {\n      pattern: /(^[ \\t]*)\\[(?!\\[)(?:([\"'$`])(?:(?!\\2)[^\\\\]|\\\\.)*\\2|\\[(?:[^\\[\\]\\\\]|\\\\.)*\\]|[^\\[\\]\\\\\"'$`]|\\\\.)*\\]/m,\n      lookbehind: true,\n      inside: {\n        quoted: {\n          pattern: /([$`])(?:(?!\\1)[^\\\\]|\\\\.)*\\1/,\n          inside: {\n            punctuation: /^[$`]|[$`]$/\n          }\n        },\n        interpreted: {\n          pattern: /'(?:[^'\\\\]|\\\\.)*'/,\n          inside: {\n            punctuation: /^'|'$/ // See rest below\n          }\n        },\n\n        string: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n        variable: /\\w+(?==)/,\n        punctuation: /^\\[|\\]$|,/,\n        operator: /=/,\n        // The negative look-ahead prevents blank matches\n        'attr-value': /(?!^\\s+$).+/\n      }\n    };\n    var asciidoc = Prism.languages.asciidoc = {\n      'comment-block': {\n        pattern: /^(\\/{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1/m,\n        alias: 'comment'\n      },\n      table: {\n        pattern: /^\\|={3,}(?:(?:\\r?\\n|\\r(?!\\n)).*)*?(?:\\r?\\n|\\r)\\|={3,}$/m,\n        inside: {\n          specifiers: {\n            pattern: /(?:(?:(?:\\d+(?:\\.\\d+)?|\\.\\d+)[+*](?:[<^>](?:\\.[<^>])?|\\.[<^>])?|[<^>](?:\\.[<^>])?|\\.[<^>])[a-z]*|[a-z]+)(?=\\|)/,\n            alias: 'attr-value'\n          },\n          punctuation: {\n            pattern: /(^|[^\\\\])[|!]=*/,\n            lookbehind: true\n          } // See rest below\n        }\n      },\n\n      'passthrough-block': {\n        pattern: /^(\\+{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,\n        inside: {\n          punctuation: /^\\++|\\++$/ // See rest below\n        }\n      },\n\n      // Literal blocks and listing blocks\n      'literal-block': {\n        pattern: /^(-{4,}|\\.{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,\n        inside: {\n          punctuation: /^(?:-+|\\.+)|(?:-+|\\.+)$/ // See rest below\n        }\n      },\n\n      // Sidebar blocks, quote blocks, example blocks and open blocks\n      'other-block': {\n        pattern: /^(--|\\*{4,}|_{4,}|={4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,\n        inside: {\n          punctuation: /^(?:-+|\\*+|_+|=+)|(?:-+|\\*+|_+|=+)$/ // See rest below\n        }\n      },\n\n      // list-punctuation and list-label must appear before indented-block\n      'list-punctuation': {\n        pattern: /(^[ \\t]*)(?:-|\\*{1,5}|\\.{1,5}|(?:[a-z]|\\d+)\\.|[xvi]+\\))(?= )/im,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      'list-label': {\n        pattern: /(^[ \\t]*)[a-z\\d].+(?::{2,4}|;;)(?=\\s)/im,\n        lookbehind: true,\n        alias: 'symbol'\n      },\n      'indented-block': {\n        pattern: /((\\r?\\n|\\r)\\2)([ \\t]+)\\S.*(?:(?:\\r?\\n|\\r)\\3.+)*(?=\\2{2}|$)/,\n        lookbehind: true\n      },\n      comment: /^\\/\\/.*/m,\n      title: {\n        pattern: /^.+(?:\\r?\\n|\\r)(?:={3,}|-{3,}|~{3,}|\\^{3,}|\\+{3,})$|^={1,5} .+|^\\.(?![\\s.]).*/m,\n        alias: 'important',\n        inside: {\n          punctuation: /^(?:\\.|=+)|(?:=+|-+|~+|\\^+|\\++)$/ // See rest below\n        }\n      },\n\n      'attribute-entry': {\n        pattern: /^:[^:\\r\\n]+:(?: .*?(?: \\+(?:\\r?\\n|\\r).*?)*)?$/m,\n        alias: 'tag'\n      },\n      attributes: attributes,\n      hr: {\n        pattern: /^'{3,}$/m,\n        alias: 'punctuation'\n      },\n      'page-break': {\n        pattern: /^<{3,}$/m,\n        alias: 'punctuation'\n      },\n      admonition: {\n        pattern: /^(?:CAUTION|IMPORTANT|NOTE|TIP|WARNING):/m,\n        alias: 'keyword'\n      },\n      callout: [{\n        pattern: /(^[ \\t]*)<?\\d*>/m,\n        lookbehind: true,\n        alias: 'symbol'\n      }, {\n        pattern: /<\\d+>/,\n        alias: 'symbol'\n      }],\n      macro: {\n        pattern: /\\b[a-z\\d][a-z\\d-]*::?(?:[^\\s\\[\\]]*\\[(?:[^\\]\\\\\"']|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*\\1|\\\\.)*\\])/,\n        inside: {\n          \"function\": /^[a-z\\d-]+(?=:)/,\n          punctuation: /^::?/,\n          attributes: {\n            pattern: /(?:\\[(?:[^\\]\\\\\"']|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*\\1|\\\\.)*\\])/,\n            inside: attributes.inside\n          }\n        }\n      },\n      inline: {\n        /*\n        The initial look-behind prevents the highlighting of escaped quoted text.\n        Quoted text can be multi-line but cannot span an empty line.\n        All quoted text can have attributes before [foobar, 'foobar', baz=\"bar\"].\n        First, we handle the constrained quotes.\n        Those must be bounded by non-word chars and cannot have spaces between the delimiter and the first char.\n        They are, in order: _emphasis_, ``double quotes'', `single quotes', `monospace`, 'emphasis', *strong*, +monospace+ and #unquoted#\n        Then we handle the unconstrained quotes.\n        Those do not have the restrictions of the constrained quotes.\n        They are, in order: __emphasis__, **strong**, ++monospace++, +++passthrough+++, ##unquoted##, $$passthrough$$, ~subscript~, ^superscript^, {attribute-reference}, [[anchor]], [[[bibliography anchor]]], <<xref>>, (((indexes))) and ((indexes))\n        */\n        pattern: /(^|[^\\\\])(?:(?:\\B\\[(?:[^\\]\\\\\"']|([\"'])(?:(?!\\2)[^\\\\]|\\\\.)*\\2|\\\\.)*\\])?(?:\\b_(?!\\s)(?: _|[^_\\\\\\r\\n]|\\\\.)+(?:(?:\\r?\\n|\\r)(?: _|[^_\\\\\\r\\n]|\\\\.)+)*_\\b|\\B``(?!\\s).+?(?:(?:\\r?\\n|\\r).+?)*''\\B|\\B`(?!\\s)(?:[^`'\\s]|\\s+\\S)+['`]\\B|\\B(['*+#])(?!\\s)(?: \\3|(?!\\3)[^\\\\\\r\\n]|\\\\.)+(?:(?:\\r?\\n|\\r)(?: \\3|(?!\\3)[^\\\\\\r\\n]|\\\\.)+)*\\3\\B)|(?:\\[(?:[^\\]\\\\\"']|([\"'])(?:(?!\\4)[^\\\\]|\\\\.)*\\4|\\\\.)*\\])?(?:(__|\\*\\*|\\+\\+\\+?|##|\\$\\$|[~^]).+?(?:(?:\\r?\\n|\\r).+?)*\\5|\\{[^}\\r\\n]+\\}|\\[\\[\\[?.+?(?:(?:\\r?\\n|\\r).+?)*\\]?\\]\\]|<<.+?(?:(?:\\r?\\n|\\r).+?)*>>|\\(\\(\\(?.+?(?:(?:\\r?\\n|\\r).+?)*\\)?\\)\\)))/m,\n        lookbehind: true,\n        inside: {\n          attributes: attributes,\n          url: {\n            pattern: /^(?:\\[\\[\\[?.+?\\]?\\]\\]|<<.+?>>)$/,\n            inside: {\n              punctuation: /^(?:\\[\\[\\[?|<<)|(?:\\]\\]\\]?|>>)$/\n            }\n          },\n          'attribute-ref': {\n            pattern: /^\\{.+\\}$/,\n            inside: {\n              variable: {\n                pattern: /(^\\{)[a-z\\d,+_-]+/,\n                lookbehind: true\n              },\n              operator: /^[=?!#%@$]|!(?=[:}])/,\n              punctuation: /^\\{|\\}$|::?/\n            }\n          },\n          italic: {\n            pattern: /^(['_])[\\s\\S]+\\1$/,\n            inside: {\n              punctuation: /^(?:''?|__?)|(?:''?|__?)$/\n            }\n          },\n          bold: {\n            pattern: /^\\*[\\s\\S]+\\*$/,\n            inside: {\n              punctuation: /^\\*\\*?|\\*\\*?$/\n            }\n          },\n          punctuation: /^(?:``?|\\+{1,3}|##?|\\$\\$|[~^]|\\(\\(\\(?)|(?:''?|\\+{1,3}|##?|\\$\\$|[~^`]|\\)?\\)\\))$/\n        }\n      },\n      replacement: {\n        pattern: /\\((?:C|R|TM)\\)/,\n        alias: 'builtin'\n      },\n      entity: /&#?[\\da-z]{1,8};/i,\n      'line-continuation': {\n        pattern: /(^| )\\+$/m,\n        lookbehind: true,\n        alias: 'punctuation'\n      }\n    }; // Allow some nesting. There is no recursion though, so cloning should not be needed.\n    function copyFromAsciiDoc(keys) {\n      keys = keys.split(' ');\n      var o = {};\n      for (var i = 0, l = keys.length; i < l; i++) {\n        o[keys[i]] = asciidoc[keys[i]];\n      }\n      return o;\n    }\n    attributes.inside['interpreted'].inside.rest = copyFromAsciiDoc('macro inline replacement entity');\n    asciidoc['passthrough-block'].inside.rest = copyFromAsciiDoc('macro');\n    asciidoc['literal-block'].inside.rest = copyFromAsciiDoc('callout');\n    asciidoc['table'].inside.rest = copyFromAsciiDoc('comment-block passthrough-block literal-block other-block list-punctuation indented-block comment title attribute-entry attributes hr page-break admonition list-label callout macro inline replacement entity line-continuation');\n    asciidoc['other-block'].inside.rest = copyFromAsciiDoc('table list-punctuation indented-block comment attribute-entry attributes hr page-break admonition list-label macro inline replacement entity line-continuation');\n    asciidoc['title'].inside.rest = copyFromAsciiDoc('macro inline replacement entity'); // Plugin to make entity title show the real entity, idea by Roman Komarov\n    Prism.hooks.add('wrap', function (env) {\n      if (env.type === 'entity') {\n        env.attributes['title'] = env.content.value.replace(/&amp;/, '&');\n      }\n    });\n    Prism.languages.adoc = Prism.languages.asciidoc;\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/asciidoc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/asm6502.js":
/*!************************************************!*\
  !*** ./node_modules/refractor/lang/asm6502.js ***!
  \************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = asm6502;\nasm6502.displayName = 'asm6502';\nasm6502.aliases = [];\nfunction asm6502(Prism) {\n  Prism.languages.asm6502 = {\n    comment: /;.*/,\n    directive: {\n      pattern: /\\.\\w+(?= )/,\n      alias: 'property'\n    },\n    string: /([\"'`])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    'op-code': {\n      pattern: /\\b(?:ADC|AND|ASL|BCC|BCS|BEQ|BIT|BMI|BNE|BPL|BRK|BVC|BVS|CLC|CLD|CLI|CLV|CMP|CPX|CPY|DEC|DEX|DEY|EOR|INC|INX|INY|JMP|JSR|LDA|LDX|LDY|LSR|NOP|ORA|PHA|PHP|PLA|PLP|ROL|ROR|RTI|RTS|SBC|SEC|SED|SEI|STA|STX|STY|TAX|TAY|TSX|TXA|TXS|TYA|adc|and|asl|bcc|bcs|beq|bit|bmi|bne|bpl|brk|bvc|bvs|clc|cld|cli|clv|cmp|cpx|cpy|dec|dex|dey|eor|inc|inx|iny|jmp|jsr|lda|ldx|ldy|lsr|nop|ora|pha|php|pla|plp|rol|ror|rti|rts|sbc|sec|sed|sei|sta|stx|sty|tax|tay|tsx|txa|txs|tya)\\b/,\n      alias: 'keyword'\n    },\n    'hex-number': {\n      pattern: /#?\\$[\\da-f]{1,4}\\b/i,\n      alias: 'number'\n    },\n    'binary-number': {\n      pattern: /#?%[01]+\\b/,\n      alias: 'number'\n    },\n    'decimal-number': {\n      pattern: /#?\\b\\d+\\b/,\n      alias: 'number'\n    },\n    register: {\n      pattern: /\\b[xya]\\b/i,\n      alias: 'variable'\n    },\n    punctuation: /[(),:]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvYXNtNjUwMi5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLE9BQU87QUFDeEJBLE9BQU8sQ0FBQ0MsV0FBVyxHQUFHLFNBQVM7QUFDL0JELE9BQU8sQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDcEIsU0FBU0YsT0FBT0EsQ0FBQ0csS0FBSyxFQUFFO0VBQ3RCQSxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osT0FBTyxHQUFHO0lBQ3hCSyxPQUFPLEVBQUUsS0FBSztJQUNkQyxTQUFTLEVBQUU7TUFDVEMsT0FBTyxFQUFFLFlBQVk7TUFDckJDLEtBQUssRUFBRTtJQUNULENBQUM7SUFDREMsTUFBTSxFQUFFLG1DQUFtQztJQUMzQyxTQUFTLEVBQUU7TUFDVEYsT0FBTyxFQUNMLHljQUF5YztNQUMzY0MsS0FBSyxFQUFFO0lBQ1QsQ0FBQztJQUNELFlBQVksRUFBRTtNQUNaRCxPQUFPLEVBQUUscUJBQXFCO01BQzlCQyxLQUFLLEVBQUU7SUFDVCxDQUFDO0lBQ0QsZUFBZSxFQUFFO01BQ2ZELE9BQU8sRUFBRSxZQUFZO01BQ3JCQyxLQUFLLEVBQUU7SUFDVCxDQUFDO0lBQ0QsZ0JBQWdCLEVBQUU7TUFDaEJELE9BQU8sRUFBRSxXQUFXO01BQ3BCQyxLQUFLLEVBQUU7SUFDVCxDQUFDO0lBQ0RFLFFBQVEsRUFBRTtNQUNSSCxPQUFPLEVBQUUsWUFBWTtNQUNyQkMsS0FBSyxFQUFFO0lBQ1QsQ0FBQztJQUNERyxXQUFXLEVBQUU7RUFDZixDQUFDO0FBQ0giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxhc202NTAyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGFzbTY1MDJcbmFzbTY1MDIuZGlzcGxheU5hbWUgPSAnYXNtNjUwMidcbmFzbTY1MDIuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBhc202NTAyKFByaXNtKSB7XG4gIFByaXNtLmxhbmd1YWdlcy5hc202NTAyID0ge1xuICAgIGNvbW1lbnQ6IC87LiovLFxuICAgIGRpcmVjdGl2ZToge1xuICAgICAgcGF0dGVybjogL1xcLlxcdysoPz0gKS8sXG4gICAgICBhbGlhczogJ3Byb3BlcnR5J1xuICAgIH0sXG4gICAgc3RyaW5nOiAvKFtcIidgXSkoPzpcXFxcLnwoPyFcXDEpW15cXFxcXFxyXFxuXSkqXFwxLyxcbiAgICAnb3AtY29kZSc6IHtcbiAgICAgIHBhdHRlcm46XG4gICAgICAgIC9cXGIoPzpBREN8QU5EfEFTTHxCQ0N8QkNTfEJFUXxCSVR8Qk1JfEJORXxCUEx8QlJLfEJWQ3xCVlN8Q0xDfENMRHxDTEl8Q0xWfENNUHxDUFh8Q1BZfERFQ3xERVh8REVZfEVPUnxJTkN8SU5YfElOWXxKTVB8SlNSfExEQXxMRFh8TERZfExTUnxOT1B8T1JBfFBIQXxQSFB8UExBfFBMUHxST0x8Uk9SfFJUSXxSVFN8U0JDfFNFQ3xTRUR8U0VJfFNUQXxTVFh8U1RZfFRBWHxUQVl8VFNYfFRYQXxUWFN8VFlBfGFkY3xhbmR8YXNsfGJjY3xiY3N8YmVxfGJpdHxibWl8Ym5lfGJwbHxicmt8YnZjfGJ2c3xjbGN8Y2xkfGNsaXxjbHZ8Y21wfGNweHxjcHl8ZGVjfGRleHxkZXl8ZW9yfGluY3xpbnh8aW55fGptcHxqc3J8bGRhfGxkeHxsZHl8bHNyfG5vcHxvcmF8cGhhfHBocHxwbGF8cGxwfHJvbHxyb3J8cnRpfHJ0c3xzYmN8c2VjfHNlZHxzZWl8c3RhfHN0eHxzdHl8dGF4fHRheXx0c3h8dHhhfHR4c3x0eWEpXFxiLyxcbiAgICAgIGFsaWFzOiAna2V5d29yZCdcbiAgICB9LFxuICAgICdoZXgtbnVtYmVyJzoge1xuICAgICAgcGF0dGVybjogLyM/XFwkW1xcZGEtZl17MSw0fVxcYi9pLFxuICAgICAgYWxpYXM6ICdudW1iZXInXG4gICAgfSxcbiAgICAnYmluYXJ5LW51bWJlcic6IHtcbiAgICAgIHBhdHRlcm46IC8jPyVbMDFdK1xcYi8sXG4gICAgICBhbGlhczogJ251bWJlcidcbiAgICB9LFxuICAgICdkZWNpbWFsLW51bWJlcic6IHtcbiAgICAgIHBhdHRlcm46IC8jP1xcYlxcZCtcXGIvLFxuICAgICAgYWxpYXM6ICdudW1iZXInXG4gICAgfSxcbiAgICByZWdpc3Rlcjoge1xuICAgICAgcGF0dGVybjogL1xcYlt4eWFdXFxiL2ksXG4gICAgICBhbGlhczogJ3ZhcmlhYmxlJ1xuICAgIH0sXG4gICAgcHVuY3R1YXRpb246IC9bKCksOl0vXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiYXNtNjUwMiIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwiY29tbWVudCIsImRpcmVjdGl2ZSIsInBhdHRlcm4iLCJhbGlhcyIsInN0cmluZyIsInJlZ2lzdGVyIiwicHVuY3R1YXRpb24iXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/asm6502.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/asmatmel.js":
/*!*************************************************!*\
  !*** ./node_modules/refractor/lang/asmatmel.js ***!
  \*************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = asmatmel;\nasmatmel.displayName = 'asmatmel';\nasmatmel.aliases = [];\nfunction asmatmel(Prism) {\n  Prism.languages.asmatmel = {\n    comment: {\n      pattern: /;.*/,\n      greedy: true\n    },\n    string: {\n      pattern: /([\"'`])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true\n    },\n    constant: /\\b(?:PORT[A-Z]|DDR[A-Z]|(?:DD|P)[A-Z](?:\\d|[0-2]\\d|3[01]))\\b/,\n    directive: {\n      pattern: /\\.\\w+(?= )/,\n      alias: 'property'\n    },\n    'r-register': {\n      pattern: /\\br(?:\\d|[12]\\d|3[01])\\b/,\n      alias: 'variable'\n    },\n    'op-code': {\n      pattern: /\\b(?:ADC|ADD|ADIW|AND|ANDI|ASR|BCLR|BLD|BRBC|BRBS|BRCC|BRCS|BREAK|BREQ|BRGE|BRHC|BRHS|BRID|BRIE|BRLO|BRLT|BRMI|BRNE|BRPL|BRSH|BRTC|BRTS|BRVC|BRVS|BSET|BST|CALL|CBI|CBR|CLC|CLH|CLI|CLN|CLR|CLS|CLT|CLV|CLZ|COM|CP|CPC|CPI|CPSE|DEC|DES|EICALL|EIJMP|ELPM|EOR|FMUL|FMULS|FMULSU|ICALL|IJMP|IN|INC|JMP|LAC|LAS|LAT|LD|LD[A-Za-z0-9]|LPM|LSL|LSR|MOV|MOVW|MUL|MULS|MULSU|NEG|NOP|OR|ORI|OUT|POP|PUSH|RCALL|RET|RETI|RJMP|ROL|ROR|SBC|SBCI|SBI|SBIC|SBIS|SBIW|SBR|SBRC|SBRS|SEC|SEH|SEI|SEN|SER|SES|SET|SEV|SEZ|SLEEP|SPM|ST|ST[A-Z0-9]|SUB|SUBI|SWAP|TST|WDR|XCH|adc|add|adiw|and|andi|asr|bclr|bld|brbc|brbs|brcc|brcs|break|breq|brge|brhc|brhs|brid|brie|brlo|brlt|brmi|brne|brpl|brsh|brtc|brts|brvc|brvs|bset|bst|call|cbi|cbr|clc|clh|cli|cln|clr|cls|clt|clv|clz|com|cp|cpc|cpi|cpse|dec|des|eicall|eijmp|elpm|eor|fmul|fmuls|fmulsu|icall|ijmp|in|inc|jmp|lac|las|lat|ld|ld[a-z0-9]|lpm|lsl|lsr|mov|movw|mul|muls|mulsu|neg|nop|or|ori|out|pop|push|rcall|ret|reti|rjmp|rol|ror|sbc|sbci|sbi|sbic|sbis|sbiw|sbr|sbrc|sbrs|sec|seh|sei|sen|ser|ses|set|sev|sez|sleep|spm|st|st[a-zA-Z0-9]|sub|subi|swap|tst|wdr|xch)\\b/,\n      alias: 'keyword'\n    },\n    'hex-number': {\n      pattern: /#?\\$[\\da-f]{2,4}\\b/i,\n      alias: 'number'\n    },\n    'binary-number': {\n      pattern: /#?%[01]+\\b/,\n      alias: 'number'\n    },\n    'decimal-number': {\n      pattern: /#?\\b\\d+\\b/,\n      alias: 'number'\n    },\n    register: {\n      pattern: /\\b[acznvshtixy]\\b/i,\n      alias: 'variable'\n    },\n    operator: />>=?|<<=?|&&?|\\|\\|?|[-+*/%&|^!=<>?]=?/,\n    punctuation: /[(),:]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvYXNtYXRtZWwuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxRQUFRO0FBQ3pCQSxRQUFRLENBQUNDLFdBQVcsR0FBRyxVQUFVO0FBQ2pDRCxRQUFRLENBQUNFLE9BQU8sR0FBRyxFQUFFO0FBQ3JCLFNBQVNGLFFBQVFBLENBQUNHLEtBQUssRUFBRTtFQUN2QkEsS0FBSyxDQUFDQyxTQUFTLENBQUNKLFFBQVEsR0FBRztJQUN6QkssT0FBTyxFQUFFO01BQ1BDLE9BQU8sRUFBRSxLQUFLO01BQ2RDLE1BQU0sRUFBRTtJQUNWLENBQUM7SUFDREMsTUFBTSxFQUFFO01BQ05GLE9BQU8sRUFBRSxtQ0FBbUM7TUFDNUNDLE1BQU0sRUFBRTtJQUNWLENBQUM7SUFDREUsUUFBUSxFQUFFLDhEQUE4RDtJQUN4RUMsU0FBUyxFQUFFO01BQ1RKLE9BQU8sRUFBRSxZQUFZO01BQ3JCSyxLQUFLLEVBQUU7SUFDVCxDQUFDO0lBQ0QsWUFBWSxFQUFFO01BQ1pMLE9BQU8sRUFBRSwwQkFBMEI7TUFDbkNLLEtBQUssRUFBRTtJQUNULENBQUM7SUFDRCxTQUFTLEVBQUU7TUFDVEwsT0FBTyxFQUNMLDZqQ0FBNmpDO01BQy9qQ0ssS0FBSyxFQUFFO0lBQ1QsQ0FBQztJQUNELFlBQVksRUFBRTtNQUNaTCxPQUFPLEVBQUUscUJBQXFCO01BQzlCSyxLQUFLLEVBQUU7SUFDVCxDQUFDO0lBQ0QsZUFBZSxFQUFFO01BQ2ZMLE9BQU8sRUFBRSxZQUFZO01BQ3JCSyxLQUFLLEVBQUU7SUFDVCxDQUFDO0lBQ0QsZ0JBQWdCLEVBQUU7TUFDaEJMLE9BQU8sRUFBRSxXQUFXO01BQ3BCSyxLQUFLLEVBQUU7SUFDVCxDQUFDO0lBQ0RDLFFBQVEsRUFBRTtNQUNSTixPQUFPLEVBQUUsb0JBQW9CO01BQzdCSyxLQUFLLEVBQUU7SUFDVCxDQUFDO0lBQ0RFLFFBQVEsRUFBRSx1Q0FBdUM7SUFDakRDLFdBQVcsRUFBRTtFQUNmLENBQUM7QUFDSCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXGFzbWF0bWVsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGFzbWF0bWVsXG5hc21hdG1lbC5kaXNwbGF5TmFtZSA9ICdhc21hdG1lbCdcbmFzbWF0bWVsLmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24gYXNtYXRtZWwoUHJpc20pIHtcbiAgUHJpc20ubGFuZ3VhZ2VzLmFzbWF0bWVsID0ge1xuICAgIGNvbW1lbnQ6IHtcbiAgICAgIHBhdHRlcm46IC87LiovLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICBzdHJpbmc6IHtcbiAgICAgIHBhdHRlcm46IC8oW1wiJ2BdKSg/OlxcXFwufCg/IVxcMSlbXlxcXFxcXHJcXG5dKSpcXDEvLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICBjb25zdGFudDogL1xcYig/OlBPUlRbQS1aXXxERFJbQS1aXXwoPzpERHxQKVtBLVpdKD86XFxkfFswLTJdXFxkfDNbMDFdKSlcXGIvLFxuICAgIGRpcmVjdGl2ZToge1xuICAgICAgcGF0dGVybjogL1xcLlxcdysoPz0gKS8sXG4gICAgICBhbGlhczogJ3Byb3BlcnR5J1xuICAgIH0sXG4gICAgJ3ItcmVnaXN0ZXInOiB7XG4gICAgICBwYXR0ZXJuOiAvXFxicig/OlxcZHxbMTJdXFxkfDNbMDFdKVxcYi8sXG4gICAgICBhbGlhczogJ3ZhcmlhYmxlJ1xuICAgIH0sXG4gICAgJ29wLWNvZGUnOiB7XG4gICAgICBwYXR0ZXJuOlxuICAgICAgICAvXFxiKD86QURDfEFERHxBRElXfEFORHxBTkRJfEFTUnxCQ0xSfEJMRHxCUkJDfEJSQlN8QlJDQ3xCUkNTfEJSRUFLfEJSRVF8QlJHRXxCUkhDfEJSSFN8QlJJRHxCUklFfEJSTE98QlJMVHxCUk1JfEJSTkV8QlJQTHxCUlNIfEJSVEN8QlJUU3xCUlZDfEJSVlN8QlNFVHxCU1R8Q0FMTHxDQkl8Q0JSfENMQ3xDTEh8Q0xJfENMTnxDTFJ8Q0xTfENMVHxDTFZ8Q0xafENPTXxDUHxDUEN8Q1BJfENQU0V8REVDfERFU3xFSUNBTEx8RUlKTVB8RUxQTXxFT1J8Rk1VTHxGTVVMU3xGTVVMU1V8SUNBTEx8SUpNUHxJTnxJTkN8Sk1QfExBQ3xMQVN8TEFUfExEfExEW0EtWmEtejAtOV18TFBNfExTTHxMU1J8TU9WfE1PVld8TVVMfE1VTFN8TVVMU1V8TkVHfE5PUHxPUnxPUkl8T1VUfFBPUHxQVVNIfFJDQUxMfFJFVHxSRVRJfFJKTVB8Uk9MfFJPUnxTQkN8U0JDSXxTQkl8U0JJQ3xTQklTfFNCSVd8U0JSfFNCUkN8U0JSU3xTRUN8U0VIfFNFSXxTRU58U0VSfFNFU3xTRVR8U0VWfFNFWnxTTEVFUHxTUE18U1R8U1RbQS1aMC05XXxTVUJ8U1VCSXxTV0FQfFRTVHxXRFJ8WENIfGFkY3xhZGR8YWRpd3xhbmR8YW5kaXxhc3J8YmNscnxibGR8YnJiY3xicmJzfGJyY2N8YnJjc3xicmVha3xicmVxfGJyZ2V8YnJoY3xicmhzfGJyaWR8YnJpZXxicmxvfGJybHR8YnJtaXxicm5lfGJycGx8YnJzaHxicnRjfGJydHN8YnJ2Y3xicnZzfGJzZXR8YnN0fGNhbGx8Y2JpfGNicnxjbGN8Y2xofGNsaXxjbG58Y2xyfGNsc3xjbHR8Y2x2fGNsenxjb218Y3B8Y3BjfGNwaXxjcHNlfGRlY3xkZXN8ZWljYWxsfGVpam1wfGVscG18ZW9yfGZtdWx8Zm11bHN8Zm11bHN1fGljYWxsfGlqbXB8aW58aW5jfGptcHxsYWN8bGFzfGxhdHxsZHxsZFthLXowLTldfGxwbXxsc2x8bHNyfG1vdnxtb3Z3fG11bHxtdWxzfG11bHN1fG5lZ3xub3B8b3J8b3JpfG91dHxwb3B8cHVzaHxyY2FsbHxyZXR8cmV0aXxyam1wfHJvbHxyb3J8c2JjfHNiY2l8c2JpfHNiaWN8c2Jpc3xzYml3fHNicnxzYnJjfHNicnN8c2VjfHNlaHxzZWl8c2VufHNlcnxzZXN8c2V0fHNldnxzZXp8c2xlZXB8c3BtfHN0fHN0W2EtekEtWjAtOV18c3VifHN1Yml8c3dhcHx0c3R8d2RyfHhjaClcXGIvLFxuICAgICAgYWxpYXM6ICdrZXl3b3JkJ1xuICAgIH0sXG4gICAgJ2hleC1udW1iZXInOiB7XG4gICAgICBwYXR0ZXJuOiAvIz9cXCRbXFxkYS1mXXsyLDR9XFxiL2ksXG4gICAgICBhbGlhczogJ251bWJlcidcbiAgICB9LFxuICAgICdiaW5hcnktbnVtYmVyJzoge1xuICAgICAgcGF0dGVybjogLyM/JVswMV0rXFxiLyxcbiAgICAgIGFsaWFzOiAnbnVtYmVyJ1xuICAgIH0sXG4gICAgJ2RlY2ltYWwtbnVtYmVyJzoge1xuICAgICAgcGF0dGVybjogLyM/XFxiXFxkK1xcYi8sXG4gICAgICBhbGlhczogJ251bWJlcidcbiAgICB9LFxuICAgIHJlZ2lzdGVyOiB7XG4gICAgICBwYXR0ZXJuOiAvXFxiW2Fjem52c2h0aXh5XVxcYi9pLFxuICAgICAgYWxpYXM6ICd2YXJpYWJsZSdcbiAgICB9LFxuICAgIG9wZXJhdG9yOiAvPj49P3w8PD0/fCYmP3xcXHxcXHw/fFstKyovJSZ8XiE9PD4/XT0/LyxcbiAgICBwdW5jdHVhdGlvbjogL1soKSw6XS9cbiAgfVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJhc21hdG1lbCIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwiY29tbWVudCIsInBhdHRlcm4iLCJncmVlZHkiLCJzdHJpbmciLCJjb25zdGFudCIsImRpcmVjdGl2ZSIsImFsaWFzIiwicmVnaXN0ZXIiLCJvcGVyYXRvciIsInB1bmN0dWF0aW9uIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/asmatmel.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/aspnet.js":
/*!***********************************************!*\
  !*** ./node_modules/refractor/lang/aspnet.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar refractorCsharp = __webpack_require__(/*! ./csharp.js */ \"(ssr)/./node_modules/refractor/lang/csharp.js\");\nmodule.exports = aspnet;\naspnet.displayName = 'aspnet';\naspnet.aliases = [];\nfunction aspnet(Prism) {\n  Prism.register(refractorCsharp);\n  Prism.languages.aspnet = Prism.languages.extend('markup', {\n    'page-directive': {\n      pattern: /<%\\s*@.*%>/,\n      alias: 'tag',\n      inside: {\n        'page-directive': {\n          pattern: /<%\\s*@\\s*(?:Assembly|Control|Implements|Import|Master(?:Type)?|OutputCache|Page|PreviousPageType|Reference|Register)?|%>/i,\n          alias: 'tag'\n        },\n        rest: Prism.languages.markup.tag.inside\n      }\n    },\n    directive: {\n      pattern: /<%.*%>/,\n      alias: 'tag',\n      inside: {\n        directive: {\n          pattern: /<%\\s*?[$=%#:]{0,2}|%>/,\n          alias: 'tag'\n        },\n        rest: Prism.languages.csharp\n      }\n    }\n  }); // Regexp copied from prism-markup, with a negative look-ahead added\n  Prism.languages.aspnet.tag.pattern = /<(?!%)\\/?[^\\s>\\/]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/; // match directives of attribute value foo=\"<% Bar %>\"\n  Prism.languages.insertBefore('inside', 'punctuation', {\n    directive: Prism.languages.aspnet['directive']\n  }, Prism.languages.aspnet.tag.inside['attr-value']);\n  Prism.languages.insertBefore('aspnet', 'comment', {\n    'asp-comment': {\n      pattern: /<%--[\\s\\S]*?--%>/,\n      alias: ['asp', 'comment']\n    }\n  }); // script runat=\"server\" contains csharp, not javascript\n  Prism.languages.insertBefore('aspnet', Prism.languages.javascript ? 'script' : 'tag', {\n    'asp-script': {\n      pattern: /(<script(?=.*runat=['\"]?server\\b)[^>]*>)[\\s\\S]*?(?=<\\/script>)/i,\n      lookbehind: true,\n      alias: ['asp', 'script'],\n      inside: Prism.languages.csharp || {}\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvYXNwbmV0LmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUNaLElBQUlBLGVBQWUsR0FBR0MsbUJBQU8sQ0FBQyxrRUFBYSxDQUFDO0FBQzVDQyxNQUFNLENBQUNDLE9BQU8sR0FBR0MsTUFBTTtBQUN2QkEsTUFBTSxDQUFDQyxXQUFXLEdBQUcsUUFBUTtBQUM3QkQsTUFBTSxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNuQixTQUFTRixNQUFNQSxDQUFDRyxLQUFLLEVBQUU7RUFDckJBLEtBQUssQ0FBQ0MsUUFBUSxDQUFDUixlQUFlLENBQUM7RUFDL0JPLEtBQUssQ0FBQ0UsU0FBUyxDQUFDTCxNQUFNLEdBQUdHLEtBQUssQ0FBQ0UsU0FBUyxDQUFDQyxNQUFNLENBQUMsUUFBUSxFQUFFO0lBQ3hELGdCQUFnQixFQUFFO01BQ2hCQyxPQUFPLEVBQUUsWUFBWTtNQUNyQkMsS0FBSyxFQUFFLEtBQUs7TUFDWkMsTUFBTSxFQUFFO1FBQ04sZ0JBQWdCLEVBQUU7VUFDaEJGLE9BQU8sRUFDTCwySEFBMkg7VUFDN0hDLEtBQUssRUFBRTtRQUNULENBQUM7UUFDREUsSUFBSSxFQUFFUCxLQUFLLENBQUNFLFNBQVMsQ0FBQ00sTUFBTSxDQUFDQyxHQUFHLENBQUNIO01BQ25DO0lBQ0YsQ0FBQztJQUNESSxTQUFTLEVBQUU7TUFDVE4sT0FBTyxFQUFFLFFBQVE7TUFDakJDLEtBQUssRUFBRSxLQUFLO01BQ1pDLE1BQU0sRUFBRTtRQUNOSSxTQUFTLEVBQUU7VUFDVE4sT0FBTyxFQUFFLHVCQUF1QjtVQUNoQ0MsS0FBSyxFQUFFO1FBQ1QsQ0FBQztRQUNERSxJQUFJLEVBQUVQLEtBQUssQ0FBQ0UsU0FBUyxDQUFDUztNQUN4QjtJQUNGO0VBQ0YsQ0FBQyxDQUFDLEVBQUM7RUFDSFgsS0FBSyxDQUFDRSxTQUFTLENBQUNMLE1BQU0sQ0FBQ1ksR0FBRyxDQUFDTCxPQUFPLEdBQ2hDLGtHQUFrRyxFQUFDO0VBQ3JHSixLQUFLLENBQUNFLFNBQVMsQ0FBQ1UsWUFBWSxDQUMxQixRQUFRLEVBQ1IsYUFBYSxFQUNiO0lBQ0VGLFNBQVMsRUFBRVYsS0FBSyxDQUFDRSxTQUFTLENBQUNMLE1BQU0sQ0FBQyxXQUFXO0VBQy9DLENBQUMsRUFDREcsS0FBSyxDQUFDRSxTQUFTLENBQUNMLE1BQU0sQ0FBQ1ksR0FBRyxDQUFDSCxNQUFNLENBQUMsWUFBWSxDQUNoRCxDQUFDO0VBQ0ROLEtBQUssQ0FBQ0UsU0FBUyxDQUFDVSxZQUFZLENBQUMsUUFBUSxFQUFFLFNBQVMsRUFBRTtJQUNoRCxhQUFhLEVBQUU7TUFDYlIsT0FBTyxFQUFFLGtCQUFrQjtNQUMzQkMsS0FBSyxFQUFFLENBQUMsS0FBSyxFQUFFLFNBQVM7SUFDMUI7RUFDRixDQUFDLENBQUMsRUFBQztFQUNITCxLQUFLLENBQUNFLFNBQVMsQ0FBQ1UsWUFBWSxDQUMxQixRQUFRLEVBQ1JaLEtBQUssQ0FBQ0UsU0FBUyxDQUFDVyxVQUFVLEdBQUcsUUFBUSxHQUFHLEtBQUssRUFDN0M7SUFDRSxZQUFZLEVBQUU7TUFDWlQsT0FBTyxFQUNMLGlFQUFpRTtNQUNuRVUsVUFBVSxFQUFFLElBQUk7TUFDaEJULEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUM7TUFDeEJDLE1BQU0sRUFBRU4sS0FBSyxDQUFDRSxTQUFTLENBQUNTLE1BQU0sSUFBSSxDQUFDO0lBQ3JDO0VBQ0YsQ0FDRixDQUFDO0FBQ0giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxhc3BuZXQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG52YXIgcmVmcmFjdG9yQ3NoYXJwID0gcmVxdWlyZSgnLi9jc2hhcnAuanMnKVxubW9kdWxlLmV4cG9ydHMgPSBhc3BuZXRcbmFzcG5ldC5kaXNwbGF5TmFtZSA9ICdhc3BuZXQnXG5hc3BuZXQuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBhc3BuZXQoUHJpc20pIHtcbiAgUHJpc20ucmVnaXN0ZXIocmVmcmFjdG9yQ3NoYXJwKVxuICBQcmlzbS5sYW5ndWFnZXMuYXNwbmV0ID0gUHJpc20ubGFuZ3VhZ2VzLmV4dGVuZCgnbWFya3VwJywge1xuICAgICdwYWdlLWRpcmVjdGl2ZSc6IHtcbiAgICAgIHBhdHRlcm46IC88JVxccypALiolPi8sXG4gICAgICBhbGlhczogJ3RhZycsXG4gICAgICBpbnNpZGU6IHtcbiAgICAgICAgJ3BhZ2UtZGlyZWN0aXZlJzoge1xuICAgICAgICAgIHBhdHRlcm46XG4gICAgICAgICAgICAvPCVcXHMqQFxccyooPzpBc3NlbWJseXxDb250cm9sfEltcGxlbWVudHN8SW1wb3J0fE1hc3Rlcig/OlR5cGUpP3xPdXRwdXRDYWNoZXxQYWdlfFByZXZpb3VzUGFnZVR5cGV8UmVmZXJlbmNlfFJlZ2lzdGVyKT98JT4vaSxcbiAgICAgICAgICBhbGlhczogJ3RhZydcbiAgICAgICAgfSxcbiAgICAgICAgcmVzdDogUHJpc20ubGFuZ3VhZ2VzLm1hcmt1cC50YWcuaW5zaWRlXG4gICAgICB9XG4gICAgfSxcbiAgICBkaXJlY3RpdmU6IHtcbiAgICAgIHBhdHRlcm46IC88JS4qJT4vLFxuICAgICAgYWxpYXM6ICd0YWcnLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgIGRpcmVjdGl2ZToge1xuICAgICAgICAgIHBhdHRlcm46IC88JVxccyo/WyQ9JSM6XXswLDJ9fCU+LyxcbiAgICAgICAgICBhbGlhczogJ3RhZydcbiAgICAgICAgfSxcbiAgICAgICAgcmVzdDogUHJpc20ubGFuZ3VhZ2VzLmNzaGFycFxuICAgICAgfVxuICAgIH1cbiAgfSkgLy8gUmVnZXhwIGNvcGllZCBmcm9tIHByaXNtLW1hcmt1cCwgd2l0aCBhIG5lZ2F0aXZlIGxvb2stYWhlYWQgYWRkZWRcbiAgUHJpc20ubGFuZ3VhZ2VzLmFzcG5ldC50YWcucGF0dGVybiA9XG4gICAgLzwoPyElKVxcLz9bXlxccz5cXC9dKyg/OlxccytbXlxccz5cXC89XSsoPzo9KD86KFwifCcpKD86XFxcXFtcXHNcXFNdfCg/IVxcMSlbXlxcXFxdKSpcXDF8W15cXHMnXCI+PV0rKSk/KSpcXHMqXFwvPz4vIC8vIG1hdGNoIGRpcmVjdGl2ZXMgb2YgYXR0cmlidXRlIHZhbHVlIGZvbz1cIjwlIEJhciAlPlwiXG4gIFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoXG4gICAgJ2luc2lkZScsXG4gICAgJ3B1bmN0dWF0aW9uJyxcbiAgICB7XG4gICAgICBkaXJlY3RpdmU6IFByaXNtLmxhbmd1YWdlcy5hc3BuZXRbJ2RpcmVjdGl2ZSddXG4gICAgfSxcbiAgICBQcmlzbS5sYW5ndWFnZXMuYXNwbmV0LnRhZy5pbnNpZGVbJ2F0dHItdmFsdWUnXVxuICApXG4gIFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ2FzcG5ldCcsICdjb21tZW50Jywge1xuICAgICdhc3AtY29tbWVudCc6IHtcbiAgICAgIHBhdHRlcm46IC88JS0tW1xcc1xcU10qPy0tJT4vLFxuICAgICAgYWxpYXM6IFsnYXNwJywgJ2NvbW1lbnQnXVxuICAgIH1cbiAgfSkgLy8gc2NyaXB0IHJ1bmF0PVwic2VydmVyXCIgY29udGFpbnMgY3NoYXJwLCBub3QgamF2YXNjcmlwdFxuICBQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKFxuICAgICdhc3BuZXQnLFxuICAgIFByaXNtLmxhbmd1YWdlcy5qYXZhc2NyaXB0ID8gJ3NjcmlwdCcgOiAndGFnJyxcbiAgICB7XG4gICAgICAnYXNwLXNjcmlwdCc6IHtcbiAgICAgICAgcGF0dGVybjpcbiAgICAgICAgICAvKDxzY3JpcHQoPz0uKnJ1bmF0PVsnXCJdP3NlcnZlclxcYilbXj5dKj4pW1xcc1xcU10qPyg/PTxcXC9zY3JpcHQ+KS9pLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICBhbGlhczogWydhc3AnLCAnc2NyaXB0J10sXG4gICAgICAgIGluc2lkZTogUHJpc20ubGFuZ3VhZ2VzLmNzaGFycCB8fCB7fVxuICAgICAgfVxuICAgIH1cbiAgKVxufVxuIl0sIm5hbWVzIjpbInJlZnJhY3RvckNzaGFycCIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiYXNwbmV0IiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJyZWdpc3RlciIsImxhbmd1YWdlcyIsImV4dGVuZCIsInBhdHRlcm4iLCJhbGlhcyIsImluc2lkZSIsInJlc3QiLCJtYXJrdXAiLCJ0YWciLCJkaXJlY3RpdmUiLCJjc2hhcnAiLCJpbnNlcnRCZWZvcmUiLCJqYXZhc2NyaXB0IiwibG9va2JlaGluZCJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/aspnet.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/autohotkey.js":
/*!***************************************************!*\
  !*** ./node_modules/refractor/lang/autohotkey.js ***!
  \***************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = autohotkey;\nautohotkey.displayName = 'autohotkey';\nautohotkey.aliases = [];\nfunction autohotkey(Prism) {\n  // NOTES - follows first-first highlight method, block is locked after highlight, different from SyntaxHl\n  Prism.languages.autohotkey = {\n    comment: [{\n      pattern: /(^|\\s);.*/,\n      lookbehind: true\n    }, {\n      pattern: /(^[\\t ]*)\\/\\*(?:[\\r\\n](?![ \\t]*\\*\\/)|[^\\r\\n])*(?:[\\r\\n][ \\t]*\\*\\/)?/m,\n      lookbehind: true,\n      greedy: true\n    }],\n    tag: {\n      // labels\n      pattern: /^([ \\t]*)[^\\s,`\":]+(?=:[ \\t]*$)/m,\n      lookbehind: true\n    },\n    string: /\"(?:[^\"\\n\\r]|\"\")*\"/,\n    variable: /%\\w+%/,\n    number: /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,\n    operator: /\\?|\\/\\/?=?|:=|\\|[=|]?|&[=&]?|\\+[=+]?|-[=-]?|\\*[=*]?|<(?:<=?|>|=)?|>>?=?|[.^!=~]=?|\\b(?:AND|NOT|OR)\\b/,\n    \"boolean\": /\\b(?:false|true)\\b/,\n    selector: /\\b(?:AutoTrim|BlockInput|Break|Click|ClipWait|Continue|Control|ControlClick|ControlFocus|ControlGet|ControlGetFocus|ControlGetPos|ControlGetText|ControlMove|ControlSend|ControlSendRaw|ControlSetText|CoordMode|Critical|DetectHiddenText|DetectHiddenWindows|Drive|DriveGet|DriveSpaceFree|EnvAdd|EnvDiv|EnvGet|EnvMult|EnvSet|EnvSub|EnvUpdate|Exit|ExitApp|FileAppend|FileCopy|FileCopyDir|FileCreateDir|FileCreateShortcut|FileDelete|FileEncoding|FileGetAttrib|FileGetShortcut|FileGetSize|FileGetTime|FileGetVersion|FileInstall|FileMove|FileMoveDir|FileRead|FileReadLine|FileRecycle|FileRecycleEmpty|FileRemoveDir|FileSelectFile|FileSelectFolder|FileSetAttrib|FileSetTime|FormatTime|GetKeyState|Gosub|Goto|GroupActivate|GroupAdd|GroupClose|GroupDeactivate|Gui|GuiControl|GuiControlGet|Hotkey|ImageSearch|IniDelete|IniRead|IniWrite|Input|InputBox|KeyWait|ListHotkeys|ListLines|ListVars|Loop|Menu|MouseClick|MouseClickDrag|MouseGetPos|MouseMove|MsgBox|OnExit|OutputDebug|Pause|PixelGetColor|PixelSearch|PostMessage|Process|Progress|Random|RegDelete|RegRead|RegWrite|Reload|Repeat|Return|Run|RunAs|RunWait|Send|SendEvent|SendInput|SendMessage|SendMode|SendPlay|SendRaw|SetBatchLines|SetCapslockState|SetControlDelay|SetDefaultMouseSpeed|SetEnv|SetFormat|SetKeyDelay|SetMouseDelay|SetNumlockState|SetRegView|SetScrollLockState|SetStoreCapslockMode|SetTimer|SetTitleMatchMode|SetWinDelay|SetWorkingDir|Shutdown|Sleep|Sort|SoundBeep|SoundGet|SoundGetWaveVolume|SoundPlay|SoundSet|SoundSetWaveVolume|SplashImage|SplashTextOff|SplashTextOn|SplitPath|StatusBarGetText|StatusBarWait|StringCaseSense|StringGetPos|StringLeft|StringLen|StringLower|StringMid|StringReplace|StringRight|StringSplit|StringTrimLeft|StringTrimRight|StringUpper|Suspend|SysGet|Thread|ToolTip|Transform|TrayTip|URLDownloadToFile|WinActivate|WinActivateBottom|WinClose|WinGet|WinGetActiveStats|WinGetActiveTitle|WinGetClass|WinGetPos|WinGetText|WinGetTitle|WinHide|WinKill|WinMaximize|WinMenuSelectItem|WinMinimize|WinMinimizeAll|WinMinimizeAllUndo|WinMove|WinRestore|WinSet|WinSetTitle|WinShow|WinWait|WinWaitActive|WinWaitClose|WinWaitNotActive)\\b/i,\n    constant: /\\b(?:a_ahkpath|a_ahkversion|a_appdata|a_appdatacommon|a_autotrim|a_batchlines|a_caretx|a_carety|a_computername|a_controldelay|a_cursor|a_dd|a_ddd|a_dddd|a_defaultmousespeed|a_desktop|a_desktopcommon|a_detecthiddentext|a_detecthiddenwindows|a_endchar|a_eventinfo|a_exitreason|a_fileencoding|a_formatfloat|a_formatinteger|a_gui|a_guicontrol|a_guicontrolevent|a_guievent|a_guiheight|a_guiwidth|a_guix|a_guiy|a_hour|a_iconfile|a_iconhidden|a_iconnumber|a_icontip|a_index|a_ipaddress1|a_ipaddress2|a_ipaddress3|a_ipaddress4|a_is64bitos|a_isadmin|a_iscompiled|a_iscritical|a_ispaused|a_issuspended|a_isunicode|a_keydelay|a_language|a_lasterror|a_linefile|a_linenumber|a_loopfield|a_loopfileattrib|a_loopfiledir|a_loopfileext|a_loopfilefullpath|a_loopfilelongpath|a_loopfilename|a_loopfileshortname|a_loopfileshortpath|a_loopfilesize|a_loopfilesizekb|a_loopfilesizemb|a_loopfiletimeaccessed|a_loopfiletimecreated|a_loopfiletimemodified|a_loopreadline|a_loopregkey|a_loopregname|a_loopregsubkey|a_loopregtimemodified|a_loopregtype|a_mday|a_min|a_mm|a_mmm|a_mmmm|a_mon|a_mousedelay|a_msec|a_mydocuments|a_now|a_nowutc|a_numbatchlines|a_ostype|a_osversion|a_priorhotkey|a_priorkey|a_programfiles|a_programs|a_programscommon|a_ptrsize|a_regview|a_screendpi|a_screenheight|a_screenwidth|a_scriptdir|a_scriptfullpath|a_scripthwnd|a_scriptname|a_sec|a_space|a_startmenu|a_startmenucommon|a_startup|a_startupcommon|a_stringcasesense|a_tab|a_temp|a_thisfunc|a_thishotkey|a_thislabel|a_thismenu|a_thismenuitem|a_thismenuitempos|a_tickcount|a_timeidle|a_timeidlephysical|a_timesincepriorhotkey|a_timesincethishotkey|a_titlematchmode|a_titlematchmodespeed|a_username|a_wday|a_windelay|a_windir|a_workingdir|a_yday|a_year|a_yweek|a_yyyy|clipboard|clipboardall|comspec|errorlevel|programfiles)\\b/i,\n    builtin: /\\b(?:abs|acos|asc|asin|atan|ceil|chr|class|comobjactive|comobjarray|comobjconnect|comobjcreate|comobjerror|comobjflags|comobjget|comobjquery|comobjtype|comobjvalue|cos|dllcall|exp|fileexist|Fileopen|floor|format|il_add|il_create|il_destroy|instr|isfunc|islabel|IsObject|ln|log|ltrim|lv_add|lv_delete|lv_deletecol|lv_getcount|lv_getnext|lv_gettext|lv_insert|lv_insertcol|lv_modify|lv_modifycol|lv_setimagelist|mod|numget|numput|onmessage|regexmatch|regexreplace|registercallback|round|rtrim|sb_seticon|sb_setparts|sb_settext|sin|sqrt|strlen|strreplace|strsplit|substr|tan|tv_add|tv_delete|tv_get|tv_getchild|tv_getcount|tv_getnext|tv_getparent|tv_getprev|tv_getselection|tv_gettext|tv_modify|varsetcapacity|winactive|winexist|__Call|__Get|__New|__Set)\\b/i,\n    symbol: /\\b(?:alt|altdown|altup|appskey|backspace|browser_back|browser_favorites|browser_forward|browser_home|browser_refresh|browser_search|browser_stop|bs|capslock|ctrl|ctrlbreak|ctrldown|ctrlup|del|delete|down|end|enter|esc|escape|f1|f10|f11|f12|f13|f14|f15|f16|f17|f18|f19|f2|f20|f21|f22|f23|f24|f3|f4|f5|f6|f7|f8|f9|home|ins|insert|joy1|joy10|joy11|joy12|joy13|joy14|joy15|joy16|joy17|joy18|joy19|joy2|joy20|joy21|joy22|joy23|joy24|joy25|joy26|joy27|joy28|joy29|joy3|joy30|joy31|joy32|joy4|joy5|joy6|joy7|joy8|joy9|joyaxes|joybuttons|joyinfo|joyname|joypov|joyr|joyu|joyv|joyx|joyy|joyz|lalt|launch_app1|launch_app2|launch_mail|launch_media|lbutton|lcontrol|lctrl|left|lshift|lwin|lwindown|lwinup|mbutton|media_next|media_play_pause|media_prev|media_stop|numlock|numpad0|numpad1|numpad2|numpad3|numpad4|numpad5|numpad6|numpad7|numpad8|numpad9|numpadadd|numpadclear|numpaddel|numpaddiv|numpaddot|numpaddown|numpadend|numpadenter|numpadhome|numpadins|numpadleft|numpadmult|numpadpgdn|numpadpgup|numpadright|numpadsub|numpadup|pgdn|pgup|printscreen|ralt|rbutton|rcontrol|rctrl|right|rshift|rwin|rwindown|rwinup|scrolllock|shift|shiftdown|shiftup|space|tab|up|volume_down|volume_mute|volume_up|wheeldown|wheelleft|wheelright|wheelup|xbutton1|xbutton2)\\b/i,\n    important: /#\\b(?:AllowSameLineComments|ClipboardTimeout|CommentFlag|DerefChar|ErrorStdOut|EscapeChar|HotkeyInterval|HotkeyModifierTimeout|Hotstring|If|IfTimeout|IfWinActive|IfWinExist|IfWinNotActive|IfWinNotExist|Include|IncludeAgain|InputLevel|InstallKeybdHook|InstallMouseHook|KeyHistory|MaxHotkeysPerInterval|MaxMem|MaxThreads|MaxThreadsBuffer|MaxThreadsPerHotkey|MenuMaskKey|NoEnv|NoTrayIcon|Persistent|SingleInstance|UseHook|Warn|WinActivateForce)\\b/i,\n    keyword: /\\b(?:Abort|AboveNormal|Add|ahk_class|ahk_exe|ahk_group|ahk_id|ahk_pid|All|Alnum|Alpha|AltSubmit|AltTab|AltTabAndMenu|AltTabMenu|AltTabMenuDismiss|AlwaysOnTop|AutoSize|Background|BackgroundTrans|BelowNormal|between|BitAnd|BitNot|BitOr|BitShiftLeft|BitShiftRight|BitXOr|Bold|Border|Button|ByRef|Catch|Checkbox|Checked|CheckedGray|Choose|ChooseString|Close|Color|ComboBox|Contains|ControlList|Count|Date|DateTime|Days|DDL|Default|DeleteAll|Delimiter|Deref|Destroy|Digit|Disable|Disabled|DropDownList|Edit|Eject|Else|Enable|Enabled|Error|Exist|Expand|ExStyle|FileSystem|Finally|First|Flash|Float|FloatFast|Focus|Font|for|global|Grid|Group|GroupBox|GuiClose|GuiContextMenu|GuiDropFiles|GuiEscape|GuiSize|Hdr|Hidden|Hide|High|HKCC|HKCR|HKCU|HKEY_CLASSES_ROOT|HKEY_CURRENT_CONFIG|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKLM|HKU|Hours|HScroll|Icon|IconSmall|ID|IDLast|If|IfEqual|IfExist|IfGreater|IfGreaterOrEqual|IfInString|IfLess|IfLessOrEqual|IfMsgBox|IfNotEqual|IfNotExist|IfNotInString|IfWinActive|IfWinExist|IfWinNotActive|IfWinNotExist|Ignore|ImageList|in|Integer|IntegerFast|Interrupt|is|italic|Join|Label|LastFound|LastFoundExist|Limit|Lines|List|ListBox|ListView|local|Lock|Logoff|Low|Lower|Lowercase|MainWindow|Margin|Maximize|MaximizeBox|MaxSize|Minimize|MinimizeBox|MinMax|MinSize|Minutes|MonthCal|Mouse|Move|Multi|NA|No|NoActivate|NoDefault|NoHide|NoIcon|NoMainWindow|norm|Normal|NoSort|NoSortHdr|NoStandard|Not|NoTab|NoTimers|Number|Off|Ok|On|OwnDialogs|Owner|Parse|Password|Picture|Pixel|Pos|Pow|Priority|ProcessName|Radio|Range|Read|ReadOnly|Realtime|Redraw|Region|REG_BINARY|REG_DWORD|REG_EXPAND_SZ|REG_MULTI_SZ|REG_SZ|Relative|Rename|Report|Resize|Restore|Retry|RGB|Screen|Seconds|Section|Serial|SetLabel|ShiftAltTab|Show|Single|Slider|SortDesc|Standard|static|Status|StatusBar|StatusCD|strike|Style|Submit|SysMenu|Tab2|TabStop|Text|Theme|Throw|Tile|ToggleCheck|ToggleEnable|ToolWindow|Top|Topmost|TransColor|Transparent|Tray|TreeView|Try|TryAgain|Type|UnCheck|underline|Unicode|Unlock|Until|UpDown|Upper|Uppercase|UseErrorLevel|Vis|VisFirst|Visible|VScroll|Wait|WaitClose|WantCtrlA|WantF2|WantReturn|While|Wrap|Xdigit|xm|xp|xs|Yes|ym|yp|ys)\\b/i,\n    \"function\": /[^(); \\t,\\n+*\\-=?>:\\\\\\/<&%\\[\\]]+(?=\\()/,\n    punctuation: /[{}[\\]():,]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvYXV0b2hvdGtleS5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLFVBQVU7QUFDM0JBLFVBQVUsQ0FBQ0MsV0FBVyxHQUFHLFlBQVk7QUFDckNELFVBQVUsQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDdkIsU0FBU0YsVUFBVUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ3pCO0VBQ0FBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixVQUFVLEdBQUc7SUFDM0JLLE9BQU8sRUFBRSxDQUNQO01BQ0VDLE9BQU8sRUFBRSxXQUFXO01BQ3BCQyxVQUFVLEVBQUU7SUFDZCxDQUFDLEVBQ0Q7TUFDRUQsT0FBTyxFQUNMLHNFQUFzRTtNQUN4RUMsVUFBVSxFQUFFLElBQUk7TUFDaEJDLE1BQU0sRUFBRTtJQUNWLENBQUMsQ0FDRjtJQUNEQyxHQUFHLEVBQUU7TUFDSDtNQUNBSCxPQUFPLEVBQUUsa0NBQWtDO01BQzNDQyxVQUFVLEVBQUU7SUFDZCxDQUFDO0lBQ0RHLE1BQU0sRUFBRSxvQkFBb0I7SUFDNUJDLFFBQVEsRUFBRSxPQUFPO0lBQ2pCQyxNQUFNLEVBQUUsNkRBQTZEO0lBQ3JFQyxRQUFRLEVBQ04sc0dBQXNHO0lBQ3hHLFdBQVMsb0JBQW9CO0lBQzdCQyxRQUFRLEVBQ04sMmpFQUEyakU7SUFDN2pFQyxRQUFRLEVBQ04saXZEQUFpdkQ7SUFDbnZEQyxPQUFPLEVBQ0wsbXZCQUFtdkI7SUFDcnZCQyxNQUFNLEVBQ0osZ3VDQUFndUM7SUFDbHVDQyxTQUFTLEVBQ1AsOGJBQThiO0lBQ2hjQyxPQUFPLEVBQ0wsc25FQUFzbkU7SUFDeG5FLFlBQVUsd0NBQXdDO0lBQ2xEQyxXQUFXLEVBQUU7RUFDZixDQUFDO0FBQ0giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxhdXRvaG90a2V5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGF1dG9ob3RrZXlcbmF1dG9ob3RrZXkuZGlzcGxheU5hbWUgPSAnYXV0b2hvdGtleSdcbmF1dG9ob3RrZXkuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBhdXRvaG90a2V5KFByaXNtKSB7XG4gIC8vIE5PVEVTIC0gZm9sbG93cyBmaXJzdC1maXJzdCBoaWdobGlnaHQgbWV0aG9kLCBibG9jayBpcyBsb2NrZWQgYWZ0ZXIgaGlnaGxpZ2h0LCBkaWZmZXJlbnQgZnJvbSBTeW50YXhIbFxuICBQcmlzbS5sYW5ndWFnZXMuYXV0b2hvdGtleSA9IHtcbiAgICBjb21tZW50OiBbXG4gICAgICB7XG4gICAgICAgIHBhdHRlcm46IC8oXnxcXHMpOy4qLyxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgcGF0dGVybjpcbiAgICAgICAgICAvKF5bXFx0IF0qKVxcL1xcKig/OltcXHJcXG5dKD8hWyBcXHRdKlxcKlxcLyl8W15cXHJcXG5dKSooPzpbXFxyXFxuXVsgXFx0XSpcXCpcXC8pPy9tLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICBncmVlZHk6IHRydWVcbiAgICAgIH1cbiAgICBdLFxuICAgIHRhZzoge1xuICAgICAgLy8gbGFiZWxzXG4gICAgICBwYXR0ZXJuOiAvXihbIFxcdF0qKVteXFxzLGBcIjpdKyg/PTpbIFxcdF0qJCkvbSxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICB9LFxuICAgIHN0cmluZzogL1wiKD86W15cIlxcblxccl18XCJcIikqXCIvLFxuICAgIHZhcmlhYmxlOiAvJVxcdyslLyxcbiAgICBudW1iZXI6IC9cXGIweFtcXGRBLUZhLWZdK1xcYnwoPzpcXGJcXGQrKD86XFwuXFxkKik/fFxcQlxcLlxcZCspKD86W0VlXS0/XFxkKyk/LyxcbiAgICBvcGVyYXRvcjpcbiAgICAgIC9cXD98XFwvXFwvPz0/fDo9fFxcfFs9fF0/fCZbPSZdP3xcXCtbPStdP3wtWz0tXT98XFwqWz0qXT98PCg/Ojw9P3w+fD0pP3w+Pj89P3xbLl4hPX5dPT98XFxiKD86QU5EfE5PVHxPUilcXGIvLFxuICAgIGJvb2xlYW46IC9cXGIoPzpmYWxzZXx0cnVlKVxcYi8sXG4gICAgc2VsZWN0b3I6XG4gICAgICAvXFxiKD86QXV0b1RyaW18QmxvY2tJbnB1dHxCcmVha3xDbGlja3xDbGlwV2FpdHxDb250aW51ZXxDb250cm9sfENvbnRyb2xDbGlja3xDb250cm9sRm9jdXN8Q29udHJvbEdldHxDb250cm9sR2V0Rm9jdXN8Q29udHJvbEdldFBvc3xDb250cm9sR2V0VGV4dHxDb250cm9sTW92ZXxDb250cm9sU2VuZHxDb250cm9sU2VuZFJhd3xDb250cm9sU2V0VGV4dHxDb29yZE1vZGV8Q3JpdGljYWx8RGV0ZWN0SGlkZGVuVGV4dHxEZXRlY3RIaWRkZW5XaW5kb3dzfERyaXZlfERyaXZlR2V0fERyaXZlU3BhY2VGcmVlfEVudkFkZHxFbnZEaXZ8RW52R2V0fEVudk11bHR8RW52U2V0fEVudlN1YnxFbnZVcGRhdGV8RXhpdHxFeGl0QXBwfEZpbGVBcHBlbmR8RmlsZUNvcHl8RmlsZUNvcHlEaXJ8RmlsZUNyZWF0ZURpcnxGaWxlQ3JlYXRlU2hvcnRjdXR8RmlsZURlbGV0ZXxGaWxlRW5jb2Rpbmd8RmlsZUdldEF0dHJpYnxGaWxlR2V0U2hvcnRjdXR8RmlsZUdldFNpemV8RmlsZUdldFRpbWV8RmlsZUdldFZlcnNpb258RmlsZUluc3RhbGx8RmlsZU1vdmV8RmlsZU1vdmVEaXJ8RmlsZVJlYWR8RmlsZVJlYWRMaW5lfEZpbGVSZWN5Y2xlfEZpbGVSZWN5Y2xlRW1wdHl8RmlsZVJlbW92ZURpcnxGaWxlU2VsZWN0RmlsZXxGaWxlU2VsZWN0Rm9sZGVyfEZpbGVTZXRBdHRyaWJ8RmlsZVNldFRpbWV8Rm9ybWF0VGltZXxHZXRLZXlTdGF0ZXxHb3N1YnxHb3RvfEdyb3VwQWN0aXZhdGV8R3JvdXBBZGR8R3JvdXBDbG9zZXxHcm91cERlYWN0aXZhdGV8R3VpfEd1aUNvbnRyb2x8R3VpQ29udHJvbEdldHxIb3RrZXl8SW1hZ2VTZWFyY2h8SW5pRGVsZXRlfEluaVJlYWR8SW5pV3JpdGV8SW5wdXR8SW5wdXRCb3h8S2V5V2FpdHxMaXN0SG90a2V5c3xMaXN0TGluZXN8TGlzdFZhcnN8TG9vcHxNZW51fE1vdXNlQ2xpY2t8TW91c2VDbGlja0RyYWd8TW91c2VHZXRQb3N8TW91c2VNb3ZlfE1zZ0JveHxPbkV4aXR8T3V0cHV0RGVidWd8UGF1c2V8UGl4ZWxHZXRDb2xvcnxQaXhlbFNlYXJjaHxQb3N0TWVzc2FnZXxQcm9jZXNzfFByb2dyZXNzfFJhbmRvbXxSZWdEZWxldGV8UmVnUmVhZHxSZWdXcml0ZXxSZWxvYWR8UmVwZWF0fFJldHVybnxSdW58UnVuQXN8UnVuV2FpdHxTZW5kfFNlbmRFdmVudHxTZW5kSW5wdXR8U2VuZE1lc3NhZ2V8U2VuZE1vZGV8U2VuZFBsYXl8U2VuZFJhd3xTZXRCYXRjaExpbmVzfFNldENhcHNsb2NrU3RhdGV8U2V0Q29udHJvbERlbGF5fFNldERlZmF1bHRNb3VzZVNwZWVkfFNldEVudnxTZXRGb3JtYXR8U2V0S2V5RGVsYXl8U2V0TW91c2VEZWxheXxTZXROdW1sb2NrU3RhdGV8U2V0UmVnVmlld3xTZXRTY3JvbGxMb2NrU3RhdGV8U2V0U3RvcmVDYXBzbG9ja01vZGV8U2V0VGltZXJ8U2V0VGl0bGVNYXRjaE1vZGV8U2V0V2luRGVsYXl8U2V0V29ya2luZ0RpcnxTaHV0ZG93bnxTbGVlcHxTb3J0fFNvdW5kQmVlcHxTb3VuZEdldHxTb3VuZEdldFdhdmVWb2x1bWV8U291bmRQbGF5fFNvdW5kU2V0fFNvdW5kU2V0V2F2ZVZvbHVtZXxTcGxhc2hJbWFnZXxTcGxhc2hUZXh0T2ZmfFNwbGFzaFRleHRPbnxTcGxpdFBhdGh8U3RhdHVzQmFyR2V0VGV4dHxTdGF0dXNCYXJXYWl0fFN0cmluZ0Nhc2VTZW5zZXxTdHJpbmdHZXRQb3N8U3RyaW5nTGVmdHxTdHJpbmdMZW58U3RyaW5nTG93ZXJ8U3RyaW5nTWlkfFN0cmluZ1JlcGxhY2V8U3RyaW5nUmlnaHR8U3RyaW5nU3BsaXR8U3RyaW5nVHJpbUxlZnR8U3RyaW5nVHJpbVJpZ2h0fFN0cmluZ1VwcGVyfFN1c3BlbmR8U3lzR2V0fFRocmVhZHxUb29sVGlwfFRyYW5zZm9ybXxUcmF5VGlwfFVSTERvd25sb2FkVG9GaWxlfFdpbkFjdGl2YXRlfFdpbkFjdGl2YXRlQm90dG9tfFdpbkNsb3NlfFdpbkdldHxXaW5HZXRBY3RpdmVTdGF0c3xXaW5HZXRBY3RpdmVUaXRsZXxXaW5HZXRDbGFzc3xXaW5HZXRQb3N8V2luR2V0VGV4dHxXaW5HZXRUaXRsZXxXaW5IaWRlfFdpbktpbGx8V2luTWF4aW1pemV8V2luTWVudVNlbGVjdEl0ZW18V2luTWluaW1pemV8V2luTWluaW1pemVBbGx8V2luTWluaW1pemVBbGxVbmRvfFdpbk1vdmV8V2luUmVzdG9yZXxXaW5TZXR8V2luU2V0VGl0bGV8V2luU2hvd3xXaW5XYWl0fFdpbldhaXRBY3RpdmV8V2luV2FpdENsb3NlfFdpbldhaXROb3RBY3RpdmUpXFxiL2ksXG4gICAgY29uc3RhbnQ6XG4gICAgICAvXFxiKD86YV9haGtwYXRofGFfYWhrdmVyc2lvbnxhX2FwcGRhdGF8YV9hcHBkYXRhY29tbW9ufGFfYXV0b3RyaW18YV9iYXRjaGxpbmVzfGFfY2FyZXR4fGFfY2FyZXR5fGFfY29tcHV0ZXJuYW1lfGFfY29udHJvbGRlbGF5fGFfY3Vyc29yfGFfZGR8YV9kZGR8YV9kZGRkfGFfZGVmYXVsdG1vdXNlc3BlZWR8YV9kZXNrdG9wfGFfZGVza3RvcGNvbW1vbnxhX2RldGVjdGhpZGRlbnRleHR8YV9kZXRlY3RoaWRkZW53aW5kb3dzfGFfZW5kY2hhcnxhX2V2ZW50aW5mb3xhX2V4aXRyZWFzb258YV9maWxlZW5jb2Rpbmd8YV9mb3JtYXRmbG9hdHxhX2Zvcm1hdGludGVnZXJ8YV9ndWl8YV9ndWljb250cm9sfGFfZ3VpY29udHJvbGV2ZW50fGFfZ3VpZXZlbnR8YV9ndWloZWlnaHR8YV9ndWl3aWR0aHxhX2d1aXh8YV9ndWl5fGFfaG91cnxhX2ljb25maWxlfGFfaWNvbmhpZGRlbnxhX2ljb25udW1iZXJ8YV9pY29udGlwfGFfaW5kZXh8YV9pcGFkZHJlc3MxfGFfaXBhZGRyZXNzMnxhX2lwYWRkcmVzczN8YV9pcGFkZHJlc3M0fGFfaXM2NGJpdG9zfGFfaXNhZG1pbnxhX2lzY29tcGlsZWR8YV9pc2NyaXRpY2FsfGFfaXNwYXVzZWR8YV9pc3N1c3BlbmRlZHxhX2lzdW5pY29kZXxhX2tleWRlbGF5fGFfbGFuZ3VhZ2V8YV9sYXN0ZXJyb3J8YV9saW5lZmlsZXxhX2xpbmVudW1iZXJ8YV9sb29wZmllbGR8YV9sb29wZmlsZWF0dHJpYnxhX2xvb3BmaWxlZGlyfGFfbG9vcGZpbGVleHR8YV9sb29wZmlsZWZ1bGxwYXRofGFfbG9vcGZpbGVsb25ncGF0aHxhX2xvb3BmaWxlbmFtZXxhX2xvb3BmaWxlc2hvcnRuYW1lfGFfbG9vcGZpbGVzaG9ydHBhdGh8YV9sb29wZmlsZXNpemV8YV9sb29wZmlsZXNpemVrYnxhX2xvb3BmaWxlc2l6ZW1ifGFfbG9vcGZpbGV0aW1lYWNjZXNzZWR8YV9sb29wZmlsZXRpbWVjcmVhdGVkfGFfbG9vcGZpbGV0aW1lbW9kaWZpZWR8YV9sb29wcmVhZGxpbmV8YV9sb29wcmVna2V5fGFfbG9vcHJlZ25hbWV8YV9sb29wcmVnc3Via2V5fGFfbG9vcHJlZ3RpbWVtb2RpZmllZHxhX2xvb3ByZWd0eXBlfGFfbWRheXxhX21pbnxhX21tfGFfbW1tfGFfbW1tbXxhX21vbnxhX21vdXNlZGVsYXl8YV9tc2VjfGFfbXlkb2N1bWVudHN8YV9ub3d8YV9ub3d1dGN8YV9udW1iYXRjaGxpbmVzfGFfb3N0eXBlfGFfb3N2ZXJzaW9ufGFfcHJpb3Job3RrZXl8YV9wcmlvcmtleXxhX3Byb2dyYW1maWxlc3xhX3Byb2dyYW1zfGFfcHJvZ3JhbXNjb21tb258YV9wdHJzaXplfGFfcmVndmlld3xhX3NjcmVlbmRwaXxhX3NjcmVlbmhlaWdodHxhX3NjcmVlbndpZHRofGFfc2NyaXB0ZGlyfGFfc2NyaXB0ZnVsbHBhdGh8YV9zY3JpcHRod25kfGFfc2NyaXB0bmFtZXxhX3NlY3xhX3NwYWNlfGFfc3RhcnRtZW51fGFfc3RhcnRtZW51Y29tbW9ufGFfc3RhcnR1cHxhX3N0YXJ0dXBjb21tb258YV9zdHJpbmdjYXNlc2Vuc2V8YV90YWJ8YV90ZW1wfGFfdGhpc2Z1bmN8YV90aGlzaG90a2V5fGFfdGhpc2xhYmVsfGFfdGhpc21lbnV8YV90aGlzbWVudWl0ZW18YV90aGlzbWVudWl0ZW1wb3N8YV90aWNrY291bnR8YV90aW1laWRsZXxhX3RpbWVpZGxlcGh5c2ljYWx8YV90aW1lc2luY2VwcmlvcmhvdGtleXxhX3RpbWVzaW5jZXRoaXNob3RrZXl8YV90aXRsZW1hdGNobW9kZXxhX3RpdGxlbWF0Y2htb2Rlc3BlZWR8YV91c2VybmFtZXxhX3dkYXl8YV93aW5kZWxheXxhX3dpbmRpcnxhX3dvcmtpbmdkaXJ8YV95ZGF5fGFfeWVhcnxhX3l3ZWVrfGFfeXl5eXxjbGlwYm9hcmR8Y2xpcGJvYXJkYWxsfGNvbXNwZWN8ZXJyb3JsZXZlbHxwcm9ncmFtZmlsZXMpXFxiL2ksXG4gICAgYnVpbHRpbjpcbiAgICAgIC9cXGIoPzphYnN8YWNvc3xhc2N8YXNpbnxhdGFufGNlaWx8Y2hyfGNsYXNzfGNvbW9iamFjdGl2ZXxjb21vYmphcnJheXxjb21vYmpjb25uZWN0fGNvbW9iamNyZWF0ZXxjb21vYmplcnJvcnxjb21vYmpmbGFnc3xjb21vYmpnZXR8Y29tb2JqcXVlcnl8Y29tb2JqdHlwZXxjb21vYmp2YWx1ZXxjb3N8ZGxsY2FsbHxleHB8ZmlsZWV4aXN0fEZpbGVvcGVufGZsb29yfGZvcm1hdHxpbF9hZGR8aWxfY3JlYXRlfGlsX2Rlc3Ryb3l8aW5zdHJ8aXNmdW5jfGlzbGFiZWx8SXNPYmplY3R8bG58bG9nfGx0cmltfGx2X2FkZHxsdl9kZWxldGV8bHZfZGVsZXRlY29sfGx2X2dldGNvdW50fGx2X2dldG5leHR8bHZfZ2V0dGV4dHxsdl9pbnNlcnR8bHZfaW5zZXJ0Y29sfGx2X21vZGlmeXxsdl9tb2RpZnljb2x8bHZfc2V0aW1hZ2VsaXN0fG1vZHxudW1nZXR8bnVtcHV0fG9ubWVzc2FnZXxyZWdleG1hdGNofHJlZ2V4cmVwbGFjZXxyZWdpc3RlcmNhbGxiYWNrfHJvdW5kfHJ0cmltfHNiX3NldGljb258c2Jfc2V0cGFydHN8c2Jfc2V0dGV4dHxzaW58c3FydHxzdHJsZW58c3RycmVwbGFjZXxzdHJzcGxpdHxzdWJzdHJ8dGFufHR2X2FkZHx0dl9kZWxldGV8dHZfZ2V0fHR2X2dldGNoaWxkfHR2X2dldGNvdW50fHR2X2dldG5leHR8dHZfZ2V0cGFyZW50fHR2X2dldHByZXZ8dHZfZ2V0c2VsZWN0aW9ufHR2X2dldHRleHR8dHZfbW9kaWZ5fHZhcnNldGNhcGFjaXR5fHdpbmFjdGl2ZXx3aW5leGlzdHxfX0NhbGx8X19HZXR8X19OZXd8X19TZXQpXFxiL2ksXG4gICAgc3ltYm9sOlxuICAgICAgL1xcYig/OmFsdHxhbHRkb3dufGFsdHVwfGFwcHNrZXl8YmFja3NwYWNlfGJyb3dzZXJfYmFja3xicm93c2VyX2Zhdm9yaXRlc3xicm93c2VyX2ZvcndhcmR8YnJvd3Nlcl9ob21lfGJyb3dzZXJfcmVmcmVzaHxicm93c2VyX3NlYXJjaHxicm93c2VyX3N0b3B8YnN8Y2Fwc2xvY2t8Y3RybHxjdHJsYnJlYWt8Y3RybGRvd258Y3RybHVwfGRlbHxkZWxldGV8ZG93bnxlbmR8ZW50ZXJ8ZXNjfGVzY2FwZXxmMXxmMTB8ZjExfGYxMnxmMTN8ZjE0fGYxNXxmMTZ8ZjE3fGYxOHxmMTl8ZjJ8ZjIwfGYyMXxmMjJ8ZjIzfGYyNHxmM3xmNHxmNXxmNnxmN3xmOHxmOXxob21lfGluc3xpbnNlcnR8am95MXxqb3kxMHxqb3kxMXxqb3kxMnxqb3kxM3xqb3kxNHxqb3kxNXxqb3kxNnxqb3kxN3xqb3kxOHxqb3kxOXxqb3kyfGpveTIwfGpveTIxfGpveTIyfGpveTIzfGpveTI0fGpveTI1fGpveTI2fGpveTI3fGpveTI4fGpveTI5fGpveTN8am95MzB8am95MzF8am95MzJ8am95NHxqb3k1fGpveTZ8am95N3xqb3k4fGpveTl8am95YXhlc3xqb3lidXR0b25zfGpveWluZm98am95bmFtZXxqb3lwb3Z8am95cnxqb3l1fGpveXZ8am95eHxqb3l5fGpveXp8bGFsdHxsYXVuY2hfYXBwMXxsYXVuY2hfYXBwMnxsYXVuY2hfbWFpbHxsYXVuY2hfbWVkaWF8bGJ1dHRvbnxsY29udHJvbHxsY3RybHxsZWZ0fGxzaGlmdHxsd2lufGx3aW5kb3dufGx3aW51cHxtYnV0dG9ufG1lZGlhX25leHR8bWVkaWFfcGxheV9wYXVzZXxtZWRpYV9wcmV2fG1lZGlhX3N0b3B8bnVtbG9ja3xudW1wYWQwfG51bXBhZDF8bnVtcGFkMnxudW1wYWQzfG51bXBhZDR8bnVtcGFkNXxudW1wYWQ2fG51bXBhZDd8bnVtcGFkOHxudW1wYWQ5fG51bXBhZGFkZHxudW1wYWRjbGVhcnxudW1wYWRkZWx8bnVtcGFkZGl2fG51bXBhZGRvdHxudW1wYWRkb3dufG51bXBhZGVuZHxudW1wYWRlbnRlcnxudW1wYWRob21lfG51bXBhZGluc3xudW1wYWRsZWZ0fG51bXBhZG11bHR8bnVtcGFkcGdkbnxudW1wYWRwZ3VwfG51bXBhZHJpZ2h0fG51bXBhZHN1YnxudW1wYWR1cHxwZ2RufHBndXB8cHJpbnRzY3JlZW58cmFsdHxyYnV0dG9ufHJjb250cm9sfHJjdHJsfHJpZ2h0fHJzaGlmdHxyd2lufHJ3aW5kb3dufHJ3aW51cHxzY3JvbGxsb2NrfHNoaWZ0fHNoaWZ0ZG93bnxzaGlmdHVwfHNwYWNlfHRhYnx1cHx2b2x1bWVfZG93bnx2b2x1bWVfbXV0ZXx2b2x1bWVfdXB8d2hlZWxkb3dufHdoZWVsbGVmdHx3aGVlbHJpZ2h0fHdoZWVsdXB8eGJ1dHRvbjF8eGJ1dHRvbjIpXFxiL2ksXG4gICAgaW1wb3J0YW50OlxuICAgICAgLyNcXGIoPzpBbGxvd1NhbWVMaW5lQ29tbWVudHN8Q2xpcGJvYXJkVGltZW91dHxDb21tZW50RmxhZ3xEZXJlZkNoYXJ8RXJyb3JTdGRPdXR8RXNjYXBlQ2hhcnxIb3RrZXlJbnRlcnZhbHxIb3RrZXlNb2RpZmllclRpbWVvdXR8SG90c3RyaW5nfElmfElmVGltZW91dHxJZldpbkFjdGl2ZXxJZldpbkV4aXN0fElmV2luTm90QWN0aXZlfElmV2luTm90RXhpc3R8SW5jbHVkZXxJbmNsdWRlQWdhaW58SW5wdXRMZXZlbHxJbnN0YWxsS2V5YmRIb29rfEluc3RhbGxNb3VzZUhvb2t8S2V5SGlzdG9yeXxNYXhIb3RrZXlzUGVySW50ZXJ2YWx8TWF4TWVtfE1heFRocmVhZHN8TWF4VGhyZWFkc0J1ZmZlcnxNYXhUaHJlYWRzUGVySG90a2V5fE1lbnVNYXNrS2V5fE5vRW52fE5vVHJheUljb258UGVyc2lzdGVudHxTaW5nbGVJbnN0YW5jZXxVc2VIb29rfFdhcm58V2luQWN0aXZhdGVGb3JjZSlcXGIvaSxcbiAgICBrZXl3b3JkOlxuICAgICAgL1xcYig/OkFib3J0fEFib3ZlTm9ybWFsfEFkZHxhaGtfY2xhc3N8YWhrX2V4ZXxhaGtfZ3JvdXB8YWhrX2lkfGFoa19waWR8QWxsfEFsbnVtfEFscGhhfEFsdFN1Ym1pdHxBbHRUYWJ8QWx0VGFiQW5kTWVudXxBbHRUYWJNZW51fEFsdFRhYk1lbnVEaXNtaXNzfEFsd2F5c09uVG9wfEF1dG9TaXplfEJhY2tncm91bmR8QmFja2dyb3VuZFRyYW5zfEJlbG93Tm9ybWFsfGJldHdlZW58Qml0QW5kfEJpdE5vdHxCaXRPcnxCaXRTaGlmdExlZnR8Qml0U2hpZnRSaWdodHxCaXRYT3J8Qm9sZHxCb3JkZXJ8QnV0dG9ufEJ5UmVmfENhdGNofENoZWNrYm94fENoZWNrZWR8Q2hlY2tlZEdyYXl8Q2hvb3NlfENob29zZVN0cmluZ3xDbG9zZXxDb2xvcnxDb21ib0JveHxDb250YWluc3xDb250cm9sTGlzdHxDb3VudHxEYXRlfERhdGVUaW1lfERheXN8RERMfERlZmF1bHR8RGVsZXRlQWxsfERlbGltaXRlcnxEZXJlZnxEZXN0cm95fERpZ2l0fERpc2FibGV8RGlzYWJsZWR8RHJvcERvd25MaXN0fEVkaXR8RWplY3R8RWxzZXxFbmFibGV8RW5hYmxlZHxFcnJvcnxFeGlzdHxFeHBhbmR8RXhTdHlsZXxGaWxlU3lzdGVtfEZpbmFsbHl8Rmlyc3R8Rmxhc2h8RmxvYXR8RmxvYXRGYXN0fEZvY3VzfEZvbnR8Zm9yfGdsb2JhbHxHcmlkfEdyb3VwfEdyb3VwQm94fEd1aUNsb3NlfEd1aUNvbnRleHRNZW51fEd1aURyb3BGaWxlc3xHdWlFc2NhcGV8R3VpU2l6ZXxIZHJ8SGlkZGVufEhpZGV8SGlnaHxIS0NDfEhLQ1J8SEtDVXxIS0VZX0NMQVNTRVNfUk9PVHxIS0VZX0NVUlJFTlRfQ09ORklHfEhLRVlfQ1VSUkVOVF9VU0VSfEhLRVlfTE9DQUxfTUFDSElORXxIS0VZX1VTRVJTfEhLTE18SEtVfEhvdXJzfEhTY3JvbGx8SWNvbnxJY29uU21hbGx8SUR8SURMYXN0fElmfElmRXF1YWx8SWZFeGlzdHxJZkdyZWF0ZXJ8SWZHcmVhdGVyT3JFcXVhbHxJZkluU3RyaW5nfElmTGVzc3xJZkxlc3NPckVxdWFsfElmTXNnQm94fElmTm90RXF1YWx8SWZOb3RFeGlzdHxJZk5vdEluU3RyaW5nfElmV2luQWN0aXZlfElmV2luRXhpc3R8SWZXaW5Ob3RBY3RpdmV8SWZXaW5Ob3RFeGlzdHxJZ25vcmV8SW1hZ2VMaXN0fGlufEludGVnZXJ8SW50ZWdlckZhc3R8SW50ZXJydXB0fGlzfGl0YWxpY3xKb2lufExhYmVsfExhc3RGb3VuZHxMYXN0Rm91bmRFeGlzdHxMaW1pdHxMaW5lc3xMaXN0fExpc3RCb3h8TGlzdFZpZXd8bG9jYWx8TG9ja3xMb2dvZmZ8TG93fExvd2VyfExvd2VyY2FzZXxNYWluV2luZG93fE1hcmdpbnxNYXhpbWl6ZXxNYXhpbWl6ZUJveHxNYXhTaXplfE1pbmltaXplfE1pbmltaXplQm94fE1pbk1heHxNaW5TaXplfE1pbnV0ZXN8TW9udGhDYWx8TW91c2V8TW92ZXxNdWx0aXxOQXxOb3xOb0FjdGl2YXRlfE5vRGVmYXVsdHxOb0hpZGV8Tm9JY29ufE5vTWFpbldpbmRvd3xub3JtfE5vcm1hbHxOb1NvcnR8Tm9Tb3J0SGRyfE5vU3RhbmRhcmR8Tm90fE5vVGFifE5vVGltZXJzfE51bWJlcnxPZmZ8T2t8T258T3duRGlhbG9nc3xPd25lcnxQYXJzZXxQYXNzd29yZHxQaWN0dXJlfFBpeGVsfFBvc3xQb3d8UHJpb3JpdHl8UHJvY2Vzc05hbWV8UmFkaW98UmFuZ2V8UmVhZHxSZWFkT25seXxSZWFsdGltZXxSZWRyYXd8UmVnaW9ufFJFR19CSU5BUll8UkVHX0RXT1JEfFJFR19FWFBBTkRfU1p8UkVHX01VTFRJX1NafFJFR19TWnxSZWxhdGl2ZXxSZW5hbWV8UmVwb3J0fFJlc2l6ZXxSZXN0b3JlfFJldHJ5fFJHQnxTY3JlZW58U2Vjb25kc3xTZWN0aW9ufFNlcmlhbHxTZXRMYWJlbHxTaGlmdEFsdFRhYnxTaG93fFNpbmdsZXxTbGlkZXJ8U29ydERlc2N8U3RhbmRhcmR8c3RhdGljfFN0YXR1c3xTdGF0dXNCYXJ8U3RhdHVzQ0R8c3RyaWtlfFN0eWxlfFN1Ym1pdHxTeXNNZW51fFRhYjJ8VGFiU3RvcHxUZXh0fFRoZW1lfFRocm93fFRpbGV8VG9nZ2xlQ2hlY2t8VG9nZ2xlRW5hYmxlfFRvb2xXaW5kb3d8VG9wfFRvcG1vc3R8VHJhbnNDb2xvcnxUcmFuc3BhcmVudHxUcmF5fFRyZWVWaWV3fFRyeXxUcnlBZ2FpbnxUeXBlfFVuQ2hlY2t8dW5kZXJsaW5lfFVuaWNvZGV8VW5sb2NrfFVudGlsfFVwRG93bnxVcHBlcnxVcHBlcmNhc2V8VXNlRXJyb3JMZXZlbHxWaXN8VmlzRmlyc3R8VmlzaWJsZXxWU2Nyb2xsfFdhaXR8V2FpdENsb3NlfFdhbnRDdHJsQXxXYW50RjJ8V2FudFJldHVybnxXaGlsZXxXcmFwfFhkaWdpdHx4bXx4cHx4c3xZZXN8eW18eXB8eXMpXFxiL2ksXG4gICAgZnVuY3Rpb246IC9bXigpOyBcXHQsXFxuKypcXC09Pz46XFxcXFxcLzwmJVxcW1xcXV0rKD89XFwoKS8sXG4gICAgcHVuY3R1YXRpb246IC9be31bXFxdKCk6LF0vXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiYXV0b2hvdGtleSIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwiY29tbWVudCIsInBhdHRlcm4iLCJsb29rYmVoaW5kIiwiZ3JlZWR5IiwidGFnIiwic3RyaW5nIiwidmFyaWFibGUiLCJudW1iZXIiLCJvcGVyYXRvciIsInNlbGVjdG9yIiwiY29uc3RhbnQiLCJidWlsdGluIiwic3ltYm9sIiwiaW1wb3J0YW50Iiwia2V5d29yZCIsInB1bmN0dWF0aW9uIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/autohotkey.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/autoit.js":
/*!***********************************************!*\
  !*** ./node_modules/refractor/lang/autoit.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = autoit;\nautoit.displayName = 'autoit';\nautoit.aliases = [];\nfunction autoit(Prism) {\n  Prism.languages.autoit = {\n    comment: [/;.*/, {\n      // The multi-line comments delimiters can actually be commented out with \";\"\n      pattern: /(^[\\t ]*)#(?:comments-start|cs)[\\s\\S]*?^[ \\t]*#(?:ce|comments-end)/m,\n      lookbehind: true\n    }],\n    url: {\n      pattern: /(^[\\t ]*#include\\s+)(?:<[^\\r\\n>]+>|\"[^\\r\\n\"]+\")/m,\n      lookbehind: true\n    },\n    string: {\n      pattern: /([\"'])(?:\\1\\1|(?!\\1)[^\\r\\n])*\\1/,\n      greedy: true,\n      inside: {\n        variable: /([%$@])\\w+\\1/\n      }\n    },\n    directive: {\n      pattern: /(^[\\t ]*)#[\\w-]+/m,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    \"function\": /\\b\\w+(?=\\()/,\n    // Variables and macros\n    variable: /[$@]\\w+/,\n    keyword: /\\b(?:Case|Const|Continue(?:Case|Loop)|Default|Dim|Do|Else(?:If)?|End(?:Func|If|Select|Switch|With)|Enum|Exit(?:Loop)?|For|Func|Global|If|In|Local|Next|Null|ReDim|Select|Static|Step|Switch|Then|To|Until|Volatile|WEnd|While|With)\\b/i,\n    number: /\\b(?:0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/i,\n    \"boolean\": /\\b(?:False|True)\\b/i,\n    operator: /<[=>]?|[-+*\\/=&>]=?|[?^]|\\b(?:And|Not|Or)\\b/i,\n    punctuation: /[\\[\\]().,:]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvYXV0b2l0LmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsTUFBTTtBQUN2QkEsTUFBTSxDQUFDQyxXQUFXLEdBQUcsUUFBUTtBQUM3QkQsTUFBTSxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNuQixTQUFTRixNQUFNQSxDQUFDRyxLQUFLLEVBQUU7RUFDckJBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixNQUFNLEdBQUc7SUFDdkJLLE9BQU8sRUFBRSxDQUNQLEtBQUssRUFDTDtNQUNFO01BQ0FDLE9BQU8sRUFDTCxxRUFBcUU7TUFDdkVDLFVBQVUsRUFBRTtJQUNkLENBQUMsQ0FDRjtJQUNEQyxHQUFHLEVBQUU7TUFDSEYsT0FBTyxFQUFFLGtEQUFrRDtNQUMzREMsVUFBVSxFQUFFO0lBQ2QsQ0FBQztJQUNERSxNQUFNLEVBQUU7TUFDTkgsT0FBTyxFQUFFLGlDQUFpQztNQUMxQ0ksTUFBTSxFQUFFLElBQUk7TUFDWkMsTUFBTSxFQUFFO1FBQ05DLFFBQVEsRUFBRTtNQUNaO0lBQ0YsQ0FBQztJQUNEQyxTQUFTLEVBQUU7TUFDVFAsT0FBTyxFQUFFLG1CQUFtQjtNQUM1QkMsVUFBVSxFQUFFLElBQUk7TUFDaEJPLEtBQUssRUFBRTtJQUNULENBQUM7SUFDRCxZQUFVLGFBQWE7SUFDdkI7SUFDQUYsUUFBUSxFQUFFLFNBQVM7SUFDbkJHLE9BQU8sRUFDTCx3T0FBd087SUFDMU9DLE1BQU0sRUFBRSxpREFBaUQ7SUFDekQsV0FBUyxxQkFBcUI7SUFDOUJDLFFBQVEsRUFBRSw4Q0FBOEM7SUFDeERDLFdBQVcsRUFBRTtFQUNmLENBQUM7QUFDSCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXGF1dG9pdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBhdXRvaXRcbmF1dG9pdC5kaXNwbGF5TmFtZSA9ICdhdXRvaXQnXG5hdXRvaXQuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBhdXRvaXQoUHJpc20pIHtcbiAgUHJpc20ubGFuZ3VhZ2VzLmF1dG9pdCA9IHtcbiAgICBjb21tZW50OiBbXG4gICAgICAvOy4qLyxcbiAgICAgIHtcbiAgICAgICAgLy8gVGhlIG11bHRpLWxpbmUgY29tbWVudHMgZGVsaW1pdGVycyBjYW4gYWN0dWFsbHkgYmUgY29tbWVudGVkIG91dCB3aXRoIFwiO1wiXG4gICAgICAgIHBhdHRlcm46XG4gICAgICAgICAgLyheW1xcdCBdKikjKD86Y29tbWVudHMtc3RhcnR8Y3MpW1xcc1xcU10qP15bIFxcdF0qIyg/OmNlfGNvbW1lbnRzLWVuZCkvbSxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgfVxuICAgIF0sXG4gICAgdXJsOiB7XG4gICAgICBwYXR0ZXJuOiAvKF5bXFx0IF0qI2luY2x1ZGVcXHMrKSg/OjxbXlxcclxcbj5dKz58XCJbXlxcclxcblwiXStcIikvbSxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICB9LFxuICAgIHN0cmluZzoge1xuICAgICAgcGF0dGVybjogLyhbXCInXSkoPzpcXDFcXDF8KD8hXFwxKVteXFxyXFxuXSkqXFwxLyxcbiAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgIGluc2lkZToge1xuICAgICAgICB2YXJpYWJsZTogLyhbJSRAXSlcXHcrXFwxL1xuICAgICAgfVxuICAgIH0sXG4gICAgZGlyZWN0aXZlOiB7XG4gICAgICBwYXR0ZXJuOiAvKF5bXFx0IF0qKSNbXFx3LV0rL20sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgYWxpYXM6ICdrZXl3b3JkJ1xuICAgIH0sXG4gICAgZnVuY3Rpb246IC9cXGJcXHcrKD89XFwoKS8sXG4gICAgLy8gVmFyaWFibGVzIGFuZCBtYWNyb3NcbiAgICB2YXJpYWJsZTogL1skQF1cXHcrLyxcbiAgICBrZXl3b3JkOlxuICAgICAgL1xcYig/OkNhc2V8Q29uc3R8Q29udGludWUoPzpDYXNlfExvb3ApfERlZmF1bHR8RGltfERvfEVsc2UoPzpJZik/fEVuZCg/OkZ1bmN8SWZ8U2VsZWN0fFN3aXRjaHxXaXRoKXxFbnVtfEV4aXQoPzpMb29wKT98Rm9yfEZ1bmN8R2xvYmFsfElmfElufExvY2FsfE5leHR8TnVsbHxSZURpbXxTZWxlY3R8U3RhdGljfFN0ZXB8U3dpdGNofFRoZW58VG98VW50aWx8Vm9sYXRpbGV8V0VuZHxXaGlsZXxXaXRoKVxcYi9pLFxuICAgIG51bWJlcjogL1xcYig/OjB4W1xcZGEtZl0rfFxcZCsoPzpcXC5cXGQrKT8oPzplWystXT9cXGQrKT8pXFxiL2ksXG4gICAgYm9vbGVhbjogL1xcYig/OkZhbHNlfFRydWUpXFxiL2ksXG4gICAgb3BlcmF0b3I6IC88Wz0+XT98Wy0rKlxcLz0mPl09P3xbP15dfFxcYig/OkFuZHxOb3R8T3IpXFxiL2ksXG4gICAgcHVuY3R1YXRpb246IC9bXFxbXFxdKCkuLDpdL1xuICB9XG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImF1dG9pdCIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwiY29tbWVudCIsInBhdHRlcm4iLCJsb29rYmVoaW5kIiwidXJsIiwic3RyaW5nIiwiZ3JlZWR5IiwiaW5zaWRlIiwidmFyaWFibGUiLCJkaXJlY3RpdmUiLCJhbGlhcyIsImtleXdvcmQiLCJudW1iZXIiLCJvcGVyYXRvciIsInB1bmN0dWF0aW9uIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/autoit.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/avisynth.js":
/*!*************************************************!*\
  !*** ./node_modules/refractor/lang/avisynth.js ***!
  \*************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = avisynth;\navisynth.displayName = 'avisynth';\navisynth.aliases = ['avs'];\nfunction avisynth(Prism) {\n  // http://avisynth.nl/index.php/The_full_AviSynth_grammar\n  ;\n  (function (Prism) {\n    function replace(pattern, replacements) {\n      return pattern.replace(/<<(\\d+)>>/g, function (m, index) {\n        return replacements[+index];\n      });\n    }\n    function re(pattern, replacements, flags) {\n      return RegExp(replace(pattern, replacements), flags || '');\n    }\n    var types = /bool|clip|float|int|string|val/.source;\n    var internals = [\n    // bools\n    /is(?:bool|clip|float|int|string)|defined|(?:(?:internal)?function|var)?exists?/.source,\n    // control\n    /apply|assert|default|eval|import|nop|select|undefined/.source,\n    // global\n    /opt_(?:allowfloataudio|avipadscanlines|dwchannelmask|enable_(?:b64a|planartopackedrgb|v210|y3_10_10|y3_10_16)|usewaveextensible|vdubplanarhack)|set(?:cachemode|maxcpu|memorymax|planarlegacyalignment|workingdir)/.source,\n    // conv\n    /hex(?:value)?|value/.source,\n    // numeric\n    /abs|ceil|continued(?:denominator|numerator)?|exp|floor|fmod|frac|log(?:10)?|max|min|muldiv|pi|pow|rand|round|sign|spline|sqrt/.source,\n    // trig\n    /a?sinh?|a?cosh?|a?tan[2h]?/.source,\n    // bit\n    /(?:bit(?:and|not|x?or|[lr]?shift[aslu]?|sh[lr]|sa[lr]|[lr]rotatel?|ro[rl]|te?st|set(?:count)?|cl(?:ea)?r|ch(?:an)?ge?))/.source,\n    // runtime\n    /average(?:[bgr]|chroma[uv]|luma)|(?:[rgb]|chroma[uv]|luma|rgb|[yuv](?=difference(?:fromprevious|tonext)))difference(?:fromprevious|tonext)?|[yuvrgb]plane(?:median|min|max|minmaxdifference)/.source,\n    // script\n    /getprocessinfo|logmsg|script(?:dir(?:utf8)?|file(?:utf8)?|name(?:utf8)?)|setlogparams/.source,\n    // string\n    /chr|(?:fill|find|left|mid|replace|rev|right)str|format|[lu]case|ord|str(?:cmpi?|fromutf8|len|toutf8)|time|trim(?:all|left|right)/.source,\n    // version\n    /isversionorgreater|version(?:number|string)/.source,\n    // helper\n    /buildpixeltype|colorspacenametopixeltype/.source,\n    // avsplus\n    /addautoloaddir|on(?:cpu|cuda)|prefetch|setfiltermtmode/.source].join('|');\n    var properties = [\n    // content\n    /has(?:audio|video)/.source,\n    // resolution\n    /height|width/.source,\n    // framerate\n    /frame(?:count|rate)|framerate(?:denominator|numerator)/.source,\n    // interlacing\n    /getparity|is(?:field|frame)based/.source,\n    // color format\n    /bitspercomponent|componentsize|hasalpha|is(?:planar(?:rgba?)?|interleaved|rgb(?:24|32|48|64)?|y(?:8|u(?:va?|y2))?|yv(?:12|16|24|411)|420|422|444|packedrgb)|numcomponents|pixeltype/.source,\n    // audio\n    /audio(?:bits|channels|duration|length(?:[fs]|hi|lo)?|rate)|isaudio(?:float|int)/.source].join('|');\n    var filters = [\n    // source\n    /avi(?:file)?source|directshowsource|image(?:reader|source|sourceanim)|opendmlsource|segmented(?:avisource|directshowsource)|wavsource/.source,\n    // color\n    /coloryuv|convertbacktoyuy2|convertto(?:RGB(?:24|32|48|64)|(?:planar)?RGBA?|Y8?|YV(?:12|16|24|411)|YUVA?(?:411|420|422|444)|YUY2)|fixluminance|gr[ae]yscale|invert|levels|limiter|mergea?rgb|merge(?:chroma|luma)|rgbadjust|show(?:alpha|blue|green|red)|swapuv|tweak|[uv]toy8?|ytouv/.source,\n    // overlay\n    /(?:colorkey|reset)mask|layer|mask(?:hs)?|merge|overlay|subtract/.source,\n    // geometry\n    /addborders|(?:bicubic|bilinear|blackman|gauss|lanczos4|lanczos|point|sinc|spline(?:16|36|64))resize|crop(?:bottom)?|flip(?:horizontal|vertical)|(?:horizontal|vertical)?reduceby2|letterbox|skewrows|turn(?:180|left|right)/.source,\n    // pixel\n    /blur|fixbrokenchromaupsampling|generalconvolution|(?:spatial|temporal)soften|sharpen/.source,\n    // timeline\n    /trim|(?:un)?alignedsplice|(?:assume|assumescaled|change|convert)FPS|(?:delete|duplicate)frame|dissolve|fade(?:in|io|out)[02]?|freezeframe|interleave|loop|reverse|select(?:even|odd|(?:range)?every)/.source,\n    // interlace\n    /assume[bt]ff|assume(?:field|frame)based|bob|complementparity|doubleweave|peculiarblend|pulldown|separate(?:columns|fields|rows)|swapfields|weave(?:columns|rows)?/.source,\n    // audio\n    /amplify(?:db)?|assumesamplerate|audiodub(?:ex)?|audiotrim|convertaudioto(?:(?:8|16|24|32)bit|float)|converttomono|delayaudio|ensurevbrmp3sync|get(?:left|right)?channel|kill(?:audio|video)|mergechannels|mixaudio|monotostereo|normalize|resampleaudio|ssrc|supereq|timestretch/.source,\n    // conditional\n    /animate|applyrange|conditional(?:filter|reader|select)|frameevaluate|scriptclip|tcp(?:server|source)|writefile(?:end|if|start)?/.source,\n    // export\n    /imagewriter/.source,\n    // debug\n    /blackness|blankclip|colorbars(?:hd)?|compare|dumpfiltergraph|echo|histogram|info|messageclip|preroll|setgraphanalysis|show(?:framenumber|smpte|time)|showfiveversions|stack(?:horizontal|vertical)|subtitle|tone|version/.source].join('|');\n    var allinternals = [internals, properties, filters].join('|');\n    Prism.languages.avisynth = {\n      comment: [{\n        // Matches [* *] nestable block comments, but only supports 1 level of nested comments\n        // /\\[\\*(?:[^\\[*]|\\[(?!\\*)|\\*(?!\\])|<self>)*\\*\\]/\n        pattern: /(^|[^\\\\])\\[\\*(?:[^\\[*]|\\[(?!\\*)|\\*(?!\\])|\\[\\*(?:[^\\[*]|\\[(?!\\*)|\\*(?!\\]))*\\*\\])*\\*\\]/,\n        lookbehind: true,\n        greedy: true\n      }, {\n        // Matches /* */ block comments\n        pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n        lookbehind: true,\n        greedy: true\n      }, {\n        // Matches # comments\n        pattern: /(^|[^\\\\$])#.*/,\n        lookbehind: true,\n        greedy: true\n      }],\n      // Handle before strings because optional arguments are surrounded by double quotes\n      argument: {\n        pattern: re(/\\b(?:<<0>>)\\s+(\"?)\\w+\\1/.source, [types], 'i'),\n        inside: {\n          keyword: /^\\w+/\n        }\n      },\n      // Optional argument assignment\n      'argument-label': {\n        pattern: /([,(][\\s\\\\]*)\\w+\\s*=(?!=)/,\n        lookbehind: true,\n        inside: {\n          'argument-name': {\n            pattern: /^\\w+/,\n            alias: 'punctuation'\n          },\n          punctuation: /=$/\n        }\n      },\n      string: [{\n        // triple double-quoted\n        pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n        greedy: true\n      }, {\n        // single double-quoted\n        pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n        greedy: true,\n        inside: {\n          constant: {\n            // These *are* case-sensitive!\n            pattern: /\\b(?:DEFAULT_MT_MODE|(?:MAINSCRIPT|PROGRAM|SCRIPT)DIR|(?:MACHINE|USER)_(?:CLASSIC|PLUS)_PLUGINS)\\b/\n          }\n        }\n      }],\n      // The special \"last\" variable that takes the value of the last implicitly returned clip\n      variable: /\\b(?:last)\\b/i,\n      \"boolean\": /\\b(?:false|no|true|yes)\\b/i,\n      keyword: /\\b(?:catch|else|for|function|global|if|return|try|while|__END__)\\b/i,\n      constant: /\\bMT_(?:MULTI_INSTANCE|NICE_FILTER|SERIALIZED|SPECIAL_MT)\\b/,\n      // AviSynth's internal functions, filters, and properties\n      'builtin-function': {\n        pattern: re(/\\b(?:<<0>>)\\b/.source, [allinternals], 'i'),\n        alias: 'function'\n      },\n      'type-cast': {\n        pattern: re(/\\b(?:<<0>>)(?=\\s*\\()/.source, [types], 'i'),\n        alias: 'keyword'\n      },\n      // External/user-defined filters\n      \"function\": {\n        pattern: /\\b[a-z_]\\w*(?=\\s*\\()|(\\.)[a-z_]\\w*\\b/i,\n        lookbehind: true\n      },\n      // Matches a \\ as the first or last character on a line\n      'line-continuation': {\n        pattern: /(^[ \\t]*)\\\\|\\\\(?=[ \\t]*$)/m,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      number: /\\B\\$(?:[\\da-f]{6}|[\\da-f]{8})\\b|(?:(?:\\b|\\B-)\\d+(?:\\.\\d*)?\\b|\\B\\.\\d+\\b)/i,\n      operator: /\\+\\+?|[!=<>]=?|&&|\\|\\||[?:*/%-]/,\n      punctuation: /[{}\\[\\]();,.]/\n    };\n    Prism.languages.avs = Prism.languages.avisynth;\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvYXZpc3ludGguanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxRQUFRO0FBQ3pCQSxRQUFRLENBQUNDLFdBQVcsR0FBRyxVQUFVO0FBQ2pDRCxRQUFRLENBQUNFLE9BQU8sR0FBRyxDQUFDLEtBQUssQ0FBQztBQUMxQixTQUFTRixRQUFRQSxDQUFDRyxLQUFLLEVBQUU7RUFDdkI7RUFDQTtFQUFDLENBQUMsVUFBVUEsS0FBSyxFQUFFO0lBQ2pCLFNBQVNDLE9BQU9BLENBQUNDLE9BQU8sRUFBRUMsWUFBWSxFQUFFO01BQ3RDLE9BQU9ELE9BQU8sQ0FBQ0QsT0FBTyxDQUFDLFlBQVksRUFBRSxVQUFVRyxDQUFDLEVBQUVDLEtBQUssRUFBRTtRQUN2RCxPQUFPRixZQUFZLENBQUMsQ0FBQ0UsS0FBSyxDQUFDO01BQzdCLENBQUMsQ0FBQztJQUNKO0lBQ0EsU0FBU0MsRUFBRUEsQ0FBQ0osT0FBTyxFQUFFQyxZQUFZLEVBQUVJLEtBQUssRUFBRTtNQUN4QyxPQUFPQyxNQUFNLENBQUNQLE9BQU8sQ0FBQ0MsT0FBTyxFQUFFQyxZQUFZLENBQUMsRUFBRUksS0FBSyxJQUFJLEVBQUUsQ0FBQztJQUM1RDtJQUNBLElBQUlFLEtBQUssR0FBRyxnQ0FBZ0MsQ0FBQ0MsTUFBTTtJQUNuRCxJQUFJQyxTQUFTLEdBQUc7SUFDZDtJQUNBLGdGQUFnRixDQUM3RUQsTUFBTTtJQUFFO0lBQ1gsdURBQXVELENBQUNBLE1BQU07SUFBRTtJQUNoRSxvTkFBb04sQ0FDak5BLE1BQU07SUFBRTtJQUNYLHFCQUFxQixDQUFDQSxNQUFNO0lBQUU7SUFDOUIsK0hBQStILENBQzVIQSxNQUFNO0lBQUU7SUFDWCw0QkFBNEIsQ0FBQ0EsTUFBTTtJQUFFO0lBQ3JDLHlIQUF5SCxDQUN0SEEsTUFBTTtJQUFFO0lBQ1gsOExBQThMLENBQzNMQSxNQUFNO0lBQUU7SUFDWCx1RkFBdUYsQ0FDcEZBLE1BQU07SUFBRTtJQUNYLGtJQUFrSSxDQUMvSEEsTUFBTTtJQUFFO0lBQ1gsNkNBQTZDLENBQUNBLE1BQU07SUFBRTtJQUN0RCwwQ0FBMEMsQ0FBQ0EsTUFBTTtJQUFFO0lBQ25ELHdEQUF3RCxDQUFDQSxNQUFNLENBQ2hFLENBQUNFLElBQUksQ0FBQyxHQUFHLENBQUM7SUFDWCxJQUFJQyxVQUFVLEdBQUc7SUFDZjtJQUNBLG9CQUFvQixDQUFDSCxNQUFNO0lBQUU7SUFDN0IsY0FBYyxDQUFDQSxNQUFNO0lBQUU7SUFDdkIsd0RBQXdELENBQUNBLE1BQU07SUFBRTtJQUNqRSxrQ0FBa0MsQ0FBQ0EsTUFBTTtJQUFFO0lBQzNDLHFMQUFxTCxDQUNsTEEsTUFBTTtJQUFFO0lBQ1gsaUZBQWlGLENBQzlFQSxNQUFNLENBQ1YsQ0FBQ0UsSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUNYLElBQUlFLE9BQU8sR0FBRztJQUNaO0lBQ0EsdUlBQXVJLENBQ3BJSixNQUFNO0lBQUU7SUFDWCxzUkFBc1IsQ0FDblJBLE1BQU07SUFBRTtJQUNYLGlFQUFpRSxDQUFDQSxNQUFNO0lBQUU7SUFDMUUsNk5BQTZOLENBQzFOQSxNQUFNO0lBQUU7SUFDWCxzRkFBc0YsQ0FDbkZBLE1BQU07SUFBRTtJQUNYLHNNQUFzTSxDQUNuTUEsTUFBTTtJQUFFO0lBQ1gsbUtBQW1LLENBQ2hLQSxNQUFNO0lBQUU7SUFDWCxrUkFBa1IsQ0FDL1FBLE1BQU07SUFBRTtJQUNYLGlJQUFpSSxDQUM5SEEsTUFBTTtJQUFFO0lBQ1gsYUFBYSxDQUFDQSxNQUFNO0lBQUU7SUFDdEIsME5BQTBOLENBQ3ZOQSxNQUFNLENBQ1YsQ0FBQ0UsSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUNYLElBQUlHLFlBQVksR0FBRyxDQUFDSixTQUFTLEVBQUVFLFVBQVUsRUFBRUMsT0FBTyxDQUFDLENBQUNGLElBQUksQ0FBQyxHQUFHLENBQUM7SUFDN0RaLEtBQUssQ0FBQ2dCLFNBQVMsQ0FBQ25CLFFBQVEsR0FBRztNQUN6Qm9CLE9BQU8sRUFBRSxDQUNQO1FBQ0U7UUFDQTtRQUNBZixPQUFPLEVBQ0wsc0ZBQXNGO1FBQ3hGZ0IsVUFBVSxFQUFFLElBQUk7UUFDaEJDLE1BQU0sRUFBRTtNQUNWLENBQUMsRUFDRDtRQUNFO1FBQ0FqQixPQUFPLEVBQUUsaUNBQWlDO1FBQzFDZ0IsVUFBVSxFQUFFLElBQUk7UUFDaEJDLE1BQU0sRUFBRTtNQUNWLENBQUMsRUFDRDtRQUNFO1FBQ0FqQixPQUFPLEVBQUUsZUFBZTtRQUN4QmdCLFVBQVUsRUFBRSxJQUFJO1FBQ2hCQyxNQUFNLEVBQUU7TUFDVixDQUFDLENBQ0Y7TUFDRDtNQUNBQyxRQUFRLEVBQUU7UUFDUmxCLE9BQU8sRUFBRUksRUFBRSxDQUFDLHlCQUF5QixDQUFDSSxNQUFNLEVBQUUsQ0FBQ0QsS0FBSyxDQUFDLEVBQUUsR0FBRyxDQUFDO1FBQzNEWSxNQUFNLEVBQUU7VUFDTkMsT0FBTyxFQUFFO1FBQ1g7TUFDRixDQUFDO01BQ0Q7TUFDQSxnQkFBZ0IsRUFBRTtRQUNoQnBCLE9BQU8sRUFBRSwyQkFBMkI7UUFDcENnQixVQUFVLEVBQUUsSUFBSTtRQUNoQkcsTUFBTSxFQUFFO1VBQ04sZUFBZSxFQUFFO1lBQ2ZuQixPQUFPLEVBQUUsTUFBTTtZQUNmcUIsS0FBSyxFQUFFO1VBQ1QsQ0FBQztVQUNEQyxXQUFXLEVBQUU7UUFDZjtNQUNGLENBQUM7TUFDREMsTUFBTSxFQUFFLENBQ047UUFDRTtRQUNBdkIsT0FBTyxFQUFFLGdCQUFnQjtRQUN6QmlCLE1BQU0sRUFBRTtNQUNWLENBQUMsRUFDRDtRQUNFO1FBQ0FqQixPQUFPLEVBQUUscUNBQXFDO1FBQzlDaUIsTUFBTSxFQUFFLElBQUk7UUFDWkUsTUFBTSxFQUFFO1VBQ05LLFFBQVEsRUFBRTtZQUNSO1lBQ0F4QixPQUFPLEVBQ0w7VUFDSjtRQUNGO01BQ0YsQ0FBQyxDQUNGO01BQ0Q7TUFDQXlCLFFBQVEsRUFBRSxlQUFlO01BQ3pCLFdBQVMsNEJBQTRCO01BQ3JDTCxPQUFPLEVBQ0wscUVBQXFFO01BQ3ZFSSxRQUFRLEVBQUUsNkRBQTZEO01BQ3ZFO01BQ0Esa0JBQWtCLEVBQUU7UUFDbEJ4QixPQUFPLEVBQUVJLEVBQUUsQ0FBQyxlQUFlLENBQUNJLE1BQU0sRUFBRSxDQUFDSyxZQUFZLENBQUMsRUFBRSxHQUFHLENBQUM7UUFDeERRLEtBQUssRUFBRTtNQUNULENBQUM7TUFDRCxXQUFXLEVBQUU7UUFDWHJCLE9BQU8sRUFBRUksRUFBRSxDQUFDLHNCQUFzQixDQUFDSSxNQUFNLEVBQUUsQ0FBQ0QsS0FBSyxDQUFDLEVBQUUsR0FBRyxDQUFDO1FBQ3hEYyxLQUFLLEVBQUU7TUFDVCxDQUFDO01BQ0Q7TUFDQSxZQUFVO1FBQ1JyQixPQUFPLEVBQUUsdUNBQXVDO1FBQ2hEZ0IsVUFBVSxFQUFFO01BQ2QsQ0FBQztNQUNEO01BQ0EsbUJBQW1CLEVBQUU7UUFDbkJoQixPQUFPLEVBQUUsNEJBQTRCO1FBQ3JDZ0IsVUFBVSxFQUFFLElBQUk7UUFDaEJLLEtBQUssRUFBRTtNQUNULENBQUM7TUFDREssTUFBTSxFQUNKLDBFQUEwRTtNQUM1RUMsUUFBUSxFQUFFLGlDQUFpQztNQUMzQ0wsV0FBVyxFQUFFO0lBQ2YsQ0FBQztJQUNEeEIsS0FBSyxDQUFDZ0IsU0FBUyxDQUFDYyxHQUFHLEdBQUc5QixLQUFLLENBQUNnQixTQUFTLENBQUNuQixRQUFRO0VBQ2hELENBQUMsRUFBRUcsS0FBSyxDQUFDO0FBQ1giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxhdmlzeW50aC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBhdmlzeW50aFxuYXZpc3ludGguZGlzcGxheU5hbWUgPSAnYXZpc3ludGgnXG5hdmlzeW50aC5hbGlhc2VzID0gWydhdnMnXVxuZnVuY3Rpb24gYXZpc3ludGgoUHJpc20pIHtcbiAgLy8gaHR0cDovL2F2aXN5bnRoLm5sL2luZGV4LnBocC9UaGVfZnVsbF9BdmlTeW50aF9ncmFtbWFyXG4gIDsoZnVuY3Rpb24gKFByaXNtKSB7XG4gICAgZnVuY3Rpb24gcmVwbGFjZShwYXR0ZXJuLCByZXBsYWNlbWVudHMpIHtcbiAgICAgIHJldHVybiBwYXR0ZXJuLnJlcGxhY2UoLzw8KFxcZCspPj4vZywgZnVuY3Rpb24gKG0sIGluZGV4KSB7XG4gICAgICAgIHJldHVybiByZXBsYWNlbWVudHNbK2luZGV4XVxuICAgICAgfSlcbiAgICB9XG4gICAgZnVuY3Rpb24gcmUocGF0dGVybiwgcmVwbGFjZW1lbnRzLCBmbGFncykge1xuICAgICAgcmV0dXJuIFJlZ0V4cChyZXBsYWNlKHBhdHRlcm4sIHJlcGxhY2VtZW50cyksIGZsYWdzIHx8ICcnKVxuICAgIH1cbiAgICB2YXIgdHlwZXMgPSAvYm9vbHxjbGlwfGZsb2F0fGludHxzdHJpbmd8dmFsLy5zb3VyY2VcbiAgICB2YXIgaW50ZXJuYWxzID0gW1xuICAgICAgLy8gYm9vbHNcbiAgICAgIC9pcyg/OmJvb2x8Y2xpcHxmbG9hdHxpbnR8c3RyaW5nKXxkZWZpbmVkfCg/Oig/OmludGVybmFsKT9mdW5jdGlvbnx2YXIpP2V4aXN0cz8vXG4gICAgICAgIC5zb3VyY2UsIC8vIGNvbnRyb2xcbiAgICAgIC9hcHBseXxhc3NlcnR8ZGVmYXVsdHxldmFsfGltcG9ydHxub3B8c2VsZWN0fHVuZGVmaW5lZC8uc291cmNlLCAvLyBnbG9iYWxcbiAgICAgIC9vcHRfKD86YWxsb3dmbG9hdGF1ZGlvfGF2aXBhZHNjYW5saW5lc3xkd2NoYW5uZWxtYXNrfGVuYWJsZV8oPzpiNjRhfHBsYW5hcnRvcGFja2VkcmdifHYyMTB8eTNfMTBfMTB8eTNfMTBfMTYpfHVzZXdhdmVleHRlbnNpYmxlfHZkdWJwbGFuYXJoYWNrKXxzZXQoPzpjYWNoZW1vZGV8bWF4Y3B1fG1lbW9yeW1heHxwbGFuYXJsZWdhY3lhbGlnbm1lbnR8d29ya2luZ2RpcikvXG4gICAgICAgIC5zb3VyY2UsIC8vIGNvbnZcbiAgICAgIC9oZXgoPzp2YWx1ZSk/fHZhbHVlLy5zb3VyY2UsIC8vIG51bWVyaWNcbiAgICAgIC9hYnN8Y2VpbHxjb250aW51ZWQoPzpkZW5vbWluYXRvcnxudW1lcmF0b3IpP3xleHB8Zmxvb3J8Zm1vZHxmcmFjfGxvZyg/OjEwKT98bWF4fG1pbnxtdWxkaXZ8cGl8cG93fHJhbmR8cm91bmR8c2lnbnxzcGxpbmV8c3FydC9cbiAgICAgICAgLnNvdXJjZSwgLy8gdHJpZ1xuICAgICAgL2E/c2luaD98YT9jb3NoP3xhP3RhblsyaF0/Ly5zb3VyY2UsIC8vIGJpdFxuICAgICAgLyg/OmJpdCg/OmFuZHxub3R8eD9vcnxbbHJdP3NoaWZ0W2FzbHVdP3xzaFtscl18c2FbbHJdfFtscl1yb3RhdGVsP3xyb1tybF18dGU/c3R8c2V0KD86Y291bnQpP3xjbCg/OmVhKT9yfGNoKD86YW4pP2dlPykpL1xuICAgICAgICAuc291cmNlLCAvLyBydW50aW1lXG4gICAgICAvYXZlcmFnZSg/OltiZ3JdfGNocm9tYVt1dl18bHVtYSl8KD86W3JnYl18Y2hyb21hW3V2XXxsdW1hfHJnYnxbeXV2XSg/PWRpZmZlcmVuY2UoPzpmcm9tcHJldmlvdXN8dG9uZXh0KSkpZGlmZmVyZW5jZSg/OmZyb21wcmV2aW91c3x0b25leHQpP3xbeXV2cmdiXXBsYW5lKD86bWVkaWFufG1pbnxtYXh8bWlubWF4ZGlmZmVyZW5jZSkvXG4gICAgICAgIC5zb3VyY2UsIC8vIHNjcmlwdFxuICAgICAgL2dldHByb2Nlc3NpbmZvfGxvZ21zZ3xzY3JpcHQoPzpkaXIoPzp1dGY4KT98ZmlsZSg/OnV0ZjgpP3xuYW1lKD86dXRmOCk/KXxzZXRsb2dwYXJhbXMvXG4gICAgICAgIC5zb3VyY2UsIC8vIHN0cmluZ1xuICAgICAgL2NocnwoPzpmaWxsfGZpbmR8bGVmdHxtaWR8cmVwbGFjZXxyZXZ8cmlnaHQpc3RyfGZvcm1hdHxbbHVdY2FzZXxvcmR8c3RyKD86Y21waT98ZnJvbXV0Zjh8bGVufHRvdXRmOCl8dGltZXx0cmltKD86YWxsfGxlZnR8cmlnaHQpL1xuICAgICAgICAuc291cmNlLCAvLyB2ZXJzaW9uXG4gICAgICAvaXN2ZXJzaW9ub3JncmVhdGVyfHZlcnNpb24oPzpudW1iZXJ8c3RyaW5nKS8uc291cmNlLCAvLyBoZWxwZXJcbiAgICAgIC9idWlsZHBpeGVsdHlwZXxjb2xvcnNwYWNlbmFtZXRvcGl4ZWx0eXBlLy5zb3VyY2UsIC8vIGF2c3BsdXNcbiAgICAgIC9hZGRhdXRvbG9hZGRpcnxvbig/OmNwdXxjdWRhKXxwcmVmZXRjaHxzZXRmaWx0ZXJtdG1vZGUvLnNvdXJjZVxuICAgIF0uam9pbignfCcpXG4gICAgdmFyIHByb3BlcnRpZXMgPSBbXG4gICAgICAvLyBjb250ZW50XG4gICAgICAvaGFzKD86YXVkaW98dmlkZW8pLy5zb3VyY2UsIC8vIHJlc29sdXRpb25cbiAgICAgIC9oZWlnaHR8d2lkdGgvLnNvdXJjZSwgLy8gZnJhbWVyYXRlXG4gICAgICAvZnJhbWUoPzpjb3VudHxyYXRlKXxmcmFtZXJhdGUoPzpkZW5vbWluYXRvcnxudW1lcmF0b3IpLy5zb3VyY2UsIC8vIGludGVybGFjaW5nXG4gICAgICAvZ2V0cGFyaXR5fGlzKD86ZmllbGR8ZnJhbWUpYmFzZWQvLnNvdXJjZSwgLy8gY29sb3IgZm9ybWF0XG4gICAgICAvYml0c3BlcmNvbXBvbmVudHxjb21wb25lbnRzaXplfGhhc2FscGhhfGlzKD86cGxhbmFyKD86cmdiYT8pP3xpbnRlcmxlYXZlZHxyZ2IoPzoyNHwzMnw0OHw2NCk/fHkoPzo4fHUoPzp2YT98eTIpKT98eXYoPzoxMnwxNnwyNHw0MTEpfDQyMHw0MjJ8NDQ0fHBhY2tlZHJnYil8bnVtY29tcG9uZW50c3xwaXhlbHR5cGUvXG4gICAgICAgIC5zb3VyY2UsIC8vIGF1ZGlvXG4gICAgICAvYXVkaW8oPzpiaXRzfGNoYW5uZWxzfGR1cmF0aW9ufGxlbmd0aCg/Oltmc118aGl8bG8pP3xyYXRlKXxpc2F1ZGlvKD86ZmxvYXR8aW50KS9cbiAgICAgICAgLnNvdXJjZVxuICAgIF0uam9pbignfCcpXG4gICAgdmFyIGZpbHRlcnMgPSBbXG4gICAgICAvLyBzb3VyY2VcbiAgICAgIC9hdmkoPzpmaWxlKT9zb3VyY2V8ZGlyZWN0c2hvd3NvdXJjZXxpbWFnZSg/OnJlYWRlcnxzb3VyY2V8c291cmNlYW5pbSl8b3BlbmRtbHNvdXJjZXxzZWdtZW50ZWQoPzphdmlzb3VyY2V8ZGlyZWN0c2hvd3NvdXJjZSl8d2F2c291cmNlL1xuICAgICAgICAuc291cmNlLCAvLyBjb2xvclxuICAgICAgL2NvbG9yeXV2fGNvbnZlcnRiYWNrdG95dXkyfGNvbnZlcnR0byg/OlJHQig/OjI0fDMyfDQ4fDY0KXwoPzpwbGFuYXIpP1JHQkE/fFk4P3xZVig/OjEyfDE2fDI0fDQxMSl8WVVWQT8oPzo0MTF8NDIwfDQyMnw0NDQpfFlVWTIpfGZpeGx1bWluYW5jZXxnclthZV15c2NhbGV8aW52ZXJ0fGxldmVsc3xsaW1pdGVyfG1lcmdlYT9yZ2J8bWVyZ2UoPzpjaHJvbWF8bHVtYSl8cmdiYWRqdXN0fHNob3coPzphbHBoYXxibHVlfGdyZWVufHJlZCl8c3dhcHV2fHR3ZWFrfFt1dl10b3k4P3x5dG91di9cbiAgICAgICAgLnNvdXJjZSwgLy8gb3ZlcmxheVxuICAgICAgLyg/OmNvbG9ya2V5fHJlc2V0KW1hc2t8bGF5ZXJ8bWFzayg/OmhzKT98bWVyZ2V8b3ZlcmxheXxzdWJ0cmFjdC8uc291cmNlLCAvLyBnZW9tZXRyeVxuICAgICAgL2FkZGJvcmRlcnN8KD86YmljdWJpY3xiaWxpbmVhcnxibGFja21hbnxnYXVzc3xsYW5jem9zNHxsYW5jem9zfHBvaW50fHNpbmN8c3BsaW5lKD86MTZ8MzZ8NjQpKXJlc2l6ZXxjcm9wKD86Ym90dG9tKT98ZmxpcCg/Omhvcml6b250YWx8dmVydGljYWwpfCg/Omhvcml6b250YWx8dmVydGljYWwpP3JlZHVjZWJ5MnxsZXR0ZXJib3h8c2tld3Jvd3N8dHVybig/OjE4MHxsZWZ0fHJpZ2h0KS9cbiAgICAgICAgLnNvdXJjZSwgLy8gcGl4ZWxcbiAgICAgIC9ibHVyfGZpeGJyb2tlbmNocm9tYXVwc2FtcGxpbmd8Z2VuZXJhbGNvbnZvbHV0aW9ufCg/OnNwYXRpYWx8dGVtcG9yYWwpc29mdGVufHNoYXJwZW4vXG4gICAgICAgIC5zb3VyY2UsIC8vIHRpbWVsaW5lXG4gICAgICAvdHJpbXwoPzp1bik/YWxpZ25lZHNwbGljZXwoPzphc3N1bWV8YXNzdW1lc2NhbGVkfGNoYW5nZXxjb252ZXJ0KUZQU3woPzpkZWxldGV8ZHVwbGljYXRlKWZyYW1lfGRpc3NvbHZlfGZhZGUoPzppbnxpb3xvdXQpWzAyXT98ZnJlZXplZnJhbWV8aW50ZXJsZWF2ZXxsb29wfHJldmVyc2V8c2VsZWN0KD86ZXZlbnxvZGR8KD86cmFuZ2UpP2V2ZXJ5KS9cbiAgICAgICAgLnNvdXJjZSwgLy8gaW50ZXJsYWNlXG4gICAgICAvYXNzdW1lW2J0XWZmfGFzc3VtZSg/OmZpZWxkfGZyYW1lKWJhc2VkfGJvYnxjb21wbGVtZW50cGFyaXR5fGRvdWJsZXdlYXZlfHBlY3VsaWFyYmxlbmR8cHVsbGRvd258c2VwYXJhdGUoPzpjb2x1bW5zfGZpZWxkc3xyb3dzKXxzd2FwZmllbGRzfHdlYXZlKD86Y29sdW1uc3xyb3dzKT8vXG4gICAgICAgIC5zb3VyY2UsIC8vIGF1ZGlvXG4gICAgICAvYW1wbGlmeSg/OmRiKT98YXNzdW1lc2FtcGxlcmF0ZXxhdWRpb2R1Yig/OmV4KT98YXVkaW90cmltfGNvbnZlcnRhdWRpb3RvKD86KD86OHwxNnwyNHwzMiliaXR8ZmxvYXQpfGNvbnZlcnR0b21vbm98ZGVsYXlhdWRpb3xlbnN1cmV2YnJtcDNzeW5jfGdldCg/OmxlZnR8cmlnaHQpP2NoYW5uZWx8a2lsbCg/OmF1ZGlvfHZpZGVvKXxtZXJnZWNoYW5uZWxzfG1peGF1ZGlvfG1vbm90b3N0ZXJlb3xub3JtYWxpemV8cmVzYW1wbGVhdWRpb3xzc3JjfHN1cGVyZXF8dGltZXN0cmV0Y2gvXG4gICAgICAgIC5zb3VyY2UsIC8vIGNvbmRpdGlvbmFsXG4gICAgICAvYW5pbWF0ZXxhcHBseXJhbmdlfGNvbmRpdGlvbmFsKD86ZmlsdGVyfHJlYWRlcnxzZWxlY3QpfGZyYW1lZXZhbHVhdGV8c2NyaXB0Y2xpcHx0Y3AoPzpzZXJ2ZXJ8c291cmNlKXx3cml0ZWZpbGUoPzplbmR8aWZ8c3RhcnQpPy9cbiAgICAgICAgLnNvdXJjZSwgLy8gZXhwb3J0XG4gICAgICAvaW1hZ2V3cml0ZXIvLnNvdXJjZSwgLy8gZGVidWdcbiAgICAgIC9ibGFja25lc3N8YmxhbmtjbGlwfGNvbG9yYmFycyg/OmhkKT98Y29tcGFyZXxkdW1wZmlsdGVyZ3JhcGh8ZWNob3xoaXN0b2dyYW18aW5mb3xtZXNzYWdlY2xpcHxwcmVyb2xsfHNldGdyYXBoYW5hbHlzaXN8c2hvdyg/OmZyYW1lbnVtYmVyfHNtcHRlfHRpbWUpfHNob3dmaXZldmVyc2lvbnN8c3RhY2soPzpob3Jpem9udGFsfHZlcnRpY2FsKXxzdWJ0aXRsZXx0b25lfHZlcnNpb24vXG4gICAgICAgIC5zb3VyY2VcbiAgICBdLmpvaW4oJ3wnKVxuICAgIHZhciBhbGxpbnRlcm5hbHMgPSBbaW50ZXJuYWxzLCBwcm9wZXJ0aWVzLCBmaWx0ZXJzXS5qb2luKCd8JylcbiAgICBQcmlzbS5sYW5ndWFnZXMuYXZpc3ludGggPSB7XG4gICAgICBjb21tZW50OiBbXG4gICAgICAgIHtcbiAgICAgICAgICAvLyBNYXRjaGVzIFsqICpdIG5lc3RhYmxlIGJsb2NrIGNvbW1lbnRzLCBidXQgb25seSBzdXBwb3J0cyAxIGxldmVsIG9mIG5lc3RlZCBjb21tZW50c1xuICAgICAgICAgIC8vIC9cXFtcXCooPzpbXlxcWypdfFxcWyg/IVxcKil8XFwqKD8hXFxdKXw8c2VsZj4pKlxcKlxcXS9cbiAgICAgICAgICBwYXR0ZXJuOlxuICAgICAgICAgICAgLyhefFteXFxcXF0pXFxbXFwqKD86W15cXFsqXXxcXFsoPyFcXCopfFxcKig/IVxcXSl8XFxbXFwqKD86W15cXFsqXXxcXFsoPyFcXCopfFxcKig/IVxcXSkpKlxcKlxcXSkqXFwqXFxdLyxcbiAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAgIGdyZWVkeTogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgLy8gTWF0Y2hlcyAvKiAqLyBibG9jayBjb21tZW50c1xuICAgICAgICAgIHBhdHRlcm46IC8oXnxbXlxcXFxdKVxcL1xcKltcXHNcXFNdKj8oPzpcXCpcXC98JCkvLFxuICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAvLyBNYXRjaGVzICMgY29tbWVudHNcbiAgICAgICAgICBwYXR0ZXJuOiAvKF58W15cXFxcJF0pIy4qLyxcbiAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAgIGdyZWVkeTogdHJ1ZVxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgLy8gSGFuZGxlIGJlZm9yZSBzdHJpbmdzIGJlY2F1c2Ugb3B0aW9uYWwgYXJndW1lbnRzIGFyZSBzdXJyb3VuZGVkIGJ5IGRvdWJsZSBxdW90ZXNcbiAgICAgIGFyZ3VtZW50OiB7XG4gICAgICAgIHBhdHRlcm46IHJlKC9cXGIoPzo8PDA+PilcXHMrKFwiPylcXHcrXFwxLy5zb3VyY2UsIFt0eXBlc10sICdpJyksXG4gICAgICAgIGluc2lkZToge1xuICAgICAgICAgIGtleXdvcmQ6IC9eXFx3Ky9cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIE9wdGlvbmFsIGFyZ3VtZW50IGFzc2lnbm1lbnRcbiAgICAgICdhcmd1bWVudC1sYWJlbCc6IHtcbiAgICAgICAgcGF0dGVybjogLyhbLChdW1xcc1xcXFxdKilcXHcrXFxzKj0oPyE9KS8sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGluc2lkZToge1xuICAgICAgICAgICdhcmd1bWVudC1uYW1lJzoge1xuICAgICAgICAgICAgcGF0dGVybjogL15cXHcrLyxcbiAgICAgICAgICAgIGFsaWFzOiAncHVuY3R1YXRpb24nXG4gICAgICAgICAgfSxcbiAgICAgICAgICBwdW5jdHVhdGlvbjogLz0kL1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgc3RyaW5nOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAvLyB0cmlwbGUgZG91YmxlLXF1b3RlZFxuICAgICAgICAgIHBhdHRlcm46IC9cIlwiXCJbXFxzXFxTXSo/XCJcIlwiLyxcbiAgICAgICAgICBncmVlZHk6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIC8vIHNpbmdsZSBkb3VibGUtcXVvdGVkXG4gICAgICAgICAgcGF0dGVybjogL1wiKD86XFxcXCg/OlxcclxcbnxbXFxzXFxTXSl8W15cIlxcXFxcXHJcXG5dKSpcIi8sXG4gICAgICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgICAgIGluc2lkZToge1xuICAgICAgICAgICAgY29uc3RhbnQ6IHtcbiAgICAgICAgICAgICAgLy8gVGhlc2UgKmFyZSogY2FzZS1zZW5zaXRpdmUhXG4gICAgICAgICAgICAgIHBhdHRlcm46XG4gICAgICAgICAgICAgICAgL1xcYig/OkRFRkFVTFRfTVRfTU9ERXwoPzpNQUlOU0NSSVBUfFBST0dSQU18U0NSSVBUKURJUnwoPzpNQUNISU5FfFVTRVIpXyg/OkNMQVNTSUN8UExVUylfUExVR0lOUylcXGIvXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgLy8gVGhlIHNwZWNpYWwgXCJsYXN0XCIgdmFyaWFibGUgdGhhdCB0YWtlcyB0aGUgdmFsdWUgb2YgdGhlIGxhc3QgaW1wbGljaXRseSByZXR1cm5lZCBjbGlwXG4gICAgICB2YXJpYWJsZTogL1xcYig/Omxhc3QpXFxiL2ksXG4gICAgICBib29sZWFuOiAvXFxiKD86ZmFsc2V8bm98dHJ1ZXx5ZXMpXFxiL2ksXG4gICAgICBrZXl3b3JkOlxuICAgICAgICAvXFxiKD86Y2F0Y2h8ZWxzZXxmb3J8ZnVuY3Rpb258Z2xvYmFsfGlmfHJldHVybnx0cnl8d2hpbGV8X19FTkRfXylcXGIvaSxcbiAgICAgIGNvbnN0YW50OiAvXFxiTVRfKD86TVVMVElfSU5TVEFOQ0V8TklDRV9GSUxURVJ8U0VSSUFMSVpFRHxTUEVDSUFMX01UKVxcYi8sXG4gICAgICAvLyBBdmlTeW50aCdzIGludGVybmFsIGZ1bmN0aW9ucywgZmlsdGVycywgYW5kIHByb3BlcnRpZXNcbiAgICAgICdidWlsdGluLWZ1bmN0aW9uJzoge1xuICAgICAgICBwYXR0ZXJuOiByZSgvXFxiKD86PDwwPj4pXFxiLy5zb3VyY2UsIFthbGxpbnRlcm5hbHNdLCAnaScpLFxuICAgICAgICBhbGlhczogJ2Z1bmN0aW9uJ1xuICAgICAgfSxcbiAgICAgICd0eXBlLWNhc3QnOiB7XG4gICAgICAgIHBhdHRlcm46IHJlKC9cXGIoPzo8PDA+PikoPz1cXHMqXFwoKS8uc291cmNlLCBbdHlwZXNdLCAnaScpLFxuICAgICAgICBhbGlhczogJ2tleXdvcmQnXG4gICAgICB9LFxuICAgICAgLy8gRXh0ZXJuYWwvdXNlci1kZWZpbmVkIGZpbHRlcnNcbiAgICAgIGZ1bmN0aW9uOiB7XG4gICAgICAgIHBhdHRlcm46IC9cXGJbYS16X11cXHcqKD89XFxzKlxcKCl8KFxcLilbYS16X11cXHcqXFxiL2ksXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH0sXG4gICAgICAvLyBNYXRjaGVzIGEgXFwgYXMgdGhlIGZpcnN0IG9yIGxhc3QgY2hhcmFjdGVyIG9uIGEgbGluZVxuICAgICAgJ2xpbmUtY29udGludWF0aW9uJzoge1xuICAgICAgICBwYXR0ZXJuOiAvKF5bIFxcdF0qKVxcXFx8XFxcXCg/PVsgXFx0XSokKS9tLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICBhbGlhczogJ3B1bmN0dWF0aW9uJ1xuICAgICAgfSxcbiAgICAgIG51bWJlcjpcbiAgICAgICAgL1xcQlxcJCg/OltcXGRhLWZdezZ9fFtcXGRhLWZdezh9KVxcYnwoPzooPzpcXGJ8XFxCLSlcXGQrKD86XFwuXFxkKik/XFxifFxcQlxcLlxcZCtcXGIpL2ksXG4gICAgICBvcGVyYXRvcjogL1xcK1xcKz98WyE9PD5dPT98JiZ8XFx8XFx8fFs/OiovJS1dLyxcbiAgICAgIHB1bmN0dWF0aW9uOiAvW3t9XFxbXFxdKCk7LC5dL1xuICAgIH1cbiAgICBQcmlzbS5sYW5ndWFnZXMuYXZzID0gUHJpc20ubGFuZ3VhZ2VzLmF2aXN5bnRoXG4gIH0pKFByaXNtKVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJhdmlzeW50aCIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwicmVwbGFjZSIsInBhdHRlcm4iLCJyZXBsYWNlbWVudHMiLCJtIiwiaW5kZXgiLCJyZSIsImZsYWdzIiwiUmVnRXhwIiwidHlwZXMiLCJzb3VyY2UiLCJpbnRlcm5hbHMiLCJqb2luIiwicHJvcGVydGllcyIsImZpbHRlcnMiLCJhbGxpbnRlcm5hbHMiLCJsYW5ndWFnZXMiLCJjb21tZW50IiwibG9va2JlaGluZCIsImdyZWVkeSIsImFyZ3VtZW50IiwiaW5zaWRlIiwia2V5d29yZCIsImFsaWFzIiwicHVuY3R1YXRpb24iLCJzdHJpbmciLCJjb25zdGFudCIsInZhcmlhYmxlIiwibnVtYmVyIiwib3BlcmF0b3IiLCJhdnMiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/avisynth.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/avro-idl.js":
/*!*************************************************!*\
  !*** ./node_modules/refractor/lang/avro-idl.js ***!
  \*************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = avroIdl;\navroIdl.displayName = 'avroIdl';\navroIdl.aliases = [];\nfunction avroIdl(Prism) {\n  // GitHub: https://github.com/apache/avro\n  // Docs: https://avro.apache.org/docs/current/idl.html\n  Prism.languages['avro-idl'] = {\n    comment: {\n      pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,\n      greedy: true\n    },\n    string: {\n      pattern: /(^|[^\\\\])\"(?:[^\\r\\n\"\\\\]|\\\\.)*\"/,\n      lookbehind: true,\n      greedy: true\n    },\n    annotation: {\n      pattern: /@(?:[$\\w.-]|`[^\\r\\n`]+`)+/,\n      greedy: true,\n      alias: 'function'\n    },\n    'function-identifier': {\n      pattern: /`[^\\r\\n`]+`(?=\\s*\\()/,\n      greedy: true,\n      alias: 'function'\n    },\n    identifier: {\n      pattern: /`[^\\r\\n`]+`/,\n      greedy: true\n    },\n    'class-name': {\n      pattern: /(\\b(?:enum|error|protocol|record|throws)\\b\\s+)[$\\w]+/,\n      lookbehind: true,\n      greedy: true\n    },\n    keyword: /\\b(?:array|boolean|bytes|date|decimal|double|enum|error|false|fixed|float|idl|import|int|local_timestamp_ms|long|map|null|oneway|protocol|record|schema|string|throws|time_ms|timestamp_ms|true|union|uuid|void)\\b/,\n    \"function\": /\\b[a-z_]\\w*(?=\\s*\\()/i,\n    number: [{\n      pattern: /(^|[^\\w.])-?(?:(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?|0x(?:[a-f0-9]+(?:\\.[a-f0-9]*)?|\\.[a-f0-9]+)(?:p[+-]?\\d+)?)[dfl]?(?![\\w.])/i,\n      lookbehind: true\n    }, /-?\\b(?:Infinity|NaN)\\b/],\n    operator: /=/,\n    punctuation: /[()\\[\\]{}<>.:,;-]/\n  };\n  Prism.languages.avdl = Prism.languages['avro-idl'];\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvYXZyby1pZGwuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxPQUFPO0FBQ3hCQSxPQUFPLENBQUNDLFdBQVcsR0FBRyxTQUFTO0FBQy9CRCxPQUFPLENBQUNFLE9BQU8sR0FBRyxFQUFFO0FBQ3BCLFNBQVNGLE9BQU9BLENBQUNHLEtBQUssRUFBRTtFQUN0QjtFQUNBO0VBQ0FBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDLFVBQVUsQ0FBQyxHQUFHO0lBQzVCQyxPQUFPLEVBQUU7TUFDUEMsT0FBTyxFQUFFLHlCQUF5QjtNQUNsQ0MsTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUNEQyxNQUFNLEVBQUU7TUFDTkYsT0FBTyxFQUFFLGdDQUFnQztNQUN6Q0csVUFBVSxFQUFFLElBQUk7TUFDaEJGLE1BQU0sRUFBRTtJQUNWLENBQUM7SUFDREcsVUFBVSxFQUFFO01BQ1ZKLE9BQU8sRUFBRSwyQkFBMkI7TUFDcENDLE1BQU0sRUFBRSxJQUFJO01BQ1pJLEtBQUssRUFBRTtJQUNULENBQUM7SUFDRCxxQkFBcUIsRUFBRTtNQUNyQkwsT0FBTyxFQUFFLHNCQUFzQjtNQUMvQkMsTUFBTSxFQUFFLElBQUk7TUFDWkksS0FBSyxFQUFFO0lBQ1QsQ0FBQztJQUNEQyxVQUFVLEVBQUU7TUFDVk4sT0FBTyxFQUFFLGFBQWE7TUFDdEJDLE1BQU0sRUFBRTtJQUNWLENBQUM7SUFDRCxZQUFZLEVBQUU7TUFDWkQsT0FBTyxFQUFFLHNEQUFzRDtNQUMvREcsVUFBVSxFQUFFLElBQUk7TUFDaEJGLE1BQU0sRUFBRTtJQUNWLENBQUM7SUFDRE0sT0FBTyxFQUNMLG9OQUFvTjtJQUN0TixZQUFVLHVCQUF1QjtJQUNqQ0MsTUFBTSxFQUFFLENBQ047TUFDRVIsT0FBTyxFQUNMLGlJQUFpSTtNQUNuSUcsVUFBVSxFQUFFO0lBQ2QsQ0FBQyxFQUNELHdCQUF3QixDQUN6QjtJQUNETSxRQUFRLEVBQUUsR0FBRztJQUNiQyxXQUFXLEVBQUU7RUFDZixDQUFDO0VBQ0RiLEtBQUssQ0FBQ0MsU0FBUyxDQUFDYSxJQUFJLEdBQUdkLEtBQUssQ0FBQ0MsU0FBUyxDQUFDLFVBQVUsQ0FBQztBQUNwRCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXGF2cm8taWRsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGF2cm9JZGxcbmF2cm9JZGwuZGlzcGxheU5hbWUgPSAnYXZyb0lkbCdcbmF2cm9JZGwuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBhdnJvSWRsKFByaXNtKSB7XG4gIC8vIEdpdEh1YjogaHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9hdnJvXG4gIC8vIERvY3M6IGh0dHBzOi8vYXZyby5hcGFjaGUub3JnL2RvY3MvY3VycmVudC9pZGwuaHRtbFxuICBQcmlzbS5sYW5ndWFnZXNbJ2F2cm8taWRsJ10gPSB7XG4gICAgY29tbWVudDoge1xuICAgICAgcGF0dGVybjogL1xcL1xcLy4qfFxcL1xcKltcXHNcXFNdKj9cXCpcXC8vLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICBzdHJpbmc6IHtcbiAgICAgIHBhdHRlcm46IC8oXnxbXlxcXFxdKVwiKD86W15cXHJcXG5cIlxcXFxdfFxcXFwuKSpcIi8sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICBhbm5vdGF0aW9uOiB7XG4gICAgICBwYXR0ZXJuOiAvQCg/OlskXFx3Li1dfGBbXlxcclxcbmBdK2ApKy8sXG4gICAgICBncmVlZHk6IHRydWUsXG4gICAgICBhbGlhczogJ2Z1bmN0aW9uJ1xuICAgIH0sXG4gICAgJ2Z1bmN0aW9uLWlkZW50aWZpZXInOiB7XG4gICAgICBwYXR0ZXJuOiAvYFteXFxyXFxuYF0rYCg/PVxccypcXCgpLyxcbiAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgIGFsaWFzOiAnZnVuY3Rpb24nXG4gICAgfSxcbiAgICBpZGVudGlmaWVyOiB7XG4gICAgICBwYXR0ZXJuOiAvYFteXFxyXFxuYF0rYC8sXG4gICAgICBncmVlZHk6IHRydWVcbiAgICB9LFxuICAgICdjbGFzcy1uYW1lJzoge1xuICAgICAgcGF0dGVybjogLyhcXGIoPzplbnVtfGVycm9yfHByb3RvY29sfHJlY29yZHx0aHJvd3MpXFxiXFxzKylbJFxcd10rLyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBncmVlZHk6IHRydWVcbiAgICB9LFxuICAgIGtleXdvcmQ6XG4gICAgICAvXFxiKD86YXJyYXl8Ym9vbGVhbnxieXRlc3xkYXRlfGRlY2ltYWx8ZG91YmxlfGVudW18ZXJyb3J8ZmFsc2V8Zml4ZWR8ZmxvYXR8aWRsfGltcG9ydHxpbnR8bG9jYWxfdGltZXN0YW1wX21zfGxvbmd8bWFwfG51bGx8b25ld2F5fHByb3RvY29sfHJlY29yZHxzY2hlbWF8c3RyaW5nfHRocm93c3x0aW1lX21zfHRpbWVzdGFtcF9tc3x0cnVlfHVuaW9ufHV1aWR8dm9pZClcXGIvLFxuICAgIGZ1bmN0aW9uOiAvXFxiW2Etel9dXFx3Kig/PVxccypcXCgpL2ksXG4gICAgbnVtYmVyOiBbXG4gICAgICB7XG4gICAgICAgIHBhdHRlcm46XG4gICAgICAgICAgLyhefFteXFx3Ll0pLT8oPzooPzpcXGQrKD86XFwuXFxkKik/fFxcLlxcZCspKD86ZVsrLV0/XFxkKyk/fDB4KD86W2EtZjAtOV0rKD86XFwuW2EtZjAtOV0qKT98XFwuW2EtZjAtOV0rKSg/OnBbKy1dP1xcZCspPylbZGZsXT8oPyFbXFx3Ll0pL2ksXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH0sXG4gICAgICAvLT9cXGIoPzpJbmZpbml0eXxOYU4pXFxiL1xuICAgIF0sXG4gICAgb3BlcmF0b3I6IC89LyxcbiAgICBwdW5jdHVhdGlvbjogL1soKVxcW1xcXXt9PD4uOiw7LV0vXG4gIH1cbiAgUHJpc20ubGFuZ3VhZ2VzLmF2ZGwgPSBQcmlzbS5sYW5ndWFnZXNbJ2F2cm8taWRsJ11cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiYXZyb0lkbCIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwiY29tbWVudCIsInBhdHRlcm4iLCJncmVlZHkiLCJzdHJpbmciLCJsb29rYmVoaW5kIiwiYW5ub3RhdGlvbiIsImFsaWFzIiwiaWRlbnRpZmllciIsImtleXdvcmQiLCJudW1iZXIiLCJvcGVyYXRvciIsInB1bmN0dWF0aW9uIiwiYXZkbCJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/avro-idl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/bash.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/bash.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = bash;\nbash.displayName = 'bash';\nbash.aliases = ['shell'];\nfunction bash(Prism) {\n  ;\n  (function (Prism) {\n    // $ set | grep '^[A-Z][^[:space:]]*=' | cut -d= -f1 | tr '\\n' '|'\n    // + LC_ALL, RANDOM, REPLY, SECONDS.\n    // + make sure PS1..4 are here as they are not always set,\n    // - some useless things.\n    var envVars = '\\\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\\\b';\n    var commandAfterHeredoc = {\n      pattern: /(^([\"']?)\\w+\\2)[ \\t]+\\S.*/,\n      lookbehind: true,\n      alias: 'punctuation',\n      // this looks reasonably well in all themes\n      inside: null // see below\n    };\n\n    var insideString = {\n      bash: commandAfterHeredoc,\n      environment: {\n        pattern: RegExp('\\\\$' + envVars),\n        alias: 'constant'\n      },\n      variable: [\n      // [0]: Arithmetic Environment\n      {\n        pattern: /\\$?\\(\\([\\s\\S]+?\\)\\)/,\n        greedy: true,\n        inside: {\n          // If there is a $ sign at the beginning highlight $(( and )) as variable\n          variable: [{\n            pattern: /(^\\$\\(\\([\\s\\S]+)\\)\\)/,\n            lookbehind: true\n          }, /^\\$\\(\\(/],\n          number: /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,\n          // Operators according to https://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic\n          operator: /--|\\+\\+|\\*\\*=?|<<=?|>>=?|&&|\\|\\||[=!+\\-*/%<>^&|]=?|[?~:]/,\n          // If there is no $ sign at the beginning highlight (( and )) as punctuation\n          punctuation: /\\(\\(?|\\)\\)?|,|;/\n        }\n      },\n      // [1]: Command Substitution\n      {\n        pattern: /\\$\\((?:\\([^)]+\\)|[^()])+\\)|`[^`]+`/,\n        greedy: true,\n        inside: {\n          variable: /^\\$\\(|^`|\\)$|`$/\n        }\n      },\n      // [2]: Brace expansion\n      {\n        pattern: /\\$\\{[^}]+\\}/,\n        greedy: true,\n        inside: {\n          operator: /:[-=?+]?|[!\\/]|##?|%%?|\\^\\^?|,,?/,\n          punctuation: /[\\[\\]]/,\n          environment: {\n            pattern: RegExp('(\\\\{)' + envVars),\n            lookbehind: true,\n            alias: 'constant'\n          }\n        }\n      }, /\\$(?:\\w+|[#?*!@$])/],\n      // Escape sequences from echo and printf's manuals, and escaped quotes.\n      entity: /\\\\(?:[abceEfnrtv\\\\\"]|O?[0-7]{1,3}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4}|x[0-9a-fA-F]{1,2})/\n    };\n    Prism.languages.bash = {\n      shebang: {\n        pattern: /^#!\\s*\\/.*/,\n        alias: 'important'\n      },\n      comment: {\n        pattern: /(^|[^\"{\\\\$])#.*/,\n        lookbehind: true\n      },\n      'function-name': [\n      // a) function foo {\n      // b) foo() {\n      // c) function foo() {\n      // but not “foo {”\n      {\n        // a) and c)\n        pattern: /(\\bfunction\\s+)[\\w-]+(?=(?:\\s*\\(?:\\s*\\))?\\s*\\{)/,\n        lookbehind: true,\n        alias: 'function'\n      }, {\n        // b)\n        pattern: /\\b[\\w-]+(?=\\s*\\(\\s*\\)\\s*\\{)/,\n        alias: 'function'\n      }],\n      // Highlight variable names as variables in for and select beginnings.\n      'for-or-select': {\n        pattern: /(\\b(?:for|select)\\s+)\\w+(?=\\s+in\\s)/,\n        alias: 'variable',\n        lookbehind: true\n      },\n      // Highlight variable names as variables in the left-hand part\n      // of assignments (“=” and “+=”).\n      'assign-left': {\n        pattern: /(^|[\\s;|&]|[<>]\\()\\w+(?=\\+?=)/,\n        inside: {\n          environment: {\n            pattern: RegExp('(^|[\\\\s;|&]|[<>]\\\\()' + envVars),\n            lookbehind: true,\n            alias: 'constant'\n          }\n        },\n        alias: 'variable',\n        lookbehind: true\n      },\n      string: [\n      // Support for Here-documents https://en.wikipedia.org/wiki/Here_document\n      {\n        pattern: /((?:^|[^<])<<-?\\s*)(\\w+)\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\2/,\n        lookbehind: true,\n        greedy: true,\n        inside: insideString\n      },\n      // Here-document with quotes around the tag\n      // → No expansion (so no “inside”).\n      {\n        pattern: /((?:^|[^<])<<-?\\s*)([\"'])(\\w+)\\2\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\3/,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          bash: commandAfterHeredoc\n        }\n      },\n      // “Normal” string\n      {\n        // https://www.gnu.org/software/bash/manual/html_node/Double-Quotes.html\n        pattern: /(^|[^\\\\](?:\\\\\\\\)*)\"(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|\\$(?!\\()|`[^`]+`|[^\"\\\\`$])*\"/,\n        lookbehind: true,\n        greedy: true,\n        inside: insideString\n      }, {\n        // https://www.gnu.org/software/bash/manual/html_node/Single-Quotes.html\n        pattern: /(^|[^$\\\\])'[^']*'/,\n        lookbehind: true,\n        greedy: true\n      }, {\n        // https://www.gnu.org/software/bash/manual/html_node/ANSI_002dC-Quoting.html\n        pattern: /\\$'(?:[^'\\\\]|\\\\[\\s\\S])*'/,\n        greedy: true,\n        inside: {\n          entity: insideString.entity\n        }\n      }],\n      environment: {\n        pattern: RegExp('\\\\$?' + envVars),\n        alias: 'constant'\n      },\n      variable: insideString.variable,\n      \"function\": {\n        pattern: /(^|[\\s;|&]|[<>]\\()(?:add|apropos|apt|apt-cache|apt-get|aptitude|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|composer|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|docker|docker-compose|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|node|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|podman|podman-compose|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vcpkg|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\\s;|&])/,\n        lookbehind: true\n      },\n      keyword: {\n        pattern: /(^|[\\s;|&]|[<>]\\()(?:case|do|done|elif|else|esac|fi|for|function|if|in|select|then|until|while)(?=$|[)\\s;|&])/,\n        lookbehind: true\n      },\n      // https://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html\n      builtin: {\n        pattern: /(^|[\\s;|&]|[<>]\\()(?:\\.|:|alias|bind|break|builtin|caller|cd|command|continue|declare|echo|enable|eval|exec|exit|export|getopts|hash|help|let|local|logout|mapfile|printf|pwd|read|readarray|readonly|return|set|shift|shopt|source|test|times|trap|type|typeset|ulimit|umask|unalias|unset)(?=$|[)\\s;|&])/,\n        lookbehind: true,\n        // Alias added to make those easier to distinguish from strings.\n        alias: 'class-name'\n      },\n      \"boolean\": {\n        pattern: /(^|[\\s;|&]|[<>]\\()(?:false|true)(?=$|[)\\s;|&])/,\n        lookbehind: true\n      },\n      'file-descriptor': {\n        pattern: /\\B&\\d\\b/,\n        alias: 'important'\n      },\n      operator: {\n        // Lots of redirections here, but not just that.\n        pattern: /\\d?<>|>\\||\\+=|=[=~]?|!=?|<<[<-]?|[&\\d]?>>|\\d[<>]&?|[<>][&=]?|&[>&]?|\\|[&|]?/,\n        inside: {\n          'file-descriptor': {\n            pattern: /^\\d/,\n            alias: 'important'\n          }\n        }\n      },\n      punctuation: /\\$?\\(\\(?|\\)\\)?|\\.\\.|[{}[\\];\\\\]/,\n      number: {\n        pattern: /(^|\\s)(?:[1-9]\\d*|0)(?:[.,]\\d+)?\\b/,\n        lookbehind: true\n      }\n    };\n    commandAfterHeredoc.inside = Prism.languages.bash;\n    /* Patterns in command substitution. */\n    var toBeCopied = ['comment', 'function-name', 'for-or-select', 'assign-left', 'string', 'environment', 'function', 'keyword', 'builtin', 'boolean', 'file-descriptor', 'operator', 'punctuation', 'number'];\n    var inside = insideString.variable[1].inside;\n    for (var i = 0; i < toBeCopied.length; i++) {\n      inside[toBeCopied[i]] = Prism.languages.bash[toBeCopied[i]];\n    }\n    Prism.languages.shell = Prism.languages.bash;\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/bash.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/basic.js":
/*!**********************************************!*\
  !*** ./node_modules/refractor/lang/basic.js ***!
  \**********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = basic;\nbasic.displayName = 'basic';\nbasic.aliases = [];\nfunction basic(Prism) {\n  Prism.languages.basic = {\n    comment: {\n      pattern: /(?:!|REM\\b).+/i,\n      inside: {\n        keyword: /^REM/i\n      }\n    },\n    string: {\n      pattern: /\"(?:\"\"|[!#$%&'()*,\\/:;<=>?^\\w +\\-.])*\"/,\n      greedy: true\n    },\n    number: /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:E[+-]?\\d+)?/i,\n    keyword: /\\b(?:AS|BEEP|BLOAD|BSAVE|CALL(?: ABSOLUTE)?|CASE|CHAIN|CHDIR|CLEAR|CLOSE|CLS|COM|COMMON|CONST|DATA|DECLARE|DEF(?: FN| SEG|DBL|INT|LNG|SNG|STR)|DIM|DO|DOUBLE|ELSE|ELSEIF|END|ENVIRON|ERASE|ERROR|EXIT|FIELD|FILES|FOR|FUNCTION|GET|GOSUB|GOTO|IF|INPUT|INTEGER|IOCTL|KEY|KILL|LINE INPUT|LOCATE|LOCK|LONG|LOOP|LSET|MKDIR|NAME|NEXT|OFF|ON(?: COM| ERROR| KEY| TIMER)?|OPEN|OPTION BASE|OUT|POKE|PUT|READ|REDIM|REM|RESTORE|RESUME|RETURN|RMDIR|RSET|RUN|SELECT CASE|SHARED|SHELL|SINGLE|SLEEP|STATIC|STEP|STOP|STRING|SUB|SWAP|SYSTEM|THEN|TIMER|TO|TROFF|TRON|TYPE|UNLOCK|UNTIL|USING|VIEW PRINT|WAIT|WEND|WHILE|WRITE)(?:\\$|\\b)/i,\n    \"function\": /\\b(?:ABS|ACCESS|ACOS|ANGLE|AREA|ARITHMETIC|ARRAY|ASIN|ASK|AT|ATN|BASE|BEGIN|BREAK|CAUSE|CEIL|CHR|CLIP|COLLATE|COLOR|CON|COS|COSH|COT|CSC|DATE|DATUM|DEBUG|DECIMAL|DEF|DEG|DEGREES|DELETE|DET|DEVICE|DISPLAY|DOT|ELAPSED|EPS|ERASABLE|EXLINE|EXP|EXTERNAL|EXTYPE|FILETYPE|FIXED|FP|GO|GRAPH|HANDLER|IDN|IMAGE|IN|INT|INTERNAL|IP|IS|KEYED|LBOUND|LCASE|LEFT|LEN|LENGTH|LET|LINE|LINES|LOG|LOG10|LOG2|LTRIM|MARGIN|MAT|MAX|MAXNUM|MID|MIN|MISSING|MOD|NATIVE|NUL|NUMERIC|OF|OPTION|ORD|ORGANIZATION|OUTIN|OUTPUT|PI|POINT|POINTER|POINTS|POS|PRINT|PROGRAM|PROMPT|RAD|RADIANS|RANDOMIZE|RECORD|RECSIZE|RECTYPE|RELATIVE|REMAINDER|REPEAT|REST|RETRY|REWRITE|RIGHT|RND|ROUND|RTRIM|SAME|SEC|SELECT|SEQUENTIAL|SET|SETTER|SGN|SIN|SINH|SIZE|SKIP|SQR|STANDARD|STATUS|STR|STREAM|STYLE|TAB|TAN|TANH|TEMPLATE|TEXT|THERE|TIME|TIMEOUT|TRACE|TRANSFORM|TRUNCATE|UBOUND|UCASE|USE|VAL|VARIABLE|VIEWPORT|WHEN|WINDOW|WITH|ZER|ZONEWIDTH)(?:\\$|\\b)/i,\n    operator: /<[=>]?|>=?|[+\\-*\\/^=&]|\\b(?:AND|EQV|IMP|NOT|OR|XOR)\\b/i,\n    punctuation: /[,;:()]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvYmFzaWMuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxLQUFLO0FBQ3RCQSxLQUFLLENBQUNDLFdBQVcsR0FBRyxPQUFPO0FBQzNCRCxLQUFLLENBQUNFLE9BQU8sR0FBRyxFQUFFO0FBQ2xCLFNBQVNGLEtBQUtBLENBQUNHLEtBQUssRUFBRTtFQUNwQkEsS0FBSyxDQUFDQyxTQUFTLENBQUNKLEtBQUssR0FBRztJQUN0QkssT0FBTyxFQUFFO01BQ1BDLE9BQU8sRUFBRSxnQkFBZ0I7TUFDekJDLE1BQU0sRUFBRTtRQUNOQyxPQUFPLEVBQUU7TUFDWDtJQUNGLENBQUM7SUFDREMsTUFBTSxFQUFFO01BQ05ILE9BQU8sRUFBRSx3Q0FBd0M7TUFDakRJLE1BQU0sRUFBRTtJQUNWLENBQUM7SUFDREMsTUFBTSxFQUFFLDRDQUE0QztJQUNwREgsT0FBTyxFQUNMLHFtQkFBcW1CO0lBQ3ZtQixZQUNFLDI0QkFBMjRCO0lBQzc0QkksUUFBUSxFQUFFLHdEQUF3RDtJQUNsRUMsV0FBVyxFQUFFO0VBQ2YsQ0FBQztBQUNIIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcYmFzaWMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gYmFzaWNcbmJhc2ljLmRpc3BsYXlOYW1lID0gJ2Jhc2ljJ1xuYmFzaWMuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBiYXNpYyhQcmlzbSkge1xuICBQcmlzbS5sYW5ndWFnZXMuYmFzaWMgPSB7XG4gICAgY29tbWVudDoge1xuICAgICAgcGF0dGVybjogLyg/OiF8UkVNXFxiKS4rL2ksXG4gICAgICBpbnNpZGU6IHtcbiAgICAgICAga2V5d29yZDogL15SRU0vaVxuICAgICAgfVxuICAgIH0sXG4gICAgc3RyaW5nOiB7XG4gICAgICBwYXR0ZXJuOiAvXCIoPzpcIlwifFshIyQlJicoKSosXFwvOjs8PT4/XlxcdyArXFwtLl0pKlwiLyxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgbnVtYmVyOiAvKD86XFxiXFxkKyg/OlxcLlxcZCopP3xcXEJcXC5cXGQrKSg/OkVbKy1dP1xcZCspPy9pLFxuICAgIGtleXdvcmQ6XG4gICAgICAvXFxiKD86QVN8QkVFUHxCTE9BRHxCU0FWRXxDQUxMKD86IEFCU09MVVRFKT98Q0FTRXxDSEFJTnxDSERJUnxDTEVBUnxDTE9TRXxDTFN8Q09NfENPTU1PTnxDT05TVHxEQVRBfERFQ0xBUkV8REVGKD86IEZOfCBTRUd8REJMfElOVHxMTkd8U05HfFNUUil8RElNfERPfERPVUJMRXxFTFNFfEVMU0VJRnxFTkR8RU5WSVJPTnxFUkFTRXxFUlJPUnxFWElUfEZJRUxEfEZJTEVTfEZPUnxGVU5DVElPTnxHRVR8R09TVUJ8R09UT3xJRnxJTlBVVHxJTlRFR0VSfElPQ1RMfEtFWXxLSUxMfExJTkUgSU5QVVR8TE9DQVRFfExPQ0t8TE9OR3xMT09QfExTRVR8TUtESVJ8TkFNRXxORVhUfE9GRnxPTig/OiBDT018IEVSUk9SfCBLRVl8IFRJTUVSKT98T1BFTnxPUFRJT04gQkFTRXxPVVR8UE9LRXxQVVR8UkVBRHxSRURJTXxSRU18UkVTVE9SRXxSRVNVTUV8UkVUVVJOfFJNRElSfFJTRVR8UlVOfFNFTEVDVCBDQVNFfFNIQVJFRHxTSEVMTHxTSU5HTEV8U0xFRVB8U1RBVElDfFNURVB8U1RPUHxTVFJJTkd8U1VCfFNXQVB8U1lTVEVNfFRIRU58VElNRVJ8VE98VFJPRkZ8VFJPTnxUWVBFfFVOTE9DS3xVTlRJTHxVU0lOR3xWSUVXIFBSSU5UfFdBSVR8V0VORHxXSElMRXxXUklURSkoPzpcXCR8XFxiKS9pLFxuICAgIGZ1bmN0aW9uOlxuICAgICAgL1xcYig/OkFCU3xBQ0NFU1N8QUNPU3xBTkdMRXxBUkVBfEFSSVRITUVUSUN8QVJSQVl8QVNJTnxBU0t8QVR8QVROfEJBU0V8QkVHSU58QlJFQUt8Q0FVU0V8Q0VJTHxDSFJ8Q0xJUHxDT0xMQVRFfENPTE9SfENPTnxDT1N8Q09TSHxDT1R8Q1NDfERBVEV8REFUVU18REVCVUd8REVDSU1BTHxERUZ8REVHfERFR1JFRVN8REVMRVRFfERFVHxERVZJQ0V8RElTUExBWXxET1R8RUxBUFNFRHxFUFN8RVJBU0FCTEV8RVhMSU5FfEVYUHxFWFRFUk5BTHxFWFRZUEV8RklMRVRZUEV8RklYRUR8RlB8R098R1JBUEh8SEFORExFUnxJRE58SU1BR0V8SU58SU5UfElOVEVSTkFMfElQfElTfEtFWUVEfExCT1VORHxMQ0FTRXxMRUZUfExFTnxMRU5HVEh8TEVUfExJTkV8TElORVN8TE9HfExPRzEwfExPRzJ8TFRSSU18TUFSR0lOfE1BVHxNQVh8TUFYTlVNfE1JRHxNSU58TUlTU0lOR3xNT0R8TkFUSVZFfE5VTHxOVU1FUklDfE9GfE9QVElPTnxPUkR8T1JHQU5JWkFUSU9OfE9VVElOfE9VVFBVVHxQSXxQT0lOVHxQT0lOVEVSfFBPSU5UU3xQT1N8UFJJTlR8UFJPR1JBTXxQUk9NUFR8UkFEfFJBRElBTlN8UkFORE9NSVpFfFJFQ09SRHxSRUNTSVpFfFJFQ1RZUEV8UkVMQVRJVkV8UkVNQUlOREVSfFJFUEVBVHxSRVNUfFJFVFJZfFJFV1JJVEV8UklHSFR8Uk5EfFJPVU5EfFJUUklNfFNBTUV8U0VDfFNFTEVDVHxTRVFVRU5USUFMfFNFVHxTRVRURVJ8U0dOfFNJTnxTSU5IfFNJWkV8U0tJUHxTUVJ8U1RBTkRBUkR8U1RBVFVTfFNUUnxTVFJFQU18U1RZTEV8VEFCfFRBTnxUQU5IfFRFTVBMQVRFfFRFWFR8VEhFUkV8VElNRXxUSU1FT1VUfFRSQUNFfFRSQU5TRk9STXxUUlVOQ0FURXxVQk9VTkR8VUNBU0V8VVNFfFZBTHxWQVJJQUJMRXxWSUVXUE9SVHxXSEVOfFdJTkRPV3xXSVRIfFpFUnxaT05FV0lEVEgpKD86XFwkfFxcYikvaSxcbiAgICBvcGVyYXRvcjogLzxbPT5dP3w+PT98WytcXC0qXFwvXj0mXXxcXGIoPzpBTkR8RVFWfElNUHxOT1R8T1J8WE9SKVxcYi9pLFxuICAgIHB1bmN0dWF0aW9uOiAvWyw7OigpXS9cbiAgfVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJiYXNpYyIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwiY29tbWVudCIsInBhdHRlcm4iLCJpbnNpZGUiLCJrZXl3b3JkIiwic3RyaW5nIiwiZ3JlZWR5IiwibnVtYmVyIiwib3BlcmF0b3IiLCJwdW5jdHVhdGlvbiJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/basic.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/batch.js":
/*!**********************************************!*\
  !*** ./node_modules/refractor/lang/batch.js ***!
  \**********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = batch;\nbatch.displayName = 'batch';\nbatch.aliases = [];\nfunction batch(Prism) {\n  ;\n  (function (Prism) {\n    var variable = /%%?[~:\\w]+%?|!\\S+!/;\n    var parameter = {\n      pattern: /\\/[a-z?]+(?=[ :]|$):?|-[a-z]\\b|--[a-z-]+\\b/im,\n      alias: 'attr-name',\n      inside: {\n        punctuation: /:/\n      }\n    };\n    var string = /\"(?:[\\\\\"]\"|[^\"])*\"(?!\")/;\n    var number = /(?:\\b|-)\\d+\\b/;\n    Prism.languages.batch = {\n      comment: [/^::.*/m, {\n        pattern: /((?:^|[&(])[ \\t]*)rem\\b(?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,\n        lookbehind: true\n      }],\n      label: {\n        pattern: /^:.*/m,\n        alias: 'property'\n      },\n      command: [{\n        // FOR command\n        pattern: /((?:^|[&(])[ \\t]*)for(?: \\/[a-z?](?:[ :](?:\"[^\"]*\"|[^\\s\"/]\\S*))?)* \\S+ in \\([^)]+\\) do/im,\n        lookbehind: true,\n        inside: {\n          keyword: /\\b(?:do|in)\\b|^for\\b/i,\n          string: string,\n          parameter: parameter,\n          variable: variable,\n          number: number,\n          punctuation: /[()',]/\n        }\n      }, {\n        // IF command\n        pattern: /((?:^|[&(])[ \\t]*)if(?: \\/[a-z?](?:[ :](?:\"[^\"]*\"|[^\\s\"/]\\S*))?)* (?:not )?(?:cmdextversion \\d+|defined \\w+|errorlevel \\d+|exist \\S+|(?:\"[^\"]*\"|(?!\")(?:(?!==)\\S)+)?(?:==| (?:equ|geq|gtr|leq|lss|neq) )(?:\"[^\"]*\"|[^\\s\"]\\S*))/im,\n        lookbehind: true,\n        inside: {\n          keyword: /\\b(?:cmdextversion|defined|errorlevel|exist|not)\\b|^if\\b/i,\n          string: string,\n          parameter: parameter,\n          variable: variable,\n          number: number,\n          operator: /\\^|==|\\b(?:equ|geq|gtr|leq|lss|neq)\\b/i\n        }\n      }, {\n        // ELSE command\n        pattern: /((?:^|[&()])[ \\t]*)else\\b/im,\n        lookbehind: true,\n        inside: {\n          keyword: /^else\\b/i\n        }\n      }, {\n        // SET command\n        pattern: /((?:^|[&(])[ \\t]*)set(?: \\/[a-z](?:[ :](?:\"[^\"]*\"|[^\\s\"/]\\S*))?)* (?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,\n        lookbehind: true,\n        inside: {\n          keyword: /^set\\b/i,\n          string: string,\n          parameter: parameter,\n          variable: [variable, /\\w+(?=(?:[*\\/%+\\-&^|]|<<|>>)?=)/],\n          number: number,\n          operator: /[*\\/%+\\-&^|]=?|<<=?|>>=?|[!~_=]/,\n          punctuation: /[()',]/\n        }\n      }, {\n        // Other commands\n        pattern: /((?:^|[&(])[ \\t]*@?)\\w+\\b(?:\"(?:[\\\\\"]\"|[^\"])*\"(?!\")|[^\"^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/m,\n        lookbehind: true,\n        inside: {\n          keyword: /^\\w+\\b/,\n          string: string,\n          parameter: parameter,\n          label: {\n            pattern: /(^\\s*):\\S+/m,\n            lookbehind: true,\n            alias: 'property'\n          },\n          variable: variable,\n          number: number,\n          operator: /\\^/\n        }\n      }],\n      operator: /[&@]/,\n      punctuation: /[()']/\n    };\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvYmF0Y2guanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxLQUFLO0FBQ3RCQSxLQUFLLENBQUNDLFdBQVcsR0FBRyxPQUFPO0FBQzNCRCxLQUFLLENBQUNFLE9BQU8sR0FBRyxFQUFFO0FBQ2xCLFNBQVNGLEtBQUtBLENBQUNHLEtBQUssRUFBRTtFQUNwQjtFQUFDLENBQUMsVUFBVUEsS0FBSyxFQUFFO0lBQ2pCLElBQUlDLFFBQVEsR0FBRyxvQkFBb0I7SUFDbkMsSUFBSUMsU0FBUyxHQUFHO01BQ2RDLE9BQU8sRUFBRSw4Q0FBOEM7TUFDdkRDLEtBQUssRUFBRSxXQUFXO01BQ2xCQyxNQUFNLEVBQUU7UUFDTkMsV0FBVyxFQUFFO01BQ2Y7SUFDRixDQUFDO0lBQ0QsSUFBSUMsTUFBTSxHQUFHLHlCQUF5QjtJQUN0QyxJQUFJQyxNQUFNLEdBQUcsZUFBZTtJQUM1QlIsS0FBSyxDQUFDUyxTQUFTLENBQUNaLEtBQUssR0FBRztNQUN0QmEsT0FBTyxFQUFFLENBQ1AsUUFBUSxFQUNSO1FBQ0VQLE9BQU8sRUFBRSw0REFBNEQ7UUFDckVRLFVBQVUsRUFBRTtNQUNkLENBQUMsQ0FDRjtNQUNEQyxLQUFLLEVBQUU7UUFDTFQsT0FBTyxFQUFFLE9BQU87UUFDaEJDLEtBQUssRUFBRTtNQUNULENBQUM7TUFDRFMsT0FBTyxFQUFFLENBQ1A7UUFDRTtRQUNBVixPQUFPLEVBQ0wsMEZBQTBGO1FBQzVGUSxVQUFVLEVBQUUsSUFBSTtRQUNoQk4sTUFBTSxFQUFFO1VBQ05TLE9BQU8sRUFBRSx1QkFBdUI7VUFDaENQLE1BQU0sRUFBRUEsTUFBTTtVQUNkTCxTQUFTLEVBQUVBLFNBQVM7VUFDcEJELFFBQVEsRUFBRUEsUUFBUTtVQUNsQk8sTUFBTSxFQUFFQSxNQUFNO1VBQ2RGLFdBQVcsRUFBRTtRQUNmO01BQ0YsQ0FBQyxFQUNEO1FBQ0U7UUFDQUgsT0FBTyxFQUNMLGtPQUFrTztRQUNwT1EsVUFBVSxFQUFFLElBQUk7UUFDaEJOLE1BQU0sRUFBRTtVQUNOUyxPQUFPLEVBQ0wsMkRBQTJEO1VBQzdEUCxNQUFNLEVBQUVBLE1BQU07VUFDZEwsU0FBUyxFQUFFQSxTQUFTO1VBQ3BCRCxRQUFRLEVBQUVBLFFBQVE7VUFDbEJPLE1BQU0sRUFBRUEsTUFBTTtVQUNkTyxRQUFRLEVBQUU7UUFDWjtNQUNGLENBQUMsRUFDRDtRQUNFO1FBQ0FaLE9BQU8sRUFBRSw2QkFBNkI7UUFDdENRLFVBQVUsRUFBRSxJQUFJO1FBQ2hCTixNQUFNLEVBQUU7VUFDTlMsT0FBTyxFQUFFO1FBQ1g7TUFDRixDQUFDLEVBQ0Q7UUFDRTtRQUNBWCxPQUFPLEVBQ0wsdUdBQXVHO1FBQ3pHUSxVQUFVLEVBQUUsSUFBSTtRQUNoQk4sTUFBTSxFQUFFO1VBQ05TLE9BQU8sRUFBRSxTQUFTO1VBQ2xCUCxNQUFNLEVBQUVBLE1BQU07VUFDZEwsU0FBUyxFQUFFQSxTQUFTO1VBQ3BCRCxRQUFRLEVBQUUsQ0FBQ0EsUUFBUSxFQUFFLGlDQUFpQyxDQUFDO1VBQ3ZETyxNQUFNLEVBQUVBLE1BQU07VUFDZE8sUUFBUSxFQUFFLGlDQUFpQztVQUMzQ1QsV0FBVyxFQUFFO1FBQ2Y7TUFDRixDQUFDLEVBQ0Q7UUFDRTtRQUNBSCxPQUFPLEVBQ0wsc0ZBQXNGO1FBQ3hGUSxVQUFVLEVBQUUsSUFBSTtRQUNoQk4sTUFBTSxFQUFFO1VBQ05TLE9BQU8sRUFBRSxRQUFRO1VBQ2pCUCxNQUFNLEVBQUVBLE1BQU07VUFDZEwsU0FBUyxFQUFFQSxTQUFTO1VBQ3BCVSxLQUFLLEVBQUU7WUFDTFQsT0FBTyxFQUFFLGFBQWE7WUFDdEJRLFVBQVUsRUFBRSxJQUFJO1lBQ2hCUCxLQUFLLEVBQUU7VUFDVCxDQUFDO1VBQ0RILFFBQVEsRUFBRUEsUUFBUTtVQUNsQk8sTUFBTSxFQUFFQSxNQUFNO1VBQ2RPLFFBQVEsRUFBRTtRQUNaO01BQ0YsQ0FBQyxDQUNGO01BQ0RBLFFBQVEsRUFBRSxNQUFNO01BQ2hCVCxXQUFXLEVBQUU7SUFDZixDQUFDO0VBQ0gsQ0FBQyxFQUFFTixLQUFLLENBQUM7QUFDWCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXGJhdGNoLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJhdGNoXG5iYXRjaC5kaXNwbGF5TmFtZSA9ICdiYXRjaCdcbmJhdGNoLmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24gYmF0Y2goUHJpc20pIHtcbiAgOyhmdW5jdGlvbiAoUHJpc20pIHtcbiAgICB2YXIgdmFyaWFibGUgPSAvJSU/W346XFx3XSslP3whXFxTKyEvXG4gICAgdmFyIHBhcmFtZXRlciA9IHtcbiAgICAgIHBhdHRlcm46IC9cXC9bYS16P10rKD89WyA6XXwkKTo/fC1bYS16XVxcYnwtLVthLXotXStcXGIvaW0sXG4gICAgICBhbGlhczogJ2F0dHItbmFtZScsXG4gICAgICBpbnNpZGU6IHtcbiAgICAgICAgcHVuY3R1YXRpb246IC86L1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgc3RyaW5nID0gL1wiKD86W1xcXFxcIl1cInxbXlwiXSkqXCIoPyFcIikvXG4gICAgdmFyIG51bWJlciA9IC8oPzpcXGJ8LSlcXGQrXFxiL1xuICAgIFByaXNtLmxhbmd1YWdlcy5iYXRjaCA9IHtcbiAgICAgIGNvbW1lbnQ6IFtcbiAgICAgICAgL146Oi4qL20sXG4gICAgICAgIHtcbiAgICAgICAgICBwYXR0ZXJuOiAvKCg/Ol58WyYoXSlbIFxcdF0qKXJlbVxcYig/OlteXiYpXFxyXFxuXXxcXF4oPzpcXHJcXG58W1xcc1xcU10pKSovaW0sXG4gICAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgbGFiZWw6IHtcbiAgICAgICAgcGF0dGVybjogL146LiovbSxcbiAgICAgICAgYWxpYXM6ICdwcm9wZXJ0eSdcbiAgICAgIH0sXG4gICAgICBjb21tYW5kOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAvLyBGT1IgY29tbWFuZFxuICAgICAgICAgIHBhdHRlcm46XG4gICAgICAgICAgICAvKCg/Ol58WyYoXSlbIFxcdF0qKWZvcig/OiBcXC9bYS16P10oPzpbIDpdKD86XCJbXlwiXSpcInxbXlxcc1wiL11cXFMqKSk/KSogXFxTKyBpbiBcXChbXildK1xcKSBkby9pbSxcbiAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAgIGluc2lkZToge1xuICAgICAgICAgICAga2V5d29yZDogL1xcYig/OmRvfGluKVxcYnxeZm9yXFxiL2ksXG4gICAgICAgICAgICBzdHJpbmc6IHN0cmluZyxcbiAgICAgICAgICAgIHBhcmFtZXRlcjogcGFyYW1ldGVyLFxuICAgICAgICAgICAgdmFyaWFibGU6IHZhcmlhYmxlLFxuICAgICAgICAgICAgbnVtYmVyOiBudW1iZXIsXG4gICAgICAgICAgICBwdW5jdHVhdGlvbjogL1soKScsXS9cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAvLyBJRiBjb21tYW5kXG4gICAgICAgICAgcGF0dGVybjpcbiAgICAgICAgICAgIC8oKD86XnxbJihdKVsgXFx0XSopaWYoPzogXFwvW2Etej9dKD86WyA6XSg/OlwiW15cIl0qXCJ8W15cXHNcIi9dXFxTKikpPykqICg/Om5vdCApPyg/OmNtZGV4dHZlcnNpb24gXFxkK3xkZWZpbmVkIFxcdyt8ZXJyb3JsZXZlbCBcXGQrfGV4aXN0IFxcUyt8KD86XCJbXlwiXSpcInwoPyFcIikoPzooPyE9PSlcXFMpKyk/KD86PT18ICg/OmVxdXxnZXF8Z3RyfGxlcXxsc3N8bmVxKSApKD86XCJbXlwiXSpcInxbXlxcc1wiXVxcUyopKS9pbSxcbiAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAgIGluc2lkZToge1xuICAgICAgICAgICAga2V5d29yZDpcbiAgICAgICAgICAgICAgL1xcYig/OmNtZGV4dHZlcnNpb258ZGVmaW5lZHxlcnJvcmxldmVsfGV4aXN0fG5vdClcXGJ8XmlmXFxiL2ksXG4gICAgICAgICAgICBzdHJpbmc6IHN0cmluZyxcbiAgICAgICAgICAgIHBhcmFtZXRlcjogcGFyYW1ldGVyLFxuICAgICAgICAgICAgdmFyaWFibGU6IHZhcmlhYmxlLFxuICAgICAgICAgICAgbnVtYmVyOiBudW1iZXIsXG4gICAgICAgICAgICBvcGVyYXRvcjogL1xcXnw9PXxcXGIoPzplcXV8Z2VxfGd0cnxsZXF8bHNzfG5lcSlcXGIvaVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIC8vIEVMU0UgY29tbWFuZFxuICAgICAgICAgIHBhdHRlcm46IC8oKD86XnxbJigpXSlbIFxcdF0qKWVsc2VcXGIvaW0sXG4gICAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICAgIGtleXdvcmQ6IC9eZWxzZVxcYi9pXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgLy8gU0VUIGNvbW1hbmRcbiAgICAgICAgICBwYXR0ZXJuOlxuICAgICAgICAgICAgLygoPzpefFsmKF0pWyBcXHRdKilzZXQoPzogXFwvW2Etel0oPzpbIDpdKD86XCJbXlwiXSpcInxbXlxcc1wiL11cXFMqKSk/KSogKD86W15eJilcXHJcXG5dfFxcXig/OlxcclxcbnxbXFxzXFxTXSkpKi9pbSxcbiAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAgIGluc2lkZToge1xuICAgICAgICAgICAga2V5d29yZDogL15zZXRcXGIvaSxcbiAgICAgICAgICAgIHN0cmluZzogc3RyaW5nLFxuICAgICAgICAgICAgcGFyYW1ldGVyOiBwYXJhbWV0ZXIsXG4gICAgICAgICAgICB2YXJpYWJsZTogW3ZhcmlhYmxlLCAvXFx3Kyg/PSg/OlsqXFwvJStcXC0mXnxdfDw8fD4+KT89KS9dLFxuICAgICAgICAgICAgbnVtYmVyOiBudW1iZXIsXG4gICAgICAgICAgICBvcGVyYXRvcjogL1sqXFwvJStcXC0mXnxdPT98PDw9P3w+Pj0/fFshfl89XS8sXG4gICAgICAgICAgICBwdW5jdHVhdGlvbjogL1soKScsXS9cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAvLyBPdGhlciBjb21tYW5kc1xuICAgICAgICAgIHBhdHRlcm46XG4gICAgICAgICAgICAvKCg/Ol58WyYoXSlbIFxcdF0qQD8pXFx3K1xcYig/OlwiKD86W1xcXFxcIl1cInxbXlwiXSkqXCIoPyFcIil8W15cIl4mKVxcclxcbl18XFxeKD86XFxyXFxufFtcXHNcXFNdKSkqL20sXG4gICAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICAgIGtleXdvcmQ6IC9eXFx3K1xcYi8sXG4gICAgICAgICAgICBzdHJpbmc6IHN0cmluZyxcbiAgICAgICAgICAgIHBhcmFtZXRlcjogcGFyYW1ldGVyLFxuICAgICAgICAgICAgbGFiZWw6IHtcbiAgICAgICAgICAgICAgcGF0dGVybjogLyheXFxzKik6XFxTKy9tLFxuICAgICAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAgICAgICBhbGlhczogJ3Byb3BlcnR5J1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZhcmlhYmxlOiB2YXJpYWJsZSxcbiAgICAgICAgICAgIG51bWJlcjogbnVtYmVyLFxuICAgICAgICAgICAgb3BlcmF0b3I6IC9cXF4vXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgb3BlcmF0b3I6IC9bJkBdLyxcbiAgICAgIHB1bmN0dWF0aW9uOiAvWygpJ10vXG4gICAgfVxuICB9KShQcmlzbSlcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiYmF0Y2giLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsInZhcmlhYmxlIiwicGFyYW1ldGVyIiwicGF0dGVybiIsImFsaWFzIiwiaW5zaWRlIiwicHVuY3R1YXRpb24iLCJzdHJpbmciLCJudW1iZXIiLCJsYW5ndWFnZXMiLCJjb21tZW50IiwibG9va2JlaGluZCIsImxhYmVsIiwiY29tbWFuZCIsImtleXdvcmQiLCJvcGVyYXRvciJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/batch.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/bbcode.js":
/*!***********************************************!*\
  !*** ./node_modules/refractor/lang/bbcode.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = bbcode;\nbbcode.displayName = 'bbcode';\nbbcode.aliases = ['shortcode'];\nfunction bbcode(Prism) {\n  Prism.languages.bbcode = {\n    tag: {\n      pattern: /\\[\\/?[^\\s=\\]]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\"\\]=]+))?(?:\\s+[^\\s=\\]]+\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\"\\]=]+))*\\s*\\]/,\n      inside: {\n        tag: {\n          pattern: /^\\[\\/?[^\\s=\\]]+/,\n          inside: {\n            punctuation: /^\\[\\/?/\n          }\n        },\n        'attr-value': {\n          pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\"\\]=]+)/,\n          inside: {\n            punctuation: [/^=/, {\n              pattern: /^(\\s*)[\"']|[\"']$/,\n              lookbehind: true\n            }]\n          }\n        },\n        punctuation: /\\]/,\n        'attr-name': /[^\\s=\\]]+/\n      }\n    }\n  };\n  Prism.languages.shortcode = Prism.languages.bbcode;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvYmJjb2RlLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsTUFBTTtBQUN2QkEsTUFBTSxDQUFDQyxXQUFXLEdBQUcsUUFBUTtBQUM3QkQsTUFBTSxDQUFDRSxPQUFPLEdBQUcsQ0FBQyxXQUFXLENBQUM7QUFDOUIsU0FBU0YsTUFBTUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ3JCQSxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osTUFBTSxHQUFHO0lBQ3ZCSyxHQUFHLEVBQUU7TUFDSEMsT0FBTyxFQUNMLHVIQUF1SDtNQUN6SEMsTUFBTSxFQUFFO1FBQ05GLEdBQUcsRUFBRTtVQUNIQyxPQUFPLEVBQUUsaUJBQWlCO1VBQzFCQyxNQUFNLEVBQUU7WUFDTkMsV0FBVyxFQUFFO1VBQ2Y7UUFDRixDQUFDO1FBQ0QsWUFBWSxFQUFFO1VBQ1pGLE9BQU8sRUFBRSxxQ0FBcUM7VUFDOUNDLE1BQU0sRUFBRTtZQUNOQyxXQUFXLEVBQUUsQ0FDWCxJQUFJLEVBQ0o7Y0FDRUYsT0FBTyxFQUFFLGtCQUFrQjtjQUMzQkcsVUFBVSxFQUFFO1lBQ2QsQ0FBQztVQUVMO1FBQ0YsQ0FBQztRQUNERCxXQUFXLEVBQUUsSUFBSTtRQUNqQixXQUFXLEVBQUU7TUFDZjtJQUNGO0VBQ0YsQ0FBQztFQUNETCxLQUFLLENBQUNDLFNBQVMsQ0FBQ00sU0FBUyxHQUFHUCxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osTUFBTTtBQUNwRCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXGJiY29kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBiYmNvZGVcbmJiY29kZS5kaXNwbGF5TmFtZSA9ICdiYmNvZGUnXG5iYmNvZGUuYWxpYXNlcyA9IFsnc2hvcnRjb2RlJ11cbmZ1bmN0aW9uIGJiY29kZShQcmlzbSkge1xuICBQcmlzbS5sYW5ndWFnZXMuYmJjb2RlID0ge1xuICAgIHRhZzoge1xuICAgICAgcGF0dGVybjpcbiAgICAgICAgL1xcW1xcLz9bXlxccz1cXF1dKyg/Olxccyo9XFxzKig/OlwiW15cIl0qXCJ8J1teJ10qJ3xbXlxccydcIlxcXT1dKykpPyg/OlxccytbXlxccz1cXF1dK1xccyo9XFxzKig/OlwiW15cIl0qXCJ8J1teJ10qJ3xbXlxccydcIlxcXT1dKykpKlxccypcXF0vLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgIHRhZzoge1xuICAgICAgICAgIHBhdHRlcm46IC9eXFxbXFwvP1teXFxzPVxcXV0rLyxcbiAgICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICAgIHB1bmN0dWF0aW9uOiAvXlxcW1xcLz8vXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAnYXR0ci12YWx1ZSc6IHtcbiAgICAgICAgICBwYXR0ZXJuOiAvPVxccyooPzpcIlteXCJdKlwifCdbXiddKid8W15cXHMnXCJcXF09XSspLyxcbiAgICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICAgIHB1bmN0dWF0aW9uOiBbXG4gICAgICAgICAgICAgIC9ePS8sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBwYXR0ZXJuOiAvXihcXHMqKVtcIiddfFtcIiddJC8sXG4gICAgICAgICAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBwdW5jdHVhdGlvbjogL1xcXS8sXG4gICAgICAgICdhdHRyLW5hbWUnOiAvW15cXHM9XFxdXSsvXG4gICAgICB9XG4gICAgfVxuICB9XG4gIFByaXNtLmxhbmd1YWdlcy5zaG9ydGNvZGUgPSBQcmlzbS5sYW5ndWFnZXMuYmJjb2RlXG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImJiY29kZSIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwidGFnIiwicGF0dGVybiIsImluc2lkZSIsInB1bmN0dWF0aW9uIiwibG9va2JlaGluZCIsInNob3J0Y29kZSJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/bbcode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/bicep.js":
/*!**********************************************!*\
  !*** ./node_modules/refractor/lang/bicep.js ***!
  \**********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = bicep;\nbicep.displayName = 'bicep';\nbicep.aliases = [];\nfunction bicep(Prism) {\n  // based loosely upon: https://github.com/Azure/bicep/blob/main/src/textmate/bicep.tmlanguage\n  Prism.languages.bicep = {\n    comment: [{\n      // multiline comments eg /* ASDF */\n      pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n      lookbehind: true,\n      greedy: true\n    }, {\n      // singleline comments eg // ASDF\n      pattern: /(^|[^\\\\:])\\/\\/.*/,\n      lookbehind: true,\n      greedy: true\n    }],\n    property: [{\n      pattern: /([\\r\\n][ \\t]*)[a-z_]\\w*(?=[ \\t]*:)/i,\n      lookbehind: true\n    }, {\n      pattern: /([\\r\\n][ \\t]*)'(?:\\\\.|\\$(?!\\{)|[^'\\\\\\r\\n$])*'(?=[ \\t]*:)/,\n      lookbehind: true,\n      greedy: true\n    }],\n    string: [{\n      pattern: /'''[^'][\\s\\S]*?'''/,\n      greedy: true\n    }, {\n      pattern: /(^|[^\\\\'])'(?:\\\\.|\\$(?!\\{)|[^'\\\\\\r\\n$])*'/,\n      lookbehind: true,\n      greedy: true\n    }],\n    'interpolated-string': {\n      pattern: /(^|[^\\\\'])'(?:\\\\.|\\$(?:(?!\\{)|\\{[^{}\\r\\n]*\\})|[^'\\\\\\r\\n$])*'/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /\\$\\{[^{}\\r\\n]*\\}/,\n          inside: {\n            expression: {\n              pattern: /(^\\$\\{)[\\s\\S]+(?=\\}$)/,\n              lookbehind: true\n            },\n            punctuation: /^\\$\\{|\\}$/\n          }\n        },\n        string: /[\\s\\S]+/\n      }\n    },\n    datatype: {\n      pattern: /(\\b(?:output|param)\\b[ \\t]+\\w+[ \\t]+)\\w+\\b/,\n      lookbehind: true,\n      alias: 'class-name'\n    },\n    \"boolean\": /\\b(?:false|true)\\b/,\n    // https://github.com/Azure/bicep/blob/114a3251b4e6e30082a58729f19a8cc4e374ffa6/src/textmate/bicep.tmlanguage#L184\n    keyword: /\\b(?:existing|for|if|in|module|null|output|param|resource|targetScope|var)\\b/,\n    decorator: /@\\w+\\b/,\n    \"function\": /\\b[a-z_]\\w*(?=[ \\t]*\\()/i,\n    number: /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:E[+-]?\\d+)?/i,\n    operator: /--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/,\n    punctuation: /[{}[\\];(),.:]/\n  };\n  Prism.languages.bicep['interpolated-string'].inside['interpolation'].inside['expression'].inside = Prism.languages.bicep;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvYmljZXAuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxLQUFLO0FBQ3RCQSxLQUFLLENBQUNDLFdBQVcsR0FBRyxPQUFPO0FBQzNCRCxLQUFLLENBQUNFLE9BQU8sR0FBRyxFQUFFO0FBQ2xCLFNBQVNGLEtBQUtBLENBQUNHLEtBQUssRUFBRTtFQUNwQjtFQUNBQSxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osS0FBSyxHQUFHO0lBQ3RCSyxPQUFPLEVBQUUsQ0FDUDtNQUNFO01BQ0FDLE9BQU8sRUFBRSxpQ0FBaUM7TUFDMUNDLFVBQVUsRUFBRSxJQUFJO01BQ2hCQyxNQUFNLEVBQUU7SUFDVixDQUFDLEVBQ0Q7TUFDRTtNQUNBRixPQUFPLEVBQUUsa0JBQWtCO01BQzNCQyxVQUFVLEVBQUUsSUFBSTtNQUNoQkMsTUFBTSxFQUFFO0lBQ1YsQ0FBQyxDQUNGO0lBQ0RDLFFBQVEsRUFBRSxDQUNSO01BQ0VILE9BQU8sRUFBRSxxQ0FBcUM7TUFDOUNDLFVBQVUsRUFBRTtJQUNkLENBQUMsRUFDRDtNQUNFRCxPQUFPLEVBQUUsMERBQTBEO01BQ25FQyxVQUFVLEVBQUUsSUFBSTtNQUNoQkMsTUFBTSxFQUFFO0lBQ1YsQ0FBQyxDQUNGO0lBQ0RFLE1BQU0sRUFBRSxDQUNOO01BQ0VKLE9BQU8sRUFBRSxvQkFBb0I7TUFDN0JFLE1BQU0sRUFBRTtJQUNWLENBQUMsRUFDRDtNQUNFRixPQUFPLEVBQUUsMkNBQTJDO01BQ3BEQyxVQUFVLEVBQUUsSUFBSTtNQUNoQkMsTUFBTSxFQUFFO0lBQ1YsQ0FBQyxDQUNGO0lBQ0QscUJBQXFCLEVBQUU7TUFDckJGLE9BQU8sRUFBRSw4REFBOEQ7TUFDdkVDLFVBQVUsRUFBRSxJQUFJO01BQ2hCQyxNQUFNLEVBQUUsSUFBSTtNQUNaRyxNQUFNLEVBQUU7UUFDTkMsYUFBYSxFQUFFO1VBQ2JOLE9BQU8sRUFBRSxrQkFBa0I7VUFDM0JLLE1BQU0sRUFBRTtZQUNORSxVQUFVLEVBQUU7Y0FDVlAsT0FBTyxFQUFFLHVCQUF1QjtjQUNoQ0MsVUFBVSxFQUFFO1lBQ2QsQ0FBQztZQUNETyxXQUFXLEVBQUU7VUFDZjtRQUNGLENBQUM7UUFDREosTUFBTSxFQUFFO01BQ1Y7SUFDRixDQUFDO0lBQ0RLLFFBQVEsRUFBRTtNQUNSVCxPQUFPLEVBQUUsNENBQTRDO01BQ3JEQyxVQUFVLEVBQUUsSUFBSTtNQUNoQlMsS0FBSyxFQUFFO0lBQ1QsQ0FBQztJQUNELFdBQVMsb0JBQW9CO0lBQzdCO0lBQ0FDLE9BQU8sRUFDTCw4RUFBOEU7SUFDaEZDLFNBQVMsRUFBRSxRQUFRO0lBQ25CLFlBQVUsMEJBQTBCO0lBQ3BDQyxNQUFNLEVBQUUsNENBQTRDO0lBQ3BEQyxRQUFRLEVBQ04sMkZBQTJGO0lBQzdGTixXQUFXLEVBQUU7RUFDZixDQUFDO0VBQ0RYLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixLQUFLLENBQUMscUJBQXFCLENBQUMsQ0FBQ1csTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDQSxNQUFNLENBQ3pFLFlBQVksQ0FDYixDQUFDQSxNQUFNLEdBQUdSLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixLQUFLO0FBQ2xDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcYmljZXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gYmljZXBcbmJpY2VwLmRpc3BsYXlOYW1lID0gJ2JpY2VwJ1xuYmljZXAuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBiaWNlcChQcmlzbSkge1xuICAvLyBiYXNlZCBsb29zZWx5IHVwb246IGh0dHBzOi8vZ2l0aHViLmNvbS9BenVyZS9iaWNlcC9ibG9iL21haW4vc3JjL3RleHRtYXRlL2JpY2VwLnRtbGFuZ3VhZ2VcbiAgUHJpc20ubGFuZ3VhZ2VzLmJpY2VwID0ge1xuICAgIGNvbW1lbnQ6IFtcbiAgICAgIHtcbiAgICAgICAgLy8gbXVsdGlsaW5lIGNvbW1lbnRzIGVnIC8qIEFTREYgKi9cbiAgICAgICAgcGF0dGVybjogLyhefFteXFxcXF0pXFwvXFwqW1xcc1xcU10qPyg/OlxcKlxcL3wkKS8sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGdyZWVkeTogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgLy8gc2luZ2xlbGluZSBjb21tZW50cyBlZyAvLyBBU0RGXG4gICAgICAgIHBhdHRlcm46IC8oXnxbXlxcXFw6XSlcXC9cXC8uKi8sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGdyZWVkeTogdHJ1ZVxuICAgICAgfVxuICAgIF0sXG4gICAgcHJvcGVydHk6IFtcbiAgICAgIHtcbiAgICAgICAgcGF0dGVybjogLyhbXFxyXFxuXVsgXFx0XSopW2Etel9dXFx3Kig/PVsgXFx0XSo6KS9pLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBwYXR0ZXJuOiAvKFtcXHJcXG5dWyBcXHRdKiknKD86XFxcXC58XFwkKD8hXFx7KXxbXidcXFxcXFxyXFxuJF0pKicoPz1bIFxcdF0qOikvLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICBncmVlZHk6IHRydWVcbiAgICAgIH1cbiAgICBdLFxuICAgIHN0cmluZzogW1xuICAgICAge1xuICAgICAgICBwYXR0ZXJuOiAvJycnW14nXVtcXHNcXFNdKj8nJycvLFxuICAgICAgICBncmVlZHk6IHRydWVcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHBhdHRlcm46IC8oXnxbXlxcXFwnXSknKD86XFxcXC58XFwkKD8hXFx7KXxbXidcXFxcXFxyXFxuJF0pKicvLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICBncmVlZHk6IHRydWVcbiAgICAgIH1cbiAgICBdLFxuICAgICdpbnRlcnBvbGF0ZWQtc3RyaW5nJzoge1xuICAgICAgcGF0dGVybjogLyhefFteXFxcXCddKScoPzpcXFxcLnxcXCQoPzooPyFcXHspfFxce1tee31cXHJcXG5dKlxcfSl8W14nXFxcXFxcclxcbiRdKSonLyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBncmVlZHk6IHRydWUsXG4gICAgICBpbnNpZGU6IHtcbiAgICAgICAgaW50ZXJwb2xhdGlvbjoge1xuICAgICAgICAgIHBhdHRlcm46IC9cXCRcXHtbXnt9XFxyXFxuXSpcXH0vLFxuICAgICAgICAgIGluc2lkZToge1xuICAgICAgICAgICAgZXhwcmVzc2lvbjoge1xuICAgICAgICAgICAgICBwYXR0ZXJuOiAvKF5cXCRcXHspW1xcc1xcU10rKD89XFx9JCkvLFxuICAgICAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHVuY3R1YXRpb246IC9eXFwkXFx7fFxcfSQvXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzdHJpbmc6IC9bXFxzXFxTXSsvXG4gICAgICB9XG4gICAgfSxcbiAgICBkYXRhdHlwZToge1xuICAgICAgcGF0dGVybjogLyhcXGIoPzpvdXRwdXR8cGFyYW0pXFxiWyBcXHRdK1xcdytbIFxcdF0rKVxcdytcXGIvLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGFsaWFzOiAnY2xhc3MtbmFtZSdcbiAgICB9LFxuICAgIGJvb2xlYW46IC9cXGIoPzpmYWxzZXx0cnVlKVxcYi8sXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL0F6dXJlL2JpY2VwL2Jsb2IvMTE0YTMyNTFiNGU2ZTMwMDgyYTU4NzI5ZjE5YThjYzRlMzc0ZmZhNi9zcmMvdGV4dG1hdGUvYmljZXAudG1sYW5ndWFnZSNMMTg0XG4gICAga2V5d29yZDpcbiAgICAgIC9cXGIoPzpleGlzdGluZ3xmb3J8aWZ8aW58bW9kdWxlfG51bGx8b3V0cHV0fHBhcmFtfHJlc291cmNlfHRhcmdldFNjb3BlfHZhcilcXGIvLFxuICAgIGRlY29yYXRvcjogL0BcXHcrXFxiLyxcbiAgICBmdW5jdGlvbjogL1xcYlthLXpfXVxcdyooPz1bIFxcdF0qXFwoKS9pLFxuICAgIG51bWJlcjogLyg/OlxcYlxcZCsoPzpcXC5cXGQqKT98XFxCXFwuXFxkKykoPzpFWystXT9cXGQrKT8vaSxcbiAgICBvcGVyYXRvcjpcbiAgICAgIC8tLXxcXCtcXCt8XFwqXFwqPT98PT58JiY9P3xcXHxcXHw9P3xbIT1dPT18PDw9P3w+Pj4/PT98Wy0rKi8lJnxeIT08Pl09P3xcXC57M318XFw/XFw/PT98XFw/XFwuP3xbfjpdLyxcbiAgICBwdW5jdHVhdGlvbjogL1t7fVtcXF07KCksLjpdL1xuICB9XG4gIFByaXNtLmxhbmd1YWdlcy5iaWNlcFsnaW50ZXJwb2xhdGVkLXN0cmluZyddLmluc2lkZVsnaW50ZXJwb2xhdGlvbiddLmluc2lkZVtcbiAgICAnZXhwcmVzc2lvbidcbiAgXS5pbnNpZGUgPSBQcmlzbS5sYW5ndWFnZXMuYmljZXBcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiYmljZXAiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImxhbmd1YWdlcyIsImNvbW1lbnQiLCJwYXR0ZXJuIiwibG9va2JlaGluZCIsImdyZWVkeSIsInByb3BlcnR5Iiwic3RyaW5nIiwiaW5zaWRlIiwiaW50ZXJwb2xhdGlvbiIsImV4cHJlc3Npb24iLCJwdW5jdHVhdGlvbiIsImRhdGF0eXBlIiwiYWxpYXMiLCJrZXl3b3JkIiwiZGVjb3JhdG9yIiwibnVtYmVyIiwib3BlcmF0b3IiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/bicep.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/birb.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/birb.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = birb;\nbirb.displayName = 'birb';\nbirb.aliases = [];\nfunction birb(Prism) {\n  Prism.languages.birb = Prism.languages.extend('clike', {\n    string: {\n      pattern: /r?(\"|')(?:\\\\.|(?!\\1)[^\\\\])*\\1/,\n      greedy: true\n    },\n    'class-name': [/\\b[A-Z](?:[\\d_]*[a-zA-Z]\\w*)?\\b/,\n    // matches variable and function return types (parameters as well).\n    /\\b(?:[A-Z]\\w*|(?!(?:var|void)\\b)[a-z]\\w*)(?=\\s+\\w+\\s*[;,=()])/],\n    keyword: /\\b(?:assert|break|case|class|const|default|else|enum|final|follows|for|grab|if|nest|new|next|noSeeb|return|static|switch|throw|var|void|while)\\b/,\n    operator: /\\+\\+|--|&&|\\|\\||<<=?|>>=?|~(?:\\/=?)?|[+\\-*\\/%&^|=!<>]=?|\\?|:/,\n    variable: /\\b[a-z_]\\w*\\b/\n  });\n  Prism.languages.insertBefore('birb', 'function', {\n    metadata: {\n      pattern: /<\\w+>/,\n      greedy: true,\n      alias: 'symbol'\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvYmlyYi5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLElBQUk7QUFDckJBLElBQUksQ0FBQ0MsV0FBVyxHQUFHLE1BQU07QUFDekJELElBQUksQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDakIsU0FBU0YsSUFBSUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ25CQSxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osSUFBSSxHQUFHRyxLQUFLLENBQUNDLFNBQVMsQ0FBQ0MsTUFBTSxDQUFDLE9BQU8sRUFBRTtJQUNyREMsTUFBTSxFQUFFO01BQ05DLE9BQU8sRUFBRSwrQkFBK0I7TUFDeENDLE1BQU0sRUFBRTtJQUNWLENBQUM7SUFDRCxZQUFZLEVBQUUsQ0FDWixpQ0FBaUM7SUFBRTtJQUNuQywrREFBK0QsQ0FDaEU7SUFDREMsT0FBTyxFQUNMLGtKQUFrSjtJQUNwSkMsUUFBUSxFQUFFLDhEQUE4RDtJQUN4RUMsUUFBUSxFQUFFO0VBQ1osQ0FBQyxDQUFDO0VBQ0ZSLEtBQUssQ0FBQ0MsU0FBUyxDQUFDUSxZQUFZLENBQUMsTUFBTSxFQUFFLFVBQVUsRUFBRTtJQUMvQ0MsUUFBUSxFQUFFO01BQ1JOLE9BQU8sRUFBRSxPQUFPO01BQ2hCQyxNQUFNLEVBQUUsSUFBSTtNQUNaTSxLQUFLLEVBQUU7SUFDVDtFQUNGLENBQUMsQ0FBQztBQUNKIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcYmlyYi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBiaXJiXG5iaXJiLmRpc3BsYXlOYW1lID0gJ2JpcmInXG5iaXJiLmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24gYmlyYihQcmlzbSkge1xuICBQcmlzbS5sYW5ndWFnZXMuYmlyYiA9IFByaXNtLmxhbmd1YWdlcy5leHRlbmQoJ2NsaWtlJywge1xuICAgIHN0cmluZzoge1xuICAgICAgcGF0dGVybjogL3I/KFwifCcpKD86XFxcXC58KD8hXFwxKVteXFxcXF0pKlxcMS8sXG4gICAgICBncmVlZHk6IHRydWVcbiAgICB9LFxuICAgICdjbGFzcy1uYW1lJzogW1xuICAgICAgL1xcYltBLVpdKD86W1xcZF9dKlthLXpBLVpdXFx3Kik/XFxiLywgLy8gbWF0Y2hlcyB2YXJpYWJsZSBhbmQgZnVuY3Rpb24gcmV0dXJuIHR5cGVzIChwYXJhbWV0ZXJzIGFzIHdlbGwpLlxuICAgICAgL1xcYig/OltBLVpdXFx3KnwoPyEoPzp2YXJ8dm9pZClcXGIpW2Etel1cXHcqKSg/PVxccytcXHcrXFxzKls7LD0oKV0pL1xuICAgIF0sXG4gICAga2V5d29yZDpcbiAgICAgIC9cXGIoPzphc3NlcnR8YnJlYWt8Y2FzZXxjbGFzc3xjb25zdHxkZWZhdWx0fGVsc2V8ZW51bXxmaW5hbHxmb2xsb3dzfGZvcnxncmFifGlmfG5lc3R8bmV3fG5leHR8bm9TZWVifHJldHVybnxzdGF0aWN8c3dpdGNofHRocm93fHZhcnx2b2lkfHdoaWxlKVxcYi8sXG4gICAgb3BlcmF0b3I6IC9cXCtcXCt8LS18JiZ8XFx8XFx8fDw8PT98Pj49P3x+KD86XFwvPT8pP3xbK1xcLSpcXC8lJl58PSE8Pl09P3xcXD98Oi8sXG4gICAgdmFyaWFibGU6IC9cXGJbYS16X11cXHcqXFxiL1xuICB9KVxuICBQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdiaXJiJywgJ2Z1bmN0aW9uJywge1xuICAgIG1ldGFkYXRhOiB7XG4gICAgICBwYXR0ZXJuOiAvPFxcdys+LyxcbiAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgIGFsaWFzOiAnc3ltYm9sJ1xuICAgIH1cbiAgfSlcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiYmlyYiIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwiZXh0ZW5kIiwic3RyaW5nIiwicGF0dGVybiIsImdyZWVkeSIsImtleXdvcmQiLCJvcGVyYXRvciIsInZhcmlhYmxlIiwiaW5zZXJ0QmVmb3JlIiwibWV0YWRhdGEiLCJhbGlhcyJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/birb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/bison.js":
/*!**********************************************!*\
  !*** ./node_modules/refractor/lang/bison.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar refractorC = __webpack_require__(/*! ./c.js */ \"(ssr)/./node_modules/refractor/lang/c.js\");\nmodule.exports = bison;\nbison.displayName = 'bison';\nbison.aliases = [];\nfunction bison(Prism) {\n  Prism.register(refractorC);\n  Prism.languages.bison = Prism.languages.extend('c', {});\n  Prism.languages.insertBefore('bison', 'comment', {\n    bison: {\n      // This should match all the beginning of the file\n      // including the prologue(s), the bison declarations and\n      // the grammar rules.\n      pattern: /^(?:[^%]|%(?!%))*%%[\\s\\S]*?%%/,\n      inside: {\n        c: {\n          // Allow for one level of nested braces\n          pattern: /%\\{[\\s\\S]*?%\\}|\\{(?:\\{[^}]*\\}|[^{}])*\\}/,\n          inside: {\n            delimiter: {\n              pattern: /^%?\\{|%?\\}$/,\n              alias: 'punctuation'\n            },\n            'bison-variable': {\n              pattern: /[$@](?:<[^\\s>]+>)?[\\w$]+/,\n              alias: 'variable',\n              inside: {\n                punctuation: /<|>/\n              }\n            },\n            rest: Prism.languages.c\n          }\n        },\n        comment: Prism.languages.c.comment,\n        string: Prism.languages.c.string,\n        property: /\\S+(?=:)/,\n        keyword: /%\\w+/,\n        number: {\n          pattern: /(^|[^@])\\b(?:0x[\\da-f]+|\\d+)/i,\n          lookbehind: true\n        },\n        punctuation: /%[%?]|[|:;\\[\\]<>]/\n      }\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvYmlzb24uanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBQ1osSUFBSUEsVUFBVSxHQUFHQyxtQkFBTyxDQUFDLHdEQUFRLENBQUM7QUFDbENDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxLQUFLO0FBQ3RCQSxLQUFLLENBQUNDLFdBQVcsR0FBRyxPQUFPO0FBQzNCRCxLQUFLLENBQUNFLE9BQU8sR0FBRyxFQUFFO0FBQ2xCLFNBQVNGLEtBQUtBLENBQUNHLEtBQUssRUFBRTtFQUNwQkEsS0FBSyxDQUFDQyxRQUFRLENBQUNSLFVBQVUsQ0FBQztFQUMxQk8sS0FBSyxDQUFDRSxTQUFTLENBQUNMLEtBQUssR0FBR0csS0FBSyxDQUFDRSxTQUFTLENBQUNDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7RUFDdkRILEtBQUssQ0FBQ0UsU0FBUyxDQUFDRSxZQUFZLENBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRTtJQUMvQ1AsS0FBSyxFQUFFO01BQ0w7TUFDQTtNQUNBO01BQ0FRLE9BQU8sRUFBRSwrQkFBK0I7TUFDeENDLE1BQU0sRUFBRTtRQUNOQyxDQUFDLEVBQUU7VUFDRDtVQUNBRixPQUFPLEVBQUUseUNBQXlDO1VBQ2xEQyxNQUFNLEVBQUU7WUFDTkUsU0FBUyxFQUFFO2NBQ1RILE9BQU8sRUFBRSxhQUFhO2NBQ3RCSSxLQUFLLEVBQUU7WUFDVCxDQUFDO1lBQ0QsZ0JBQWdCLEVBQUU7Y0FDaEJKLE9BQU8sRUFBRSwwQkFBMEI7Y0FDbkNJLEtBQUssRUFBRSxVQUFVO2NBQ2pCSCxNQUFNLEVBQUU7Z0JBQ05JLFdBQVcsRUFBRTtjQUNmO1lBQ0YsQ0FBQztZQUNEQyxJQUFJLEVBQUVYLEtBQUssQ0FBQ0UsU0FBUyxDQUFDSztVQUN4QjtRQUNGLENBQUM7UUFDREssT0FBTyxFQUFFWixLQUFLLENBQUNFLFNBQVMsQ0FBQ0ssQ0FBQyxDQUFDSyxPQUFPO1FBQ2xDQyxNQUFNLEVBQUViLEtBQUssQ0FBQ0UsU0FBUyxDQUFDSyxDQUFDLENBQUNNLE1BQU07UUFDaENDLFFBQVEsRUFBRSxVQUFVO1FBQ3BCQyxPQUFPLEVBQUUsTUFBTTtRQUNmQyxNQUFNLEVBQUU7VUFDTlgsT0FBTyxFQUFFLCtCQUErQjtVQUN4Q1ksVUFBVSxFQUFFO1FBQ2QsQ0FBQztRQUNEUCxXQUFXLEVBQUU7TUFDZjtJQUNGO0VBQ0YsQ0FBQyxDQUFDO0FBQ0oiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxiaXNvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcbnZhciByZWZyYWN0b3JDID0gcmVxdWlyZSgnLi9jLmpzJylcbm1vZHVsZS5leHBvcnRzID0gYmlzb25cbmJpc29uLmRpc3BsYXlOYW1lID0gJ2Jpc29uJ1xuYmlzb24uYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBiaXNvbihQcmlzbSkge1xuICBQcmlzbS5yZWdpc3RlcihyZWZyYWN0b3JDKVxuICBQcmlzbS5sYW5ndWFnZXMuYmlzb24gPSBQcmlzbS5sYW5ndWFnZXMuZXh0ZW5kKCdjJywge30pXG4gIFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ2Jpc29uJywgJ2NvbW1lbnQnLCB7XG4gICAgYmlzb246IHtcbiAgICAgIC8vIFRoaXMgc2hvdWxkIG1hdGNoIGFsbCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBmaWxlXG4gICAgICAvLyBpbmNsdWRpbmcgdGhlIHByb2xvZ3VlKHMpLCB0aGUgYmlzb24gZGVjbGFyYXRpb25zIGFuZFxuICAgICAgLy8gdGhlIGdyYW1tYXIgcnVsZXMuXG4gICAgICBwYXR0ZXJuOiAvXig/OlteJV18JSg/ISUpKSolJVtcXHNcXFNdKj8lJS8sXG4gICAgICBpbnNpZGU6IHtcbiAgICAgICAgYzoge1xuICAgICAgICAgIC8vIEFsbG93IGZvciBvbmUgbGV2ZWwgb2YgbmVzdGVkIGJyYWNlc1xuICAgICAgICAgIHBhdHRlcm46IC8lXFx7W1xcc1xcU10qPyVcXH18XFx7KD86XFx7W159XSpcXH18W157fV0pKlxcfS8sXG4gICAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgICBkZWxpbWl0ZXI6IHtcbiAgICAgICAgICAgICAgcGF0dGVybjogL14lP1xce3wlP1xcfSQvLFxuICAgICAgICAgICAgICBhbGlhczogJ3B1bmN0dWF0aW9uJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdiaXNvbi12YXJpYWJsZSc6IHtcbiAgICAgICAgICAgICAgcGF0dGVybjogL1skQF0oPzo8W15cXHM+XSs+KT9bXFx3JF0rLyxcbiAgICAgICAgICAgICAgYWxpYXM6ICd2YXJpYWJsZScsXG4gICAgICAgICAgICAgIGluc2lkZToge1xuICAgICAgICAgICAgICAgIHB1bmN0dWF0aW9uOiAvPHw+L1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVzdDogUHJpc20ubGFuZ3VhZ2VzLmNcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNvbW1lbnQ6IFByaXNtLmxhbmd1YWdlcy5jLmNvbW1lbnQsXG4gICAgICAgIHN0cmluZzogUHJpc20ubGFuZ3VhZ2VzLmMuc3RyaW5nLFxuICAgICAgICBwcm9wZXJ0eTogL1xcUysoPz06KS8sXG4gICAgICAgIGtleXdvcmQ6IC8lXFx3Ky8sXG4gICAgICAgIG51bWJlcjoge1xuICAgICAgICAgIHBhdHRlcm46IC8oXnxbXkBdKVxcYig/OjB4W1xcZGEtZl0rfFxcZCspL2ksXG4gICAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBwdW5jdHVhdGlvbjogLyVbJT9dfFt8OjtcXFtcXF08Pl0vXG4gICAgICB9XG4gICAgfVxuICB9KVxufVxuIl0sIm5hbWVzIjpbInJlZnJhY3RvckMiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImJpc29uIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJyZWdpc3RlciIsImxhbmd1YWdlcyIsImV4dGVuZCIsImluc2VydEJlZm9yZSIsInBhdHRlcm4iLCJpbnNpZGUiLCJjIiwiZGVsaW1pdGVyIiwiYWxpYXMiLCJwdW5jdHVhdGlvbiIsInJlc3QiLCJjb21tZW50Iiwic3RyaW5nIiwicHJvcGVydHkiLCJrZXl3b3JkIiwibnVtYmVyIiwibG9va2JlaGluZCJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/bison.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/bnf.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/bnf.js ***!
  \********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = bnf;\nbnf.displayName = 'bnf';\nbnf.aliases = ['rbnf'];\nfunction bnf(Prism) {\n  Prism.languages.bnf = {\n    string: {\n      pattern: /\"[^\\r\\n\"]*\"|'[^\\r\\n']*'/\n    },\n    definition: {\n      pattern: /<[^<>\\r\\n\\t]+>(?=\\s*::=)/,\n      alias: ['rule', 'keyword'],\n      inside: {\n        punctuation: /^<|>$/\n      }\n    },\n    rule: {\n      pattern: /<[^<>\\r\\n\\t]+>/,\n      inside: {\n        punctuation: /^<|>$/\n      }\n    },\n    operator: /::=|[|()[\\]{}*+?]|\\.{3}/\n  };\n  Prism.languages.rbnf = Prism.languages.bnf;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvYm5mLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsR0FBRztBQUNwQkEsR0FBRyxDQUFDQyxXQUFXLEdBQUcsS0FBSztBQUN2QkQsR0FBRyxDQUFDRSxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUM7QUFDdEIsU0FBU0YsR0FBR0EsQ0FBQ0csS0FBSyxFQUFFO0VBQ2xCQSxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osR0FBRyxHQUFHO0lBQ3BCSyxNQUFNLEVBQUU7TUFDTkMsT0FBTyxFQUFFO0lBQ1gsQ0FBQztJQUNEQyxVQUFVLEVBQUU7TUFDVkQsT0FBTyxFQUFFLDBCQUEwQjtNQUNuQ0UsS0FBSyxFQUFFLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQztNQUMxQkMsTUFBTSxFQUFFO1FBQ05DLFdBQVcsRUFBRTtNQUNmO0lBQ0YsQ0FBQztJQUNEQyxJQUFJLEVBQUU7TUFDSkwsT0FBTyxFQUFFLGdCQUFnQjtNQUN6QkcsTUFBTSxFQUFFO1FBQ05DLFdBQVcsRUFBRTtNQUNmO0lBQ0YsQ0FBQztJQUNERSxRQUFRLEVBQUU7RUFDWixDQUFDO0VBQ0RULEtBQUssQ0FBQ0MsU0FBUyxDQUFDUyxJQUFJLEdBQUdWLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixHQUFHO0FBQzVDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcYm5mLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJuZlxuYm5mLmRpc3BsYXlOYW1lID0gJ2JuZidcbmJuZi5hbGlhc2VzID0gWydyYm5mJ11cbmZ1bmN0aW9uIGJuZihQcmlzbSkge1xuICBQcmlzbS5sYW5ndWFnZXMuYm5mID0ge1xuICAgIHN0cmluZzoge1xuICAgICAgcGF0dGVybjogL1wiW15cXHJcXG5cIl0qXCJ8J1teXFxyXFxuJ10qJy9cbiAgICB9LFxuICAgIGRlZmluaXRpb246IHtcbiAgICAgIHBhdHRlcm46IC88W148PlxcclxcblxcdF0rPig/PVxccyo6Oj0pLyxcbiAgICAgIGFsaWFzOiBbJ3J1bGUnLCAna2V5d29yZCddLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgIHB1bmN0dWF0aW9uOiAvXjx8PiQvXG4gICAgICB9XG4gICAgfSxcbiAgICBydWxlOiB7XG4gICAgICBwYXR0ZXJuOiAvPFtePD5cXHJcXG5cXHRdKz4vLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgIHB1bmN0dWF0aW9uOiAvXjx8PiQvXG4gICAgICB9XG4gICAgfSxcbiAgICBvcGVyYXRvcjogLzo6PXxbfCgpW1xcXXt9Kis/XXxcXC57M30vXG4gIH1cbiAgUHJpc20ubGFuZ3VhZ2VzLnJibmYgPSBQcmlzbS5sYW5ndWFnZXMuYm5mXG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImJuZiIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwic3RyaW5nIiwicGF0dGVybiIsImRlZmluaXRpb24iLCJhbGlhcyIsImluc2lkZSIsInB1bmN0dWF0aW9uIiwicnVsZSIsIm9wZXJhdG9yIiwicmJuZiJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/bnf.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/brainfuck.js":
/*!**************************************************!*\
  !*** ./node_modules/refractor/lang/brainfuck.js ***!
  \**************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = brainfuck;\nbrainfuck.displayName = 'brainfuck';\nbrainfuck.aliases = [];\nfunction brainfuck(Prism) {\n  Prism.languages.brainfuck = {\n    pointer: {\n      pattern: /<|>/,\n      alias: 'keyword'\n    },\n    increment: {\n      pattern: /\\+/,\n      alias: 'inserted'\n    },\n    decrement: {\n      pattern: /-/,\n      alias: 'deleted'\n    },\n    branching: {\n      pattern: /\\[|\\]/,\n      alias: 'important'\n    },\n    operator: /[.,]/,\n    comment: /\\S+/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvYnJhaW5mdWNrLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsU0FBUztBQUMxQkEsU0FBUyxDQUFDQyxXQUFXLEdBQUcsV0FBVztBQUNuQ0QsU0FBUyxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUN0QixTQUFTRixTQUFTQSxDQUFDRyxLQUFLLEVBQUU7RUFDeEJBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixTQUFTLEdBQUc7SUFDMUJLLE9BQU8sRUFBRTtNQUNQQyxPQUFPLEVBQUUsS0FBSztNQUNkQyxLQUFLLEVBQUU7SUFDVCxDQUFDO0lBQ0RDLFNBQVMsRUFBRTtNQUNURixPQUFPLEVBQUUsSUFBSTtNQUNiQyxLQUFLLEVBQUU7SUFDVCxDQUFDO0lBQ0RFLFNBQVMsRUFBRTtNQUNUSCxPQUFPLEVBQUUsR0FBRztNQUNaQyxLQUFLLEVBQUU7SUFDVCxDQUFDO0lBQ0RHLFNBQVMsRUFBRTtNQUNUSixPQUFPLEVBQUUsT0FBTztNQUNoQkMsS0FBSyxFQUFFO0lBQ1QsQ0FBQztJQUNESSxRQUFRLEVBQUUsTUFBTTtJQUNoQkMsT0FBTyxFQUFFO0VBQ1gsQ0FBQztBQUNIIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcYnJhaW5mdWNrLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJyYWluZnVja1xuYnJhaW5mdWNrLmRpc3BsYXlOYW1lID0gJ2JyYWluZnVjaydcbmJyYWluZnVjay5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIGJyYWluZnVjayhQcmlzbSkge1xuICBQcmlzbS5sYW5ndWFnZXMuYnJhaW5mdWNrID0ge1xuICAgIHBvaW50ZXI6IHtcbiAgICAgIHBhdHRlcm46IC88fD4vLFxuICAgICAgYWxpYXM6ICdrZXl3b3JkJ1xuICAgIH0sXG4gICAgaW5jcmVtZW50OiB7XG4gICAgICBwYXR0ZXJuOiAvXFwrLyxcbiAgICAgIGFsaWFzOiAnaW5zZXJ0ZWQnXG4gICAgfSxcbiAgICBkZWNyZW1lbnQ6IHtcbiAgICAgIHBhdHRlcm46IC8tLyxcbiAgICAgIGFsaWFzOiAnZGVsZXRlZCdcbiAgICB9LFxuICAgIGJyYW5jaGluZzoge1xuICAgICAgcGF0dGVybjogL1xcW3xcXF0vLFxuICAgICAgYWxpYXM6ICdpbXBvcnRhbnQnXG4gICAgfSxcbiAgICBvcGVyYXRvcjogL1suLF0vLFxuICAgIGNvbW1lbnQ6IC9cXFMrL1xuICB9XG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImJyYWluZnVjayIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwicG9pbnRlciIsInBhdHRlcm4iLCJhbGlhcyIsImluY3JlbWVudCIsImRlY3JlbWVudCIsImJyYW5jaGluZyIsIm9wZXJhdG9yIiwiY29tbWVudCJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/brainfuck.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/brightscript.js":
/*!*****************************************************!*\
  !*** ./node_modules/refractor/lang/brightscript.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = brightscript;\nbrightscript.displayName = 'brightscript';\nbrightscript.aliases = [];\nfunction brightscript(Prism) {\n  Prism.languages.brightscript = {\n    comment: /(?:\\brem|').*/i,\n    'directive-statement': {\n      pattern: /(^[\\t ]*)#(?:const|else(?:[\\t ]+if)?|end[\\t ]+if|error|if).*/im,\n      lookbehind: true,\n      alias: 'property',\n      inside: {\n        'error-message': {\n          pattern: /(^#error).+/,\n          lookbehind: true\n        },\n        directive: {\n          pattern: /^#(?:const|else(?:[\\t ]+if)?|end[\\t ]+if|error|if)/,\n          alias: 'keyword'\n        },\n        expression: {\n          pattern: /[\\s\\S]+/,\n          inside: null // see below\n        }\n      }\n    },\n\n    property: {\n      pattern: /([\\r\\n{,][\\t ]*)(?:(?!\\d)\\w+|\"(?:[^\"\\r\\n]|\"\")*\"(?!\"))(?=[ \\t]*:)/,\n      lookbehind: true,\n      greedy: true\n    },\n    string: {\n      pattern: /\"(?:[^\"\\r\\n]|\"\")*\"(?!\")/,\n      greedy: true\n    },\n    'class-name': {\n      pattern: /(\\bAs[\\t ]+)\\w+/i,\n      lookbehind: true\n    },\n    keyword: /\\b(?:As|Dim|Each|Else|Elseif|End|Exit|For|Function|Goto|If|In|Print|Return|Step|Stop|Sub|Then|To|While)\\b/i,\n    \"boolean\": /\\b(?:false|true)\\b/i,\n    \"function\": /\\b(?!\\d)\\w+(?=[\\t ]*\\()/,\n    number: /(?:\\b\\d+(?:\\.\\d+)?(?:[ed][+-]\\d+)?|&h[a-f\\d]+)\\b[%&!#]?/i,\n    operator: /--|\\+\\+|>>=?|<<=?|<>|[-+*/\\\\<>]=?|[:^=?]|\\b(?:and|mod|not|or)\\b/i,\n    punctuation: /[.,;()[\\]{}]/,\n    constant: /\\b(?:LINE_NUM)\\b/i\n  };\n  Prism.languages.brightscript['directive-statement'].inside.expression.inside = Prism.languages.brightscript;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvYnJpZ2h0c2NyaXB0LmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsWUFBWTtBQUM3QkEsWUFBWSxDQUFDQyxXQUFXLEdBQUcsY0FBYztBQUN6Q0QsWUFBWSxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUN6QixTQUFTRixZQUFZQSxDQUFDRyxLQUFLLEVBQUU7RUFDM0JBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixZQUFZLEdBQUc7SUFDN0JLLE9BQU8sRUFBRSxnQkFBZ0I7SUFDekIscUJBQXFCLEVBQUU7TUFDckJDLE9BQU8sRUFBRSxnRUFBZ0U7TUFDekVDLFVBQVUsRUFBRSxJQUFJO01BQ2hCQyxLQUFLLEVBQUUsVUFBVTtNQUNqQkMsTUFBTSxFQUFFO1FBQ04sZUFBZSxFQUFFO1VBQ2ZILE9BQU8sRUFBRSxhQUFhO1VBQ3RCQyxVQUFVLEVBQUU7UUFDZCxDQUFDO1FBQ0RHLFNBQVMsRUFBRTtVQUNUSixPQUFPLEVBQUUsb0RBQW9EO1VBQzdERSxLQUFLLEVBQUU7UUFDVCxDQUFDO1FBQ0RHLFVBQVUsRUFBRTtVQUNWTCxPQUFPLEVBQUUsU0FBUztVQUNsQkcsTUFBTSxFQUFFLElBQUksQ0FBQztRQUNmO01BQ0Y7SUFDRixDQUFDOztJQUNERyxRQUFRLEVBQUU7TUFDUk4sT0FBTyxFQUNMLGtFQUFrRTtNQUNwRUMsVUFBVSxFQUFFLElBQUk7TUFDaEJNLE1BQU0sRUFBRTtJQUNWLENBQUM7SUFDREMsTUFBTSxFQUFFO01BQ05SLE9BQU8sRUFBRSx5QkFBeUI7TUFDbENPLE1BQU0sRUFBRTtJQUNWLENBQUM7SUFDRCxZQUFZLEVBQUU7TUFDWlAsT0FBTyxFQUFFLGtCQUFrQjtNQUMzQkMsVUFBVSxFQUFFO0lBQ2QsQ0FBQztJQUNEUSxPQUFPLEVBQ0wsNEdBQTRHO0lBQzlHLFdBQVMscUJBQXFCO0lBQzlCLFlBQVUseUJBQXlCO0lBQ25DQyxNQUFNLEVBQUUsMERBQTBEO0lBQ2xFQyxRQUFRLEVBQ04sa0VBQWtFO0lBQ3BFQyxXQUFXLEVBQUUsY0FBYztJQUMzQkMsUUFBUSxFQUFFO0VBQ1osQ0FBQztFQUNEaEIsS0FBSyxDQUFDQyxTQUFTLENBQUNKLFlBQVksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDUyxNQUFNLENBQUNFLFVBQVUsQ0FBQ0YsTUFBTSxHQUMxRU4sS0FBSyxDQUFDQyxTQUFTLENBQUNKLFlBQVk7QUFDaEMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxicmlnaHRzY3JpcHQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gYnJpZ2h0c2NyaXB0XG5icmlnaHRzY3JpcHQuZGlzcGxheU5hbWUgPSAnYnJpZ2h0c2NyaXB0J1xuYnJpZ2h0c2NyaXB0LmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24gYnJpZ2h0c2NyaXB0KFByaXNtKSB7XG4gIFByaXNtLmxhbmd1YWdlcy5icmlnaHRzY3JpcHQgPSB7XG4gICAgY29tbWVudDogLyg/OlxcYnJlbXwnKS4qL2ksXG4gICAgJ2RpcmVjdGl2ZS1zdGF0ZW1lbnQnOiB7XG4gICAgICBwYXR0ZXJuOiAvKF5bXFx0IF0qKSMoPzpjb25zdHxlbHNlKD86W1xcdCBdK2lmKT98ZW5kW1xcdCBdK2lmfGVycm9yfGlmKS4qL2ltLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGFsaWFzOiAncHJvcGVydHknLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgICdlcnJvci1tZXNzYWdlJzoge1xuICAgICAgICAgIHBhdHRlcm46IC8oXiNlcnJvcikuKy8sXG4gICAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBkaXJlY3RpdmU6IHtcbiAgICAgICAgICBwYXR0ZXJuOiAvXiMoPzpjb25zdHxlbHNlKD86W1xcdCBdK2lmKT98ZW5kW1xcdCBdK2lmfGVycm9yfGlmKS8sXG4gICAgICAgICAgYWxpYXM6ICdrZXl3b3JkJ1xuICAgICAgICB9LFxuICAgICAgICBleHByZXNzaW9uOiB7XG4gICAgICAgICAgcGF0dGVybjogL1tcXHNcXFNdKy8sXG4gICAgICAgICAgaW5zaWRlOiBudWxsIC8vIHNlZSBiZWxvd1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBwcm9wZXJ0eToge1xuICAgICAgcGF0dGVybjpcbiAgICAgICAgLyhbXFxyXFxueyxdW1xcdCBdKikoPzooPyFcXGQpXFx3K3xcIig/OlteXCJcXHJcXG5dfFwiXCIpKlwiKD8hXCIpKSg/PVsgXFx0XSo6KS8sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICBzdHJpbmc6IHtcbiAgICAgIHBhdHRlcm46IC9cIig/OlteXCJcXHJcXG5dfFwiXCIpKlwiKD8hXCIpLyxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgJ2NsYXNzLW5hbWUnOiB7XG4gICAgICBwYXR0ZXJuOiAvKFxcYkFzW1xcdCBdKylcXHcrL2ksXG4gICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgfSxcbiAgICBrZXl3b3JkOlxuICAgICAgL1xcYig/OkFzfERpbXxFYWNofEVsc2V8RWxzZWlmfEVuZHxFeGl0fEZvcnxGdW5jdGlvbnxHb3RvfElmfElufFByaW50fFJldHVybnxTdGVwfFN0b3B8U3VifFRoZW58VG98V2hpbGUpXFxiL2ksXG4gICAgYm9vbGVhbjogL1xcYig/OmZhbHNlfHRydWUpXFxiL2ksXG4gICAgZnVuY3Rpb246IC9cXGIoPyFcXGQpXFx3Kyg/PVtcXHQgXSpcXCgpLyxcbiAgICBudW1iZXI6IC8oPzpcXGJcXGQrKD86XFwuXFxkKyk/KD86W2VkXVsrLV1cXGQrKT98JmhbYS1mXFxkXSspXFxiWyUmISNdPy9pLFxuICAgIG9wZXJhdG9yOlxuICAgICAgLy0tfFxcK1xcK3w+Pj0/fDw8PT98PD58Wy0rKi9cXFxcPD5dPT98WzpePT9dfFxcYig/OmFuZHxtb2R8bm90fG9yKVxcYi9pLFxuICAgIHB1bmN0dWF0aW9uOiAvWy4sOygpW1xcXXt9XS8sXG4gICAgY29uc3RhbnQ6IC9cXGIoPzpMSU5FX05VTSlcXGIvaVxuICB9XG4gIFByaXNtLmxhbmd1YWdlcy5icmlnaHRzY3JpcHRbJ2RpcmVjdGl2ZS1zdGF0ZW1lbnQnXS5pbnNpZGUuZXhwcmVzc2lvbi5pbnNpZGUgPVxuICAgIFByaXNtLmxhbmd1YWdlcy5icmlnaHRzY3JpcHRcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiYnJpZ2h0c2NyaXB0IiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJjb21tZW50IiwicGF0dGVybiIsImxvb2tiZWhpbmQiLCJhbGlhcyIsImluc2lkZSIsImRpcmVjdGl2ZSIsImV4cHJlc3Npb24iLCJwcm9wZXJ0eSIsImdyZWVkeSIsInN0cmluZyIsImtleXdvcmQiLCJudW1iZXIiLCJvcGVyYXRvciIsInB1bmN0dWF0aW9uIiwiY29uc3RhbnQiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/brightscript.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/bro.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/bro.js ***!
  \********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = bro;\nbro.displayName = 'bro';\nbro.aliases = [];\nfunction bro(Prism) {\n  Prism.languages.bro = {\n    comment: {\n      pattern: /(^|[^\\\\$])#.*/,\n      lookbehind: true,\n      inside: {\n        italic: /\\b(?:FIXME|TODO|XXX)\\b/\n      }\n    },\n    string: {\n      pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true\n    },\n    \"boolean\": /\\b[TF]\\b/,\n    \"function\": {\n      pattern: /(\\b(?:event|function|hook)[ \\t]+)\\w+(?:::\\w+)?/,\n      lookbehind: true\n    },\n    builtin: /(?:@(?:load(?:-(?:plugin|sigs))?|unload|prefixes|ifn?def|else|(?:end)?if|DIR|FILENAME))|(?:&?(?:add_func|create_expire|default|delete_func|encrypt|error_handler|expire_func|group|log|mergeable|optional|persistent|priority|raw_output|read_expire|redef|rotate_interval|rotate_size|synchronized|type_column|write_expire))/,\n    constant: {\n      pattern: /(\\bconst[ \\t]+)\\w+/i,\n      lookbehind: true\n    },\n    keyword: /\\b(?:add|addr|alarm|any|bool|break|const|continue|count|delete|double|else|enum|event|export|file|for|function|global|hook|if|in|int|interval|local|module|next|of|opaque|pattern|port|print|record|return|schedule|set|string|subnet|table|time|timeout|using|vector|when)\\b/,\n    operator: /--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,\n    number: /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n    punctuation: /[{}[\\];(),.:]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvYnJvLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsR0FBRztBQUNwQkEsR0FBRyxDQUFDQyxXQUFXLEdBQUcsS0FBSztBQUN2QkQsR0FBRyxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNoQixTQUFTRixHQUFHQSxDQUFDRyxLQUFLLEVBQUU7RUFDbEJBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixHQUFHLEdBQUc7SUFDcEJLLE9BQU8sRUFBRTtNQUNQQyxPQUFPLEVBQUUsZUFBZTtNQUN4QkMsVUFBVSxFQUFFLElBQUk7TUFDaEJDLE1BQU0sRUFBRTtRQUNOQyxNQUFNLEVBQUU7TUFDVjtJQUNGLENBQUM7SUFDREMsTUFBTSxFQUFFO01BQ05KLE9BQU8sRUFBRSxnREFBZ0Q7TUFDekRLLE1BQU0sRUFBRTtJQUNWLENBQUM7SUFDRCxXQUFTLFVBQVU7SUFDbkIsWUFBVTtNQUNSTCxPQUFPLEVBQUUsZ0RBQWdEO01BQ3pEQyxVQUFVLEVBQUU7SUFDZCxDQUFDO0lBQ0RLLE9BQU8sRUFDTCxnVUFBZ1U7SUFDbFVDLFFBQVEsRUFBRTtNQUNSUCxPQUFPLEVBQUUscUJBQXFCO01BQzlCQyxVQUFVLEVBQUU7SUFDZCxDQUFDO0lBQ0RPLE9BQU8sRUFDTCwrUUFBK1E7SUFDalJDLFFBQVEsRUFBRSx3REFBd0Q7SUFDbEVDLE1BQU0sRUFBRSwyREFBMkQ7SUFDbkVDLFdBQVcsRUFBRTtFQUNmLENBQUM7QUFDSCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXGJyby5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBicm9cbmJyby5kaXNwbGF5TmFtZSA9ICdicm8nXG5icm8uYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBicm8oUHJpc20pIHtcbiAgUHJpc20ubGFuZ3VhZ2VzLmJybyA9IHtcbiAgICBjb21tZW50OiB7XG4gICAgICBwYXR0ZXJuOiAvKF58W15cXFxcJF0pIy4qLyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBpbnNpZGU6IHtcbiAgICAgICAgaXRhbGljOiAvXFxiKD86RklYTUV8VE9ET3xYWFgpXFxiL1xuICAgICAgfVxuICAgIH0sXG4gICAgc3RyaW5nOiB7XG4gICAgICBwYXR0ZXJuOiAvKFtcIiddKSg/OlxcXFwoPzpcXHJcXG58W1xcc1xcU10pfCg/IVxcMSlbXlxcXFxcXHJcXG5dKSpcXDEvLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICBib29sZWFuOiAvXFxiW1RGXVxcYi8sXG4gICAgZnVuY3Rpb246IHtcbiAgICAgIHBhdHRlcm46IC8oXFxiKD86ZXZlbnR8ZnVuY3Rpb258aG9vaylbIFxcdF0rKVxcdysoPzo6OlxcdyspPy8sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgfSxcbiAgICBidWlsdGluOlxuICAgICAgLyg/OkAoPzpsb2FkKD86LSg/OnBsdWdpbnxzaWdzKSk/fHVubG9hZHxwcmVmaXhlc3xpZm4/ZGVmfGVsc2V8KD86ZW5kKT9pZnxESVJ8RklMRU5BTUUpKXwoPzomPyg/OmFkZF9mdW5jfGNyZWF0ZV9leHBpcmV8ZGVmYXVsdHxkZWxldGVfZnVuY3xlbmNyeXB0fGVycm9yX2hhbmRsZXJ8ZXhwaXJlX2Z1bmN8Z3JvdXB8bG9nfG1lcmdlYWJsZXxvcHRpb25hbHxwZXJzaXN0ZW50fHByaW9yaXR5fHJhd19vdXRwdXR8cmVhZF9leHBpcmV8cmVkZWZ8cm90YXRlX2ludGVydmFsfHJvdGF0ZV9zaXplfHN5bmNocm9uaXplZHx0eXBlX2NvbHVtbnx3cml0ZV9leHBpcmUpKS8sXG4gICAgY29uc3RhbnQ6IHtcbiAgICAgIHBhdHRlcm46IC8oXFxiY29uc3RbIFxcdF0rKVxcdysvaSxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICB9LFxuICAgIGtleXdvcmQ6XG4gICAgICAvXFxiKD86YWRkfGFkZHJ8YWxhcm18YW55fGJvb2x8YnJlYWt8Y29uc3R8Y29udGludWV8Y291bnR8ZGVsZXRlfGRvdWJsZXxlbHNlfGVudW18ZXZlbnR8ZXhwb3J0fGZpbGV8Zm9yfGZ1bmN0aW9ufGdsb2JhbHxob29rfGlmfGlufGludHxpbnRlcnZhbHxsb2NhbHxtb2R1bGV8bmV4dHxvZnxvcGFxdWV8cGF0dGVybnxwb3J0fHByaW50fHJlY29yZHxyZXR1cm58c2NoZWR1bGV8c2V0fHN0cmluZ3xzdWJuZXR8dGFibGV8dGltZXx0aW1lb3V0fHVzaW5nfHZlY3Rvcnx3aGVuKVxcYi8sXG4gICAgb3BlcmF0b3I6IC8tLT98XFwrXFwrP3whPT89P3w8PT98Pj0/fD09Pz0/fCYmfFxcfFxcfD98XFw/fFxcKnxcXC98fnxcXF58JS8sXG4gICAgbnVtYmVyOiAvXFxiMHhbXFxkYS1mXStcXGJ8KD86XFxiXFxkKyg/OlxcLlxcZCopP3xcXEJcXC5cXGQrKSg/OmVbKy1dP1xcZCspPy9pLFxuICAgIHB1bmN0dWF0aW9uOiAvW3t9W1xcXTsoKSwuOl0vXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiYnJvIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJjb21tZW50IiwicGF0dGVybiIsImxvb2tiZWhpbmQiLCJpbnNpZGUiLCJpdGFsaWMiLCJzdHJpbmciLCJncmVlZHkiLCJidWlsdGluIiwiY29uc3RhbnQiLCJrZXl3b3JkIiwib3BlcmF0b3IiLCJudW1iZXIiLCJwdW5jdHVhdGlvbiJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/bro.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/bsl.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/bsl.js ***!
  \********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = bsl;\nbsl.displayName = 'bsl';\nbsl.aliases = [];\nfunction bsl(Prism) {\n  /* eslint-disable no-misleading-character-class */\n  // 1C:Enterprise\n  // https://github.com/Diversus23/\n  //\n  Prism.languages.bsl = {\n    comment: /\\/\\/.*/,\n    string: [\n    // Строки\n    // Strings\n    {\n      pattern: /\"(?:[^\"]|\"\")*\"(?!\")/,\n      greedy: true\n    },\n    // Дата и время\n    // Date & time\n    {\n      pattern: /'(?:[^'\\r\\n\\\\]|\\\\.)*'/\n    }],\n    keyword: [{\n      // RU\n      pattern: /(^|[^\\w\\u0400-\\u0484\\u0487-\\u052f\\u1d2b\\u1d78\\u2de0-\\u2dff\\ua640-\\ua69f\\ufe2e\\ufe2f])(?:пока|для|новый|прервать|попытка|исключение|вызватьисключение|иначе|конецпопытки|неопределено|функция|перем|возврат|конецфункции|если|иначеесли|процедура|конецпроцедуры|тогда|знач|экспорт|конецесли|из|каждого|истина|ложь|по|цикл|конеццикла|выполнить)(?![\\w\\u0400-\\u0484\\u0487-\\u052f\\u1d2b\\u1d78\\u2de0-\\u2dff\\ua640-\\ua69f\\ufe2e\\ufe2f])/i,\n      lookbehind: true\n    }, {\n      // EN\n      pattern: /\\b(?:break|do|each|else|elseif|enddo|endfunction|endif|endprocedure|endtry|except|execute|export|false|for|function|if|in|new|null|procedure|raise|return|then|to|true|try|undefined|val|var|while)\\b/i\n    }],\n    number: {\n      pattern: /(^(?=\\d)|[^\\w\\u0400-\\u0484\\u0487-\\u052f\\u1d2b\\u1d78\\u2de0-\\u2dff\\ua640-\\ua69f\\ufe2e\\ufe2f])(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:E[+-]?\\d+)?/i,\n      lookbehind: true\n    },\n    operator: [/[<>+\\-*/]=?|[%=]/,\n    // RU\n    {\n      pattern: /(^|[^\\w\\u0400-\\u0484\\u0487-\\u052f\\u1d2b\\u1d78\\u2de0-\\u2dff\\ua640-\\ua69f\\ufe2e\\ufe2f])(?:и|или|не)(?![\\w\\u0400-\\u0484\\u0487-\\u052f\\u1d2b\\u1d78\\u2de0-\\u2dff\\ua640-\\ua69f\\ufe2e\\ufe2f])/i,\n      lookbehind: true\n    },\n    // EN\n    {\n      pattern: /\\b(?:and|not|or)\\b/i\n    }],\n    punctuation: /\\(\\.|\\.\\)|[()\\[\\]:;,.]/,\n    directive: [\n    // Теги препроцессора вида &Клиент, &Сервер, ...\n    // Preprocessor tags of the type &Client, &Server, ...\n    {\n      pattern: /^([ \\t]*)&.*/m,\n      lookbehind: true,\n      greedy: true,\n      alias: 'important'\n    },\n    // Инструкции препроцессора вида:\n    // #Если Сервер Тогда\n    // ...\n    // #КонецЕсли\n    // Preprocessor instructions of the form:\n    // #If Server Then\n    // ...\n    // #EndIf\n    {\n      pattern: /^([ \\t]*)#.*/gm,\n      lookbehind: true,\n      greedy: true,\n      alias: 'important'\n    }]\n  };\n  Prism.languages.oscript = Prism.languages['bsl'];\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvYnNsLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsR0FBRztBQUNwQkEsR0FBRyxDQUFDQyxXQUFXLEdBQUcsS0FBSztBQUN2QkQsR0FBRyxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNoQixTQUFTRixHQUFHQSxDQUFDRyxLQUFLLEVBQUU7RUFDbEI7RUFDQTtFQUNBO0VBQ0E7RUFDQUEsS0FBSyxDQUFDQyxTQUFTLENBQUNKLEdBQUcsR0FBRztJQUNwQkssT0FBTyxFQUFFLFFBQVE7SUFDakJDLE1BQU0sRUFBRTtJQUNOO0lBQ0E7SUFDQTtNQUNFQyxPQUFPLEVBQUUscUJBQXFCO01BQzlCQyxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQUU7SUFDSDtJQUNBO01BQ0VELE9BQU8sRUFBRTtJQUNYLENBQUMsQ0FDRjtJQUNERSxPQUFPLEVBQUUsQ0FDUDtNQUNFO01BQ0FGLE9BQU8sRUFDTCx3YUFBd2E7TUFDMWFHLFVBQVUsRUFBRTtJQUNkLENBQUMsRUFDRDtNQUNFO01BQ0FILE9BQU8sRUFDTDtJQUNKLENBQUMsQ0FDRjtJQUNESSxNQUFNLEVBQUU7TUFDTkosT0FBTyxFQUNMLG1JQUFtSTtNQUNySUcsVUFBVSxFQUFFO0lBQ2QsQ0FBQztJQUNERSxRQUFRLEVBQUUsQ0FDUixrQkFBa0I7SUFBRTtJQUNwQjtNQUNFTCxPQUFPLEVBQ0wsd0xBQXdMO01BQzFMRyxVQUFVLEVBQUU7SUFDZCxDQUFDO0lBQUU7SUFDSDtNQUNFSCxPQUFPLEVBQUU7SUFDWCxDQUFDLENBQ0Y7SUFDRE0sV0FBVyxFQUFFLHdCQUF3QjtJQUNyQ0MsU0FBUyxFQUFFO0lBQ1Q7SUFDQTtJQUNBO01BQ0VQLE9BQU8sRUFBRSxlQUFlO01BQ3hCRyxVQUFVLEVBQUUsSUFBSTtNQUNoQkYsTUFBTSxFQUFFLElBQUk7TUFDWk8sS0FBSyxFQUFFO0lBQ1QsQ0FBQztJQUFFO0lBQ0g7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtNQUNFUixPQUFPLEVBQUUsZ0JBQWdCO01BQ3pCRyxVQUFVLEVBQUUsSUFBSTtNQUNoQkYsTUFBTSxFQUFFLElBQUk7TUFDWk8sS0FBSyxFQUFFO0lBQ1QsQ0FBQztFQUVMLENBQUM7RUFDRFosS0FBSyxDQUFDQyxTQUFTLENBQUNZLE9BQU8sR0FBR2IsS0FBSyxDQUFDQyxTQUFTLENBQUMsS0FBSyxDQUFDO0FBQ2xEIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcYnNsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJzbFxuYnNsLmRpc3BsYXlOYW1lID0gJ2JzbCdcbmJzbC5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIGJzbChQcmlzbSkge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1taXNsZWFkaW5nLWNoYXJhY3Rlci1jbGFzcyAqL1xuICAvLyAxQzpFbnRlcnByaXNlXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EaXZlcnN1czIzL1xuICAvL1xuICBQcmlzbS5sYW5ndWFnZXMuYnNsID0ge1xuICAgIGNvbW1lbnQ6IC9cXC9cXC8uKi8sXG4gICAgc3RyaW5nOiBbXG4gICAgICAvLyDQodGC0YDQvtC60LhcbiAgICAgIC8vIFN0cmluZ3NcbiAgICAgIHtcbiAgICAgICAgcGF0dGVybjogL1wiKD86W15cIl18XCJcIikqXCIoPyFcIikvLFxuICAgICAgICBncmVlZHk6IHRydWVcbiAgICAgIH0sIC8vINCU0LDRgtCwINC4INCy0YDQtdC80Y9cbiAgICAgIC8vIERhdGUgJiB0aW1lXG4gICAgICB7XG4gICAgICAgIHBhdHRlcm46IC8nKD86W14nXFxyXFxuXFxcXF18XFxcXC4pKicvXG4gICAgICB9XG4gICAgXSxcbiAgICBrZXl3b3JkOiBbXG4gICAgICB7XG4gICAgICAgIC8vIFJVXG4gICAgICAgIHBhdHRlcm46XG4gICAgICAgICAgLyhefFteXFx3XFx1MDQwMC1cXHUwNDg0XFx1MDQ4Ny1cXHUwNTJmXFx1MWQyYlxcdTFkNzhcXHUyZGUwLVxcdTJkZmZcXHVhNjQwLVxcdWE2OWZcXHVmZTJlXFx1ZmUyZl0pKD860L/QvtC60LB80LTQu9GPfNC90L7QstGL0Ll80L/RgNC10YDQstCw0YLRjHzQv9C+0L/Ri9GC0LrQsHzQuNGB0LrQu9GO0YfQtdC90LjQtXzQstGL0LfQstCw0YLRjNC40YHQutC70Y7Rh9C10L3QuNC1fNC40L3QsNGH0LV80LrQvtC90LXRhtC/0L7Qv9GL0YLQutC4fNC90LXQvtC/0YDQtdC00LXQu9C10L3QvnzRhNGD0L3QutGG0LjRj3zQv9C10YDQtdC8fNCy0L7Qt9Cy0YDQsNGCfNC60L7QvdC10YbRhNGD0L3QutGG0LjQuHzQtdGB0LvQuHzQuNC90LDRh9C10LXRgdC70Lh80L/RgNC+0YbQtdC00YPRgNCwfNC60L7QvdC10YbQv9GA0L7RhtC10LTRg9GA0Yt80YLQvtCz0LTQsHzQt9C90LDRh3zRjdC60YHQv9C+0YDRgnzQutC+0L3QtdGG0LXRgdC70Lh80LjQt3zQutCw0LbQtNC+0LPQvnzQuNGB0YLQuNC90LB80LvQvtC20Yx80L/QvnzRhtC40LrQu3zQutC+0L3QtdGG0YbQuNC60LvQsHzQstGL0L/QvtC70L3QuNGC0YwpKD8hW1xcd1xcdTA0MDAtXFx1MDQ4NFxcdTA0ODctXFx1MDUyZlxcdTFkMmJcXHUxZDc4XFx1MmRlMC1cXHUyZGZmXFx1YTY0MC1cXHVhNjlmXFx1ZmUyZVxcdWZlMmZdKS9pLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICAvLyBFTlxuICAgICAgICBwYXR0ZXJuOlxuICAgICAgICAgIC9cXGIoPzpicmVha3xkb3xlYWNofGVsc2V8ZWxzZWlmfGVuZGRvfGVuZGZ1bmN0aW9ufGVuZGlmfGVuZHByb2NlZHVyZXxlbmR0cnl8ZXhjZXB0fGV4ZWN1dGV8ZXhwb3J0fGZhbHNlfGZvcnxmdW5jdGlvbnxpZnxpbnxuZXd8bnVsbHxwcm9jZWR1cmV8cmFpc2V8cmV0dXJufHRoZW58dG98dHJ1ZXx0cnl8dW5kZWZpbmVkfHZhbHx2YXJ8d2hpbGUpXFxiL2lcbiAgICAgIH1cbiAgICBdLFxuICAgIG51bWJlcjoge1xuICAgICAgcGF0dGVybjpcbiAgICAgICAgLyheKD89XFxkKXxbXlxcd1xcdTA0MDAtXFx1MDQ4NFxcdTA0ODctXFx1MDUyZlxcdTFkMmJcXHUxZDc4XFx1MmRlMC1cXHUyZGZmXFx1YTY0MC1cXHVhNjlmXFx1ZmUyZVxcdWZlMmZdKSg/OlxcZCsoPzpcXC5cXGQqKT98XFwuXFxkKykoPzpFWystXT9cXGQrKT8vaSxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICB9LFxuICAgIG9wZXJhdG9yOiBbXG4gICAgICAvWzw+K1xcLSovXT0/fFslPV0vLCAvLyBSVVxuICAgICAge1xuICAgICAgICBwYXR0ZXJuOlxuICAgICAgICAgIC8oXnxbXlxcd1xcdTA0MDAtXFx1MDQ4NFxcdTA0ODctXFx1MDUyZlxcdTFkMmJcXHUxZDc4XFx1MmRlMC1cXHUyZGZmXFx1YTY0MC1cXHVhNjlmXFx1ZmUyZVxcdWZlMmZdKSg/OtC4fNC40LvQuHzQvdC1KSg/IVtcXHdcXHUwNDAwLVxcdTA0ODRcXHUwNDg3LVxcdTA1MmZcXHUxZDJiXFx1MWQ3OFxcdTJkZTAtXFx1MmRmZlxcdWE2NDAtXFx1YTY5ZlxcdWZlMmVcXHVmZTJmXSkvaSxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgfSwgLy8gRU5cbiAgICAgIHtcbiAgICAgICAgcGF0dGVybjogL1xcYig/OmFuZHxub3R8b3IpXFxiL2lcbiAgICAgIH1cbiAgICBdLFxuICAgIHB1bmN0dWF0aW9uOiAvXFwoXFwufFxcLlxcKXxbKClcXFtcXF06OywuXS8sXG4gICAgZGlyZWN0aXZlOiBbXG4gICAgICAvLyDQotC10LPQuCDQv9GA0LXQv9GA0L7RhtC10YHRgdC+0YDQsCDQstC40LTQsCAm0JrQu9C40LXQvdGCLCAm0KHQtdGA0LLQtdGALCAuLi5cbiAgICAgIC8vIFByZXByb2Nlc3NvciB0YWdzIG9mIHRoZSB0eXBlICZDbGllbnQsICZTZXJ2ZXIsIC4uLlxuICAgICAge1xuICAgICAgICBwYXR0ZXJuOiAvXihbIFxcdF0qKSYuKi9tLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICBncmVlZHk6IHRydWUsXG4gICAgICAgIGFsaWFzOiAnaW1wb3J0YW50J1xuICAgICAgfSwgLy8g0JjQvdGB0YLRgNGD0LrRhtC40Lgg0L/RgNC10L/RgNC+0YbQtdGB0YHQvtGA0LAg0LLQuNC00LA6XG4gICAgICAvLyAj0JXRgdC70Lgg0KHQtdGA0LLQtdGAINCi0L7Qs9C00LBcbiAgICAgIC8vIC4uLlxuICAgICAgLy8gI9Ca0L7QvdC10YbQldGB0LvQuFxuICAgICAgLy8gUHJlcHJvY2Vzc29yIGluc3RydWN0aW9ucyBvZiB0aGUgZm9ybTpcbiAgICAgIC8vICNJZiBTZXJ2ZXIgVGhlblxuICAgICAgLy8gLi4uXG4gICAgICAvLyAjRW5kSWZcbiAgICAgIHtcbiAgICAgICAgcGF0dGVybjogL14oWyBcXHRdKikjLiovZ20sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgICAgYWxpYXM6ICdpbXBvcnRhbnQnXG4gICAgICB9XG4gICAgXVxuICB9XG4gIFByaXNtLmxhbmd1YWdlcy5vc2NyaXB0ID0gUHJpc20ubGFuZ3VhZ2VzWydic2wnXVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJic2wiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImxhbmd1YWdlcyIsImNvbW1lbnQiLCJzdHJpbmciLCJwYXR0ZXJuIiwiZ3JlZWR5Iiwia2V5d29yZCIsImxvb2tiZWhpbmQiLCJudW1iZXIiLCJvcGVyYXRvciIsInB1bmN0dWF0aW9uIiwiZGlyZWN0aXZlIiwiYWxpYXMiLCJvc2NyaXB0Il0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/bsl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/c.js":
/*!******************************************!*\
  !*** ./node_modules/refractor/lang/c.js ***!
  \******************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = c;\nc.displayName = 'c';\nc.aliases = [];\nfunction c(Prism) {\n  Prism.languages.c = Prism.languages.extend('clike', {\n    comment: {\n      pattern: /\\/\\/(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n?|\\n|(?![\\r\\n])))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n      greedy: true\n    },\n    string: {\n      // https://en.cppreference.com/w/c/language/string_literal\n      pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n      greedy: true\n    },\n    'class-name': {\n      pattern: /(\\b(?:enum|struct)\\s+(?:__attribute__\\s*\\(\\([\\s\\S]*?\\)\\)\\s*)?)\\w+|\\b[a-z]\\w*_t\\b/,\n      lookbehind: true\n    },\n    keyword: /\\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|__attribute__|asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|inline|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|typeof|union|unsigned|void|volatile|while)\\b/,\n    \"function\": /\\b[a-z_]\\w*(?=\\s*\\()/i,\n    number: /(?:\\b0x(?:[\\da-f]+(?:\\.[\\da-f]*)?|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]{0,4}/i,\n    operator: />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?/\n  });\n  Prism.languages.insertBefore('c', 'string', {\n    \"char\": {\n      // https://en.cppreference.com/w/c/language/character_constant\n      pattern: /'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n]){0,32}'/,\n      greedy: true\n    }\n  });\n  Prism.languages.insertBefore('c', 'string', {\n    macro: {\n      // allow for multiline macro definitions\n      // spaces after the # character compile fine with gcc\n      pattern: /(^[\\t ]*)#\\s*[a-z](?:[^\\r\\n\\\\/]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\\\\(?:\\r\\n|[\\s\\S]))*/im,\n      lookbehind: true,\n      greedy: true,\n      alias: 'property',\n      inside: {\n        string: [{\n          // highlight the path of the include statement as a string\n          pattern: /^(#\\s*include\\s*)<[^>]+>/,\n          lookbehind: true\n        }, Prism.languages.c['string']],\n        \"char\": Prism.languages.c['char'],\n        comment: Prism.languages.c['comment'],\n        'macro-name': [{\n          pattern: /(^#\\s*define\\s+)\\w+\\b(?!\\()/i,\n          lookbehind: true\n        }, {\n          pattern: /(^#\\s*define\\s+)\\w+\\b(?=\\()/i,\n          lookbehind: true,\n          alias: 'function'\n        }],\n        // highlight macro directives as keywords\n        directive: {\n          pattern: /^(#\\s*)[a-z]+/,\n          lookbehind: true,\n          alias: 'keyword'\n        },\n        'directive-hash': /^#/,\n        punctuation: /##|\\\\(?=[\\r\\n])/,\n        expression: {\n          pattern: /\\S[\\s\\S]*/,\n          inside: Prism.languages.c\n        }\n      }\n    }\n  });\n  Prism.languages.insertBefore('c', 'function', {\n    // highlight predefined macros as constants\n    constant: /\\b(?:EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|__DATE__|__FILE__|__LINE__|__TIMESTAMP__|__TIME__|__func__|stderr|stdin|stdout)\\b/\n  });\n  delete Prism.languages.c['boolean'];\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvYy5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLENBQUM7QUFDbEJBLENBQUMsQ0FBQ0MsV0FBVyxHQUFHLEdBQUc7QUFDbkJELENBQUMsQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDZCxTQUFTRixDQUFDQSxDQUFDRyxLQUFLLEVBQUU7RUFDaEJBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixDQUFDLEdBQUdHLEtBQUssQ0FBQ0MsU0FBUyxDQUFDQyxNQUFNLENBQUMsT0FBTyxFQUFFO0lBQ2xEQyxPQUFPLEVBQUU7TUFDUEMsT0FBTyxFQUNMLHFFQUFxRTtNQUN2RUMsTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUNEQyxNQUFNLEVBQUU7TUFDTjtNQUNBRixPQUFPLEVBQUUscUNBQXFDO01BQzlDQyxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0QsWUFBWSxFQUFFO01BQ1pELE9BQU8sRUFDTCxrRkFBa0Y7TUFDcEZHLFVBQVUsRUFBRTtJQUNkLENBQUM7SUFDREMsT0FBTyxFQUNMLG1WQUFtVjtJQUNyVixZQUFVLHVCQUF1QjtJQUNqQ0MsTUFBTSxFQUNKLG1IQUFtSDtJQUNySEMsUUFBUSxFQUFFO0VBQ1osQ0FBQyxDQUFDO0VBQ0ZWLEtBQUssQ0FBQ0MsU0FBUyxDQUFDVSxZQUFZLENBQUMsR0FBRyxFQUFFLFFBQVEsRUFBRTtJQUMxQyxRQUFNO01BQ0o7TUFDQVAsT0FBTyxFQUFFLDBDQUEwQztNQUNuREMsTUFBTSxFQUFFO0lBQ1Y7RUFDRixDQUFDLENBQUM7RUFDRkwsS0FBSyxDQUFDQyxTQUFTLENBQUNVLFlBQVksQ0FBQyxHQUFHLEVBQUUsUUFBUSxFQUFFO0lBQzFDQyxLQUFLLEVBQUU7TUFDTDtNQUNBO01BQ0FSLE9BQU8sRUFDTCwyRkFBMkY7TUFDN0ZHLFVBQVUsRUFBRSxJQUFJO01BQ2hCRixNQUFNLEVBQUUsSUFBSTtNQUNaUSxLQUFLLEVBQUUsVUFBVTtNQUNqQkMsTUFBTSxFQUFFO1FBQ05SLE1BQU0sRUFBRSxDQUNOO1VBQ0U7VUFDQUYsT0FBTyxFQUFFLDBCQUEwQjtVQUNuQ0csVUFBVSxFQUFFO1FBQ2QsQ0FBQyxFQUNEUCxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUM1QjtRQUNELFFBQU1HLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixDQUFDLENBQUMsTUFBTSxDQUFDO1FBQy9CTSxPQUFPLEVBQUVILEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixDQUFDLENBQUMsU0FBUyxDQUFDO1FBQ3JDLFlBQVksRUFBRSxDQUNaO1VBQ0VPLE9BQU8sRUFBRSw4QkFBOEI7VUFDdkNHLFVBQVUsRUFBRTtRQUNkLENBQUMsRUFDRDtVQUNFSCxPQUFPLEVBQUUsOEJBQThCO1VBQ3ZDRyxVQUFVLEVBQUUsSUFBSTtVQUNoQk0sS0FBSyxFQUFFO1FBQ1QsQ0FBQyxDQUNGO1FBQ0Q7UUFDQUUsU0FBUyxFQUFFO1VBQ1RYLE9BQU8sRUFBRSxlQUFlO1VBQ3hCRyxVQUFVLEVBQUUsSUFBSTtVQUNoQk0sS0FBSyxFQUFFO1FBQ1QsQ0FBQztRQUNELGdCQUFnQixFQUFFLElBQUk7UUFDdEJHLFdBQVcsRUFBRSxpQkFBaUI7UUFDOUJDLFVBQVUsRUFBRTtVQUNWYixPQUFPLEVBQUUsV0FBVztVQUNwQlUsTUFBTSxFQUFFZCxLQUFLLENBQUNDLFNBQVMsQ0FBQ0o7UUFDMUI7TUFDRjtJQUNGO0VBQ0YsQ0FBQyxDQUFDO0VBQ0ZHLEtBQUssQ0FBQ0MsU0FBUyxDQUFDVSxZQUFZLENBQUMsR0FBRyxFQUFFLFVBQVUsRUFBRTtJQUM1QztJQUNBTyxRQUFRLEVBQ047RUFDSixDQUFDLENBQUM7RUFDRixPQUFPbEIsS0FBSyxDQUFDQyxTQUFTLENBQUNKLENBQUMsQ0FBQyxTQUFTLENBQUM7QUFDckMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxjLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNcbmMuZGlzcGxheU5hbWUgPSAnYydcbmMuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBjKFByaXNtKSB7XG4gIFByaXNtLmxhbmd1YWdlcy5jID0gUHJpc20ubGFuZ3VhZ2VzLmV4dGVuZCgnY2xpa2UnLCB7XG4gICAgY29tbWVudDoge1xuICAgICAgcGF0dGVybjpcbiAgICAgICAgL1xcL1xcLyg/OlteXFxyXFxuXFxcXF18XFxcXCg/Olxcclxcbj98XFxufCg/IVtcXHJcXG5dKSkpKnxcXC9cXCpbXFxzXFxTXSo/KD86XFwqXFwvfCQpLyxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgc3RyaW5nOiB7XG4gICAgICAvLyBodHRwczovL2VuLmNwcHJlZmVyZW5jZS5jb20vdy9jL2xhbmd1YWdlL3N0cmluZ19saXRlcmFsXG4gICAgICBwYXR0ZXJuOiAvXCIoPzpcXFxcKD86XFxyXFxufFtcXHNcXFNdKXxbXlwiXFxcXFxcclxcbl0pKlwiLyxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgJ2NsYXNzLW5hbWUnOiB7XG4gICAgICBwYXR0ZXJuOlxuICAgICAgICAvKFxcYig/OmVudW18c3RydWN0KVxccysoPzpfX2F0dHJpYnV0ZV9fXFxzKlxcKFxcKFtcXHNcXFNdKj9cXClcXClcXHMqKT8pXFx3K3xcXGJbYS16XVxcdypfdFxcYi8sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgfSxcbiAgICBrZXl3b3JkOlxuICAgICAgL1xcYig/Ol9BbGlnbmFzfF9BbGlnbm9mfF9BdG9taWN8X0Jvb2x8X0NvbXBsZXh8X0dlbmVyaWN8X0ltYWdpbmFyeXxfTm9yZXR1cm58X1N0YXRpY19hc3NlcnR8X1RocmVhZF9sb2NhbHxfX2F0dHJpYnV0ZV9ffGFzbXxhdXRvfGJyZWFrfGNhc2V8Y2hhcnxjb25zdHxjb250aW51ZXxkZWZhdWx0fGRvfGRvdWJsZXxlbHNlfGVudW18ZXh0ZXJufGZsb2F0fGZvcnxnb3RvfGlmfGlubGluZXxpbnR8bG9uZ3xyZWdpc3RlcnxyZXR1cm58c2hvcnR8c2lnbmVkfHNpemVvZnxzdGF0aWN8c3RydWN0fHN3aXRjaHx0eXBlZGVmfHR5cGVvZnx1bmlvbnx1bnNpZ25lZHx2b2lkfHZvbGF0aWxlfHdoaWxlKVxcYi8sXG4gICAgZnVuY3Rpb246IC9cXGJbYS16X11cXHcqKD89XFxzKlxcKCkvaSxcbiAgICBudW1iZXI6XG4gICAgICAvKD86XFxiMHgoPzpbXFxkYS1mXSsoPzpcXC5bXFxkYS1mXSopP3xcXC5bXFxkYS1mXSspKD86cFsrLV0/XFxkKyk/fCg/OlxcYlxcZCsoPzpcXC5cXGQqKT98XFxCXFwuXFxkKykoPzplWystXT9cXGQrKT8pW2Z1bF17MCw0fS9pLFxuICAgIG9wZXJhdG9yOiAvPj49P3w8PD0/fC0+fChbLSsmfDpdKVxcMXxbPzp+XXxbLSsqLyUmfF4hPTw+XT0/L1xuICB9KVxuICBQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdjJywgJ3N0cmluZycsIHtcbiAgICBjaGFyOiB7XG4gICAgICAvLyBodHRwczovL2VuLmNwcHJlZmVyZW5jZS5jb20vdy9jL2xhbmd1YWdlL2NoYXJhY3Rlcl9jb25zdGFudFxuICAgICAgcGF0dGVybjogLycoPzpcXFxcKD86XFxyXFxufFtcXHNcXFNdKXxbXidcXFxcXFxyXFxuXSl7MCwzMn0nLyxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH1cbiAgfSlcbiAgUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgnYycsICdzdHJpbmcnLCB7XG4gICAgbWFjcm86IHtcbiAgICAgIC8vIGFsbG93IGZvciBtdWx0aWxpbmUgbWFjcm8gZGVmaW5pdGlvbnNcbiAgICAgIC8vIHNwYWNlcyBhZnRlciB0aGUgIyBjaGFyYWN0ZXIgY29tcGlsZSBmaW5lIHdpdGggZ2NjXG4gICAgICBwYXR0ZXJuOlxuICAgICAgICAvKF5bXFx0IF0qKSNcXHMqW2Etel0oPzpbXlxcclxcblxcXFwvXXxcXC8oPyFcXCopfFxcL1xcKig/OlteKl18XFwqKD8hXFwvKSkqXFwqXFwvfFxcXFwoPzpcXHJcXG58W1xcc1xcU10pKSovaW0sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgYWxpYXM6ICdwcm9wZXJ0eScsXG4gICAgICBpbnNpZGU6IHtcbiAgICAgICAgc3RyaW5nOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgLy8gaGlnaGxpZ2h0IHRoZSBwYXRoIG9mIHRoZSBpbmNsdWRlIHN0YXRlbWVudCBhcyBhIHN0cmluZ1xuICAgICAgICAgICAgcGF0dGVybjogL14oI1xccyppbmNsdWRlXFxzKik8W14+XSs+LyxcbiAgICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIFByaXNtLmxhbmd1YWdlcy5jWydzdHJpbmcnXVxuICAgICAgICBdLFxuICAgICAgICBjaGFyOiBQcmlzbS5sYW5ndWFnZXMuY1snY2hhciddLFxuICAgICAgICBjb21tZW50OiBQcmlzbS5sYW5ndWFnZXMuY1snY29tbWVudCddLFxuICAgICAgICAnbWFjcm8tbmFtZSc6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBwYXR0ZXJuOiAvKF4jXFxzKmRlZmluZVxccyspXFx3K1xcYig/IVxcKCkvaSxcbiAgICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHBhdHRlcm46IC8oXiNcXHMqZGVmaW5lXFxzKylcXHcrXFxiKD89XFwoKS9pLFxuICAgICAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgICAgIGFsaWFzOiAnZnVuY3Rpb24nXG4gICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICAvLyBoaWdobGlnaHQgbWFjcm8gZGlyZWN0aXZlcyBhcyBrZXl3b3Jkc1xuICAgICAgICBkaXJlY3RpdmU6IHtcbiAgICAgICAgICBwYXR0ZXJuOiAvXigjXFxzKilbYS16XSsvLFxuICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgICAgYWxpYXM6ICdrZXl3b3JkJ1xuICAgICAgICB9LFxuICAgICAgICAnZGlyZWN0aXZlLWhhc2gnOiAvXiMvLFxuICAgICAgICBwdW5jdHVhdGlvbjogLyMjfFxcXFwoPz1bXFxyXFxuXSkvLFxuICAgICAgICBleHByZXNzaW9uOiB7XG4gICAgICAgICAgcGF0dGVybjogL1xcU1tcXHNcXFNdKi8sXG4gICAgICAgICAgaW5zaWRlOiBQcmlzbS5sYW5ndWFnZXMuY1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9KVxuICBQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdjJywgJ2Z1bmN0aW9uJywge1xuICAgIC8vIGhpZ2hsaWdodCBwcmVkZWZpbmVkIG1hY3JvcyBhcyBjb25zdGFudHNcbiAgICBjb25zdGFudDpcbiAgICAgIC9cXGIoPzpFT0Z8TlVMTHxTRUVLX0NVUnxTRUVLX0VORHxTRUVLX1NFVHxfX0RBVEVfX3xfX0ZJTEVfX3xfX0xJTkVfX3xfX1RJTUVTVEFNUF9ffF9fVElNRV9ffF9fZnVuY19ffHN0ZGVycnxzdGRpbnxzdGRvdXQpXFxiL1xuICB9KVxuICBkZWxldGUgUHJpc20ubGFuZ3VhZ2VzLmNbJ2Jvb2xlYW4nXVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJjIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJleHRlbmQiLCJjb21tZW50IiwicGF0dGVybiIsImdyZWVkeSIsInN0cmluZyIsImxvb2tiZWhpbmQiLCJrZXl3b3JkIiwibnVtYmVyIiwib3BlcmF0b3IiLCJpbnNlcnRCZWZvcmUiLCJtYWNybyIsImFsaWFzIiwiaW5zaWRlIiwiZGlyZWN0aXZlIiwicHVuY3R1YXRpb24iLCJleHByZXNzaW9uIiwiY29uc3RhbnQiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/c.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/cfscript.js":
/*!*************************************************!*\
  !*** ./node_modules/refractor/lang/cfscript.js ***!
  \*************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = cfscript;\ncfscript.displayName = 'cfscript';\ncfscript.aliases = [];\nfunction cfscript(Prism) {\n  // https://cfdocs.org/script\n  Prism.languages.cfscript = Prism.languages.extend('clike', {\n    comment: [{\n      pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n      lookbehind: true,\n      inside: {\n        annotation: {\n          pattern: /(?:^|[^.])@[\\w\\.]+/,\n          alias: 'punctuation'\n        }\n      }\n    }, {\n      pattern: /(^|[^\\\\:])\\/\\/.*/,\n      lookbehind: true,\n      greedy: true\n    }],\n    keyword: /\\b(?:abstract|break|catch|component|continue|default|do|else|extends|final|finally|for|function|if|in|include|package|private|property|public|remote|required|rethrow|return|static|switch|throw|try|var|while|xml)\\b(?!\\s*=)/,\n    operator: [/\\+\\+|--|&&|\\|\\||::|=>|[!=]==|<=?|>=?|[-+*/%&|^!=<>]=?|\\?(?:\\.|:)?|[?:]/, /\\b(?:and|contains|eq|equal|eqv|gt|gte|imp|is|lt|lte|mod|not|or|xor)\\b/],\n    scope: {\n      pattern: /\\b(?:application|arguments|cgi|client|cookie|local|session|super|this|variables)\\b/,\n      alias: 'global'\n    },\n    type: {\n      pattern: /\\b(?:any|array|binary|boolean|date|guid|numeric|query|string|struct|uuid|void|xml)\\b/,\n      alias: 'builtin'\n    }\n  });\n  Prism.languages.insertBefore('cfscript', 'keyword', {\n    // This must be declared before keyword because we use \"function\" inside the lookahead\n    'function-variable': {\n      pattern: /[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,\n      alias: 'function'\n    }\n  });\n  delete Prism.languages.cfscript['class-name'];\n  Prism.languages.cfc = Prism.languages['cfscript'];\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvY2ZzY3JpcHQuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxRQUFRO0FBQ3pCQSxRQUFRLENBQUNDLFdBQVcsR0FBRyxVQUFVO0FBQ2pDRCxRQUFRLENBQUNFLE9BQU8sR0FBRyxFQUFFO0FBQ3JCLFNBQVNGLFFBQVFBLENBQUNHLEtBQUssRUFBRTtFQUN2QjtFQUNBQSxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osUUFBUSxHQUFHRyxLQUFLLENBQUNDLFNBQVMsQ0FBQ0MsTUFBTSxDQUFDLE9BQU8sRUFBRTtJQUN6REMsT0FBTyxFQUFFLENBQ1A7TUFDRUMsT0FBTyxFQUFFLGlDQUFpQztNQUMxQ0MsVUFBVSxFQUFFLElBQUk7TUFDaEJDLE1BQU0sRUFBRTtRQUNOQyxVQUFVLEVBQUU7VUFDVkgsT0FBTyxFQUFFLG9CQUFvQjtVQUM3QkksS0FBSyxFQUFFO1FBQ1Q7TUFDRjtJQUNGLENBQUMsRUFDRDtNQUNFSixPQUFPLEVBQUUsa0JBQWtCO01BQzNCQyxVQUFVLEVBQUUsSUFBSTtNQUNoQkksTUFBTSxFQUFFO0lBQ1YsQ0FBQyxDQUNGO0lBQ0RDLE9BQU8sRUFDTCwrTkFBK047SUFDak9DLFFBQVEsRUFBRSxDQUNSLHdFQUF3RSxFQUN4RSx1RUFBdUUsQ0FDeEU7SUFDREMsS0FBSyxFQUFFO01BQ0xSLE9BQU8sRUFDTCxvRkFBb0Y7TUFDdEZJLEtBQUssRUFBRTtJQUNULENBQUM7SUFDREssSUFBSSxFQUFFO01BQ0pULE9BQU8sRUFDTCxzRkFBc0Y7TUFDeEZJLEtBQUssRUFBRTtJQUNUO0VBQ0YsQ0FBQyxDQUFDO0VBQ0ZSLEtBQUssQ0FBQ0MsU0FBUyxDQUFDYSxZQUFZLENBQUMsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUNsRDtJQUNBLG1CQUFtQixFQUFFO01BQ25CVixPQUFPLEVBQ0wsMEtBQTBLO01BQzVLSSxLQUFLLEVBQUU7SUFDVDtFQUNGLENBQUMsQ0FBQztFQUNGLE9BQU9SLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixRQUFRLENBQUMsWUFBWSxDQUFDO0VBQzdDRyxLQUFLLENBQUNDLFNBQVMsQ0FBQ2MsR0FBRyxHQUFHZixLQUFLLENBQUNDLFNBQVMsQ0FBQyxVQUFVLENBQUM7QUFDbkQiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxjZnNjcmlwdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBjZnNjcmlwdFxuY2ZzY3JpcHQuZGlzcGxheU5hbWUgPSAnY2ZzY3JpcHQnXG5jZnNjcmlwdC5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIGNmc2NyaXB0KFByaXNtKSB7XG4gIC8vIGh0dHBzOi8vY2Zkb2NzLm9yZy9zY3JpcHRcbiAgUHJpc20ubGFuZ3VhZ2VzLmNmc2NyaXB0ID0gUHJpc20ubGFuZ3VhZ2VzLmV4dGVuZCgnY2xpa2UnLCB7XG4gICAgY29tbWVudDogW1xuICAgICAge1xuICAgICAgICBwYXR0ZXJuOiAvKF58W15cXFxcXSlcXC9cXCpbXFxzXFxTXSo/KD86XFwqXFwvfCQpLyxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgYW5ub3RhdGlvbjoge1xuICAgICAgICAgICAgcGF0dGVybjogLyg/Ol58W14uXSlAW1xcd1xcLl0rLyxcbiAgICAgICAgICAgIGFsaWFzOiAncHVuY3R1YXRpb24nXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBwYXR0ZXJuOiAvKF58W15cXFxcOl0pXFwvXFwvLiovLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICBncmVlZHk6IHRydWVcbiAgICAgIH1cbiAgICBdLFxuICAgIGtleXdvcmQ6XG4gICAgICAvXFxiKD86YWJzdHJhY3R8YnJlYWt8Y2F0Y2h8Y29tcG9uZW50fGNvbnRpbnVlfGRlZmF1bHR8ZG98ZWxzZXxleHRlbmRzfGZpbmFsfGZpbmFsbHl8Zm9yfGZ1bmN0aW9ufGlmfGlufGluY2x1ZGV8cGFja2FnZXxwcml2YXRlfHByb3BlcnR5fHB1YmxpY3xyZW1vdGV8cmVxdWlyZWR8cmV0aHJvd3xyZXR1cm58c3RhdGljfHN3aXRjaHx0aHJvd3x0cnl8dmFyfHdoaWxlfHhtbClcXGIoPyFcXHMqPSkvLFxuICAgIG9wZXJhdG9yOiBbXG4gICAgICAvXFwrXFwrfC0tfCYmfFxcfFxcfHw6Onw9PnxbIT1dPT18PD0/fD49P3xbLSsqLyUmfF4hPTw+XT0/fFxcPyg/OlxcLnw6KT98Wz86XS8sXG4gICAgICAvXFxiKD86YW5kfGNvbnRhaW5zfGVxfGVxdWFsfGVxdnxndHxndGV8aW1wfGlzfGx0fGx0ZXxtb2R8bm90fG9yfHhvcilcXGIvXG4gICAgXSxcbiAgICBzY29wZToge1xuICAgICAgcGF0dGVybjpcbiAgICAgICAgL1xcYig/OmFwcGxpY2F0aW9ufGFyZ3VtZW50c3xjZ2l8Y2xpZW50fGNvb2tpZXxsb2NhbHxzZXNzaW9ufHN1cGVyfHRoaXN8dmFyaWFibGVzKVxcYi8sXG4gICAgICBhbGlhczogJ2dsb2JhbCdcbiAgICB9LFxuICAgIHR5cGU6IHtcbiAgICAgIHBhdHRlcm46XG4gICAgICAgIC9cXGIoPzphbnl8YXJyYXl8YmluYXJ5fGJvb2xlYW58ZGF0ZXxndWlkfG51bWVyaWN8cXVlcnl8c3RyaW5nfHN0cnVjdHx1dWlkfHZvaWR8eG1sKVxcYi8sXG4gICAgICBhbGlhczogJ2J1aWx0aW4nXG4gICAgfVxuICB9KVxuICBQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdjZnNjcmlwdCcsICdrZXl3b3JkJywge1xuICAgIC8vIFRoaXMgbXVzdCBiZSBkZWNsYXJlZCBiZWZvcmUga2V5d29yZCBiZWNhdXNlIHdlIHVzZSBcImZ1bmN0aW9uXCIgaW5zaWRlIHRoZSBsb29rYWhlYWRcbiAgICAnZnVuY3Rpb24tdmFyaWFibGUnOiB7XG4gICAgICBwYXR0ZXJuOlxuICAgICAgICAvW18kYS16QS1aXFx4QTAtXFx1RkZGRl0oPzooPyFcXHMpWyRcXHdcXHhBMC1cXHVGRkZGXSkqKD89XFxzKls9Ol1cXHMqKD86XFxiZnVuY3Rpb25cXGJ8KD86XFwoKD86W14oKV18XFwoW14oKV0qXFwpKSpcXCl8KD8hXFxzKVtfJGEtekEtWlxceEEwLVxcdUZGRkZdKD86KD8hXFxzKVskXFx3XFx4QTAtXFx1RkZGRl0pKilcXHMqPT4pKS8sXG4gICAgICBhbGlhczogJ2Z1bmN0aW9uJ1xuICAgIH1cbiAgfSlcbiAgZGVsZXRlIFByaXNtLmxhbmd1YWdlcy5jZnNjcmlwdFsnY2xhc3MtbmFtZSddXG4gIFByaXNtLmxhbmd1YWdlcy5jZmMgPSBQcmlzbS5sYW5ndWFnZXNbJ2Nmc2NyaXB0J11cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiY2ZzY3JpcHQiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImxhbmd1YWdlcyIsImV4dGVuZCIsImNvbW1lbnQiLCJwYXR0ZXJuIiwibG9va2JlaGluZCIsImluc2lkZSIsImFubm90YXRpb24iLCJhbGlhcyIsImdyZWVkeSIsImtleXdvcmQiLCJvcGVyYXRvciIsInNjb3BlIiwidHlwZSIsImluc2VydEJlZm9yZSIsImNmYyJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/cfscript.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/chaiscript.js":
/*!***************************************************!*\
  !*** ./node_modules/refractor/lang/chaiscript.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar refractorCpp = __webpack_require__(/*! ./cpp.js */ \"(ssr)/./node_modules/refractor/lang/cpp.js\");\nmodule.exports = chaiscript;\nchaiscript.displayName = 'chaiscript';\nchaiscript.aliases = [];\nfunction chaiscript(Prism) {\n  Prism.register(refractorCpp);\n  Prism.languages.chaiscript = Prism.languages.extend('clike', {\n    string: {\n      pattern: /(^|[^\\\\])'(?:[^'\\\\]|\\\\[\\s\\S])*'/,\n      lookbehind: true,\n      greedy: true\n    },\n    'class-name': [{\n      // e.g. class Rectangle { ... }\n      pattern: /(\\bclass\\s+)\\w+/,\n      lookbehind: true\n    }, {\n      // e.g. attr Rectangle::height, def Rectangle::area() { ... }\n      pattern: /(\\b(?:attr|def)\\s+)\\w+(?=\\s*::)/,\n      lookbehind: true\n    }],\n    keyword: /\\b(?:attr|auto|break|case|catch|class|continue|def|default|else|finally|for|fun|global|if|return|switch|this|try|var|while)\\b/,\n    number: [Prism.languages.cpp.number, /\\b(?:Infinity|NaN)\\b/],\n    operator: />>=?|<<=?|\\|\\||&&|:[:=]?|--|\\+\\+|[=!<>+\\-*/%|&^]=?|[?~]|`[^`\\r\\n]{1,4}`/\n  });\n  Prism.languages.insertBefore('chaiscript', 'operator', {\n    'parameter-type': {\n      // e.g. def foo(int x, Vector y) {...}\n      pattern: /([,(]\\s*)\\w+(?=\\s+\\w)/,\n      lookbehind: true,\n      alias: 'class-name'\n    }\n  });\n  Prism.languages.insertBefore('chaiscript', 'string', {\n    'string-interpolation': {\n      pattern: /(^|[^\\\\])\"(?:[^\"$\\\\]|\\\\[\\s\\S]|\\$(?!\\{)|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})*\\})*\"/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})*\\}/,\n          lookbehind: true,\n          inside: {\n            'interpolation-expression': {\n              pattern: /(^\\$\\{)[\\s\\S]+(?=\\}$)/,\n              lookbehind: true,\n              inside: Prism.languages.chaiscript\n            },\n            'interpolation-punctuation': {\n              pattern: /^\\$\\{|\\}$/,\n              alias: 'punctuation'\n            }\n          }\n        },\n        string: /[\\s\\S]+/\n      }\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvY2hhaXNjcmlwdC5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFDWixJQUFJQSxZQUFZLEdBQUdDLG1CQUFPLENBQUMsNERBQVUsQ0FBQztBQUN0Q0MsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLFVBQVU7QUFDM0JBLFVBQVUsQ0FBQ0MsV0FBVyxHQUFHLFlBQVk7QUFDckNELFVBQVUsQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDdkIsU0FBU0YsVUFBVUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ3pCQSxLQUFLLENBQUNDLFFBQVEsQ0FBQ1IsWUFBWSxDQUFDO0VBQzVCTyxLQUFLLENBQUNFLFNBQVMsQ0FBQ0wsVUFBVSxHQUFHRyxLQUFLLENBQUNFLFNBQVMsQ0FBQ0MsTUFBTSxDQUFDLE9BQU8sRUFBRTtJQUMzREMsTUFBTSxFQUFFO01BQ05DLE9BQU8sRUFBRSxpQ0FBaUM7TUFDMUNDLFVBQVUsRUFBRSxJQUFJO01BQ2hCQyxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0QsWUFBWSxFQUFFLENBQ1o7TUFDRTtNQUNBRixPQUFPLEVBQUUsaUJBQWlCO01BQzFCQyxVQUFVLEVBQUU7SUFDZCxDQUFDLEVBQ0Q7TUFDRTtNQUNBRCxPQUFPLEVBQUUsaUNBQWlDO01BQzFDQyxVQUFVLEVBQUU7SUFDZCxDQUFDLENBQ0Y7SUFDREUsT0FBTyxFQUNMLCtIQUErSDtJQUNqSUMsTUFBTSxFQUFFLENBQUNULEtBQUssQ0FBQ0UsU0FBUyxDQUFDUSxHQUFHLENBQUNELE1BQU0sRUFBRSxzQkFBc0IsQ0FBQztJQUM1REUsUUFBUSxFQUNOO0VBQ0osQ0FBQyxDQUFDO0VBQ0ZYLEtBQUssQ0FBQ0UsU0FBUyxDQUFDVSxZQUFZLENBQUMsWUFBWSxFQUFFLFVBQVUsRUFBRTtJQUNyRCxnQkFBZ0IsRUFBRTtNQUNoQjtNQUNBUCxPQUFPLEVBQUUsdUJBQXVCO01BQ2hDQyxVQUFVLEVBQUUsSUFBSTtNQUNoQk8sS0FBSyxFQUFFO0lBQ1Q7RUFDRixDQUFDLENBQUM7RUFDRmIsS0FBSyxDQUFDRSxTQUFTLENBQUNVLFlBQVksQ0FBQyxZQUFZLEVBQUUsUUFBUSxFQUFFO0lBQ25ELHNCQUFzQixFQUFFO01BQ3RCUCxPQUFPLEVBQ0wsc0ZBQXNGO01BQ3hGQyxVQUFVLEVBQUUsSUFBSTtNQUNoQkMsTUFBTSxFQUFFLElBQUk7TUFDWk8sTUFBTSxFQUFFO1FBQ05DLGFBQWEsRUFBRTtVQUNiVixPQUFPLEVBQ0wsbUVBQW1FO1VBQ3JFQyxVQUFVLEVBQUUsSUFBSTtVQUNoQlEsTUFBTSxFQUFFO1lBQ04sMEJBQTBCLEVBQUU7Y0FDMUJULE9BQU8sRUFBRSx1QkFBdUI7Y0FDaENDLFVBQVUsRUFBRSxJQUFJO2NBQ2hCUSxNQUFNLEVBQUVkLEtBQUssQ0FBQ0UsU0FBUyxDQUFDTDtZQUMxQixDQUFDO1lBQ0QsMkJBQTJCLEVBQUU7Y0FDM0JRLE9BQU8sRUFBRSxXQUFXO2NBQ3BCUSxLQUFLLEVBQUU7WUFDVDtVQUNGO1FBQ0YsQ0FBQztRQUNEVCxNQUFNLEVBQUU7TUFDVjtJQUNGO0VBQ0YsQ0FBQyxDQUFDO0FBQ0oiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxjaGFpc2NyaXB0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xudmFyIHJlZnJhY3RvckNwcCA9IHJlcXVpcmUoJy4vY3BwLmpzJylcbm1vZHVsZS5leHBvcnRzID0gY2hhaXNjcmlwdFxuY2hhaXNjcmlwdC5kaXNwbGF5TmFtZSA9ICdjaGFpc2NyaXB0J1xuY2hhaXNjcmlwdC5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIGNoYWlzY3JpcHQoUHJpc20pIHtcbiAgUHJpc20ucmVnaXN0ZXIocmVmcmFjdG9yQ3BwKVxuICBQcmlzbS5sYW5ndWFnZXMuY2hhaXNjcmlwdCA9IFByaXNtLmxhbmd1YWdlcy5leHRlbmQoJ2NsaWtlJywge1xuICAgIHN0cmluZzoge1xuICAgICAgcGF0dGVybjogLyhefFteXFxcXF0pJyg/OlteJ1xcXFxdfFxcXFxbXFxzXFxTXSkqJy8sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICAnY2xhc3MtbmFtZSc6IFtcbiAgICAgIHtcbiAgICAgICAgLy8gZS5nLiBjbGFzcyBSZWN0YW5nbGUgeyAuLi4gfVxuICAgICAgICBwYXR0ZXJuOiAvKFxcYmNsYXNzXFxzKylcXHcrLyxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgLy8gZS5nLiBhdHRyIFJlY3RhbmdsZTo6aGVpZ2h0LCBkZWYgUmVjdGFuZ2xlOjphcmVhKCkgeyAuLi4gfVxuICAgICAgICBwYXR0ZXJuOiAvKFxcYig/OmF0dHJ8ZGVmKVxccyspXFx3Kyg/PVxccyo6OikvLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICB9XG4gICAgXSxcbiAgICBrZXl3b3JkOlxuICAgICAgL1xcYig/OmF0dHJ8YXV0b3xicmVha3xjYXNlfGNhdGNofGNsYXNzfGNvbnRpbnVlfGRlZnxkZWZhdWx0fGVsc2V8ZmluYWxseXxmb3J8ZnVufGdsb2JhbHxpZnxyZXR1cm58c3dpdGNofHRoaXN8dHJ5fHZhcnx3aGlsZSlcXGIvLFxuICAgIG51bWJlcjogW1ByaXNtLmxhbmd1YWdlcy5jcHAubnVtYmVyLCAvXFxiKD86SW5maW5pdHl8TmFOKVxcYi9dLFxuICAgIG9wZXJhdG9yOlxuICAgICAgLz4+PT98PDw9P3xcXHxcXHx8JiZ8Ols6PV0/fC0tfFxcK1xcK3xbPSE8PitcXC0qLyV8Jl5dPT98Wz9+XXxgW15gXFxyXFxuXXsxLDR9YC9cbiAgfSlcbiAgUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgnY2hhaXNjcmlwdCcsICdvcGVyYXRvcicsIHtcbiAgICAncGFyYW1ldGVyLXR5cGUnOiB7XG4gICAgICAvLyBlLmcuIGRlZiBmb28oaW50IHgsIFZlY3RvciB5KSB7Li4ufVxuICAgICAgcGF0dGVybjogLyhbLChdXFxzKilcXHcrKD89XFxzK1xcdykvLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGFsaWFzOiAnY2xhc3MtbmFtZSdcbiAgICB9XG4gIH0pXG4gIFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ2NoYWlzY3JpcHQnLCAnc3RyaW5nJywge1xuICAgICdzdHJpbmctaW50ZXJwb2xhdGlvbic6IHtcbiAgICAgIHBhdHRlcm46XG4gICAgICAgIC8oXnxbXlxcXFxdKVwiKD86W15cIiRcXFxcXXxcXFxcW1xcc1xcU118XFwkKD8hXFx7KXxcXCRcXHsoPzpbXnt9XXxcXHsoPzpbXnt9XXxcXHtbXnt9XSpcXH0pKlxcfSkqXFx9KSpcIi8sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgIGludGVycG9sYXRpb246IHtcbiAgICAgICAgICBwYXR0ZXJuOlxuICAgICAgICAgICAgLygoPzpefFteXFxcXF0pKD86XFxcXHsyfSkqKVxcJFxceyg/Oltee31dfFxceyg/Oltee31dfFxce1tee31dKlxcfSkqXFx9KSpcXH0vLFxuICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgICAnaW50ZXJwb2xhdGlvbi1leHByZXNzaW9uJzoge1xuICAgICAgICAgICAgICBwYXR0ZXJuOiAvKF5cXCRcXHspW1xcc1xcU10rKD89XFx9JCkvLFxuICAgICAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAgICAgICBpbnNpZGU6IFByaXNtLmxhbmd1YWdlcy5jaGFpc2NyaXB0XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ2ludGVycG9sYXRpb24tcHVuY3R1YXRpb24nOiB7XG4gICAgICAgICAgICAgIHBhdHRlcm46IC9eXFwkXFx7fFxcfSQvLFxuICAgICAgICAgICAgICBhbGlhczogJ3B1bmN0dWF0aW9uJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc3RyaW5nOiAvW1xcc1xcU10rL1xuICAgICAgfVxuICAgIH1cbiAgfSlcbn1cbiJdLCJuYW1lcyI6WyJyZWZyYWN0b3JDcHAiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImNoYWlzY3JpcHQiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsInJlZ2lzdGVyIiwibGFuZ3VhZ2VzIiwiZXh0ZW5kIiwic3RyaW5nIiwicGF0dGVybiIsImxvb2tiZWhpbmQiLCJncmVlZHkiLCJrZXl3b3JkIiwibnVtYmVyIiwiY3BwIiwib3BlcmF0b3IiLCJpbnNlcnRCZWZvcmUiLCJhbGlhcyIsImluc2lkZSIsImludGVycG9sYXRpb24iXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/chaiscript.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/cil.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/cil.js ***!
  \********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = cil;\ncil.displayName = 'cil';\ncil.aliases = [];\nfunction cil(Prism) {\n  Prism.languages.cil = {\n    comment: /\\/\\/.*/,\n    string: {\n      pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true\n    },\n    directive: {\n      pattern: /(^|\\W)\\.[a-z]+(?=\\s)/,\n      lookbehind: true,\n      alias: 'class-name'\n    },\n    // Actually an assembly reference\n    variable: /\\[[\\w\\.]+\\]/,\n    keyword: /\\b(?:abstract|ansi|assembly|auto|autochar|beforefieldinit|bool|bstr|byvalstr|catch|char|cil|class|currency|date|decimal|default|enum|error|explicit|extends|extern|famandassem|family|famorassem|final(?:ly)?|float32|float64|hidebysig|u?int(?:8|16|32|64)?|iant|idispatch|implements|import|initonly|instance|interface|iunknown|literal|lpstr|lpstruct|lptstr|lpwstr|managed|method|native(?:Type)?|nested|newslot|object(?:ref)?|pinvokeimpl|private|privatescope|public|reqsecobj|rtspecialname|runtime|sealed|sequential|serializable|specialname|static|string|struct|syschar|tbstr|unicode|unmanagedexp|unsigned|value(?:type)?|variant|virtual|void)\\b/,\n    \"function\": /\\b(?:(?:constrained|no|readonly|tail|unaligned|volatile)\\.)?(?:conv\\.(?:[iu][1248]?|ovf\\.[iu][1248]?(?:\\.un)?|r\\.un|r4|r8)|ldc\\.(?:i4(?:\\.\\d+|\\.[mM]1|\\.s)?|i8|r4|r8)|ldelem(?:\\.[iu][1248]?|\\.r[48]|\\.ref|a)?|ldind\\.(?:[iu][1248]?|r[48]|ref)|stelem\\.?(?:i[1248]?|r[48]|ref)?|stind\\.(?:i[1248]?|r[48]|ref)?|end(?:fault|filter|finally)|ldarg(?:\\.[0-3s]|a(?:\\.s)?)?|ldloc(?:\\.\\d+|\\.s)?|sub(?:\\.ovf(?:\\.un)?)?|mul(?:\\.ovf(?:\\.un)?)?|add(?:\\.ovf(?:\\.un)?)?|stloc(?:\\.[0-3s])?|refany(?:type|val)|blt(?:\\.un)?(?:\\.s)?|ble(?:\\.un)?(?:\\.s)?|bgt(?:\\.un)?(?:\\.s)?|bge(?:\\.un)?(?:\\.s)?|unbox(?:\\.any)?|init(?:blk|obj)|call(?:i|virt)?|brfalse(?:\\.s)?|bne\\.un(?:\\.s)?|ldloca(?:\\.s)?|brzero(?:\\.s)?|brtrue(?:\\.s)?|brnull(?:\\.s)?|brinst(?:\\.s)?|starg(?:\\.s)?|leave(?:\\.s)?|shr(?:\\.un)?|rem(?:\\.un)?|div(?:\\.un)?|clt(?:\\.un)?|alignment|castclass|ldvirtftn|beq(?:\\.s)?|ckfinite|ldsflda|ldtoken|localloc|mkrefany|rethrow|cgt\\.un|arglist|switch|stsfld|sizeof|newobj|newarr|ldsfld|ldnull|ldflda|isinst|throw|stobj|stfld|ldstr|ldobj|ldlen|ldftn|ldfld|cpobj|cpblk|break|br\\.s|xor|shl|ret|pop|not|nop|neg|jmp|dup|cgt|ceq|box|and|or|br)\\b/,\n    \"boolean\": /\\b(?:false|true)\\b/,\n    number: /\\b-?(?:0x[0-9a-f]+|\\d+)(?:\\.[0-9a-f]+)?\\b/i,\n    punctuation: /[{}[\\];(),:=]|IL_[0-9A-Za-z]+/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvY2lsLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsR0FBRztBQUNwQkEsR0FBRyxDQUFDQyxXQUFXLEdBQUcsS0FBSztBQUN2QkQsR0FBRyxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNoQixTQUFTRixHQUFHQSxDQUFDRyxLQUFLLEVBQUU7RUFDbEJBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixHQUFHLEdBQUc7SUFDcEJLLE9BQU8sRUFBRSxRQUFRO0lBQ2pCQyxNQUFNLEVBQUU7TUFDTkMsT0FBTyxFQUFFLGdEQUFnRDtNQUN6REMsTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUNEQyxTQUFTLEVBQUU7TUFDVEYsT0FBTyxFQUFFLHNCQUFzQjtNQUMvQkcsVUFBVSxFQUFFLElBQUk7TUFDaEJDLEtBQUssRUFBRTtJQUNULENBQUM7SUFDRDtJQUNBQyxRQUFRLEVBQUUsYUFBYTtJQUN2QkMsT0FBTyxFQUNMLGlvQkFBaW9CO0lBQ25vQixZQUNFLHlsQ0FBeWxDO0lBQzNsQyxXQUFTLG9CQUFvQjtJQUM3QkMsTUFBTSxFQUFFLDRDQUE0QztJQUNwREMsV0FBVyxFQUFFO0VBQ2YsQ0FBQztBQUNIIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcY2lsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNpbFxuY2lsLmRpc3BsYXlOYW1lID0gJ2NpbCdcbmNpbC5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIGNpbChQcmlzbSkge1xuICBQcmlzbS5sYW5ndWFnZXMuY2lsID0ge1xuICAgIGNvbW1lbnQ6IC9cXC9cXC8uKi8sXG4gICAgc3RyaW5nOiB7XG4gICAgICBwYXR0ZXJuOiAvKFtcIiddKSg/OlxcXFwoPzpcXHJcXG58W1xcc1xcU10pfCg/IVxcMSlbXlxcXFxcXHJcXG5dKSpcXDEvLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICBkaXJlY3RpdmU6IHtcbiAgICAgIHBhdHRlcm46IC8oXnxcXFcpXFwuW2Etel0rKD89XFxzKS8sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgYWxpYXM6ICdjbGFzcy1uYW1lJ1xuICAgIH0sXG4gICAgLy8gQWN0dWFsbHkgYW4gYXNzZW1ibHkgcmVmZXJlbmNlXG4gICAgdmFyaWFibGU6IC9cXFtbXFx3XFwuXStcXF0vLFxuICAgIGtleXdvcmQ6XG4gICAgICAvXFxiKD86YWJzdHJhY3R8YW5zaXxhc3NlbWJseXxhdXRvfGF1dG9jaGFyfGJlZm9yZWZpZWxkaW5pdHxib29sfGJzdHJ8Ynl2YWxzdHJ8Y2F0Y2h8Y2hhcnxjaWx8Y2xhc3N8Y3VycmVuY3l8ZGF0ZXxkZWNpbWFsfGRlZmF1bHR8ZW51bXxlcnJvcnxleHBsaWNpdHxleHRlbmRzfGV4dGVybnxmYW1hbmRhc3NlbXxmYW1pbHl8ZmFtb3Jhc3NlbXxmaW5hbCg/Omx5KT98ZmxvYXQzMnxmbG9hdDY0fGhpZGVieXNpZ3x1P2ludCg/Ojh8MTZ8MzJ8NjQpP3xpYW50fGlkaXNwYXRjaHxpbXBsZW1lbnRzfGltcG9ydHxpbml0b25seXxpbnN0YW5jZXxpbnRlcmZhY2V8aXVua25vd258bGl0ZXJhbHxscHN0cnxscHN0cnVjdHxscHRzdHJ8bHB3c3RyfG1hbmFnZWR8bWV0aG9kfG5hdGl2ZSg/OlR5cGUpP3xuZXN0ZWR8bmV3c2xvdHxvYmplY3QoPzpyZWYpP3xwaW52b2tlaW1wbHxwcml2YXRlfHByaXZhdGVzY29wZXxwdWJsaWN8cmVxc2Vjb2JqfHJ0c3BlY2lhbG5hbWV8cnVudGltZXxzZWFsZWR8c2VxdWVudGlhbHxzZXJpYWxpemFibGV8c3BlY2lhbG5hbWV8c3RhdGljfHN0cmluZ3xzdHJ1Y3R8c3lzY2hhcnx0YnN0cnx1bmljb2RlfHVubWFuYWdlZGV4cHx1bnNpZ25lZHx2YWx1ZSg/OnR5cGUpP3x2YXJpYW50fHZpcnR1YWx8dm9pZClcXGIvLFxuICAgIGZ1bmN0aW9uOlxuICAgICAgL1xcYig/Oig/OmNvbnN0cmFpbmVkfG5vfHJlYWRvbmx5fHRhaWx8dW5hbGlnbmVkfHZvbGF0aWxlKVxcLik/KD86Y29udlxcLig/OltpdV1bMTI0OF0/fG92ZlxcLltpdV1bMTI0OF0/KD86XFwudW4pP3xyXFwudW58cjR8cjgpfGxkY1xcLig/Omk0KD86XFwuXFxkK3xcXC5bbU1dMXxcXC5zKT98aTh8cjR8cjgpfGxkZWxlbSg/OlxcLltpdV1bMTI0OF0/fFxcLnJbNDhdfFxcLnJlZnxhKT98bGRpbmRcXC4oPzpbaXVdWzEyNDhdP3xyWzQ4XXxyZWYpfHN0ZWxlbVxcLj8oPzppWzEyNDhdP3xyWzQ4XXxyZWYpP3xzdGluZFxcLig/OmlbMTI0OF0/fHJbNDhdfHJlZik/fGVuZCg/OmZhdWx0fGZpbHRlcnxmaW5hbGx5KXxsZGFyZyg/OlxcLlswLTNzXXxhKD86XFwucyk/KT98bGRsb2MoPzpcXC5cXGQrfFxcLnMpP3xzdWIoPzpcXC5vdmYoPzpcXC51bik/KT98bXVsKD86XFwub3ZmKD86XFwudW4pPyk/fGFkZCg/OlxcLm92Zig/OlxcLnVuKT8pP3xzdGxvYyg/OlxcLlswLTNzXSk/fHJlZmFueSg/OnR5cGV8dmFsKXxibHQoPzpcXC51bik/KD86XFwucyk/fGJsZSg/OlxcLnVuKT8oPzpcXC5zKT98Ymd0KD86XFwudW4pPyg/OlxcLnMpP3xiZ2UoPzpcXC51bik/KD86XFwucyk/fHVuYm94KD86XFwuYW55KT98aW5pdCg/OmJsa3xvYmopfGNhbGwoPzppfHZpcnQpP3xicmZhbHNlKD86XFwucyk/fGJuZVxcLnVuKD86XFwucyk/fGxkbG9jYSg/OlxcLnMpP3xicnplcm8oPzpcXC5zKT98YnJ0cnVlKD86XFwucyk/fGJybnVsbCg/OlxcLnMpP3xicmluc3QoPzpcXC5zKT98c3RhcmcoPzpcXC5zKT98bGVhdmUoPzpcXC5zKT98c2hyKD86XFwudW4pP3xyZW0oPzpcXC51bik/fGRpdig/OlxcLnVuKT98Y2x0KD86XFwudW4pP3xhbGlnbm1lbnR8Y2FzdGNsYXNzfGxkdmlydGZ0bnxiZXEoPzpcXC5zKT98Y2tmaW5pdGV8bGRzZmxkYXxsZHRva2VufGxvY2FsbG9jfG1rcmVmYW55fHJldGhyb3d8Y2d0XFwudW58YXJnbGlzdHxzd2l0Y2h8c3RzZmxkfHNpemVvZnxuZXdvYmp8bmV3YXJyfGxkc2ZsZHxsZG51bGx8bGRmbGRhfGlzaW5zdHx0aHJvd3xzdG9ianxzdGZsZHxsZHN0cnxsZG9ianxsZGxlbnxsZGZ0bnxsZGZsZHxjcG9ianxjcGJsa3xicmVha3xiclxcLnN8eG9yfHNobHxyZXR8cG9wfG5vdHxub3B8bmVnfGptcHxkdXB8Y2d0fGNlcXxib3h8YW5kfG9yfGJyKVxcYi8sXG4gICAgYm9vbGVhbjogL1xcYig/OmZhbHNlfHRydWUpXFxiLyxcbiAgICBudW1iZXI6IC9cXGItPyg/OjB4WzAtOWEtZl0rfFxcZCspKD86XFwuWzAtOWEtZl0rKT9cXGIvaSxcbiAgICBwdW5jdHVhdGlvbjogL1t7fVtcXF07KCksOj1dfElMX1swLTlBLVphLXpdKy9cbiAgfVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJjaWwiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImxhbmd1YWdlcyIsImNvbW1lbnQiLCJzdHJpbmciLCJwYXR0ZXJuIiwiZ3JlZWR5IiwiZGlyZWN0aXZlIiwibG9va2JlaGluZCIsImFsaWFzIiwidmFyaWFibGUiLCJrZXl3b3JkIiwibnVtYmVyIiwicHVuY3R1YXRpb24iXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/cil.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/clike.js":
/*!**********************************************!*\
  !*** ./node_modules/refractor/lang/clike.js ***!
  \**********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = clike;\nclike.displayName = 'clike';\nclike.aliases = [];\nfunction clike(Prism) {\n  Prism.languages.clike = {\n    comment: [{\n      pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n      lookbehind: true,\n      greedy: true\n    }, {\n      pattern: /(^|[^\\\\:])\\/\\/.*/,\n      lookbehind: true,\n      greedy: true\n    }],\n    string: {\n      pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true\n    },\n    'class-name': {\n      pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|trait)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n      lookbehind: true,\n      inside: {\n        punctuation: /[.\\\\]/\n      }\n    },\n    keyword: /\\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\\b/,\n    \"boolean\": /\\b(?:false|true)\\b/,\n    \"function\": /\\b\\w+(?=\\()/,\n    number: /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n    operator: /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,\n    punctuation: /[{}[\\];(),.:]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvY2xpa2UuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxLQUFLO0FBQ3RCQSxLQUFLLENBQUNDLFdBQVcsR0FBRyxPQUFPO0FBQzNCRCxLQUFLLENBQUNFLE9BQU8sR0FBRyxFQUFFO0FBQ2xCLFNBQVNGLEtBQUtBLENBQUNHLEtBQUssRUFBRTtFQUNwQkEsS0FBSyxDQUFDQyxTQUFTLENBQUNKLEtBQUssR0FBRztJQUN0QkssT0FBTyxFQUFFLENBQ1A7TUFDRUMsT0FBTyxFQUFFLGlDQUFpQztNQUMxQ0MsVUFBVSxFQUFFLElBQUk7TUFDaEJDLE1BQU0sRUFBRTtJQUNWLENBQUMsRUFDRDtNQUNFRixPQUFPLEVBQUUsa0JBQWtCO01BQzNCQyxVQUFVLEVBQUUsSUFBSTtNQUNoQkMsTUFBTSxFQUFFO0lBQ1YsQ0FBQyxDQUNGO0lBQ0RDLE1BQU0sRUFBRTtNQUNOSCxPQUFPLEVBQUUsZ0RBQWdEO01BQ3pERSxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0QsWUFBWSxFQUFFO01BQ1pGLE9BQU8sRUFDTCwwRkFBMEY7TUFDNUZDLFVBQVUsRUFBRSxJQUFJO01BQ2hCRyxNQUFNLEVBQUU7UUFDTkMsV0FBVyxFQUFFO01BQ2Y7SUFDRixDQUFDO0lBQ0RDLE9BQU8sRUFDTCw0R0FBNEc7SUFDOUcsV0FBUyxvQkFBb0I7SUFDN0IsWUFBVSxhQUFhO0lBQ3ZCQyxNQUFNLEVBQUUsMkRBQTJEO0lBQ25FQyxRQUFRLEVBQUUsOENBQThDO0lBQ3hESCxXQUFXLEVBQUU7RUFDZixDQUFDO0FBQ0giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxjbGlrZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBjbGlrZVxuY2xpa2UuZGlzcGxheU5hbWUgPSAnY2xpa2UnXG5jbGlrZS5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIGNsaWtlKFByaXNtKSB7XG4gIFByaXNtLmxhbmd1YWdlcy5jbGlrZSA9IHtcbiAgICBjb21tZW50OiBbXG4gICAgICB7XG4gICAgICAgIHBhdHRlcm46IC8oXnxbXlxcXFxdKVxcL1xcKltcXHNcXFNdKj8oPzpcXCpcXC98JCkvLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICBncmVlZHk6IHRydWVcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHBhdHRlcm46IC8oXnxbXlxcXFw6XSlcXC9cXC8uKi8sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGdyZWVkeTogdHJ1ZVxuICAgICAgfVxuICAgIF0sXG4gICAgc3RyaW5nOiB7XG4gICAgICBwYXR0ZXJuOiAvKFtcIiddKSg/OlxcXFwoPzpcXHJcXG58W1xcc1xcU10pfCg/IVxcMSlbXlxcXFxcXHJcXG5dKSpcXDEvLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICAnY2xhc3MtbmFtZSc6IHtcbiAgICAgIHBhdHRlcm46XG4gICAgICAgIC8oXFxiKD86Y2xhc3N8ZXh0ZW5kc3xpbXBsZW1lbnRzfGluc3RhbmNlb2Z8aW50ZXJmYWNlfG5ld3x0cmFpdClcXHMrfFxcYmNhdGNoXFxzK1xcKClbXFx3LlxcXFxdKy9pLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGluc2lkZToge1xuICAgICAgICBwdW5jdHVhdGlvbjogL1suXFxcXF0vXG4gICAgICB9XG4gICAgfSxcbiAgICBrZXl3b3JkOlxuICAgICAgL1xcYig/OmJyZWFrfGNhdGNofGNvbnRpbnVlfGRvfGVsc2V8ZmluYWxseXxmb3J8ZnVuY3Rpb258aWZ8aW58aW5zdGFuY2VvZnxuZXd8bnVsbHxyZXR1cm58dGhyb3d8dHJ5fHdoaWxlKVxcYi8sXG4gICAgYm9vbGVhbjogL1xcYig/OmZhbHNlfHRydWUpXFxiLyxcbiAgICBmdW5jdGlvbjogL1xcYlxcdysoPz1cXCgpLyxcbiAgICBudW1iZXI6IC9cXGIweFtcXGRhLWZdK1xcYnwoPzpcXGJcXGQrKD86XFwuXFxkKik/fFxcQlxcLlxcZCspKD86ZVsrLV0/XFxkKyk/L2ksXG4gICAgb3BlcmF0b3I6IC9bPD5dPT98WyE9XT0/PT98LS0/fFxcK1xcKz98JiY/fFxcfFxcfD98Wz8qL35eJV0vLFxuICAgIHB1bmN0dWF0aW9uOiAvW3t9W1xcXTsoKSwuOl0vXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiY2xpa2UiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImxhbmd1YWdlcyIsImNvbW1lbnQiLCJwYXR0ZXJuIiwibG9va2JlaGluZCIsImdyZWVkeSIsInN0cmluZyIsImluc2lkZSIsInB1bmN0dWF0aW9uIiwia2V5d29yZCIsIm51bWJlciIsIm9wZXJhdG9yIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/clike.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/clojure.js":
/*!************************************************!*\
  !*** ./node_modules/refractor/lang/clojure.js ***!
  \************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = clojure;\nclojure.displayName = 'clojure';\nclojure.aliases = [];\nfunction clojure(Prism) {\n  // Copied from https://github.com/jeluard/prism-clojure\n  Prism.languages.clojure = {\n    comment: {\n      pattern: /;.*/,\n      greedy: true\n    },\n    string: {\n      pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n      greedy: true\n    },\n    \"char\": /\\\\\\w+/,\n    symbol: {\n      pattern: /(^|[\\s()\\[\\]{},])::?[\\w*+!?'<>=/.-]+/,\n      lookbehind: true\n    },\n    keyword: {\n      pattern: /(\\()(?:-|->|->>|\\.|\\.\\.|\\*|\\/|\\+|<|<=|=|==|>|>=|accessor|agent|agent-errors|aget|alength|all-ns|alter|and|append-child|apply|array-map|aset|aset-boolean|aset-byte|aset-char|aset-double|aset-float|aset-int|aset-long|aset-short|assert|assoc|await|await-for|bean|binding|bit-and|bit-not|bit-or|bit-shift-left|bit-shift-right|bit-xor|boolean|branch\\?|butlast|byte|cast|char|children|class|clear-agent-errors|comment|commute|comp|comparator|complement|concat|cond|conj|cons|constantly|construct-proxy|contains\\?|count|create-ns|create-struct|cycle|dec|declare|def|def-|definline|definterface|defmacro|defmethod|defmulti|defn|defn-|defonce|defproject|defprotocol|defrecord|defstruct|deftype|deref|difference|disj|dissoc|distinct|do|doall|doc|dorun|doseq|dosync|dotimes|doto|double|down|drop|drop-while|edit|end\\?|ensure|eval|every\\?|false\\?|ffirst|file-seq|filter|find|find-doc|find-ns|find-var|first|float|flush|fn|fnseq|for|frest|gensym|get|get-proxy-class|hash-map|hash-set|identical\\?|identity|if|if-let|if-not|import|in-ns|inc|index|insert-child|insert-left|insert-right|inspect-table|inspect-tree|instance\\?|int|interleave|intersection|into|into-array|iterate|join|key|keys|keyword|keyword\\?|last|lazy-cat|lazy-cons|left|lefts|let|line-seq|list|list\\*|load|load-file|locking|long|loop|macroexpand|macroexpand-1|make-array|make-node|map|map-invert|map\\?|mapcat|max|max-key|memfn|merge|merge-with|meta|min|min-key|monitor-enter|name|namespace|neg\\?|new|newline|next|nil\\?|node|not|not-any\\?|not-every\\?|not=|ns|ns-imports|ns-interns|ns-map|ns-name|ns-publics|ns-refers|ns-resolve|ns-unmap|nth|nthrest|or|parse|partial|path|peek|pop|pos\\?|pr|pr-str|print|print-str|println|println-str|prn|prn-str|project|proxy|proxy-mappings|quot|quote|rand|rand-int|range|re-find|re-groups|re-matcher|re-matches|re-pattern|re-seq|read|read-line|recur|reduce|ref|ref-set|refer|rem|remove|remove-method|remove-ns|rename|rename-keys|repeat|replace|replicate|resolve|rest|resultset-seq|reverse|rfirst|right|rights|root|rrest|rseq|second|select|select-keys|send|send-off|seq|seq-zip|seq\\?|set|set!|short|slurp|some|sort|sort-by|sorted-map|sorted-map-by|sorted-set|special-symbol\\?|split-at|split-with|str|string\\?|struct|struct-map|subs|subvec|symbol|symbol\\?|sync|take|take-nth|take-while|test|throw|time|to-array|to-array-2d|tree-seq|true\\?|try|union|up|update-proxy|val|vals|var|var-get|var-set|var\\?|vector|vector-zip|vector\\?|when|when-first|when-let|when-not|with-local-vars|with-meta|with-open|with-out-str|xml-seq|xml-zip|zero\\?|zipmap|zipper)(?=[\\s)]|$)/,\n      lookbehind: true\n    },\n    \"boolean\": /\\b(?:false|nil|true)\\b/,\n    number: {\n      pattern: /(^|[^\\w$@])(?:\\d+(?:[/.]\\d+)?(?:e[+-]?\\d+)?|0x[a-f0-9]+|[1-9]\\d?r[a-z0-9]+)[lmn]?(?![\\w$@])/i,\n      lookbehind: true\n    },\n    \"function\": {\n      pattern: /((?:^|[^'])\\()[\\w*+!?'<>=/.-]+(?=[\\s)]|$)/,\n      lookbehind: true\n    },\n    operator: /[#@^`~]/,\n    punctuation: /[{}\\[\\](),]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvY2xvanVyZS5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLE9BQU87QUFDeEJBLE9BQU8sQ0FBQ0MsV0FBVyxHQUFHLFNBQVM7QUFDL0JELE9BQU8sQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDcEIsU0FBU0YsT0FBT0EsQ0FBQ0csS0FBSyxFQUFFO0VBQ3RCO0VBQ0FBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixPQUFPLEdBQUc7SUFDeEJLLE9BQU8sRUFBRTtNQUNQQyxPQUFPLEVBQUUsS0FBSztNQUNkQyxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0RDLE1BQU0sRUFBRTtNQUNORixPQUFPLEVBQUUsbUJBQW1CO01BQzVCQyxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0QsUUFBTSxPQUFPO0lBQ2JFLE1BQU0sRUFBRTtNQUNOSCxPQUFPLEVBQUUsc0NBQXNDO01BQy9DSSxVQUFVLEVBQUU7SUFDZCxDQUFDO0lBQ0RDLE9BQU8sRUFBRTtNQUNQTCxPQUFPLEVBQ0wsNitFQUE2K0U7TUFDLytFSSxVQUFVLEVBQUU7SUFDZCxDQUFDO0lBQ0QsV0FBUyx3QkFBd0I7SUFDakNFLE1BQU0sRUFBRTtNQUNOTixPQUFPLEVBQ0wsOEZBQThGO01BQ2hHSSxVQUFVLEVBQUU7SUFDZCxDQUFDO0lBQ0QsWUFBVTtNQUNSSixPQUFPLEVBQUUsMkNBQTJDO01BQ3BESSxVQUFVLEVBQUU7SUFDZCxDQUFDO0lBQ0RHLFFBQVEsRUFBRSxTQUFTO0lBQ25CQyxXQUFXLEVBQUU7RUFDZixDQUFDO0FBQ0giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxjbG9qdXJlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNsb2p1cmVcbmNsb2p1cmUuZGlzcGxheU5hbWUgPSAnY2xvanVyZSdcbmNsb2p1cmUuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBjbG9qdXJlKFByaXNtKSB7XG4gIC8vIENvcGllZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9qZWx1YXJkL3ByaXNtLWNsb2p1cmVcbiAgUHJpc20ubGFuZ3VhZ2VzLmNsb2p1cmUgPSB7XG4gICAgY29tbWVudDoge1xuICAgICAgcGF0dGVybjogLzsuKi8sXG4gICAgICBncmVlZHk6IHRydWVcbiAgICB9LFxuICAgIHN0cmluZzoge1xuICAgICAgcGF0dGVybjogL1wiKD86W15cIlxcXFxdfFxcXFwuKSpcIi8sXG4gICAgICBncmVlZHk6IHRydWVcbiAgICB9LFxuICAgIGNoYXI6IC9cXFxcXFx3Ky8sXG4gICAgc3ltYm9sOiB7XG4gICAgICBwYXR0ZXJuOiAvKF58W1xccygpXFxbXFxde30sXSk6Oj9bXFx3KishPyc8Pj0vLi1dKy8sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgfSxcbiAgICBrZXl3b3JkOiB7XG4gICAgICBwYXR0ZXJuOlxuICAgICAgICAvKFxcKCkoPzotfC0+fC0+PnxcXC58XFwuXFwufFxcKnxcXC98XFwrfDx8PD18PXw9PXw+fD49fGFjY2Vzc29yfGFnZW50fGFnZW50LWVycm9yc3xhZ2V0fGFsZW5ndGh8YWxsLW5zfGFsdGVyfGFuZHxhcHBlbmQtY2hpbGR8YXBwbHl8YXJyYXktbWFwfGFzZXR8YXNldC1ib29sZWFufGFzZXQtYnl0ZXxhc2V0LWNoYXJ8YXNldC1kb3VibGV8YXNldC1mbG9hdHxhc2V0LWludHxhc2V0LWxvbmd8YXNldC1zaG9ydHxhc3NlcnR8YXNzb2N8YXdhaXR8YXdhaXQtZm9yfGJlYW58YmluZGluZ3xiaXQtYW5kfGJpdC1ub3R8Yml0LW9yfGJpdC1zaGlmdC1sZWZ0fGJpdC1zaGlmdC1yaWdodHxiaXQteG9yfGJvb2xlYW58YnJhbmNoXFw/fGJ1dGxhc3R8Ynl0ZXxjYXN0fGNoYXJ8Y2hpbGRyZW58Y2xhc3N8Y2xlYXItYWdlbnQtZXJyb3JzfGNvbW1lbnR8Y29tbXV0ZXxjb21wfGNvbXBhcmF0b3J8Y29tcGxlbWVudHxjb25jYXR8Y29uZHxjb25qfGNvbnN8Y29uc3RhbnRseXxjb25zdHJ1Y3QtcHJveHl8Y29udGFpbnNcXD98Y291bnR8Y3JlYXRlLW5zfGNyZWF0ZS1zdHJ1Y3R8Y3ljbGV8ZGVjfGRlY2xhcmV8ZGVmfGRlZi18ZGVmaW5saW5lfGRlZmludGVyZmFjZXxkZWZtYWNyb3xkZWZtZXRob2R8ZGVmbXVsdGl8ZGVmbnxkZWZuLXxkZWZvbmNlfGRlZnByb2plY3R8ZGVmcHJvdG9jb2x8ZGVmcmVjb3JkfGRlZnN0cnVjdHxkZWZ0eXBlfGRlcmVmfGRpZmZlcmVuY2V8ZGlzanxkaXNzb2N8ZGlzdGluY3R8ZG98ZG9hbGx8ZG9jfGRvcnVufGRvc2VxfGRvc3luY3xkb3RpbWVzfGRvdG98ZG91YmxlfGRvd258ZHJvcHxkcm9wLXdoaWxlfGVkaXR8ZW5kXFw/fGVuc3VyZXxldmFsfGV2ZXJ5XFw/fGZhbHNlXFw/fGZmaXJzdHxmaWxlLXNlcXxmaWx0ZXJ8ZmluZHxmaW5kLWRvY3xmaW5kLW5zfGZpbmQtdmFyfGZpcnN0fGZsb2F0fGZsdXNofGZufGZuc2VxfGZvcnxmcmVzdHxnZW5zeW18Z2V0fGdldC1wcm94eS1jbGFzc3xoYXNoLW1hcHxoYXNoLXNldHxpZGVudGljYWxcXD98aWRlbnRpdHl8aWZ8aWYtbGV0fGlmLW5vdHxpbXBvcnR8aW4tbnN8aW5jfGluZGV4fGluc2VydC1jaGlsZHxpbnNlcnQtbGVmdHxpbnNlcnQtcmlnaHR8aW5zcGVjdC10YWJsZXxpbnNwZWN0LXRyZWV8aW5zdGFuY2VcXD98aW50fGludGVybGVhdmV8aW50ZXJzZWN0aW9ufGludG98aW50by1hcnJheXxpdGVyYXRlfGpvaW58a2V5fGtleXN8a2V5d29yZHxrZXl3b3JkXFw/fGxhc3R8bGF6eS1jYXR8bGF6eS1jb25zfGxlZnR8bGVmdHN8bGV0fGxpbmUtc2VxfGxpc3R8bGlzdFxcKnxsb2FkfGxvYWQtZmlsZXxsb2NraW5nfGxvbmd8bG9vcHxtYWNyb2V4cGFuZHxtYWNyb2V4cGFuZC0xfG1ha2UtYXJyYXl8bWFrZS1ub2RlfG1hcHxtYXAtaW52ZXJ0fG1hcFxcP3xtYXBjYXR8bWF4fG1heC1rZXl8bWVtZm58bWVyZ2V8bWVyZ2Utd2l0aHxtZXRhfG1pbnxtaW4ta2V5fG1vbml0b3ItZW50ZXJ8bmFtZXxuYW1lc3BhY2V8bmVnXFw/fG5ld3xuZXdsaW5lfG5leHR8bmlsXFw/fG5vZGV8bm90fG5vdC1hbnlcXD98bm90LWV2ZXJ5XFw/fG5vdD18bnN8bnMtaW1wb3J0c3xucy1pbnRlcm5zfG5zLW1hcHxucy1uYW1lfG5zLXB1YmxpY3N8bnMtcmVmZXJzfG5zLXJlc29sdmV8bnMtdW5tYXB8bnRofG50aHJlc3R8b3J8cGFyc2V8cGFydGlhbHxwYXRofHBlZWt8cG9wfHBvc1xcP3xwcnxwci1zdHJ8cHJpbnR8cHJpbnQtc3RyfHByaW50bG58cHJpbnRsbi1zdHJ8cHJufHBybi1zdHJ8cHJvamVjdHxwcm94eXxwcm94eS1tYXBwaW5nc3xxdW90fHF1b3RlfHJhbmR8cmFuZC1pbnR8cmFuZ2V8cmUtZmluZHxyZS1ncm91cHN8cmUtbWF0Y2hlcnxyZS1tYXRjaGVzfHJlLXBhdHRlcm58cmUtc2VxfHJlYWR8cmVhZC1saW5lfHJlY3VyfHJlZHVjZXxyZWZ8cmVmLXNldHxyZWZlcnxyZW18cmVtb3ZlfHJlbW92ZS1tZXRob2R8cmVtb3ZlLW5zfHJlbmFtZXxyZW5hbWUta2V5c3xyZXBlYXR8cmVwbGFjZXxyZXBsaWNhdGV8cmVzb2x2ZXxyZXN0fHJlc3VsdHNldC1zZXF8cmV2ZXJzZXxyZmlyc3R8cmlnaHR8cmlnaHRzfHJvb3R8cnJlc3R8cnNlcXxzZWNvbmR8c2VsZWN0fHNlbGVjdC1rZXlzfHNlbmR8c2VuZC1vZmZ8c2VxfHNlcS16aXB8c2VxXFw/fHNldHxzZXQhfHNob3J0fHNsdXJwfHNvbWV8c29ydHxzb3J0LWJ5fHNvcnRlZC1tYXB8c29ydGVkLW1hcC1ieXxzb3J0ZWQtc2V0fHNwZWNpYWwtc3ltYm9sXFw/fHNwbGl0LWF0fHNwbGl0LXdpdGh8c3RyfHN0cmluZ1xcP3xzdHJ1Y3R8c3RydWN0LW1hcHxzdWJzfHN1YnZlY3xzeW1ib2x8c3ltYm9sXFw/fHN5bmN8dGFrZXx0YWtlLW50aHx0YWtlLXdoaWxlfHRlc3R8dGhyb3d8dGltZXx0by1hcnJheXx0by1hcnJheS0yZHx0cmVlLXNlcXx0cnVlXFw/fHRyeXx1bmlvbnx1cHx1cGRhdGUtcHJveHl8dmFsfHZhbHN8dmFyfHZhci1nZXR8dmFyLXNldHx2YXJcXD98dmVjdG9yfHZlY3Rvci16aXB8dmVjdG9yXFw/fHdoZW58d2hlbi1maXJzdHx3aGVuLWxldHx3aGVuLW5vdHx3aXRoLWxvY2FsLXZhcnN8d2l0aC1tZXRhfHdpdGgtb3Blbnx3aXRoLW91dC1zdHJ8eG1sLXNlcXx4bWwtemlwfHplcm9cXD98emlwbWFwfHppcHBlcikoPz1bXFxzKV18JCkvLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgIH0sXG4gICAgYm9vbGVhbjogL1xcYig/OmZhbHNlfG5pbHx0cnVlKVxcYi8sXG4gICAgbnVtYmVyOiB7XG4gICAgICBwYXR0ZXJuOlxuICAgICAgICAvKF58W15cXHckQF0pKD86XFxkKyg/OlsvLl1cXGQrKT8oPzplWystXT9cXGQrKT98MHhbYS1mMC05XSt8WzEtOV1cXGQ/clthLXowLTldKylbbG1uXT8oPyFbXFx3JEBdKS9pLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgIH0sXG4gICAgZnVuY3Rpb246IHtcbiAgICAgIHBhdHRlcm46IC8oKD86XnxbXiddKVxcKClbXFx3KishPyc8Pj0vLi1dKyg/PVtcXHMpXXwkKS8sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgfSxcbiAgICBvcGVyYXRvcjogL1sjQF5gfl0vLFxuICAgIHB1bmN0dWF0aW9uOiAvW3t9XFxbXFxdKCksXS9cbiAgfVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJjbG9qdXJlIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJjb21tZW50IiwicGF0dGVybiIsImdyZWVkeSIsInN0cmluZyIsInN5bWJvbCIsImxvb2tiZWhpbmQiLCJrZXl3b3JkIiwibnVtYmVyIiwib3BlcmF0b3IiLCJwdW5jdHVhdGlvbiJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/clojure.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/cmake.js":
/*!**********************************************!*\
  !*** ./node_modules/refractor/lang/cmake.js ***!
  \**********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = cmake;\ncmake.displayName = 'cmake';\ncmake.aliases = [];\nfunction cmake(Prism) {\n  Prism.languages.cmake = {\n    comment: /#.*/,\n    string: {\n      pattern: /\"(?:[^\\\\\"]|\\\\.)*\"/,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /\\$\\{(?:[^{}$]|\\$\\{[^{}$]*\\})*\\}/,\n          inside: {\n            punctuation: /\\$\\{|\\}/,\n            variable: /\\w+/\n          }\n        }\n      }\n    },\n    variable: /\\b(?:CMAKE_\\w+|\\w+_(?:(?:BINARY|SOURCE)_DIR|DESCRIPTION|HOMEPAGE_URL|ROOT|VERSION(?:_MAJOR|_MINOR|_PATCH|_TWEAK)?)|(?:ANDROID|APPLE|BORLAND|BUILD_SHARED_LIBS|CACHE|CPACK_(?:ABSOLUTE_DESTINATION_FILES|COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY|ERROR_ON_ABSOLUTE_INSTALL_DESTINATION|INCLUDE_TOPLEVEL_DIRECTORY|INSTALL_DEFAULT_DIRECTORY_PERMISSIONS|INSTALL_SCRIPT|PACKAGING_INSTALL_PREFIX|SET_DESTDIR|WARN_ON_ABSOLUTE_INSTALL_DESTINATION)|CTEST_(?:BINARY_DIRECTORY|BUILD_COMMAND|BUILD_NAME|BZR_COMMAND|BZR_UPDATE_OPTIONS|CHANGE_ID|CHECKOUT_COMMAND|CONFIGURATION_TYPE|CONFIGURE_COMMAND|COVERAGE_COMMAND|COVERAGE_EXTRA_FLAGS|CURL_OPTIONS|CUSTOM_(?:COVERAGE_EXCLUDE|ERROR_EXCEPTION|ERROR_MATCH|ERROR_POST_CONTEXT|ERROR_PRE_CONTEXT|MAXIMUM_FAILED_TEST_OUTPUT_SIZE|MAXIMUM_NUMBER_OF_(?:ERRORS|WARNINGS)|MAXIMUM_PASSED_TEST_OUTPUT_SIZE|MEMCHECK_IGNORE|POST_MEMCHECK|POST_TEST|PRE_MEMCHECK|PRE_TEST|TESTS_IGNORE|WARNING_EXCEPTION|WARNING_MATCH)|CVS_CHECKOUT|CVS_COMMAND|CVS_UPDATE_OPTIONS|DROP_LOCATION|DROP_METHOD|DROP_SITE|DROP_SITE_CDASH|DROP_SITE_PASSWORD|DROP_SITE_USER|EXTRA_COVERAGE_GLOB|GIT_COMMAND|GIT_INIT_SUBMODULES|GIT_UPDATE_CUSTOM|GIT_UPDATE_OPTIONS|HG_COMMAND|HG_UPDATE_OPTIONS|LABELS_FOR_SUBPROJECTS|MEMORYCHECK_(?:COMMAND|COMMAND_OPTIONS|SANITIZER_OPTIONS|SUPPRESSIONS_FILE|TYPE)|NIGHTLY_START_TIME|P4_CLIENT|P4_COMMAND|P4_OPTIONS|P4_UPDATE_OPTIONS|RUN_CURRENT_SCRIPT|SCP_COMMAND|SITE|SOURCE_DIRECTORY|SUBMIT_URL|SVN_COMMAND|SVN_OPTIONS|SVN_UPDATE_OPTIONS|TEST_LOAD|TEST_TIMEOUT|TRIGGER_SITE|UPDATE_COMMAND|UPDATE_OPTIONS|UPDATE_VERSION_ONLY|USE_LAUNCHERS)|CYGWIN|ENV|EXECUTABLE_OUTPUT_PATH|GHS-MULTI|IOS|LIBRARY_OUTPUT_PATH|MINGW|MSVC(?:10|11|12|14|60|70|71|80|90|_IDE|_TOOLSET_VERSION|_VERSION)?|MSYS|PROJECT_(?:BINARY_DIR|DESCRIPTION|HOMEPAGE_URL|NAME|SOURCE_DIR|VERSION|VERSION_(?:MAJOR|MINOR|PATCH|TWEAK))|UNIX|WIN32|WINCE|WINDOWS_PHONE|WINDOWS_STORE|XCODE|XCODE_VERSION))\\b/,\n    property: /\\b(?:cxx_\\w+|(?:ARCHIVE_OUTPUT_(?:DIRECTORY|NAME)|COMPILE_DEFINITIONS|COMPILE_PDB_NAME|COMPILE_PDB_OUTPUT_DIRECTORY|EXCLUDE_FROM_DEFAULT_BUILD|IMPORTED_(?:IMPLIB|LIBNAME|LINK_DEPENDENT_LIBRARIES|LINK_INTERFACE_LANGUAGES|LINK_INTERFACE_LIBRARIES|LINK_INTERFACE_MULTIPLICITY|LOCATION|NO_SONAME|OBJECTS|SONAME)|INTERPROCEDURAL_OPTIMIZATION|LIBRARY_OUTPUT_DIRECTORY|LIBRARY_OUTPUT_NAME|LINK_FLAGS|LINK_INTERFACE_LIBRARIES|LINK_INTERFACE_MULTIPLICITY|LOCATION|MAP_IMPORTED_CONFIG|OSX_ARCHITECTURES|OUTPUT_NAME|PDB_NAME|PDB_OUTPUT_DIRECTORY|RUNTIME_OUTPUT_DIRECTORY|RUNTIME_OUTPUT_NAME|STATIC_LIBRARY_FLAGS|VS_CSHARP|VS_DOTNET_REFERENCEPROP|VS_DOTNET_REFERENCE|VS_GLOBAL_SECTION_POST|VS_GLOBAL_SECTION_PRE|VS_GLOBAL|XCODE_ATTRIBUTE)_\\w+|\\w+_(?:CLANG_TIDY|COMPILER_LAUNCHER|CPPCHECK|CPPLINT|INCLUDE_WHAT_YOU_USE|OUTPUT_NAME|POSTFIX|VISIBILITY_PRESET)|ABSTRACT|ADDITIONAL_MAKE_CLEAN_FILES|ADVANCED|ALIASED_TARGET|ALLOW_DUPLICATE_CUSTOM_TARGETS|ANDROID_(?:ANT_ADDITIONAL_OPTIONS|API|API_MIN|ARCH|ASSETS_DIRECTORIES|GUI|JAR_DEPENDENCIES|NATIVE_LIB_DEPENDENCIES|NATIVE_LIB_DIRECTORIES|PROCESS_MAX|PROGUARD|PROGUARD_CONFIG_PATH|SECURE_PROPS_PATH|SKIP_ANT_STEP|STL_TYPE)|ARCHIVE_OUTPUT_DIRECTORY|ATTACHED_FILES|ATTACHED_FILES_ON_FAIL|AUTOGEN_(?:BUILD_DIR|ORIGIN_DEPENDS|PARALLEL|SOURCE_GROUP|TARGETS_FOLDER|TARGET_DEPENDS)|AUTOMOC|AUTOMOC_(?:COMPILER_PREDEFINES|DEPEND_FILTERS|EXECUTABLE|MACRO_NAMES|MOC_OPTIONS|SOURCE_GROUP|TARGETS_FOLDER)|AUTORCC|AUTORCC_EXECUTABLE|AUTORCC_OPTIONS|AUTORCC_SOURCE_GROUP|AUTOUIC|AUTOUIC_EXECUTABLE|AUTOUIC_OPTIONS|AUTOUIC_SEARCH_PATHS|BINARY_DIR|BUILDSYSTEM_TARGETS|BUILD_RPATH|BUILD_RPATH_USE_ORIGIN|BUILD_WITH_INSTALL_NAME_DIR|BUILD_WITH_INSTALL_RPATH|BUNDLE|BUNDLE_EXTENSION|CACHE_VARIABLES|CLEAN_NO_CUSTOM|COMMON_LANGUAGE_RUNTIME|COMPATIBLE_INTERFACE_(?:BOOL|NUMBER_MAX|NUMBER_MIN|STRING)|COMPILE_(?:DEFINITIONS|FEATURES|FLAGS|OPTIONS|PDB_NAME|PDB_OUTPUT_DIRECTORY)|COST|CPACK_DESKTOP_SHORTCUTS|CPACK_NEVER_OVERWRITE|CPACK_PERMANENT|CPACK_STARTUP_SHORTCUTS|CPACK_START_MENU_SHORTCUTS|CPACK_WIX_ACL|CROSSCOMPILING_EMULATOR|CUDA_EXTENSIONS|CUDA_PTX_COMPILATION|CUDA_RESOLVE_DEVICE_SYMBOLS|CUDA_SEPARABLE_COMPILATION|CUDA_STANDARD|CUDA_STANDARD_REQUIRED|CXX_EXTENSIONS|CXX_STANDARD|CXX_STANDARD_REQUIRED|C_EXTENSIONS|C_STANDARD|C_STANDARD_REQUIRED|DEBUG_CONFIGURATIONS|DEFINE_SYMBOL|DEFINITIONS|DEPENDS|DEPLOYMENT_ADDITIONAL_FILES|DEPLOYMENT_REMOTE_DIRECTORY|DISABLED|DISABLED_FEATURES|ECLIPSE_EXTRA_CPROJECT_CONTENTS|ECLIPSE_EXTRA_NATURES|ENABLED_FEATURES|ENABLED_LANGUAGES|ENABLE_EXPORTS|ENVIRONMENT|EXCLUDE_FROM_ALL|EXCLUDE_FROM_DEFAULT_BUILD|EXPORT_NAME|EXPORT_PROPERTIES|EXTERNAL_OBJECT|EchoString|FAIL_REGULAR_EXPRESSION|FIND_LIBRARY_USE_LIB32_PATHS|FIND_LIBRARY_USE_LIB64_PATHS|FIND_LIBRARY_USE_LIBX32_PATHS|FIND_LIBRARY_USE_OPENBSD_VERSIONING|FIXTURES_CLEANUP|FIXTURES_REQUIRED|FIXTURES_SETUP|FOLDER|FRAMEWORK|Fortran_FORMAT|Fortran_MODULE_DIRECTORY|GENERATED|GENERATOR_FILE_NAME|GENERATOR_IS_MULTI_CONFIG|GHS_INTEGRITY_APP|GHS_NO_SOURCE_GROUP_FILE|GLOBAL_DEPENDS_DEBUG_MODE|GLOBAL_DEPENDS_NO_CYCLES|GNUtoMS|HAS_CXX|HEADER_FILE_ONLY|HELPSTRING|IMPLICIT_DEPENDS_INCLUDE_TRANSFORM|IMPORTED|IMPORTED_(?:COMMON_LANGUAGE_RUNTIME|CONFIGURATIONS|GLOBAL|IMPLIB|LIBNAME|LINK_DEPENDENT_LIBRARIES|LINK_INTERFACE_(?:LANGUAGES|LIBRARIES|MULTIPLICITY)|LOCATION|NO_SONAME|OBJECTS|SONAME)|IMPORT_PREFIX|IMPORT_SUFFIX|INCLUDE_DIRECTORIES|INCLUDE_REGULAR_EXPRESSION|INSTALL_NAME_DIR|INSTALL_RPATH|INSTALL_RPATH_USE_LINK_PATH|INTERFACE_(?:AUTOUIC_OPTIONS|COMPILE_DEFINITIONS|COMPILE_FEATURES|COMPILE_OPTIONS|INCLUDE_DIRECTORIES|LINK_DEPENDS|LINK_DIRECTORIES|LINK_LIBRARIES|LINK_OPTIONS|POSITION_INDEPENDENT_CODE|SOURCES|SYSTEM_INCLUDE_DIRECTORIES)|INTERPROCEDURAL_OPTIMIZATION|IN_TRY_COMPILE|IOS_INSTALL_COMBINED|JOB_POOLS|JOB_POOL_COMPILE|JOB_POOL_LINK|KEEP_EXTENSION|LABELS|LANGUAGE|LIBRARY_OUTPUT_DIRECTORY|LINKER_LANGUAGE|LINK_(?:DEPENDS|DEPENDS_NO_SHARED|DIRECTORIES|FLAGS|INTERFACE_LIBRARIES|INTERFACE_MULTIPLICITY|LIBRARIES|OPTIONS|SEARCH_END_STATIC|SEARCH_START_STATIC|WHAT_YOU_USE)|LISTFILE_STACK|LOCATION|MACOSX_BUNDLE|MACOSX_BUNDLE_INFO_PLIST|MACOSX_FRAMEWORK_INFO_PLIST|MACOSX_PACKAGE_LOCATION|MACOSX_RPATH|MACROS|MANUALLY_ADDED_DEPENDENCIES|MEASUREMENT|MODIFIED|NAME|NO_SONAME|NO_SYSTEM_FROM_IMPORTED|OBJECT_DEPENDS|OBJECT_OUTPUTS|OSX_ARCHITECTURES|OUTPUT_NAME|PACKAGES_FOUND|PACKAGES_NOT_FOUND|PARENT_DIRECTORY|PASS_REGULAR_EXPRESSION|PDB_NAME|PDB_OUTPUT_DIRECTORY|POSITION_INDEPENDENT_CODE|POST_INSTALL_SCRIPT|PREDEFINED_TARGETS_FOLDER|PREFIX|PRE_INSTALL_SCRIPT|PRIVATE_HEADER|PROCESSORS|PROCESSOR_AFFINITY|PROJECT_LABEL|PUBLIC_HEADER|REPORT_UNDEFINED_PROPERTIES|REQUIRED_FILES|RESOURCE|RESOURCE_LOCK|RULE_LAUNCH_COMPILE|RULE_LAUNCH_CUSTOM|RULE_LAUNCH_LINK|RULE_MESSAGES|RUNTIME_OUTPUT_DIRECTORY|RUN_SERIAL|SKIP_AUTOGEN|SKIP_AUTOMOC|SKIP_AUTORCC|SKIP_AUTOUIC|SKIP_BUILD_RPATH|SKIP_RETURN_CODE|SOURCES|SOURCE_DIR|SOVERSION|STATIC_LIBRARY_FLAGS|STATIC_LIBRARY_OPTIONS|STRINGS|SUBDIRECTORIES|SUFFIX|SYMBOLIC|TARGET_ARCHIVES_MAY_BE_SHARED_LIBS|TARGET_MESSAGES|TARGET_SUPPORTS_SHARED_LIBS|TESTS|TEST_INCLUDE_FILE|TEST_INCLUDE_FILES|TIMEOUT|TIMEOUT_AFTER_MATCH|TYPE|USE_FOLDERS|VALUE|VARIABLES|VERSION|VISIBILITY_INLINES_HIDDEN|VS_(?:CONFIGURATION_TYPE|COPY_TO_OUT_DIR|DEBUGGER_(?:COMMAND|COMMAND_ARGUMENTS|ENVIRONMENT|WORKING_DIRECTORY)|DEPLOYMENT_CONTENT|DEPLOYMENT_LOCATION|DOTNET_REFERENCES|DOTNET_REFERENCES_COPY_LOCAL|GLOBAL_KEYWORD|GLOBAL_PROJECT_TYPES|GLOBAL_ROOTNAMESPACE|INCLUDE_IN_VSIX|IOT_STARTUP_TASK|KEYWORD|RESOURCE_GENERATOR|SCC_AUXPATH|SCC_LOCALPATH|SCC_PROJECTNAME|SCC_PROVIDER|SDK_REFERENCES|SHADER_(?:DISABLE_OPTIMIZATIONS|ENABLE_DEBUG|ENTRYPOINT|FLAGS|MODEL|OBJECT_FILE_NAME|OUTPUT_HEADER_FILE|TYPE|VARIABLE_NAME)|STARTUP_PROJECT|TOOL_OVERRIDE|USER_PROPS|WINRT_COMPONENT|WINRT_EXTENSIONS|WINRT_REFERENCES|XAML_TYPE)|WILL_FAIL|WIN32_EXECUTABLE|WINDOWS_EXPORT_ALL_SYMBOLS|WORKING_DIRECTORY|WRAP_EXCLUDE|XCODE_(?:EMIT_EFFECTIVE_PLATFORM_NAME|EXPLICIT_FILE_TYPE|FILE_ATTRIBUTES|LAST_KNOWN_FILE_TYPE|PRODUCT_TYPE|SCHEME_(?:ADDRESS_SANITIZER|ADDRESS_SANITIZER_USE_AFTER_RETURN|ARGUMENTS|DISABLE_MAIN_THREAD_CHECKER|DYNAMIC_LIBRARY_LOADS|DYNAMIC_LINKER_API_USAGE|ENVIRONMENT|EXECUTABLE|GUARD_MALLOC|MAIN_THREAD_CHECKER_STOP|MALLOC_GUARD_EDGES|MALLOC_SCRIBBLE|MALLOC_STACK|THREAD_SANITIZER(?:_STOP)?|UNDEFINED_BEHAVIOUR_SANITIZER(?:_STOP)?|ZOMBIE_OBJECTS))|XCTEST)\\b/,\n    keyword: /\\b(?:add_compile_definitions|add_compile_options|add_custom_command|add_custom_target|add_definitions|add_dependencies|add_executable|add_library|add_link_options|add_subdirectory|add_test|aux_source_directory|break|build_command|build_name|cmake_host_system_information|cmake_minimum_required|cmake_parse_arguments|cmake_policy|configure_file|continue|create_test_sourcelist|ctest_build|ctest_configure|ctest_coverage|ctest_empty_binary_directory|ctest_memcheck|ctest_read_custom_files|ctest_run_script|ctest_sleep|ctest_start|ctest_submit|ctest_test|ctest_update|ctest_upload|define_property|else|elseif|enable_language|enable_testing|endforeach|endfunction|endif|endmacro|endwhile|exec_program|execute_process|export|export_library_dependencies|file|find_file|find_library|find_package|find_path|find_program|fltk_wrap_ui|foreach|function|get_cmake_property|get_directory_property|get_filename_component|get_property|get_source_file_property|get_target_property|get_test_property|if|include|include_directories|include_external_msproject|include_guard|include_regular_expression|install|install_files|install_programs|install_targets|link_directories|link_libraries|list|load_cache|load_command|macro|make_directory|mark_as_advanced|math|message|option|output_required_files|project|qt_wrap_cpp|qt_wrap_ui|remove|remove_definitions|return|separate_arguments|set|set_directory_properties|set_property|set_source_files_properties|set_target_properties|set_tests_properties|site_name|source_group|string|subdir_depends|subdirs|target_compile_definitions|target_compile_features|target_compile_options|target_include_directories|target_link_directories|target_link_libraries|target_link_options|target_sources|try_compile|try_run|unset|use_mangled_mesa|utility_source|variable_requires|variable_watch|while|write_file)(?=\\s*\\()\\b/,\n    \"boolean\": /\\b(?:FALSE|OFF|ON|TRUE)\\b/,\n    namespace: /\\b(?:INTERFACE|PRIVATE|PROPERTIES|PUBLIC|SHARED|STATIC|TARGET_OBJECTS)\\b/,\n    operator: /\\b(?:AND|DEFINED|EQUAL|GREATER|LESS|MATCHES|NOT|OR|STREQUAL|STRGREATER|STRLESS|VERSION_EQUAL|VERSION_GREATER|VERSION_LESS)\\b/,\n    inserted: {\n      pattern: /\\b\\w+::\\w+\\b/,\n      alias: 'class-name'\n    },\n    number: /\\b\\d+(?:\\.\\d+)*\\b/,\n    \"function\": /\\b[a-z_]\\w*(?=\\s*\\()\\b/i,\n    punctuation: /[()>}]|\\$[<{]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/cmake.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/cobol.js":
/*!**********************************************!*\
  !*** ./node_modules/refractor/lang/cobol.js ***!
  \**********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = cobol;\ncobol.displayName = 'cobol';\ncobol.aliases = [];\nfunction cobol(Prism) {\n  Prism.languages.cobol = {\n    comment: {\n      pattern: /\\*>.*|(^[ \\t]*)\\*.*/m,\n      lookbehind: true,\n      greedy: true\n    },\n    string: {\n      pattern: /[xzgn]?(?:\"(?:[^\\r\\n\"]|\"\")*\"(?!\")|'(?:[^\\r\\n']|'')*'(?!'))/i,\n      greedy: true\n    },\n    level: {\n      pattern: /(^[ \\t]*)\\d+\\b/m,\n      lookbehind: true,\n      greedy: true,\n      alias: 'number'\n    },\n    'class-name': {\n      // https://github.com/antlr/grammars-v4/blob/42edd5b687d183b5fa679e858a82297bd27141e7/cobol85/Cobol85.g4#L1015\n      pattern: /(\\bpic(?:ture)?\\s+)(?:(?:[-\\w$/,:*+<>]|\\.(?!\\s|$))(?:\\(\\d+\\))?)+/i,\n      lookbehind: true,\n      inside: {\n        number: {\n          pattern: /(\\()\\d+/,\n          lookbehind: true\n        },\n        punctuation: /[()]/\n      }\n    },\n    keyword: {\n      pattern: /(^|[^\\w-])(?:ABORT|ACCEPT|ACCESS|ADD|ADDRESS|ADVANCING|AFTER|ALIGNED|ALL|ALPHABET|ALPHABETIC|ALPHABETIC-LOWER|ALPHABETIC-UPPER|ALPHANUMERIC|ALPHANUMERIC-EDITED|ALSO|ALTER|ALTERNATE|ANY|ARE|AREA|AREAS|AS|ASCENDING|ASCII|ASSIGN|ASSOCIATED-DATA|ASSOCIATED-DATA-LENGTH|AT|ATTRIBUTE|AUTHOR|AUTO|AUTO-SKIP|BACKGROUND-COLOR|BACKGROUND-COLOUR|BASIS|BEEP|BEFORE|BEGINNING|BELL|BINARY|BIT|BLANK|BLINK|BLOCK|BOTTOM|BOUNDS|BY|BYFUNCTION|BYTITLE|CALL|CANCEL|CAPABLE|CCSVERSION|CD|CF|CH|CHAINING|CHANGED|CHANNEL|CHARACTER|CHARACTERS|CLASS|CLASS-ID|CLOCK-UNITS|CLOSE|CLOSE-DISPOSITION|COBOL|CODE|CODE-SET|COL|COLLATING|COLUMN|COM-REG|COMMA|COMMITMENT|COMMON|COMMUNICATION|COMP|COMP-1|COMP-2|COMP-3|COMP-4|COMP-5|COMPUTATIONAL|COMPUTATIONAL-1|COMPUTATIONAL-2|COMPUTATIONAL-3|COMPUTATIONAL-4|COMPUTATIONAL-5|COMPUTE|CONFIGURATION|CONTAINS|CONTENT|CONTINUE|CONTROL|CONTROL-POINT|CONTROLS|CONVENTION|CONVERTING|COPY|CORR|CORRESPONDING|COUNT|CRUNCH|CURRENCY|CURSOR|DATA|DATA-BASE|DATE|DATE-COMPILED|DATE-WRITTEN|DAY|DAY-OF-WEEK|DBCS|DE|DEBUG-CONTENTS|DEBUG-ITEM|DEBUG-LINE|DEBUG-NAME|DEBUG-SUB-1|DEBUG-SUB-2|DEBUG-SUB-3|DEBUGGING|DECIMAL-POINT|DECLARATIVES|DEFAULT|DEFAULT-DISPLAY|DEFINITION|DELETE|DELIMITED|DELIMITER|DEPENDING|DESCENDING|DESTINATION|DETAIL|DFHRESP|DFHVALUE|DISABLE|DISK|DISPLAY|DISPLAY-1|DIVIDE|DIVISION|DONTCARE|DOUBLE|DOWN|DUPLICATES|DYNAMIC|EBCDIC|EGCS|EGI|ELSE|EMI|EMPTY-CHECK|ENABLE|END|END-ACCEPT|END-ADD|END-CALL|END-COMPUTE|END-DELETE|END-DIVIDE|END-EVALUATE|END-IF|END-MULTIPLY|END-OF-PAGE|END-PERFORM|END-READ|END-RECEIVE|END-RETURN|END-REWRITE|END-SEARCH|END-START|END-STRING|END-SUBTRACT|END-UNSTRING|END-WRITE|ENDING|ENTER|ENTRY|ENTRY-PROCEDURE|ENVIRONMENT|EOL|EOP|EOS|ERASE|ERROR|ESCAPE|ESI|EVALUATE|EVENT|EVERY|EXCEPTION|EXCLUSIVE|EXHIBIT|EXIT|EXPORT|EXTEND|EXTENDED|EXTERNAL|FD|FILE|FILE-CONTROL|FILLER|FINAL|FIRST|FOOTING|FOR|FOREGROUND-COLOR|FOREGROUND-COLOUR|FROM|FULL|FUNCTION|FUNCTION-POINTER|FUNCTIONNAME|GENERATE|GIVING|GLOBAL|GO|GOBACK|GRID|GROUP|HEADING|HIGH-VALUE|HIGH-VALUES|HIGHLIGHT|I-O|I-O-CONTROL|ID|IDENTIFICATION|IF|IMPLICIT|IMPORT|IN|INDEX|INDEXED|INDICATE|INITIAL|INITIALIZE|INITIATE|INPUT|INPUT-OUTPUT|INSPECT|INSTALLATION|INTEGER|INTO|INVALID|INVOKE|IS|JUST|JUSTIFIED|KANJI|KEPT|KEY|KEYBOARD|LABEL|LANGUAGE|LAST|LB|LD|LEADING|LEFT|LEFTLINE|LENGTH|LENGTH-CHECK|LIBACCESS|LIBPARAMETER|LIBRARY|LIMIT|LIMITS|LINAGE|LINAGE-COUNTER|LINE|LINE-COUNTER|LINES|LINKAGE|LIST|LOCAL|LOCAL-STORAGE|LOCK|LONG-DATE|LONG-TIME|LOW-VALUE|LOW-VALUES|LOWER|LOWLIGHT|MEMORY|MERGE|MESSAGE|MMDDYYYY|MODE|MODULES|MORE-LABELS|MOVE|MULTIPLE|MULTIPLY|NAMED|NATIONAL|NATIONAL-EDITED|NATIVE|NEGATIVE|NETWORK|NEXT|NO|NO-ECHO|NULL|NULLS|NUMBER|NUMERIC|NUMERIC-DATE|NUMERIC-EDITED|NUMERIC-TIME|OBJECT-COMPUTER|OCCURS|ODT|OF|OFF|OMITTED|ON|OPEN|OPTIONAL|ORDER|ORDERLY|ORGANIZATION|OTHER|OUTPUT|OVERFLOW|OVERLINE|OWN|PACKED-DECIMAL|PADDING|PAGE|PAGE-COUNTER|PASSWORD|PERFORM|PF|PH|PIC|PICTURE|PLUS|POINTER|PORT|POSITION|POSITIVE|PRINTER|PRINTING|PRIVATE|PROCEDURE|PROCEDURE-POINTER|PROCEDURES|PROCEED|PROCESS|PROGRAM|PROGRAM-ID|PROGRAM-LIBRARY|PROMPT|PURGE|QUEUE|QUOTE|QUOTES|RANDOM|RD|READ|READER|REAL|RECEIVE|RECEIVED|RECORD|RECORDING|RECORDS|RECURSIVE|REDEFINES|REEL|REF|REFERENCE|REFERENCES|RELATIVE|RELEASE|REMAINDER|REMARKS|REMOTE|REMOVAL|REMOVE|RENAMES|REPLACE|REPLACING|REPORT|REPORTING|REPORTS|REQUIRED|RERUN|RESERVE|RESET|RETURN|RETURN-CODE|RETURNING|REVERSE-VIDEO|REVERSED|REWIND|REWRITE|RF|RH|RIGHT|ROUNDED|RUN|SAME|SAVE|SCREEN|SD|SEARCH|SECTION|SECURE|SECURITY|SEGMENT|SEGMENT-LIMIT|SELECT|SEND|SENTENCE|SEPARATE|SEQUENCE|SEQUENTIAL|SET|SHARED|SHAREDBYALL|SHAREDBYRUNUNIT|SHARING|SHIFT-IN|SHIFT-OUT|SHORT-DATE|SIGN|SIZE|SORT|SORT-CONTROL|SORT-CORE-SIZE|SORT-FILE-SIZE|SORT-MERGE|SORT-MESSAGE|SORT-MODE-SIZE|SORT-RETURN|SOURCE|SOURCE-COMPUTER|SPACE|SPACES|SPECIAL-NAMES|STANDARD|STANDARD-1|STANDARD-2|START|STATUS|STOP|STRING|SUB-QUEUE-1|SUB-QUEUE-2|SUB-QUEUE-3|SUBTRACT|SUM|SUPPRESS|SYMBOL|SYMBOLIC|SYNC|SYNCHRONIZED|TABLE|TALLY|TALLYING|TAPE|TASK|TERMINAL|TERMINATE|TEST|TEXT|THEN|THREAD|THREAD-LOCAL|THROUGH|THRU|TIME|TIMER|TIMES|TITLE|TO|TODAYS-DATE|TODAYS-NAME|TOP|TRAILING|TRUNCATED|TYPE|TYPEDEF|UNDERLINE|UNIT|UNSTRING|UNTIL|UP|UPON|USAGE|USE|USING|VALUE|VALUES|VARYING|VIRTUAL|WAIT|WHEN|WHEN-COMPILED|WITH|WORDS|WORKING-STORAGE|WRITE|YEAR|YYYYDDD|YYYYMMDD|ZERO-FILL|ZEROES|ZEROS)(?![\\w-])/i,\n      lookbehind: true\n    },\n    \"boolean\": {\n      pattern: /(^|[^\\w-])(?:false|true)(?![\\w-])/i,\n      lookbehind: true\n    },\n    number: {\n      pattern: /(^|[^\\w-])(?:[+-]?(?:(?:\\d+(?:[.,]\\d+)?|[.,]\\d+)(?:e[+-]?\\d+)?|zero))(?![\\w-])/i,\n      lookbehind: true\n    },\n    operator: [/<>|[<>]=?|[=+*/&]/, {\n      pattern: /(^|[^\\w-])(?:-|and|equal|greater|less|not|or|than)(?![\\w-])/i,\n      lookbehind: true\n    }],\n    punctuation: /[.:,()]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/cobol.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/coffeescript.js":
/*!*****************************************************!*\
  !*** ./node_modules/refractor/lang/coffeescript.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = coffeescript;\ncoffeescript.displayName = 'coffeescript';\ncoffeescript.aliases = ['coffee'];\nfunction coffeescript(Prism) {\n  ;\n  (function (Prism) {\n    // Ignore comments starting with { to privilege string interpolation highlighting\n    var comment = /#(?!\\{).+/;\n    var interpolation = {\n      pattern: /#\\{[^}]+\\}/,\n      alias: 'variable'\n    };\n    Prism.languages.coffeescript = Prism.languages.extend('javascript', {\n      comment: comment,\n      string: [\n      // Strings are multiline\n      {\n        pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n        greedy: true\n      }, {\n        // Strings are multiline\n        pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }],\n      keyword: /\\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\\b/,\n      'class-member': {\n        pattern: /@(?!\\d)\\w+/,\n        alias: 'variable'\n      }\n    });\n    Prism.languages.insertBefore('coffeescript', 'comment', {\n      'multiline-comment': {\n        pattern: /###[\\s\\S]+?###/,\n        alias: 'comment'\n      },\n      // Block regexp can contain comments and interpolation\n      'block-regex': {\n        pattern: /\\/{3}[\\s\\S]*?\\/{3}/,\n        alias: 'regex',\n        inside: {\n          comment: comment,\n          interpolation: interpolation\n        }\n      }\n    });\n    Prism.languages.insertBefore('coffeescript', 'string', {\n      'inline-javascript': {\n        pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n        inside: {\n          delimiter: {\n            pattern: /^`|`$/,\n            alias: 'punctuation'\n          },\n          script: {\n            pattern: /[\\s\\S]+/,\n            alias: 'language-javascript',\n            inside: Prism.languages.javascript\n          }\n        }\n      },\n      // Block strings\n      'multiline-string': [{\n        pattern: /'''[\\s\\S]*?'''/,\n        greedy: true,\n        alias: 'string'\n      }, {\n        pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          interpolation: interpolation\n        }\n      }]\n    });\n    Prism.languages.insertBefore('coffeescript', 'keyword', {\n      // Object property\n      property: /(?!\\d)\\w+(?=\\s*:(?!:))/\n    });\n    delete Prism.languages.coffeescript['template-string'];\n    Prism.languages.coffee = Prism.languages.coffeescript;\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvY29mZmVlc2NyaXB0LmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsWUFBWTtBQUM3QkEsWUFBWSxDQUFDQyxXQUFXLEdBQUcsY0FBYztBQUN6Q0QsWUFBWSxDQUFDRSxPQUFPLEdBQUcsQ0FBQyxRQUFRLENBQUM7QUFDakMsU0FBU0YsWUFBWUEsQ0FBQ0csS0FBSyxFQUFFO0VBQzNCO0VBQUMsQ0FBQyxVQUFVQSxLQUFLLEVBQUU7SUFDakI7SUFDQSxJQUFJQyxPQUFPLEdBQUcsV0FBVztJQUN6QixJQUFJQyxhQUFhLEdBQUc7TUFDbEJDLE9BQU8sRUFBRSxZQUFZO01BQ3JCQyxLQUFLLEVBQUU7SUFDVCxDQUFDO0lBQ0RKLEtBQUssQ0FBQ0ssU0FBUyxDQUFDUixZQUFZLEdBQUdHLEtBQUssQ0FBQ0ssU0FBUyxDQUFDQyxNQUFNLENBQUMsWUFBWSxFQUFFO01BQ2xFTCxPQUFPLEVBQUVBLE9BQU87TUFDaEJNLE1BQU0sRUFBRTtNQUNOO01BQ0E7UUFDRUosT0FBTyxFQUFFLHdCQUF3QjtRQUNqQ0ssTUFBTSxFQUFFO01BQ1YsQ0FBQyxFQUNEO1FBQ0U7UUFDQUwsT0FBTyxFQUFFLHdCQUF3QjtRQUNqQ0ssTUFBTSxFQUFFLElBQUk7UUFDWkMsTUFBTSxFQUFFO1VBQ05QLGFBQWEsRUFBRUE7UUFDakI7TUFDRixDQUFDLENBQ0Y7TUFDRFEsT0FBTyxFQUNMLGtTQUFrUztNQUNwUyxjQUFjLEVBQUU7UUFDZFAsT0FBTyxFQUFFLFlBQVk7UUFDckJDLEtBQUssRUFBRTtNQUNUO0lBQ0YsQ0FBQyxDQUFDO0lBQ0ZKLEtBQUssQ0FBQ0ssU0FBUyxDQUFDTSxZQUFZLENBQUMsY0FBYyxFQUFFLFNBQVMsRUFBRTtNQUN0RCxtQkFBbUIsRUFBRTtRQUNuQlIsT0FBTyxFQUFFLGdCQUFnQjtRQUN6QkMsS0FBSyxFQUFFO01BQ1QsQ0FBQztNQUNEO01BQ0EsYUFBYSxFQUFFO1FBQ2JELE9BQU8sRUFBRSxvQkFBb0I7UUFDN0JDLEtBQUssRUFBRSxPQUFPO1FBQ2RLLE1BQU0sRUFBRTtVQUNOUixPQUFPLEVBQUVBLE9BQU87VUFDaEJDLGFBQWEsRUFBRUE7UUFDakI7TUFDRjtJQUNGLENBQUMsQ0FBQztJQUNGRixLQUFLLENBQUNLLFNBQVMsQ0FBQ00sWUFBWSxDQUFDLGNBQWMsRUFBRSxRQUFRLEVBQUU7TUFDckQsbUJBQW1CLEVBQUU7UUFDbkJSLE9BQU8sRUFBRSx3QkFBd0I7UUFDakNNLE1BQU0sRUFBRTtVQUNORyxTQUFTLEVBQUU7WUFDVFQsT0FBTyxFQUFFLE9BQU87WUFDaEJDLEtBQUssRUFBRTtVQUNULENBQUM7VUFDRFMsTUFBTSxFQUFFO1lBQ05WLE9BQU8sRUFBRSxTQUFTO1lBQ2xCQyxLQUFLLEVBQUUscUJBQXFCO1lBQzVCSyxNQUFNLEVBQUVULEtBQUssQ0FBQ0ssU0FBUyxDQUFDUztVQUMxQjtRQUNGO01BQ0YsQ0FBQztNQUNEO01BQ0Esa0JBQWtCLEVBQUUsQ0FDbEI7UUFDRVgsT0FBTyxFQUFFLGdCQUFnQjtRQUN6QkssTUFBTSxFQUFFLElBQUk7UUFDWkosS0FBSyxFQUFFO01BQ1QsQ0FBQyxFQUNEO1FBQ0VELE9BQU8sRUFBRSxnQkFBZ0I7UUFDekJLLE1BQU0sRUFBRSxJQUFJO1FBQ1pKLEtBQUssRUFBRSxRQUFRO1FBQ2ZLLE1BQU0sRUFBRTtVQUNOUCxhQUFhLEVBQUVBO1FBQ2pCO01BQ0YsQ0FBQztJQUVMLENBQUMsQ0FBQztJQUNGRixLQUFLLENBQUNLLFNBQVMsQ0FBQ00sWUFBWSxDQUFDLGNBQWMsRUFBRSxTQUFTLEVBQUU7TUFDdEQ7TUFDQUksUUFBUSxFQUFFO0lBQ1osQ0FBQyxDQUFDO0lBQ0YsT0FBT2YsS0FBSyxDQUFDSyxTQUFTLENBQUNSLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQztJQUN0REcsS0FBSyxDQUFDSyxTQUFTLENBQUNXLE1BQU0sR0FBR2hCLEtBQUssQ0FBQ0ssU0FBUyxDQUFDUixZQUFZO0VBQ3ZELENBQUMsRUFBRUcsS0FBSyxDQUFDO0FBQ1giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxjb2ZmZWVzY3JpcHQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gY29mZmVlc2NyaXB0XG5jb2ZmZWVzY3JpcHQuZGlzcGxheU5hbWUgPSAnY29mZmVlc2NyaXB0J1xuY29mZmVlc2NyaXB0LmFsaWFzZXMgPSBbJ2NvZmZlZSddXG5mdW5jdGlvbiBjb2ZmZWVzY3JpcHQoUHJpc20pIHtcbiAgOyhmdW5jdGlvbiAoUHJpc20pIHtcbiAgICAvLyBJZ25vcmUgY29tbWVudHMgc3RhcnRpbmcgd2l0aCB7IHRvIHByaXZpbGVnZSBzdHJpbmcgaW50ZXJwb2xhdGlvbiBoaWdobGlnaHRpbmdcbiAgICB2YXIgY29tbWVudCA9IC8jKD8hXFx7KS4rL1xuICAgIHZhciBpbnRlcnBvbGF0aW9uID0ge1xuICAgICAgcGF0dGVybjogLyNcXHtbXn1dK1xcfS8sXG4gICAgICBhbGlhczogJ3ZhcmlhYmxlJ1xuICAgIH1cbiAgICBQcmlzbS5sYW5ndWFnZXMuY29mZmVlc2NyaXB0ID0gUHJpc20ubGFuZ3VhZ2VzLmV4dGVuZCgnamF2YXNjcmlwdCcsIHtcbiAgICAgIGNvbW1lbnQ6IGNvbW1lbnQsXG4gICAgICBzdHJpbmc6IFtcbiAgICAgICAgLy8gU3RyaW5ncyBhcmUgbXVsdGlsaW5lXG4gICAgICAgIHtcbiAgICAgICAgICBwYXR0ZXJuOiAvJyg/OlxcXFxbXFxzXFxTXXxbXlxcXFwnXSkqJy8sXG4gICAgICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAvLyBTdHJpbmdzIGFyZSBtdWx0aWxpbmVcbiAgICAgICAgICBwYXR0ZXJuOiAvXCIoPzpcXFxcW1xcc1xcU118W15cXFxcXCJdKSpcIi8sXG4gICAgICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgICAgIGluc2lkZToge1xuICAgICAgICAgICAgaW50ZXJwb2xhdGlvbjogaW50ZXJwb2xhdGlvblxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIGtleXdvcmQ6XG4gICAgICAgIC9cXGIoPzphbmR8YnJlYWt8Ynl8Y2F0Y2h8Y2xhc3N8Y29udGludWV8ZGVidWdnZXJ8ZGVsZXRlfGRvfGVhY2h8ZWxzZXxleHRlbmR8ZXh0ZW5kc3xmYWxzZXxmaW5hbGx5fGZvcnxpZnxpbnxpbnN0YW5jZW9mfGlzfGlzbnR8bGV0fGxvb3B8bmFtZXNwYWNlfG5ld3xub3xub3R8bnVsbHxvZnxvZmZ8b258b3J8b3dufHJldHVybnxzdXBlcnxzd2l0Y2h8dGhlbnx0aGlzfHRocm93fHRydWV8dHJ5fHR5cGVvZnx1bmRlZmluZWR8dW5sZXNzfHVudGlsfHdoZW58d2hpbGV8d2luZG93fHdpdGh8eWVzfHlpZWxkKVxcYi8sXG4gICAgICAnY2xhc3MtbWVtYmVyJzoge1xuICAgICAgICBwYXR0ZXJuOiAvQCg/IVxcZClcXHcrLyxcbiAgICAgICAgYWxpYXM6ICd2YXJpYWJsZSdcbiAgICAgIH1cbiAgICB9KVxuICAgIFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ2NvZmZlZXNjcmlwdCcsICdjb21tZW50Jywge1xuICAgICAgJ211bHRpbGluZS1jb21tZW50Jzoge1xuICAgICAgICBwYXR0ZXJuOiAvIyMjW1xcc1xcU10rPyMjIy8sXG4gICAgICAgIGFsaWFzOiAnY29tbWVudCdcbiAgICAgIH0sXG4gICAgICAvLyBCbG9jayByZWdleHAgY2FuIGNvbnRhaW4gY29tbWVudHMgYW5kIGludGVycG9sYXRpb25cbiAgICAgICdibG9jay1yZWdleCc6IHtcbiAgICAgICAgcGF0dGVybjogL1xcL3szfVtcXHNcXFNdKj9cXC97M30vLFxuICAgICAgICBhbGlhczogJ3JlZ2V4JyxcbiAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgY29tbWVudDogY29tbWVudCxcbiAgICAgICAgICBpbnRlcnBvbGF0aW9uOiBpbnRlcnBvbGF0aW9uXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuICAgIFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ2NvZmZlZXNjcmlwdCcsICdzdHJpbmcnLCB7XG4gICAgICAnaW5saW5lLWphdmFzY3JpcHQnOiB7XG4gICAgICAgIHBhdHRlcm46IC9gKD86XFxcXFtcXHNcXFNdfFteXFxcXGBdKSpgLyxcbiAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgZGVsaW1pdGVyOiB7XG4gICAgICAgICAgICBwYXR0ZXJuOiAvXmB8YCQvLFxuICAgICAgICAgICAgYWxpYXM6ICdwdW5jdHVhdGlvbidcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNjcmlwdDoge1xuICAgICAgICAgICAgcGF0dGVybjogL1tcXHNcXFNdKy8sXG4gICAgICAgICAgICBhbGlhczogJ2xhbmd1YWdlLWphdmFzY3JpcHQnLFxuICAgICAgICAgICAgaW5zaWRlOiBQcmlzbS5sYW5ndWFnZXMuamF2YXNjcmlwdFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIEJsb2NrIHN0cmluZ3NcbiAgICAgICdtdWx0aWxpbmUtc3RyaW5nJzogW1xuICAgICAgICB7XG4gICAgICAgICAgcGF0dGVybjogLycnJ1tcXHNcXFNdKj8nJycvLFxuICAgICAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgICAgICBhbGlhczogJ3N0cmluZydcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHBhdHRlcm46IC9cIlwiXCJbXFxzXFxTXSo/XCJcIlwiLyxcbiAgICAgICAgICBncmVlZHk6IHRydWUsXG4gICAgICAgICAgYWxpYXM6ICdzdHJpbmcnLFxuICAgICAgICAgIGluc2lkZToge1xuICAgICAgICAgICAgaW50ZXJwb2xhdGlvbjogaW50ZXJwb2xhdGlvblxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0pXG4gICAgUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgnY29mZmVlc2NyaXB0JywgJ2tleXdvcmQnLCB7XG4gICAgICAvLyBPYmplY3QgcHJvcGVydHlcbiAgICAgIHByb3BlcnR5OiAvKD8hXFxkKVxcdysoPz1cXHMqOig/ITopKS9cbiAgICB9KVxuICAgIGRlbGV0ZSBQcmlzbS5sYW5ndWFnZXMuY29mZmVlc2NyaXB0Wyd0ZW1wbGF0ZS1zdHJpbmcnXVxuICAgIFByaXNtLmxhbmd1YWdlcy5jb2ZmZWUgPSBQcmlzbS5sYW5ndWFnZXMuY29mZmVlc2NyaXB0XG4gIH0pKFByaXNtKVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJjb2ZmZWVzY3JpcHQiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImNvbW1lbnQiLCJpbnRlcnBvbGF0aW9uIiwicGF0dGVybiIsImFsaWFzIiwibGFuZ3VhZ2VzIiwiZXh0ZW5kIiwic3RyaW5nIiwiZ3JlZWR5IiwiaW5zaWRlIiwia2V5d29yZCIsImluc2VydEJlZm9yZSIsImRlbGltaXRlciIsInNjcmlwdCIsImphdmFzY3JpcHQiLCJwcm9wZXJ0eSIsImNvZmZlZSJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/coffeescript.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/concurnas.js":
/*!**************************************************!*\
  !*** ./node_modules/refractor/lang/concurnas.js ***!
  \**************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = concurnas;\nconcurnas.displayName = 'concurnas';\nconcurnas.aliases = ['conc'];\nfunction concurnas(Prism) {\n  Prism.languages.concurnas = {\n    comment: {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?(?:\\*\\/|$)|\\/\\/.*)/,\n      lookbehind: true,\n      greedy: true\n    },\n    langext: {\n      pattern: /\\b\\w+\\s*\\|\\|[\\s\\S]+?\\|\\|/,\n      greedy: true,\n      inside: {\n        'class-name': /^\\w+/,\n        string: {\n          pattern: /(^\\s*\\|\\|)[\\s\\S]+(?=\\|\\|$)/,\n          lookbehind: true\n        },\n        punctuation: /\\|\\|/\n      }\n    },\n    \"function\": {\n      pattern: /((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/,\n      lookbehind: true\n    },\n    keyword: /\\b(?:abstract|actor|also|annotation|assert|async|await|bool|boolean|break|byte|case|catch|changed|char|class|closed|constant|continue|def|default|del|double|elif|else|enum|every|extends|false|finally|float|for|from|global|gpudef|gpukernel|if|import|in|init|inject|int|lambda|local|long|loop|match|new|nodefault|null|of|onchange|open|out|override|package|parfor|parforsync|post|pre|private|protected|provide|provider|public|return|shared|short|single|size_t|sizeof|super|sync|this|throw|trait|trans|transient|true|try|typedef|unchecked|using|val|var|void|while|with)\\b/,\n    \"boolean\": /\\b(?:false|true)\\b/,\n    number: /\\b0b[01][01_]*L?\\b|\\b0x(?:[\\da-f_]*\\.)?[\\da-f_p+-]+\\b|(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfls]?/i,\n    punctuation: /[{}[\\];(),.:]/,\n    operator: /<==|>==|=>|->|<-|<>|&==|&<>|\\?:?|\\.\\?|\\+\\+|--|[-+*/=<>]=?|[!^~]|\\b(?:and|as|band|bor|bxor|comp|is|isnot|mod|or)\\b=?/,\n    annotation: {\n      pattern: /@(?:\\w+:)?(?:\\w+|\\[[^\\]]+\\])?/,\n      alias: 'builtin'\n    }\n  };\n  Prism.languages.insertBefore('concurnas', 'langext', {\n    'regex-literal': {\n      pattern: /\\br(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\n          lookbehind: true,\n          inside: Prism.languages.concurnas\n        },\n        regex: /[\\s\\S]+/\n      }\n    },\n    'string-literal': {\n      pattern: /(?:\\B|\\bs)(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\n          lookbehind: true,\n          inside: Prism.languages.concurnas\n        },\n        string: /[\\s\\S]+/\n      }\n    }\n  });\n  Prism.languages.conc = Prism.languages.concurnas;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvY29uY3VybmFzLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsU0FBUztBQUMxQkEsU0FBUyxDQUFDQyxXQUFXLEdBQUcsV0FBVztBQUNuQ0QsU0FBUyxDQUFDRSxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUM7QUFDNUIsU0FBU0YsU0FBU0EsQ0FBQ0csS0FBSyxFQUFFO0VBQ3hCQSxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osU0FBUyxHQUFHO0lBQzFCSyxPQUFPLEVBQUU7TUFDUEMsT0FBTyxFQUFFLDRDQUE0QztNQUNyREMsVUFBVSxFQUFFLElBQUk7TUFDaEJDLE1BQU0sRUFBRTtJQUNWLENBQUM7SUFDREMsT0FBTyxFQUFFO01BQ1BILE9BQU8sRUFBRSwwQkFBMEI7TUFDbkNFLE1BQU0sRUFBRSxJQUFJO01BQ1pFLE1BQU0sRUFBRTtRQUNOLFlBQVksRUFBRSxNQUFNO1FBQ3BCQyxNQUFNLEVBQUU7VUFDTkwsT0FBTyxFQUFFLDRCQUE0QjtVQUNyQ0MsVUFBVSxFQUFFO1FBQ2QsQ0FBQztRQUNESyxXQUFXLEVBQUU7TUFDZjtJQUNGLENBQUM7SUFDRCxZQUFVO01BQ1JOLE9BQU8sRUFBRSwwQ0FBMEM7TUFDbkRDLFVBQVUsRUFBRTtJQUNkLENBQUM7SUFDRE0sT0FBTyxFQUNMLHlqQkFBeWpCO0lBQzNqQixXQUFTLG9CQUFvQjtJQUM3QkMsTUFBTSxFQUNKLDJIQUEySDtJQUM3SEYsV0FBVyxFQUFFLGVBQWU7SUFDNUJHLFFBQVEsRUFDTixxSEFBcUg7SUFDdkhDLFVBQVUsRUFBRTtNQUNWVixPQUFPLEVBQUUsK0JBQStCO01BQ3hDVyxLQUFLLEVBQUU7SUFDVDtFQUNGLENBQUM7RUFDRGQsS0FBSyxDQUFDQyxTQUFTLENBQUNjLFlBQVksQ0FBQyxXQUFXLEVBQUUsU0FBUyxFQUFFO0lBQ25ELGVBQWUsRUFBRTtNQUNmWixPQUFPLEVBQUUsb0NBQW9DO01BQzdDRSxNQUFNLEVBQUUsSUFBSTtNQUNaRSxNQUFNLEVBQUU7UUFDTlMsYUFBYSxFQUFFO1VBQ2JiLE9BQU8sRUFDTCxnRUFBZ0U7VUFDbEVDLFVBQVUsRUFBRSxJQUFJO1VBQ2hCRyxNQUFNLEVBQUVQLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSjtRQUMxQixDQUFDO1FBQ0RvQixLQUFLLEVBQUU7TUFDVDtJQUNGLENBQUM7SUFDRCxnQkFBZ0IsRUFBRTtNQUNoQmQsT0FBTyxFQUFFLDJDQUEyQztNQUNwREUsTUFBTSxFQUFFLElBQUk7TUFDWkUsTUFBTSxFQUFFO1FBQ05TLGFBQWEsRUFBRTtVQUNiYixPQUFPLEVBQ0wsZ0VBQWdFO1VBQ2xFQyxVQUFVLEVBQUUsSUFBSTtVQUNoQkcsTUFBTSxFQUFFUCxLQUFLLENBQUNDLFNBQVMsQ0FBQ0o7UUFDMUIsQ0FBQztRQUNEVyxNQUFNLEVBQUU7TUFDVjtJQUNGO0VBQ0YsQ0FBQyxDQUFDO0VBQ0ZSLEtBQUssQ0FBQ0MsU0FBUyxDQUFDaUIsSUFBSSxHQUFHbEIsS0FBSyxDQUFDQyxTQUFTLENBQUNKLFNBQVM7QUFDbEQiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxjb25jdXJuYXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gY29uY3VybmFzXG5jb25jdXJuYXMuZGlzcGxheU5hbWUgPSAnY29uY3VybmFzJ1xuY29uY3VybmFzLmFsaWFzZXMgPSBbJ2NvbmMnXVxuZnVuY3Rpb24gY29uY3VybmFzKFByaXNtKSB7XG4gIFByaXNtLmxhbmd1YWdlcy5jb25jdXJuYXMgPSB7XG4gICAgY29tbWVudDoge1xuICAgICAgcGF0dGVybjogLyhefFteXFxcXF0pKD86XFwvXFwqW1xcc1xcU10qPyg/OlxcKlxcL3wkKXxcXC9cXC8uKikvLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgbGFuZ2V4dDoge1xuICAgICAgcGF0dGVybjogL1xcYlxcdytcXHMqXFx8XFx8W1xcc1xcU10rP1xcfFxcfC8sXG4gICAgICBncmVlZHk6IHRydWUsXG4gICAgICBpbnNpZGU6IHtcbiAgICAgICAgJ2NsYXNzLW5hbWUnOiAvXlxcdysvLFxuICAgICAgICBzdHJpbmc6IHtcbiAgICAgICAgICBwYXR0ZXJuOiAvKF5cXHMqXFx8XFx8KVtcXHNcXFNdKyg/PVxcfFxcfCQpLyxcbiAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIHB1bmN0dWF0aW9uOiAvXFx8XFx8L1xuICAgICAgfVxuICAgIH0sXG4gICAgZnVuY3Rpb246IHtcbiAgICAgIHBhdHRlcm46IC8oKD86XnxcXHMpZGVmWyBcXHRdKylbYS16QS1aX11cXHcqKD89XFxzKlxcKCkvLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgIH0sXG4gICAga2V5d29yZDpcbiAgICAgIC9cXGIoPzphYnN0cmFjdHxhY3RvcnxhbHNvfGFubm90YXRpb258YXNzZXJ0fGFzeW5jfGF3YWl0fGJvb2x8Ym9vbGVhbnxicmVha3xieXRlfGNhc2V8Y2F0Y2h8Y2hhbmdlZHxjaGFyfGNsYXNzfGNsb3NlZHxjb25zdGFudHxjb250aW51ZXxkZWZ8ZGVmYXVsdHxkZWx8ZG91YmxlfGVsaWZ8ZWxzZXxlbnVtfGV2ZXJ5fGV4dGVuZHN8ZmFsc2V8ZmluYWxseXxmbG9hdHxmb3J8ZnJvbXxnbG9iYWx8Z3B1ZGVmfGdwdWtlcm5lbHxpZnxpbXBvcnR8aW58aW5pdHxpbmplY3R8aW50fGxhbWJkYXxsb2NhbHxsb25nfGxvb3B8bWF0Y2h8bmV3fG5vZGVmYXVsdHxudWxsfG9mfG9uY2hhbmdlfG9wZW58b3V0fG92ZXJyaWRlfHBhY2thZ2V8cGFyZm9yfHBhcmZvcnN5bmN8cG9zdHxwcmV8cHJpdmF0ZXxwcm90ZWN0ZWR8cHJvdmlkZXxwcm92aWRlcnxwdWJsaWN8cmV0dXJufHNoYXJlZHxzaG9ydHxzaW5nbGV8c2l6ZV90fHNpemVvZnxzdXBlcnxzeW5jfHRoaXN8dGhyb3d8dHJhaXR8dHJhbnN8dHJhbnNpZW50fHRydWV8dHJ5fHR5cGVkZWZ8dW5jaGVja2VkfHVzaW5nfHZhbHx2YXJ8dm9pZHx3aGlsZXx3aXRoKVxcYi8sXG4gICAgYm9vbGVhbjogL1xcYig/OmZhbHNlfHRydWUpXFxiLyxcbiAgICBudW1iZXI6XG4gICAgICAvXFxiMGJbMDFdWzAxX10qTD9cXGJ8XFxiMHgoPzpbXFxkYS1mX10qXFwuKT9bXFxkYS1mX3ArLV0rXFxifCg/OlxcYlxcZFtcXGRfXSooPzpcXC5bXFxkX10qKT98XFxCXFwuXFxkW1xcZF9dKikoPzplWystXT9cXGRbXFxkX10qKT9bZGZsc10/L2ksXG4gICAgcHVuY3R1YXRpb246IC9be31bXFxdOygpLC46XS8sXG4gICAgb3BlcmF0b3I6XG4gICAgICAvPD09fD49PXw9PnwtPnw8LXw8PnwmPT18Jjw+fFxcPzo/fFxcLlxcP3xcXCtcXCt8LS18Wy0rKi89PD5dPT98WyFefl18XFxiKD86YW5kfGFzfGJhbmR8Ym9yfGJ4b3J8Y29tcHxpc3xpc25vdHxtb2R8b3IpXFxiPT8vLFxuICAgIGFubm90YXRpb246IHtcbiAgICAgIHBhdHRlcm46IC9AKD86XFx3KzopPyg/Olxcdyt8XFxbW15cXF1dK1xcXSk/LyxcbiAgICAgIGFsaWFzOiAnYnVpbHRpbidcbiAgICB9XG4gIH1cbiAgUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgnY29uY3VybmFzJywgJ2xhbmdleHQnLCB7XG4gICAgJ3JlZ2V4LWxpdGVyYWwnOiB7XG4gICAgICBwYXR0ZXJuOiAvXFxicihcInwnKSg/OlxcXFwufCg/IVxcMSlbXlxcXFxcXHJcXG5dKSpcXDEvLFxuICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgIGludGVycG9sYXRpb246IHtcbiAgICAgICAgICBwYXR0ZXJuOlxuICAgICAgICAgICAgLygoPzpefFteXFxcXF0pKD86XFxcXHsyfSkqKVxceyg/Oltee31dfFxceyg/Oltee31dfFxce1tefV0qXFx9KSpcXH0pK1xcfS8sXG4gICAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgICBpbnNpZGU6IFByaXNtLmxhbmd1YWdlcy5jb25jdXJuYXNcbiAgICAgICAgfSxcbiAgICAgICAgcmVnZXg6IC9bXFxzXFxTXSsvXG4gICAgICB9XG4gICAgfSxcbiAgICAnc3RyaW5nLWxpdGVyYWwnOiB7XG4gICAgICBwYXR0ZXJuOiAvKD86XFxCfFxcYnMpKFwifCcpKD86XFxcXC58KD8hXFwxKVteXFxcXFxcclxcbl0pKlxcMS8sXG4gICAgICBncmVlZHk6IHRydWUsXG4gICAgICBpbnNpZGU6IHtcbiAgICAgICAgaW50ZXJwb2xhdGlvbjoge1xuICAgICAgICAgIHBhdHRlcm46XG4gICAgICAgICAgICAvKCg/Ol58W15cXFxcXSkoPzpcXFxcezJ9KSopXFx7KD86W157fV18XFx7KD86W157fV18XFx7W159XSpcXH0pKlxcfSkrXFx9LyxcbiAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAgIGluc2lkZTogUHJpc20ubGFuZ3VhZ2VzLmNvbmN1cm5hc1xuICAgICAgICB9LFxuICAgICAgICBzdHJpbmc6IC9bXFxzXFxTXSsvXG4gICAgICB9XG4gICAgfVxuICB9KVxuICBQcmlzbS5sYW5ndWFnZXMuY29uYyA9IFByaXNtLmxhbmd1YWdlcy5jb25jdXJuYXNcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiY29uY3VybmFzIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJjb21tZW50IiwicGF0dGVybiIsImxvb2tiZWhpbmQiLCJncmVlZHkiLCJsYW5nZXh0IiwiaW5zaWRlIiwic3RyaW5nIiwicHVuY3R1YXRpb24iLCJrZXl3b3JkIiwibnVtYmVyIiwib3BlcmF0b3IiLCJhbm5vdGF0aW9uIiwiYWxpYXMiLCJpbnNlcnRCZWZvcmUiLCJpbnRlcnBvbGF0aW9uIiwicmVnZXgiLCJjb25jIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/concurnas.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/coq.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/coq.js ***!
  \********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = coq;\ncoq.displayName = 'coq';\ncoq.aliases = [];\nfunction coq(Prism) {\n  ;\n  (function (Prism) {\n    // https://github.com/coq/coq\n    var commentSource = /\\(\\*(?:[^(*]|\\((?!\\*)|\\*(?!\\))|<self>)*\\*\\)/.source;\n    for (var i = 0; i < 2; i++) {\n      commentSource = commentSource.replace(/<self>/g, function () {\n        return commentSource;\n      });\n    }\n    commentSource = commentSource.replace(/<self>/g, '[]');\n    Prism.languages.coq = {\n      comment: RegExp(commentSource),\n      string: {\n        pattern: /\"(?:[^\"]|\"\")*\"(?!\")/,\n        greedy: true\n      },\n      attribute: [{\n        pattern: RegExp(/#\\[(?:[^\\[\\](\"]|\"(?:[^\"]|\"\")*\"(?!\")|\\((?!\\*)|<comment>)*\\]/.source.replace(/<comment>/g, function () {\n          return commentSource;\n        })),\n        greedy: true,\n        alias: 'attr-name',\n        inside: {\n          comment: RegExp(commentSource),\n          string: {\n            pattern: /\"(?:[^\"]|\"\")*\"(?!\")/,\n            greedy: true\n          },\n          operator: /=/,\n          punctuation: /^#\\[|\\]$|[,()]/\n        }\n      }, {\n        pattern: /\\b(?:Cumulative|Global|Local|Monomorphic|NonCumulative|Polymorphic|Private|Program)\\b/,\n        alias: 'attr-name'\n      }],\n      keyword: /\\b(?:Abort|About|Add|Admit|Admitted|All|Arguments|As|Assumptions|Axiom|Axioms|Back|BackTo|Backtrace|BinOp|BinOpSpec|BinRel|Bind|Blacklist|Canonical|Case|Cd|Check|Class|Classes|Close|CoFixpoint|CoInductive|Coercion|Coercions|Collection|Combined|Compute|Conjecture|Conjectures|Constant|Constants|Constraint|Constructors|Context|Corollary|Create|CstOp|Custom|Cut|Debug|Declare|Defined|Definition|Delimit|Dependencies|Dependent|Derive|Diffs|Drop|Elimination|End|Entry|Equality|Eval|Example|Existential|Existentials|Existing|Export|Extern|Extraction|Fact|Fail|Field|File|Firstorder|Fixpoint|Flags|Focus|From|Funclass|Function|Functional|GC|Generalizable|Goal|Grab|Grammar|Graph|Guarded|Haskell|Heap|Hide|Hint|HintDb|Hints|Hypotheses|Hypothesis|IF|Identity|Immediate|Implicit|Implicits|Import|Include|Induction|Inductive|Infix|Info|Initial|InjTyp|Inline|Inspect|Instance|Instances|Intro|Intros|Inversion|Inversion_clear|JSON|Language|Left|Lemma|Let|Lia|Libraries|Library|Load|LoadPath|Locate|Ltac|Ltac2|ML|Match|Method|Minimality|Module|Modules|Morphism|Next|NoInline|Notation|Number|OCaml|Obligation|Obligations|Opaque|Open|Optimize|Parameter|Parameters|Parametric|Path|Paths|Prenex|Preterm|Primitive|Print|Profile|Projections|Proof|Prop|PropBinOp|PropOp|PropUOp|Property|Proposition|Pwd|Qed|Quit|Rec|Record|Recursive|Redirect|Reduction|Register|Relation|Remark|Remove|Require|Reserved|Reset|Resolve|Restart|Rewrite|Right|Ring|Rings|SProp|Saturate|Save|Scheme|Scope|Scopes|Search|SearchHead|SearchPattern|SearchRewrite|Section|Separate|Set|Setoid|Show|Signatures|Solve|Solver|Sort|Sortclass|Sorted|Spec|Step|Strategies|Strategy|String|Structure|SubClass|Subgraph|SuchThat|Tactic|Term|TestCompile|Theorem|Time|Timeout|To|Transparent|Type|Typeclasses|Types|Typing|UnOp|UnOpSpec|Undelimit|Undo|Unfocus|Unfocused|Unfold|Universe|Universes|Unshelve|Variable|Variables|Variant|Verbose|View|Visibility|Zify|_|apply|as|at|by|cofix|else|end|exists|exists2|fix|for|forall|fun|if|in|let|match|measure|move|removed|return|struct|then|using|wf|where|with)\\b/,\n      number: /\\b(?:0x[a-f0-9][a-f0-9_]*(?:\\.[a-f0-9_]+)?(?:p[+-]?\\d[\\d_]*)?|\\d[\\d_]*(?:\\.[\\d_]+)?(?:e[+-]?\\d[\\d_]*)?)\\b/i,\n      punct: {\n        pattern: /@\\{|\\{\\||\\[=|:>/,\n        alias: 'punctuation'\n      },\n      operator: /\\/\\\\|\\\\\\/|\\.{2,3}|:{1,2}=|\\*\\*|[-=]>|<(?:->?|[+:=>]|<:)|>(?:=|->)|\\|[-|]?|[-!%&*+/<=>?@^~']/,\n      punctuation: /\\.\\(|`\\(|@\\{|`\\{|\\{\\||\\[=|:>|[:.,;(){}\\[\\]]/\n    };\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvY29xLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsR0FBRztBQUNwQkEsR0FBRyxDQUFDQyxXQUFXLEdBQUcsS0FBSztBQUN2QkQsR0FBRyxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNoQixTQUFTRixHQUFHQSxDQUFDRyxLQUFLLEVBQUU7RUFDbEI7RUFBQyxDQUFDLFVBQVVBLEtBQUssRUFBRTtJQUNqQjtJQUNBLElBQUlDLGFBQWEsR0FBRyw2Q0FBNkMsQ0FBQ0MsTUFBTTtJQUN4RSxLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsRUFBRSxFQUFFO01BQzFCRixhQUFhLEdBQUdBLGFBQWEsQ0FBQ0csT0FBTyxDQUFDLFNBQVMsRUFBRSxZQUFZO1FBQzNELE9BQU9ILGFBQWE7TUFDdEIsQ0FBQyxDQUFDO0lBQ0o7SUFDQUEsYUFBYSxHQUFHQSxhQUFhLENBQUNHLE9BQU8sQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDO0lBQ3RESixLQUFLLENBQUNLLFNBQVMsQ0FBQ1IsR0FBRyxHQUFHO01BQ3BCUyxPQUFPLEVBQUVDLE1BQU0sQ0FBQ04sYUFBYSxDQUFDO01BQzlCTyxNQUFNLEVBQUU7UUFDTkMsT0FBTyxFQUFFLHFCQUFxQjtRQUM5QkMsTUFBTSxFQUFFO01BQ1YsQ0FBQztNQUNEQyxTQUFTLEVBQUUsQ0FDVDtRQUNFRixPQUFPLEVBQUVGLE1BQU0sQ0FDYiw0REFBNEQsQ0FBQ0wsTUFBTSxDQUFDRSxPQUFPLENBQ3pFLFlBQVksRUFDWixZQUFZO1VBQ1YsT0FBT0gsYUFBYTtRQUN0QixDQUNGLENBQ0YsQ0FBQztRQUNEUyxNQUFNLEVBQUUsSUFBSTtRQUNaRSxLQUFLLEVBQUUsV0FBVztRQUNsQkMsTUFBTSxFQUFFO1VBQ05QLE9BQU8sRUFBRUMsTUFBTSxDQUFDTixhQUFhLENBQUM7VUFDOUJPLE1BQU0sRUFBRTtZQUNOQyxPQUFPLEVBQUUscUJBQXFCO1lBQzlCQyxNQUFNLEVBQUU7VUFDVixDQUFDO1VBQ0RJLFFBQVEsRUFBRSxHQUFHO1VBQ2JDLFdBQVcsRUFBRTtRQUNmO01BQ0YsQ0FBQyxFQUNEO1FBQ0VOLE9BQU8sRUFDTCx1RkFBdUY7UUFDekZHLEtBQUssRUFBRTtNQUNULENBQUMsQ0FDRjtNQUNESSxPQUFPLEVBQ0wseS9EQUF5L0Q7TUFDMy9EQyxNQUFNLEVBQ0osNEdBQTRHO01BQzlHQyxLQUFLLEVBQUU7UUFDTFQsT0FBTyxFQUFFLGlCQUFpQjtRQUMxQkcsS0FBSyxFQUFFO01BQ1QsQ0FBQztNQUNERSxRQUFRLEVBQ04sNkZBQTZGO01BQy9GQyxXQUFXLEVBQUU7SUFDZixDQUFDO0VBQ0gsQ0FBQyxFQUFFZixLQUFLLENBQUM7QUFDWCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXGNvcS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBjb3FcbmNvcS5kaXNwbGF5TmFtZSA9ICdjb3EnXG5jb3EuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBjb3EoUHJpc20pIHtcbiAgOyhmdW5jdGlvbiAoUHJpc20pIHtcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vY29xL2NvcVxuICAgIHZhciBjb21tZW50U291cmNlID0gL1xcKFxcKig/OlteKCpdfFxcKCg/IVxcKil8XFwqKD8hXFwpKXw8c2VsZj4pKlxcKlxcKS8uc291cmNlXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyOyBpKyspIHtcbiAgICAgIGNvbW1lbnRTb3VyY2UgPSBjb21tZW50U291cmNlLnJlcGxhY2UoLzxzZWxmPi9nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBjb21tZW50U291cmNlXG4gICAgICB9KVxuICAgIH1cbiAgICBjb21tZW50U291cmNlID0gY29tbWVudFNvdXJjZS5yZXBsYWNlKC88c2VsZj4vZywgJ1tdJylcbiAgICBQcmlzbS5sYW5ndWFnZXMuY29xID0ge1xuICAgICAgY29tbWVudDogUmVnRXhwKGNvbW1lbnRTb3VyY2UpLFxuICAgICAgc3RyaW5nOiB7XG4gICAgICAgIHBhdHRlcm46IC9cIig/OlteXCJdfFwiXCIpKlwiKD8hXCIpLyxcbiAgICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgICB9LFxuICAgICAgYXR0cmlidXRlOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwYXR0ZXJuOiBSZWdFeHAoXG4gICAgICAgICAgICAvI1xcWyg/OlteXFxbXFxdKFwiXXxcIig/OlteXCJdfFwiXCIpKlwiKD8hXCIpfFxcKCg/IVxcKil8PGNvbW1lbnQ+KSpcXF0vLnNvdXJjZS5yZXBsYWNlKFxuICAgICAgICAgICAgICAvPGNvbW1lbnQ+L2csXG4gICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWVudFNvdXJjZVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApXG4gICAgICAgICAgKSxcbiAgICAgICAgICBncmVlZHk6IHRydWUsXG4gICAgICAgICAgYWxpYXM6ICdhdHRyLW5hbWUnLFxuICAgICAgICAgIGluc2lkZToge1xuICAgICAgICAgICAgY29tbWVudDogUmVnRXhwKGNvbW1lbnRTb3VyY2UpLFxuICAgICAgICAgICAgc3RyaW5nOiB7XG4gICAgICAgICAgICAgIHBhdHRlcm46IC9cIig/OlteXCJdfFwiXCIpKlwiKD8hXCIpLyxcbiAgICAgICAgICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb3BlcmF0b3I6IC89LyxcbiAgICAgICAgICAgIHB1bmN0dWF0aW9uOiAvXiNcXFt8XFxdJHxbLCgpXS9cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwYXR0ZXJuOlxuICAgICAgICAgICAgL1xcYig/OkN1bXVsYXRpdmV8R2xvYmFsfExvY2FsfE1vbm9tb3JwaGljfE5vbkN1bXVsYXRpdmV8UG9seW1vcnBoaWN8UHJpdmF0ZXxQcm9ncmFtKVxcYi8sXG4gICAgICAgICAgYWxpYXM6ICdhdHRyLW5hbWUnXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBrZXl3b3JkOlxuICAgICAgICAvXFxiKD86QWJvcnR8QWJvdXR8QWRkfEFkbWl0fEFkbWl0dGVkfEFsbHxBcmd1bWVudHN8QXN8QXNzdW1wdGlvbnN8QXhpb218QXhpb21zfEJhY2t8QmFja1RvfEJhY2t0cmFjZXxCaW5PcHxCaW5PcFNwZWN8QmluUmVsfEJpbmR8QmxhY2tsaXN0fENhbm9uaWNhbHxDYXNlfENkfENoZWNrfENsYXNzfENsYXNzZXN8Q2xvc2V8Q29GaXhwb2ludHxDb0luZHVjdGl2ZXxDb2VyY2lvbnxDb2VyY2lvbnN8Q29sbGVjdGlvbnxDb21iaW5lZHxDb21wdXRlfENvbmplY3R1cmV8Q29uamVjdHVyZXN8Q29uc3RhbnR8Q29uc3RhbnRzfENvbnN0cmFpbnR8Q29uc3RydWN0b3JzfENvbnRleHR8Q29yb2xsYXJ5fENyZWF0ZXxDc3RPcHxDdXN0b218Q3V0fERlYnVnfERlY2xhcmV8RGVmaW5lZHxEZWZpbml0aW9ufERlbGltaXR8RGVwZW5kZW5jaWVzfERlcGVuZGVudHxEZXJpdmV8RGlmZnN8RHJvcHxFbGltaW5hdGlvbnxFbmR8RW50cnl8RXF1YWxpdHl8RXZhbHxFeGFtcGxlfEV4aXN0ZW50aWFsfEV4aXN0ZW50aWFsc3xFeGlzdGluZ3xFeHBvcnR8RXh0ZXJufEV4dHJhY3Rpb258RmFjdHxGYWlsfEZpZWxkfEZpbGV8Rmlyc3RvcmRlcnxGaXhwb2ludHxGbGFnc3xGb2N1c3xGcm9tfEZ1bmNsYXNzfEZ1bmN0aW9ufEZ1bmN0aW9uYWx8R0N8R2VuZXJhbGl6YWJsZXxHb2FsfEdyYWJ8R3JhbW1hcnxHcmFwaHxHdWFyZGVkfEhhc2tlbGx8SGVhcHxIaWRlfEhpbnR8SGludERifEhpbnRzfEh5cG90aGVzZXN8SHlwb3RoZXNpc3xJRnxJZGVudGl0eXxJbW1lZGlhdGV8SW1wbGljaXR8SW1wbGljaXRzfEltcG9ydHxJbmNsdWRlfEluZHVjdGlvbnxJbmR1Y3RpdmV8SW5maXh8SW5mb3xJbml0aWFsfElualR5cHxJbmxpbmV8SW5zcGVjdHxJbnN0YW5jZXxJbnN0YW5jZXN8SW50cm98SW50cm9zfEludmVyc2lvbnxJbnZlcnNpb25fY2xlYXJ8SlNPTnxMYW5ndWFnZXxMZWZ0fExlbW1hfExldHxMaWF8TGlicmFyaWVzfExpYnJhcnl8TG9hZHxMb2FkUGF0aHxMb2NhdGV8THRhY3xMdGFjMnxNTHxNYXRjaHxNZXRob2R8TWluaW1hbGl0eXxNb2R1bGV8TW9kdWxlc3xNb3JwaGlzbXxOZXh0fE5vSW5saW5lfE5vdGF0aW9ufE51bWJlcnxPQ2FtbHxPYmxpZ2F0aW9ufE9ibGlnYXRpb25zfE9wYXF1ZXxPcGVufE9wdGltaXplfFBhcmFtZXRlcnxQYXJhbWV0ZXJzfFBhcmFtZXRyaWN8UGF0aHxQYXRoc3xQcmVuZXh8UHJldGVybXxQcmltaXRpdmV8UHJpbnR8UHJvZmlsZXxQcm9qZWN0aW9uc3xQcm9vZnxQcm9wfFByb3BCaW5PcHxQcm9wT3B8UHJvcFVPcHxQcm9wZXJ0eXxQcm9wb3NpdGlvbnxQd2R8UWVkfFF1aXR8UmVjfFJlY29yZHxSZWN1cnNpdmV8UmVkaXJlY3R8UmVkdWN0aW9ufFJlZ2lzdGVyfFJlbGF0aW9ufFJlbWFya3xSZW1vdmV8UmVxdWlyZXxSZXNlcnZlZHxSZXNldHxSZXNvbHZlfFJlc3RhcnR8UmV3cml0ZXxSaWdodHxSaW5nfFJpbmdzfFNQcm9wfFNhdHVyYXRlfFNhdmV8U2NoZW1lfFNjb3BlfFNjb3Blc3xTZWFyY2h8U2VhcmNoSGVhZHxTZWFyY2hQYXR0ZXJufFNlYXJjaFJld3JpdGV8U2VjdGlvbnxTZXBhcmF0ZXxTZXR8U2V0b2lkfFNob3d8U2lnbmF0dXJlc3xTb2x2ZXxTb2x2ZXJ8U29ydHxTb3J0Y2xhc3N8U29ydGVkfFNwZWN8U3RlcHxTdHJhdGVnaWVzfFN0cmF0ZWd5fFN0cmluZ3xTdHJ1Y3R1cmV8U3ViQ2xhc3N8U3ViZ3JhcGh8U3VjaFRoYXR8VGFjdGljfFRlcm18VGVzdENvbXBpbGV8VGhlb3JlbXxUaW1lfFRpbWVvdXR8VG98VHJhbnNwYXJlbnR8VHlwZXxUeXBlY2xhc3Nlc3xUeXBlc3xUeXBpbmd8VW5PcHxVbk9wU3BlY3xVbmRlbGltaXR8VW5kb3xVbmZvY3VzfFVuZm9jdXNlZHxVbmZvbGR8VW5pdmVyc2V8VW5pdmVyc2VzfFVuc2hlbHZlfFZhcmlhYmxlfFZhcmlhYmxlc3xWYXJpYW50fFZlcmJvc2V8Vmlld3xWaXNpYmlsaXR5fFppZnl8X3xhcHBseXxhc3xhdHxieXxjb2ZpeHxlbHNlfGVuZHxleGlzdHN8ZXhpc3RzMnxmaXh8Zm9yfGZvcmFsbHxmdW58aWZ8aW58bGV0fG1hdGNofG1lYXN1cmV8bW92ZXxyZW1vdmVkfHJldHVybnxzdHJ1Y3R8dGhlbnx1c2luZ3x3Znx3aGVyZXx3aXRoKVxcYi8sXG4gICAgICBudW1iZXI6XG4gICAgICAgIC9cXGIoPzoweFthLWYwLTldW2EtZjAtOV9dKig/OlxcLlthLWYwLTlfXSspPyg/OnBbKy1dP1xcZFtcXGRfXSopP3xcXGRbXFxkX10qKD86XFwuW1xcZF9dKyk/KD86ZVsrLV0/XFxkW1xcZF9dKik/KVxcYi9pLFxuICAgICAgcHVuY3Q6IHtcbiAgICAgICAgcGF0dGVybjogL0BcXHt8XFx7XFx8fFxcWz18Oj4vLFxuICAgICAgICBhbGlhczogJ3B1bmN0dWF0aW9uJ1xuICAgICAgfSxcbiAgICAgIG9wZXJhdG9yOlxuICAgICAgICAvXFwvXFxcXHxcXFxcXFwvfFxcLnsyLDN9fDp7MSwyfT18XFwqXFwqfFstPV0+fDwoPzotPj98Wys6PT5dfDw6KXw+KD86PXwtPil8XFx8Wy18XT98Wy0hJSYqKy88PT4/QF5+J10vLFxuICAgICAgcHVuY3R1YXRpb246IC9cXC5cXCh8YFxcKHxAXFx7fGBcXHt8XFx7XFx8fFxcWz18Oj58WzouLDsoKXt9XFxbXFxdXS9cbiAgICB9XG4gIH0pKFByaXNtKVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJjb3EiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImNvbW1lbnRTb3VyY2UiLCJzb3VyY2UiLCJpIiwicmVwbGFjZSIsImxhbmd1YWdlcyIsImNvbW1lbnQiLCJSZWdFeHAiLCJzdHJpbmciLCJwYXR0ZXJuIiwiZ3JlZWR5IiwiYXR0cmlidXRlIiwiYWxpYXMiLCJpbnNpZGUiLCJvcGVyYXRvciIsInB1bmN0dWF0aW9uIiwia2V5d29yZCIsIm51bWJlciIsInB1bmN0Il0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/coq.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/cpp.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/cpp.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar refractorC = __webpack_require__(/*! ./c.js */ \"(ssr)/./node_modules/refractor/lang/c.js\");\nmodule.exports = cpp;\ncpp.displayName = 'cpp';\ncpp.aliases = [];\nfunction cpp(Prism) {\n  Prism.register(refractorC);\n  (function (Prism) {\n    var keyword = /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|char8_t|class|co_await|co_return|co_yield|compl|concept|const|const_cast|consteval|constexpr|constinit|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|final|float|for|friend|goto|if|import|inline|int|int16_t|int32_t|int64_t|int8_t|long|module|mutable|namespace|new|noexcept|nullptr|operator|override|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|uint16_t|uint32_t|uint64_t|uint8_t|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/;\n    var modName = /\\b(?!<keyword>)\\w+(?:\\s*\\.\\s*\\w+)*\\b/.source.replace(/<keyword>/g, function () {\n      return keyword.source;\n    });\n    Prism.languages.cpp = Prism.languages.extend('c', {\n      'class-name': [{\n        pattern: RegExp(/(\\b(?:class|concept|enum|struct|typename)\\s+)(?!<keyword>)\\w+/.source.replace(/<keyword>/g, function () {\n          return keyword.source;\n        })),\n        lookbehind: true\n      },\n      // This is intended to capture the class name of method implementations like:\n      //   void foo::bar() const {}\n      // However! The `foo` in the above example could also be a namespace, so we only capture the class name if\n      // it starts with an uppercase letter. This approximation should give decent results.\n      /\\b[A-Z]\\w*(?=\\s*::\\s*\\w+\\s*\\()/,\n      // This will capture the class name before destructors like:\n      //   Foo::~Foo() {}\n      /\\b[A-Z_]\\w*(?=\\s*::\\s*~\\w+\\s*\\()/i,\n      // This also intends to capture the class name of method implementations but here the class has template\n      // parameters, so it can't be a namespace (until C++ adds generic namespaces).\n      /\\b\\w+(?=\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\\s*::\\s*\\w+\\s*\\()/],\n      keyword: keyword,\n      number: {\n        pattern: /(?:\\b0b[01']+|\\b0x(?:[\\da-f']+(?:\\.[\\da-f']*)?|\\.[\\da-f']+)(?:p[+-]?[\\d']+)?|(?:\\b[\\d']+(?:\\.[\\d']*)?|\\B\\.[\\d']+)(?:e[+-]?[\\d']+)?)[ful]{0,4}/i,\n        greedy: true\n      },\n      operator: />>=?|<<=?|->|--|\\+\\+|&&|\\|\\||[?:~]|<=>|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/,\n      \"boolean\": /\\b(?:false|true)\\b/\n    });\n    Prism.languages.insertBefore('cpp', 'string', {\n      module: {\n        // https://en.cppreference.com/w/cpp/language/modules\n        pattern: RegExp(/(\\b(?:import|module)\\s+)/.source + '(?:' +\n        // header-name\n        /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|<[^<>\\r\\n]*>/.source + '|' +\n        // module name or partition or both\n        /<mod-name>(?:\\s*:\\s*<mod-name>)?|:\\s*<mod-name>/.source.replace(/<mod-name>/g, function () {\n          return modName;\n        }) + ')'),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          string: /^[<\"][\\s\\S]+/,\n          operator: /:/,\n          punctuation: /\\./\n        }\n      },\n      'raw-string': {\n        pattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,\n        alias: 'string',\n        greedy: true\n      }\n    });\n    Prism.languages.insertBefore('cpp', 'keyword', {\n      'generic-function': {\n        pattern: /\\b(?!operator\\b)[a-z_]\\w*\\s*<(?:[^<>]|<[^<>]*>)*>(?=\\s*\\()/i,\n        inside: {\n          \"function\": /^\\w+/,\n          generic: {\n            pattern: /<[\\s\\S]+/,\n            alias: 'class-name',\n            inside: Prism.languages.cpp\n          }\n        }\n      }\n    });\n    Prism.languages.insertBefore('cpp', 'operator', {\n      'double-colon': {\n        pattern: /::/,\n        alias: 'punctuation'\n      }\n    });\n    Prism.languages.insertBefore('cpp', 'class-name', {\n      // the base clause is an optional list of parent classes\n      // https://en.cppreference.com/w/cpp/language/class\n      'base-clause': {\n        pattern: /(\\b(?:class|struct)\\s+\\w+\\s*:\\s*)[^;{}\"'\\s]+(?:\\s+[^;{}\"'\\s]+)*(?=\\s*[;{])/,\n        lookbehind: true,\n        greedy: true,\n        inside: Prism.languages.extend('cpp', {})\n      }\n    });\n    Prism.languages.insertBefore('inside', 'double-colon', {\n      // All untokenized words that are not namespaces should be class names\n      'class-name': /\\b[a-z_]\\w*\\b(?!\\s*::)/i\n    }, Prism.languages.cpp['base-clause']);\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvY3BwLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUNaLElBQUlBLFVBQVUsR0FBR0MsbUJBQU8sQ0FBQyx3REFBUSxDQUFDO0FBQ2xDQyxNQUFNLENBQUNDLE9BQU8sR0FBR0MsR0FBRztBQUNwQkEsR0FBRyxDQUFDQyxXQUFXLEdBQUcsS0FBSztBQUN2QkQsR0FBRyxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNoQixTQUFTRixHQUFHQSxDQUFDRyxLQUFLLEVBQUU7RUFDbEJBLEtBQUssQ0FBQ0MsUUFBUSxDQUFDUixVQUFVLENBQUM7RUFDekIsQ0FBQyxVQUFVTyxLQUFLLEVBQUU7SUFDakIsSUFBSUUsT0FBTyxHQUNULG1zQkFBbXNCO0lBQ3JzQixJQUFJQyxPQUFPLEdBQUcsc0NBQXNDLENBQUNDLE1BQU0sQ0FBQ0MsT0FBTyxDQUNqRSxZQUFZLEVBQ1osWUFBWTtNQUNWLE9BQU9ILE9BQU8sQ0FBQ0UsTUFBTTtJQUN2QixDQUNGLENBQUM7SUFDREosS0FBSyxDQUFDTSxTQUFTLENBQUNULEdBQUcsR0FBR0csS0FBSyxDQUFDTSxTQUFTLENBQUNDLE1BQU0sQ0FBQyxHQUFHLEVBQUU7TUFDaEQsWUFBWSxFQUFFLENBQ1o7UUFDRUMsT0FBTyxFQUFFQyxNQUFNLENBQ2IsK0RBQStELENBQUNMLE1BQU0sQ0FBQ0MsT0FBTyxDQUM1RSxZQUFZLEVBQ1osWUFBWTtVQUNWLE9BQU9ILE9BQU8sQ0FBQ0UsTUFBTTtRQUN2QixDQUNGLENBQ0YsQ0FBQztRQUNETSxVQUFVLEVBQUU7TUFDZCxDQUFDO01BQUU7TUFDSDtNQUNBO01BQ0E7TUFDQSxnQ0FBZ0M7TUFBRTtNQUNsQztNQUNBLG1DQUFtQztNQUFFO01BQ3JDO01BQ0EsZ0VBQWdFLENBQ2pFO01BQ0RSLE9BQU8sRUFBRUEsT0FBTztNQUNoQlMsTUFBTSxFQUFFO1FBQ05ILE9BQU8sRUFDTCxnSkFBZ0o7UUFDbEpJLE1BQU0sRUFBRTtNQUNWLENBQUM7TUFDREMsUUFBUSxFQUNOLHdIQUF3SDtNQUMxSCxXQUFTO0lBQ1gsQ0FBQyxDQUFDO0lBQ0ZiLEtBQUssQ0FBQ00sU0FBUyxDQUFDUSxZQUFZLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRTtNQUM1Q25CLE1BQU0sRUFBRTtRQUNOO1FBQ0FhLE9BQU8sRUFBRUMsTUFBTSxDQUNiLDBCQUEwQixDQUFDTCxNQUFNLEdBQy9CLEtBQUs7UUFBRztRQUNSLGtEQUFrRCxDQUFDQSxNQUFNLEdBQ3pELEdBQUc7UUFBRztRQUNOLGlEQUFpRCxDQUFDQSxNQUFNLENBQUNDLE9BQU8sQ0FDOUQsYUFBYSxFQUNiLFlBQVk7VUFDVixPQUFPRixPQUFPO1FBQ2hCLENBQ0YsQ0FBQyxHQUNELEdBQ0osQ0FBQztRQUNETyxVQUFVLEVBQUUsSUFBSTtRQUNoQkUsTUFBTSxFQUFFLElBQUk7UUFDWkcsTUFBTSxFQUFFO1VBQ05DLE1BQU0sRUFBRSxjQUFjO1VBQ3RCSCxRQUFRLEVBQUUsR0FBRztVQUNiSSxXQUFXLEVBQUU7UUFDZjtNQUNGLENBQUM7TUFDRCxZQUFZLEVBQUU7UUFDWlQsT0FBTyxFQUFFLG1DQUFtQztRQUM1Q1UsS0FBSyxFQUFFLFFBQVE7UUFDZk4sTUFBTSxFQUFFO01BQ1Y7SUFDRixDQUFDLENBQUM7SUFDRlosS0FBSyxDQUFDTSxTQUFTLENBQUNRLFlBQVksQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFO01BQzdDLGtCQUFrQixFQUFFO1FBQ2xCTixPQUFPLEVBQUUsNkRBQTZEO1FBQ3RFTyxNQUFNLEVBQUU7VUFDTixZQUFVLE1BQU07VUFDaEJJLE9BQU8sRUFBRTtZQUNQWCxPQUFPLEVBQUUsVUFBVTtZQUNuQlUsS0FBSyxFQUFFLFlBQVk7WUFDbkJILE1BQU0sRUFBRWYsS0FBSyxDQUFDTSxTQUFTLENBQUNUO1VBQzFCO1FBQ0Y7TUFDRjtJQUNGLENBQUMsQ0FBQztJQUNGRyxLQUFLLENBQUNNLFNBQVMsQ0FBQ1EsWUFBWSxDQUFDLEtBQUssRUFBRSxVQUFVLEVBQUU7TUFDOUMsY0FBYyxFQUFFO1FBQ2ROLE9BQU8sRUFBRSxJQUFJO1FBQ2JVLEtBQUssRUFBRTtNQUNUO0lBQ0YsQ0FBQyxDQUFDO0lBQ0ZsQixLQUFLLENBQUNNLFNBQVMsQ0FBQ1EsWUFBWSxDQUFDLEtBQUssRUFBRSxZQUFZLEVBQUU7TUFDaEQ7TUFDQTtNQUNBLGFBQWEsRUFBRTtRQUNiTixPQUFPLEVBQ0wsNEVBQTRFO1FBQzlFRSxVQUFVLEVBQUUsSUFBSTtRQUNoQkUsTUFBTSxFQUFFLElBQUk7UUFDWkcsTUFBTSxFQUFFZixLQUFLLENBQUNNLFNBQVMsQ0FBQ0MsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7TUFDMUM7SUFDRixDQUFDLENBQUM7SUFDRlAsS0FBSyxDQUFDTSxTQUFTLENBQUNRLFlBQVksQ0FDMUIsUUFBUSxFQUNSLGNBQWMsRUFDZDtNQUNFO01BQ0EsWUFBWSxFQUFFO0lBQ2hCLENBQUMsRUFDRGQsS0FBSyxDQUFDTSxTQUFTLENBQUNULEdBQUcsQ0FBQyxhQUFhLENBQ25DLENBQUM7RUFDSCxDQUFDLEVBQUVHLEtBQUssQ0FBQztBQUNYIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcY3BwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xudmFyIHJlZnJhY3RvckMgPSByZXF1aXJlKCcuL2MuanMnKVxubW9kdWxlLmV4cG9ydHMgPSBjcHBcbmNwcC5kaXNwbGF5TmFtZSA9ICdjcHAnXG5jcHAuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBjcHAoUHJpc20pIHtcbiAgUHJpc20ucmVnaXN0ZXIocmVmcmFjdG9yQylcbiAgOyhmdW5jdGlvbiAoUHJpc20pIHtcbiAgICB2YXIga2V5d29yZCA9XG4gICAgICAvXFxiKD86YWxpZ25hc3xhbGlnbm9mfGFzbXxhdXRvfGJvb2x8YnJlYWt8Y2FzZXxjYXRjaHxjaGFyfGNoYXIxNl90fGNoYXIzMl90fGNoYXI4X3R8Y2xhc3N8Y29fYXdhaXR8Y29fcmV0dXJufGNvX3lpZWxkfGNvbXBsfGNvbmNlcHR8Y29uc3R8Y29uc3RfY2FzdHxjb25zdGV2YWx8Y29uc3RleHByfGNvbnN0aW5pdHxjb250aW51ZXxkZWNsdHlwZXxkZWZhdWx0fGRlbGV0ZXxkb3xkb3VibGV8ZHluYW1pY19jYXN0fGVsc2V8ZW51bXxleHBsaWNpdHxleHBvcnR8ZXh0ZXJufGZpbmFsfGZsb2F0fGZvcnxmcmllbmR8Z290b3xpZnxpbXBvcnR8aW5saW5lfGludHxpbnQxNl90fGludDMyX3R8aW50NjRfdHxpbnQ4X3R8bG9uZ3xtb2R1bGV8bXV0YWJsZXxuYW1lc3BhY2V8bmV3fG5vZXhjZXB0fG51bGxwdHJ8b3BlcmF0b3J8b3ZlcnJpZGV8cHJpdmF0ZXxwcm90ZWN0ZWR8cHVibGljfHJlZ2lzdGVyfHJlaW50ZXJwcmV0X2Nhc3R8cmVxdWlyZXN8cmV0dXJufHNob3J0fHNpZ25lZHxzaXplb2Z8c3RhdGljfHN0YXRpY19hc3NlcnR8c3RhdGljX2Nhc3R8c3RydWN0fHN3aXRjaHx0ZW1wbGF0ZXx0aGlzfHRocmVhZF9sb2NhbHx0aHJvd3x0cnl8dHlwZWRlZnx0eXBlaWR8dHlwZW5hbWV8dWludDE2X3R8dWludDMyX3R8dWludDY0X3R8dWludDhfdHx1bmlvbnx1bnNpZ25lZHx1c2luZ3x2aXJ0dWFsfHZvaWR8dm9sYXRpbGV8d2NoYXJfdHx3aGlsZSlcXGIvXG4gICAgdmFyIG1vZE5hbWUgPSAvXFxiKD8hPGtleXdvcmQ+KVxcdysoPzpcXHMqXFwuXFxzKlxcdyspKlxcYi8uc291cmNlLnJlcGxhY2UoXG4gICAgICAvPGtleXdvcmQ+L2csXG4gICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBrZXl3b3JkLnNvdXJjZVxuICAgICAgfVxuICAgIClcbiAgICBQcmlzbS5sYW5ndWFnZXMuY3BwID0gUHJpc20ubGFuZ3VhZ2VzLmV4dGVuZCgnYycsIHtcbiAgICAgICdjbGFzcy1uYW1lJzogW1xuICAgICAgICB7XG4gICAgICAgICAgcGF0dGVybjogUmVnRXhwKFxuICAgICAgICAgICAgLyhcXGIoPzpjbGFzc3xjb25jZXB0fGVudW18c3RydWN0fHR5cGVuYW1lKVxccyspKD8hPGtleXdvcmQ+KVxcdysvLnNvdXJjZS5yZXBsYWNlKFxuICAgICAgICAgICAgICAvPGtleXdvcmQ+L2csXG4gICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ga2V5d29yZC5zb3VyY2VcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKVxuICAgICAgICAgICksXG4gICAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgICB9LCAvLyBUaGlzIGlzIGludGVuZGVkIHRvIGNhcHR1cmUgdGhlIGNsYXNzIG5hbWUgb2YgbWV0aG9kIGltcGxlbWVudGF0aW9ucyBsaWtlOlxuICAgICAgICAvLyAgIHZvaWQgZm9vOjpiYXIoKSBjb25zdCB7fVxuICAgICAgICAvLyBIb3dldmVyISBUaGUgYGZvb2AgaW4gdGhlIGFib3ZlIGV4YW1wbGUgY291bGQgYWxzbyBiZSBhIG5hbWVzcGFjZSwgc28gd2Ugb25seSBjYXB0dXJlIHRoZSBjbGFzcyBuYW1lIGlmXG4gICAgICAgIC8vIGl0IHN0YXJ0cyB3aXRoIGFuIHVwcGVyY2FzZSBsZXR0ZXIuIFRoaXMgYXBwcm94aW1hdGlvbiBzaG91bGQgZ2l2ZSBkZWNlbnQgcmVzdWx0cy5cbiAgICAgICAgL1xcYltBLVpdXFx3Kig/PVxccyo6OlxccypcXHcrXFxzKlxcKCkvLCAvLyBUaGlzIHdpbGwgY2FwdHVyZSB0aGUgY2xhc3MgbmFtZSBiZWZvcmUgZGVzdHJ1Y3RvcnMgbGlrZTpcbiAgICAgICAgLy8gICBGb286On5Gb28oKSB7fVxuICAgICAgICAvXFxiW0EtWl9dXFx3Kig/PVxccyo6Olxccyp+XFx3K1xccypcXCgpL2ksIC8vIFRoaXMgYWxzbyBpbnRlbmRzIHRvIGNhcHR1cmUgdGhlIGNsYXNzIG5hbWUgb2YgbWV0aG9kIGltcGxlbWVudGF0aW9ucyBidXQgaGVyZSB0aGUgY2xhc3MgaGFzIHRlbXBsYXRlXG4gICAgICAgIC8vIHBhcmFtZXRlcnMsIHNvIGl0IGNhbid0IGJlIGEgbmFtZXNwYWNlICh1bnRpbCBDKysgYWRkcyBnZW5lcmljIG5hbWVzcGFjZXMpLlxuICAgICAgICAvXFxiXFx3Kyg/PVxccyo8KD86W148Pl18PCg/OltePD5dfDxbXjw+XSo+KSo+KSo+XFxzKjo6XFxzKlxcdytcXHMqXFwoKS9cbiAgICAgIF0sXG4gICAgICBrZXl3b3JkOiBrZXl3b3JkLFxuICAgICAgbnVtYmVyOiB7XG4gICAgICAgIHBhdHRlcm46XG4gICAgICAgICAgLyg/OlxcYjBiWzAxJ10rfFxcYjB4KD86W1xcZGEtZiddKyg/OlxcLltcXGRhLWYnXSopP3xcXC5bXFxkYS1mJ10rKSg/OnBbKy1dP1tcXGQnXSspP3woPzpcXGJbXFxkJ10rKD86XFwuW1xcZCddKik/fFxcQlxcLltcXGQnXSspKD86ZVsrLV0/W1xcZCddKyk/KVtmdWxdezAsNH0vaSxcbiAgICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgICB9LFxuICAgICAgb3BlcmF0b3I6XG4gICAgICAgIC8+Pj0/fDw8PT98LT58LS18XFwrXFwrfCYmfFxcfFxcfHxbPzp+XXw8PT58Wy0rKi8lJnxeIT08Pl09P3xcXGIoPzphbmR8YW5kX2VxfGJpdGFuZHxiaXRvcnxub3R8bm90X2VxfG9yfG9yX2VxfHhvcnx4b3JfZXEpXFxiLyxcbiAgICAgIGJvb2xlYW46IC9cXGIoPzpmYWxzZXx0cnVlKVxcYi9cbiAgICB9KVxuICAgIFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ2NwcCcsICdzdHJpbmcnLCB7XG4gICAgICBtb2R1bGU6IHtcbiAgICAgICAgLy8gaHR0cHM6Ly9lbi5jcHByZWZlcmVuY2UuY29tL3cvY3BwL2xhbmd1YWdlL21vZHVsZXNcbiAgICAgICAgcGF0dGVybjogUmVnRXhwKFxuICAgICAgICAgIC8oXFxiKD86aW1wb3J0fG1vZHVsZSlcXHMrKS8uc291cmNlICtcbiAgICAgICAgICAgICcoPzonICsgLy8gaGVhZGVyLW5hbWVcbiAgICAgICAgICAgIC9cIig/OlxcXFwoPzpcXHJcXG58W1xcc1xcU10pfFteXCJcXFxcXFxyXFxuXSkqXCJ8PFtePD5cXHJcXG5dKj4vLnNvdXJjZSArXG4gICAgICAgICAgICAnfCcgKyAvLyBtb2R1bGUgbmFtZSBvciBwYXJ0aXRpb24gb3IgYm90aFxuICAgICAgICAgICAgLzxtb2QtbmFtZT4oPzpcXHMqOlxccyo8bW9kLW5hbWU+KT98Olxccyo8bW9kLW5hbWU+Ly5zb3VyY2UucmVwbGFjZShcbiAgICAgICAgICAgICAgLzxtb2QtbmFtZT4vZyxcbiAgICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb2ROYW1lXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICkgK1xuICAgICAgICAgICAgJyknXG4gICAgICAgICksXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgc3RyaW5nOiAvXls8XCJdW1xcc1xcU10rLyxcbiAgICAgICAgICBvcGVyYXRvcjogLzovLFxuICAgICAgICAgIHB1bmN0dWF0aW9uOiAvXFwuL1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgJ3Jhdy1zdHJpbmcnOiB7XG4gICAgICAgIHBhdHRlcm46IC9SXCIoW14oKVxcXFwgXXswLDE2fSlcXChbXFxzXFxTXSo/XFwpXFwxXCIvLFxuICAgICAgICBhbGlhczogJ3N0cmluZycsXG4gICAgICAgIGdyZWVkeTogdHJ1ZVxuICAgICAgfVxuICAgIH0pXG4gICAgUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgnY3BwJywgJ2tleXdvcmQnLCB7XG4gICAgICAnZ2VuZXJpYy1mdW5jdGlvbic6IHtcbiAgICAgICAgcGF0dGVybjogL1xcYig/IW9wZXJhdG9yXFxiKVthLXpfXVxcdypcXHMqPCg/OltePD5dfDxbXjw+XSo+KSo+KD89XFxzKlxcKCkvaSxcbiAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgZnVuY3Rpb246IC9eXFx3Ky8sXG4gICAgICAgICAgZ2VuZXJpYzoge1xuICAgICAgICAgICAgcGF0dGVybjogLzxbXFxzXFxTXSsvLFxuICAgICAgICAgICAgYWxpYXM6ICdjbGFzcy1uYW1lJyxcbiAgICAgICAgICAgIGluc2lkZTogUHJpc20ubGFuZ3VhZ2VzLmNwcFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gICAgUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgnY3BwJywgJ29wZXJhdG9yJywge1xuICAgICAgJ2RvdWJsZS1jb2xvbic6IHtcbiAgICAgICAgcGF0dGVybjogLzo6LyxcbiAgICAgICAgYWxpYXM6ICdwdW5jdHVhdGlvbidcbiAgICAgIH1cbiAgICB9KVxuICAgIFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ2NwcCcsICdjbGFzcy1uYW1lJywge1xuICAgICAgLy8gdGhlIGJhc2UgY2xhdXNlIGlzIGFuIG9wdGlvbmFsIGxpc3Qgb2YgcGFyZW50IGNsYXNzZXNcbiAgICAgIC8vIGh0dHBzOi8vZW4uY3BwcmVmZXJlbmNlLmNvbS93L2NwcC9sYW5ndWFnZS9jbGFzc1xuICAgICAgJ2Jhc2UtY2xhdXNlJzoge1xuICAgICAgICBwYXR0ZXJuOlxuICAgICAgICAgIC8oXFxiKD86Y2xhc3N8c3RydWN0KVxccytcXHcrXFxzKjpcXHMqKVteO3t9XCInXFxzXSsoPzpcXHMrW147e31cIidcXHNdKykqKD89XFxzKls7e10pLyxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgICBpbnNpZGU6IFByaXNtLmxhbmd1YWdlcy5leHRlbmQoJ2NwcCcsIHt9KVxuICAgICAgfVxuICAgIH0pXG4gICAgUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZShcbiAgICAgICdpbnNpZGUnLFxuICAgICAgJ2RvdWJsZS1jb2xvbicsXG4gICAgICB7XG4gICAgICAgIC8vIEFsbCB1bnRva2VuaXplZCB3b3JkcyB0aGF0IGFyZSBub3QgbmFtZXNwYWNlcyBzaG91bGQgYmUgY2xhc3MgbmFtZXNcbiAgICAgICAgJ2NsYXNzLW5hbWUnOiAvXFxiW2Etel9dXFx3KlxcYig/IVxccyo6OikvaVxuICAgICAgfSxcbiAgICAgIFByaXNtLmxhbmd1YWdlcy5jcHBbJ2Jhc2UtY2xhdXNlJ11cbiAgICApXG4gIH0pKFByaXNtKVxufVxuIl0sIm5hbWVzIjpbInJlZnJhY3RvckMiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImNwcCIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwicmVnaXN0ZXIiLCJrZXl3b3JkIiwibW9kTmFtZSIsInNvdXJjZSIsInJlcGxhY2UiLCJsYW5ndWFnZXMiLCJleHRlbmQiLCJwYXR0ZXJuIiwiUmVnRXhwIiwibG9va2JlaGluZCIsIm51bWJlciIsImdyZWVkeSIsIm9wZXJhdG9yIiwiaW5zZXJ0QmVmb3JlIiwiaW5zaWRlIiwic3RyaW5nIiwicHVuY3R1YXRpb24iLCJhbGlhcyIsImdlbmVyaWMiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/cpp.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/crystal.js":
/*!************************************************!*\
  !*** ./node_modules/refractor/lang/crystal.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar refractorRuby = __webpack_require__(/*! ./ruby.js */ \"(ssr)/./node_modules/refractor/lang/ruby.js\");\nmodule.exports = crystal;\ncrystal.displayName = 'crystal';\ncrystal.aliases = [];\nfunction crystal(Prism) {\n  Prism.register(refractorRuby);\n  (function (Prism) {\n    Prism.languages.crystal = Prism.languages.extend('ruby', {\n      keyword: [/\\b(?:__DIR__|__END_LINE__|__FILE__|__LINE__|abstract|alias|annotation|as|asm|begin|break|case|class|def|do|else|elsif|end|ensure|enum|extend|for|fun|if|ifdef|include|instance_sizeof|lib|macro|module|next|of|out|pointerof|private|protected|ptr|require|rescue|return|select|self|sizeof|struct|super|then|type|typeof|undef|uninitialized|union|unless|until|when|while|with|yield)\\b/, {\n        pattern: /(\\.\\s*)(?:is_a|responds_to)\\?/,\n        lookbehind: true\n      }],\n      number: /\\b(?:0b[01_]*[01]|0o[0-7_]*[0-7]|0x[\\da-fA-F_]*[\\da-fA-F]|(?:\\d(?:[\\d_]*\\d)?)(?:\\.[\\d_]*\\d)?(?:[eE][+-]?[\\d_]*\\d)?)(?:_(?:[uif](?:8|16|32|64))?)?\\b/,\n      operator: [/->/, Prism.languages.ruby.operator],\n      punctuation: /[(){}[\\].,;\\\\]/\n    });\n    Prism.languages.insertBefore('crystal', 'string-literal', {\n      attribute: {\n        pattern: /@\\[.*?\\]/,\n        inside: {\n          delimiter: {\n            pattern: /^@\\[|\\]$/,\n            alias: 'punctuation'\n          },\n          attribute: {\n            pattern: /^(\\s*)\\w+/,\n            lookbehind: true,\n            alias: 'class-name'\n          },\n          args: {\n            pattern: /\\S(?:[\\s\\S]*\\S)?/,\n            inside: Prism.languages.crystal\n          }\n        }\n      },\n      expansion: {\n        pattern: /\\{(?:\\{.*?\\}|%.*?%)\\}/,\n        inside: {\n          content: {\n            pattern: /^(\\{.)[\\s\\S]+(?=.\\}$)/,\n            lookbehind: true,\n            inside: Prism.languages.crystal\n          },\n          delimiter: {\n            pattern: /^\\{[\\{%]|[\\}%]\\}$/,\n            alias: 'operator'\n          }\n        }\n      },\n      \"char\": {\n        pattern: /'(?:[^\\\\\\r\\n]{1,2}|\\\\(?:.|u(?:[A-Fa-f0-9]{1,4}|\\{[A-Fa-f0-9]{1,6}\\})))'/,\n        greedy: true\n      }\n    });\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvY3J5c3RhbC5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFDWixJQUFJQSxhQUFhLEdBQUdDLG1CQUFPLENBQUMsOERBQVcsQ0FBQztBQUN4Q0MsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLE9BQU87QUFDeEJBLE9BQU8sQ0FBQ0MsV0FBVyxHQUFHLFNBQVM7QUFDL0JELE9BQU8sQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDcEIsU0FBU0YsT0FBT0EsQ0FBQ0csS0FBSyxFQUFFO0VBQ3RCQSxLQUFLLENBQUNDLFFBQVEsQ0FBQ1IsYUFBYSxDQUFDO0VBQzVCLENBQUMsVUFBVU8sS0FBSyxFQUFFO0lBQ2pCQSxLQUFLLENBQUNFLFNBQVMsQ0FBQ0wsT0FBTyxHQUFHRyxLQUFLLENBQUNFLFNBQVMsQ0FBQ0MsTUFBTSxDQUFDLE1BQU0sRUFBRTtNQUN2REMsT0FBTyxFQUFFLENBQ1AsMlhBQTJYLEVBQzNYO1FBQ0VDLE9BQU8sRUFBRSwrQkFBK0I7UUFDeENDLFVBQVUsRUFBRTtNQUNkLENBQUMsQ0FDRjtNQUNEQyxNQUFNLEVBQ0oscUpBQXFKO01BQ3ZKQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLEVBQUVSLEtBQUssQ0FBQ0UsU0FBUyxDQUFDTyxJQUFJLENBQUNELFFBQVEsQ0FBQztNQUMvQ0UsV0FBVyxFQUFFO0lBQ2YsQ0FBQyxDQUFDO0lBQ0ZWLEtBQUssQ0FBQ0UsU0FBUyxDQUFDUyxZQUFZLENBQUMsU0FBUyxFQUFFLGdCQUFnQixFQUFFO01BQ3hEQyxTQUFTLEVBQUU7UUFDVFAsT0FBTyxFQUFFLFVBQVU7UUFDbkJRLE1BQU0sRUFBRTtVQUNOQyxTQUFTLEVBQUU7WUFDVFQsT0FBTyxFQUFFLFVBQVU7WUFDbkJVLEtBQUssRUFBRTtVQUNULENBQUM7VUFDREgsU0FBUyxFQUFFO1lBQ1RQLE9BQU8sRUFBRSxXQUFXO1lBQ3BCQyxVQUFVLEVBQUUsSUFBSTtZQUNoQlMsS0FBSyxFQUFFO1VBQ1QsQ0FBQztVQUNEQyxJQUFJLEVBQUU7WUFDSlgsT0FBTyxFQUFFLGtCQUFrQjtZQUMzQlEsTUFBTSxFQUFFYixLQUFLLENBQUNFLFNBQVMsQ0FBQ0w7VUFDMUI7UUFDRjtNQUNGLENBQUM7TUFDRG9CLFNBQVMsRUFBRTtRQUNUWixPQUFPLEVBQUUsdUJBQXVCO1FBQ2hDUSxNQUFNLEVBQUU7VUFDTkssT0FBTyxFQUFFO1lBQ1BiLE9BQU8sRUFBRSx1QkFBdUI7WUFDaENDLFVBQVUsRUFBRSxJQUFJO1lBQ2hCTyxNQUFNLEVBQUViLEtBQUssQ0FBQ0UsU0FBUyxDQUFDTDtVQUMxQixDQUFDO1VBQ0RpQixTQUFTLEVBQUU7WUFDVFQsT0FBTyxFQUFFLG1CQUFtQjtZQUM1QlUsS0FBSyxFQUFFO1VBQ1Q7UUFDRjtNQUNGLENBQUM7TUFDRCxRQUFNO1FBQ0pWLE9BQU8sRUFDTCx5RUFBeUU7UUFDM0VjLE1BQU0sRUFBRTtNQUNWO0lBQ0YsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxFQUFFbkIsS0FBSyxDQUFDO0FBQ1giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxjcnlzdGFsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xudmFyIHJlZnJhY3RvclJ1YnkgPSByZXF1aXJlKCcuL3J1YnkuanMnKVxubW9kdWxlLmV4cG9ydHMgPSBjcnlzdGFsXG5jcnlzdGFsLmRpc3BsYXlOYW1lID0gJ2NyeXN0YWwnXG5jcnlzdGFsLmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24gY3J5c3RhbChQcmlzbSkge1xuICBQcmlzbS5yZWdpc3RlcihyZWZyYWN0b3JSdWJ5KVxuICA7KGZ1bmN0aW9uIChQcmlzbSkge1xuICAgIFByaXNtLmxhbmd1YWdlcy5jcnlzdGFsID0gUHJpc20ubGFuZ3VhZ2VzLmV4dGVuZCgncnVieScsIHtcbiAgICAgIGtleXdvcmQ6IFtcbiAgICAgICAgL1xcYig/Ol9fRElSX198X19FTkRfTElORV9ffF9fRklMRV9ffF9fTElORV9ffGFic3RyYWN0fGFsaWFzfGFubm90YXRpb258YXN8YXNtfGJlZ2lufGJyZWFrfGNhc2V8Y2xhc3N8ZGVmfGRvfGVsc2V8ZWxzaWZ8ZW5kfGVuc3VyZXxlbnVtfGV4dGVuZHxmb3J8ZnVufGlmfGlmZGVmfGluY2x1ZGV8aW5zdGFuY2Vfc2l6ZW9mfGxpYnxtYWNyb3xtb2R1bGV8bmV4dHxvZnxvdXR8cG9pbnRlcm9mfHByaXZhdGV8cHJvdGVjdGVkfHB0cnxyZXF1aXJlfHJlc2N1ZXxyZXR1cm58c2VsZWN0fHNlbGZ8c2l6ZW9mfHN0cnVjdHxzdXBlcnx0aGVufHR5cGV8dHlwZW9mfHVuZGVmfHVuaW5pdGlhbGl6ZWR8dW5pb258dW5sZXNzfHVudGlsfHdoZW58d2hpbGV8d2l0aHx5aWVsZClcXGIvLFxuICAgICAgICB7XG4gICAgICAgICAgcGF0dGVybjogLyhcXC5cXHMqKSg/OmlzX2F8cmVzcG9uZHNfdG8pXFw/LyxcbiAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBudW1iZXI6XG4gICAgICAgIC9cXGIoPzowYlswMV9dKlswMV18MG9bMC03X10qWzAtN118MHhbXFxkYS1mQS1GX10qW1xcZGEtZkEtRl18KD86XFxkKD86W1xcZF9dKlxcZCk/KSg/OlxcLltcXGRfXSpcXGQpPyg/OltlRV1bKy1dP1tcXGRfXSpcXGQpPykoPzpfKD86W3VpZl0oPzo4fDE2fDMyfDY0KSk/KT9cXGIvLFxuICAgICAgb3BlcmF0b3I6IFsvLT4vLCBQcmlzbS5sYW5ndWFnZXMucnVieS5vcGVyYXRvcl0sXG4gICAgICBwdW5jdHVhdGlvbjogL1soKXt9W1xcXS4sO1xcXFxdL1xuICAgIH0pXG4gICAgUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgnY3J5c3RhbCcsICdzdHJpbmctbGl0ZXJhbCcsIHtcbiAgICAgIGF0dHJpYnV0ZToge1xuICAgICAgICBwYXR0ZXJuOiAvQFxcWy4qP1xcXS8sXG4gICAgICAgIGluc2lkZToge1xuICAgICAgICAgIGRlbGltaXRlcjoge1xuICAgICAgICAgICAgcGF0dGVybjogL15AXFxbfFxcXSQvLFxuICAgICAgICAgICAgYWxpYXM6ICdwdW5jdHVhdGlvbidcbiAgICAgICAgICB9LFxuICAgICAgICAgIGF0dHJpYnV0ZToge1xuICAgICAgICAgICAgcGF0dGVybjogL14oXFxzKilcXHcrLyxcbiAgICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgICAgICBhbGlhczogJ2NsYXNzLW5hbWUnXG4gICAgICAgICAgfSxcbiAgICAgICAgICBhcmdzOiB7XG4gICAgICAgICAgICBwYXR0ZXJuOiAvXFxTKD86W1xcc1xcU10qXFxTKT8vLFxuICAgICAgICAgICAgaW5zaWRlOiBQcmlzbS5sYW5ndWFnZXMuY3J5c3RhbFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGV4cGFuc2lvbjoge1xuICAgICAgICBwYXR0ZXJuOiAvXFx7KD86XFx7Lio/XFx9fCUuKj8lKVxcfS8sXG4gICAgICAgIGluc2lkZToge1xuICAgICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICAgIHBhdHRlcm46IC9eKFxcey4pW1xcc1xcU10rKD89LlxcfSQpLyxcbiAgICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgICAgICBpbnNpZGU6IFByaXNtLmxhbmd1YWdlcy5jcnlzdGFsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBkZWxpbWl0ZXI6IHtcbiAgICAgICAgICAgIHBhdHRlcm46IC9eXFx7W1xceyVdfFtcXH0lXVxcfSQvLFxuICAgICAgICAgICAgYWxpYXM6ICdvcGVyYXRvcidcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBjaGFyOiB7XG4gICAgICAgIHBhdHRlcm46XG4gICAgICAgICAgLycoPzpbXlxcXFxcXHJcXG5dezEsMn18XFxcXCg/Oi58dSg/OltBLUZhLWYwLTldezEsNH18XFx7W0EtRmEtZjAtOV17MSw2fVxcfSkpKScvLFxuICAgICAgICBncmVlZHk6IHRydWVcbiAgICAgIH1cbiAgICB9KVxuICB9KShQcmlzbSlcbn1cbiJdLCJuYW1lcyI6WyJyZWZyYWN0b3JSdWJ5IiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJjcnlzdGFsIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJyZWdpc3RlciIsImxhbmd1YWdlcyIsImV4dGVuZCIsImtleXdvcmQiLCJwYXR0ZXJuIiwibG9va2JlaGluZCIsIm51bWJlciIsIm9wZXJhdG9yIiwicnVieSIsInB1bmN0dWF0aW9uIiwiaW5zZXJ0QmVmb3JlIiwiYXR0cmlidXRlIiwiaW5zaWRlIiwiZGVsaW1pdGVyIiwiYWxpYXMiLCJhcmdzIiwiZXhwYW5zaW9uIiwiY29udGVudCIsImdyZWVkeSJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/crystal.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/csharp.js":
/*!***********************************************!*\
  !*** ./node_modules/refractor/lang/csharp.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = csharp;\ncsharp.displayName = 'csharp';\ncsharp.aliases = ['dotnet', 'cs'];\nfunction csharp(Prism) {\n  ;\n  (function (Prism) {\n    /**\n     * Replaces all placeholders \"<<n>>\" of given pattern with the n-th replacement (zero based).\n     *\n     * Note: This is a simple text based replacement. Be careful when using backreferences!\n     *\n     * @param {string} pattern the given pattern.\n     * @param {string[]} replacements a list of replacement which can be inserted into the given pattern.\n     * @returns {string} the pattern with all placeholders replaced with their corresponding replacements.\n     * @example replace(/a<<0>>a/.source, [/b+/.source]) === /a(?:b+)a/.source\n     */\n    function replace(pattern, replacements) {\n      return pattern.replace(/<<(\\d+)>>/g, function (m, index) {\n        return '(?:' + replacements[+index] + ')';\n      });\n    }\n    /**\n     * @param {string} pattern\n     * @param {string[]} replacements\n     * @param {string} [flags]\n     * @returns {RegExp}\n     */\n    function re(pattern, replacements, flags) {\n      return RegExp(replace(pattern, replacements), flags || '');\n    }\n    /**\n     * Creates a nested pattern where all occurrences of the string `<<self>>` are replaced with the pattern itself.\n     *\n     * @param {string} pattern\n     * @param {number} depthLog2\n     * @returns {string}\n     */\n    function nested(pattern, depthLog2) {\n      for (var i = 0; i < depthLog2; i++) {\n        pattern = pattern.replace(/<<self>>/g, function () {\n          return '(?:' + pattern + ')';\n        });\n      }\n      return pattern.replace(/<<self>>/g, '[^\\\\s\\\\S]');\n    } // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/\n    var keywordKinds = {\n      // keywords which represent a return or variable type\n      type: 'bool byte char decimal double dynamic float int long object sbyte short string uint ulong ushort var void',\n      // keywords which are used to declare a type\n      typeDeclaration: 'class enum interface record struct',\n      // contextual keywords\n      // (\"var\" and \"dynamic\" are missing because they are used like types)\n      contextual: 'add alias and ascending async await by descending from(?=\\\\s*(?:\\\\w|$)) get global group into init(?=\\\\s*;) join let nameof not notnull on or orderby partial remove select set unmanaged value when where with(?=\\\\s*{)',\n      // all other keywords\n      other: 'abstract as base break case catch checked const continue default delegate do else event explicit extern finally fixed for foreach goto if implicit in internal is lock namespace new null operator out override params private protected public readonly ref return sealed sizeof stackalloc static switch this throw try typeof unchecked unsafe using virtual volatile while yield'\n    }; // keywords\n    function keywordsToPattern(words) {\n      return '\\\\b(?:' + words.trim().replace(/ /g, '|') + ')\\\\b';\n    }\n    var typeDeclarationKeywords = keywordsToPattern(keywordKinds.typeDeclaration);\n    var keywords = RegExp(keywordsToPattern(keywordKinds.type + ' ' + keywordKinds.typeDeclaration + ' ' + keywordKinds.contextual + ' ' + keywordKinds.other));\n    var nonTypeKeywords = keywordsToPattern(keywordKinds.typeDeclaration + ' ' + keywordKinds.contextual + ' ' + keywordKinds.other);\n    var nonContextualKeywords = keywordsToPattern(keywordKinds.type + ' ' + keywordKinds.typeDeclaration + ' ' + keywordKinds.other); // types\n    var generic = nested(/<(?:[^<>;=+\\-*/%&|^]|<<self>>)*>/.source, 2); // the idea behind the other forbidden characters is to prevent false positives. Same for tupleElement.\n    var nestedRound = nested(/\\((?:[^()]|<<self>>)*\\)/.source, 2);\n    var name = /@?\\b[A-Za-z_]\\w*\\b/.source;\n    var genericName = replace(/<<0>>(?:\\s*<<1>>)?/.source, [name, generic]);\n    var identifier = replace(/(?!<<0>>)<<1>>(?:\\s*\\.\\s*<<1>>)*/.source, [nonTypeKeywords, genericName]);\n    var array = /\\[\\s*(?:,\\s*)*\\]/.source;\n    var typeExpressionWithoutTuple = replace(/<<0>>(?:\\s*(?:\\?\\s*)?<<1>>)*(?:\\s*\\?)?/.source, [identifier, array]);\n    var tupleElement = replace(/[^,()<>[\\];=+\\-*/%&|^]|<<0>>|<<1>>|<<2>>/.source, [generic, nestedRound, array]);\n    var tuple = replace(/\\(<<0>>+(?:,<<0>>+)+\\)/.source, [tupleElement]);\n    var typeExpression = replace(/(?:<<0>>|<<1>>)(?:\\s*(?:\\?\\s*)?<<2>>)*(?:\\s*\\?)?/.source, [tuple, identifier, array]);\n    var typeInside = {\n      keyword: keywords,\n      punctuation: /[<>()?,.:[\\]]/\n    }; // strings & characters\n    // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#character-literals\n    // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#string-literals\n    var character = /'(?:[^\\r\\n'\\\\]|\\\\.|\\\\[Uux][\\da-fA-F]{1,8})'/.source; // simplified pattern\n    var regularString = /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/.source;\n    var verbatimString = /@\"(?:\"\"|\\\\[\\s\\S]|[^\\\\\"])*\"(?!\")/.source;\n    Prism.languages.csharp = Prism.languages.extend('clike', {\n      string: [{\n        pattern: re(/(^|[^$\\\\])<<0>>/.source, [verbatimString]),\n        lookbehind: true,\n        greedy: true\n      }, {\n        pattern: re(/(^|[^@$\\\\])<<0>>/.source, [regularString]),\n        lookbehind: true,\n        greedy: true\n      }],\n      'class-name': [{\n        // Using static\n        // using static System.Math;\n        pattern: re(/(\\busing\\s+static\\s+)<<0>>(?=\\s*;)/.source, [identifier]),\n        lookbehind: true,\n        inside: typeInside\n      }, {\n        // Using alias (type)\n        // using Project = PC.MyCompany.Project;\n        pattern: re(/(\\busing\\s+<<0>>\\s*=\\s*)<<1>>(?=\\s*;)/.source, [name, typeExpression]),\n        lookbehind: true,\n        inside: typeInside\n      }, {\n        // Using alias (alias)\n        // using Project = PC.MyCompany.Project;\n        pattern: re(/(\\busing\\s+)<<0>>(?=\\s*=)/.source, [name]),\n        lookbehind: true\n      }, {\n        // Type declarations\n        // class Foo<A, B>\n        // interface Foo<out A, B>\n        pattern: re(/(\\b<<0>>\\s+)<<1>>/.source, [typeDeclarationKeywords, genericName]),\n        lookbehind: true,\n        inside: typeInside\n      }, {\n        // Single catch exception declaration\n        // catch(Foo)\n        // (things like catch(Foo e) is covered by variable declaration)\n        pattern: re(/(\\bcatch\\s*\\(\\s*)<<0>>/.source, [identifier]),\n        lookbehind: true,\n        inside: typeInside\n      }, {\n        // Name of the type parameter of generic constraints\n        // where Foo : class\n        pattern: re(/(\\bwhere\\s+)<<0>>/.source, [name]),\n        lookbehind: true\n      }, {\n        // Casts and checks via as and is.\n        // as Foo<A>, is Bar<B>\n        // (things like if(a is Foo b) is covered by variable declaration)\n        pattern: re(/(\\b(?:is(?:\\s+not)?|as)\\s+)<<0>>/.source, [typeExpressionWithoutTuple]),\n        lookbehind: true,\n        inside: typeInside\n      }, {\n        // Variable, field and parameter declaration\n        // (Foo bar, Bar baz, Foo[,,] bay, Foo<Bar, FooBar<Bar>> bax)\n        pattern: re(/\\b<<0>>(?=\\s+(?!<<1>>|with\\s*\\{)<<2>>(?:\\s*[=,;:{)\\]]|\\s+(?:in|when)\\b))/.source, [typeExpression, nonContextualKeywords, name]),\n        inside: typeInside\n      }],\n      keyword: keywords,\n      // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#literals\n      number: /(?:\\b0(?:x[\\da-f_]*[\\da-f]|b[01_]*[01])|(?:\\B\\.\\d+(?:_+\\d+)*|\\b\\d+(?:_+\\d+)*(?:\\.\\d+(?:_+\\d+)*)?)(?:e[-+]?\\d+(?:_+\\d+)*)?)(?:[dflmu]|lu|ul)?\\b/i,\n      operator: />>=?|<<=?|[-=]>|([-+&|])\\1|~|\\?\\?=?|[-+*/%&|^!=<>]=?/,\n      punctuation: /\\?\\.?|::|[{}[\\];(),.:]/\n    });\n    Prism.languages.insertBefore('csharp', 'number', {\n      range: {\n        pattern: /\\.\\./,\n        alias: 'operator'\n      }\n    });\n    Prism.languages.insertBefore('csharp', 'punctuation', {\n      'named-parameter': {\n        pattern: re(/([(,]\\s*)<<0>>(?=\\s*:)/.source, [name]),\n        lookbehind: true,\n        alias: 'punctuation'\n      }\n    });\n    Prism.languages.insertBefore('csharp', 'class-name', {\n      namespace: {\n        // namespace Foo.Bar {}\n        // using Foo.Bar;\n        pattern: re(/(\\b(?:namespace|using)\\s+)<<0>>(?:\\s*\\.\\s*<<0>>)*(?=\\s*[;{])/.source, [name]),\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      'type-expression': {\n        // default(Foo), typeof(Foo<Bar>), sizeof(int)\n        pattern: re(/(\\b(?:default|sizeof|typeof)\\s*\\(\\s*(?!\\s))(?:[^()\\s]|\\s(?!\\s)|<<0>>)*(?=\\s*\\))/.source, [nestedRound]),\n        lookbehind: true,\n        alias: 'class-name',\n        inside: typeInside\n      },\n      'return-type': {\n        // Foo<Bar> ForBar(); Foo IFoo.Bar() => 0\n        // int this[int index] => 0; T IReadOnlyList<T>.this[int index] => this[index];\n        // int Foo => 0; int Foo { get; set } = 0;\n        pattern: re(/<<0>>(?=\\s+(?:<<1>>\\s*(?:=>|[({]|\\.\\s*this\\s*\\[)|this\\s*\\[))/.source, [typeExpression, identifier]),\n        inside: typeInside,\n        alias: 'class-name'\n      },\n      'constructor-invocation': {\n        // new List<Foo<Bar[]>> { }\n        pattern: re(/(\\bnew\\s+)<<0>>(?=\\s*[[({])/.source, [typeExpression]),\n        lookbehind: true,\n        inside: typeInside,\n        alias: 'class-name'\n      },\n      /*'explicit-implementation': {\n      // int IFoo<Foo>.Bar => 0; void IFoo<Foo<Foo>>.Foo<T>();\n      pattern: replace(/\\b<<0>>(?=\\.<<1>>)/, className, methodOrPropertyDeclaration),\n      inside: classNameInside,\n      alias: 'class-name'\n      },*/\n      'generic-method': {\n        // foo<Bar>()\n        pattern: re(/<<0>>\\s*<<1>>(?=\\s*\\()/.source, [name, generic]),\n        inside: {\n          \"function\": re(/^<<0>>/.source, [name]),\n          generic: {\n            pattern: RegExp(generic),\n            alias: 'class-name',\n            inside: typeInside\n          }\n        }\n      },\n      'type-list': {\n        // The list of types inherited or of generic constraints\n        // class Foo<F> : Bar, IList<FooBar>\n        // where F : Bar, IList<int>\n        pattern: re(/\\b((?:<<0>>\\s+<<1>>|record\\s+<<1>>\\s*<<5>>|where\\s+<<2>>)\\s*:\\s*)(?:<<3>>|<<4>>|<<1>>\\s*<<5>>|<<6>>)(?:\\s*,\\s*(?:<<3>>|<<4>>|<<6>>))*(?=\\s*(?:where|[{;]|=>|$))/.source, [typeDeclarationKeywords, genericName, name, typeExpression, keywords.source, nestedRound, /\\bnew\\s*\\(\\s*\\)/.source]),\n        lookbehind: true,\n        inside: {\n          'record-arguments': {\n            pattern: re(/(^(?!new\\s*\\()<<0>>\\s*)<<1>>/.source, [genericName, nestedRound]),\n            lookbehind: true,\n            greedy: true,\n            inside: Prism.languages.csharp\n          },\n          keyword: keywords,\n          'class-name': {\n            pattern: RegExp(typeExpression),\n            greedy: true,\n            inside: typeInside\n          },\n          punctuation: /[,()]/\n        }\n      },\n      preprocessor: {\n        pattern: /(^[\\t ]*)#.*/m,\n        lookbehind: true,\n        alias: 'property',\n        inside: {\n          // highlight preprocessor directives as keywords\n          directive: {\n            pattern: /(#)\\b(?:define|elif|else|endif|endregion|error|if|line|nullable|pragma|region|undef|warning)\\b/,\n            lookbehind: true,\n            alias: 'keyword'\n          }\n        }\n      }\n    }); // attributes\n    var regularStringOrCharacter = regularString + '|' + character;\n    var regularStringCharacterOrComment = replace(/\\/(?![*/])|\\/\\/[^\\r\\n]*[\\r\\n]|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|<<0>>/.source, [regularStringOrCharacter]);\n    var roundExpression = nested(replace(/[^\"'/()]|<<0>>|\\(<<self>>*\\)/.source, [regularStringCharacterOrComment]), 2); // https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/attributes/#attribute-targets\n    var attrTarget = /\\b(?:assembly|event|field|method|module|param|property|return|type)\\b/.source;\n    var attr = replace(/<<0>>(?:\\s*\\(<<1>>*\\))?/.source, [identifier, roundExpression]);\n    Prism.languages.insertBefore('csharp', 'class-name', {\n      attribute: {\n        // Attributes\n        // [Foo], [Foo(1), Bar(2, Prop = \"foo\")], [return: Foo(1), Bar(2)], [assembly: Foo(Bar)]\n        pattern: re(/((?:^|[^\\s\\w>)?])\\s*\\[\\s*)(?:<<0>>\\s*:\\s*)?<<1>>(?:\\s*,\\s*<<1>>)*(?=\\s*\\])/.source, [attrTarget, attr]),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          target: {\n            pattern: re(/^<<0>>(?=\\s*:)/.source, [attrTarget]),\n            alias: 'keyword'\n          },\n          'attribute-arguments': {\n            pattern: re(/\\(<<0>>*\\)/.source, [roundExpression]),\n            inside: Prism.languages.csharp\n          },\n          'class-name': {\n            pattern: RegExp(identifier),\n            inside: {\n              punctuation: /\\./\n            }\n          },\n          punctuation: /[:,]/\n        }\n      }\n    }); // string interpolation\n    var formatString = /:[^}\\r\\n]+/.source; // multi line\n    var mInterpolationRound = nested(replace(/[^\"'/()]|<<0>>|\\(<<self>>*\\)/.source, [regularStringCharacterOrComment]), 2);\n    var mInterpolation = replace(/\\{(?!\\{)(?:(?![}:])<<0>>)*<<1>>?\\}/.source, [mInterpolationRound, formatString]); // single line\n    var sInterpolationRound = nested(replace(/[^\"'/()]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|<<0>>|\\(<<self>>*\\)/.source, [regularStringOrCharacter]), 2);\n    var sInterpolation = replace(/\\{(?!\\{)(?:(?![}:])<<0>>)*<<1>>?\\}/.source, [sInterpolationRound, formatString]);\n    function createInterpolationInside(interpolation, interpolationRound) {\n      return {\n        interpolation: {\n          pattern: re(/((?:^|[^{])(?:\\{\\{)*)<<0>>/.source, [interpolation]),\n          lookbehind: true,\n          inside: {\n            'format-string': {\n              pattern: re(/(^\\{(?:(?![}:])<<0>>)*)<<1>>(?=\\}$)/.source, [interpolationRound, formatString]),\n              lookbehind: true,\n              inside: {\n                punctuation: /^:/\n              }\n            },\n            punctuation: /^\\{|\\}$/,\n            expression: {\n              pattern: /[\\s\\S]+/,\n              alias: 'language-csharp',\n              inside: Prism.languages.csharp\n            }\n          }\n        },\n        string: /[\\s\\S]+/\n      };\n    }\n    Prism.languages.insertBefore('csharp', 'string', {\n      'interpolation-string': [{\n        pattern: re(/(^|[^\\\\])(?:\\$@|@\\$)\"(?:\"\"|\\\\[\\s\\S]|\\{\\{|<<0>>|[^\\\\{\"])*\"/.source, [mInterpolation]),\n        lookbehind: true,\n        greedy: true,\n        inside: createInterpolationInside(mInterpolation, mInterpolationRound)\n      }, {\n        pattern: re(/(^|[^@\\\\])\\$\"(?:\\\\.|\\{\\{|<<0>>|[^\\\\\"{])*\"/.source, [sInterpolation]),\n        lookbehind: true,\n        greedy: true,\n        inside: createInterpolationInside(sInterpolation, sInterpolationRound)\n      }],\n      \"char\": {\n        pattern: RegExp(character),\n        greedy: true\n      }\n    });\n    Prism.languages.dotnet = Prism.languages.cs = Prism.languages.csharp;\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/csharp.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/cshtml.js":
/*!***********************************************!*\
  !*** ./node_modules/refractor/lang/cshtml.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar refractorCsharp = __webpack_require__(/*! ./csharp.js */ \"(ssr)/./node_modules/refractor/lang/csharp.js\");\nmodule.exports = cshtml;\ncshtml.displayName = 'cshtml';\ncshtml.aliases = ['razor'];\nfunction cshtml(Prism) {\n  Prism.register(refractorCsharp)\n  // Docs:\n  // https://docs.microsoft.com/en-us/aspnet/core/razor-pages/?view=aspnetcore-5.0&tabs=visual-studio\n  // https://docs.microsoft.com/en-us/aspnet/core/mvc/views/razor?view=aspnetcore-5.0\n  ;\n  (function (Prism) {\n    var commentLike = /\\/(?![/*])|\\/\\/.*[\\r\\n]|\\/\\*[^*]*(?:\\*(?!\\/)[^*]*)*\\*\\//.source;\n    var stringLike = /@(?!\")|\"(?:[^\\r\\n\\\\\"]|\\\\.)*\"|@\"(?:[^\\\\\"]|\"\"|\\\\[\\s\\S])*\"(?!\")/.source + '|' + /'(?:(?:[^\\r\\n'\\\\]|\\\\.|\\\\[Uux][\\da-fA-F]{1,8})'|(?=[^\\\\](?!')))/.source;\n    /**\n     * Creates a nested pattern where all occurrences of the string `<<self>>` are replaced with the pattern itself.\n     *\n     * @param {string} pattern\n     * @param {number} depthLog2\n     * @returns {string}\n     */\n    function nested(pattern, depthLog2) {\n      for (var i = 0; i < depthLog2; i++) {\n        pattern = pattern.replace(/<self>/g, function () {\n          return '(?:' + pattern + ')';\n        });\n      }\n      return pattern.replace(/<self>/g, '[^\\\\s\\\\S]').replace(/<str>/g, '(?:' + stringLike + ')').replace(/<comment>/g, '(?:' + commentLike + ')');\n    }\n    var round = nested(/\\((?:[^()'\"@/]|<str>|<comment>|<self>)*\\)/.source, 2);\n    var square = nested(/\\[(?:[^\\[\\]'\"@/]|<str>|<comment>|<self>)*\\]/.source, 2);\n    var curly = nested(/\\{(?:[^{}'\"@/]|<str>|<comment>|<self>)*\\}/.source, 2);\n    var angle = nested(/<(?:[^<>'\"@/]|<str>|<comment>|<self>)*>/.source, 2); // Note about the above bracket patterns:\n    // They all ignore HTML expressions that might be in the C# code. This is a problem because HTML (like strings and\n    // comments) is parsed differently. This is a huge problem because HTML might contain brackets and quotes which\n    // messes up the bracket and string counting implemented by the above patterns.\n    //\n    // This problem is not fixable because 1) HTML expression are highly context sensitive and very difficult to detect\n    // and 2) they require one capturing group at every nested level. See the `tagRegion` pattern to admire the\n    // complexity of an HTML expression.\n    //\n    // To somewhat alleviate the problem a bit, the patterns for characters (e.g. 'a') is very permissive, it also\n    // allows invalid characters to support HTML expressions like this: <p>That's it!</p>.\n    var tagAttrs = /(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?/.source;\n    var tagContent = /(?!\\d)[^\\s>\\/=$<%]+/.source + tagAttrs + /\\s*\\/?>/.source;\n    var tagRegion = /\\B@?/.source + '(?:' + /<([a-zA-Z][\\w:]*)/.source + tagAttrs + /\\s*>/.source + '(?:' + (/[^<]/.source + '|' +\n    // all tags that are not the start tag\n    // eslint-disable-next-line regexp/strict\n    /<\\/?(?!\\1\\b)/.source + tagContent + '|' +\n    // nested start tag\n    nested(\n    // eslint-disable-next-line regexp/strict\n    /<\\1/.source + tagAttrs + /\\s*>/.source + '(?:' + (/[^<]/.source + '|' +\n    // all tags that are not the start tag\n    // eslint-disable-next-line regexp/strict\n    /<\\/?(?!\\1\\b)/.source + tagContent + '|' + '<self>') + ')*' +\n    // eslint-disable-next-line regexp/strict\n    /<\\/\\1\\s*>/.source, 2)) + ')*' +\n    // eslint-disable-next-line regexp/strict\n    /<\\/\\1\\s*>/.source + '|' + /</.source + tagContent + ')'; // Now for the actual language definition(s):\n    //\n    // Razor as a language has 2 parts:\n    //  1) CSHTML: A markup-like language that has been extended with inline C# code expressions and blocks.\n    //  2) C#+HTML: A variant of C# that can contain CSHTML tags as expressions.\n    //\n    // In the below code, both CSHTML and C#+HTML will be create as separate language definitions that reference each\n    // other. However, only CSHTML will be exported via `Prism.languages`.\n    Prism.languages.cshtml = Prism.languages.extend('markup', {});\n    var csharpWithHtml = Prism.languages.insertBefore('csharp', 'string', {\n      html: {\n        pattern: RegExp(tagRegion),\n        greedy: true,\n        inside: Prism.languages.cshtml\n      }\n    }, {\n      csharp: Prism.languages.extend('csharp', {})\n    });\n    var cs = {\n      pattern: /\\S[\\s\\S]*/,\n      alias: 'language-csharp',\n      inside: csharpWithHtml\n    };\n    Prism.languages.insertBefore('cshtml', 'prolog', {\n      'razor-comment': {\n        pattern: /@\\*[\\s\\S]*?\\*@/,\n        greedy: true,\n        alias: 'comment'\n      },\n      block: {\n        pattern: RegExp(/(^|[^@])@/.source + '(?:' + [\n        // @{ ... }\n        curly,\n        // @code{ ... }\n        /(?:code|functions)\\s*/.source + curly,\n        // @for (...) { ... }\n        /(?:for|foreach|lock|switch|using|while)\\s*/.source + round + /\\s*/.source + curly,\n        // @do { ... } while (...);\n        /do\\s*/.source + curly + /\\s*while\\s*/.source + round + /(?:\\s*;)?/.source,\n        // @try { ... } catch (...) { ... } finally { ... }\n        /try\\s*/.source + curly + /\\s*catch\\s*/.source + round + /\\s*/.source + curly + /\\s*finally\\s*/.source + curly,\n        // @if (...) {...} else if (...) {...} else {...}\n        /if\\s*/.source + round + /\\s*/.source + curly + '(?:' + /\\s*else/.source + '(?:' + /\\s+if\\s*/.source + round + ')?' + /\\s*/.source + curly + ')*'].join('|') + ')'),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          keyword: /^@\\w*/,\n          csharp: cs\n        }\n      },\n      directive: {\n        pattern: /^([ \\t]*)@(?:addTagHelper|attribute|implements|inherits|inject|layout|model|namespace|page|preservewhitespace|removeTagHelper|section|tagHelperPrefix|using)(?=\\s).*/m,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          keyword: /^@\\w+/,\n          csharp: cs\n        }\n      },\n      value: {\n        pattern: RegExp(/(^|[^@])@/.source + /(?:await\\b\\s*)?/.source + '(?:' + /\\w+\\b/.source + '|' + round + ')' + '(?:' + /[?!]?\\.\\w+\\b/.source + '|' + round + '|' + square + '|' + angle + round + ')*'),\n        lookbehind: true,\n        greedy: true,\n        alias: 'variable',\n        inside: {\n          keyword: /^@/,\n          csharp: cs\n        }\n      },\n      'delegate-operator': {\n        pattern: /(^|[^@])@(?=<)/,\n        lookbehind: true,\n        alias: 'operator'\n      }\n    });\n    Prism.languages.razor = Prism.languages.cshtml;\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/cshtml.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/csp.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/csp.js ***!
  \********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = csp;\ncsp.displayName = 'csp';\ncsp.aliases = [];\nfunction csp(Prism) {\n  /**\n   * Original by Scott Helme.\n   *\n   * Reference: https://scotthelme.co.uk/csp-cheat-sheet/\n   *\n   * Supports the following:\n   *  - https://www.w3.org/TR/CSP1/\n   *  - https://www.w3.org/TR/CSP2/\n   *  - https://www.w3.org/TR/CSP3/\n   */\n  ;\n  (function (Prism) {\n    /**\n     * @param {string} source\n     * @returns {RegExp}\n     */\n    function value(source) {\n      return RegExp(/([ \\t])/.source + '(?:' + source + ')' + /(?=[\\s;]|$)/.source, 'i');\n    }\n    Prism.languages.csp = {\n      directive: {\n        pattern: /(^|[\\s;])(?:base-uri|block-all-mixed-content|(?:child|connect|default|font|frame|img|manifest|media|object|prefetch|script|style|worker)-src|disown-opener|form-action|frame-(?:ancestors|options)|input-protection(?:-(?:clip|selectors))?|navigate-to|plugin-types|policy-uri|referrer|reflected-xss|report-(?:to|uri)|require-sri-for|sandbox|(?:script|style)-src-(?:attr|elem)|upgrade-insecure-requests)(?=[\\s;]|$)/i,\n        lookbehind: true,\n        alias: 'property'\n      },\n      scheme: {\n        pattern: value(/[a-z][a-z0-9.+-]*:/.source),\n        lookbehind: true\n      },\n      none: {\n        pattern: value(/'none'/.source),\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      nonce: {\n        pattern: value(/'nonce-[-+/\\w=]+'/.source),\n        lookbehind: true,\n        alias: 'number'\n      },\n      hash: {\n        pattern: value(/'sha(?:256|384|512)-[-+/\\w=]+'/.source),\n        lookbehind: true,\n        alias: 'number'\n      },\n      host: {\n        pattern: value(/[a-z][a-z0-9.+-]*:\\/\\/[^\\s;,']*/.source + '|' + /\\*[^\\s;,']*/.source + '|' + /[a-z0-9-]+(?:\\.[a-z0-9-]+)+(?::[\\d*]+)?(?:\\/[^\\s;,']*)?/.source),\n        lookbehind: true,\n        alias: 'url',\n        inside: {\n          important: /\\*/\n        }\n      },\n      keyword: [{\n        pattern: value(/'unsafe-[a-z-]+'/.source),\n        lookbehind: true,\n        alias: 'unsafe'\n      }, {\n        pattern: value(/'[a-z-]+'/.source),\n        lookbehind: true,\n        alias: 'safe'\n      }],\n      punctuation: /;/\n    };\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvY3NwLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsR0FBRztBQUNwQkEsR0FBRyxDQUFDQyxXQUFXLEdBQUcsS0FBSztBQUN2QkQsR0FBRyxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNoQixTQUFTRixHQUFHQSxDQUFDRyxLQUFLLEVBQUU7RUFDbEI7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRTtFQUFDLENBQUMsVUFBVUEsS0FBSyxFQUFFO0lBQ2pCO0FBQ0o7QUFDQTtBQUNBO0lBQ0ksU0FBU0MsS0FBS0EsQ0FBQ0MsTUFBTSxFQUFFO01BQ3JCLE9BQU9DLE1BQU0sQ0FDWCxTQUFTLENBQUNELE1BQU0sR0FBRyxLQUFLLEdBQUdBLE1BQU0sR0FBRyxHQUFHLEdBQUcsYUFBYSxDQUFDQSxNQUFNLEVBQzlELEdBQ0YsQ0FBQztJQUNIO0lBQ0FGLEtBQUssQ0FBQ0ksU0FBUyxDQUFDUCxHQUFHLEdBQUc7TUFDcEJRLFNBQVMsRUFBRTtRQUNUQyxPQUFPLEVBQ0wsNFpBQTRaO1FBQzlaQyxVQUFVLEVBQUUsSUFBSTtRQUNoQkMsS0FBSyxFQUFFO01BQ1QsQ0FBQztNQUNEQyxNQUFNLEVBQUU7UUFDTkgsT0FBTyxFQUFFTCxLQUFLLENBQUMsb0JBQW9CLENBQUNDLE1BQU0sQ0FBQztRQUMzQ0ssVUFBVSxFQUFFO01BQ2QsQ0FBQztNQUNERyxJQUFJLEVBQUU7UUFDSkosT0FBTyxFQUFFTCxLQUFLLENBQUMsUUFBUSxDQUFDQyxNQUFNLENBQUM7UUFDL0JLLFVBQVUsRUFBRSxJQUFJO1FBQ2hCQyxLQUFLLEVBQUU7TUFDVCxDQUFDO01BQ0RHLEtBQUssRUFBRTtRQUNMTCxPQUFPLEVBQUVMLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQ0MsTUFBTSxDQUFDO1FBQzFDSyxVQUFVLEVBQUUsSUFBSTtRQUNoQkMsS0FBSyxFQUFFO01BQ1QsQ0FBQztNQUNESSxJQUFJLEVBQUU7UUFDSk4sT0FBTyxFQUFFTCxLQUFLLENBQUMsZ0NBQWdDLENBQUNDLE1BQU0sQ0FBQztRQUN2REssVUFBVSxFQUFFLElBQUk7UUFDaEJDLEtBQUssRUFBRTtNQUNULENBQUM7TUFDREssSUFBSSxFQUFFO1FBQ0pQLE9BQU8sRUFBRUwsS0FBSyxDQUNaLGlDQUFpQyxDQUFDQyxNQUFNLEdBQ3RDLEdBQUcsR0FDSCxhQUFhLENBQUNBLE1BQU0sR0FDcEIsR0FBRyxHQUNILHlEQUF5RCxDQUFDQSxNQUM5RCxDQUFDO1FBQ0RLLFVBQVUsRUFBRSxJQUFJO1FBQ2hCQyxLQUFLLEVBQUUsS0FBSztRQUNaTSxNQUFNLEVBQUU7VUFDTkMsU0FBUyxFQUFFO1FBQ2I7TUFDRixDQUFDO01BQ0RDLE9BQU8sRUFBRSxDQUNQO1FBQ0VWLE9BQU8sRUFBRUwsS0FBSyxDQUFDLGtCQUFrQixDQUFDQyxNQUFNLENBQUM7UUFDekNLLFVBQVUsRUFBRSxJQUFJO1FBQ2hCQyxLQUFLLEVBQUU7TUFDVCxDQUFDLEVBQ0Q7UUFDRUYsT0FBTyxFQUFFTCxLQUFLLENBQUMsV0FBVyxDQUFDQyxNQUFNLENBQUM7UUFDbENLLFVBQVUsRUFBRSxJQUFJO1FBQ2hCQyxLQUFLLEVBQUU7TUFDVCxDQUFDLENBQ0Y7TUFDRFMsV0FBVyxFQUFFO0lBQ2YsQ0FBQztFQUNILENBQUMsRUFBRWpCLEtBQUssQ0FBQztBQUNYIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcY3NwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNzcFxuY3NwLmRpc3BsYXlOYW1lID0gJ2NzcCdcbmNzcC5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIGNzcChQcmlzbSkge1xuICAvKipcbiAgICogT3JpZ2luYWwgYnkgU2NvdHQgSGVsbWUuXG4gICAqXG4gICAqIFJlZmVyZW5jZTogaHR0cHM6Ly9zY290dGhlbG1lLmNvLnVrL2NzcC1jaGVhdC1zaGVldC9cbiAgICpcbiAgICogU3VwcG9ydHMgdGhlIGZvbGxvd2luZzpcbiAgICogIC0gaHR0cHM6Ly93d3cudzMub3JnL1RSL0NTUDEvXG4gICAqICAtIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9DU1AyL1xuICAgKiAgLSBodHRwczovL3d3dy53My5vcmcvVFIvQ1NQMy9cbiAgICovXG4gIDsoZnVuY3Rpb24gKFByaXNtKSB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNvdXJjZVxuICAgICAqIEByZXR1cm5zIHtSZWdFeHB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gdmFsdWUoc291cmNlKSB7XG4gICAgICByZXR1cm4gUmVnRXhwKFxuICAgICAgICAvKFsgXFx0XSkvLnNvdXJjZSArICcoPzonICsgc291cmNlICsgJyknICsgLyg/PVtcXHM7XXwkKS8uc291cmNlLFxuICAgICAgICAnaSdcbiAgICAgIClcbiAgICB9XG4gICAgUHJpc20ubGFuZ3VhZ2VzLmNzcCA9IHtcbiAgICAgIGRpcmVjdGl2ZToge1xuICAgICAgICBwYXR0ZXJuOlxuICAgICAgICAgIC8oXnxbXFxzO10pKD86YmFzZS11cml8YmxvY2stYWxsLW1peGVkLWNvbnRlbnR8KD86Y2hpbGR8Y29ubmVjdHxkZWZhdWx0fGZvbnR8ZnJhbWV8aW1nfG1hbmlmZXN0fG1lZGlhfG9iamVjdHxwcmVmZXRjaHxzY3JpcHR8c3R5bGV8d29ya2VyKS1zcmN8ZGlzb3duLW9wZW5lcnxmb3JtLWFjdGlvbnxmcmFtZS0oPzphbmNlc3RvcnN8b3B0aW9ucyl8aW5wdXQtcHJvdGVjdGlvbig/Oi0oPzpjbGlwfHNlbGVjdG9ycykpP3xuYXZpZ2F0ZS10b3xwbHVnaW4tdHlwZXN8cG9saWN5LXVyaXxyZWZlcnJlcnxyZWZsZWN0ZWQteHNzfHJlcG9ydC0oPzp0b3x1cmkpfHJlcXVpcmUtc3JpLWZvcnxzYW5kYm94fCg/OnNjcmlwdHxzdHlsZSktc3JjLSg/OmF0dHJ8ZWxlbSl8dXBncmFkZS1pbnNlY3VyZS1yZXF1ZXN0cykoPz1bXFxzO118JCkvaSxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgYWxpYXM6ICdwcm9wZXJ0eSdcbiAgICAgIH0sXG4gICAgICBzY2hlbWU6IHtcbiAgICAgICAgcGF0dGVybjogdmFsdWUoL1thLXpdW2EtejAtOS4rLV0qOi8uc291cmNlKSxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIG5vbmU6IHtcbiAgICAgICAgcGF0dGVybjogdmFsdWUoLydub25lJy8uc291cmNlKSxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgYWxpYXM6ICdrZXl3b3JkJ1xuICAgICAgfSxcbiAgICAgIG5vbmNlOiB7XG4gICAgICAgIHBhdHRlcm46IHZhbHVlKC8nbm9uY2UtWy0rL1xcdz1dKycvLnNvdXJjZSksXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGFsaWFzOiAnbnVtYmVyJ1xuICAgICAgfSxcbiAgICAgIGhhc2g6IHtcbiAgICAgICAgcGF0dGVybjogdmFsdWUoLydzaGEoPzoyNTZ8Mzg0fDUxMiktWy0rL1xcdz1dKycvLnNvdXJjZSksXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGFsaWFzOiAnbnVtYmVyJ1xuICAgICAgfSxcbiAgICAgIGhvc3Q6IHtcbiAgICAgICAgcGF0dGVybjogdmFsdWUoXG4gICAgICAgICAgL1thLXpdW2EtejAtOS4rLV0qOlxcL1xcL1teXFxzOywnXSovLnNvdXJjZSArXG4gICAgICAgICAgICAnfCcgK1xuICAgICAgICAgICAgL1xcKlteXFxzOywnXSovLnNvdXJjZSArXG4gICAgICAgICAgICAnfCcgK1xuICAgICAgICAgICAgL1thLXowLTktXSsoPzpcXC5bYS16MC05LV0rKSsoPzo6W1xcZCpdKyk/KD86XFwvW15cXHM7LCddKik/Ly5zb3VyY2VcbiAgICAgICAgKSxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgYWxpYXM6ICd1cmwnLFxuICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICBpbXBvcnRhbnQ6IC9cXCovXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBrZXl3b3JkOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwYXR0ZXJuOiB2YWx1ZSgvJ3Vuc2FmZS1bYS16LV0rJy8uc291cmNlKSxcbiAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAgIGFsaWFzOiAndW5zYWZlJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcGF0dGVybjogdmFsdWUoLydbYS16LV0rJy8uc291cmNlKSxcbiAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAgIGFsaWFzOiAnc2FmZSdcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIHB1bmN0dWF0aW9uOiAvOy9cbiAgICB9XG4gIH0pKFByaXNtKVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJjc3AiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsInZhbHVlIiwic291cmNlIiwiUmVnRXhwIiwibGFuZ3VhZ2VzIiwiZGlyZWN0aXZlIiwicGF0dGVybiIsImxvb2tiZWhpbmQiLCJhbGlhcyIsInNjaGVtZSIsIm5vbmUiLCJub25jZSIsImhhc2giLCJob3N0IiwiaW5zaWRlIiwiaW1wb3J0YW50Iiwia2V5d29yZCIsInB1bmN0dWF0aW9uIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/csp.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/css-extras.js":
/*!***************************************************!*\
  !*** ./node_modules/refractor/lang/css-extras.js ***!
  \***************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = cssExtras;\ncssExtras.displayName = 'cssExtras';\ncssExtras.aliases = [];\nfunction cssExtras(Prism) {\n  ;\n  (function (Prism) {\n    var string = /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;\n    var selectorInside;\n    Prism.languages.css.selector = {\n      pattern: Prism.languages.css.selector.pattern,\n      lookbehind: true,\n      inside: selectorInside = {\n        'pseudo-element': /:(?:after|before|first-letter|first-line|selection)|::[-\\w]+/,\n        'pseudo-class': /:[-\\w]+/,\n        \"class\": /\\.[-\\w]+/,\n        id: /#[-\\w]+/,\n        attribute: {\n          pattern: RegExp('\\\\[(?:[^[\\\\]\"\\']|' + string.source + ')*\\\\]'),\n          greedy: true,\n          inside: {\n            punctuation: /^\\[|\\]$/,\n            'case-sensitivity': {\n              pattern: /(\\s)[si]$/i,\n              lookbehind: true,\n              alias: 'keyword'\n            },\n            namespace: {\n              pattern: /^(\\s*)(?:(?!\\s)[-*\\w\\xA0-\\uFFFF])*\\|(?!=)/,\n              lookbehind: true,\n              inside: {\n                punctuation: /\\|$/\n              }\n            },\n            'attr-name': {\n              pattern: /^(\\s*)(?:(?!\\s)[-\\w\\xA0-\\uFFFF])+/,\n              lookbehind: true\n            },\n            'attr-value': [string, {\n              pattern: /(=\\s*)(?:(?!\\s)[-\\w\\xA0-\\uFFFF])+(?=\\s*$)/,\n              lookbehind: true\n            }],\n            operator: /[|~*^$]?=/\n          }\n        },\n        'n-th': [{\n          pattern: /(\\(\\s*)[+-]?\\d*[\\dn](?:\\s*[+-]\\s*\\d+)?(?=\\s*\\))/,\n          lookbehind: true,\n          inside: {\n            number: /[\\dn]+/,\n            operator: /[+-]/\n          }\n        }, {\n          pattern: /(\\(\\s*)(?:even|odd)(?=\\s*\\))/i,\n          lookbehind: true\n        }],\n        combinator: />|\\+|~|\\|\\|/,\n        // the `tag` token has been existed and removed.\n        // because we can't find a perfect tokenize to match it.\n        // if you want to add it, please read https://github.com/PrismJS/prism/pull/2373 first.\n        punctuation: /[(),]/\n      }\n    };\n    Prism.languages.css['atrule'].inside['selector-function-argument'].inside = selectorInside;\n    Prism.languages.insertBefore('css', 'property', {\n      variable: {\n        pattern: /(^|[^-\\w\\xA0-\\uFFFF])--(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*/i,\n        lookbehind: true\n      }\n    });\n    var unit = {\n      pattern: /(\\b\\d+)(?:%|[a-z]+(?![\\w-]))/,\n      lookbehind: true\n    }; // 123 -123 .123 -.123 12.3 -12.3\n    var number = {\n      pattern: /(^|[^\\w.-])-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/,\n      lookbehind: true\n    };\n    Prism.languages.insertBefore('css', 'function', {\n      operator: {\n        pattern: /(\\s)[+\\-*\\/](?=\\s)/,\n        lookbehind: true\n      },\n      // CAREFUL!\n      // Previewers and Inline color use hexcode and color.\n      hexcode: {\n        pattern: /\\B#[\\da-f]{3,8}\\b/i,\n        alias: 'color'\n      },\n      color: [{\n        pattern: /(^|[^\\w-])(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)(?![\\w-])/i,\n        lookbehind: true\n      }, {\n        pattern: /\\b(?:hsl|rgb)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:hsl|rgb)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B/i,\n        inside: {\n          unit: unit,\n          number: number,\n          \"function\": /[\\w-]+(?=\\()/,\n          punctuation: /[(),]/\n        }\n      }],\n      // it's important that there is no boundary assertion after the hex digits\n      entity: /\\\\[\\da-f]{1,8}/i,\n      unit: unit,\n      number: number\n    });\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/css-extras.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/css.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/css.js ***!
  \********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = css;\ncss.displayName = 'css';\ncss.aliases = [];\nfunction css(Prism) {\n  ;\n  (function (Prism) {\n    var string = /(?:\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n])*')/;\n    Prism.languages.css = {\n      comment: /\\/\\*[\\s\\S]*?\\*\\//,\n      atrule: {\n        pattern: /@[\\w-](?:[^;{\\s]|\\s+(?![\\s{]))*(?:;|(?=\\s*\\{))/,\n        inside: {\n          rule: /^@[\\w-]+/,\n          'selector-function-argument': {\n            pattern: /(\\bselector\\s*\\(\\s*(?![\\s)]))(?:[^()\\s]|\\s+(?![\\s)])|\\((?:[^()]|\\([^()]*\\))*\\))+(?=\\s*\\))/,\n            lookbehind: true,\n            alias: 'selector'\n          },\n          keyword: {\n            pattern: /(^|[^\\w-])(?:and|not|only|or)(?![\\w-])/,\n            lookbehind: true\n          } // See rest below\n        }\n      },\n\n      url: {\n        // https://drafts.csswg.org/css-values-3/#urls\n        pattern: RegExp('\\\\burl\\\\((?:' + string.source + '|' + /(?:[^\\\\\\r\\n()\"']|\\\\[\\s\\S])*/.source + ')\\\\)', 'i'),\n        greedy: true,\n        inside: {\n          \"function\": /^url/i,\n          punctuation: /^\\(|\\)$/,\n          string: {\n            pattern: RegExp('^' + string.source + '$'),\n            alias: 'url'\n          }\n        }\n      },\n      selector: {\n        pattern: RegExp('(^|[{}\\\\s])[^{}\\\\s](?:[^{};\"\\'\\\\s]|\\\\s+(?![\\\\s{])|' + string.source + ')*(?=\\\\s*\\\\{)'),\n        lookbehind: true\n      },\n      string: {\n        pattern: string,\n        greedy: true\n      },\n      property: {\n        pattern: /(^|[^-\\w\\xA0-\\uFFFF])(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*(?=\\s*:)/i,\n        lookbehind: true\n      },\n      important: /!important\\b/i,\n      \"function\": {\n        pattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\\()/i,\n        lookbehind: true\n      },\n      punctuation: /[(){};:,]/\n    };\n    Prism.languages.css['atrule'].inside.rest = Prism.languages.css;\n    var markup = Prism.languages.markup;\n    if (markup) {\n      markup.tag.addInlined('style', 'css');\n      markup.tag.addAttribute('style', 'css');\n    }\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvY3NzLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsR0FBRztBQUNwQkEsR0FBRyxDQUFDQyxXQUFXLEdBQUcsS0FBSztBQUN2QkQsR0FBRyxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNoQixTQUFTRixHQUFHQSxDQUFDRyxLQUFLLEVBQUU7RUFDbEI7RUFBQyxDQUFDLFVBQVVBLEtBQUssRUFBRTtJQUNqQixJQUFJQyxNQUFNLEdBQ1IsNkVBQTZFO0lBQy9FRCxLQUFLLENBQUNFLFNBQVMsQ0FBQ0wsR0FBRyxHQUFHO01BQ3BCTSxPQUFPLEVBQUUsa0JBQWtCO01BQzNCQyxNQUFNLEVBQUU7UUFDTkMsT0FBTyxFQUFFLGdEQUFnRDtRQUN6REMsTUFBTSxFQUFFO1VBQ05DLElBQUksRUFBRSxVQUFVO1VBQ2hCLDRCQUE0QixFQUFFO1lBQzVCRixPQUFPLEVBQ0wsMkZBQTJGO1lBQzdGRyxVQUFVLEVBQUUsSUFBSTtZQUNoQkMsS0FBSyxFQUFFO1VBQ1QsQ0FBQztVQUNEQyxPQUFPLEVBQUU7WUFDUEwsT0FBTyxFQUFFLHdDQUF3QztZQUNqREcsVUFBVSxFQUFFO1VBQ2QsQ0FBQyxDQUFDO1FBQ0o7TUFDRixDQUFDOztNQUNERyxHQUFHLEVBQUU7UUFDSDtRQUNBTixPQUFPLEVBQUVPLE1BQU0sQ0FDYixjQUFjLEdBQ1pYLE1BQU0sQ0FBQ1ksTUFBTSxHQUNiLEdBQUcsR0FDSCw2QkFBNkIsQ0FBQ0EsTUFBTSxHQUNwQyxNQUFNLEVBQ1IsR0FDRixDQUFDO1FBQ0RDLE1BQU0sRUFBRSxJQUFJO1FBQ1pSLE1BQU0sRUFBRTtVQUNOLFlBQVUsT0FBTztVQUNqQlMsV0FBVyxFQUFFLFNBQVM7VUFDdEJkLE1BQU0sRUFBRTtZQUNOSSxPQUFPLEVBQUVPLE1BQU0sQ0FBQyxHQUFHLEdBQUdYLE1BQU0sQ0FBQ1ksTUFBTSxHQUFHLEdBQUcsQ0FBQztZQUMxQ0osS0FBSyxFQUFFO1VBQ1Q7UUFDRjtNQUNGLENBQUM7TUFDRE8sUUFBUSxFQUFFO1FBQ1JYLE9BQU8sRUFBRU8sTUFBTSxDQUNiLG9EQUFvRCxHQUNsRFgsTUFBTSxDQUFDWSxNQUFNLEdBQ2IsZUFDSixDQUFDO1FBQ0RMLFVBQVUsRUFBRTtNQUNkLENBQUM7TUFDRFAsTUFBTSxFQUFFO1FBQ05JLE9BQU8sRUFBRUosTUFBTTtRQUNmYSxNQUFNLEVBQUU7TUFDVixDQUFDO01BQ0RHLFFBQVEsRUFBRTtRQUNSWixPQUFPLEVBQ0wsbUZBQW1GO1FBQ3JGRyxVQUFVLEVBQUU7TUFDZCxDQUFDO01BQ0RVLFNBQVMsRUFBRSxlQUFlO01BQzFCLFlBQVU7UUFDUmIsT0FBTyxFQUFFLGlDQUFpQztRQUMxQ0csVUFBVSxFQUFFO01BQ2QsQ0FBQztNQUNETyxXQUFXLEVBQUU7SUFDZixDQUFDO0lBQ0RmLEtBQUssQ0FBQ0UsU0FBUyxDQUFDTCxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUNTLE1BQU0sQ0FBQ2EsSUFBSSxHQUFHbkIsS0FBSyxDQUFDRSxTQUFTLENBQUNMLEdBQUc7SUFDL0QsSUFBSXVCLE1BQU0sR0FBR3BCLEtBQUssQ0FBQ0UsU0FBUyxDQUFDa0IsTUFBTTtJQUNuQyxJQUFJQSxNQUFNLEVBQUU7TUFDVkEsTUFBTSxDQUFDQyxHQUFHLENBQUNDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDO01BQ3JDRixNQUFNLENBQUNDLEdBQUcsQ0FBQ0UsWUFBWSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUM7SUFDekM7RUFDRixDQUFDLEVBQUV2QixLQUFLLENBQUM7QUFDWCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXGNzcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBjc3NcbmNzcy5kaXNwbGF5TmFtZSA9ICdjc3MnXG5jc3MuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBjc3MoUHJpc20pIHtcbiAgOyhmdW5jdGlvbiAoUHJpc20pIHtcbiAgICB2YXIgc3RyaW5nID1cbiAgICAgIC8oPzpcIig/OlxcXFwoPzpcXHJcXG58W1xcc1xcU10pfFteXCJcXFxcXFxyXFxuXSkqXCJ8Jyg/OlxcXFwoPzpcXHJcXG58W1xcc1xcU10pfFteJ1xcXFxcXHJcXG5dKSonKS9cbiAgICBQcmlzbS5sYW5ndWFnZXMuY3NzID0ge1xuICAgICAgY29tbWVudDogL1xcL1xcKltcXHNcXFNdKj9cXCpcXC8vLFxuICAgICAgYXRydWxlOiB7XG4gICAgICAgIHBhdHRlcm46IC9AW1xcdy1dKD86W147e1xcc118XFxzKyg/IVtcXHN7XSkpKig/Ojt8KD89XFxzKlxceykpLyxcbiAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgcnVsZTogL15AW1xcdy1dKy8sXG4gICAgICAgICAgJ3NlbGVjdG9yLWZ1bmN0aW9uLWFyZ3VtZW50Jzoge1xuICAgICAgICAgICAgcGF0dGVybjpcbiAgICAgICAgICAgICAgLyhcXGJzZWxlY3RvclxccypcXChcXHMqKD8hW1xccyldKSkoPzpbXigpXFxzXXxcXHMrKD8hW1xccyldKXxcXCgoPzpbXigpXXxcXChbXigpXSpcXCkpKlxcKSkrKD89XFxzKlxcKSkvLFxuICAgICAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgICAgIGFsaWFzOiAnc2VsZWN0b3InXG4gICAgICAgICAgfSxcbiAgICAgICAgICBrZXl3b3JkOiB7XG4gICAgICAgICAgICBwYXR0ZXJuOiAvKF58W15cXHctXSkoPzphbmR8bm90fG9ubHl8b3IpKD8hW1xcdy1dKS8sXG4gICAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICAgICAgfSAvLyBTZWUgcmVzdCBiZWxvd1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdXJsOiB7XG4gICAgICAgIC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtdmFsdWVzLTMvI3VybHNcbiAgICAgICAgcGF0dGVybjogUmVnRXhwKFxuICAgICAgICAgICdcXFxcYnVybFxcXFwoKD86JyArXG4gICAgICAgICAgICBzdHJpbmcuc291cmNlICtcbiAgICAgICAgICAgICd8JyArXG4gICAgICAgICAgICAvKD86W15cXFxcXFxyXFxuKClcIiddfFxcXFxbXFxzXFxTXSkqLy5zb3VyY2UgK1xuICAgICAgICAgICAgJylcXFxcKScsXG4gICAgICAgICAgJ2knXG4gICAgICAgICksXG4gICAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgZnVuY3Rpb246IC9edXJsL2ksXG4gICAgICAgICAgcHVuY3R1YXRpb246IC9eXFwofFxcKSQvLFxuICAgICAgICAgIHN0cmluZzoge1xuICAgICAgICAgICAgcGF0dGVybjogUmVnRXhwKCdeJyArIHN0cmluZy5zb3VyY2UgKyAnJCcpLFxuICAgICAgICAgICAgYWxpYXM6ICd1cmwnXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgc2VsZWN0b3I6IHtcbiAgICAgICAgcGF0dGVybjogUmVnRXhwKFxuICAgICAgICAgICcoXnxbe31cXFxcc10pW157fVxcXFxzXSg/Oltee307XCJcXCdcXFxcc118XFxcXHMrKD8hW1xcXFxze10pfCcgK1xuICAgICAgICAgICAgc3RyaW5nLnNvdXJjZSArXG4gICAgICAgICAgICAnKSooPz1cXFxccypcXFxceyknXG4gICAgICAgICksXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH0sXG4gICAgICBzdHJpbmc6IHtcbiAgICAgICAgcGF0dGVybjogc3RyaW5nLFxuICAgICAgICBncmVlZHk6IHRydWVcbiAgICAgIH0sXG4gICAgICBwcm9wZXJ0eToge1xuICAgICAgICBwYXR0ZXJuOlxuICAgICAgICAgIC8oXnxbXi1cXHdcXHhBMC1cXHVGRkZGXSkoPyFcXHMpWy1fYS16XFx4QTAtXFx1RkZGRl0oPzooPyFcXHMpWy1cXHdcXHhBMC1cXHVGRkZGXSkqKD89XFxzKjopL2ksXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH0sXG4gICAgICBpbXBvcnRhbnQ6IC8haW1wb3J0YW50XFxiL2ksXG4gICAgICBmdW5jdGlvbjoge1xuICAgICAgICBwYXR0ZXJuOiAvKF58W14tYS16MC05XSlbLWEtejAtOV0rKD89XFwoKS9pLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICB9LFxuICAgICAgcHVuY3R1YXRpb246IC9bKCl7fTs6LF0vXG4gICAgfVxuICAgIFByaXNtLmxhbmd1YWdlcy5jc3NbJ2F0cnVsZSddLmluc2lkZS5yZXN0ID0gUHJpc20ubGFuZ3VhZ2VzLmNzc1xuICAgIHZhciBtYXJrdXAgPSBQcmlzbS5sYW5ndWFnZXMubWFya3VwXG4gICAgaWYgKG1hcmt1cCkge1xuICAgICAgbWFya3VwLnRhZy5hZGRJbmxpbmVkKCdzdHlsZScsICdjc3MnKVxuICAgICAgbWFya3VwLnRhZy5hZGRBdHRyaWJ1dGUoJ3N0eWxlJywgJ2NzcycpXG4gICAgfVxuICB9KShQcmlzbSlcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiY3NzIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJzdHJpbmciLCJsYW5ndWFnZXMiLCJjb21tZW50IiwiYXRydWxlIiwicGF0dGVybiIsImluc2lkZSIsInJ1bGUiLCJsb29rYmVoaW5kIiwiYWxpYXMiLCJrZXl3b3JkIiwidXJsIiwiUmVnRXhwIiwic291cmNlIiwiZ3JlZWR5IiwicHVuY3R1YXRpb24iLCJzZWxlY3RvciIsInByb3BlcnR5IiwiaW1wb3J0YW50IiwicmVzdCIsIm1hcmt1cCIsInRhZyIsImFkZElubGluZWQiLCJhZGRBdHRyaWJ1dGUiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/css.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/csv.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/csv.js ***!
  \********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = csv;\ncsv.displayName = 'csv';\ncsv.aliases = [];\nfunction csv(Prism) {\n  // https://tools.ietf.org/html/rfc4180\n  Prism.languages.csv = {\n    value: /[^\\r\\n,\"]+|\"(?:[^\"]|\"\")*\"(?!\")/,\n    punctuation: /,/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvY3N2LmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsR0FBRztBQUNwQkEsR0FBRyxDQUFDQyxXQUFXLEdBQUcsS0FBSztBQUN2QkQsR0FBRyxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNoQixTQUFTRixHQUFHQSxDQUFDRyxLQUFLLEVBQUU7RUFDbEI7RUFDQUEsS0FBSyxDQUFDQyxTQUFTLENBQUNKLEdBQUcsR0FBRztJQUNwQkssS0FBSyxFQUFFLGdDQUFnQztJQUN2Q0MsV0FBVyxFQUFFO0VBQ2YsQ0FBQztBQUNIIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcY3N2LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNzdlxuY3N2LmRpc3BsYXlOYW1lID0gJ2NzdidcbmNzdi5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIGNzdihQcmlzbSkge1xuICAvLyBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNDE4MFxuICBQcmlzbS5sYW5ndWFnZXMuY3N2ID0ge1xuICAgIHZhbHVlOiAvW15cXHJcXG4sXCJdK3xcIig/OlteXCJdfFwiXCIpKlwiKD8hXCIpLyxcbiAgICBwdW5jdHVhdGlvbjogLywvXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiY3N2IiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJ2YWx1ZSIsInB1bmN0dWF0aW9uIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/csv.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/cypher.js":
/*!***********************************************!*\
  !*** ./node_modules/refractor/lang/cypher.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = cypher;\ncypher.displayName = 'cypher';\ncypher.aliases = [];\nfunction cypher(Prism) {\n  Prism.languages.cypher = {\n    // https://neo4j.com/docs/cypher-manual/current/syntax/comments/\n    comment: /\\/\\/.*/,\n    string: {\n      pattern: /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?:[^'\\\\\\r\\n]|\\\\.)*'/,\n      greedy: true\n    },\n    'class-name': {\n      pattern: /(:\\s*)(?:\\w+|`(?:[^`\\\\\\r\\n])*`)(?=\\s*[{):])/,\n      lookbehind: true,\n      greedy: true\n    },\n    relationship: {\n      pattern: /(-\\[\\s*(?:\\w+\\s*|`(?:[^`\\\\\\r\\n])*`\\s*)?:\\s*|\\|\\s*:\\s*)(?:\\w+|`(?:[^`\\\\\\r\\n])*`)/,\n      lookbehind: true,\n      greedy: true,\n      alias: 'property'\n    },\n    identifier: {\n      pattern: /`(?:[^`\\\\\\r\\n])*`/,\n      greedy: true\n    },\n    variable: /\\$\\w+/,\n    // https://neo4j.com/docs/cypher-manual/current/syntax/reserved/\n    keyword: /\\b(?:ADD|ALL|AND|AS|ASC|ASCENDING|ASSERT|BY|CALL|CASE|COMMIT|CONSTRAINT|CONTAINS|CREATE|CSV|DELETE|DESC|DESCENDING|DETACH|DISTINCT|DO|DROP|ELSE|END|ENDS|EXISTS|FOR|FOREACH|IN|INDEX|IS|JOIN|KEY|LIMIT|LOAD|MANDATORY|MATCH|MERGE|NODE|NOT|OF|ON|OPTIONAL|OR|ORDER(?=\\s+BY)|PERIODIC|REMOVE|REQUIRE|RETURN|SCALAR|SCAN|SET|SKIP|START|STARTS|THEN|UNION|UNIQUE|UNWIND|USING|WHEN|WHERE|WITH|XOR|YIELD)\\b/i,\n    \"function\": /\\b\\w+\\b(?=\\s*\\()/,\n    \"boolean\": /\\b(?:false|null|true)\\b/i,\n    number: /\\b(?:0x[\\da-fA-F]+|\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)\\b/,\n    // https://neo4j.com/docs/cypher-manual/current/syntax/operators/\n    operator: /:|<--?|--?>?|<>|=~?|[<>]=?|[+*/%^|]|\\.\\.\\.?/,\n    punctuation: /[()[\\]{},;.]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvY3lwaGVyLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsTUFBTTtBQUN2QkEsTUFBTSxDQUFDQyxXQUFXLEdBQUcsUUFBUTtBQUM3QkQsTUFBTSxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNuQixTQUFTRixNQUFNQSxDQUFDRyxLQUFLLEVBQUU7RUFDckJBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixNQUFNLEdBQUc7SUFDdkI7SUFDQUssT0FBTyxFQUFFLFFBQVE7SUFDakJDLE1BQU0sRUFBRTtNQUNOQyxPQUFPLEVBQUUsNkNBQTZDO01BQ3REQyxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0QsWUFBWSxFQUFFO01BQ1pELE9BQU8sRUFBRSw2Q0FBNkM7TUFDdERFLFVBQVUsRUFBRSxJQUFJO01BQ2hCRCxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0RFLFlBQVksRUFBRTtNQUNaSCxPQUFPLEVBQ0wsaUZBQWlGO01BQ25GRSxVQUFVLEVBQUUsSUFBSTtNQUNoQkQsTUFBTSxFQUFFLElBQUk7TUFDWkcsS0FBSyxFQUFFO0lBQ1QsQ0FBQztJQUNEQyxVQUFVLEVBQUU7TUFDVkwsT0FBTyxFQUFFLG1CQUFtQjtNQUM1QkMsTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUNESyxRQUFRLEVBQUUsT0FBTztJQUNqQjtJQUNBQyxPQUFPLEVBQ0wsMllBQTJZO0lBQzdZLFlBQVUsa0JBQWtCO0lBQzVCLFdBQVMsMEJBQTBCO0lBQ25DQyxNQUFNLEVBQUUsc0RBQXNEO0lBQzlEO0lBQ0FDLFFBQVEsRUFBRSw2Q0FBNkM7SUFDdkRDLFdBQVcsRUFBRTtFQUNmLENBQUM7QUFDSCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXGN5cGhlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBjeXBoZXJcbmN5cGhlci5kaXNwbGF5TmFtZSA9ICdjeXBoZXInXG5jeXBoZXIuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBjeXBoZXIoUHJpc20pIHtcbiAgUHJpc20ubGFuZ3VhZ2VzLmN5cGhlciA9IHtcbiAgICAvLyBodHRwczovL25lbzRqLmNvbS9kb2NzL2N5cGhlci1tYW51YWwvY3VycmVudC9zeW50YXgvY29tbWVudHMvXG4gICAgY29tbWVudDogL1xcL1xcLy4qLyxcbiAgICBzdHJpbmc6IHtcbiAgICAgIHBhdHRlcm46IC9cIig/OlteXCJcXFxcXFxyXFxuXXxcXFxcLikqXCJ8Jyg/OlteJ1xcXFxcXHJcXG5dfFxcXFwuKSonLyxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgJ2NsYXNzLW5hbWUnOiB7XG4gICAgICBwYXR0ZXJuOiAvKDpcXHMqKSg/Olxcdyt8YCg/OlteYFxcXFxcXHJcXG5dKSpgKSg/PVxccypbeyk6XSkvLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgcmVsYXRpb25zaGlwOiB7XG4gICAgICBwYXR0ZXJuOlxuICAgICAgICAvKC1cXFtcXHMqKD86XFx3K1xccyp8YCg/OlteYFxcXFxcXHJcXG5dKSpgXFxzKik/Olxccyp8XFx8XFxzKjpcXHMqKSg/Olxcdyt8YCg/OlteYFxcXFxcXHJcXG5dKSpgKS8sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgYWxpYXM6ICdwcm9wZXJ0eSdcbiAgICB9LFxuICAgIGlkZW50aWZpZXI6IHtcbiAgICAgIHBhdHRlcm46IC9gKD86W15gXFxcXFxcclxcbl0pKmAvLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICB2YXJpYWJsZTogL1xcJFxcdysvLFxuICAgIC8vIGh0dHBzOi8vbmVvNGouY29tL2RvY3MvY3lwaGVyLW1hbnVhbC9jdXJyZW50L3N5bnRheC9yZXNlcnZlZC9cbiAgICBrZXl3b3JkOlxuICAgICAgL1xcYig/OkFERHxBTEx8QU5EfEFTfEFTQ3xBU0NFTkRJTkd8QVNTRVJUfEJZfENBTEx8Q0FTRXxDT01NSVR8Q09OU1RSQUlOVHxDT05UQUlOU3xDUkVBVEV8Q1NWfERFTEVURXxERVNDfERFU0NFTkRJTkd8REVUQUNIfERJU1RJTkNUfERPfERST1B8RUxTRXxFTkR8RU5EU3xFWElTVFN8Rk9SfEZPUkVBQ0h8SU58SU5ERVh8SVN8Sk9JTnxLRVl8TElNSVR8TE9BRHxNQU5EQVRPUll8TUFUQ0h8TUVSR0V8Tk9ERXxOT1R8T0Z8T058T1BUSU9OQUx8T1J8T1JERVIoPz1cXHMrQlkpfFBFUklPRElDfFJFTU9WRXxSRVFVSVJFfFJFVFVSTnxTQ0FMQVJ8U0NBTnxTRVR8U0tJUHxTVEFSVHxTVEFSVFN8VEhFTnxVTklPTnxVTklRVUV8VU5XSU5EfFVTSU5HfFdIRU58V0hFUkV8V0lUSHxYT1J8WUlFTEQpXFxiL2ksXG4gICAgZnVuY3Rpb246IC9cXGJcXHcrXFxiKD89XFxzKlxcKCkvLFxuICAgIGJvb2xlYW46IC9cXGIoPzpmYWxzZXxudWxsfHRydWUpXFxiL2ksXG4gICAgbnVtYmVyOiAvXFxiKD86MHhbXFxkYS1mQS1GXSt8XFxkKyg/OlxcLlxcZCspPyg/OltlRV1bKy1dP1xcZCspPylcXGIvLFxuICAgIC8vIGh0dHBzOi8vbmVvNGouY29tL2RvY3MvY3lwaGVyLW1hbnVhbC9jdXJyZW50L3N5bnRheC9vcGVyYXRvcnMvXG4gICAgb3BlcmF0b3I6IC86fDwtLT98LS0/Pj98PD58PX4/fFs8Pl09P3xbKyovJV58XXxcXC5cXC5cXC4/LyxcbiAgICBwdW5jdHVhdGlvbjogL1soKVtcXF17fSw7Ll0vXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiY3lwaGVyIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJjb21tZW50Iiwic3RyaW5nIiwicGF0dGVybiIsImdyZWVkeSIsImxvb2tiZWhpbmQiLCJyZWxhdGlvbnNoaXAiLCJhbGlhcyIsImlkZW50aWZpZXIiLCJ2YXJpYWJsZSIsImtleXdvcmQiLCJudW1iZXIiLCJvcGVyYXRvciIsInB1bmN0dWF0aW9uIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/cypher.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/d.js":
/*!******************************************!*\
  !*** ./node_modules/refractor/lang/d.js ***!
  \******************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = d;\nd.displayName = 'd';\nd.aliases = [];\nfunction d(Prism) {\n  Prism.languages.d = Prism.languages.extend('clike', {\n    comment: [{\n      // Shebang\n      pattern: /^\\s*#!.+/,\n      greedy: true\n    }, {\n      pattern: RegExp(/(^|[^\\\\])/.source + '(?:' + [\n      // /+ comment +/\n      // Allow one level of nesting\n      /\\/\\+(?:\\/\\+(?:[^+]|\\+(?!\\/))*\\+\\/|(?!\\/\\+)[\\s\\S])*?\\+\\//.source,\n      // // comment\n      /\\/\\/.*/.source,\n      // /* comment */\n      /\\/\\*[\\s\\S]*?\\*\\//.source].join('|') + ')'),\n      lookbehind: true,\n      greedy: true\n    }],\n    string: [{\n      pattern: RegExp([\n      // r\"\", x\"\"\n      /\\b[rx]\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"[cwd]?/.source,\n      // q\"[]\", q\"()\", q\"<>\", q\"{}\"\n      /\\bq\"(?:\\[[\\s\\S]*?\\]|\\([\\s\\S]*?\\)|<[\\s\\S]*?>|\\{[\\s\\S]*?\\})\"/.source,\n      // q\"IDENT\n      // ...\n      // IDENT\"\n      /\\bq\"((?!\\d)\\w+)$[\\s\\S]*?^\\1\"/.source,\n      // q\"//\", q\"||\", etc.\n      // eslint-disable-next-line regexp/strict\n      /\\bq\"(.)[\\s\\S]*?\\2\"/.source,\n      // eslint-disable-next-line regexp/strict\n      /([\"`])(?:\\\\[\\s\\S]|(?!\\3)[^\\\\])*\\3[cwd]?/.source].join('|'), 'm'),\n      greedy: true\n    }, {\n      pattern: /\\bq\\{(?:\\{[^{}]*\\}|[^{}])*\\}/,\n      greedy: true,\n      alias: 'token-string'\n    }],\n    // In order: $, keywords and special tokens, globally defined symbols\n    keyword: /\\$|\\b(?:__(?:(?:DATE|EOF|FILE|FUNCTION|LINE|MODULE|PRETTY_FUNCTION|TIMESTAMP|TIME|VENDOR|VERSION)__|gshared|parameters|traits|vector)|abstract|alias|align|asm|assert|auto|body|bool|break|byte|case|cast|catch|cdouble|cent|cfloat|char|class|const|continue|creal|dchar|debug|default|delegate|delete|deprecated|do|double|dstring|else|enum|export|extern|false|final|finally|float|for|foreach|foreach_reverse|function|goto|idouble|if|ifloat|immutable|import|inout|int|interface|invariant|ireal|lazy|long|macro|mixin|module|new|nothrow|null|out|override|package|pragma|private|protected|ptrdiff_t|public|pure|real|ref|return|scope|shared|short|size_t|static|string|struct|super|switch|synchronized|template|this|throw|true|try|typedef|typeid|typeof|ubyte|ucent|uint|ulong|union|unittest|ushort|version|void|volatile|wchar|while|with|wstring)\\b/,\n    number: [\n    // The lookbehind and the negative look-ahead try to prevent bad highlighting of the .. operator\n    // Hexadecimal numbers must be handled separately to avoid problems with exponent \"e\"\n    /\\b0x\\.?[a-f\\d_]+(?:(?!\\.\\.)\\.[a-f\\d_]*)?(?:p[+-]?[a-f\\d_]+)?[ulfi]{0,4}/i, {\n      pattern: /((?:\\.\\.)?)(?:\\b0b\\.?|\\b|\\.)\\d[\\d_]*(?:(?!\\.\\.)\\.[\\d_]*)?(?:e[+-]?\\d[\\d_]*)?[ulfi]{0,4}/i,\n      lookbehind: true\n    }],\n    operator: /\\|[|=]?|&[&=]?|\\+[+=]?|-[-=]?|\\.?\\.\\.|=[>=]?|!(?:i[ns]\\b|<>?=?|>=?|=)?|\\bi[ns]\\b|(?:<[<>]?|>>?>?|\\^\\^|[*\\/%^~])=?/\n  });\n  Prism.languages.insertBefore('d', 'string', {\n    // Characters\n    // 'a', '\\\\', '\\n', '\\xFF', '\\377', '\\uFFFF', '\\U0010FFFF', '\\quot'\n    \"char\": /'(?:\\\\(?:\\W|\\w+)|[^\\\\])'/\n  });\n  Prism.languages.insertBefore('d', 'keyword', {\n    property: /\\B@\\w*/\n  });\n  Prism.languages.insertBefore('d', 'function', {\n    register: {\n      // Iasm registers\n      pattern: /\\b(?:[ABCD][LHX]|E?(?:BP|DI|SI|SP)|[BS]PL|[ECSDGF]S|CR[0234]|[DS]IL|DR[012367]|E[ABCD]X|X?MM[0-7]|R(?:1[0-5]|[89])[BWD]?|R[ABCD]X|R[BS]P|R[DS]I|TR[3-7]|XMM(?:1[0-5]|[89])|YMM(?:1[0-5]|\\d))\\b|\\bST(?:\\([0-7]\\)|\\b)/,\n      alias: 'variable'\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvZC5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLENBQUM7QUFDbEJBLENBQUMsQ0FBQ0MsV0FBVyxHQUFHLEdBQUc7QUFDbkJELENBQUMsQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDZCxTQUFTRixDQUFDQSxDQUFDRyxLQUFLLEVBQUU7RUFDaEJBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixDQUFDLEdBQUdHLEtBQUssQ0FBQ0MsU0FBUyxDQUFDQyxNQUFNLENBQUMsT0FBTyxFQUFFO0lBQ2xEQyxPQUFPLEVBQUUsQ0FDUDtNQUNFO01BQ0FDLE9BQU8sRUFBRSxVQUFVO01BQ25CQyxNQUFNLEVBQUU7SUFDVixDQUFDLEVBQ0Q7TUFDRUQsT0FBTyxFQUFFRSxNQUFNLENBQ2IsV0FBVyxDQUFDQyxNQUFNLEdBQ2hCLEtBQUssR0FDTDtNQUNFO01BQ0E7TUFDQSx5REFBeUQsQ0FBQ0EsTUFBTTtNQUFFO01BQ2xFLFFBQVEsQ0FBQ0EsTUFBTTtNQUFFO01BQ2pCLGtCQUFrQixDQUFDQSxNQUFNLENBQzFCLENBQUNDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FDWCxHQUNKLENBQUM7TUFDREMsVUFBVSxFQUFFLElBQUk7TUFDaEJKLE1BQU0sRUFBRTtJQUNWLENBQUMsQ0FDRjtJQUNESyxNQUFNLEVBQUUsQ0FDTjtNQUNFTixPQUFPLEVBQUVFLE1BQU0sQ0FDYjtNQUNFO01BQ0Esb0NBQW9DLENBQUNDLE1BQU07TUFBRTtNQUM3Qyw0REFBNEQsQ0FBQ0EsTUFBTTtNQUFFO01BQ3JFO01BQ0E7TUFDQSw4QkFBOEIsQ0FBQ0EsTUFBTTtNQUFFO01BQ3ZDO01BQ0Esb0JBQW9CLENBQUNBLE1BQU07TUFBRTtNQUM3Qix5Q0FBeUMsQ0FBQ0EsTUFBTSxDQUNqRCxDQUFDQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQ1gsR0FDRixDQUFDO01BQ0RILE1BQU0sRUFBRTtJQUNWLENBQUMsRUFDRDtNQUNFRCxPQUFPLEVBQUUsOEJBQThCO01BQ3ZDQyxNQUFNLEVBQUUsSUFBSTtNQUNaTSxLQUFLLEVBQUU7SUFDVCxDQUFDLENBQ0Y7SUFDRDtJQUNBQyxPQUFPLEVBQ0wsczBCQUFzMEI7SUFDeDBCQyxNQUFNLEVBQUU7SUFDTjtJQUNBO0lBQ0EsMEVBQTBFLEVBQzFFO01BQ0VULE9BQU8sRUFDTCwwRkFBMEY7TUFDNUZLLFVBQVUsRUFBRTtJQUNkLENBQUMsQ0FDRjtJQUNESyxRQUFRLEVBQ047RUFDSixDQUFDLENBQUM7RUFDRmQsS0FBSyxDQUFDQyxTQUFTLENBQUNjLFlBQVksQ0FBQyxHQUFHLEVBQUUsUUFBUSxFQUFFO0lBQzFDO0lBQ0E7SUFDQSxRQUFNO0VBQ1IsQ0FBQyxDQUFDO0VBQ0ZmLEtBQUssQ0FBQ0MsU0FBUyxDQUFDYyxZQUFZLENBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRTtJQUMzQ0MsUUFBUSxFQUFFO0VBQ1osQ0FBQyxDQUFDO0VBQ0ZoQixLQUFLLENBQUNDLFNBQVMsQ0FBQ2MsWUFBWSxDQUFDLEdBQUcsRUFBRSxVQUFVLEVBQUU7SUFDNUNFLFFBQVEsRUFBRTtNQUNSO01BQ0FiLE9BQU8sRUFDTCxxTkFBcU47TUFDdk5PLEtBQUssRUFBRTtJQUNUO0VBQ0YsQ0FBQyxDQUFDO0FBQ0oiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRcbmQuZGlzcGxheU5hbWUgPSAnZCdcbmQuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBkKFByaXNtKSB7XG4gIFByaXNtLmxhbmd1YWdlcy5kID0gUHJpc20ubGFuZ3VhZ2VzLmV4dGVuZCgnY2xpa2UnLCB7XG4gICAgY29tbWVudDogW1xuICAgICAge1xuICAgICAgICAvLyBTaGViYW5nXG4gICAgICAgIHBhdHRlcm46IC9eXFxzKiMhLisvLFxuICAgICAgICBncmVlZHk6IHRydWVcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHBhdHRlcm46IFJlZ0V4cChcbiAgICAgICAgICAvKF58W15cXFxcXSkvLnNvdXJjZSArXG4gICAgICAgICAgICAnKD86JyArXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgIC8vIC8rIGNvbW1lbnQgKy9cbiAgICAgICAgICAgICAgLy8gQWxsb3cgb25lIGxldmVsIG9mIG5lc3RpbmdcbiAgICAgICAgICAgICAgL1xcL1xcKyg/OlxcL1xcKyg/OlteK118XFwrKD8hXFwvKSkqXFwrXFwvfCg/IVxcL1xcKylbXFxzXFxTXSkqP1xcK1xcLy8uc291cmNlLCAvLyAvLyBjb21tZW50XG4gICAgICAgICAgICAgIC9cXC9cXC8uKi8uc291cmNlLCAvLyAvKiBjb21tZW50ICovXG4gICAgICAgICAgICAgIC9cXC9cXCpbXFxzXFxTXSo/XFwqXFwvLy5zb3VyY2VcbiAgICAgICAgICAgIF0uam9pbignfCcpICtcbiAgICAgICAgICAgICcpJ1xuICAgICAgICApLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICBncmVlZHk6IHRydWVcbiAgICAgIH1cbiAgICBdLFxuICAgIHN0cmluZzogW1xuICAgICAge1xuICAgICAgICBwYXR0ZXJuOiBSZWdFeHAoXG4gICAgICAgICAgW1xuICAgICAgICAgICAgLy8gclwiXCIsIHhcIlwiXG4gICAgICAgICAgICAvXFxiW3J4XVwiKD86XFxcXFtcXHNcXFNdfFteXFxcXFwiXSkqXCJbY3dkXT8vLnNvdXJjZSwgLy8gcVwiW11cIiwgcVwiKClcIiwgcVwiPD5cIiwgcVwie31cIlxuICAgICAgICAgICAgL1xcYnFcIig/OlxcW1tcXHNcXFNdKj9cXF18XFwoW1xcc1xcU10qP1xcKXw8W1xcc1xcU10qPz58XFx7W1xcc1xcU10qP1xcfSlcIi8uc291cmNlLCAvLyBxXCJJREVOVFxuICAgICAgICAgICAgLy8gLi4uXG4gICAgICAgICAgICAvLyBJREVOVFwiXG4gICAgICAgICAgICAvXFxicVwiKCg/IVxcZClcXHcrKSRbXFxzXFxTXSo/XlxcMVwiLy5zb3VyY2UsIC8vIHFcIi8vXCIsIHFcInx8XCIsIGV0Yy5cbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWdleHAvc3RyaWN0XG4gICAgICAgICAgICAvXFxicVwiKC4pW1xcc1xcU10qP1xcMlwiLy5zb3VyY2UsIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWdleHAvc3RyaWN0XG4gICAgICAgICAgICAvKFtcImBdKSg/OlxcXFxbXFxzXFxTXXwoPyFcXDMpW15cXFxcXSkqXFwzW2N3ZF0/Ly5zb3VyY2VcbiAgICAgICAgICBdLmpvaW4oJ3wnKSxcbiAgICAgICAgICAnbSdcbiAgICAgICAgKSxcbiAgICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBwYXR0ZXJuOiAvXFxicVxceyg/Olxce1tee31dKlxcfXxbXnt9XSkqXFx9LyxcbiAgICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgICBhbGlhczogJ3Rva2VuLXN0cmluZydcbiAgICAgIH1cbiAgICBdLFxuICAgIC8vIEluIG9yZGVyOiAkLCBrZXl3b3JkcyBhbmQgc3BlY2lhbCB0b2tlbnMsIGdsb2JhbGx5IGRlZmluZWQgc3ltYm9sc1xuICAgIGtleXdvcmQ6XG4gICAgICAvXFwkfFxcYig/Ol9fKD86KD86REFURXxFT0Z8RklMRXxGVU5DVElPTnxMSU5FfE1PRFVMRXxQUkVUVFlfRlVOQ1RJT058VElNRVNUQU1QfFRJTUV8VkVORE9SfFZFUlNJT04pX198Z3NoYXJlZHxwYXJhbWV0ZXJzfHRyYWl0c3x2ZWN0b3IpfGFic3RyYWN0fGFsaWFzfGFsaWdufGFzbXxhc3NlcnR8YXV0b3xib2R5fGJvb2x8YnJlYWt8Ynl0ZXxjYXNlfGNhc3R8Y2F0Y2h8Y2RvdWJsZXxjZW50fGNmbG9hdHxjaGFyfGNsYXNzfGNvbnN0fGNvbnRpbnVlfGNyZWFsfGRjaGFyfGRlYnVnfGRlZmF1bHR8ZGVsZWdhdGV8ZGVsZXRlfGRlcHJlY2F0ZWR8ZG98ZG91YmxlfGRzdHJpbmd8ZWxzZXxlbnVtfGV4cG9ydHxleHRlcm58ZmFsc2V8ZmluYWx8ZmluYWxseXxmbG9hdHxmb3J8Zm9yZWFjaHxmb3JlYWNoX3JldmVyc2V8ZnVuY3Rpb258Z290b3xpZG91YmxlfGlmfGlmbG9hdHxpbW11dGFibGV8aW1wb3J0fGlub3V0fGludHxpbnRlcmZhY2V8aW52YXJpYW50fGlyZWFsfGxhenl8bG9uZ3xtYWNyb3xtaXhpbnxtb2R1bGV8bmV3fG5vdGhyb3d8bnVsbHxvdXR8b3ZlcnJpZGV8cGFja2FnZXxwcmFnbWF8cHJpdmF0ZXxwcm90ZWN0ZWR8cHRyZGlmZl90fHB1YmxpY3xwdXJlfHJlYWx8cmVmfHJldHVybnxzY29wZXxzaGFyZWR8c2hvcnR8c2l6ZV90fHN0YXRpY3xzdHJpbmd8c3RydWN0fHN1cGVyfHN3aXRjaHxzeW5jaHJvbml6ZWR8dGVtcGxhdGV8dGhpc3x0aHJvd3x0cnVlfHRyeXx0eXBlZGVmfHR5cGVpZHx0eXBlb2Z8dWJ5dGV8dWNlbnR8dWludHx1bG9uZ3x1bmlvbnx1bml0dGVzdHx1c2hvcnR8dmVyc2lvbnx2b2lkfHZvbGF0aWxlfHdjaGFyfHdoaWxlfHdpdGh8d3N0cmluZylcXGIvLFxuICAgIG51bWJlcjogW1xuICAgICAgLy8gVGhlIGxvb2tiZWhpbmQgYW5kIHRoZSBuZWdhdGl2ZSBsb29rLWFoZWFkIHRyeSB0byBwcmV2ZW50IGJhZCBoaWdobGlnaHRpbmcgb2YgdGhlIC4uIG9wZXJhdG9yXG4gICAgICAvLyBIZXhhZGVjaW1hbCBudW1iZXJzIG11c3QgYmUgaGFuZGxlZCBzZXBhcmF0ZWx5IHRvIGF2b2lkIHByb2JsZW1zIHdpdGggZXhwb25lbnQgXCJlXCJcbiAgICAgIC9cXGIweFxcLj9bYS1mXFxkX10rKD86KD8hXFwuXFwuKVxcLlthLWZcXGRfXSopPyg/OnBbKy1dP1thLWZcXGRfXSspP1t1bGZpXXswLDR9L2ksXG4gICAgICB7XG4gICAgICAgIHBhdHRlcm46XG4gICAgICAgICAgLygoPzpcXC5cXC4pPykoPzpcXGIwYlxcLj98XFxifFxcLilcXGRbXFxkX10qKD86KD8hXFwuXFwuKVxcLltcXGRfXSopPyg/OmVbKy1dP1xcZFtcXGRfXSopP1t1bGZpXXswLDR9L2ksXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH1cbiAgICBdLFxuICAgIG9wZXJhdG9yOlxuICAgICAgL1xcfFt8PV0/fCZbJj1dP3xcXCtbKz1dP3wtWy09XT98XFwuP1xcLlxcLnw9Wz49XT98ISg/OmlbbnNdXFxifDw+Pz0/fD49P3w9KT98XFxiaVtuc11cXGJ8KD86PFs8Pl0/fD4+Pz4/fFxcXlxcXnxbKlxcLyVefl0pPT8vXG4gIH0pXG4gIFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ2QnLCAnc3RyaW5nJywge1xuICAgIC8vIENoYXJhY3RlcnNcbiAgICAvLyAnYScsICdcXFxcJywgJ1xcbicsICdcXHhGRicsICdcXDM3NycsICdcXHVGRkZGJywgJ1xcVTAwMTBGRkZGJywgJ1xccXVvdCdcbiAgICBjaGFyOiAvJyg/OlxcXFwoPzpcXFd8XFx3Kyl8W15cXFxcXSknL1xuICB9KVxuICBQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdkJywgJ2tleXdvcmQnLCB7XG4gICAgcHJvcGVydHk6IC9cXEJAXFx3Ki9cbiAgfSlcbiAgUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgnZCcsICdmdW5jdGlvbicsIHtcbiAgICByZWdpc3Rlcjoge1xuICAgICAgLy8gSWFzbSByZWdpc3RlcnNcbiAgICAgIHBhdHRlcm46XG4gICAgICAgIC9cXGIoPzpbQUJDRF1bTEhYXXxFPyg/OkJQfERJfFNJfFNQKXxbQlNdUEx8W0VDU0RHRl1TfENSWzAyMzRdfFtEU11JTHxEUlswMTIzNjddfEVbQUJDRF1YfFg/TU1bMC03XXxSKD86MVswLTVdfFs4OV0pW0JXRF0/fFJbQUJDRF1YfFJbQlNdUHxSW0RTXUl8VFJbMy03XXxYTU0oPzoxWzAtNV18Wzg5XSl8WU1NKD86MVswLTVdfFxcZCkpXFxifFxcYlNUKD86XFwoWzAtN11cXCl8XFxiKS8sXG4gICAgICBhbGlhczogJ3ZhcmlhYmxlJ1xuICAgIH1cbiAgfSlcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiZCIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwiZXh0ZW5kIiwiY29tbWVudCIsInBhdHRlcm4iLCJncmVlZHkiLCJSZWdFeHAiLCJzb3VyY2UiLCJqb2luIiwibG9va2JlaGluZCIsInN0cmluZyIsImFsaWFzIiwia2V5d29yZCIsIm51bWJlciIsIm9wZXJhdG9yIiwiaW5zZXJ0QmVmb3JlIiwicHJvcGVydHkiLCJyZWdpc3RlciJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/d.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/dart.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/dart.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = dart;\ndart.displayName = 'dart';\ndart.aliases = [];\nfunction dart(Prism) {\n  ;\n  (function (Prism) {\n    var keywords = [/\\b(?:async|sync|yield)\\*/, /\\b(?:abstract|assert|async|await|break|case|catch|class|const|continue|covariant|default|deferred|do|dynamic|else|enum|export|extends|extension|external|factory|final|finally|for|get|hide|if|implements|import|in|interface|library|mixin|new|null|on|operator|part|rethrow|return|set|show|static|super|switch|sync|this|throw|try|typedef|var|void|while|with|yield)\\b/]; // Handles named imports, such as http.Client\n    var packagePrefix = /(^|[^\\w.])(?:[a-z]\\w*\\s*\\.\\s*)*(?:[A-Z]\\w*\\s*\\.\\s*)*/.source; // based on the dart naming conventions\n    var className = {\n      pattern: RegExp(packagePrefix + /[A-Z](?:[\\d_A-Z]*[a-z]\\w*)?\\b/.source),\n      lookbehind: true,\n      inside: {\n        namespace: {\n          pattern: /^[a-z]\\w*(?:\\s*\\.\\s*[a-z]\\w*)*(?:\\s*\\.)?/,\n          inside: {\n            punctuation: /\\./\n          }\n        }\n      }\n    };\n    Prism.languages.dart = Prism.languages.extend('clike', {\n      'class-name': [className, {\n        // variables and parameters\n        // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n        pattern: RegExp(packagePrefix + /[A-Z]\\w*(?=\\s+\\w+\\s*[;,=()])/.source),\n        lookbehind: true,\n        inside: className.inside\n      }],\n      keyword: keywords,\n      operator: /\\bis!|\\b(?:as|is)\\b|\\+\\+|--|&&|\\|\\||<<=?|>>=?|~(?:\\/=?)?|[+\\-*\\/%&^|=!<>]=?|\\?/\n    });\n    Prism.languages.insertBefore('dart', 'string', {\n      'string-literal': {\n        pattern: /r?(?:(\"\"\"|''')[\\s\\S]*?\\1|([\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2(?!\\2))/,\n        greedy: true,\n        inside: {\n          interpolation: {\n            pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$(?:\\w+|\\{(?:[^{}]|\\{[^{}]*\\})*\\})/,\n            lookbehind: true,\n            inside: {\n              punctuation: /^\\$\\{?|\\}$/,\n              expression: {\n                pattern: /[\\s\\S]+/,\n                inside: Prism.languages.dart\n              }\n            }\n          },\n          string: /[\\s\\S]+/\n        }\n      },\n      string: undefined\n    });\n    Prism.languages.insertBefore('dart', 'class-name', {\n      metadata: {\n        pattern: /@\\w+/,\n        alias: 'function'\n      }\n    });\n    Prism.languages.insertBefore('dart', 'class-name', {\n      generics: {\n        pattern: /<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<[\\w\\s,.&?]*>)*>)*>)*>/,\n        inside: {\n          'class-name': className,\n          keyword: keywords,\n          punctuation: /[<>(),.:]/,\n          operator: /[?&|]/\n        }\n      }\n    });\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvZGFydC5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLElBQUk7QUFDckJBLElBQUksQ0FBQ0MsV0FBVyxHQUFHLE1BQU07QUFDekJELElBQUksQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDakIsU0FBU0YsSUFBSUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ25CO0VBQUMsQ0FBQyxVQUFVQSxLQUFLLEVBQUU7SUFDakIsSUFBSUMsUUFBUSxHQUFHLENBQ2IsMEJBQTBCLEVBQzFCLDRXQUE0VyxDQUM3VyxFQUFDO0lBQ0YsSUFBSUMsYUFBYSxHQUFHLHNEQUFzRCxDQUN2RUMsTUFBTSxFQUFDO0lBQ1YsSUFBSUMsU0FBUyxHQUFHO01BQ2RDLE9BQU8sRUFBRUMsTUFBTSxDQUFDSixhQUFhLEdBQUcsK0JBQStCLENBQUNDLE1BQU0sQ0FBQztNQUN2RUksVUFBVSxFQUFFLElBQUk7TUFDaEJDLE1BQU0sRUFBRTtRQUNOQyxTQUFTLEVBQUU7VUFDVEosT0FBTyxFQUFFLDBDQUEwQztVQUNuREcsTUFBTSxFQUFFO1lBQ05FLFdBQVcsRUFBRTtVQUNmO1FBQ0Y7TUFDRjtJQUNGLENBQUM7SUFDRFYsS0FBSyxDQUFDVyxTQUFTLENBQUNkLElBQUksR0FBR0csS0FBSyxDQUFDVyxTQUFTLENBQUNDLE1BQU0sQ0FBQyxPQUFPLEVBQUU7TUFDckQsWUFBWSxFQUFFLENBQ1pSLFNBQVMsRUFDVDtRQUNFO1FBQ0E7UUFDQUMsT0FBTyxFQUFFQyxNQUFNLENBQ2JKLGFBQWEsR0FBRyw4QkFBOEIsQ0FBQ0MsTUFDakQsQ0FBQztRQUNESSxVQUFVLEVBQUUsSUFBSTtRQUNoQkMsTUFBTSxFQUFFSixTQUFTLENBQUNJO01BQ3BCLENBQUMsQ0FDRjtNQUNESyxPQUFPLEVBQUVaLFFBQVE7TUFDakJhLFFBQVEsRUFDTjtJQUNKLENBQUMsQ0FBQztJQUNGZCxLQUFLLENBQUNXLFNBQVMsQ0FBQ0ksWUFBWSxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUU7TUFDN0MsZ0JBQWdCLEVBQUU7UUFDaEJWLE9BQU8sRUFDTCxrRUFBa0U7UUFDcEVXLE1BQU0sRUFBRSxJQUFJO1FBQ1pSLE1BQU0sRUFBRTtVQUNOUyxhQUFhLEVBQUU7WUFDYlosT0FBTyxFQUNMLDREQUE0RDtZQUM5REUsVUFBVSxFQUFFLElBQUk7WUFDaEJDLE1BQU0sRUFBRTtjQUNORSxXQUFXLEVBQUUsWUFBWTtjQUN6QlEsVUFBVSxFQUFFO2dCQUNWYixPQUFPLEVBQUUsU0FBUztnQkFDbEJHLE1BQU0sRUFBRVIsS0FBSyxDQUFDVyxTQUFTLENBQUNkO2NBQzFCO1lBQ0Y7VUFDRixDQUFDO1VBQ0RzQixNQUFNLEVBQUU7UUFDVjtNQUNGLENBQUM7TUFDREEsTUFBTSxFQUFFQztJQUNWLENBQUMsQ0FBQztJQUNGcEIsS0FBSyxDQUFDVyxTQUFTLENBQUNJLFlBQVksQ0FBQyxNQUFNLEVBQUUsWUFBWSxFQUFFO01BQ2pETSxRQUFRLEVBQUU7UUFDUmhCLE9BQU8sRUFBRSxNQUFNO1FBQ2ZpQixLQUFLLEVBQUU7TUFDVDtJQUNGLENBQUMsQ0FBQztJQUNGdEIsS0FBSyxDQUFDVyxTQUFTLENBQUNJLFlBQVksQ0FBQyxNQUFNLEVBQUUsWUFBWSxFQUFFO01BQ2pEUSxRQUFRLEVBQUU7UUFDUmxCLE9BQU8sRUFDTCxxRUFBcUU7UUFDdkVHLE1BQU0sRUFBRTtVQUNOLFlBQVksRUFBRUosU0FBUztVQUN2QlMsT0FBTyxFQUFFWixRQUFRO1VBQ2pCUyxXQUFXLEVBQUUsV0FBVztVQUN4QkksUUFBUSxFQUFFO1FBQ1o7TUFDRjtJQUNGLENBQUMsQ0FBQztFQUNKLENBQUMsRUFBRWQsS0FBSyxDQUFDO0FBQ1giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxkYXJ0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRhcnRcbmRhcnQuZGlzcGxheU5hbWUgPSAnZGFydCdcbmRhcnQuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBkYXJ0KFByaXNtKSB7XG4gIDsoZnVuY3Rpb24gKFByaXNtKSB7XG4gICAgdmFyIGtleXdvcmRzID0gW1xuICAgICAgL1xcYig/OmFzeW5jfHN5bmN8eWllbGQpXFwqLyxcbiAgICAgIC9cXGIoPzphYnN0cmFjdHxhc3NlcnR8YXN5bmN8YXdhaXR8YnJlYWt8Y2FzZXxjYXRjaHxjbGFzc3xjb25zdHxjb250aW51ZXxjb3ZhcmlhbnR8ZGVmYXVsdHxkZWZlcnJlZHxkb3xkeW5hbWljfGVsc2V8ZW51bXxleHBvcnR8ZXh0ZW5kc3xleHRlbnNpb258ZXh0ZXJuYWx8ZmFjdG9yeXxmaW5hbHxmaW5hbGx5fGZvcnxnZXR8aGlkZXxpZnxpbXBsZW1lbnRzfGltcG9ydHxpbnxpbnRlcmZhY2V8bGlicmFyeXxtaXhpbnxuZXd8bnVsbHxvbnxvcGVyYXRvcnxwYXJ0fHJldGhyb3d8cmV0dXJufHNldHxzaG93fHN0YXRpY3xzdXBlcnxzd2l0Y2h8c3luY3x0aGlzfHRocm93fHRyeXx0eXBlZGVmfHZhcnx2b2lkfHdoaWxlfHdpdGh8eWllbGQpXFxiL1xuICAgIF0gLy8gSGFuZGxlcyBuYW1lZCBpbXBvcnRzLCBzdWNoIGFzIGh0dHAuQ2xpZW50XG4gICAgdmFyIHBhY2thZ2VQcmVmaXggPSAvKF58W15cXHcuXSkoPzpbYS16XVxcdypcXHMqXFwuXFxzKikqKD86W0EtWl1cXHcqXFxzKlxcLlxccyopKi9cbiAgICAgIC5zb3VyY2UgLy8gYmFzZWQgb24gdGhlIGRhcnQgbmFtaW5nIGNvbnZlbnRpb25zXG4gICAgdmFyIGNsYXNzTmFtZSA9IHtcbiAgICAgIHBhdHRlcm46IFJlZ0V4cChwYWNrYWdlUHJlZml4ICsgL1tBLVpdKD86W1xcZF9BLVpdKlthLXpdXFx3Kik/XFxiLy5zb3VyY2UpLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGluc2lkZToge1xuICAgICAgICBuYW1lc3BhY2U6IHtcbiAgICAgICAgICBwYXR0ZXJuOiAvXlthLXpdXFx3Kig/OlxccypcXC5cXHMqW2Etel1cXHcqKSooPzpcXHMqXFwuKT8vLFxuICAgICAgICAgIGluc2lkZToge1xuICAgICAgICAgICAgcHVuY3R1YXRpb246IC9cXC4vXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIFByaXNtLmxhbmd1YWdlcy5kYXJ0ID0gUHJpc20ubGFuZ3VhZ2VzLmV4dGVuZCgnY2xpa2UnLCB7XG4gICAgICAnY2xhc3MtbmFtZSc6IFtcbiAgICAgICAgY2xhc3NOYW1lLFxuICAgICAgICB7XG4gICAgICAgICAgLy8gdmFyaWFibGVzIGFuZCBwYXJhbWV0ZXJzXG4gICAgICAgICAgLy8gdGhpcyB0byBzdXBwb3J0IGNsYXNzIG5hbWVzIChvciBnZW5lcmljIHBhcmFtZXRlcnMpIHdoaWNoIGRvIG5vdCBjb250YWluIGEgbG93ZXIgY2FzZSBsZXR0ZXIgKGFsc28gd29ya3MgZm9yIG1ldGhvZHMpXG4gICAgICAgICAgcGF0dGVybjogUmVnRXhwKFxuICAgICAgICAgICAgcGFja2FnZVByZWZpeCArIC9bQS1aXVxcdyooPz1cXHMrXFx3K1xccypbOyw9KCldKS8uc291cmNlXG4gICAgICAgICAgKSxcbiAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAgIGluc2lkZTogY2xhc3NOYW1lLmluc2lkZVxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAga2V5d29yZDoga2V5d29yZHMsXG4gICAgICBvcGVyYXRvcjpcbiAgICAgICAgL1xcYmlzIXxcXGIoPzphc3xpcylcXGJ8XFwrXFwrfC0tfCYmfFxcfFxcfHw8PD0/fD4+PT98fig/OlxcLz0/KT98WytcXC0qXFwvJSZefD0hPD5dPT98XFw/L1xuICAgIH0pXG4gICAgUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgnZGFydCcsICdzdHJpbmcnLCB7XG4gICAgICAnc3RyaW5nLWxpdGVyYWwnOiB7XG4gICAgICAgIHBhdHRlcm46XG4gICAgICAgICAgL3I/KD86KFwiXCJcInwnJycpW1xcc1xcU10qP1xcMXwoW1wiJ10pKD86XFxcXC58KD8hXFwyKVteXFxcXFxcclxcbl0pKlxcMig/IVxcMikpLyxcbiAgICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICBpbnRlcnBvbGF0aW9uOiB7XG4gICAgICAgICAgICBwYXR0ZXJuOlxuICAgICAgICAgICAgICAvKCg/Ol58W15cXFxcXSkoPzpcXFxcezJ9KSopXFwkKD86XFx3K3xcXHsoPzpbXnt9XXxcXHtbXnt9XSpcXH0pKlxcfSkvLFxuICAgICAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgICAgIGluc2lkZToge1xuICAgICAgICAgICAgICBwdW5jdHVhdGlvbjogL15cXCRcXHs/fFxcfSQvLFxuICAgICAgICAgICAgICBleHByZXNzaW9uOiB7XG4gICAgICAgICAgICAgICAgcGF0dGVybjogL1tcXHNcXFNdKy8sXG4gICAgICAgICAgICAgICAgaW5zaWRlOiBQcmlzbS5sYW5ndWFnZXMuZGFydFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzdHJpbmc6IC9bXFxzXFxTXSsvXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBzdHJpbmc6IHVuZGVmaW5lZFxuICAgIH0pXG4gICAgUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgnZGFydCcsICdjbGFzcy1uYW1lJywge1xuICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgcGF0dGVybjogL0BcXHcrLyxcbiAgICAgICAgYWxpYXM6ICdmdW5jdGlvbidcbiAgICAgIH1cbiAgICB9KVxuICAgIFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ2RhcnQnLCAnY2xhc3MtbmFtZScsIHtcbiAgICAgIGdlbmVyaWNzOiB7XG4gICAgICAgIHBhdHRlcm46XG4gICAgICAgICAgLzwoPzpbXFx3XFxzLC4mP118PCg/OltcXHdcXHMsLiY/XXw8KD86W1xcd1xccywuJj9dfDxbXFx3XFxzLC4mP10qPikqPikqPikqPi8sXG4gICAgICAgIGluc2lkZToge1xuICAgICAgICAgICdjbGFzcy1uYW1lJzogY2xhc3NOYW1lLFxuICAgICAgICAgIGtleXdvcmQ6IGtleXdvcmRzLFxuICAgICAgICAgIHB1bmN0dWF0aW9uOiAvWzw+KCksLjpdLyxcbiAgICAgICAgICBvcGVyYXRvcjogL1s/JnxdL1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgfSkoUHJpc20pXG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImRhcnQiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImtleXdvcmRzIiwicGFja2FnZVByZWZpeCIsInNvdXJjZSIsImNsYXNzTmFtZSIsInBhdHRlcm4iLCJSZWdFeHAiLCJsb29rYmVoaW5kIiwiaW5zaWRlIiwibmFtZXNwYWNlIiwicHVuY3R1YXRpb24iLCJsYW5ndWFnZXMiLCJleHRlbmQiLCJrZXl3b3JkIiwib3BlcmF0b3IiLCJpbnNlcnRCZWZvcmUiLCJncmVlZHkiLCJpbnRlcnBvbGF0aW9uIiwiZXhwcmVzc2lvbiIsInN0cmluZyIsInVuZGVmaW5lZCIsIm1ldGFkYXRhIiwiYWxpYXMiLCJnZW5lcmljcyJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/dart.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/dataweave.js":
/*!**************************************************!*\
  !*** ./node_modules/refractor/lang/dataweave.js ***!
  \**************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = dataweave;\ndataweave.displayName = 'dataweave';\ndataweave.aliases = [];\nfunction dataweave(Prism) {\n  ;\n  (function (Prism) {\n    Prism.languages.dataweave = {\n      url: /\\b[A-Za-z]+:\\/\\/[\\w/:.?=&-]+|\\burn:[\\w:.?=&-]+/,\n      property: {\n        pattern: /(?:\\b\\w+#)?(?:\"(?:\\\\.|[^\\\\\"\\r\\n])*\"|\\b\\w+)(?=\\s*[:@])/,\n        greedy: true\n      },\n      string: {\n        pattern: /([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n        greedy: true\n      },\n      'mime-type': /\\b(?:application|audio|image|multipart|text|video)\\/[\\w+-]+/,\n      date: {\n        pattern: /\\|[\\w:+-]+\\|/,\n        greedy: true\n      },\n      comment: [{\n        pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n        lookbehind: true,\n        greedy: true\n      }, {\n        pattern: /(^|[^\\\\:])\\/\\/.*/,\n        lookbehind: true,\n        greedy: true\n      }],\n      regex: {\n        pattern: /\\/(?:[^\\\\\\/\\r\\n]|\\\\[^\\r\\n])+\\//,\n        greedy: true\n      },\n      keyword: /\\b(?:and|as|at|case|do|else|fun|if|input|is|match|not|ns|null|or|output|type|unless|update|using|var)\\b/,\n      \"function\": /\\b[A-Z_]\\w*(?=\\s*\\()/i,\n      number: /-?\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n      punctuation: /[{}[\\];(),.:@]/,\n      operator: /<<|>>|->|[<>~=]=?|!=|--?-?|\\+\\+?|!|\\?/,\n      \"boolean\": /\\b(?:false|true)\\b/\n    };\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvZGF0YXdlYXZlLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsU0FBUztBQUMxQkEsU0FBUyxDQUFDQyxXQUFXLEdBQUcsV0FBVztBQUNuQ0QsU0FBUyxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUN0QixTQUFTRixTQUFTQSxDQUFDRyxLQUFLLEVBQUU7RUFDeEI7RUFBQyxDQUFDLFVBQVVBLEtBQUssRUFBRTtJQUNqQkEsS0FBSyxDQUFDQyxTQUFTLENBQUNKLFNBQVMsR0FBRztNQUMxQkssR0FBRyxFQUFFLGdEQUFnRDtNQUNyREMsUUFBUSxFQUFFO1FBQ1JDLE9BQU8sRUFBRSx1REFBdUQ7UUFDaEVDLE1BQU0sRUFBRTtNQUNWLENBQUM7TUFDREMsTUFBTSxFQUFFO1FBQ05GLE9BQU8sRUFBRSxvQ0FBb0M7UUFDN0NDLE1BQU0sRUFBRTtNQUNWLENBQUM7TUFDRCxXQUFXLEVBQ1QsNkRBQTZEO01BQy9ERSxJQUFJLEVBQUU7UUFDSkgsT0FBTyxFQUFFLGNBQWM7UUFDdkJDLE1BQU0sRUFBRTtNQUNWLENBQUM7TUFDREcsT0FBTyxFQUFFLENBQ1A7UUFDRUosT0FBTyxFQUFFLGlDQUFpQztRQUMxQ0ssVUFBVSxFQUFFLElBQUk7UUFDaEJKLE1BQU0sRUFBRTtNQUNWLENBQUMsRUFDRDtRQUNFRCxPQUFPLEVBQUUsa0JBQWtCO1FBQzNCSyxVQUFVLEVBQUUsSUFBSTtRQUNoQkosTUFBTSxFQUFFO01BQ1YsQ0FBQyxDQUNGO01BQ0RLLEtBQUssRUFBRTtRQUNMTixPQUFPLEVBQUUsZ0NBQWdDO1FBQ3pDQyxNQUFNLEVBQUU7TUFDVixDQUFDO01BQ0RNLE9BQU8sRUFDTCx5R0FBeUc7TUFDM0csWUFBVSx1QkFBdUI7TUFDakNDLE1BQU0sRUFBRSxvQ0FBb0M7TUFDNUNDLFdBQVcsRUFBRSxnQkFBZ0I7TUFDN0JDLFFBQVEsRUFBRSx1Q0FBdUM7TUFDakQsV0FBUztJQUNYLENBQUM7RUFDSCxDQUFDLEVBQUVkLEtBQUssQ0FBQztBQUNYIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcZGF0YXdlYXZlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRhdGF3ZWF2ZVxuZGF0YXdlYXZlLmRpc3BsYXlOYW1lID0gJ2RhdGF3ZWF2ZSdcbmRhdGF3ZWF2ZS5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIGRhdGF3ZWF2ZShQcmlzbSkge1xuICA7KGZ1bmN0aW9uIChQcmlzbSkge1xuICAgIFByaXNtLmxhbmd1YWdlcy5kYXRhd2VhdmUgPSB7XG4gICAgICB1cmw6IC9cXGJbQS1aYS16XSs6XFwvXFwvW1xcdy86Lj89Ji1dK3xcXGJ1cm46W1xcdzouPz0mLV0rLyxcbiAgICAgIHByb3BlcnR5OiB7XG4gICAgICAgIHBhdHRlcm46IC8oPzpcXGJcXHcrIyk/KD86XCIoPzpcXFxcLnxbXlxcXFxcIlxcclxcbl0pKlwifFxcYlxcdyspKD89XFxzKls6QF0pLyxcbiAgICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgICB9LFxuICAgICAgc3RyaW5nOiB7XG4gICAgICAgIHBhdHRlcm46IC8oW1wiJ2BdKSg/OlxcXFxbXFxzXFxTXXwoPyFcXDEpW15cXFxcXSkqXFwxLyxcbiAgICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgICB9LFxuICAgICAgJ21pbWUtdHlwZSc6XG4gICAgICAgIC9cXGIoPzphcHBsaWNhdGlvbnxhdWRpb3xpbWFnZXxtdWx0aXBhcnR8dGV4dHx2aWRlbylcXC9bXFx3Ky1dKy8sXG4gICAgICBkYXRlOiB7XG4gICAgICAgIHBhdHRlcm46IC9cXHxbXFx3OistXStcXHwvLFxuICAgICAgICBncmVlZHk6IHRydWVcbiAgICAgIH0sXG4gICAgICBjb21tZW50OiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwYXR0ZXJuOiAvKF58W15cXFxcXSlcXC9cXCpbXFxzXFxTXSo/KD86XFwqXFwvfCQpLyxcbiAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAgIGdyZWVkeTogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcGF0dGVybjogLyhefFteXFxcXDpdKVxcL1xcLy4qLyxcbiAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAgIGdyZWVkeTogdHJ1ZVxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgcmVnZXg6IHtcbiAgICAgICAgcGF0dGVybjogL1xcLyg/OlteXFxcXFxcL1xcclxcbl18XFxcXFteXFxyXFxuXSkrXFwvLyxcbiAgICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgICB9LFxuICAgICAga2V5d29yZDpcbiAgICAgICAgL1xcYig/OmFuZHxhc3xhdHxjYXNlfGRvfGVsc2V8ZnVufGlmfGlucHV0fGlzfG1hdGNofG5vdHxuc3xudWxsfG9yfG91dHB1dHx0eXBlfHVubGVzc3x1cGRhdGV8dXNpbmd8dmFyKVxcYi8sXG4gICAgICBmdW5jdGlvbjogL1xcYltBLVpfXVxcdyooPz1cXHMqXFwoKS9pLFxuICAgICAgbnVtYmVyOiAvLT9cXGJcXGQrKD86XFwuXFxkKyk/KD86ZVsrLV0/XFxkKyk/XFxiL2ksXG4gICAgICBwdW5jdHVhdGlvbjogL1t7fVtcXF07KCksLjpAXS8sXG4gICAgICBvcGVyYXRvcjogLzw8fD4+fC0+fFs8Pn49XT0/fCE9fC0tPy0/fFxcK1xcKz98IXxcXD8vLFxuICAgICAgYm9vbGVhbjogL1xcYig/OmZhbHNlfHRydWUpXFxiL1xuICAgIH1cbiAgfSkoUHJpc20pXG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImRhdGF3ZWF2ZSIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwidXJsIiwicHJvcGVydHkiLCJwYXR0ZXJuIiwiZ3JlZWR5Iiwic3RyaW5nIiwiZGF0ZSIsImNvbW1lbnQiLCJsb29rYmVoaW5kIiwicmVnZXgiLCJrZXl3b3JkIiwibnVtYmVyIiwicHVuY3R1YXRpb24iLCJvcGVyYXRvciJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/dataweave.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/dax.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/dax.js ***!
  \********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = dax;\ndax.displayName = 'dax';\ndax.aliases = [];\nfunction dax(Prism) {\n  Prism.languages.dax = {\n    comment: {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:--|\\/\\/).*)/,\n      lookbehind: true\n    },\n    'data-field': {\n      pattern: /'(?:[^']|'')*'(?!')(?:\\[[ \\w\\xA0-\\uFFFF]+\\])?|\\w+\\[[ \\w\\xA0-\\uFFFF]+\\]/,\n      alias: 'symbol'\n    },\n    measure: {\n      pattern: /\\[[ \\w\\xA0-\\uFFFF]+\\]/,\n      alias: 'constant'\n    },\n    string: {\n      pattern: /\"(?:[^\"]|\"\")*\"(?!\")/,\n      greedy: true\n    },\n    \"function\": /\\b(?:ABS|ACOS|ACOSH|ACOT|ACOTH|ADDCOLUMNS|ADDMISSINGITEMS|ALL|ALLCROSSFILTERED|ALLEXCEPT|ALLNOBLANKROW|ALLSELECTED|AND|APPROXIMATEDISTINCTCOUNT|ASIN|ASINH|ATAN|ATANH|AVERAGE|AVERAGEA|AVERAGEX|BETA\\.DIST|BETA\\.INV|BLANK|CALCULATE|CALCULATETABLE|CALENDAR|CALENDARAUTO|CEILING|CHISQ\\.DIST|CHISQ\\.DIST\\.RT|CHISQ\\.INV|CHISQ\\.INV\\.RT|CLOSINGBALANCEMONTH|CLOSINGBALANCEQUARTER|CLOSINGBALANCEYEAR|COALESCE|COMBIN|COMBINA|COMBINEVALUES|CONCATENATE|CONCATENATEX|CONFIDENCE\\.NORM|CONFIDENCE\\.T|CONTAINS|CONTAINSROW|CONTAINSSTRING|CONTAINSSTRINGEXACT|CONVERT|COS|COSH|COT|COTH|COUNT|COUNTA|COUNTAX|COUNTBLANK|COUNTROWS|COUNTX|CROSSFILTER|CROSSJOIN|CURRENCY|CURRENTGROUP|CUSTOMDATA|DATATABLE|DATE|DATEADD|DATEDIFF|DATESBETWEEN|DATESINPERIOD|DATESMTD|DATESQTD|DATESYTD|DATEVALUE|DAY|DEGREES|DETAILROWS|DISTINCT|DISTINCTCOUNT|DISTINCTCOUNTNOBLANK|DIVIDE|EARLIER|EARLIEST|EDATE|ENDOFMONTH|ENDOFQUARTER|ENDOFYEAR|EOMONTH|ERROR|EVEN|EXACT|EXCEPT|EXP|EXPON\\.DIST|FACT|FALSE|FILTER|FILTERS|FIND|FIRSTDATE|FIRSTNONBLANK|FIRSTNONBLANKVALUE|FIXED|FLOOR|FORMAT|GCD|GENERATE|GENERATEALL|GENERATESERIES|GEOMEAN|GEOMEANX|GROUPBY|HASONEFILTER|HASONEVALUE|HOUR|IF|IF\\.EAGER|IFERROR|IGNORE|INT|INTERSECT|ISBLANK|ISCROSSFILTERED|ISEMPTY|ISERROR|ISEVEN|ISFILTERED|ISINSCOPE|ISLOGICAL|ISNONTEXT|ISNUMBER|ISO\\.CEILING|ISODD|ISONORAFTER|ISSELECTEDMEASURE|ISSUBTOTAL|ISTEXT|KEEPFILTERS|KEYWORDMATCH|LASTDATE|LASTNONBLANK|LASTNONBLANKVALUE|LCM|LEFT|LEN|LN|LOG|LOG10|LOOKUPVALUE|LOWER|MAX|MAXA|MAXX|MEDIAN|MEDIANX|MID|MIN|MINA|MINUTE|MINX|MOD|MONTH|MROUND|NATURALINNERJOIN|NATURALLEFTOUTERJOIN|NEXTDAY|NEXTMONTH|NEXTQUARTER|NEXTYEAR|NONVISUAL|NORM\\.DIST|NORM\\.INV|NORM\\.S\\.DIST|NORM\\.S\\.INV|NOT|NOW|ODD|OPENINGBALANCEMONTH|OPENINGBALANCEQUARTER|OPENINGBALANCEYEAR|OR|PARALLELPERIOD|PATH|PATHCONTAINS|PATHITEM|PATHITEMREVERSE|PATHLENGTH|PERCENTILE\\.EXC|PERCENTILE\\.INC|PERCENTILEX\\.EXC|PERCENTILEX\\.INC|PERMUT|PI|POISSON\\.DIST|POWER|PREVIOUSDAY|PREVIOUSMONTH|PREVIOUSQUARTER|PREVIOUSYEAR|PRODUCT|PRODUCTX|QUARTER|QUOTIENT|RADIANS|RAND|RANDBETWEEN|RANK\\.EQ|RANKX|RELATED|RELATEDTABLE|REMOVEFILTERS|REPLACE|REPT|RIGHT|ROLLUP|ROLLUPADDISSUBTOTAL|ROLLUPGROUP|ROLLUPISSUBTOTAL|ROUND|ROUNDDOWN|ROUNDUP|ROW|SAMEPERIODLASTYEAR|SAMPLE|SEARCH|SECOND|SELECTCOLUMNS|SELECTEDMEASURE|SELECTEDMEASUREFORMATSTRING|SELECTEDMEASURENAME|SELECTEDVALUE|SIGN|SIN|SINH|SQRT|SQRTPI|STARTOFMONTH|STARTOFQUARTER|STARTOFYEAR|STDEV\\.P|STDEV\\.S|STDEVX\\.P|STDEVX\\.S|SUBSTITUTE|SUBSTITUTEWITHINDEX|SUM|SUMMARIZE|SUMMARIZECOLUMNS|SUMX|SWITCH|T\\.DIST|T\\.DIST\\.2T|T\\.DIST\\.RT|T\\.INV|T\\.INV\\.2T|TAN|TANH|TIME|TIMEVALUE|TODAY|TOPN|TOPNPERLEVEL|TOPNSKIP|TOTALMTD|TOTALQTD|TOTALYTD|TREATAS|TRIM|TRUE|TRUNC|UNICHAR|UNICODE|UNION|UPPER|USERELATIONSHIP|USERNAME|USEROBJECTID|USERPRINCIPALNAME|UTCNOW|UTCTODAY|VALUE|VALUES|VAR\\.P|VAR\\.S|VARX\\.P|VARX\\.S|WEEKDAY|WEEKNUM|XIRR|XNPV|YEAR|YEARFRAC)(?=\\s*\\()/i,\n    keyword: /\\b(?:DEFINE|EVALUATE|MEASURE|ORDER\\s+BY|RETURN|VAR|START\\s+AT|ASC|DESC)\\b/i,\n    \"boolean\": {\n      pattern: /\\b(?:FALSE|NULL|TRUE)\\b/i,\n      alias: 'constant'\n    },\n    number: /\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+\\b/,\n    operator: /:=|[-+*\\/=^]|&&?|\\|\\||<(?:=>?|<|>)?|>[>=]?|\\b(?:IN|NOT)\\b/i,\n    punctuation: /[;\\[\\](){}`,.]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvZGF4LmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsR0FBRztBQUNwQkEsR0FBRyxDQUFDQyxXQUFXLEdBQUcsS0FBSztBQUN2QkQsR0FBRyxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNoQixTQUFTRixHQUFHQSxDQUFDRyxLQUFLLEVBQUU7RUFDbEJBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixHQUFHLEdBQUc7SUFDcEJLLE9BQU8sRUFBRTtNQUNQQyxPQUFPLEVBQUUsNkNBQTZDO01BQ3REQyxVQUFVLEVBQUU7SUFDZCxDQUFDO0lBQ0QsWUFBWSxFQUFFO01BQ1pELE9BQU8sRUFDTCx3RUFBd0U7TUFDMUVFLEtBQUssRUFBRTtJQUNULENBQUM7SUFDREMsT0FBTyxFQUFFO01BQ1BILE9BQU8sRUFBRSx1QkFBdUI7TUFDaENFLEtBQUssRUFBRTtJQUNULENBQUM7SUFDREUsTUFBTSxFQUFFO01BQ05KLE9BQU8sRUFBRSxxQkFBcUI7TUFDOUJLLE1BQU0sRUFBRTtJQUNWLENBQUM7SUFDRCxZQUNFLHd3RkFBd3dGO0lBQzF3RkMsT0FBTyxFQUNMLDRFQUE0RTtJQUM5RSxXQUFTO01BQ1BOLE9BQU8sRUFBRSwwQkFBMEI7TUFDbkNFLEtBQUssRUFBRTtJQUNULENBQUM7SUFDREssTUFBTSxFQUFFLDJCQUEyQjtJQUNuQ0MsUUFBUSxFQUFFLDREQUE0RDtJQUN0RUMsV0FBVyxFQUFFO0VBQ2YsQ0FBQztBQUNIIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcZGF4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRheFxuZGF4LmRpc3BsYXlOYW1lID0gJ2RheCdcbmRheC5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIGRheChQcmlzbSkge1xuICBQcmlzbS5sYW5ndWFnZXMuZGF4ID0ge1xuICAgIGNvbW1lbnQ6IHtcbiAgICAgIHBhdHRlcm46IC8oXnxbXlxcXFxdKSg/OlxcL1xcKltcXHNcXFNdKj9cXCpcXC98KD86LS18XFwvXFwvKS4qKS8sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgfSxcbiAgICAnZGF0YS1maWVsZCc6IHtcbiAgICAgIHBhdHRlcm46XG4gICAgICAgIC8nKD86W14nXXwnJykqJyg/IScpKD86XFxbWyBcXHdcXHhBMC1cXHVGRkZGXStcXF0pP3xcXHcrXFxbWyBcXHdcXHhBMC1cXHVGRkZGXStcXF0vLFxuICAgICAgYWxpYXM6ICdzeW1ib2wnXG4gICAgfSxcbiAgICBtZWFzdXJlOiB7XG4gICAgICBwYXR0ZXJuOiAvXFxbWyBcXHdcXHhBMC1cXHVGRkZGXStcXF0vLFxuICAgICAgYWxpYXM6ICdjb25zdGFudCdcbiAgICB9LFxuICAgIHN0cmluZzoge1xuICAgICAgcGF0dGVybjogL1wiKD86W15cIl18XCJcIikqXCIoPyFcIikvLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICBmdW5jdGlvbjpcbiAgICAgIC9cXGIoPzpBQlN8QUNPU3xBQ09TSHxBQ09UfEFDT1RIfEFERENPTFVNTlN8QURETUlTU0lOR0lURU1TfEFMTHxBTExDUk9TU0ZJTFRFUkVEfEFMTEVYQ0VQVHxBTExOT0JMQU5LUk9XfEFMTFNFTEVDVEVEfEFORHxBUFBST1hJTUFURURJU1RJTkNUQ09VTlR8QVNJTnxBU0lOSHxBVEFOfEFUQU5IfEFWRVJBR0V8QVZFUkFHRUF8QVZFUkFHRVh8QkVUQVxcLkRJU1R8QkVUQVxcLklOVnxCTEFOS3xDQUxDVUxBVEV8Q0FMQ1VMQVRFVEFCTEV8Q0FMRU5EQVJ8Q0FMRU5EQVJBVVRPfENFSUxJTkd8Q0hJU1FcXC5ESVNUfENISVNRXFwuRElTVFxcLlJUfENISVNRXFwuSU5WfENISVNRXFwuSU5WXFwuUlR8Q0xPU0lOR0JBTEFOQ0VNT05USHxDTE9TSU5HQkFMQU5DRVFVQVJURVJ8Q0xPU0lOR0JBTEFOQ0VZRUFSfENPQUxFU0NFfENPTUJJTnxDT01CSU5BfENPTUJJTkVWQUxVRVN8Q09OQ0FURU5BVEV8Q09OQ0FURU5BVEVYfENPTkZJREVOQ0VcXC5OT1JNfENPTkZJREVOQ0VcXC5UfENPTlRBSU5TfENPTlRBSU5TUk9XfENPTlRBSU5TU1RSSU5HfENPTlRBSU5TU1RSSU5HRVhBQ1R8Q09OVkVSVHxDT1N8Q09TSHxDT1R8Q09USHxDT1VOVHxDT1VOVEF8Q09VTlRBWHxDT1VOVEJMQU5LfENPVU5UUk9XU3xDT1VOVFh8Q1JPU1NGSUxURVJ8Q1JPU1NKT0lOfENVUlJFTkNZfENVUlJFTlRHUk9VUHxDVVNUT01EQVRBfERBVEFUQUJMRXxEQVRFfERBVEVBRER8REFURURJRkZ8REFURVNCRVRXRUVOfERBVEVTSU5QRVJJT0R8REFURVNNVER8REFURVNRVER8REFURVNZVER8REFURVZBTFVFfERBWXxERUdSRUVTfERFVEFJTFJPV1N8RElTVElOQ1R8RElTVElOQ1RDT1VOVHxESVNUSU5DVENPVU5UTk9CTEFOS3xESVZJREV8RUFSTElFUnxFQVJMSUVTVHxFREFURXxFTkRPRk1PTlRIfEVORE9GUVVBUlRFUnxFTkRPRllFQVJ8RU9NT05USHxFUlJPUnxFVkVOfEVYQUNUfEVYQ0VQVHxFWFB8RVhQT05cXC5ESVNUfEZBQ1R8RkFMU0V8RklMVEVSfEZJTFRFUlN8RklORHxGSVJTVERBVEV8RklSU1ROT05CTEFOS3xGSVJTVE5PTkJMQU5LVkFMVUV8RklYRUR8RkxPT1J8Rk9STUFUfEdDRHxHRU5FUkFURXxHRU5FUkFURUFMTHxHRU5FUkFURVNFUklFU3xHRU9NRUFOfEdFT01FQU5YfEdST1VQQll8SEFTT05FRklMVEVSfEhBU09ORVZBTFVFfEhPVVJ8SUZ8SUZcXC5FQUdFUnxJRkVSUk9SfElHTk9SRXxJTlR8SU5URVJTRUNUfElTQkxBTkt8SVNDUk9TU0ZJTFRFUkVEfElTRU1QVFl8SVNFUlJPUnxJU0VWRU58SVNGSUxURVJFRHxJU0lOU0NPUEV8SVNMT0dJQ0FMfElTTk9OVEVYVHxJU05VTUJFUnxJU09cXC5DRUlMSU5HfElTT0REfElTT05PUkFGVEVSfElTU0VMRUNURURNRUFTVVJFfElTU1VCVE9UQUx8SVNURVhUfEtFRVBGSUxURVJTfEtFWVdPUkRNQVRDSHxMQVNUREFURXxMQVNUTk9OQkxBTkt8TEFTVE5PTkJMQU5LVkFMVUV8TENNfExFRlR8TEVOfExOfExPR3xMT0cxMHxMT09LVVBWQUxVRXxMT1dFUnxNQVh8TUFYQXxNQVhYfE1FRElBTnxNRURJQU5YfE1JRHxNSU58TUlOQXxNSU5VVEV8TUlOWHxNT0R8TU9OVEh8TVJPVU5EfE5BVFVSQUxJTk5FUkpPSU58TkFUVVJBTExFRlRPVVRFUkpPSU58TkVYVERBWXxORVhUTU9OVEh8TkVYVFFVQVJURVJ8TkVYVFlFQVJ8Tk9OVklTVUFMfE5PUk1cXC5ESVNUfE5PUk1cXC5JTlZ8Tk9STVxcLlNcXC5ESVNUfE5PUk1cXC5TXFwuSU5WfE5PVHxOT1d8T0REfE9QRU5JTkdCQUxBTkNFTU9OVEh8T1BFTklOR0JBTEFOQ0VRVUFSVEVSfE9QRU5JTkdCQUxBTkNFWUVBUnxPUnxQQVJBTExFTFBFUklPRHxQQVRIfFBBVEhDT05UQUlOU3xQQVRISVRFTXxQQVRISVRFTVJFVkVSU0V8UEFUSExFTkdUSHxQRVJDRU5USUxFXFwuRVhDfFBFUkNFTlRJTEVcXC5JTkN8UEVSQ0VOVElMRVhcXC5FWEN8UEVSQ0VOVElMRVhcXC5JTkN8UEVSTVVUfFBJfFBPSVNTT05cXC5ESVNUfFBPV0VSfFBSRVZJT1VTREFZfFBSRVZJT1VTTU9OVEh8UFJFVklPVVNRVUFSVEVSfFBSRVZJT1VTWUVBUnxQUk9EVUNUfFBST0RVQ1RYfFFVQVJURVJ8UVVPVElFTlR8UkFESUFOU3xSQU5EfFJBTkRCRVRXRUVOfFJBTktcXC5FUXxSQU5LWHxSRUxBVEVEfFJFTEFURURUQUJMRXxSRU1PVkVGSUxURVJTfFJFUExBQ0V8UkVQVHxSSUdIVHxST0xMVVB8Uk9MTFVQQURESVNTVUJUT1RBTHxST0xMVVBHUk9VUHxST0xMVVBJU1NVQlRPVEFMfFJPVU5EfFJPVU5ERE9XTnxST1VORFVQfFJPV3xTQU1FUEVSSU9ETEFTVFlFQVJ8U0FNUExFfFNFQVJDSHxTRUNPTkR8U0VMRUNUQ09MVU1OU3xTRUxFQ1RFRE1FQVNVUkV8U0VMRUNURURNRUFTVVJFRk9STUFUU1RSSU5HfFNFTEVDVEVETUVBU1VSRU5BTUV8U0VMRUNURURWQUxVRXxTSUdOfFNJTnxTSU5IfFNRUlR8U1FSVFBJfFNUQVJUT0ZNT05USHxTVEFSVE9GUVVBUlRFUnxTVEFSVE9GWUVBUnxTVERFVlxcLlB8U1RERVZcXC5TfFNUREVWWFxcLlB8U1RERVZYXFwuU3xTVUJTVElUVVRFfFNVQlNUSVRVVEVXSVRISU5ERVh8U1VNfFNVTU1BUklaRXxTVU1NQVJJWkVDT0xVTU5TfFNVTVh8U1dJVENIfFRcXC5ESVNUfFRcXC5ESVNUXFwuMlR8VFxcLkRJU1RcXC5SVHxUXFwuSU5WfFRcXC5JTlZcXC4yVHxUQU58VEFOSHxUSU1FfFRJTUVWQUxVRXxUT0RBWXxUT1BOfFRPUE5QRVJMRVZFTHxUT1BOU0tJUHxUT1RBTE1URHxUT1RBTFFURHxUT1RBTFlURHxUUkVBVEFTfFRSSU18VFJVRXxUUlVOQ3xVTklDSEFSfFVOSUNPREV8VU5JT058VVBQRVJ8VVNFUkVMQVRJT05TSElQfFVTRVJOQU1FfFVTRVJPQkpFQ1RJRHxVU0VSUFJJTkNJUEFMTkFNRXxVVENOT1d8VVRDVE9EQVl8VkFMVUV8VkFMVUVTfFZBUlxcLlB8VkFSXFwuU3xWQVJYXFwuUHxWQVJYXFwuU3xXRUVLREFZfFdFRUtOVU18WElSUnxYTlBWfFlFQVJ8WUVBUkZSQUMpKD89XFxzKlxcKCkvaSxcbiAgICBrZXl3b3JkOlxuICAgICAgL1xcYig/OkRFRklORXxFVkFMVUFURXxNRUFTVVJFfE9SREVSXFxzK0JZfFJFVFVSTnxWQVJ8U1RBUlRcXHMrQVR8QVNDfERFU0MpXFxiL2ksXG4gICAgYm9vbGVhbjoge1xuICAgICAgcGF0dGVybjogL1xcYig/OkZBTFNFfE5VTEx8VFJVRSlcXGIvaSxcbiAgICAgIGFsaWFzOiAnY29uc3RhbnQnXG4gICAgfSxcbiAgICBudW1iZXI6IC9cXGJcXGQrKD86XFwuXFxkKik/fFxcQlxcLlxcZCtcXGIvLFxuICAgIG9wZXJhdG9yOiAvOj18Wy0rKlxcLz1eXXwmJj98XFx8XFx8fDwoPzo9Pj98PHw+KT98Pls+PV0/fFxcYig/OklOfE5PVClcXGIvaSxcbiAgICBwdW5jdHVhdGlvbjogL1s7XFxbXFxdKCl7fWAsLl0vXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiZGF4IiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJjb21tZW50IiwicGF0dGVybiIsImxvb2tiZWhpbmQiLCJhbGlhcyIsIm1lYXN1cmUiLCJzdHJpbmciLCJncmVlZHkiLCJrZXl3b3JkIiwibnVtYmVyIiwib3BlcmF0b3IiLCJwdW5jdHVhdGlvbiJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/dax.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/dhall.js":
/*!**********************************************!*\
  !*** ./node_modules/refractor/lang/dhall.js ***!
  \**********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = dhall;\ndhall.displayName = 'dhall';\ndhall.aliases = [];\nfunction dhall(Prism) {\n  // ABNF grammar:\n  // https://github.com/dhall-lang/dhall-lang/blob/master/standard/dhall.abnf\n  Prism.languages.dhall = {\n    // Multi-line comments can be nested. E.g. {- foo {- bar -} -}\n    // The multi-line pattern is essentially this:\n    //   \\{-(?:[^-{]|-(?!\\})|\\{(?!-)|<SELF>)*-\\}\n    comment: /--.*|\\{-(?:[^-{]|-(?!\\})|\\{(?!-)|\\{-(?:[^-{]|-(?!\\})|\\{(?!-))*-\\})*-\\}/,\n    string: {\n      pattern: /\"(?:[^\"\\\\]|\\\\.)*\"|''(?:[^']|'(?!')|'''|''\\$\\{)*''(?!'|\\$)/,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /\\$\\{[^{}]*\\}/,\n          inside: {\n            expression: {\n              pattern: /(^\\$\\{)[\\s\\S]+(?=\\}$)/,\n              lookbehind: true,\n              alias: 'language-dhall',\n              inside: null // see blow\n            },\n\n            punctuation: /\\$\\{|\\}/\n          }\n        }\n      }\n    },\n    label: {\n      pattern: /`[^`]*`/,\n      greedy: true\n    },\n    url: {\n      // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L596\n      pattern: /\\bhttps?:\\/\\/[\\w.:%!$&'*+;=@~-]+(?:\\/[\\w.:%!$&'*+;=@~-]*)*(?:\\?[/?\\w.:%!$&'*+;=@~-]*)?/,\n      greedy: true\n    },\n    env: {\n      // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L661\n      pattern: /\\benv:(?:(?!\\d)\\w+|\"(?:[^\"\\\\=]|\\\\.)*\")/,\n      greedy: true,\n      inside: {\n        \"function\": /^env/,\n        operator: /^:/,\n        variable: /[\\s\\S]+/\n      }\n    },\n    hash: {\n      // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L725\n      pattern: /\\bsha256:[\\da-fA-F]{64}\\b/,\n      inside: {\n        \"function\": /sha256/,\n        operator: /:/,\n        number: /[\\da-fA-F]{64}/\n      }\n    },\n    // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L359\n    keyword: /\\b(?:as|assert|else|forall|if|in|let|merge|missing|then|toMap|using|with)\\b|\\u2200/,\n    builtin: /\\b(?:None|Some)\\b/,\n    \"boolean\": /\\b(?:False|True)\\b/,\n    number: /\\bNaN\\b|-?\\bInfinity\\b|[+-]?\\b(?:0x[\\da-fA-F]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/,\n    operator: /\\/\\\\|\\/\\/\\\\\\\\|&&|\\|\\||===|[!=]=|\\/\\/|->|\\+\\+|::|[+*#@=:?<>|\\\\\\u2227\\u2a53\\u2261\\u2afd\\u03bb\\u2192]/,\n    punctuation: /\\.\\.|[{}\\[\\](),./]/,\n    // we'll just assume that every capital word left is a type name\n    'class-name': /\\b[A-Z]\\w*\\b/\n  };\n  Prism.languages.dhall.string.inside.interpolation.inside.expression.inside = Prism.languages.dhall;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvZGhhbGwuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxLQUFLO0FBQ3RCQSxLQUFLLENBQUNDLFdBQVcsR0FBRyxPQUFPO0FBQzNCRCxLQUFLLENBQUNFLE9BQU8sR0FBRyxFQUFFO0FBQ2xCLFNBQVNGLEtBQUtBLENBQUNHLEtBQUssRUFBRTtFQUNwQjtFQUNBO0VBQ0FBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixLQUFLLEdBQUc7SUFDdEI7SUFDQTtJQUNBO0lBQ0FLLE9BQU8sRUFDTCx3RUFBd0U7SUFDMUVDLE1BQU0sRUFBRTtNQUNOQyxPQUFPLEVBQUUsMkRBQTJEO01BQ3BFQyxNQUFNLEVBQUUsSUFBSTtNQUNaQyxNQUFNLEVBQUU7UUFDTkMsYUFBYSxFQUFFO1VBQ2JILE9BQU8sRUFBRSxjQUFjO1VBQ3ZCRSxNQUFNLEVBQUU7WUFDTkUsVUFBVSxFQUFFO2NBQ1ZKLE9BQU8sRUFBRSx1QkFBdUI7Y0FDaENLLFVBQVUsRUFBRSxJQUFJO2NBQ2hCQyxLQUFLLEVBQUUsZ0JBQWdCO2NBQ3ZCSixNQUFNLEVBQUUsSUFBSSxDQUFDO1lBQ2YsQ0FBQzs7WUFDREssV0FBVyxFQUFFO1VBQ2Y7UUFDRjtNQUNGO0lBQ0YsQ0FBQztJQUNEQyxLQUFLLEVBQUU7TUFDTFIsT0FBTyxFQUFFLFNBQVM7TUFDbEJDLE1BQU0sRUFBRTtJQUNWLENBQUM7SUFDRFEsR0FBRyxFQUFFO01BQ0g7TUFDQVQsT0FBTyxFQUNMLHdGQUF3RjtNQUMxRkMsTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUNEUyxHQUFHLEVBQUU7TUFDSDtNQUNBVixPQUFPLEVBQUUsd0NBQXdDO01BQ2pEQyxNQUFNLEVBQUUsSUFBSTtNQUNaQyxNQUFNLEVBQUU7UUFDTixZQUFVLE1BQU07UUFDaEJTLFFBQVEsRUFBRSxJQUFJO1FBQ2RDLFFBQVEsRUFBRTtNQUNaO0lBQ0YsQ0FBQztJQUNEQyxJQUFJLEVBQUU7TUFDSjtNQUNBYixPQUFPLEVBQUUsMkJBQTJCO01BQ3BDRSxNQUFNLEVBQUU7UUFDTixZQUFVLFFBQVE7UUFDbEJTLFFBQVEsRUFBRSxHQUFHO1FBQ2JHLE1BQU0sRUFBRTtNQUNWO0lBQ0YsQ0FBQztJQUNEO0lBQ0FDLE9BQU8sRUFDTCxvRkFBb0Y7SUFDdEZDLE9BQU8sRUFBRSxtQkFBbUI7SUFDNUIsV0FBUyxvQkFBb0I7SUFDN0JGLE1BQU0sRUFDSiwrRUFBK0U7SUFDakZILFFBQVEsRUFDTixvR0FBb0c7SUFDdEdKLFdBQVcsRUFBRSxvQkFBb0I7SUFDakM7SUFDQSxZQUFZLEVBQUU7RUFDaEIsQ0FBQztFQUNEWCxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osS0FBSyxDQUFDTSxNQUFNLENBQUNHLE1BQU0sQ0FBQ0MsYUFBYSxDQUFDRCxNQUFNLENBQUNFLFVBQVUsQ0FBQ0YsTUFBTSxHQUN4RU4sS0FBSyxDQUFDQyxTQUFTLENBQUNKLEtBQUs7QUFDekIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxkaGFsbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBkaGFsbFxuZGhhbGwuZGlzcGxheU5hbWUgPSAnZGhhbGwnXG5kaGFsbC5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIGRoYWxsKFByaXNtKSB7XG4gIC8vIEFCTkYgZ3JhbW1hcjpcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2RoYWxsLWxhbmcvZGhhbGwtbGFuZy9ibG9iL21hc3Rlci9zdGFuZGFyZC9kaGFsbC5hYm5mXG4gIFByaXNtLmxhbmd1YWdlcy5kaGFsbCA9IHtcbiAgICAvLyBNdWx0aS1saW5lIGNvbW1lbnRzIGNhbiBiZSBuZXN0ZWQuIEUuZy4gey0gZm9vIHstIGJhciAtfSAtfVxuICAgIC8vIFRoZSBtdWx0aS1saW5lIHBhdHRlcm4gaXMgZXNzZW50aWFsbHkgdGhpczpcbiAgICAvLyAgIFxcey0oPzpbXi17XXwtKD8hXFx9KXxcXHsoPyEtKXw8U0VMRj4pKi1cXH1cbiAgICBjb21tZW50OlxuICAgICAgLy0tLip8XFx7LSg/OlteLXtdfC0oPyFcXH0pfFxceyg/IS0pfFxcey0oPzpbXi17XXwtKD8hXFx9KXxcXHsoPyEtKSkqLVxcfSkqLVxcfS8sXG4gICAgc3RyaW5nOiB7XG4gICAgICBwYXR0ZXJuOiAvXCIoPzpbXlwiXFxcXF18XFxcXC4pKlwifCcnKD86W14nXXwnKD8hJyl8JycnfCcnXFwkXFx7KSonJyg/ISd8XFwkKS8sXG4gICAgICBncmVlZHk6IHRydWUsXG4gICAgICBpbnNpZGU6IHtcbiAgICAgICAgaW50ZXJwb2xhdGlvbjoge1xuICAgICAgICAgIHBhdHRlcm46IC9cXCRcXHtbXnt9XSpcXH0vLFxuICAgICAgICAgIGluc2lkZToge1xuICAgICAgICAgICAgZXhwcmVzc2lvbjoge1xuICAgICAgICAgICAgICBwYXR0ZXJuOiAvKF5cXCRcXHspW1xcc1xcU10rKD89XFx9JCkvLFxuICAgICAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAgICAgICBhbGlhczogJ2xhbmd1YWdlLWRoYWxsJyxcbiAgICAgICAgICAgICAgaW5zaWRlOiBudWxsIC8vIHNlZSBibG93XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHVuY3R1YXRpb246IC9cXCRcXHt8XFx9L1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgbGFiZWw6IHtcbiAgICAgIHBhdHRlcm46IC9gW15gXSpgLyxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgdXJsOiB7XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZGhhbGwtbGFuZy9kaGFsbC1sYW5nL2Jsb2IvNWZkZThlZjFiZWFkNmZiNGU5OTlkM2MxZmZlNzA0NGNkMDE5ZDYzYS9zdGFuZGFyZC9kaGFsbC5hYm5mI0w1OTZcbiAgICAgIHBhdHRlcm46XG4gICAgICAgIC9cXGJodHRwcz86XFwvXFwvW1xcdy46JSEkJicqKzs9QH4tXSsoPzpcXC9bXFx3LjolISQmJyorOz1Afi1dKikqKD86XFw/Wy8/XFx3LjolISQmJyorOz1Afi1dKik/LyxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgZW52OiB7XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZGhhbGwtbGFuZy9kaGFsbC1sYW5nL2Jsb2IvNWZkZThlZjFiZWFkNmZiNGU5OTlkM2MxZmZlNzA0NGNkMDE5ZDYzYS9zdGFuZGFyZC9kaGFsbC5hYm5mI0w2NjFcbiAgICAgIHBhdHRlcm46IC9cXGJlbnY6KD86KD8hXFxkKVxcdyt8XCIoPzpbXlwiXFxcXD1dfFxcXFwuKSpcIikvLFxuICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgIGZ1bmN0aW9uOiAvXmVudi8sXG4gICAgICAgIG9wZXJhdG9yOiAvXjovLFxuICAgICAgICB2YXJpYWJsZTogL1tcXHNcXFNdKy9cbiAgICAgIH1cbiAgICB9LFxuICAgIGhhc2g6IHtcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9kaGFsbC1sYW5nL2RoYWxsLWxhbmcvYmxvYi81ZmRlOGVmMWJlYWQ2ZmI0ZTk5OWQzYzFmZmU3MDQ0Y2QwMTlkNjNhL3N0YW5kYXJkL2RoYWxsLmFibmYjTDcyNVxuICAgICAgcGF0dGVybjogL1xcYnNoYTI1NjpbXFxkYS1mQS1GXXs2NH1cXGIvLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgIGZ1bmN0aW9uOiAvc2hhMjU2LyxcbiAgICAgICAgb3BlcmF0b3I6IC86LyxcbiAgICAgICAgbnVtYmVyOiAvW1xcZGEtZkEtRl17NjR9L1xuICAgICAgfVxuICAgIH0sXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2RoYWxsLWxhbmcvZGhhbGwtbGFuZy9ibG9iLzVmZGU4ZWYxYmVhZDZmYjRlOTk5ZDNjMWZmZTcwNDRjZDAxOWQ2M2Evc3RhbmRhcmQvZGhhbGwuYWJuZiNMMzU5XG4gICAga2V5d29yZDpcbiAgICAgIC9cXGIoPzphc3xhc3NlcnR8ZWxzZXxmb3JhbGx8aWZ8aW58bGV0fG1lcmdlfG1pc3Npbmd8dGhlbnx0b01hcHx1c2luZ3x3aXRoKVxcYnxcXHUyMjAwLyxcbiAgICBidWlsdGluOiAvXFxiKD86Tm9uZXxTb21lKVxcYi8sXG4gICAgYm9vbGVhbjogL1xcYig/OkZhbHNlfFRydWUpXFxiLyxcbiAgICBudW1iZXI6XG4gICAgICAvXFxiTmFOXFxifC0/XFxiSW5maW5pdHlcXGJ8WystXT9cXGIoPzoweFtcXGRhLWZBLUZdK3xcXGQrKD86XFwuXFxkKyk/KD86ZVsrLV0/XFxkKyk/KVxcYi8sXG4gICAgb3BlcmF0b3I6XG4gICAgICAvXFwvXFxcXHxcXC9cXC9cXFxcXFxcXHwmJnxcXHxcXHx8PT09fFshPV09fFxcL1xcL3wtPnxcXCtcXCt8Ojp8WysqI0A9Oj88PnxcXFxcXFx1MjIyN1xcdTJhNTNcXHUyMjYxXFx1MmFmZFxcdTAzYmJcXHUyMTkyXS8sXG4gICAgcHVuY3R1YXRpb246IC9cXC5cXC58W3t9XFxbXFxdKCksLi9dLyxcbiAgICAvLyB3ZSdsbCBqdXN0IGFzc3VtZSB0aGF0IGV2ZXJ5IGNhcGl0YWwgd29yZCBsZWZ0IGlzIGEgdHlwZSBuYW1lXG4gICAgJ2NsYXNzLW5hbWUnOiAvXFxiW0EtWl1cXHcqXFxiL1xuICB9XG4gIFByaXNtLmxhbmd1YWdlcy5kaGFsbC5zdHJpbmcuaW5zaWRlLmludGVycG9sYXRpb24uaW5zaWRlLmV4cHJlc3Npb24uaW5zaWRlID1cbiAgICBQcmlzbS5sYW5ndWFnZXMuZGhhbGxcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiZGhhbGwiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImxhbmd1YWdlcyIsImNvbW1lbnQiLCJzdHJpbmciLCJwYXR0ZXJuIiwiZ3JlZWR5IiwiaW5zaWRlIiwiaW50ZXJwb2xhdGlvbiIsImV4cHJlc3Npb24iLCJsb29rYmVoaW5kIiwiYWxpYXMiLCJwdW5jdHVhdGlvbiIsImxhYmVsIiwidXJsIiwiZW52Iiwib3BlcmF0b3IiLCJ2YXJpYWJsZSIsImhhc2giLCJudW1iZXIiLCJrZXl3b3JkIiwiYnVpbHRpbiJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/dhall.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/diff.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/diff.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = diff;\ndiff.displayName = 'diff';\ndiff.aliases = [];\nfunction diff(Prism) {\n  ;\n  (function (Prism) {\n    Prism.languages.diff = {\n      coord: [\n      // Match all kinds of coord lines (prefixed by \"+++\", \"---\" or \"***\").\n      /^(?:\\*{3}|-{3}|\\+{3}).*$/m,\n      // Match \"@@ ... @@\" coord lines in unified diff.\n      /^@@.*@@$/m,\n      // Match coord lines in normal diff (starts with a number).\n      /^\\d.*$/m] // deleted, inserted, unchanged, diff\n    };\n    /**\n     * A map from the name of a block to its line prefix.\n     *\n     * @type {Object<string, string>}\n     */\n    var PREFIXES = {\n      'deleted-sign': '-',\n      'deleted-arrow': '<',\n      'inserted-sign': '+',\n      'inserted-arrow': '>',\n      unchanged: ' ',\n      diff: '!'\n    }; // add a token for each prefix\n    Object.keys(PREFIXES).forEach(function (name) {\n      var prefix = PREFIXES[name];\n      var alias = [];\n      if (!/^\\w+$/.test(name)) {\n        // \"deleted-sign\" -> \"deleted\"\n        alias.push(/\\w+/.exec(name)[0]);\n      }\n      if (name === 'diff') {\n        alias.push('bold');\n      }\n      Prism.languages.diff[name] = {\n        pattern: RegExp('^(?:[' + prefix + '].*(?:\\r\\n?|\\n|(?![\\\\s\\\\S])))+', 'm'),\n        alias: alias,\n        inside: {\n          line: {\n            pattern: /(.)(?=[\\s\\S]).*(?:\\r\\n?|\\n)?/,\n            lookbehind: true\n          },\n          prefix: {\n            pattern: /[\\s\\S]/,\n            alias: /\\w+/.exec(name)[0]\n          }\n        }\n      };\n    }); // make prefixes available to Diff plugin\n    Object.defineProperty(Prism.languages.diff, 'PREFIXES', {\n      value: PREFIXES\n    });\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvZGlmZi5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLElBQUk7QUFDckJBLElBQUksQ0FBQ0MsV0FBVyxHQUFHLE1BQU07QUFDekJELElBQUksQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDakIsU0FBU0YsSUFBSUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ25CO0VBQUMsQ0FBQyxVQUFVQSxLQUFLLEVBQUU7SUFDakJBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixJQUFJLEdBQUc7TUFDckJLLEtBQUssRUFBRTtNQUNMO01BQ0EsMkJBQTJCO01BQUU7TUFDN0IsV0FBVztNQUFFO01BQ2IsU0FBUyxDQUNWLENBQUM7SUFDSixDQUFDO0lBQ0Q7QUFDSjtBQUNBO0FBQ0E7QUFDQTtJQUNJLElBQUlDLFFBQVEsR0FBRztNQUNiLGNBQWMsRUFBRSxHQUFHO01BQ25CLGVBQWUsRUFBRSxHQUFHO01BQ3BCLGVBQWUsRUFBRSxHQUFHO01BQ3BCLGdCQUFnQixFQUFFLEdBQUc7TUFDckJDLFNBQVMsRUFBRSxHQUFHO01BQ2RQLElBQUksRUFBRTtJQUNSLENBQUMsRUFBQztJQUNGUSxNQUFNLENBQUNDLElBQUksQ0FBQ0gsUUFBUSxDQUFDLENBQUNJLE9BQU8sQ0FBQyxVQUFVQyxJQUFJLEVBQUU7TUFDNUMsSUFBSUMsTUFBTSxHQUFHTixRQUFRLENBQUNLLElBQUksQ0FBQztNQUMzQixJQUFJRSxLQUFLLEdBQUcsRUFBRTtNQUNkLElBQUksQ0FBQyxPQUFPLENBQUNDLElBQUksQ0FBQ0gsSUFBSSxDQUFDLEVBQUU7UUFDdkI7UUFDQUUsS0FBSyxDQUFDRSxJQUFJLENBQUMsS0FBSyxDQUFDQyxJQUFJLENBQUNMLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO01BQ2pDO01BQ0EsSUFBSUEsSUFBSSxLQUFLLE1BQU0sRUFBRTtRQUNuQkUsS0FBSyxDQUFDRSxJQUFJLENBQUMsTUFBTSxDQUFDO01BQ3BCO01BQ0FaLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixJQUFJLENBQUNXLElBQUksQ0FBQyxHQUFHO1FBQzNCTSxPQUFPLEVBQUVDLE1BQU0sQ0FDYixPQUFPLEdBQUdOLE1BQU0sR0FBRyxnQ0FBZ0MsRUFDbkQsR0FDRixDQUFDO1FBQ0RDLEtBQUssRUFBRUEsS0FBSztRQUNaTSxNQUFNLEVBQUU7VUFDTkMsSUFBSSxFQUFFO1lBQ0pILE9BQU8sRUFBRSw4QkFBOEI7WUFDdkNJLFVBQVUsRUFBRTtVQUNkLENBQUM7VUFDRFQsTUFBTSxFQUFFO1lBQ05LLE9BQU8sRUFBRSxRQUFRO1lBQ2pCSixLQUFLLEVBQUUsS0FBSyxDQUFDRyxJQUFJLENBQUNMLElBQUksQ0FBQyxDQUFDLENBQUM7VUFDM0I7UUFDRjtNQUNGLENBQUM7SUFDSCxDQUFDLENBQUMsRUFBQztJQUNISCxNQUFNLENBQUNjLGNBQWMsQ0FBQ25CLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixJQUFJLEVBQUUsVUFBVSxFQUFFO01BQ3REdUIsS0FBSyxFQUFFakI7SUFDVCxDQUFDLENBQUM7RUFDSixDQUFDLEVBQUVILEtBQUssQ0FBQztBQUNYIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcZGlmZi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBkaWZmXG5kaWZmLmRpc3BsYXlOYW1lID0gJ2RpZmYnXG5kaWZmLmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24gZGlmZihQcmlzbSkge1xuICA7KGZ1bmN0aW9uIChQcmlzbSkge1xuICAgIFByaXNtLmxhbmd1YWdlcy5kaWZmID0ge1xuICAgICAgY29vcmQ6IFtcbiAgICAgICAgLy8gTWF0Y2ggYWxsIGtpbmRzIG9mIGNvb3JkIGxpbmVzIChwcmVmaXhlZCBieSBcIisrK1wiLCBcIi0tLVwiIG9yIFwiKioqXCIpLlxuICAgICAgICAvXig/OlxcKnszfXwtezN9fFxcK3szfSkuKiQvbSwgLy8gTWF0Y2ggXCJAQCAuLi4gQEBcIiBjb29yZCBsaW5lcyBpbiB1bmlmaWVkIGRpZmYuXG4gICAgICAgIC9eQEAuKkBAJC9tLCAvLyBNYXRjaCBjb29yZCBsaW5lcyBpbiBub3JtYWwgZGlmZiAoc3RhcnRzIHdpdGggYSBudW1iZXIpLlxuICAgICAgICAvXlxcZC4qJC9tXG4gICAgICBdIC8vIGRlbGV0ZWQsIGluc2VydGVkLCB1bmNoYW5nZWQsIGRpZmZcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBtYXAgZnJvbSB0aGUgbmFtZSBvZiBhIGJsb2NrIHRvIGl0cyBsaW5lIHByZWZpeC5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtPYmplY3Q8c3RyaW5nLCBzdHJpbmc+fVxuICAgICAqL1xuICAgIHZhciBQUkVGSVhFUyA9IHtcbiAgICAgICdkZWxldGVkLXNpZ24nOiAnLScsXG4gICAgICAnZGVsZXRlZC1hcnJvdyc6ICc8JyxcbiAgICAgICdpbnNlcnRlZC1zaWduJzogJysnLFxuICAgICAgJ2luc2VydGVkLWFycm93JzogJz4nLFxuICAgICAgdW5jaGFuZ2VkOiAnICcsXG4gICAgICBkaWZmOiAnISdcbiAgICB9IC8vIGFkZCBhIHRva2VuIGZvciBlYWNoIHByZWZpeFxuICAgIE9iamVjdC5rZXlzKFBSRUZJWEVTKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICB2YXIgcHJlZml4ID0gUFJFRklYRVNbbmFtZV1cbiAgICAgIHZhciBhbGlhcyA9IFtdXG4gICAgICBpZiAoIS9eXFx3KyQvLnRlc3QobmFtZSkpIHtcbiAgICAgICAgLy8gXCJkZWxldGVkLXNpZ25cIiAtPiBcImRlbGV0ZWRcIlxuICAgICAgICBhbGlhcy5wdXNoKC9cXHcrLy5leGVjKG5hbWUpWzBdKVxuICAgICAgfVxuICAgICAgaWYgKG5hbWUgPT09ICdkaWZmJykge1xuICAgICAgICBhbGlhcy5wdXNoKCdib2xkJylcbiAgICAgIH1cbiAgICAgIFByaXNtLmxhbmd1YWdlcy5kaWZmW25hbWVdID0ge1xuICAgICAgICBwYXR0ZXJuOiBSZWdFeHAoXG4gICAgICAgICAgJ14oPzpbJyArIHByZWZpeCArICddLiooPzpcXHJcXG4/fFxcbnwoPyFbXFxcXHNcXFxcU10pKSkrJyxcbiAgICAgICAgICAnbSdcbiAgICAgICAgKSxcbiAgICAgICAgYWxpYXM6IGFsaWFzLFxuICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICBsaW5lOiB7XG4gICAgICAgICAgICBwYXR0ZXJuOiAvKC4pKD89W1xcc1xcU10pLiooPzpcXHJcXG4/fFxcbik/LyxcbiAgICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIHByZWZpeDoge1xuICAgICAgICAgICAgcGF0dGVybjogL1tcXHNcXFNdLyxcbiAgICAgICAgICAgIGFsaWFzOiAvXFx3Ky8uZXhlYyhuYW1lKVswXVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pIC8vIG1ha2UgcHJlZml4ZXMgYXZhaWxhYmxlIHRvIERpZmYgcGx1Z2luXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFByaXNtLmxhbmd1YWdlcy5kaWZmLCAnUFJFRklYRVMnLCB7XG4gICAgICB2YWx1ZTogUFJFRklYRVNcbiAgICB9KVxuICB9KShQcmlzbSlcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiZGlmZiIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwiY29vcmQiLCJQUkVGSVhFUyIsInVuY2hhbmdlZCIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwibmFtZSIsInByZWZpeCIsImFsaWFzIiwidGVzdCIsInB1c2giLCJleGVjIiwicGF0dGVybiIsIlJlZ0V4cCIsImluc2lkZSIsImxpbmUiLCJsb29rYmVoaW5kIiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/diff.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/django.js":
/*!***********************************************!*\
  !*** ./node_modules/refractor/lang/django.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar refractorMarkupTemplating = __webpack_require__(/*! ./markup-templating.js */ \"(ssr)/./node_modules/refractor/lang/markup-templating.js\");\nmodule.exports = django;\ndjango.displayName = 'django';\ndjango.aliases = ['jinja2'];\nfunction django(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  // Django/Jinja2 syntax definition for Prism.js <http://prismjs.com> syntax highlighter.\n  // Mostly it works OK but can paint code incorrectly on complex html/template tag combinations.\n  ;\n  (function (Prism) {\n    Prism.languages.django = {\n      comment: /^\\{#[\\s\\S]*?#\\}$/,\n      tag: {\n        pattern: /(^\\{%[+-]?\\s*)\\w+/,\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      delimiter: {\n        pattern: /^\\{[{%][+-]?|[+-]?[}%]\\}$/,\n        alias: 'punctuation'\n      },\n      string: {\n        pattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: true\n      },\n      filter: {\n        pattern: /(\\|)\\w+/,\n        lookbehind: true,\n        alias: 'function'\n      },\n      test: {\n        pattern: /(\\bis\\s+(?:not\\s+)?)(?!not\\b)\\w+/,\n        lookbehind: true,\n        alias: 'function'\n      },\n      \"function\": /\\b[a-z_]\\w+(?=\\s*\\()/i,\n      keyword: /\\b(?:and|as|by|else|for|if|import|in|is|loop|not|or|recursive|with|without)\\b/,\n      operator: /[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,\n      number: /\\b\\d+(?:\\.\\d+)?\\b/,\n      \"boolean\": /[Ff]alse|[Nn]one|[Tt]rue/,\n      variable: /\\b\\w+\\b/,\n      punctuation: /[{}[\\](),.:;]/\n    };\n    var pattern = /\\{\\{[\\s\\S]*?\\}\\}|\\{%[\\s\\S]*?%\\}|\\{#[\\s\\S]*?#\\}/g;\n    var markupTemplating = Prism.languages['markup-templating'];\n    Prism.hooks.add('before-tokenize', function (env) {\n      markupTemplating.buildPlaceholders(env, 'django', pattern);\n    });\n    Prism.hooks.add('after-tokenize', function (env) {\n      markupTemplating.tokenizePlaceholders(env, 'django');\n    }); // Add an Jinja2 alias\n    Prism.languages.jinja2 = Prism.languages.django;\n    Prism.hooks.add('before-tokenize', function (env) {\n      markupTemplating.buildPlaceholders(env, 'jinja2', pattern);\n    });\n    Prism.hooks.add('after-tokenize', function (env) {\n      markupTemplating.tokenizePlaceholders(env, 'jinja2');\n    });\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvZGphbmdvLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUNaLElBQUlBLHlCQUF5QixHQUFHQyxtQkFBTyxDQUFDLHdGQUF3QixDQUFDO0FBQ2pFQyxNQUFNLENBQUNDLE9BQU8sR0FBR0MsTUFBTTtBQUN2QkEsTUFBTSxDQUFDQyxXQUFXLEdBQUcsUUFBUTtBQUM3QkQsTUFBTSxDQUFDRSxPQUFPLEdBQUcsQ0FBQyxRQUFRLENBQUM7QUFDM0IsU0FBU0YsTUFBTUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ3JCQSxLQUFLLENBQUNDLFFBQVEsQ0FBQ1IseUJBQXlCO0VBQ3hDO0VBQ0E7RUFBQTtFQUNDLENBQUMsVUFBVU8sS0FBSyxFQUFFO0lBQ2pCQSxLQUFLLENBQUNFLFNBQVMsQ0FBQ0wsTUFBTSxHQUFHO01BQ3ZCTSxPQUFPLEVBQUUsa0JBQWtCO01BQzNCQyxHQUFHLEVBQUU7UUFDSEMsT0FBTyxFQUFFLG1CQUFtQjtRQUM1QkMsVUFBVSxFQUFFLElBQUk7UUFDaEJDLEtBQUssRUFBRTtNQUNULENBQUM7TUFDREMsU0FBUyxFQUFFO1FBQ1RILE9BQU8sRUFBRSwyQkFBMkI7UUFDcENFLEtBQUssRUFBRTtNQUNULENBQUM7TUFDREUsTUFBTSxFQUFFO1FBQ05KLE9BQU8sRUFBRSxpQ0FBaUM7UUFDMUNLLE1BQU0sRUFBRTtNQUNWLENBQUM7TUFDREMsTUFBTSxFQUFFO1FBQ05OLE9BQU8sRUFBRSxTQUFTO1FBQ2xCQyxVQUFVLEVBQUUsSUFBSTtRQUNoQkMsS0FBSyxFQUFFO01BQ1QsQ0FBQztNQUNESyxJQUFJLEVBQUU7UUFDSlAsT0FBTyxFQUFFLGtDQUFrQztRQUMzQ0MsVUFBVSxFQUFFLElBQUk7UUFDaEJDLEtBQUssRUFBRTtNQUNULENBQUM7TUFDRCxZQUFVLHVCQUF1QjtNQUNqQ00sT0FBTyxFQUNMLCtFQUErRTtNQUNqRkMsUUFBUSxFQUFFLG1EQUFtRDtNQUM3REMsTUFBTSxFQUFFLG1CQUFtQjtNQUMzQixXQUFTLDBCQUEwQjtNQUNuQ0MsUUFBUSxFQUFFLFNBQVM7TUFDbkJDLFdBQVcsRUFBRTtJQUNmLENBQUM7SUFDRCxJQUFJWixPQUFPLEdBQUcsaURBQWlEO0lBQy9ELElBQUlhLGdCQUFnQixHQUFHbEIsS0FBSyxDQUFDRSxTQUFTLENBQUMsbUJBQW1CLENBQUM7SUFDM0RGLEtBQUssQ0FBQ21CLEtBQUssQ0FBQ0MsR0FBRyxDQUFDLGlCQUFpQixFQUFFLFVBQVVDLEdBQUcsRUFBRTtNQUNoREgsZ0JBQWdCLENBQUNJLGlCQUFpQixDQUFDRCxHQUFHLEVBQUUsUUFBUSxFQUFFaEIsT0FBTyxDQUFDO0lBQzVELENBQUMsQ0FBQztJQUNGTCxLQUFLLENBQUNtQixLQUFLLENBQUNDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxVQUFVQyxHQUFHLEVBQUU7TUFDL0NILGdCQUFnQixDQUFDSyxvQkFBb0IsQ0FBQ0YsR0FBRyxFQUFFLFFBQVEsQ0FBQztJQUN0RCxDQUFDLENBQUMsRUFBQztJQUNIckIsS0FBSyxDQUFDRSxTQUFTLENBQUNzQixNQUFNLEdBQUd4QixLQUFLLENBQUNFLFNBQVMsQ0FBQ0wsTUFBTTtJQUMvQ0csS0FBSyxDQUFDbUIsS0FBSyxDQUFDQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsVUFBVUMsR0FBRyxFQUFFO01BQ2hESCxnQkFBZ0IsQ0FBQ0ksaUJBQWlCLENBQUNELEdBQUcsRUFBRSxRQUFRLEVBQUVoQixPQUFPLENBQUM7SUFDNUQsQ0FBQyxDQUFDO0lBQ0ZMLEtBQUssQ0FBQ21CLEtBQUssQ0FBQ0MsR0FBRyxDQUFDLGdCQUFnQixFQUFFLFVBQVVDLEdBQUcsRUFBRTtNQUMvQ0gsZ0JBQWdCLENBQUNLLG9CQUFvQixDQUFDRixHQUFHLEVBQUUsUUFBUSxDQUFDO0lBQ3RELENBQUMsQ0FBQztFQUNKLENBQUMsRUFBRXJCLEtBQUssQ0FBQztBQUNYIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcZGphbmdvLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xudmFyIHJlZnJhY3Rvck1hcmt1cFRlbXBsYXRpbmcgPSByZXF1aXJlKCcuL21hcmt1cC10ZW1wbGF0aW5nLmpzJylcbm1vZHVsZS5leHBvcnRzID0gZGphbmdvXG5kamFuZ28uZGlzcGxheU5hbWUgPSAnZGphbmdvJ1xuZGphbmdvLmFsaWFzZXMgPSBbJ2ppbmphMiddXG5mdW5jdGlvbiBkamFuZ28oUHJpc20pIHtcbiAgUHJpc20ucmVnaXN0ZXIocmVmcmFjdG9yTWFya3VwVGVtcGxhdGluZylcbiAgLy8gRGphbmdvL0ppbmphMiBzeW50YXggZGVmaW5pdGlvbiBmb3IgUHJpc20uanMgPGh0dHA6Ly9wcmlzbWpzLmNvbT4gc3ludGF4IGhpZ2hsaWdodGVyLlxuICAvLyBNb3N0bHkgaXQgd29ya3MgT0sgYnV0IGNhbiBwYWludCBjb2RlIGluY29ycmVjdGx5IG9uIGNvbXBsZXggaHRtbC90ZW1wbGF0ZSB0YWcgY29tYmluYXRpb25zLlxuICA7KGZ1bmN0aW9uIChQcmlzbSkge1xuICAgIFByaXNtLmxhbmd1YWdlcy5kamFuZ28gPSB7XG4gICAgICBjb21tZW50OiAvXlxceyNbXFxzXFxTXSo/I1xcfSQvLFxuICAgICAgdGFnOiB7XG4gICAgICAgIHBhdHRlcm46IC8oXlxceyVbKy1dP1xccyopXFx3Ky8sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGFsaWFzOiAna2V5d29yZCdcbiAgICAgIH0sXG4gICAgICBkZWxpbWl0ZXI6IHtcbiAgICAgICAgcGF0dGVybjogL15cXHtbeyVdWystXT98WystXT9bfSVdXFx9JC8sXG4gICAgICAgIGFsaWFzOiAncHVuY3R1YXRpb24nXG4gICAgICB9LFxuICAgICAgc3RyaW5nOiB7XG4gICAgICAgIHBhdHRlcm46IC8oXCJ8JykoPzpcXFxcLnwoPyFcXDEpW15cXFxcXFxyXFxuXSkqXFwxLyxcbiAgICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgICB9LFxuICAgICAgZmlsdGVyOiB7XG4gICAgICAgIHBhdHRlcm46IC8oXFx8KVxcdysvLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICBhbGlhczogJ2Z1bmN0aW9uJ1xuICAgICAgfSxcbiAgICAgIHRlc3Q6IHtcbiAgICAgICAgcGF0dGVybjogLyhcXGJpc1xccysoPzpub3RcXHMrKT8pKD8hbm90XFxiKVxcdysvLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICBhbGlhczogJ2Z1bmN0aW9uJ1xuICAgICAgfSxcbiAgICAgIGZ1bmN0aW9uOiAvXFxiW2Etel9dXFx3Kyg/PVxccypcXCgpL2ksXG4gICAgICBrZXl3b3JkOlxuICAgICAgICAvXFxiKD86YW5kfGFzfGJ5fGVsc2V8Zm9yfGlmfGltcG9ydHxpbnxpc3xsb29wfG5vdHxvcnxyZWN1cnNpdmV8d2l0aHx3aXRob3V0KVxcYi8sXG4gICAgICBvcGVyYXRvcjogL1stKyU9XT0/fCE9fFxcKlxcKj89P3xcXC9cXC8/PT98PFs8PT5dP3w+Wz0+XT98WyZ8Xn5dLyxcbiAgICAgIG51bWJlcjogL1xcYlxcZCsoPzpcXC5cXGQrKT9cXGIvLFxuICAgICAgYm9vbGVhbjogL1tGZl1hbHNlfFtObl1vbmV8W1R0XXJ1ZS8sXG4gICAgICB2YXJpYWJsZTogL1xcYlxcdytcXGIvLFxuICAgICAgcHVuY3R1YXRpb246IC9be31bXFxdKCksLjo7XS9cbiAgICB9XG4gICAgdmFyIHBhdHRlcm4gPSAvXFx7XFx7W1xcc1xcU10qP1xcfVxcfXxcXHslW1xcc1xcU10qPyVcXH18XFx7I1tcXHNcXFNdKj8jXFx9L2dcbiAgICB2YXIgbWFya3VwVGVtcGxhdGluZyA9IFByaXNtLmxhbmd1YWdlc1snbWFya3VwLXRlbXBsYXRpbmcnXVxuICAgIFByaXNtLmhvb2tzLmFkZCgnYmVmb3JlLXRva2VuaXplJywgZnVuY3Rpb24gKGVudikge1xuICAgICAgbWFya3VwVGVtcGxhdGluZy5idWlsZFBsYWNlaG9sZGVycyhlbnYsICdkamFuZ28nLCBwYXR0ZXJuKVxuICAgIH0pXG4gICAgUHJpc20uaG9va3MuYWRkKCdhZnRlci10b2tlbml6ZScsIGZ1bmN0aW9uIChlbnYpIHtcbiAgICAgIG1hcmt1cFRlbXBsYXRpbmcudG9rZW5pemVQbGFjZWhvbGRlcnMoZW52LCAnZGphbmdvJylcbiAgICB9KSAvLyBBZGQgYW4gSmluamEyIGFsaWFzXG4gICAgUHJpc20ubGFuZ3VhZ2VzLmppbmphMiA9IFByaXNtLmxhbmd1YWdlcy5kamFuZ29cbiAgICBQcmlzbS5ob29rcy5hZGQoJ2JlZm9yZS10b2tlbml6ZScsIGZ1bmN0aW9uIChlbnYpIHtcbiAgICAgIG1hcmt1cFRlbXBsYXRpbmcuYnVpbGRQbGFjZWhvbGRlcnMoZW52LCAnamluamEyJywgcGF0dGVybilcbiAgICB9KVxuICAgIFByaXNtLmhvb2tzLmFkZCgnYWZ0ZXItdG9rZW5pemUnLCBmdW5jdGlvbiAoZW52KSB7XG4gICAgICBtYXJrdXBUZW1wbGF0aW5nLnRva2VuaXplUGxhY2Vob2xkZXJzKGVudiwgJ2ppbmphMicpXG4gICAgfSlcbiAgfSkoUHJpc20pXG59XG4iXSwibmFtZXMiOlsicmVmcmFjdG9yTWFya3VwVGVtcGxhdGluZyIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiZGphbmdvIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJyZWdpc3RlciIsImxhbmd1YWdlcyIsImNvbW1lbnQiLCJ0YWciLCJwYXR0ZXJuIiwibG9va2JlaGluZCIsImFsaWFzIiwiZGVsaW1pdGVyIiwic3RyaW5nIiwiZ3JlZWR5IiwiZmlsdGVyIiwidGVzdCIsImtleXdvcmQiLCJvcGVyYXRvciIsIm51bWJlciIsInZhcmlhYmxlIiwicHVuY3R1YXRpb24iLCJtYXJrdXBUZW1wbGF0aW5nIiwiaG9va3MiLCJhZGQiLCJlbnYiLCJidWlsZFBsYWNlaG9sZGVycyIsInRva2VuaXplUGxhY2Vob2xkZXJzIiwiamluamEyIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/django.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/dns-zone-file.js":
/*!******************************************************!*\
  !*** ./node_modules/refractor/lang/dns-zone-file.js ***!
  \******************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = dnsZoneFile;\ndnsZoneFile.displayName = 'dnsZoneFile';\ndnsZoneFile.aliases = [];\nfunction dnsZoneFile(Prism) {\n  Prism.languages['dns-zone-file'] = {\n    comment: /;.*/,\n    string: {\n      pattern: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n      greedy: true\n    },\n    variable: [{\n      pattern: /(^\\$ORIGIN[ \\t]+)\\S+/m,\n      lookbehind: true\n    }, {\n      pattern: /(^|\\s)@(?=\\s|$)/,\n      lookbehind: true\n    }],\n    keyword: /^\\$(?:INCLUDE|ORIGIN|TTL)(?=\\s|$)/m,\n    \"class\": {\n      // https://tools.ietf.org/html/rfc1035#page-13\n      pattern: /(^|\\s)(?:CH|CS|HS|IN)(?=\\s|$)/,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    type: {\n      // https://en.wikipedia.org/wiki/List_of_DNS_record_types\n      pattern: /(^|\\s)(?:A|A6|AAAA|AFSDB|APL|ATMA|CAA|CDNSKEY|CDS|CERT|CNAME|DHCID|DLV|DNAME|DNSKEY|DS|EID|GID|GPOS|HINFO|HIP|IPSECKEY|ISDN|KEY|KX|LOC|MAILA|MAILB|MB|MD|MF|MG|MINFO|MR|MX|NAPTR|NB|NBSTAT|NIMLOC|NINFO|NS|NSAP|NSAP-PTR|NSEC|NSEC3|NSEC3PARAM|NULL|NXT|OPENPGPKEY|PTR|PX|RKEY|RP|RRSIG|RT|SIG|SINK|SMIMEA|SOA|SPF|SRV|SSHFP|TA|TKEY|TLSA|TSIG|TXT|UID|UINFO|UNSPEC|URI|WKS|X25)(?=\\s|$)/,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    punctuation: /[()]/\n  };\n  Prism.languages['dns-zone'] = Prism.languages['dns-zone-file'];\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvZG5zLXpvbmUtZmlsZS5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLFdBQVc7QUFDNUJBLFdBQVcsQ0FBQ0MsV0FBVyxHQUFHLGFBQWE7QUFDdkNELFdBQVcsQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDeEIsU0FBU0YsV0FBV0EsQ0FBQ0csS0FBSyxFQUFFO0VBQzFCQSxLQUFLLENBQUNDLFNBQVMsQ0FBQyxlQUFlLENBQUMsR0FBRztJQUNqQ0MsT0FBTyxFQUFFLEtBQUs7SUFDZEMsTUFBTSxFQUFFO01BQ05DLE9BQU8sRUFBRSx1QkFBdUI7TUFDaENDLE1BQU0sRUFBRTtJQUNWLENBQUM7SUFDREMsUUFBUSxFQUFFLENBQ1I7TUFDRUYsT0FBTyxFQUFFLHVCQUF1QjtNQUNoQ0csVUFBVSxFQUFFO0lBQ2QsQ0FBQyxFQUNEO01BQ0VILE9BQU8sRUFBRSxpQkFBaUI7TUFDMUJHLFVBQVUsRUFBRTtJQUNkLENBQUMsQ0FDRjtJQUNEQyxPQUFPLEVBQUUsb0NBQW9DO0lBQzdDLFNBQU87TUFDTDtNQUNBSixPQUFPLEVBQUUsK0JBQStCO01BQ3hDRyxVQUFVLEVBQUUsSUFBSTtNQUNoQkUsS0FBSyxFQUFFO0lBQ1QsQ0FBQztJQUNEQyxJQUFJLEVBQUU7TUFDSjtNQUNBTixPQUFPLEVBQ0wsMFhBQTBYO01BQzVYRyxVQUFVLEVBQUUsSUFBSTtNQUNoQkUsS0FBSyxFQUFFO0lBQ1QsQ0FBQztJQUNERSxXQUFXLEVBQUU7RUFDZixDQUFDO0VBQ0RYLEtBQUssQ0FBQ0MsU0FBUyxDQUFDLFVBQVUsQ0FBQyxHQUFHRCxLQUFLLENBQUNDLFNBQVMsQ0FBQyxlQUFlLENBQUM7QUFDaEUiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxkbnMtem9uZS1maWxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRuc1pvbmVGaWxlXG5kbnNab25lRmlsZS5kaXNwbGF5TmFtZSA9ICdkbnNab25lRmlsZSdcbmRuc1pvbmVGaWxlLmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24gZG5zWm9uZUZpbGUoUHJpc20pIHtcbiAgUHJpc20ubGFuZ3VhZ2VzWydkbnMtem9uZS1maWxlJ10gPSB7XG4gICAgY29tbWVudDogLzsuKi8sXG4gICAgc3RyaW5nOiB7XG4gICAgICBwYXR0ZXJuOiAvXCIoPzpcXFxcLnxbXlwiXFxcXFxcclxcbl0pKlwiLyxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgdmFyaWFibGU6IFtcbiAgICAgIHtcbiAgICAgICAgcGF0dGVybjogLyheXFwkT1JJR0lOWyBcXHRdKylcXFMrL20sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHBhdHRlcm46IC8oXnxcXHMpQCg/PVxcc3wkKS8sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH1cbiAgICBdLFxuICAgIGtleXdvcmQ6IC9eXFwkKD86SU5DTFVERXxPUklHSU58VFRMKSg/PVxcc3wkKS9tLFxuICAgIGNsYXNzOiB7XG4gICAgICAvLyBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMTAzNSNwYWdlLTEzXG4gICAgICBwYXR0ZXJuOiAvKF58XFxzKSg/OkNIfENTfEhTfElOKSg/PVxcc3wkKS8sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgYWxpYXM6ICdrZXl3b3JkJ1xuICAgIH0sXG4gICAgdHlwZToge1xuICAgICAgLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGlzdF9vZl9ETlNfcmVjb3JkX3R5cGVzXG4gICAgICBwYXR0ZXJuOlxuICAgICAgICAvKF58XFxzKSg/OkF8QTZ8QUFBQXxBRlNEQnxBUEx8QVRNQXxDQUF8Q0ROU0tFWXxDRFN8Q0VSVHxDTkFNRXxESENJRHxETFZ8RE5BTUV8RE5TS0VZfERTfEVJRHxHSUR8R1BPU3xISU5GT3xISVB8SVBTRUNLRVl8SVNETnxLRVl8S1h8TE9DfE1BSUxBfE1BSUxCfE1CfE1EfE1GfE1HfE1JTkZPfE1SfE1YfE5BUFRSfE5CfE5CU1RBVHxOSU1MT0N8TklORk98TlN8TlNBUHxOU0FQLVBUUnxOU0VDfE5TRUMzfE5TRUMzUEFSQU18TlVMTHxOWFR8T1BFTlBHUEtFWXxQVFJ8UFh8UktFWXxSUHxSUlNJR3xSVHxTSUd8U0lOS3xTTUlNRUF8U09BfFNQRnxTUlZ8U1NIRlB8VEF8VEtFWXxUTFNBfFRTSUd8VFhUfFVJRHxVSU5GT3xVTlNQRUN8VVJJfFdLU3xYMjUpKD89XFxzfCQpLyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBhbGlhczogJ2tleXdvcmQnXG4gICAgfSxcbiAgICBwdW5jdHVhdGlvbjogL1soKV0vXG4gIH1cbiAgUHJpc20ubGFuZ3VhZ2VzWydkbnMtem9uZSddID0gUHJpc20ubGFuZ3VhZ2VzWydkbnMtem9uZS1maWxlJ11cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiZG5zWm9uZUZpbGUiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImxhbmd1YWdlcyIsImNvbW1lbnQiLCJzdHJpbmciLCJwYXR0ZXJuIiwiZ3JlZWR5IiwidmFyaWFibGUiLCJsb29rYmVoaW5kIiwia2V5d29yZCIsImFsaWFzIiwidHlwZSIsInB1bmN0dWF0aW9uIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/dns-zone-file.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/docker.js":
/*!***********************************************!*\
  !*** ./node_modules/refractor/lang/docker.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = docker;\ndocker.displayName = 'docker';\ndocker.aliases = ['dockerfile'];\nfunction docker(Prism) {\n  ;\n  (function (Prism) {\n    // Many of the following regexes will contain negated lookaheads like `[ \\t]+(?![ \\t])`. This is a trick to ensure\n    // that quantifiers behave *atomically*. Atomic quantifiers are necessary to prevent exponential backtracking.\n    var spaceAfterBackSlash = /\\\\[\\r\\n](?:\\s|\\\\[\\r\\n]|#.*(?!.))*(?![\\s#]|\\\\[\\r\\n])/.source; // At least one space, comment, or line break\n    var space = /(?:[ \\t]+(?![ \\t])(?:<SP_BS>)?|<SP_BS>)/.source.replace(/<SP_BS>/g, function () {\n      return spaceAfterBackSlash;\n    });\n    var string = /\"(?:[^\"\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\"|'(?:[^'\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*'/.source;\n    var option = /--[\\w-]+=(?:<STR>|(?![\"'])(?:[^\\s\\\\]|\\\\.)+)/.source.replace(/<STR>/g, function () {\n      return string;\n    });\n    var stringRule = {\n      pattern: RegExp(string),\n      greedy: true\n    };\n    var commentRule = {\n      pattern: /(^[ \\t]*)#.*/m,\n      lookbehind: true,\n      greedy: true\n    };\n    /**\n     * @param {string} source\n     * @param {string} flags\n     * @returns {RegExp}\n     */\n    function re(source, flags) {\n      source = source.replace(/<OPT>/g, function () {\n        return option;\n      }).replace(/<SP>/g, function () {\n        return space;\n      });\n      return RegExp(source, flags);\n    }\n    Prism.languages.docker = {\n      instruction: {\n        pattern: /(^[ \\t]*)(?:ADD|ARG|CMD|COPY|ENTRYPOINT|ENV|EXPOSE|FROM|HEALTHCHECK|LABEL|MAINTAINER|ONBUILD|RUN|SHELL|STOPSIGNAL|USER|VOLUME|WORKDIR)(?=\\s)(?:\\\\.|[^\\r\\n\\\\])*(?:\\\\$(?:\\s|#.*$)*(?![\\s#])(?:\\\\.|[^\\r\\n\\\\])*)*/im,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          options: {\n            pattern: re(/(^(?:ONBUILD<SP>)?\\w+<SP>)<OPT>(?:<SP><OPT>)*/.source, 'i'),\n            lookbehind: true,\n            greedy: true,\n            inside: {\n              property: {\n                pattern: /(^|\\s)--[\\w-]+/,\n                lookbehind: true\n              },\n              string: [stringRule, {\n                pattern: /(=)(?![\"'])(?:[^\\s\\\\]|\\\\.)+/,\n                lookbehind: true\n              }],\n              operator: /\\\\$/m,\n              punctuation: /=/\n            }\n          },\n          keyword: [{\n            // https://docs.docker.com/engine/reference/builder/#healthcheck\n            pattern: re(/(^(?:ONBUILD<SP>)?HEALTHCHECK<SP>(?:<OPT><SP>)*)(?:CMD|NONE)\\b/.source, 'i'),\n            lookbehind: true,\n            greedy: true\n          }, {\n            // https://docs.docker.com/engine/reference/builder/#from\n            pattern: re(/(^(?:ONBUILD<SP>)?FROM<SP>(?:<OPT><SP>)*(?!--)[^ \\t\\\\]+<SP>)AS/.source, 'i'),\n            lookbehind: true,\n            greedy: true\n          }, {\n            // https://docs.docker.com/engine/reference/builder/#onbuild\n            pattern: re(/(^ONBUILD<SP>)\\w+/.source, 'i'),\n            lookbehind: true,\n            greedy: true\n          }, {\n            pattern: /^\\w+/,\n            greedy: true\n          }],\n          comment: commentRule,\n          string: stringRule,\n          variable: /\\$(?:\\w+|\\{[^{}\"'\\\\]*\\})/,\n          operator: /\\\\$/m\n        }\n      },\n      comment: commentRule\n    };\n    Prism.languages.dockerfile = Prism.languages.docker;\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/docker.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/dot.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/dot.js ***!
  \********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = dot;\ndot.displayName = 'dot';\ndot.aliases = ['gv'];\nfunction dot(Prism) {\n  // https://www.graphviz.org/doc/info/lang.html\n  ;\n  (function (Prism) {\n    var ID = '(?:' + [\n    // an identifier\n    /[a-zA-Z_\\x80-\\uFFFF][\\w\\x80-\\uFFFF]*/.source,\n    // a number\n    /-?(?:\\.\\d+|\\d+(?:\\.\\d*)?)/.source,\n    // a double-quoted string\n    /\"[^\"\\\\]*(?:\\\\[\\s\\S][^\"\\\\]*)*\"/.source,\n    // HTML-like string\n    /<(?:[^<>]|(?!<!--)<(?:[^<>\"']|\"[^\"]*\"|'[^']*')+>|<!--(?:[^-]|-(?!->))*-->)*>/.source].join('|') + ')';\n    var IDInside = {\n      markup: {\n        pattern: /(^<)[\\s\\S]+(?=>$)/,\n        lookbehind: true,\n        alias: ['language-markup', 'language-html', 'language-xml'],\n        inside: Prism.languages.markup\n      }\n    };\n    /**\n     * @param {string} source\n     * @param {string} flags\n     * @returns {RegExp}\n     */\n    function withID(source, flags) {\n      return RegExp(source.replace(/<ID>/g, function () {\n        return ID;\n      }), flags);\n    }\n    Prism.languages.dot = {\n      comment: {\n        pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/|^#.*/m,\n        greedy: true\n      },\n      'graph-name': {\n        pattern: withID(/(\\b(?:digraph|graph|subgraph)[ \\t\\r\\n]+)<ID>/.source, 'i'),\n        lookbehind: true,\n        greedy: true,\n        alias: 'class-name',\n        inside: IDInside\n      },\n      'attr-value': {\n        pattern: withID(/(=[ \\t\\r\\n]*)<ID>/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: IDInside\n      },\n      'attr-name': {\n        pattern: withID(/([\\[;, \\t\\r\\n])<ID>(?=[ \\t\\r\\n]*=)/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: IDInside\n      },\n      keyword: /\\b(?:digraph|edge|graph|node|strict|subgraph)\\b/i,\n      'compass-point': {\n        pattern: /(:[ \\t\\r\\n]*)(?:[ewc_]|[ns][ew]?)(?![\\w\\x80-\\uFFFF])/,\n        lookbehind: true,\n        alias: 'builtin'\n      },\n      node: {\n        pattern: withID(/(^|[^-.\\w\\x80-\\uFFFF\\\\])<ID>/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: IDInside\n      },\n      operator: /[=:]|-[->]/,\n      punctuation: /[\\[\\]{};,]/\n    };\n    Prism.languages.gv = Prism.languages.dot;\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvZG90LmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsR0FBRztBQUNwQkEsR0FBRyxDQUFDQyxXQUFXLEdBQUcsS0FBSztBQUN2QkQsR0FBRyxDQUFDRSxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUM7QUFDcEIsU0FBU0YsR0FBR0EsQ0FBQ0csS0FBSyxFQUFFO0VBQ2xCO0VBQ0E7RUFBQyxDQUFDLFVBQVVBLEtBQUssRUFBRTtJQUNqQixJQUFJQyxFQUFFLEdBQ0osS0FBSyxHQUNMO0lBQ0U7SUFDQSxzQ0FBc0MsQ0FBQ0MsTUFBTTtJQUFFO0lBQy9DLDJCQUEyQixDQUFDQSxNQUFNO0lBQUU7SUFDcEMsK0JBQStCLENBQUNBLE1BQU07SUFBRTtJQUN4Qyw4RUFBOEUsQ0FDM0VBLE1BQU0sQ0FDVixDQUFDQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQ1gsR0FBRztJQUNMLElBQUlDLFFBQVEsR0FBRztNQUNiQyxNQUFNLEVBQUU7UUFDTkMsT0FBTyxFQUFFLG1CQUFtQjtRQUM1QkMsVUFBVSxFQUFFLElBQUk7UUFDaEJDLEtBQUssRUFBRSxDQUFDLGlCQUFpQixFQUFFLGVBQWUsRUFBRSxjQUFjLENBQUM7UUFDM0RDLE1BQU0sRUFBRVQsS0FBSyxDQUFDVSxTQUFTLENBQUNMO01BQzFCO0lBQ0YsQ0FBQztJQUNEO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7SUFDSSxTQUFTTSxNQUFNQSxDQUFDVCxNQUFNLEVBQUVVLEtBQUssRUFBRTtNQUM3QixPQUFPQyxNQUFNLENBQ1hYLE1BQU0sQ0FBQ1ksT0FBTyxDQUFDLE9BQU8sRUFBRSxZQUFZO1FBQ2xDLE9BQU9iLEVBQUU7TUFDWCxDQUFDLENBQUMsRUFDRlcsS0FDRixDQUFDO0lBQ0g7SUFDQVosS0FBSyxDQUFDVSxTQUFTLENBQUNiLEdBQUcsR0FBRztNQUNwQmtCLE9BQU8sRUFBRTtRQUNQVCxPQUFPLEVBQUUsK0JBQStCO1FBQ3hDVSxNQUFNLEVBQUU7TUFDVixDQUFDO01BQ0QsWUFBWSxFQUFFO1FBQ1pWLE9BQU8sRUFBRUssTUFBTSxDQUNiLDhDQUE4QyxDQUFDVCxNQUFNLEVBQ3JELEdBQ0YsQ0FBQztRQUNESyxVQUFVLEVBQUUsSUFBSTtRQUNoQlMsTUFBTSxFQUFFLElBQUk7UUFDWlIsS0FBSyxFQUFFLFlBQVk7UUFDbkJDLE1BQU0sRUFBRUw7TUFDVixDQUFDO01BQ0QsWUFBWSxFQUFFO1FBQ1pFLE9BQU8sRUFBRUssTUFBTSxDQUFDLG1CQUFtQixDQUFDVCxNQUFNLENBQUM7UUFDM0NLLFVBQVUsRUFBRSxJQUFJO1FBQ2hCUyxNQUFNLEVBQUUsSUFBSTtRQUNaUCxNQUFNLEVBQUVMO01BQ1YsQ0FBQztNQUNELFdBQVcsRUFBRTtRQUNYRSxPQUFPLEVBQUVLLE1BQU0sQ0FBQyxvQ0FBb0MsQ0FBQ1QsTUFBTSxDQUFDO1FBQzVESyxVQUFVLEVBQUUsSUFBSTtRQUNoQlMsTUFBTSxFQUFFLElBQUk7UUFDWlAsTUFBTSxFQUFFTDtNQUNWLENBQUM7TUFDRGEsT0FBTyxFQUFFLGtEQUFrRDtNQUMzRCxlQUFlLEVBQUU7UUFDZlgsT0FBTyxFQUFFLHNEQUFzRDtRQUMvREMsVUFBVSxFQUFFLElBQUk7UUFDaEJDLEtBQUssRUFBRTtNQUNULENBQUM7TUFDRFUsSUFBSSxFQUFFO1FBQ0paLE9BQU8sRUFBRUssTUFBTSxDQUFDLDhCQUE4QixDQUFDVCxNQUFNLENBQUM7UUFDdERLLFVBQVUsRUFBRSxJQUFJO1FBQ2hCUyxNQUFNLEVBQUUsSUFBSTtRQUNaUCxNQUFNLEVBQUVMO01BQ1YsQ0FBQztNQUNEZSxRQUFRLEVBQUUsWUFBWTtNQUN0QkMsV0FBVyxFQUFFO0lBQ2YsQ0FBQztJQUNEcEIsS0FBSyxDQUFDVSxTQUFTLENBQUNXLEVBQUUsR0FBR3JCLEtBQUssQ0FBQ1UsU0FBUyxDQUFDYixHQUFHO0VBQzFDLENBQUMsRUFBRUcsS0FBSyxDQUFDO0FBQ1giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxkb3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gZG90XG5kb3QuZGlzcGxheU5hbWUgPSAnZG90J1xuZG90LmFsaWFzZXMgPSBbJ2d2J11cbmZ1bmN0aW9uIGRvdChQcmlzbSkge1xuICAvLyBodHRwczovL3d3dy5ncmFwaHZpei5vcmcvZG9jL2luZm8vbGFuZy5odG1sXG4gIDsoZnVuY3Rpb24gKFByaXNtKSB7XG4gICAgdmFyIElEID1cbiAgICAgICcoPzonICtcbiAgICAgIFtcbiAgICAgICAgLy8gYW4gaWRlbnRpZmllclxuICAgICAgICAvW2EtekEtWl9cXHg4MC1cXHVGRkZGXVtcXHdcXHg4MC1cXHVGRkZGXSovLnNvdXJjZSwgLy8gYSBudW1iZXJcbiAgICAgICAgLy0/KD86XFwuXFxkK3xcXGQrKD86XFwuXFxkKik/KS8uc291cmNlLCAvLyBhIGRvdWJsZS1xdW90ZWQgc3RyaW5nXG4gICAgICAgIC9cIlteXCJcXFxcXSooPzpcXFxcW1xcc1xcU11bXlwiXFxcXF0qKSpcIi8uc291cmNlLCAvLyBIVE1MLWxpa2Ugc3RyaW5nXG4gICAgICAgIC88KD86W148Pl18KD8hPCEtLSk8KD86W148PlwiJ118XCJbXlwiXSpcInwnW14nXSonKSs+fDwhLS0oPzpbXi1dfC0oPyEtPikpKi0tPikqPi9cbiAgICAgICAgICAuc291cmNlXG4gICAgICBdLmpvaW4oJ3wnKSArXG4gICAgICAnKSdcbiAgICB2YXIgSURJbnNpZGUgPSB7XG4gICAgICBtYXJrdXA6IHtcbiAgICAgICAgcGF0dGVybjogLyhePClbXFxzXFxTXSsoPz0+JCkvLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICBhbGlhczogWydsYW5ndWFnZS1tYXJrdXAnLCAnbGFuZ3VhZ2UtaHRtbCcsICdsYW5ndWFnZS14bWwnXSxcbiAgICAgICAgaW5zaWRlOiBQcmlzbS5sYW5ndWFnZXMubWFya3VwXG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2VcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZmxhZ3NcbiAgICAgKiBAcmV0dXJucyB7UmVnRXhwfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdpdGhJRChzb3VyY2UsIGZsYWdzKSB7XG4gICAgICByZXR1cm4gUmVnRXhwKFxuICAgICAgICBzb3VyY2UucmVwbGFjZSgvPElEPi9nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIElEXG4gICAgICAgIH0pLFxuICAgICAgICBmbGFnc1xuICAgICAgKVxuICAgIH1cbiAgICBQcmlzbS5sYW5ndWFnZXMuZG90ID0ge1xuICAgICAgY29tbWVudDoge1xuICAgICAgICBwYXR0ZXJuOiAvXFwvXFwvLip8XFwvXFwqW1xcc1xcU10qP1xcKlxcL3xeIy4qL20sXG4gICAgICAgIGdyZWVkeTogdHJ1ZVxuICAgICAgfSxcbiAgICAgICdncmFwaC1uYW1lJzoge1xuICAgICAgICBwYXR0ZXJuOiB3aXRoSUQoXG4gICAgICAgICAgLyhcXGIoPzpkaWdyYXBofGdyYXBofHN1YmdyYXBoKVsgXFx0XFxyXFxuXSspPElEPi8uc291cmNlLFxuICAgICAgICAgICdpJ1xuICAgICAgICApLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICBncmVlZHk6IHRydWUsXG4gICAgICAgIGFsaWFzOiAnY2xhc3MtbmFtZScsXG4gICAgICAgIGluc2lkZTogSURJbnNpZGVcbiAgICAgIH0sXG4gICAgICAnYXR0ci12YWx1ZSc6IHtcbiAgICAgICAgcGF0dGVybjogd2l0aElEKC8oPVsgXFx0XFxyXFxuXSopPElEPi8uc291cmNlKSxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgICBpbnNpZGU6IElESW5zaWRlXG4gICAgICB9LFxuICAgICAgJ2F0dHItbmFtZSc6IHtcbiAgICAgICAgcGF0dGVybjogd2l0aElEKC8oW1xcWzssIFxcdFxcclxcbl0pPElEPig/PVsgXFx0XFxyXFxuXSo9KS8uc291cmNlKSxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgICBpbnNpZGU6IElESW5zaWRlXG4gICAgICB9LFxuICAgICAga2V5d29yZDogL1xcYig/OmRpZ3JhcGh8ZWRnZXxncmFwaHxub2RlfHN0cmljdHxzdWJncmFwaClcXGIvaSxcbiAgICAgICdjb21wYXNzLXBvaW50Jzoge1xuICAgICAgICBwYXR0ZXJuOiAvKDpbIFxcdFxcclxcbl0qKSg/Oltld2NfXXxbbnNdW2V3XT8pKD8hW1xcd1xceDgwLVxcdUZGRkZdKS8sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGFsaWFzOiAnYnVpbHRpbidcbiAgICAgIH0sXG4gICAgICBub2RlOiB7XG4gICAgICAgIHBhdHRlcm46IHdpdGhJRCgvKF58W14tLlxcd1xceDgwLVxcdUZGRkZcXFxcXSk8SUQ+Ly5zb3VyY2UpLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICBncmVlZHk6IHRydWUsXG4gICAgICAgIGluc2lkZTogSURJbnNpZGVcbiAgICAgIH0sXG4gICAgICBvcGVyYXRvcjogL1s9Ol18LVstPl0vLFxuICAgICAgcHVuY3R1YXRpb246IC9bXFxbXFxde307LF0vXG4gICAgfVxuICAgIFByaXNtLmxhbmd1YWdlcy5ndiA9IFByaXNtLmxhbmd1YWdlcy5kb3RcbiAgfSkoUHJpc20pXG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImRvdCIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwiSUQiLCJzb3VyY2UiLCJqb2luIiwiSURJbnNpZGUiLCJtYXJrdXAiLCJwYXR0ZXJuIiwibG9va2JlaGluZCIsImFsaWFzIiwiaW5zaWRlIiwibGFuZ3VhZ2VzIiwid2l0aElEIiwiZmxhZ3MiLCJSZWdFeHAiLCJyZXBsYWNlIiwiY29tbWVudCIsImdyZWVkeSIsImtleXdvcmQiLCJub2RlIiwib3BlcmF0b3IiLCJwdW5jdHVhdGlvbiIsImd2Il0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/dot.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/ebnf.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/ebnf.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = ebnf;\nebnf.displayName = 'ebnf';\nebnf.aliases = [];\nfunction ebnf(Prism) {\n  Prism.languages.ebnf = {\n    comment: /\\(\\*[\\s\\S]*?\\*\\)/,\n    string: {\n      pattern: /\"[^\"\\r\\n]*\"|'[^'\\r\\n]*'/,\n      greedy: true\n    },\n    special: {\n      pattern: /\\?[^?\\r\\n]*\\?/,\n      greedy: true,\n      alias: 'class-name'\n    },\n    definition: {\n      pattern: /^([\\t ]*)[a-z]\\w*(?:[ \\t]+[a-z]\\w*)*(?=\\s*=)/im,\n      lookbehind: true,\n      alias: ['rule', 'keyword']\n    },\n    rule: /\\b[a-z]\\w*(?:[ \\t]+[a-z]\\w*)*\\b/i,\n    punctuation: /\\([:/]|[:/]\\)|[.,;()[\\]{}]/,\n    operator: /[-=|*/!]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvZWJuZi5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLElBQUk7QUFDckJBLElBQUksQ0FBQ0MsV0FBVyxHQUFHLE1BQU07QUFDekJELElBQUksQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDakIsU0FBU0YsSUFBSUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ25CQSxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osSUFBSSxHQUFHO0lBQ3JCSyxPQUFPLEVBQUUsa0JBQWtCO0lBQzNCQyxNQUFNLEVBQUU7TUFDTkMsT0FBTyxFQUFFLHlCQUF5QjtNQUNsQ0MsTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUNEQyxPQUFPLEVBQUU7TUFDUEYsT0FBTyxFQUFFLGVBQWU7TUFDeEJDLE1BQU0sRUFBRSxJQUFJO01BQ1pFLEtBQUssRUFBRTtJQUNULENBQUM7SUFDREMsVUFBVSxFQUFFO01BQ1ZKLE9BQU8sRUFBRSxnREFBZ0Q7TUFDekRLLFVBQVUsRUFBRSxJQUFJO01BQ2hCRixLQUFLLEVBQUUsQ0FBQyxNQUFNLEVBQUUsU0FBUztJQUMzQixDQUFDO0lBQ0RHLElBQUksRUFBRSxrQ0FBa0M7SUFDeENDLFdBQVcsRUFBRSw0QkFBNEI7SUFDekNDLFFBQVEsRUFBRTtFQUNaLENBQUM7QUFDSCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXGVibmYuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gZWJuZlxuZWJuZi5kaXNwbGF5TmFtZSA9ICdlYm5mJ1xuZWJuZi5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIGVibmYoUHJpc20pIHtcbiAgUHJpc20ubGFuZ3VhZ2VzLmVibmYgPSB7XG4gICAgY29tbWVudDogL1xcKFxcKltcXHNcXFNdKj9cXCpcXCkvLFxuICAgIHN0cmluZzoge1xuICAgICAgcGF0dGVybjogL1wiW15cIlxcclxcbl0qXCJ8J1teJ1xcclxcbl0qJy8sXG4gICAgICBncmVlZHk6IHRydWVcbiAgICB9LFxuICAgIHNwZWNpYWw6IHtcbiAgICAgIHBhdHRlcm46IC9cXD9bXj9cXHJcXG5dKlxcPy8sXG4gICAgICBncmVlZHk6IHRydWUsXG4gICAgICBhbGlhczogJ2NsYXNzLW5hbWUnXG4gICAgfSxcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICBwYXR0ZXJuOiAvXihbXFx0IF0qKVthLXpdXFx3Kig/OlsgXFx0XStbYS16XVxcdyopKig/PVxccyo9KS9pbSxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBhbGlhczogWydydWxlJywgJ2tleXdvcmQnXVxuICAgIH0sXG4gICAgcnVsZTogL1xcYlthLXpdXFx3Kig/OlsgXFx0XStbYS16XVxcdyopKlxcYi9pLFxuICAgIHB1bmN0dWF0aW9uOiAvXFwoWzovXXxbOi9dXFwpfFsuLDsoKVtcXF17fV0vLFxuICAgIG9wZXJhdG9yOiAvWy09fCovIV0vXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiZWJuZiIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwiY29tbWVudCIsInN0cmluZyIsInBhdHRlcm4iLCJncmVlZHkiLCJzcGVjaWFsIiwiYWxpYXMiLCJkZWZpbml0aW9uIiwibG9va2JlaGluZCIsInJ1bGUiLCJwdW5jdHVhdGlvbiIsIm9wZXJhdG9yIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/ebnf.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/editorconfig.js":
/*!*****************************************************!*\
  !*** ./node_modules/refractor/lang/editorconfig.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = editorconfig;\neditorconfig.displayName = 'editorconfig';\neditorconfig.aliases = [];\nfunction editorconfig(Prism) {\n  Prism.languages.editorconfig = {\n    // https://editorconfig-specification.readthedocs.io\n    comment: /[;#].*/,\n    section: {\n      pattern: /(^[ \\t]*)\\[.+\\]/m,\n      lookbehind: true,\n      alias: 'selector',\n      inside: {\n        regex: /\\\\\\\\[\\[\\]{},!?.*]/,\n        // Escape special characters with '\\\\'\n        operator: /[!?]|\\.\\.|\\*{1,2}/,\n        punctuation: /[\\[\\]{},]/\n      }\n    },\n    key: {\n      pattern: /(^[ \\t]*)[^\\s=]+(?=[ \\t]*=)/m,\n      lookbehind: true,\n      alias: 'attr-name'\n    },\n    value: {\n      pattern: /=.*/,\n      alias: 'attr-value',\n      inside: {\n        punctuation: /^=/\n      }\n    }\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvZWRpdG9yY29uZmlnLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsWUFBWTtBQUM3QkEsWUFBWSxDQUFDQyxXQUFXLEdBQUcsY0FBYztBQUN6Q0QsWUFBWSxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUN6QixTQUFTRixZQUFZQSxDQUFDRyxLQUFLLEVBQUU7RUFDM0JBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixZQUFZLEdBQUc7SUFDN0I7SUFDQUssT0FBTyxFQUFFLFFBQVE7SUFDakJDLE9BQU8sRUFBRTtNQUNQQyxPQUFPLEVBQUUsa0JBQWtCO01BQzNCQyxVQUFVLEVBQUUsSUFBSTtNQUNoQkMsS0FBSyxFQUFFLFVBQVU7TUFDakJDLE1BQU0sRUFBRTtRQUNOQyxLQUFLLEVBQUUsbUJBQW1CO1FBQzFCO1FBQ0FDLFFBQVEsRUFBRSxtQkFBbUI7UUFDN0JDLFdBQVcsRUFBRTtNQUNmO0lBQ0YsQ0FBQztJQUNEQyxHQUFHLEVBQUU7TUFDSFAsT0FBTyxFQUFFLDhCQUE4QjtNQUN2Q0MsVUFBVSxFQUFFLElBQUk7TUFDaEJDLEtBQUssRUFBRTtJQUNULENBQUM7SUFDRE0sS0FBSyxFQUFFO01BQ0xSLE9BQU8sRUFBRSxLQUFLO01BQ2RFLEtBQUssRUFBRSxZQUFZO01BQ25CQyxNQUFNLEVBQUU7UUFDTkcsV0FBVyxFQUFFO01BQ2Y7SUFDRjtFQUNGLENBQUM7QUFDSCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXGVkaXRvcmNvbmZpZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBlZGl0b3Jjb25maWdcbmVkaXRvcmNvbmZpZy5kaXNwbGF5TmFtZSA9ICdlZGl0b3Jjb25maWcnXG5lZGl0b3Jjb25maWcuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBlZGl0b3Jjb25maWcoUHJpc20pIHtcbiAgUHJpc20ubGFuZ3VhZ2VzLmVkaXRvcmNvbmZpZyA9IHtcbiAgICAvLyBodHRwczovL2VkaXRvcmNvbmZpZy1zcGVjaWZpY2F0aW9uLnJlYWR0aGVkb2NzLmlvXG4gICAgY29tbWVudDogL1s7I10uKi8sXG4gICAgc2VjdGlvbjoge1xuICAgICAgcGF0dGVybjogLyheWyBcXHRdKilcXFsuK1xcXS9tLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGFsaWFzOiAnc2VsZWN0b3InLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgIHJlZ2V4OiAvXFxcXFxcXFxbXFxbXFxde30sIT8uKl0vLFxuICAgICAgICAvLyBFc2NhcGUgc3BlY2lhbCBjaGFyYWN0ZXJzIHdpdGggJ1xcXFwnXG4gICAgICAgIG9wZXJhdG9yOiAvWyE/XXxcXC5cXC58XFwqezEsMn0vLFxuICAgICAgICBwdW5jdHVhdGlvbjogL1tcXFtcXF17fSxdL1xuICAgICAgfVxuICAgIH0sXG4gICAga2V5OiB7XG4gICAgICBwYXR0ZXJuOiAvKF5bIFxcdF0qKVteXFxzPV0rKD89WyBcXHRdKj0pL20sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgYWxpYXM6ICdhdHRyLW5hbWUnXG4gICAgfSxcbiAgICB2YWx1ZToge1xuICAgICAgcGF0dGVybjogLz0uKi8sXG4gICAgICBhbGlhczogJ2F0dHItdmFsdWUnLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgIHB1bmN0dWF0aW9uOiAvXj0vXG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImVkaXRvcmNvbmZpZyIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwiY29tbWVudCIsInNlY3Rpb24iLCJwYXR0ZXJuIiwibG9va2JlaGluZCIsImFsaWFzIiwiaW5zaWRlIiwicmVnZXgiLCJvcGVyYXRvciIsInB1bmN0dWF0aW9uIiwia2V5IiwidmFsdWUiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/editorconfig.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/eiffel.js":
/*!***********************************************!*\
  !*** ./node_modules/refractor/lang/eiffel.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = eiffel;\neiffel.displayName = 'eiffel';\neiffel.aliases = [];\nfunction eiffel(Prism) {\n  Prism.languages.eiffel = {\n    comment: /--.*/,\n    string: [\n    // Aligned-verbatim-strings\n    {\n      pattern: /\"([^[]*)\\[[\\s\\S]*?\\]\\1\"/,\n      greedy: true\n    },\n    // Non-aligned-verbatim-strings\n    {\n      pattern: /\"([^{]*)\\{[\\s\\S]*?\\}\\1\"/,\n      greedy: true\n    },\n    // Single-line string\n    {\n      pattern: /\"(?:%(?:(?!\\n)\\s)*\\n\\s*%|%\\S|[^%\"\\r\\n])*\"/,\n      greedy: true\n    }],\n    // normal char | special char | char code\n    \"char\": /'(?:%.|[^%'\\r\\n])+'/,\n    keyword: /\\b(?:across|agent|alias|all|and|as|assign|attached|attribute|check|class|convert|create|Current|debug|deferred|detachable|do|else|elseif|end|ensure|expanded|export|external|feature|from|frozen|if|implies|inherit|inspect|invariant|like|local|loop|not|note|obsolete|old|once|or|Precursor|redefine|rename|require|rescue|Result|retry|select|separate|some|then|undefine|until|variant|Void|when|xor)\\b/i,\n    \"boolean\": /\\b(?:False|True)\\b/i,\n    // Convention: class-names are always all upper-case characters\n    'class-name': /\\b[A-Z][\\dA-Z_]*\\b/,\n    number: [\n    // hexa | octal | bin\n    /\\b0[xcb][\\da-f](?:_*[\\da-f])*\\b/i,\n    // Decimal\n    /(?:\\b\\d(?:_*\\d)*)?\\.(?:(?:\\d(?:_*\\d)*)?e[+-]?)?\\d(?:_*\\d)*\\b|\\b\\d(?:_*\\d)*\\b\\.?/i],\n    punctuation: /:=|<<|>>|\\(\\||\\|\\)|->|\\.(?=\\w)|[{}[\\];(),:?]/,\n    operator: /\\\\\\\\|\\|\\.\\.\\||\\.\\.|\\/[~\\/=]?|[><]=?|[-+*^=~]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvZWlmZmVsLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsTUFBTTtBQUN2QkEsTUFBTSxDQUFDQyxXQUFXLEdBQUcsUUFBUTtBQUM3QkQsTUFBTSxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNuQixTQUFTRixNQUFNQSxDQUFDRyxLQUFLLEVBQUU7RUFDckJBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixNQUFNLEdBQUc7SUFDdkJLLE9BQU8sRUFBRSxNQUFNO0lBQ2ZDLE1BQU0sRUFBRTtJQUNOO0lBQ0E7TUFDRUMsT0FBTyxFQUFFLHlCQUF5QjtNQUNsQ0MsTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUFFO0lBQ0g7TUFDRUQsT0FBTyxFQUFFLHlCQUF5QjtNQUNsQ0MsTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUFFO0lBQ0g7TUFDRUQsT0FBTyxFQUFFLDJDQUEyQztNQUNwREMsTUFBTSxFQUFFO0lBQ1YsQ0FBQyxDQUNGO0lBQ0Q7SUFDQSxRQUFNLHFCQUFxQjtJQUMzQkMsT0FBTyxFQUNMLDhZQUE4WTtJQUNoWixXQUFTLHFCQUFxQjtJQUM5QjtJQUNBLFlBQVksRUFBRSxvQkFBb0I7SUFDbENDLE1BQU0sRUFBRTtJQUNOO0lBQ0Esa0NBQWtDO0lBQUU7SUFDcEMsa0ZBQWtGLENBQ25GO0lBQ0RDLFdBQVcsRUFBRSw4Q0FBOEM7SUFDM0RDLFFBQVEsRUFBRTtFQUNaLENBQUM7QUFDSCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXGVpZmZlbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBlaWZmZWxcbmVpZmZlbC5kaXNwbGF5TmFtZSA9ICdlaWZmZWwnXG5laWZmZWwuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBlaWZmZWwoUHJpc20pIHtcbiAgUHJpc20ubGFuZ3VhZ2VzLmVpZmZlbCA9IHtcbiAgICBjb21tZW50OiAvLS0uKi8sXG4gICAgc3RyaW5nOiBbXG4gICAgICAvLyBBbGlnbmVkLXZlcmJhdGltLXN0cmluZ3NcbiAgICAgIHtcbiAgICAgICAgcGF0dGVybjogL1wiKFteW10qKVxcW1tcXHNcXFNdKj9cXF1cXDFcIi8sXG4gICAgICAgIGdyZWVkeTogdHJ1ZVxuICAgICAgfSwgLy8gTm9uLWFsaWduZWQtdmVyYmF0aW0tc3RyaW5nc1xuICAgICAge1xuICAgICAgICBwYXR0ZXJuOiAvXCIoW157XSopXFx7W1xcc1xcU10qP1xcfVxcMVwiLyxcbiAgICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgICB9LCAvLyBTaW5nbGUtbGluZSBzdHJpbmdcbiAgICAgIHtcbiAgICAgICAgcGF0dGVybjogL1wiKD86JSg/Oig/IVxcbilcXHMpKlxcblxccyolfCVcXFN8W14lXCJcXHJcXG5dKSpcIi8sXG4gICAgICAgIGdyZWVkeTogdHJ1ZVxuICAgICAgfVxuICAgIF0sXG4gICAgLy8gbm9ybWFsIGNoYXIgfCBzcGVjaWFsIGNoYXIgfCBjaGFyIGNvZGVcbiAgICBjaGFyOiAvJyg/OiUufFteJSdcXHJcXG5dKSsnLyxcbiAgICBrZXl3b3JkOlxuICAgICAgL1xcYig/OmFjcm9zc3xhZ2VudHxhbGlhc3xhbGx8YW5kfGFzfGFzc2lnbnxhdHRhY2hlZHxhdHRyaWJ1dGV8Y2hlY2t8Y2xhc3N8Y29udmVydHxjcmVhdGV8Q3VycmVudHxkZWJ1Z3xkZWZlcnJlZHxkZXRhY2hhYmxlfGRvfGVsc2V8ZWxzZWlmfGVuZHxlbnN1cmV8ZXhwYW5kZWR8ZXhwb3J0fGV4dGVybmFsfGZlYXR1cmV8ZnJvbXxmcm96ZW58aWZ8aW1wbGllc3xpbmhlcml0fGluc3BlY3R8aW52YXJpYW50fGxpa2V8bG9jYWx8bG9vcHxub3R8bm90ZXxvYnNvbGV0ZXxvbGR8b25jZXxvcnxQcmVjdXJzb3J8cmVkZWZpbmV8cmVuYW1lfHJlcXVpcmV8cmVzY3VlfFJlc3VsdHxyZXRyeXxzZWxlY3R8c2VwYXJhdGV8c29tZXx0aGVufHVuZGVmaW5lfHVudGlsfHZhcmlhbnR8Vm9pZHx3aGVufHhvcilcXGIvaSxcbiAgICBib29sZWFuOiAvXFxiKD86RmFsc2V8VHJ1ZSlcXGIvaSxcbiAgICAvLyBDb252ZW50aW9uOiBjbGFzcy1uYW1lcyBhcmUgYWx3YXlzIGFsbCB1cHBlci1jYXNlIGNoYXJhY3RlcnNcbiAgICAnY2xhc3MtbmFtZSc6IC9cXGJbQS1aXVtcXGRBLVpfXSpcXGIvLFxuICAgIG51bWJlcjogW1xuICAgICAgLy8gaGV4YSB8IG9jdGFsIHwgYmluXG4gICAgICAvXFxiMFt4Y2JdW1xcZGEtZl0oPzpfKltcXGRhLWZdKSpcXGIvaSwgLy8gRGVjaW1hbFxuICAgICAgLyg/OlxcYlxcZCg/Ol8qXFxkKSopP1xcLig/Oig/OlxcZCg/Ol8qXFxkKSopP2VbKy1dPyk/XFxkKD86XypcXGQpKlxcYnxcXGJcXGQoPzpfKlxcZCkqXFxiXFwuPy9pXG4gICAgXSxcbiAgICBwdW5jdHVhdGlvbjogLzo9fDw8fD4+fFxcKFxcfHxcXHxcXCl8LT58XFwuKD89XFx3KXxbe31bXFxdOygpLDo/XS8sXG4gICAgb3BlcmF0b3I6IC9cXFxcXFxcXHxcXHxcXC5cXC5cXHx8XFwuXFwufFxcL1t+XFwvPV0/fFs+PF09P3xbLSsqXj1+XS9cbiAgfVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJlaWZmZWwiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImxhbmd1YWdlcyIsImNvbW1lbnQiLCJzdHJpbmciLCJwYXR0ZXJuIiwiZ3JlZWR5Iiwia2V5d29yZCIsIm51bWJlciIsInB1bmN0dWF0aW9uIiwib3BlcmF0b3IiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/eiffel.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/ejs.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/ejs.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar refractorMarkupTemplating = __webpack_require__(/*! ./markup-templating.js */ \"(ssr)/./node_modules/refractor/lang/markup-templating.js\");\nmodule.exports = ejs;\nejs.displayName = 'ejs';\nejs.aliases = ['eta'];\nfunction ejs(Prism) {\n  Prism.register(refractorMarkupTemplating);\n  (function (Prism) {\n    Prism.languages.ejs = {\n      delimiter: {\n        pattern: /^<%[-_=]?|[-_]?%>$/,\n        alias: 'punctuation'\n      },\n      comment: /^#[\\s\\S]*/,\n      'language-javascript': {\n        pattern: /[\\s\\S]+/,\n        inside: Prism.languages.javascript\n      }\n    };\n    Prism.hooks.add('before-tokenize', function (env) {\n      var ejsPattern = /<%(?!%)[\\s\\S]+?%>/g;\n      Prism.languages['markup-templating'].buildPlaceholders(env, 'ejs', ejsPattern);\n    });\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'ejs');\n    });\n    Prism.languages.eta = Prism.languages.ejs;\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvZWpzLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUNaLElBQUlBLHlCQUF5QixHQUFHQyxtQkFBTyxDQUFDLHdGQUF3QixDQUFDO0FBQ2pFQyxNQUFNLENBQUNDLE9BQU8sR0FBR0MsR0FBRztBQUNwQkEsR0FBRyxDQUFDQyxXQUFXLEdBQUcsS0FBSztBQUN2QkQsR0FBRyxDQUFDRSxPQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUM7QUFDckIsU0FBU0YsR0FBR0EsQ0FBQ0csS0FBSyxFQUFFO0VBQ2xCQSxLQUFLLENBQUNDLFFBQVEsQ0FBQ1IseUJBQXlCLENBQUM7RUFDeEMsQ0FBQyxVQUFVTyxLQUFLLEVBQUU7SUFDakJBLEtBQUssQ0FBQ0UsU0FBUyxDQUFDTCxHQUFHLEdBQUc7TUFDcEJNLFNBQVMsRUFBRTtRQUNUQyxPQUFPLEVBQUUsb0JBQW9CO1FBQzdCQyxLQUFLLEVBQUU7TUFDVCxDQUFDO01BQ0RDLE9BQU8sRUFBRSxXQUFXO01BQ3BCLHFCQUFxQixFQUFFO1FBQ3JCRixPQUFPLEVBQUUsU0FBUztRQUNsQkcsTUFBTSxFQUFFUCxLQUFLLENBQUNFLFNBQVMsQ0FBQ007TUFDMUI7SUFDRixDQUFDO0lBQ0RSLEtBQUssQ0FBQ1MsS0FBSyxDQUFDQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsVUFBVUMsR0FBRyxFQUFFO01BQ2hELElBQUlDLFVBQVUsR0FBRyxvQkFBb0I7TUFDckNaLEtBQUssQ0FBQ0UsU0FBUyxDQUFDLG1CQUFtQixDQUFDLENBQUNXLGlCQUFpQixDQUNwREYsR0FBRyxFQUNILEtBQUssRUFDTEMsVUFDRixDQUFDO0lBQ0gsQ0FBQyxDQUFDO0lBQ0ZaLEtBQUssQ0FBQ1MsS0FBSyxDQUFDQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsVUFBVUMsR0FBRyxFQUFFO01BQy9DWCxLQUFLLENBQUNFLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDWSxvQkFBb0IsQ0FBQ0gsR0FBRyxFQUFFLEtBQUssQ0FBQztJQUN2RSxDQUFDLENBQUM7SUFDRlgsS0FBSyxDQUFDRSxTQUFTLENBQUNhLEdBQUcsR0FBR2YsS0FBSyxDQUFDRSxTQUFTLENBQUNMLEdBQUc7RUFDM0MsQ0FBQyxFQUFFRyxLQUFLLENBQUM7QUFDWCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXGVqcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcbnZhciByZWZyYWN0b3JNYXJrdXBUZW1wbGF0aW5nID0gcmVxdWlyZSgnLi9tYXJrdXAtdGVtcGxhdGluZy5qcycpXG5tb2R1bGUuZXhwb3J0cyA9IGVqc1xuZWpzLmRpc3BsYXlOYW1lID0gJ2VqcydcbmVqcy5hbGlhc2VzID0gWydldGEnXVxuZnVuY3Rpb24gZWpzKFByaXNtKSB7XG4gIFByaXNtLnJlZ2lzdGVyKHJlZnJhY3Rvck1hcmt1cFRlbXBsYXRpbmcpXG4gIDsoZnVuY3Rpb24gKFByaXNtKSB7XG4gICAgUHJpc20ubGFuZ3VhZ2VzLmVqcyA9IHtcbiAgICAgIGRlbGltaXRlcjoge1xuICAgICAgICBwYXR0ZXJuOiAvXjwlWy1fPV0/fFstX10/JT4kLyxcbiAgICAgICAgYWxpYXM6ICdwdW5jdHVhdGlvbidcbiAgICAgIH0sXG4gICAgICBjb21tZW50OiAvXiNbXFxzXFxTXSovLFxuICAgICAgJ2xhbmd1YWdlLWphdmFzY3JpcHQnOiB7XG4gICAgICAgIHBhdHRlcm46IC9bXFxzXFxTXSsvLFxuICAgICAgICBpbnNpZGU6IFByaXNtLmxhbmd1YWdlcy5qYXZhc2NyaXB0XG4gICAgICB9XG4gICAgfVxuICAgIFByaXNtLmhvb2tzLmFkZCgnYmVmb3JlLXRva2VuaXplJywgZnVuY3Rpb24gKGVudikge1xuICAgICAgdmFyIGVqc1BhdHRlcm4gPSAvPCUoPyElKVtcXHNcXFNdKz8lPi9nXG4gICAgICBQcmlzbS5sYW5ndWFnZXNbJ21hcmt1cC10ZW1wbGF0aW5nJ10uYnVpbGRQbGFjZWhvbGRlcnMoXG4gICAgICAgIGVudixcbiAgICAgICAgJ2VqcycsXG4gICAgICAgIGVqc1BhdHRlcm5cbiAgICAgIClcbiAgICB9KVxuICAgIFByaXNtLmhvb2tzLmFkZCgnYWZ0ZXItdG9rZW5pemUnLCBmdW5jdGlvbiAoZW52KSB7XG4gICAgICBQcmlzbS5sYW5ndWFnZXNbJ21hcmt1cC10ZW1wbGF0aW5nJ10udG9rZW5pemVQbGFjZWhvbGRlcnMoZW52LCAnZWpzJylcbiAgICB9KVxuICAgIFByaXNtLmxhbmd1YWdlcy5ldGEgPSBQcmlzbS5sYW5ndWFnZXMuZWpzXG4gIH0pKFByaXNtKVxufVxuIl0sIm5hbWVzIjpbInJlZnJhY3Rvck1hcmt1cFRlbXBsYXRpbmciLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImVqcyIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwicmVnaXN0ZXIiLCJsYW5ndWFnZXMiLCJkZWxpbWl0ZXIiLCJwYXR0ZXJuIiwiYWxpYXMiLCJjb21tZW50IiwiaW5zaWRlIiwiamF2YXNjcmlwdCIsImhvb2tzIiwiYWRkIiwiZW52IiwiZWpzUGF0dGVybiIsImJ1aWxkUGxhY2Vob2xkZXJzIiwidG9rZW5pemVQbGFjZWhvbGRlcnMiLCJldGEiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/ejs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/elixir.js":
/*!***********************************************!*\
  !*** ./node_modules/refractor/lang/elixir.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = elixir;\nelixir.displayName = 'elixir';\nelixir.aliases = [];\nfunction elixir(Prism) {\n  Prism.languages.elixir = {\n    doc: {\n      pattern: /@(?:doc|moduledoc)\\s+(?:(\"\"\"|''')[\\s\\S]*?\\1|(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2)/,\n      inside: {\n        attribute: /^@\\w+/,\n        string: /['\"][\\s\\S]+/\n      }\n    },\n    comment: {\n      pattern: /#.*/,\n      greedy: true\n    },\n    // ~r\"\"\"foo\"\"\" (multi-line), ~r'''foo''' (multi-line), ~r/foo/, ~r|foo|, ~r\"foo\", ~r'foo', ~r(foo), ~r[foo], ~r{foo}, ~r<foo>\n    regex: {\n      pattern: /~[rR](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|[^\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[uismxfr]*/,\n      greedy: true\n    },\n    string: [{\n      // ~s\"\"\"foo\"\"\" (multi-line), ~s'''foo''' (multi-line), ~s/foo/, ~s|foo|, ~s\"foo\", ~s'foo', ~s(foo), ~s[foo], ~s{foo} (with interpolation care), ~s<foo>\n      pattern: /~[cCsSwW](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|#\\{[^}]+\\}|#(?!\\{)|[^#\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[csa]?/,\n      greedy: true,\n      inside: {\n        // See interpolation below\n      }\n    }, {\n      pattern: /(\"\"\"|''')[\\s\\S]*?\\1/,\n      greedy: true,\n      inside: {\n        // See interpolation below\n      }\n    }, {\n      // Multi-line strings are allowed\n      pattern: /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true,\n      inside: {\n        // See interpolation below\n      }\n    }],\n    atom: {\n      // Look-behind prevents bad highlighting of the :: operator\n      pattern: /(^|[^:]):\\w+/,\n      lookbehind: true,\n      alias: 'symbol'\n    },\n    module: {\n      pattern: /\\b[A-Z]\\w*\\b/,\n      alias: 'class-name'\n    },\n    // Look-ahead prevents bad highlighting of the :: operator\n    'attr-name': /\\b\\w+\\??:(?!:)/,\n    argument: {\n      // Look-behind prevents bad highlighting of the && operator\n      pattern: /(^|[^&])&\\d+/,\n      lookbehind: true,\n      alias: 'variable'\n    },\n    attribute: {\n      pattern: /@\\w+/,\n      alias: 'variable'\n    },\n    \"function\": /\\b[_a-zA-Z]\\w*[?!]?(?:(?=\\s*(?:\\.\\s*)?\\()|(?=\\/\\d))/,\n    number: /\\b(?:0[box][a-f\\d_]+|\\d[\\d_]*)(?:\\.[\\d_]+)?(?:e[+-]?[\\d_]+)?\\b/i,\n    keyword: /\\b(?:after|alias|and|case|catch|cond|def(?:callback|delegate|exception|impl|macro|module|n|np|p|protocol|struct)?|do|else|end|fn|for|if|import|not|or|quote|raise|require|rescue|try|unless|unquote|use|when)\\b/,\n    \"boolean\": /\\b(?:false|nil|true)\\b/,\n    operator: [/\\bin\\b|&&?|\\|[|>]?|\\\\\\\\|::|\\.\\.\\.?|\\+\\+?|-[->]?|<[-=>]|>=|!==?|\\B!|=(?:==?|[>~])?|[*\\/^]/, {\n      // We don't want to match <<\n      pattern: /([^<])<(?!<)/,\n      lookbehind: true\n    }, {\n      // We don't want to match >>\n      pattern: /([^>])>(?!>)/,\n      lookbehind: true\n    }],\n    punctuation: /<<|>>|[.,%\\[\\]{}()]/\n  };\n  Prism.languages.elixir.string.forEach(function (o) {\n    o.inside = {\n      interpolation: {\n        pattern: /#\\{[^}]+\\}/,\n        inside: {\n          delimiter: {\n            pattern: /^#\\{|\\}$/,\n            alias: 'punctuation'\n          },\n          rest: Prism.languages.elixir\n        }\n      }\n    };\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvZWxpeGlyLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsTUFBTTtBQUN2QkEsTUFBTSxDQUFDQyxXQUFXLEdBQUcsUUFBUTtBQUM3QkQsTUFBTSxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNuQixTQUFTRixNQUFNQSxDQUFDRyxLQUFLLEVBQUU7RUFDckJBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixNQUFNLEdBQUc7SUFDdkJLLEdBQUcsRUFBRTtNQUNIQyxPQUFPLEVBQ0wsNEZBQTRGO01BQzlGQyxNQUFNLEVBQUU7UUFDTkMsU0FBUyxFQUFFLE9BQU87UUFDbEJDLE1BQU0sRUFBRTtNQUNWO0lBQ0YsQ0FBQztJQUNEQyxPQUFPLEVBQUU7TUFDUEosT0FBTyxFQUFFLEtBQUs7TUFDZEssTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUNEO0lBQ0FDLEtBQUssRUFBRTtNQUNMTixPQUFPLEVBQ0wsNExBQTRMO01BQzlMSyxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0RGLE1BQU0sRUFBRSxDQUNOO01BQ0U7TUFDQUgsT0FBTyxFQUNMLGdOQUFnTjtNQUNsTkssTUFBTSxFQUFFLElBQUk7TUFDWkosTUFBTSxFQUFFO1FBQ047TUFBQTtJQUVKLENBQUMsRUFDRDtNQUNFRCxPQUFPLEVBQUUscUJBQXFCO01BQzlCSyxNQUFNLEVBQUUsSUFBSTtNQUNaSixNQUFNLEVBQUU7UUFDTjtNQUFBO0lBRUosQ0FBQyxFQUNEO01BQ0U7TUFDQUQsT0FBTyxFQUFFLCtDQUErQztNQUN4REssTUFBTSxFQUFFLElBQUk7TUFDWkosTUFBTSxFQUFFO1FBQ047TUFBQTtJQUVKLENBQUMsQ0FDRjtJQUNETSxJQUFJLEVBQUU7TUFDSjtNQUNBUCxPQUFPLEVBQUUsY0FBYztNQUN2QlEsVUFBVSxFQUFFLElBQUk7TUFDaEJDLEtBQUssRUFBRTtJQUNULENBQUM7SUFDRGpCLE1BQU0sRUFBRTtNQUNOUSxPQUFPLEVBQUUsY0FBYztNQUN2QlMsS0FBSyxFQUFFO0lBQ1QsQ0FBQztJQUNEO0lBQ0EsV0FBVyxFQUFFLGdCQUFnQjtJQUM3QkMsUUFBUSxFQUFFO01BQ1I7TUFDQVYsT0FBTyxFQUFFLGNBQWM7TUFDdkJRLFVBQVUsRUFBRSxJQUFJO01BQ2hCQyxLQUFLLEVBQUU7SUFDVCxDQUFDO0lBQ0RQLFNBQVMsRUFBRTtNQUNURixPQUFPLEVBQUUsTUFBTTtNQUNmUyxLQUFLLEVBQUU7SUFDVCxDQUFDO0lBQ0QsWUFBVSxxREFBcUQ7SUFDL0RFLE1BQU0sRUFBRSxpRUFBaUU7SUFDekVDLE9BQU8sRUFDTCxpTkFBaU47SUFDbk4sV0FBUyx3QkFBd0I7SUFDakNDLFFBQVEsRUFBRSxDQUNSLDBGQUEwRixFQUMxRjtNQUNFO01BQ0FiLE9BQU8sRUFBRSxjQUFjO01BQ3ZCUSxVQUFVLEVBQUU7SUFDZCxDQUFDLEVBQ0Q7TUFDRTtNQUNBUixPQUFPLEVBQUUsY0FBYztNQUN2QlEsVUFBVSxFQUFFO0lBQ2QsQ0FBQyxDQUNGO0lBQ0RNLFdBQVcsRUFBRTtFQUNmLENBQUM7RUFDRGpCLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixNQUFNLENBQUNTLE1BQU0sQ0FBQ1ksT0FBTyxDQUFDLFVBQVVDLENBQUMsRUFBRTtJQUNqREEsQ0FBQyxDQUFDZixNQUFNLEdBQUc7TUFDVGdCLGFBQWEsRUFBRTtRQUNiakIsT0FBTyxFQUFFLFlBQVk7UUFDckJDLE1BQU0sRUFBRTtVQUNOaUIsU0FBUyxFQUFFO1lBQ1RsQixPQUFPLEVBQUUsVUFBVTtZQUNuQlMsS0FBSyxFQUFFO1VBQ1QsQ0FBQztVQUNEVSxJQUFJLEVBQUV0QixLQUFLLENBQUNDLFNBQVMsQ0FBQ0o7UUFDeEI7TUFDRjtJQUNGLENBQUM7RUFDSCxDQUFDLENBQUM7QUFDSiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXGVsaXhpci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBlbGl4aXJcbmVsaXhpci5kaXNwbGF5TmFtZSA9ICdlbGl4aXInXG5lbGl4aXIuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBlbGl4aXIoUHJpc20pIHtcbiAgUHJpc20ubGFuZ3VhZ2VzLmVsaXhpciA9IHtcbiAgICBkb2M6IHtcbiAgICAgIHBhdHRlcm46XG4gICAgICAgIC9AKD86ZG9jfG1vZHVsZWRvYylcXHMrKD86KFwiXCJcInwnJycpW1xcc1xcU10qP1xcMXwoXCJ8JykoPzpcXFxcKD86XFxyXFxufFtcXHNcXFNdKXwoPyFcXDIpW15cXFxcXFxyXFxuXSkqXFwyKS8sXG4gICAgICBpbnNpZGU6IHtcbiAgICAgICAgYXR0cmlidXRlOiAvXkBcXHcrLyxcbiAgICAgICAgc3RyaW5nOiAvWydcIl1bXFxzXFxTXSsvXG4gICAgICB9XG4gICAgfSxcbiAgICBjb21tZW50OiB7XG4gICAgICBwYXR0ZXJuOiAvIy4qLyxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgLy8gfnJcIlwiXCJmb29cIlwiXCIgKG11bHRpLWxpbmUpLCB+cicnJ2ZvbycnJyAobXVsdGktbGluZSksIH5yL2Zvby8sIH5yfGZvb3wsIH5yXCJmb29cIiwgfnInZm9vJywgfnIoZm9vKSwgfnJbZm9vXSwgfnJ7Zm9vfSwgfnI8Zm9vPlxuICAgIHJlZ2V4OiB7XG4gICAgICBwYXR0ZXJuOlxuICAgICAgICAvfltyUl0oPzooXCJcIlwifCcnJykoPzpcXFxcW1xcc1xcU118KD8hXFwxKVteXFxcXF0pK1xcMXwoW1xcL3xcIiddKSg/OlxcXFwufCg/IVxcMilbXlxcXFxcXHJcXG5dKStcXDJ8XFwoKD86XFxcXC58W15cXFxcKVxcclxcbl0pK1xcKXxcXFsoPzpcXFxcLnxbXlxcXFxcXF1cXHJcXG5dKStcXF18XFx7KD86XFxcXC58W15cXFxcfVxcclxcbl0pK1xcfXw8KD86XFxcXC58W15cXFxcPlxcclxcbl0pKz4pW3Vpc214ZnJdKi8sXG4gICAgICBncmVlZHk6IHRydWVcbiAgICB9LFxuICAgIHN0cmluZzogW1xuICAgICAge1xuICAgICAgICAvLyB+c1wiXCJcImZvb1wiXCJcIiAobXVsdGktbGluZSksIH5zJycnZm9vJycnIChtdWx0aS1saW5lKSwgfnMvZm9vLywgfnN8Zm9vfCwgfnNcImZvb1wiLCB+cydmb28nLCB+cyhmb28pLCB+c1tmb29dLCB+c3tmb299ICh3aXRoIGludGVycG9sYXRpb24gY2FyZSksIH5zPGZvbz5cbiAgICAgICAgcGF0dGVybjpcbiAgICAgICAgICAvfltjQ3NTd1ddKD86KFwiXCJcInwnJycpKD86XFxcXFtcXHNcXFNdfCg/IVxcMSlbXlxcXFxdKStcXDF8KFtcXC98XCInXSkoPzpcXFxcLnwoPyFcXDIpW15cXFxcXFxyXFxuXSkrXFwyfFxcKCg/OlxcXFwufFteXFxcXClcXHJcXG5dKStcXCl8XFxbKD86XFxcXC58W15cXFxcXFxdXFxyXFxuXSkrXFxdfFxceyg/OlxcXFwufCNcXHtbXn1dK1xcfXwjKD8hXFx7KXxbXiNcXFxcfVxcclxcbl0pK1xcfXw8KD86XFxcXC58W15cXFxcPlxcclxcbl0pKz4pW2NzYV0/LyxcbiAgICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICAvLyBTZWUgaW50ZXJwb2xhdGlvbiBiZWxvd1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBwYXR0ZXJuOiAvKFwiXCJcInwnJycpW1xcc1xcU10qP1xcMS8sXG4gICAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgLy8gU2VlIGludGVycG9sYXRpb24gYmVsb3dcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgLy8gTXVsdGktbGluZSBzdHJpbmdzIGFyZSBhbGxvd2VkXG4gICAgICAgIHBhdHRlcm46IC8oXCJ8JykoPzpcXFxcKD86XFxyXFxufFtcXHNcXFNdKXwoPyFcXDEpW15cXFxcXFxyXFxuXSkqXFwxLyxcbiAgICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICAvLyBTZWUgaW50ZXJwb2xhdGlvbiBiZWxvd1xuICAgICAgICB9XG4gICAgICB9XG4gICAgXSxcbiAgICBhdG9tOiB7XG4gICAgICAvLyBMb29rLWJlaGluZCBwcmV2ZW50cyBiYWQgaGlnaGxpZ2h0aW5nIG9mIHRoZSA6OiBvcGVyYXRvclxuICAgICAgcGF0dGVybjogLyhefFteOl0pOlxcdysvLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGFsaWFzOiAnc3ltYm9sJ1xuICAgIH0sXG4gICAgbW9kdWxlOiB7XG4gICAgICBwYXR0ZXJuOiAvXFxiW0EtWl1cXHcqXFxiLyxcbiAgICAgIGFsaWFzOiAnY2xhc3MtbmFtZSdcbiAgICB9LFxuICAgIC8vIExvb2stYWhlYWQgcHJldmVudHMgYmFkIGhpZ2hsaWdodGluZyBvZiB0aGUgOjogb3BlcmF0b3JcbiAgICAnYXR0ci1uYW1lJzogL1xcYlxcdytcXD8/Oig/ITopLyxcbiAgICBhcmd1bWVudDoge1xuICAgICAgLy8gTG9vay1iZWhpbmQgcHJldmVudHMgYmFkIGhpZ2hsaWdodGluZyBvZiB0aGUgJiYgb3BlcmF0b3JcbiAgICAgIHBhdHRlcm46IC8oXnxbXiZdKSZcXGQrLyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBhbGlhczogJ3ZhcmlhYmxlJ1xuICAgIH0sXG4gICAgYXR0cmlidXRlOiB7XG4gICAgICBwYXR0ZXJuOiAvQFxcdysvLFxuICAgICAgYWxpYXM6ICd2YXJpYWJsZSdcbiAgICB9LFxuICAgIGZ1bmN0aW9uOiAvXFxiW19hLXpBLVpdXFx3Kls/IV0/KD86KD89XFxzKig/OlxcLlxccyopP1xcKCl8KD89XFwvXFxkKSkvLFxuICAgIG51bWJlcjogL1xcYig/OjBbYm94XVthLWZcXGRfXSt8XFxkW1xcZF9dKikoPzpcXC5bXFxkX10rKT8oPzplWystXT9bXFxkX10rKT9cXGIvaSxcbiAgICBrZXl3b3JkOlxuICAgICAgL1xcYig/OmFmdGVyfGFsaWFzfGFuZHxjYXNlfGNhdGNofGNvbmR8ZGVmKD86Y2FsbGJhY2t8ZGVsZWdhdGV8ZXhjZXB0aW9ufGltcGx8bWFjcm98bW9kdWxlfG58bnB8cHxwcm90b2NvbHxzdHJ1Y3QpP3xkb3xlbHNlfGVuZHxmbnxmb3J8aWZ8aW1wb3J0fG5vdHxvcnxxdW90ZXxyYWlzZXxyZXF1aXJlfHJlc2N1ZXx0cnl8dW5sZXNzfHVucXVvdGV8dXNlfHdoZW4pXFxiLyxcbiAgICBib29sZWFuOiAvXFxiKD86ZmFsc2V8bmlsfHRydWUpXFxiLyxcbiAgICBvcGVyYXRvcjogW1xuICAgICAgL1xcYmluXFxifCYmP3xcXHxbfD5dP3xcXFxcXFxcXHw6OnxcXC5cXC5cXC4/fFxcK1xcKz98LVstPl0/fDxbLT0+XXw+PXwhPT0/fFxcQiF8PSg/Oj09P3xbPn5dKT98WypcXC9eXS8sXG4gICAgICB7XG4gICAgICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gbWF0Y2ggPDxcbiAgICAgICAgcGF0dGVybjogLyhbXjxdKTwoPyE8KS8sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gbWF0Y2ggPj5cbiAgICAgICAgcGF0dGVybjogLyhbXj5dKT4oPyE+KS8sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH1cbiAgICBdLFxuICAgIHB1bmN0dWF0aW9uOiAvPDx8Pj58Wy4sJVxcW1xcXXt9KCldL1xuICB9XG4gIFByaXNtLmxhbmd1YWdlcy5lbGl4aXIuc3RyaW5nLmZvckVhY2goZnVuY3Rpb24gKG8pIHtcbiAgICBvLmluc2lkZSA9IHtcbiAgICAgIGludGVycG9sYXRpb246IHtcbiAgICAgICAgcGF0dGVybjogLyNcXHtbXn1dK1xcfS8sXG4gICAgICAgIGluc2lkZToge1xuICAgICAgICAgIGRlbGltaXRlcjoge1xuICAgICAgICAgICAgcGF0dGVybjogL14jXFx7fFxcfSQvLFxuICAgICAgICAgICAgYWxpYXM6ICdwdW5jdHVhdGlvbidcbiAgICAgICAgICB9LFxuICAgICAgICAgIHJlc3Q6IFByaXNtLmxhbmd1YWdlcy5lbGl4aXJcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSlcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiZWxpeGlyIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJkb2MiLCJwYXR0ZXJuIiwiaW5zaWRlIiwiYXR0cmlidXRlIiwic3RyaW5nIiwiY29tbWVudCIsImdyZWVkeSIsInJlZ2V4IiwiYXRvbSIsImxvb2tiZWhpbmQiLCJhbGlhcyIsImFyZ3VtZW50IiwibnVtYmVyIiwia2V5d29yZCIsIm9wZXJhdG9yIiwicHVuY3R1YXRpb24iLCJmb3JFYWNoIiwibyIsImludGVycG9sYXRpb24iLCJkZWxpbWl0ZXIiLCJyZXN0Il0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/elixir.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/elm.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/elm.js ***!
  \********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = elm;\nelm.displayName = 'elm';\nelm.aliases = [];\nfunction elm(Prism) {\n  Prism.languages.elm = {\n    comment: /--.*|\\{-[\\s\\S]*?-\\}/,\n    \"char\": {\n      pattern: /'(?:[^\\\\'\\r\\n]|\\\\(?:[abfnrtv\\\\']|\\d+|x[0-9a-fA-F]+|u\\{[0-9a-fA-F]+\\}))'/,\n      greedy: true\n    },\n    string: [{\n      // Multiline strings are wrapped in triple \". Quotes may appear unescaped.\n      pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n      greedy: true\n    }, {\n      pattern: /\"(?:[^\\\\\"\\r\\n]|\\\\.)*\"/,\n      greedy: true\n    }],\n    'import-statement': {\n      // The imported or hidden names are not included in this import\n      // statement. This is because we want to highlight those exactly like\n      // we do for the names in the program.\n      pattern: /(^[\\t ]*)import\\s+[A-Z]\\w*(?:\\.[A-Z]\\w*)*(?:\\s+as\\s+(?:[A-Z]\\w*)(?:\\.[A-Z]\\w*)*)?(?:\\s+exposing\\s+)?/m,\n      lookbehind: true,\n      inside: {\n        keyword: /\\b(?:as|exposing|import)\\b/\n      }\n    },\n    keyword: /\\b(?:alias|as|case|else|exposing|if|in|infixl|infixr|let|module|of|then|type)\\b/,\n    // These are builtin variables only. Constructors are highlighted later as a constant.\n    builtin: /\\b(?:abs|acos|always|asin|atan|atan2|ceiling|clamp|compare|cos|curry|degrees|e|flip|floor|fromPolar|identity|isInfinite|isNaN|logBase|max|min|negate|never|not|pi|radians|rem|round|sin|sqrt|tan|toFloat|toPolar|toString|truncate|turns|uncurry|xor)\\b/,\n    // decimal integers and floating point numbers | hexadecimal integers\n    number: /\\b(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|0x[0-9a-f]+)\\b/i,\n    // Most of this is needed because of the meaning of a single '.'.\n    // If it stands alone freely, it is the function composition.\n    // It may also be a separator between a module name and an identifier => no\n    // operator. If it comes together with other special characters it is an\n    // operator too.\n    // Valid operator characters in 0.18: +-/*=.$<>:&|^?%#@~!\n    // Ref: https://groups.google.com/forum/#!msg/elm-dev/0AHSnDdkSkQ/E0SVU70JEQAJ\n    operator: /\\s\\.\\s|[+\\-/*=.$<>:&|^?%#@~!]{2,}|[+\\-/*=$<>:&|^?%#@~!]/,\n    // In Elm, nearly everything is a variable, do not highlight these.\n    hvariable: /\\b(?:[A-Z]\\w*\\.)*[a-z]\\w*\\b/,\n    constant: /\\b(?:[A-Z]\\w*\\.)*[A-Z]\\w*\\b/,\n    punctuation: /[{}[\\]|(),.:]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvZWxtLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsR0FBRztBQUNwQkEsR0FBRyxDQUFDQyxXQUFXLEdBQUcsS0FBSztBQUN2QkQsR0FBRyxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNoQixTQUFTRixHQUFHQSxDQUFDRyxLQUFLLEVBQUU7RUFDbEJBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixHQUFHLEdBQUc7SUFDcEJLLE9BQU8sRUFBRSxxQkFBcUI7SUFDOUIsUUFBTTtNQUNKQyxPQUFPLEVBQ0wseUVBQXlFO01BQzNFQyxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0RDLE1BQU0sRUFBRSxDQUNOO01BQ0U7TUFDQUYsT0FBTyxFQUFFLGdCQUFnQjtNQUN6QkMsTUFBTSxFQUFFO0lBQ1YsQ0FBQyxFQUNEO01BQ0VELE9BQU8sRUFBRSx1QkFBdUI7TUFDaENDLE1BQU0sRUFBRTtJQUNWLENBQUMsQ0FDRjtJQUNELGtCQUFrQixFQUFFO01BQ2xCO01BQ0E7TUFDQTtNQUNBRCxPQUFPLEVBQ0wsdUdBQXVHO01BQ3pHRyxVQUFVLEVBQUUsSUFBSTtNQUNoQkMsTUFBTSxFQUFFO1FBQ05DLE9BQU8sRUFBRTtNQUNYO0lBQ0YsQ0FBQztJQUNEQSxPQUFPLEVBQ0wsaUZBQWlGO0lBQ25GO0lBQ0FDLE9BQU8sRUFDTCx5UEFBeVA7SUFDM1A7SUFDQUMsTUFBTSxFQUFFLGtEQUFrRDtJQUMxRDtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBQyxRQUFRLEVBQUUseURBQXlEO0lBQ25FO0lBQ0FDLFNBQVMsRUFBRSw2QkFBNkI7SUFDeENDLFFBQVEsRUFBRSw2QkFBNkI7SUFDdkNDLFdBQVcsRUFBRTtFQUNmLENBQUM7QUFDSCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXGVsbS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBlbG1cbmVsbS5kaXNwbGF5TmFtZSA9ICdlbG0nXG5lbG0uYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBlbG0oUHJpc20pIHtcbiAgUHJpc20ubGFuZ3VhZ2VzLmVsbSA9IHtcbiAgICBjb21tZW50OiAvLS0uKnxcXHstW1xcc1xcU10qPy1cXH0vLFxuICAgIGNoYXI6IHtcbiAgICAgIHBhdHRlcm46XG4gICAgICAgIC8nKD86W15cXFxcJ1xcclxcbl18XFxcXCg/OlthYmZucnR2XFxcXCddfFxcZCt8eFswLTlhLWZBLUZdK3x1XFx7WzAtOWEtZkEtRl0rXFx9KSknLyxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgc3RyaW5nOiBbXG4gICAgICB7XG4gICAgICAgIC8vIE11bHRpbGluZSBzdHJpbmdzIGFyZSB3cmFwcGVkIGluIHRyaXBsZSBcIi4gUXVvdGVzIG1heSBhcHBlYXIgdW5lc2NhcGVkLlxuICAgICAgICBwYXR0ZXJuOiAvXCJcIlwiW1xcc1xcU10qP1wiXCJcIi8sXG4gICAgICAgIGdyZWVkeTogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgcGF0dGVybjogL1wiKD86W15cXFxcXCJcXHJcXG5dfFxcXFwuKSpcIi8sXG4gICAgICAgIGdyZWVkeTogdHJ1ZVxuICAgICAgfVxuICAgIF0sXG4gICAgJ2ltcG9ydC1zdGF0ZW1lbnQnOiB7XG4gICAgICAvLyBUaGUgaW1wb3J0ZWQgb3IgaGlkZGVuIG5hbWVzIGFyZSBub3QgaW5jbHVkZWQgaW4gdGhpcyBpbXBvcnRcbiAgICAgIC8vIHN0YXRlbWVudC4gVGhpcyBpcyBiZWNhdXNlIHdlIHdhbnQgdG8gaGlnaGxpZ2h0IHRob3NlIGV4YWN0bHkgbGlrZVxuICAgICAgLy8gd2UgZG8gZm9yIHRoZSBuYW1lcyBpbiB0aGUgcHJvZ3JhbS5cbiAgICAgIHBhdHRlcm46XG4gICAgICAgIC8oXltcXHQgXSopaW1wb3J0XFxzK1tBLVpdXFx3Kig/OlxcLltBLVpdXFx3KikqKD86XFxzK2FzXFxzKyg/OltBLVpdXFx3KikoPzpcXC5bQS1aXVxcdyopKik/KD86XFxzK2V4cG9zaW5nXFxzKyk/L20sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgIGtleXdvcmQ6IC9cXGIoPzphc3xleHBvc2luZ3xpbXBvcnQpXFxiL1xuICAgICAgfVxuICAgIH0sXG4gICAga2V5d29yZDpcbiAgICAgIC9cXGIoPzphbGlhc3xhc3xjYXNlfGVsc2V8ZXhwb3Npbmd8aWZ8aW58aW5maXhsfGluZml4cnxsZXR8bW9kdWxlfG9mfHRoZW58dHlwZSlcXGIvLFxuICAgIC8vIFRoZXNlIGFyZSBidWlsdGluIHZhcmlhYmxlcyBvbmx5LiBDb25zdHJ1Y3RvcnMgYXJlIGhpZ2hsaWdodGVkIGxhdGVyIGFzIGEgY29uc3RhbnQuXG4gICAgYnVpbHRpbjpcbiAgICAgIC9cXGIoPzphYnN8YWNvc3xhbHdheXN8YXNpbnxhdGFufGF0YW4yfGNlaWxpbmd8Y2xhbXB8Y29tcGFyZXxjb3N8Y3Vycnl8ZGVncmVlc3xlfGZsaXB8Zmxvb3J8ZnJvbVBvbGFyfGlkZW50aXR5fGlzSW5maW5pdGV8aXNOYU58bG9nQmFzZXxtYXh8bWlufG5lZ2F0ZXxuZXZlcnxub3R8cGl8cmFkaWFuc3xyZW18cm91bmR8c2lufHNxcnR8dGFufHRvRmxvYXR8dG9Qb2xhcnx0b1N0cmluZ3x0cnVuY2F0ZXx0dXJuc3x1bmN1cnJ5fHhvcilcXGIvLFxuICAgIC8vIGRlY2ltYWwgaW50ZWdlcnMgYW5kIGZsb2F0aW5nIHBvaW50IG51bWJlcnMgfCBoZXhhZGVjaW1hbCBpbnRlZ2Vyc1xuICAgIG51bWJlcjogL1xcYig/OlxcZCsoPzpcXC5cXGQrKT8oPzplWystXT9cXGQrKT98MHhbMC05YS1mXSspXFxiL2ksXG4gICAgLy8gTW9zdCBvZiB0aGlzIGlzIG5lZWRlZCBiZWNhdXNlIG9mIHRoZSBtZWFuaW5nIG9mIGEgc2luZ2xlICcuJy5cbiAgICAvLyBJZiBpdCBzdGFuZHMgYWxvbmUgZnJlZWx5LCBpdCBpcyB0aGUgZnVuY3Rpb24gY29tcG9zaXRpb24uXG4gICAgLy8gSXQgbWF5IGFsc28gYmUgYSBzZXBhcmF0b3IgYmV0d2VlbiBhIG1vZHVsZSBuYW1lIGFuZCBhbiBpZGVudGlmaWVyID0+IG5vXG4gICAgLy8gb3BlcmF0b3IuIElmIGl0IGNvbWVzIHRvZ2V0aGVyIHdpdGggb3RoZXIgc3BlY2lhbCBjaGFyYWN0ZXJzIGl0IGlzIGFuXG4gICAgLy8gb3BlcmF0b3IgdG9vLlxuICAgIC8vIFZhbGlkIG9wZXJhdG9yIGNoYXJhY3RlcnMgaW4gMC4xODogKy0vKj0uJDw+OiZ8Xj8lI0B+IVxuICAgIC8vIFJlZjogaHR0cHM6Ly9ncm91cHMuZ29vZ2xlLmNvbS9mb3J1bS8jIW1zZy9lbG0tZGV2LzBBSFNuRGRrU2tRL0UwU1ZVNzBKRVFBSlxuICAgIG9wZXJhdG9yOiAvXFxzXFwuXFxzfFsrXFwtLyo9LiQ8PjomfF4/JSNAfiFdezIsfXxbK1xcLS8qPSQ8PjomfF4/JSNAfiFdLyxcbiAgICAvLyBJbiBFbG0sIG5lYXJseSBldmVyeXRoaW5nIGlzIGEgdmFyaWFibGUsIGRvIG5vdCBoaWdobGlnaHQgdGhlc2UuXG4gICAgaHZhcmlhYmxlOiAvXFxiKD86W0EtWl1cXHcqXFwuKSpbYS16XVxcdypcXGIvLFxuICAgIGNvbnN0YW50OiAvXFxiKD86W0EtWl1cXHcqXFwuKSpbQS1aXVxcdypcXGIvLFxuICAgIHB1bmN0dWF0aW9uOiAvW3t9W1xcXXwoKSwuOl0vXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiZWxtIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJjb21tZW50IiwicGF0dGVybiIsImdyZWVkeSIsInN0cmluZyIsImxvb2tiZWhpbmQiLCJpbnNpZGUiLCJrZXl3b3JkIiwiYnVpbHRpbiIsIm51bWJlciIsIm9wZXJhdG9yIiwiaHZhcmlhYmxlIiwiY29uc3RhbnQiLCJwdW5jdHVhdGlvbiJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/elm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/erb.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/erb.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar refractorRuby = __webpack_require__(/*! ./ruby.js */ \"(ssr)/./node_modules/refractor/lang/ruby.js\");\nvar refractorMarkupTemplating = __webpack_require__(/*! ./markup-templating.js */ \"(ssr)/./node_modules/refractor/lang/markup-templating.js\");\nmodule.exports = erb;\nerb.displayName = 'erb';\nerb.aliases = [];\nfunction erb(Prism) {\n  Prism.register(refractorRuby);\n  Prism.register(refractorMarkupTemplating);\n  (function (Prism) {\n    Prism.languages.erb = {\n      delimiter: {\n        pattern: /^(\\s*)<%=?|%>(?=\\s*$)/,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      ruby: {\n        pattern: /\\s*\\S[\\s\\S]*/,\n        alias: 'language-ruby',\n        inside: Prism.languages.ruby\n      }\n    };\n    Prism.hooks.add('before-tokenize', function (env) {\n      var erbPattern = /<%=?(?:[^\\r\\n]|[\\r\\n](?!=begin)|[\\r\\n]=begin\\s(?:[^\\r\\n]|[\\r\\n](?!=end))*[\\r\\n]=end)+?%>/g;\n      Prism.languages['markup-templating'].buildPlaceholders(env, 'erb', erbPattern);\n    });\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'erb');\n    });\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvZXJiLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUNaLElBQUlBLGFBQWEsR0FBR0MsbUJBQU8sQ0FBQyw4REFBVyxDQUFDO0FBQ3hDLElBQUlDLHlCQUF5QixHQUFHRCxtQkFBTyxDQUFDLHdGQUF3QixDQUFDO0FBQ2pFRSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsR0FBRztBQUNwQkEsR0FBRyxDQUFDQyxXQUFXLEdBQUcsS0FBSztBQUN2QkQsR0FBRyxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNoQixTQUFTRixHQUFHQSxDQUFDRyxLQUFLLEVBQUU7RUFDbEJBLEtBQUssQ0FBQ0MsUUFBUSxDQUFDVCxhQUFhLENBQUM7RUFDN0JRLEtBQUssQ0FBQ0MsUUFBUSxDQUFDUCx5QkFBeUIsQ0FBQztFQUN4QyxDQUFDLFVBQVVNLEtBQUssRUFBRTtJQUNqQkEsS0FBSyxDQUFDRSxTQUFTLENBQUNMLEdBQUcsR0FBRztNQUNwQk0sU0FBUyxFQUFFO1FBQ1RDLE9BQU8sRUFBRSx1QkFBdUI7UUFDaENDLFVBQVUsRUFBRSxJQUFJO1FBQ2hCQyxLQUFLLEVBQUU7TUFDVCxDQUFDO01BQ0RDLElBQUksRUFBRTtRQUNKSCxPQUFPLEVBQUUsY0FBYztRQUN2QkUsS0FBSyxFQUFFLGVBQWU7UUFDdEJFLE1BQU0sRUFBRVIsS0FBSyxDQUFDRSxTQUFTLENBQUNLO01BQzFCO0lBQ0YsQ0FBQztJQUNEUCxLQUFLLENBQUNTLEtBQUssQ0FBQ0MsR0FBRyxDQUFDLGlCQUFpQixFQUFFLFVBQVVDLEdBQUcsRUFBRTtNQUNoRCxJQUFJQyxVQUFVLEdBQ1osMkZBQTJGO01BQzdGWixLQUFLLENBQUNFLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDVyxpQkFBaUIsQ0FDcERGLEdBQUcsRUFDSCxLQUFLLEVBQ0xDLFVBQ0YsQ0FBQztJQUNILENBQUMsQ0FBQztJQUNGWixLQUFLLENBQUNTLEtBQUssQ0FBQ0MsR0FBRyxDQUFDLGdCQUFnQixFQUFFLFVBQVVDLEdBQUcsRUFBRTtNQUMvQ1gsS0FBSyxDQUFDRSxTQUFTLENBQUMsbUJBQW1CLENBQUMsQ0FBQ1ksb0JBQW9CLENBQUNILEdBQUcsRUFBRSxLQUFLLENBQUM7SUFDdkUsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxFQUFFWCxLQUFLLENBQUM7QUFDWCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXGVyYi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcbnZhciByZWZyYWN0b3JSdWJ5ID0gcmVxdWlyZSgnLi9ydWJ5LmpzJylcbnZhciByZWZyYWN0b3JNYXJrdXBUZW1wbGF0aW5nID0gcmVxdWlyZSgnLi9tYXJrdXAtdGVtcGxhdGluZy5qcycpXG5tb2R1bGUuZXhwb3J0cyA9IGVyYlxuZXJiLmRpc3BsYXlOYW1lID0gJ2VyYidcbmVyYi5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIGVyYihQcmlzbSkge1xuICBQcmlzbS5yZWdpc3RlcihyZWZyYWN0b3JSdWJ5KVxuICBQcmlzbS5yZWdpc3RlcihyZWZyYWN0b3JNYXJrdXBUZW1wbGF0aW5nKVxuICA7KGZ1bmN0aW9uIChQcmlzbSkge1xuICAgIFByaXNtLmxhbmd1YWdlcy5lcmIgPSB7XG4gICAgICBkZWxpbWl0ZXI6IHtcbiAgICAgICAgcGF0dGVybjogL14oXFxzKik8JT0/fCU+KD89XFxzKiQpLyxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgYWxpYXM6ICdwdW5jdHVhdGlvbidcbiAgICAgIH0sXG4gICAgICBydWJ5OiB7XG4gICAgICAgIHBhdHRlcm46IC9cXHMqXFxTW1xcc1xcU10qLyxcbiAgICAgICAgYWxpYXM6ICdsYW5ndWFnZS1ydWJ5JyxcbiAgICAgICAgaW5zaWRlOiBQcmlzbS5sYW5ndWFnZXMucnVieVxuICAgICAgfVxuICAgIH1cbiAgICBQcmlzbS5ob29rcy5hZGQoJ2JlZm9yZS10b2tlbml6ZScsIGZ1bmN0aW9uIChlbnYpIHtcbiAgICAgIHZhciBlcmJQYXR0ZXJuID1cbiAgICAgICAgLzwlPT8oPzpbXlxcclxcbl18W1xcclxcbl0oPyE9YmVnaW4pfFtcXHJcXG5dPWJlZ2luXFxzKD86W15cXHJcXG5dfFtcXHJcXG5dKD8hPWVuZCkpKltcXHJcXG5dPWVuZCkrPyU+L2dcbiAgICAgIFByaXNtLmxhbmd1YWdlc1snbWFya3VwLXRlbXBsYXRpbmcnXS5idWlsZFBsYWNlaG9sZGVycyhcbiAgICAgICAgZW52LFxuICAgICAgICAnZXJiJyxcbiAgICAgICAgZXJiUGF0dGVyblxuICAgICAgKVxuICAgIH0pXG4gICAgUHJpc20uaG9va3MuYWRkKCdhZnRlci10b2tlbml6ZScsIGZ1bmN0aW9uIChlbnYpIHtcbiAgICAgIFByaXNtLmxhbmd1YWdlc1snbWFya3VwLXRlbXBsYXRpbmcnXS50b2tlbml6ZVBsYWNlaG9sZGVycyhlbnYsICdlcmInKVxuICAgIH0pXG4gIH0pKFByaXNtKVxufVxuIl0sIm5hbWVzIjpbInJlZnJhY3RvclJ1YnkiLCJyZXF1aXJlIiwicmVmcmFjdG9yTWFya3VwVGVtcGxhdGluZyIsIm1vZHVsZSIsImV4cG9ydHMiLCJlcmIiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsInJlZ2lzdGVyIiwibGFuZ3VhZ2VzIiwiZGVsaW1pdGVyIiwicGF0dGVybiIsImxvb2tiZWhpbmQiLCJhbGlhcyIsInJ1YnkiLCJpbnNpZGUiLCJob29rcyIsImFkZCIsImVudiIsImVyYlBhdHRlcm4iLCJidWlsZFBsYWNlaG9sZGVycyIsInRva2VuaXplUGxhY2Vob2xkZXJzIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/erb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/erlang.js":
/*!***********************************************!*\
  !*** ./node_modules/refractor/lang/erlang.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = erlang;\nerlang.displayName = 'erlang';\nerlang.aliases = [];\nfunction erlang(Prism) {\n  Prism.languages.erlang = {\n    comment: /%.+/,\n    string: {\n      pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n      greedy: true\n    },\n    'quoted-function': {\n      pattern: /'(?:\\\\.|[^\\\\'\\r\\n])+'(?=\\()/,\n      alias: 'function'\n    },\n    'quoted-atom': {\n      pattern: /'(?:\\\\.|[^\\\\'\\r\\n])+'/,\n      alias: 'atom'\n    },\n    \"boolean\": /\\b(?:false|true)\\b/,\n    keyword: /\\b(?:after|case|catch|end|fun|if|of|receive|try|when)\\b/,\n    number: [/\\$\\\\?./, /\\b\\d+#[a-z0-9]+/i, /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i],\n    \"function\": /\\b[a-z][\\w@]*(?=\\()/,\n    variable: {\n      // Look-behind is used to prevent wrong highlighting of atoms containing \"@\"\n      pattern: /(^|[^@])(?:\\b|\\?)[A-Z_][\\w@]*/,\n      lookbehind: true\n    },\n    operator: [/[=\\/<>:]=|=[:\\/]=|\\+\\+?|--?|[=*\\/!]|\\b(?:and|andalso|band|bnot|bor|bsl|bsr|bxor|div|not|or|orelse|rem|xor)\\b/, {\n      // We don't want to match <<\n      pattern: /(^|[^<])<(?!<)/,\n      lookbehind: true\n    }, {\n      // We don't want to match >>\n      pattern: /(^|[^>])>(?!>)/,\n      lookbehind: true\n    }],\n    atom: /\\b[a-z][\\w@]*/,\n    punctuation: /[()[\\]{}:;,.#|]|<<|>>/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvZXJsYW5nLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsTUFBTTtBQUN2QkEsTUFBTSxDQUFDQyxXQUFXLEdBQUcsUUFBUTtBQUM3QkQsTUFBTSxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNuQixTQUFTRixNQUFNQSxDQUFDRyxLQUFLLEVBQUU7RUFDckJBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixNQUFNLEdBQUc7SUFDdkJLLE9BQU8sRUFBRSxLQUFLO0lBQ2RDLE1BQU0sRUFBRTtNQUNOQyxPQUFPLEVBQUUsdUJBQXVCO01BQ2hDQyxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0QsaUJBQWlCLEVBQUU7TUFDakJELE9BQU8sRUFBRSw2QkFBNkI7TUFDdENFLEtBQUssRUFBRTtJQUNULENBQUM7SUFDRCxhQUFhLEVBQUU7TUFDYkYsT0FBTyxFQUFFLHVCQUF1QjtNQUNoQ0UsS0FBSyxFQUFFO0lBQ1QsQ0FBQztJQUNELFdBQVMsb0JBQW9CO0lBQzdCQyxPQUFPLEVBQUUseURBQXlEO0lBQ2xFQyxNQUFNLEVBQUUsQ0FDTixRQUFRLEVBQ1Isa0JBQWtCLEVBQ2xCLDRDQUE0QyxDQUM3QztJQUNELFlBQVUscUJBQXFCO0lBQy9CQyxRQUFRLEVBQUU7TUFDUjtNQUNBTCxPQUFPLEVBQUUsK0JBQStCO01BQ3hDTSxVQUFVLEVBQUU7SUFDZCxDQUFDO0lBQ0RDLFFBQVEsRUFBRSxDQUNSLDhHQUE4RyxFQUM5RztNQUNFO01BQ0FQLE9BQU8sRUFBRSxnQkFBZ0I7TUFDekJNLFVBQVUsRUFBRTtJQUNkLENBQUMsRUFDRDtNQUNFO01BQ0FOLE9BQU8sRUFBRSxnQkFBZ0I7TUFDekJNLFVBQVUsRUFBRTtJQUNkLENBQUMsQ0FDRjtJQUNERSxJQUFJLEVBQUUsZUFBZTtJQUNyQkMsV0FBVyxFQUFFO0VBQ2YsQ0FBQztBQUNIIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcZXJsYW5nLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGVybGFuZ1xuZXJsYW5nLmRpc3BsYXlOYW1lID0gJ2VybGFuZydcbmVybGFuZy5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIGVybGFuZyhQcmlzbSkge1xuICBQcmlzbS5sYW5ndWFnZXMuZXJsYW5nID0ge1xuICAgIGNvbW1lbnQ6IC8lLisvLFxuICAgIHN0cmluZzoge1xuICAgICAgcGF0dGVybjogL1wiKD86XFxcXC58W15cXFxcXCJcXHJcXG5dKSpcIi8sXG4gICAgICBncmVlZHk6IHRydWVcbiAgICB9LFxuICAgICdxdW90ZWQtZnVuY3Rpb24nOiB7XG4gICAgICBwYXR0ZXJuOiAvJyg/OlxcXFwufFteXFxcXCdcXHJcXG5dKSsnKD89XFwoKS8sXG4gICAgICBhbGlhczogJ2Z1bmN0aW9uJ1xuICAgIH0sXG4gICAgJ3F1b3RlZC1hdG9tJzoge1xuICAgICAgcGF0dGVybjogLycoPzpcXFxcLnxbXlxcXFwnXFxyXFxuXSkrJy8sXG4gICAgICBhbGlhczogJ2F0b20nXG4gICAgfSxcbiAgICBib29sZWFuOiAvXFxiKD86ZmFsc2V8dHJ1ZSlcXGIvLFxuICAgIGtleXdvcmQ6IC9cXGIoPzphZnRlcnxjYXNlfGNhdGNofGVuZHxmdW58aWZ8b2Z8cmVjZWl2ZXx0cnl8d2hlbilcXGIvLFxuICAgIG51bWJlcjogW1xuICAgICAgL1xcJFxcXFw/Li8sXG4gICAgICAvXFxiXFxkKyNbYS16MC05XSsvaSxcbiAgICAgIC8oPzpcXGJcXGQrKD86XFwuXFxkKik/fFxcQlxcLlxcZCspKD86ZVsrLV0/XFxkKyk/L2lcbiAgICBdLFxuICAgIGZ1bmN0aW9uOiAvXFxiW2Etel1bXFx3QF0qKD89XFwoKS8sXG4gICAgdmFyaWFibGU6IHtcbiAgICAgIC8vIExvb2stYmVoaW5kIGlzIHVzZWQgdG8gcHJldmVudCB3cm9uZyBoaWdobGlnaHRpbmcgb2YgYXRvbXMgY29udGFpbmluZyBcIkBcIlxuICAgICAgcGF0dGVybjogLyhefFteQF0pKD86XFxifFxcPylbQS1aX11bXFx3QF0qLyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICB9LFxuICAgIG9wZXJhdG9yOiBbXG4gICAgICAvWz1cXC88PjpdPXw9WzpcXC9dPXxcXCtcXCs/fC0tP3xbPSpcXC8hXXxcXGIoPzphbmR8YW5kYWxzb3xiYW5kfGJub3R8Ym9yfGJzbHxic3J8YnhvcnxkaXZ8bm90fG9yfG9yZWxzZXxyZW18eG9yKVxcYi8sXG4gICAgICB7XG4gICAgICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gbWF0Y2ggPDxcbiAgICAgICAgcGF0dGVybjogLyhefFtePF0pPCg/ITwpLyxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgLy8gV2UgZG9uJ3Qgd2FudCB0byBtYXRjaCA+PlxuICAgICAgICBwYXR0ZXJuOiAvKF58W14+XSk+KD8hPikvLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICB9XG4gICAgXSxcbiAgICBhdG9tOiAvXFxiW2Etel1bXFx3QF0qLyxcbiAgICBwdW5jdHVhdGlvbjogL1soKVtcXF17fTo7LC4jfF18PDx8Pj4vXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiZXJsYW5nIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJjb21tZW50Iiwic3RyaW5nIiwicGF0dGVybiIsImdyZWVkeSIsImFsaWFzIiwia2V5d29yZCIsIm51bWJlciIsInZhcmlhYmxlIiwibG9va2JlaGluZCIsIm9wZXJhdG9yIiwiYXRvbSIsInB1bmN0dWF0aW9uIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/erlang.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/etlua.js":
/*!**********************************************!*\
  !*** ./node_modules/refractor/lang/etlua.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar refractorLua = __webpack_require__(/*! ./lua.js */ \"(ssr)/./node_modules/refractor/lang/lua.js\");\nvar refractorMarkupTemplating = __webpack_require__(/*! ./markup-templating.js */ \"(ssr)/./node_modules/refractor/lang/markup-templating.js\");\nmodule.exports = etlua;\netlua.displayName = 'etlua';\netlua.aliases = [];\nfunction etlua(Prism) {\n  Prism.register(refractorLua);\n  Prism.register(refractorMarkupTemplating);\n  (function (Prism) {\n    Prism.languages.etlua = {\n      delimiter: {\n        pattern: /^<%[-=]?|-?%>$/,\n        alias: 'punctuation'\n      },\n      'language-lua': {\n        pattern: /[\\s\\S]+/,\n        inside: Prism.languages.lua\n      }\n    };\n    Prism.hooks.add('before-tokenize', function (env) {\n      var pattern = /<%[\\s\\S]+?%>/g;\n      Prism.languages['markup-templating'].buildPlaceholders(env, 'etlua', pattern);\n    });\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'etlua');\n    });\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvZXRsdWEuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBQ1osSUFBSUEsWUFBWSxHQUFHQyxtQkFBTyxDQUFDLDREQUFVLENBQUM7QUFDdEMsSUFBSUMseUJBQXlCLEdBQUdELG1CQUFPLENBQUMsd0ZBQXdCLENBQUM7QUFDakVFLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxLQUFLO0FBQ3RCQSxLQUFLLENBQUNDLFdBQVcsR0FBRyxPQUFPO0FBQzNCRCxLQUFLLENBQUNFLE9BQU8sR0FBRyxFQUFFO0FBQ2xCLFNBQVNGLEtBQUtBLENBQUNHLEtBQUssRUFBRTtFQUNwQkEsS0FBSyxDQUFDQyxRQUFRLENBQUNULFlBQVksQ0FBQztFQUM1QlEsS0FBSyxDQUFDQyxRQUFRLENBQUNQLHlCQUF5QixDQUFDO0VBQ3hDLENBQUMsVUFBVU0sS0FBSyxFQUFFO0lBQ2pCQSxLQUFLLENBQUNFLFNBQVMsQ0FBQ0wsS0FBSyxHQUFHO01BQ3RCTSxTQUFTLEVBQUU7UUFDVEMsT0FBTyxFQUFFLGdCQUFnQjtRQUN6QkMsS0FBSyxFQUFFO01BQ1QsQ0FBQztNQUNELGNBQWMsRUFBRTtRQUNkRCxPQUFPLEVBQUUsU0FBUztRQUNsQkUsTUFBTSxFQUFFTixLQUFLLENBQUNFLFNBQVMsQ0FBQ0s7TUFDMUI7SUFDRixDQUFDO0lBQ0RQLEtBQUssQ0FBQ1EsS0FBSyxDQUFDQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsVUFBVUMsR0FBRyxFQUFFO01BQ2hELElBQUlOLE9BQU8sR0FBRyxlQUFlO01BQzdCSixLQUFLLENBQUNFLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDUyxpQkFBaUIsQ0FDcERELEdBQUcsRUFDSCxPQUFPLEVBQ1BOLE9BQ0YsQ0FBQztJQUNILENBQUMsQ0FBQztJQUNGSixLQUFLLENBQUNRLEtBQUssQ0FBQ0MsR0FBRyxDQUFDLGdCQUFnQixFQUFFLFVBQVVDLEdBQUcsRUFBRTtNQUMvQ1YsS0FBSyxDQUFDRSxTQUFTLENBQUMsbUJBQW1CLENBQUMsQ0FBQ1Usb0JBQW9CLENBQUNGLEdBQUcsRUFBRSxPQUFPLENBQUM7SUFDekUsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxFQUFFVixLQUFLLENBQUM7QUFDWCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXGV0bHVhLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xudmFyIHJlZnJhY3Rvckx1YSA9IHJlcXVpcmUoJy4vbHVhLmpzJylcbnZhciByZWZyYWN0b3JNYXJrdXBUZW1wbGF0aW5nID0gcmVxdWlyZSgnLi9tYXJrdXAtdGVtcGxhdGluZy5qcycpXG5tb2R1bGUuZXhwb3J0cyA9IGV0bHVhXG5ldGx1YS5kaXNwbGF5TmFtZSA9ICdldGx1YSdcbmV0bHVhLmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24gZXRsdWEoUHJpc20pIHtcbiAgUHJpc20ucmVnaXN0ZXIocmVmcmFjdG9yTHVhKVxuICBQcmlzbS5yZWdpc3RlcihyZWZyYWN0b3JNYXJrdXBUZW1wbGF0aW5nKVxuICA7KGZ1bmN0aW9uIChQcmlzbSkge1xuICAgIFByaXNtLmxhbmd1YWdlcy5ldGx1YSA9IHtcbiAgICAgIGRlbGltaXRlcjoge1xuICAgICAgICBwYXR0ZXJuOiAvXjwlWy09XT98LT8lPiQvLFxuICAgICAgICBhbGlhczogJ3B1bmN0dWF0aW9uJ1xuICAgICAgfSxcbiAgICAgICdsYW5ndWFnZS1sdWEnOiB7XG4gICAgICAgIHBhdHRlcm46IC9bXFxzXFxTXSsvLFxuICAgICAgICBpbnNpZGU6IFByaXNtLmxhbmd1YWdlcy5sdWFcbiAgICAgIH1cbiAgICB9XG4gICAgUHJpc20uaG9va3MuYWRkKCdiZWZvcmUtdG9rZW5pemUnLCBmdW5jdGlvbiAoZW52KSB7XG4gICAgICB2YXIgcGF0dGVybiA9IC88JVtcXHNcXFNdKz8lPi9nXG4gICAgICBQcmlzbS5sYW5ndWFnZXNbJ21hcmt1cC10ZW1wbGF0aW5nJ10uYnVpbGRQbGFjZWhvbGRlcnMoXG4gICAgICAgIGVudixcbiAgICAgICAgJ2V0bHVhJyxcbiAgICAgICAgcGF0dGVyblxuICAgICAgKVxuICAgIH0pXG4gICAgUHJpc20uaG9va3MuYWRkKCdhZnRlci10b2tlbml6ZScsIGZ1bmN0aW9uIChlbnYpIHtcbiAgICAgIFByaXNtLmxhbmd1YWdlc1snbWFya3VwLXRlbXBsYXRpbmcnXS50b2tlbml6ZVBsYWNlaG9sZGVycyhlbnYsICdldGx1YScpXG4gICAgfSlcbiAgfSkoUHJpc20pXG59XG4iXSwibmFtZXMiOlsicmVmcmFjdG9yTHVhIiwicmVxdWlyZSIsInJlZnJhY3Rvck1hcmt1cFRlbXBsYXRpbmciLCJtb2R1bGUiLCJleHBvcnRzIiwiZXRsdWEiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsInJlZ2lzdGVyIiwibGFuZ3VhZ2VzIiwiZGVsaW1pdGVyIiwicGF0dGVybiIsImFsaWFzIiwiaW5zaWRlIiwibHVhIiwiaG9va3MiLCJhZGQiLCJlbnYiLCJidWlsZFBsYWNlaG9sZGVycyIsInRva2VuaXplUGxhY2Vob2xkZXJzIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/etlua.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/excel-formula.js":
/*!******************************************************!*\
  !*** ./node_modules/refractor/lang/excel-formula.js ***!
  \******************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = excelFormula;\nexcelFormula.displayName = 'excelFormula';\nexcelFormula.aliases = [];\nfunction excelFormula(Prism) {\n  Prism.languages['excel-formula'] = {\n    comment: {\n      pattern: /(\\bN\\(\\s*)\"(?:[^\"]|\"\")*\"(?=\\s*\\))/i,\n      lookbehind: true,\n      greedy: true\n    },\n    string: {\n      pattern: /\"(?:[^\"]|\"\")*\"(?!\")/,\n      greedy: true\n    },\n    reference: {\n      // https://www.ablebits.com/office-addins-blog/2015/12/08/excel-reference-another-sheet-workbook/\n      // Sales!B2\n      // 'Winter sales'!B2\n      // [Sales.xlsx]Jan!B2:B5\n      // D:\\Reports\\[Sales.xlsx]Jan!B2:B5\n      // '[Sales.xlsx]Jan sales'!B2:B5\n      // 'D:\\Reports\\[Sales.xlsx]Jan sales'!B2:B5\n      pattern: /(?:'[^']*'|(?:[^\\s()[\\]{}<>*?\"';,$&]*\\[[^^\\s()[\\]{}<>*?\"']+\\])?\\w+)!/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        operator: /!$/,\n        punctuation: /'/,\n        sheet: {\n          pattern: /[^[\\]]+$/,\n          alias: 'function'\n        },\n        file: {\n          pattern: /\\[[^[\\]]+\\]$/,\n          inside: {\n            punctuation: /[[\\]]/\n          }\n        },\n        path: /[\\s\\S]+/\n      }\n    },\n    'function-name': {\n      pattern: /\\b[A-Z]\\w*(?=\\()/i,\n      alias: 'keyword'\n    },\n    range: {\n      pattern: /\\$?\\b(?:[A-Z]+\\$?\\d+:\\$?[A-Z]+\\$?\\d+|[A-Z]+:\\$?[A-Z]+|\\d+:\\$?\\d+)\\b/i,\n      alias: 'property',\n      inside: {\n        operator: /:/,\n        cell: /\\$?[A-Z]+\\$?\\d+/i,\n        column: /\\$?[A-Z]+/i,\n        row: /\\$?\\d+/\n      }\n    },\n    cell: {\n      // Excel is case insensitive, so the string \"foo1\" could be either a variable or a cell.\n      // To combat this, we match cells case insensitive, if the contain at least one \"$\", and case sensitive otherwise.\n      pattern: /\\b[A-Z]+\\d+\\b|\\$[A-Za-z]+\\$?\\d+\\b|\\b[A-Za-z]+\\$\\d+\\b/,\n      alias: 'property'\n    },\n    number: /(?:\\b\\d+(?:\\.\\d+)?|\\B\\.\\d+)(?:e[+-]?\\d+)?\\b/i,\n    \"boolean\": /\\b(?:FALSE|TRUE)\\b/i,\n    operator: /[-+*/^%=&,]|<[=>]?|>=?/,\n    punctuation: /[[\\]();{}|]/\n  };\n  Prism.languages['xlsx'] = Prism.languages['xls'] = Prism.languages['excel-formula'];\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvZXhjZWwtZm9ybXVsYS5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLFlBQVk7QUFDN0JBLFlBQVksQ0FBQ0MsV0FBVyxHQUFHLGNBQWM7QUFDekNELFlBQVksQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDekIsU0FBU0YsWUFBWUEsQ0FBQ0csS0FBSyxFQUFFO0VBQzNCQSxLQUFLLENBQUNDLFNBQVMsQ0FBQyxlQUFlLENBQUMsR0FBRztJQUNqQ0MsT0FBTyxFQUFFO01BQ1BDLE9BQU8sRUFBRSxvQ0FBb0M7TUFDN0NDLFVBQVUsRUFBRSxJQUFJO01BQ2hCQyxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0RDLE1BQU0sRUFBRTtNQUNOSCxPQUFPLEVBQUUscUJBQXFCO01BQzlCRSxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0RFLFNBQVMsRUFBRTtNQUNUO01BQ0E7TUFDQTtNQUNBO01BQ0E7TUFDQTtNQUNBO01BQ0FKLE9BQU8sRUFDTCxzRUFBc0U7TUFDeEVFLE1BQU0sRUFBRSxJQUFJO01BQ1pHLEtBQUssRUFBRSxRQUFRO01BQ2ZDLE1BQU0sRUFBRTtRQUNOQyxRQUFRLEVBQUUsSUFBSTtRQUNkQyxXQUFXLEVBQUUsR0FBRztRQUNoQkMsS0FBSyxFQUFFO1VBQ0xULE9BQU8sRUFBRSxVQUFVO1VBQ25CSyxLQUFLLEVBQUU7UUFDVCxDQUFDO1FBQ0RLLElBQUksRUFBRTtVQUNKVixPQUFPLEVBQUUsY0FBYztVQUN2Qk0sTUFBTSxFQUFFO1lBQ05FLFdBQVcsRUFBRTtVQUNmO1FBQ0YsQ0FBQztRQUNERyxJQUFJLEVBQUU7TUFDUjtJQUNGLENBQUM7SUFDRCxlQUFlLEVBQUU7TUFDZlgsT0FBTyxFQUFFLG1CQUFtQjtNQUM1QkssS0FBSyxFQUFFO0lBQ1QsQ0FBQztJQUNETyxLQUFLLEVBQUU7TUFDTFosT0FBTyxFQUNMLHNFQUFzRTtNQUN4RUssS0FBSyxFQUFFLFVBQVU7TUFDakJDLE1BQU0sRUFBRTtRQUNOQyxRQUFRLEVBQUUsR0FBRztRQUNiTSxJQUFJLEVBQUUsa0JBQWtCO1FBQ3hCQyxNQUFNLEVBQUUsWUFBWTtRQUNwQkMsR0FBRyxFQUFFO01BQ1A7SUFDRixDQUFDO0lBQ0RGLElBQUksRUFBRTtNQUNKO01BQ0E7TUFDQWIsT0FBTyxFQUFFLHNEQUFzRDtNQUMvREssS0FBSyxFQUFFO0lBQ1QsQ0FBQztJQUNEVyxNQUFNLEVBQUUsOENBQThDO0lBQ3RELFdBQVMscUJBQXFCO0lBQzlCVCxRQUFRLEVBQUUsd0JBQXdCO0lBQ2xDQyxXQUFXLEVBQUU7RUFDZixDQUFDO0VBQ0RYLEtBQUssQ0FBQ0MsU0FBUyxDQUFDLE1BQU0sQ0FBQyxHQUFHRCxLQUFLLENBQUNDLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FDOUNELEtBQUssQ0FBQ0MsU0FBUyxDQUFDLGVBQWUsQ0FBQztBQUNwQyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXGV4Y2VsLWZvcm11bGEuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gZXhjZWxGb3JtdWxhXG5leGNlbEZvcm11bGEuZGlzcGxheU5hbWUgPSAnZXhjZWxGb3JtdWxhJ1xuZXhjZWxGb3JtdWxhLmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24gZXhjZWxGb3JtdWxhKFByaXNtKSB7XG4gIFByaXNtLmxhbmd1YWdlc1snZXhjZWwtZm9ybXVsYSddID0ge1xuICAgIGNvbW1lbnQ6IHtcbiAgICAgIHBhdHRlcm46IC8oXFxiTlxcKFxccyopXCIoPzpbXlwiXXxcIlwiKSpcIig/PVxccypcXCkpL2ksXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICBzdHJpbmc6IHtcbiAgICAgIHBhdHRlcm46IC9cIig/OlteXCJdfFwiXCIpKlwiKD8hXCIpLyxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgcmVmZXJlbmNlOiB7XG4gICAgICAvLyBodHRwczovL3d3dy5hYmxlYml0cy5jb20vb2ZmaWNlLWFkZGlucy1ibG9nLzIwMTUvMTIvMDgvZXhjZWwtcmVmZXJlbmNlLWFub3RoZXItc2hlZXQtd29ya2Jvb2svXG4gICAgICAvLyBTYWxlcyFCMlxuICAgICAgLy8gJ1dpbnRlciBzYWxlcychQjJcbiAgICAgIC8vIFtTYWxlcy54bHN4XUphbiFCMjpCNVxuICAgICAgLy8gRDpcXFJlcG9ydHNcXFtTYWxlcy54bHN4XUphbiFCMjpCNVxuICAgICAgLy8gJ1tTYWxlcy54bHN4XUphbiBzYWxlcychQjI6QjVcbiAgICAgIC8vICdEOlxcUmVwb3J0c1xcW1NhbGVzLnhsc3hdSmFuIHNhbGVzJyFCMjpCNVxuICAgICAgcGF0dGVybjpcbiAgICAgICAgLyg/OidbXiddKid8KD86W15cXHMoKVtcXF17fTw+Kj9cIic7LCQmXSpcXFtbXl5cXHMoKVtcXF17fTw+Kj9cIiddK1xcXSk/XFx3KykhLyxcbiAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgIGFsaWFzOiAnc3RyaW5nJyxcbiAgICAgIGluc2lkZToge1xuICAgICAgICBvcGVyYXRvcjogLyEkLyxcbiAgICAgICAgcHVuY3R1YXRpb246IC8nLyxcbiAgICAgICAgc2hlZXQ6IHtcbiAgICAgICAgICBwYXR0ZXJuOiAvW15bXFxdXSskLyxcbiAgICAgICAgICBhbGlhczogJ2Z1bmN0aW9uJ1xuICAgICAgICB9LFxuICAgICAgICBmaWxlOiB7XG4gICAgICAgICAgcGF0dGVybjogL1xcW1teW1xcXV0rXFxdJC8sXG4gICAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgICBwdW5jdHVhdGlvbjogL1tbXFxdXS9cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHBhdGg6IC9bXFxzXFxTXSsvXG4gICAgICB9XG4gICAgfSxcbiAgICAnZnVuY3Rpb24tbmFtZSc6IHtcbiAgICAgIHBhdHRlcm46IC9cXGJbQS1aXVxcdyooPz1cXCgpL2ksXG4gICAgICBhbGlhczogJ2tleXdvcmQnXG4gICAgfSxcbiAgICByYW5nZToge1xuICAgICAgcGF0dGVybjpcbiAgICAgICAgL1xcJD9cXGIoPzpbQS1aXStcXCQ/XFxkKzpcXCQ/W0EtWl0rXFwkP1xcZCt8W0EtWl0rOlxcJD9bQS1aXSt8XFxkKzpcXCQ/XFxkKylcXGIvaSxcbiAgICAgIGFsaWFzOiAncHJvcGVydHknLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgIG9wZXJhdG9yOiAvOi8sXG4gICAgICAgIGNlbGw6IC9cXCQ/W0EtWl0rXFwkP1xcZCsvaSxcbiAgICAgICAgY29sdW1uOiAvXFwkP1tBLVpdKy9pLFxuICAgICAgICByb3c6IC9cXCQ/XFxkKy9cbiAgICAgIH1cbiAgICB9LFxuICAgIGNlbGw6IHtcbiAgICAgIC8vIEV4Y2VsIGlzIGNhc2UgaW5zZW5zaXRpdmUsIHNvIHRoZSBzdHJpbmcgXCJmb28xXCIgY291bGQgYmUgZWl0aGVyIGEgdmFyaWFibGUgb3IgYSBjZWxsLlxuICAgICAgLy8gVG8gY29tYmF0IHRoaXMsIHdlIG1hdGNoIGNlbGxzIGNhc2UgaW5zZW5zaXRpdmUsIGlmIHRoZSBjb250YWluIGF0IGxlYXN0IG9uZSBcIiRcIiwgYW5kIGNhc2Ugc2Vuc2l0aXZlIG90aGVyd2lzZS5cbiAgICAgIHBhdHRlcm46IC9cXGJbQS1aXStcXGQrXFxifFxcJFtBLVphLXpdK1xcJD9cXGQrXFxifFxcYltBLVphLXpdK1xcJFxcZCtcXGIvLFxuICAgICAgYWxpYXM6ICdwcm9wZXJ0eSdcbiAgICB9LFxuICAgIG51bWJlcjogLyg/OlxcYlxcZCsoPzpcXC5cXGQrKT98XFxCXFwuXFxkKykoPzplWystXT9cXGQrKT9cXGIvaSxcbiAgICBib29sZWFuOiAvXFxiKD86RkFMU0V8VFJVRSlcXGIvaSxcbiAgICBvcGVyYXRvcjogL1stKyovXiU9JixdfDxbPT5dP3w+PT8vLFxuICAgIHB1bmN0dWF0aW9uOiAvW1tcXF0oKTt7fXxdL1xuICB9XG4gIFByaXNtLmxhbmd1YWdlc1sneGxzeCddID0gUHJpc20ubGFuZ3VhZ2VzWyd4bHMnXSA9XG4gICAgUHJpc20ubGFuZ3VhZ2VzWydleGNlbC1mb3JtdWxhJ11cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiZXhjZWxGb3JtdWxhIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJjb21tZW50IiwicGF0dGVybiIsImxvb2tiZWhpbmQiLCJncmVlZHkiLCJzdHJpbmciLCJyZWZlcmVuY2UiLCJhbGlhcyIsImluc2lkZSIsIm9wZXJhdG9yIiwicHVuY3R1YXRpb24iLCJzaGVldCIsImZpbGUiLCJwYXRoIiwicmFuZ2UiLCJjZWxsIiwiY29sdW1uIiwicm93IiwibnVtYmVyIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/excel-formula.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/factor.js":
/*!***********************************************!*\
  !*** ./node_modules/refractor/lang/factor.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = factor;\nfactor.displayName = 'factor';\nfactor.aliases = [];\nfunction factor(Prism) {\n  ;\n  (function (Prism) {\n    var comment_inside = {\n      \"function\": /\\b(?:BUGS?|FIX(?:MES?)?|NOTES?|TODOS?|XX+|HACKS?|WARN(?:ING)?|\\?{2,}|!{2,})\\b/\n    };\n    var string_inside = {\n      number: /\\\\[^\\s']|%\\w/\n    };\n    var factor = {\n      comment: [{\n        // ! single-line exclamation point comments with whitespace after/around the !\n        pattern: /(^|\\s)(?:! .*|!$)/,\n        lookbehind: true,\n        inside: comment_inside\n      }, /* from basis/multiline: */\n      {\n        // /* comment */, /* comment*/\n        pattern: /(^|\\s)\\/\\*\\s[\\s\\S]*?\\*\\/(?=\\s|$)/,\n        lookbehind: true,\n        greedy: true,\n        inside: comment_inside\n      }, {\n        // ![[ comment ]] , ![===[ comment]===]\n        pattern: /(^|\\s)!\\[(={0,6})\\[\\s[\\s\\S]*?\\]\\2\\](?=\\s|$)/,\n        lookbehind: true,\n        greedy: true,\n        inside: comment_inside\n      }],\n      number: [{\n        // basic base 10 integers 9, -9\n        pattern: /(^|\\s)[+-]?\\d+(?=\\s|$)/,\n        lookbehind: true\n      }, {\n        // base prefix integers 0b010 0o70 0xad 0d10 0XAD -0xa9\n        pattern: /(^|\\s)[+-]?0(?:b[01]+|o[0-7]+|d\\d+|x[\\dA-F]+)(?=\\s|$)/i,\n        lookbehind: true\n      }, {\n        // fractional ratios 1/5 -1/5 and the literal float approximations 1/5. -1/5.\n        pattern: /(^|\\s)[+-]?\\d+\\/\\d+\\.?(?=\\s|$)/,\n        lookbehind: true\n      }, {\n        // positive mixed numbers 23+1/5 +23+1/5\n        pattern: /(^|\\s)\\+?\\d+\\+\\d+\\/\\d+(?=\\s|$)/,\n        lookbehind: true\n      }, {\n        // negative mixed numbers -23-1/5\n        pattern: /(^|\\s)-\\d+-\\d+\\/\\d+(?=\\s|$)/,\n        lookbehind: true\n      }, {\n        // basic decimal floats -0.01 0. .0 .1 -.1 -1. -12.13 +12.13\n        // and scientific notation with base 10 exponents 3e4 3e-4 .3e-4\n        pattern: /(^|\\s)[+-]?(?:\\d*\\.\\d+|\\d+\\.\\d*|\\d+)(?:e[+-]?\\d+)?(?=\\s|$)/i,\n        lookbehind: true\n      }, {\n        // NAN literal syntax NAN: 80000deadbeef, NAN: a\n        pattern: /(^|\\s)NAN:\\s+[\\da-fA-F]+(?=\\s|$)/,\n        lookbehind: true\n      }, {\n        /*\n        base prefix floats 0x1.0p3 (8.0) 0b1.010p2 (5.0) 0x1.p1 0b1.11111111p11111...\n        \"The normalized hex form ±0x1.MMMMMMMMMMMMM[pP]±EEEE allows any floating-point number to be specified precisely.\n        The values of MMMMMMMMMMMMM and EEEE map directly to the mantissa and exponent fields of the binary IEEE 754 representation.\"\n        <https://docs.factorcode.org/content/article-syntax-floats.html>\n        */\n        pattern: /(^|\\s)[+-]?0(?:b1\\.[01]*|o1\\.[0-7]*|d1\\.\\d*|x1\\.[\\dA-F]*)p\\d+(?=\\s|$)/i,\n        lookbehind: true\n      }],\n      // R/ regexp?\\/\\\\/\n      regexp: {\n        pattern: /(^|\\s)R\\/\\s(?:\\\\\\S|[^\\\\/])*\\/(?:[idmsr]*|[idmsr]+-[idmsr]+)(?=\\s|$)/,\n        lookbehind: true,\n        alias: 'number',\n        inside: {\n          variable: /\\\\\\S/,\n          keyword: /[+?*\\[\\]^$(){}.|]/,\n          operator: {\n            pattern: /(\\/)[idmsr]+(?:-[idmsr]+)?/,\n            lookbehind: true\n          }\n        }\n      },\n      \"boolean\": {\n        pattern: /(^|\\s)[tf](?=\\s|$)/,\n        lookbehind: true\n      },\n      // SBUF\" asd\", URL\" ://...\", P\" /etc/\"\n      'custom-string': {\n        pattern: /(^|\\s)[A-Z0-9\\-]+\"\\s(?:\\\\\\S|[^\"\\\\])*\"/,\n        lookbehind: true,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          number: /\\\\\\S|%\\w|\\//\n        }\n      },\n      'multiline-string': [{\n        // STRING: name \\n content \\n ; -> CONSTANT: name \"content\" (symbol)\n        pattern: /(^|\\s)STRING:\\s+\\S+(?:\\n|\\r\\n).*(?:\\n|\\r\\n)\\s*;(?=\\s|$)/,\n        lookbehind: true,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          number: string_inside.number,\n          // trailing semicolon on its own line\n          'semicolon-or-setlocal': {\n            pattern: /([\\r\\n][ \\t]*);(?=\\s|$)/,\n            lookbehind: true,\n            alias: 'function'\n          }\n        }\n      }, {\n        // HEREDOC: marker \\n content \\n marker ; -> \"content\" (immediate)\n        pattern: /(^|\\s)HEREDOC:\\s+\\S+(?:\\n|\\r\\n).*(?:\\n|\\r\\n)\\s*\\S+(?=\\s|$)/,\n        lookbehind: true,\n        greedy: true,\n        alias: 'string',\n        inside: string_inside\n      }, {\n        // [[ string ]], [==[ string]==]\n        pattern: /(^|\\s)\\[(={0,6})\\[\\s[\\s\\S]*?\\]\\2\\](?=\\s|$)/,\n        lookbehind: true,\n        greedy: true,\n        alias: 'string',\n        inside: string_inside\n      }],\n      'special-using': {\n        pattern: /(^|\\s)USING:(?:\\s\\S+)*(?=\\s+;(?:\\s|$))/,\n        lookbehind: true,\n        alias: 'function',\n        inside: {\n          // this is essentially a regex for vocab names, which i don't want to specify\n          // but the USING: gets picked up as a vocab name\n          string: {\n            pattern: /(\\s)[^:\\s]+/,\n            lookbehind: true\n          }\n        }\n      },\n      /* this description of stack effect literal syntax is not complete and not as specific as theoretically possible\n      trying to do better is more work and regex-computation-time than it's worth though.\n      - we'd like to have the \"delimiter\" parts of the stack effect [ (, --, and ) ] be a different (less-important or comment-like) colour to the stack effect contents\n      - we'd like if nested stack effects were treated as such rather than just appearing flat (with `inside`)\n      - we'd like if the following variable name conventions were recognised specifically:\n      special row variables = ..a b..\n      type and stack effect annotations end with a colon = ( quot: ( a: ( -- ) -- b ) -- x ), ( x: number -- )\n      word throws unconditional error = *\n      any other word-like variable name = a ? q' etc\n      https://docs.factorcode.org/content/article-effects.html\n      these are pretty complicated to highlight properly without a real parser, and therefore out of scope\n      the old pattern, which may be later useful, was: (^|\\s)(?:call|execute|eval)?\\((?:\\s+[^\"\\r\\n\\t ]\\S*)*?\\s+--(?:\\s+[^\"\\n\\t ]\\S*)*?\\s+\\)(?=\\s|$)\n      */\n      // current solution is not great\n      'stack-effect-delimiter': [{\n        // opening parenthesis\n        pattern: /(^|\\s)(?:call|eval|execute)?\\((?=\\s)/,\n        lookbehind: true,\n        alias: 'operator'\n      }, {\n        // middle --\n        pattern: /(\\s)--(?=\\s)/,\n        lookbehind: true,\n        alias: 'operator'\n      }, {\n        // closing parenthesis\n        pattern: /(\\s)\\)(?=\\s|$)/,\n        lookbehind: true,\n        alias: 'operator'\n      }],\n      combinators: {\n        pattern: null,\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      'kernel-builtin': {\n        pattern: null,\n        lookbehind: true,\n        alias: 'variable'\n      },\n      'sequences-builtin': {\n        pattern: null,\n        lookbehind: true,\n        alias: 'variable'\n      },\n      'math-builtin': {\n        pattern: null,\n        lookbehind: true,\n        alias: 'variable'\n      },\n      'constructor-word': {\n        // <array> but not <=>\n        pattern: /(^|\\s)<(?!=+>|-+>)\\S+>(?=\\s|$)/,\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      'other-builtin-syntax': {\n        pattern: null,\n        lookbehind: true,\n        alias: 'operator'\n      },\n      /*\n      full list of supported word naming conventions: (the convention appears outside of the [brackets])\n      set-[x]\n      change-[x]\n      with-[x]\n      new-[x]\n      >[string]\n      [base]>\n      [string]>[number]\n      +[symbol]+\n      [boolean-word]?\n      ?[of]\n      [slot-reader]>>\n      >>[slot-setter]\n      [slot-writer]<<\n      ([implementation-detail])\n      [mutater]!\n      [variant]*\n      [prettyprint].\n      $[help-markup]\n      <constructors>, SYNTAX:, etc are supported by their own patterns.\n      `with` and `new` from `kernel` are their own builtins.\n      see <https://docs.factorcode.org/content/article-conventions.html>\n      */\n      'conventionally-named-word': {\n        pattern: /(^|\\s)(?!\")(?:(?:change|new|set|with)-\\S+|\\$\\S+|>[^>\\s]+|[^:>\\s]+>|[^>\\s]+>[^>\\s]+|\\+[^+\\s]+\\+|[^?\\s]+\\?|\\?[^?\\s]+|[^>\\s]+>>|>>[^>\\s]+|[^<\\s]+<<|\\([^()\\s]+\\)|[^!\\s]+!|[^*\\s]\\S*\\*|[^.\\s]\\S*\\.)(?=\\s|$)/,\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      'colon-syntax': {\n        pattern: /(^|\\s)(?:[A-Z0-9\\-]+#?)?:{1,2}\\s+(?:;\\S+|(?!;)\\S+)(?=\\s|$)/,\n        lookbehind: true,\n        greedy: true,\n        alias: 'function'\n      },\n      'semicolon-or-setlocal': {\n        pattern: /(\\s)(?:;|:>)(?=\\s|$)/,\n        lookbehind: true,\n        alias: 'function'\n      },\n      // do not highlight leading } or trailing X{ at the begin/end of the file as it's invalid syntax\n      'curly-brace-literal-delimiter': [{\n        // opening\n        pattern: /(^|\\s)[a-z]*\\{(?=\\s)/i,\n        lookbehind: true,\n        alias: 'operator'\n      }, {\n        // closing\n        pattern: /(\\s)\\}(?=\\s|$)/,\n        lookbehind: true,\n        alias: 'operator'\n      }],\n      // do not highlight leading ] or trailing [ at the begin/end of the file as it's invalid syntax\n      'quotation-delimiter': [{\n        // opening\n        pattern: /(^|\\s)\\[(?=\\s)/,\n        lookbehind: true,\n        alias: 'operator'\n      }, {\n        // closing\n        pattern: /(\\s)\\](?=\\s|$)/,\n        lookbehind: true,\n        alias: 'operator'\n      }],\n      'normal-word': {\n        pattern: /(^|\\s)[^\"\\s]\\S*(?=\\s|$)/,\n        lookbehind: true\n      },\n      /*\n      basic first-class string \"a\"\n      with escaped double-quote \"a\\\"\"\n      escaped backslash \"\\\\\"\n      and general escapes since Factor has so many \"\\N\"\n      syntax that works in the reference implementation that isn't fully\n      supported because it's an implementation detail:\n      \"string 1\"\"string 2\" -> 2 strings (works anyway)\n      \"string\"5 -> string, 5\n      \"string\"[ ] -> string, quotation\n      { \"a\"} -> array<string>\n      the rest of those examples all properly recognise the string, but not\n      the other object (number, quotation, etc)\n      this is fine for a regex-only implementation.\n      */\n      string: {\n        pattern: /\"(?:\\\\\\S|[^\"\\\\])*\"/,\n        greedy: true,\n        inside: string_inside\n      }\n    };\n    var escape = function escape(str) {\n      return (str + '').replace(/([.?*+\\^$\\[\\]\\\\(){}|\\-])/g, '\\\\$1');\n    };\n    var arrToWordsRegExp = function arrToWordsRegExp(arr) {\n      return new RegExp('(^|\\\\s)(?:' + arr.map(escape).join('|') + ')(?=\\\\s|$)');\n    };\n    var builtins = {\n      'kernel-builtin': ['or', '2nipd', '4drop', 'tuck', 'wrapper', 'nip', 'wrapper?', 'callstack>array', 'die', 'dupd', 'callstack', 'callstack?', '3dup', 'hashcode', 'pick', '4nip', 'build', '>boolean', 'nipd', 'clone', '5nip', 'eq?', '?', '=', 'swapd', '2over', 'clear', '2dup', 'get-retainstack', 'not', 'tuple?', 'dup', '3nipd', 'call', '-rotd', 'object', 'drop', 'assert=', 'assert?', '-rot', 'execute', 'boa', 'get-callstack', 'curried?', '3drop', 'pickd', 'overd', 'over', 'roll', '3nip', 'swap', 'and', '2nip', 'rotd', 'throw', '(clone)', 'hashcode*', 'spin', 'reach', '4dup', 'equal?', 'get-datastack', 'assert', '2drop', '<wrapper>', 'boolean?', 'identity-hashcode', 'identity-tuple?', 'null', 'composed?', 'new', '5drop', 'rot', '-roll', 'xor', 'identity-tuple', 'boolean'],\n      'other-builtin-syntax': [\n      // syntax\n      '=======', 'recursive', 'flushable', '>>', '<<<<<<', 'M\\\\', 'B', 'PRIVATE>', '\\\\', '======', 'final', 'inline', 'delimiter', 'deprecated', '<PRIVATE', '>>>>>>', '<<<<<<<', 'parse-complex', 'malformed-complex', 'read-only', '>>>>>>>', 'call-next-method', '<<', 'foldable',\n      // literals\n      '$', '$[', '${'],\n      'sequences-builtin': ['member-eq?', 'mismatch', 'append', 'assert-sequence=', 'longer', 'repetition', 'clone-like', '3sequence', 'assert-sequence?', 'last-index-from', 'reversed', 'index-from', 'cut*', 'pad-tail', 'join-as', 'remove-eq!', 'concat-as', 'but-last', 'snip', 'nths', 'nth', 'sequence', 'longest', 'slice?', '<slice>', 'remove-nth', 'tail-slice', 'empty?', 'tail*', 'member?', 'virtual-sequence?', 'set-length', 'drop-prefix', 'iota', 'unclip', 'bounds-error?', 'unclip-last-slice', 'non-negative-integer-expected', 'non-negative-integer-expected?', 'midpoint@', 'longer?', '?set-nth', '?first', 'rest-slice', 'prepend-as', 'prepend', 'fourth', 'sift', 'subseq-start', 'new-sequence', '?last', 'like', 'first4', '1sequence', 'reverse', 'slice', 'virtual@', 'repetition?', 'set-last', 'index', '4sequence', 'max-length', 'set-second', 'immutable-sequence', 'first2', 'first3', 'supremum', 'unclip-slice', 'suffix!', 'insert-nth', 'tail', '3append', 'short', 'suffix', 'concat', 'flip', 'immutable?', 'reverse!', '2sequence', 'sum', 'delete-all', 'indices', 'snip-slice', '<iota>', 'check-slice', 'sequence?', 'head', 'append-as', 'halves', 'sequence=', 'collapse-slice', '?second', 'slice-error?', 'product', 'bounds-check?', 'bounds-check', 'immutable', 'virtual-exemplar', 'harvest', 'remove', 'pad-head', 'last', 'set-fourth', 'cartesian-product', 'remove-eq', 'shorten', 'shorter', 'reversed?', 'shorter?', 'shortest', 'head-slice', 'pop*', 'tail-slice*', 'but-last-slice', 'iota?', 'append!', 'cut-slice', 'new-resizable', 'head-slice*', 'sequence-hashcode', 'pop', 'set-nth', '?nth', 'second', 'join', 'immutable-sequence?', '<reversed>', '3append-as', 'virtual-sequence', 'subseq?', 'remove-nth!', 'length', 'last-index', 'lengthen', 'assert-sequence', 'copy', 'move', 'third', 'first', 'tail?', 'set-first', 'prefix', 'bounds-error', '<repetition>', 'exchange', 'surround', 'cut', 'min-length', 'set-third', 'push-all', 'head?', 'subseq-start-from', 'delete-slice', 'rest', 'sum-lengths', 'head*', 'infimum', 'remove!', 'glue', 'slice-error', 'subseq', 'push', 'replace-slice', 'subseq-as', 'unclip-last'],\n      'math-builtin': ['number=', 'next-power-of-2', '?1+', 'fp-special?', 'imaginary-part', 'float>bits', 'number?', 'fp-infinity?', 'bignum?', 'fp-snan?', 'denominator', 'gcd', '*', '+', 'fp-bitwise=', '-', 'u>=', '/', '>=', 'bitand', 'power-of-2?', 'log2-expects-positive', 'neg?', '<', 'log2', '>', 'integer?', 'number', 'bits>double', '2/', 'zero?', 'bits>float', 'float?', 'shift', 'ratio?', 'rect>', 'even?', 'ratio', 'fp-sign', 'bitnot', '>fixnum', 'complex?', '/i', 'integer>fixnum', '/f', 'sgn', '>bignum', 'next-float', 'u<', 'u>', 'mod', 'recip', 'rational', '>float', '2^', 'integer', 'fixnum?', 'neg', 'fixnum', 'sq', 'bignum', '>rect', 'bit?', 'fp-qnan?', 'simple-gcd', 'complex', '<fp-nan>', 'real', '>fraction', 'double>bits', 'bitor', 'rem', 'fp-nan-payload', 'real-part', 'log2-expects-positive?', 'prev-float', 'align', 'unordered?', 'float', 'fp-nan?', 'abs', 'bitxor', 'integer>fixnum-strict', 'u<=', 'odd?', '<=', '/mod', '>integer', 'real?', 'rational?', 'numerator'] // that's all for now\n    };\n\n    Object.keys(builtins).forEach(function (k) {\n      factor[k].pattern = arrToWordsRegExp(builtins[k]);\n    });\n    var combinators = [\n    // kernel\n    '2bi', 'while', '2tri', 'bi*', '4dip', 'both?', 'same?', 'tri@', 'curry', 'prepose', '3bi', '?if', 'tri*', '2keep', '3keep', 'curried', '2keepd', 'when', '2bi*', '2tri*', '4keep', 'bi@', 'keepdd', 'do', 'unless*', 'tri-curry', 'if*', 'loop', 'bi-curry*', 'when*', '2bi@', '2tri@', 'with', '2with', 'either?', 'bi', 'until', '3dip', '3curry', 'tri-curry*', 'tri-curry@', 'bi-curry', 'keepd', 'compose', '2dip', 'if', '3tri', 'unless', 'tuple', 'keep', '2curry', 'tri', 'most', 'while*', 'dip', 'composed', 'bi-curry@',\n    // sequences\n    'find-last-from', 'trim-head-slice', 'map-as', 'each-from', 'none?', 'trim-tail', 'partition', 'if-empty', 'accumulate*', 'reject!', 'find-from', 'accumulate-as', 'collector-for-as', 'reject', 'map', 'map-sum', 'accumulate!', '2each-from', 'follow', 'supremum-by', 'map!', 'unless-empty', 'collector', 'padding', 'reduce-index', 'replicate-as', 'infimum-by', 'trim-tail-slice', 'count', 'find-index', 'filter', 'accumulate*!', 'reject-as', 'map-integers', 'map-find', 'reduce', 'selector', 'interleave', '2map', 'filter-as', 'binary-reduce', 'map-index-as', 'find', 'produce', 'filter!', 'replicate', 'cartesian-map', 'cartesian-each', 'find-index-from', 'map-find-last', '3map-as', '3map', 'find-last', 'selector-as', '2map-as', '2map-reduce', 'accumulate', 'each', 'each-index', 'accumulate*-as', 'when-empty', 'all?', 'collector-as', 'push-either', 'new-like', 'collector-for', '2selector', 'push-if', '2all?', 'map-reduce', '3each', 'any?', 'trim-slice', '2reduce', 'change-nth', 'produce-as', '2each', 'trim', 'trim-head', 'cartesian-find', 'map-index',\n    // math\n    'if-zero', 'each-integer', 'unless-zero', '(find-integer)', 'when-zero', 'find-last-integer', '(all-integers?)', 'times', '(each-integer)', 'find-integer', 'all-integers?',\n    // math.combinators\n    'unless-negative', 'if-positive', 'when-positive', 'when-negative', 'unless-positive', 'if-negative',\n    // combinators\n    'case', '2cleave', 'cond>quot', 'case>quot', '3cleave', 'wrong-values', 'to-fixed-point', 'alist>quot', 'cond', 'cleave', 'call-effect', 'recursive-hashcode', 'spread', 'deep-spread>quot',\n    // combinators.short-circuit\n    '2||', '0||', 'n||', '0&&', '2&&', '3||', '1||', '1&&', 'n&&', '3&&',\n    // combinators.smart\n    'smart-unless*', 'keep-inputs', 'reduce-outputs', 'smart-when*', 'cleave>array', 'smart-with', 'smart-apply', 'smart-if', 'inputs/outputs', 'output>sequence-n', 'map-outputs', 'map-reduce-outputs', 'dropping', 'output>array', 'smart-map-reduce', 'smart-2map-reduce', 'output>array-n', 'nullary', 'input<sequence', 'append-outputs', 'drop-inputs', 'inputs', 'smart-2reduce', 'drop-outputs', 'smart-reduce', 'preserving', 'smart-when', 'outputs', 'append-outputs-as', 'smart-unless', 'smart-if*', 'sum-outputs', 'input<sequence-unsafe', 'output>sequence' // tafn\n    ];\n\n    factor.combinators.pattern = arrToWordsRegExp(combinators);\n    Prism.languages.factor = factor;\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/factor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/false.js":
/*!**********************************************!*\
  !*** ./node_modules/refractor/lang/false.js ***!
  \**********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = $false;\n$false.displayName = '$false';\n$false.aliases = [];\nfunction $false(Prism) {\n  ;\n  (function (Prism) {\n    /**\n     * Based on the manual by Wouter van Oortmerssen.\n     *\n     * @see {@link https://github.com/PrismJS/prism/issues/2801#issue-829717504}\n     */\n    Prism.languages['false'] = {\n      comment: {\n        pattern: /\\{[^}]*\\}/\n      },\n      string: {\n        pattern: /\"[^\"]*\"/,\n        greedy: true\n      },\n      'character-code': {\n        pattern: /'(?:[^\\r]|\\r\\n?)/,\n        alias: 'number'\n      },\n      'assembler-code': {\n        pattern: /\\d+`/,\n        alias: 'important'\n      },\n      number: /\\d+/,\n      operator: /[-!#$%&'*+,./:;=>?@\\\\^_`|~ßø]/,\n      punctuation: /\\[|\\]/,\n      variable: /[a-z]/,\n      'non-standard': {\n        pattern: /[()<BDO®]/,\n        alias: 'bold'\n      }\n    };\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvZmFsc2UuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxNQUFNO0FBQ3ZCQSxNQUFNLENBQUNDLFdBQVcsR0FBRyxRQUFRO0FBQzdCRCxNQUFNLENBQUNFLE9BQU8sR0FBRyxFQUFFO0FBQ25CLFNBQVNGLE1BQU1BLENBQUNHLEtBQUssRUFBRTtFQUNyQjtFQUFDLENBQUMsVUFBVUEsS0FBSyxFQUFFO0lBQ2pCO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7SUFDSUEsS0FBSyxDQUFDQyxTQUFTLENBQUMsT0FBTyxDQUFDLEdBQUc7TUFDekJDLE9BQU8sRUFBRTtRQUNQQyxPQUFPLEVBQUU7TUFDWCxDQUFDO01BQ0RDLE1BQU0sRUFBRTtRQUNORCxPQUFPLEVBQUUsU0FBUztRQUNsQkUsTUFBTSxFQUFFO01BQ1YsQ0FBQztNQUNELGdCQUFnQixFQUFFO1FBQ2hCRixPQUFPLEVBQUUsa0JBQWtCO1FBQzNCRyxLQUFLLEVBQUU7TUFDVCxDQUFDO01BQ0QsZ0JBQWdCLEVBQUU7UUFDaEJILE9BQU8sRUFBRSxNQUFNO1FBQ2ZHLEtBQUssRUFBRTtNQUNULENBQUM7TUFDREMsTUFBTSxFQUFFLEtBQUs7TUFDYkMsUUFBUSxFQUFFLCtCQUErQjtNQUN6Q0MsV0FBVyxFQUFFLE9BQU87TUFDcEJDLFFBQVEsRUFBRSxPQUFPO01BQ2pCLGNBQWMsRUFBRTtRQUNkUCxPQUFPLEVBQUUsV0FBVztRQUNwQkcsS0FBSyxFQUFFO01BQ1Q7SUFDRixDQUFDO0VBQ0gsQ0FBQyxFQUFFTixLQUFLLENBQUM7QUFDWCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXGZhbHNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9ICRmYWxzZVxuJGZhbHNlLmRpc3BsYXlOYW1lID0gJyRmYWxzZSdcbiRmYWxzZS5hbGlhc2VzID0gW11cbmZ1bmN0aW9uICRmYWxzZShQcmlzbSkge1xuICA7KGZ1bmN0aW9uIChQcmlzbSkge1xuICAgIC8qKlxuICAgICAqIEJhc2VkIG9uIHRoZSBtYW51YWwgYnkgV291dGVyIHZhbiBPb3J0bWVyc3Nlbi5cbiAgICAgKlxuICAgICAqIEBzZWUge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9QcmlzbUpTL3ByaXNtL2lzc3Vlcy8yODAxI2lzc3VlLTgyOTcxNzUwNH1cbiAgICAgKi9cbiAgICBQcmlzbS5sYW5ndWFnZXNbJ2ZhbHNlJ10gPSB7XG4gICAgICBjb21tZW50OiB7XG4gICAgICAgIHBhdHRlcm46IC9cXHtbXn1dKlxcfS9cbiAgICAgIH0sXG4gICAgICBzdHJpbmc6IHtcbiAgICAgICAgcGF0dGVybjogL1wiW15cIl0qXCIvLFxuICAgICAgICBncmVlZHk6IHRydWVcbiAgICAgIH0sXG4gICAgICAnY2hhcmFjdGVyLWNvZGUnOiB7XG4gICAgICAgIHBhdHRlcm46IC8nKD86W15cXHJdfFxcclxcbj8pLyxcbiAgICAgICAgYWxpYXM6ICdudW1iZXInXG4gICAgICB9LFxuICAgICAgJ2Fzc2VtYmxlci1jb2RlJzoge1xuICAgICAgICBwYXR0ZXJuOiAvXFxkK2AvLFxuICAgICAgICBhbGlhczogJ2ltcG9ydGFudCdcbiAgICAgIH0sXG4gICAgICBudW1iZXI6IC9cXGQrLyxcbiAgICAgIG9wZXJhdG9yOiAvWy0hIyQlJicqKywuLzo7PT4/QFxcXFxeX2B8fsOfw7hdLyxcbiAgICAgIHB1bmN0dWF0aW9uOiAvXFxbfFxcXS8sXG4gICAgICB2YXJpYWJsZTogL1thLXpdLyxcbiAgICAgICdub24tc3RhbmRhcmQnOiB7XG4gICAgICAgIHBhdHRlcm46IC9bKCk8QkRPwq5dLyxcbiAgICAgICAgYWxpYXM6ICdib2xkJ1xuICAgICAgfVxuICAgIH1cbiAgfSkoUHJpc20pXG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIiRmYWxzZSIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwiY29tbWVudCIsInBhdHRlcm4iLCJzdHJpbmciLCJncmVlZHkiLCJhbGlhcyIsIm51bWJlciIsIm9wZXJhdG9yIiwicHVuY3R1YXRpb24iLCJ2YXJpYWJsZSJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/false.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/firestore-security-rules.js":
/*!*****************************************************************!*\
  !*** ./node_modules/refractor/lang/firestore-security-rules.js ***!
  \*****************************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = firestoreSecurityRules;\nfirestoreSecurityRules.displayName = 'firestoreSecurityRules';\nfirestoreSecurityRules.aliases = [];\nfunction firestoreSecurityRules(Prism) {\n  Prism.languages['firestore-security-rules'] = Prism.languages.extend('clike', {\n    comment: /\\/\\/.*/,\n    keyword: /\\b(?:allow|function|if|match|null|return|rules_version|service)\\b/,\n    operator: /&&|\\|\\||[<>!=]=?|[-+*/%]|\\b(?:in|is)\\b/\n  });\n  delete Prism.languages['firestore-security-rules']['class-name'];\n  Prism.languages.insertBefore('firestore-security-rules', 'keyword', {\n    path: {\n      pattern: /(^|[\\s(),])(?:\\/(?:[\\w\\xA0-\\uFFFF]+|\\{[\\w\\xA0-\\uFFFF]+(?:=\\*\\*)?\\}|\\$\\([\\w\\xA0-\\uFFFF.]+\\)))+/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        variable: {\n          pattern: /\\{[\\w\\xA0-\\uFFFF]+(?:=\\*\\*)?\\}|\\$\\([\\w\\xA0-\\uFFFF.]+\\)/,\n          inside: {\n            operator: /=/,\n            keyword: /\\*\\*/,\n            punctuation: /[.$(){}]/\n          }\n        },\n        punctuation: /\\//\n      }\n    },\n    method: {\n      // to make the pattern shorter, the actual method names are omitted\n      pattern: /(\\ballow\\s+)[a-z]+(?:\\s*,\\s*[a-z]+)*(?=\\s*[:;])/,\n      lookbehind: true,\n      alias: 'builtin',\n      inside: {\n        punctuation: /,/\n      }\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvZmlyZXN0b3JlLXNlY3VyaXR5LXJ1bGVzLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0Msc0JBQXNCO0FBQ3ZDQSxzQkFBc0IsQ0FBQ0MsV0FBVyxHQUFHLHdCQUF3QjtBQUM3REQsc0JBQXNCLENBQUNFLE9BQU8sR0FBRyxFQUFFO0FBQ25DLFNBQVNGLHNCQUFzQkEsQ0FBQ0csS0FBSyxFQUFFO0VBQ3JDQSxLQUFLLENBQUNDLFNBQVMsQ0FBQywwQkFBMEIsQ0FBQyxHQUFHRCxLQUFLLENBQUNDLFNBQVMsQ0FBQ0MsTUFBTSxDQUNsRSxPQUFPLEVBQ1A7SUFDRUMsT0FBTyxFQUFFLFFBQVE7SUFDakJDLE9BQU8sRUFDTCxtRUFBbUU7SUFDckVDLFFBQVEsRUFBRTtFQUNaLENBQ0YsQ0FBQztFQUNELE9BQU9MLEtBQUssQ0FBQ0MsU0FBUyxDQUFDLDBCQUEwQixDQUFDLENBQUMsWUFBWSxDQUFDO0VBQ2hFRCxLQUFLLENBQUNDLFNBQVMsQ0FBQ0ssWUFBWSxDQUFDLDBCQUEwQixFQUFFLFNBQVMsRUFBRTtJQUNsRUMsSUFBSSxFQUFFO01BQ0pDLE9BQU8sRUFDTCwrRkFBK0Y7TUFDakdDLFVBQVUsRUFBRSxJQUFJO01BQ2hCQyxNQUFNLEVBQUUsSUFBSTtNQUNaQyxNQUFNLEVBQUU7UUFDTkMsUUFBUSxFQUFFO1VBQ1JKLE9BQU8sRUFBRSx3REFBd0Q7VUFDakVHLE1BQU0sRUFBRTtZQUNOTixRQUFRLEVBQUUsR0FBRztZQUNiRCxPQUFPLEVBQUUsTUFBTTtZQUNmUyxXQUFXLEVBQUU7VUFDZjtRQUNGLENBQUM7UUFDREEsV0FBVyxFQUFFO01BQ2Y7SUFDRixDQUFDO0lBQ0RDLE1BQU0sRUFBRTtNQUNOO01BQ0FOLE9BQU8sRUFBRSxpREFBaUQ7TUFDMURDLFVBQVUsRUFBRSxJQUFJO01BQ2hCTSxLQUFLLEVBQUUsU0FBUztNQUNoQkosTUFBTSxFQUFFO1FBQ05FLFdBQVcsRUFBRTtNQUNmO0lBQ0Y7RUFDRixDQUFDLENBQUM7QUFDSiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXGZpcmVzdG9yZS1zZWN1cml0eS1ydWxlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBmaXJlc3RvcmVTZWN1cml0eVJ1bGVzXG5maXJlc3RvcmVTZWN1cml0eVJ1bGVzLmRpc3BsYXlOYW1lID0gJ2ZpcmVzdG9yZVNlY3VyaXR5UnVsZXMnXG5maXJlc3RvcmVTZWN1cml0eVJ1bGVzLmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24gZmlyZXN0b3JlU2VjdXJpdHlSdWxlcyhQcmlzbSkge1xuICBQcmlzbS5sYW5ndWFnZXNbJ2ZpcmVzdG9yZS1zZWN1cml0eS1ydWxlcyddID0gUHJpc20ubGFuZ3VhZ2VzLmV4dGVuZChcbiAgICAnY2xpa2UnLFxuICAgIHtcbiAgICAgIGNvbW1lbnQ6IC9cXC9cXC8uKi8sXG4gICAgICBrZXl3b3JkOlxuICAgICAgICAvXFxiKD86YWxsb3d8ZnVuY3Rpb258aWZ8bWF0Y2h8bnVsbHxyZXR1cm58cnVsZXNfdmVyc2lvbnxzZXJ2aWNlKVxcYi8sXG4gICAgICBvcGVyYXRvcjogLyYmfFxcfFxcfHxbPD4hPV09P3xbLSsqLyVdfFxcYig/OmlufGlzKVxcYi9cbiAgICB9XG4gIClcbiAgZGVsZXRlIFByaXNtLmxhbmd1YWdlc1snZmlyZXN0b3JlLXNlY3VyaXR5LXJ1bGVzJ11bJ2NsYXNzLW5hbWUnXVxuICBQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdmaXJlc3RvcmUtc2VjdXJpdHktcnVsZXMnLCAna2V5d29yZCcsIHtcbiAgICBwYXRoOiB7XG4gICAgICBwYXR0ZXJuOlxuICAgICAgICAvKF58W1xccygpLF0pKD86XFwvKD86W1xcd1xceEEwLVxcdUZGRkZdK3xcXHtbXFx3XFx4QTAtXFx1RkZGRl0rKD86PVxcKlxcKik/XFx9fFxcJFxcKFtcXHdcXHhBMC1cXHVGRkZGLl0rXFwpKSkrLyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBncmVlZHk6IHRydWUsXG4gICAgICBpbnNpZGU6IHtcbiAgICAgICAgdmFyaWFibGU6IHtcbiAgICAgICAgICBwYXR0ZXJuOiAvXFx7W1xcd1xceEEwLVxcdUZGRkZdKyg/Oj1cXCpcXCopP1xcfXxcXCRcXChbXFx3XFx4QTAtXFx1RkZGRi5dK1xcKS8sXG4gICAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgICBvcGVyYXRvcjogLz0vLFxuICAgICAgICAgICAga2V5d29yZDogL1xcKlxcKi8sXG4gICAgICAgICAgICBwdW5jdHVhdGlvbjogL1suJCgpe31dL1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcHVuY3R1YXRpb246IC9cXC8vXG4gICAgICB9XG4gICAgfSxcbiAgICBtZXRob2Q6IHtcbiAgICAgIC8vIHRvIG1ha2UgdGhlIHBhdHRlcm4gc2hvcnRlciwgdGhlIGFjdHVhbCBtZXRob2QgbmFtZXMgYXJlIG9taXR0ZWRcbiAgICAgIHBhdHRlcm46IC8oXFxiYWxsb3dcXHMrKVthLXpdKyg/OlxccyosXFxzKlthLXpdKykqKD89XFxzKls6O10pLyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBhbGlhczogJ2J1aWx0aW4nLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgIHB1bmN0dWF0aW9uOiAvLC9cbiAgICAgIH1cbiAgICB9XG4gIH0pXG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImZpcmVzdG9yZVNlY3VyaXR5UnVsZXMiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImxhbmd1YWdlcyIsImV4dGVuZCIsImNvbW1lbnQiLCJrZXl3b3JkIiwib3BlcmF0b3IiLCJpbnNlcnRCZWZvcmUiLCJwYXRoIiwicGF0dGVybiIsImxvb2tiZWhpbmQiLCJncmVlZHkiLCJpbnNpZGUiLCJ2YXJpYWJsZSIsInB1bmN0dWF0aW9uIiwibWV0aG9kIiwiYWxpYXMiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/firestore-security-rules.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/flow.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/flow.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = flow;\nflow.displayName = 'flow';\nflow.aliases = [];\nfunction flow(Prism) {\n  ;\n  (function (Prism) {\n    Prism.languages.flow = Prism.languages.extend('javascript', {});\n    Prism.languages.insertBefore('flow', 'keyword', {\n      type: [{\n        pattern: /\\b(?:[Bb]oolean|Function|[Nn]umber|[Ss]tring|any|mixed|null|void)\\b/,\n        alias: 'tag'\n      }]\n    });\n    Prism.languages.flow['function-variable'].pattern = /(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=\\s*(?:function\\b|(?:\\([^()]*\\)(?:\\s*:\\s*\\w+)?|(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/i;\n    delete Prism.languages.flow['parameter'];\n    Prism.languages.insertBefore('flow', 'operator', {\n      'flow-punctuation': {\n        pattern: /\\{\\||\\|\\}/,\n        alias: 'punctuation'\n      }\n    });\n    if (!Array.isArray(Prism.languages.flow.keyword)) {\n      Prism.languages.flow.keyword = [Prism.languages.flow.keyword];\n    }\n    Prism.languages.flow.keyword.unshift({\n      pattern: /(^|[^$]\\b)(?:Class|declare|opaque|type)\\b(?!\\$)/,\n      lookbehind: true\n    }, {\n      pattern: /(^|[^$]\\B)\\$(?:Diff|Enum|Exact|Keys|ObjMap|PropertyType|Record|Shape|Subtype|Supertype|await)\\b(?!\\$)/,\n      lookbehind: true\n    });\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvZmxvdy5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLElBQUk7QUFDckJBLElBQUksQ0FBQ0MsV0FBVyxHQUFHLE1BQU07QUFDekJELElBQUksQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDakIsU0FBU0YsSUFBSUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ25CO0VBQUMsQ0FBQyxVQUFVQSxLQUFLLEVBQUU7SUFDakJBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixJQUFJLEdBQUdHLEtBQUssQ0FBQ0MsU0FBUyxDQUFDQyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQy9ERixLQUFLLENBQUNDLFNBQVMsQ0FBQ0UsWUFBWSxDQUFDLE1BQU0sRUFBRSxTQUFTLEVBQUU7TUFDOUNDLElBQUksRUFBRSxDQUNKO1FBQ0VDLE9BQU8sRUFDTCxxRUFBcUU7UUFDdkVDLEtBQUssRUFBRTtNQUNULENBQUM7SUFFTCxDQUFDLENBQUM7SUFDRk4sS0FBSyxDQUFDQyxTQUFTLENBQUNKLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDUSxPQUFPLEdBQy9DLHNLQUFzSztJQUN4SyxPQUFPTCxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUN4Q0csS0FBSyxDQUFDQyxTQUFTLENBQUNFLFlBQVksQ0FBQyxNQUFNLEVBQUUsVUFBVSxFQUFFO01BQy9DLGtCQUFrQixFQUFFO1FBQ2xCRSxPQUFPLEVBQUUsV0FBVztRQUNwQkMsS0FBSyxFQUFFO01BQ1Q7SUFDRixDQUFDLENBQUM7SUFDRixJQUFJLENBQUNDLEtBQUssQ0FBQ0MsT0FBTyxDQUFDUixLQUFLLENBQUNDLFNBQVMsQ0FBQ0osSUFBSSxDQUFDWSxPQUFPLENBQUMsRUFBRTtNQUNoRFQsS0FBSyxDQUFDQyxTQUFTLENBQUNKLElBQUksQ0FBQ1ksT0FBTyxHQUFHLENBQUNULEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixJQUFJLENBQUNZLE9BQU8sQ0FBQztJQUMvRDtJQUNBVCxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osSUFBSSxDQUFDWSxPQUFPLENBQUNDLE9BQU8sQ0FDbEM7TUFDRUwsT0FBTyxFQUFFLGlEQUFpRDtNQUMxRE0sVUFBVSxFQUFFO0lBQ2QsQ0FBQyxFQUNEO01BQ0VOLE9BQU8sRUFDTCx1R0FBdUc7TUFDekdNLFVBQVUsRUFBRTtJQUNkLENBQ0YsQ0FBQztFQUNILENBQUMsRUFBRVgsS0FBSyxDQUFDO0FBQ1giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxmbG93LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZsb3dcbmZsb3cuZGlzcGxheU5hbWUgPSAnZmxvdydcbmZsb3cuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBmbG93KFByaXNtKSB7XG4gIDsoZnVuY3Rpb24gKFByaXNtKSB7XG4gICAgUHJpc20ubGFuZ3VhZ2VzLmZsb3cgPSBQcmlzbS5sYW5ndWFnZXMuZXh0ZW5kKCdqYXZhc2NyaXB0Jywge30pXG4gICAgUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgnZmxvdycsICdrZXl3b3JkJywge1xuICAgICAgdHlwZTogW1xuICAgICAgICB7XG4gICAgICAgICAgcGF0dGVybjpcbiAgICAgICAgICAgIC9cXGIoPzpbQmJdb29sZWFufEZ1bmN0aW9ufFtObl11bWJlcnxbU3NddHJpbmd8YW55fG1peGVkfG51bGx8dm9pZClcXGIvLFxuICAgICAgICAgIGFsaWFzOiAndGFnJ1xuICAgICAgICB9XG4gICAgICBdXG4gICAgfSlcbiAgICBQcmlzbS5sYW5ndWFnZXMuZmxvd1snZnVuY3Rpb24tdmFyaWFibGUnXS5wYXR0ZXJuID1cbiAgICAgIC8oPyFcXHMpW18kYS16XFx4QTAtXFx1RkZGRl0oPzooPyFcXHMpWyRcXHdcXHhBMC1cXHVGRkZGXSkqKD89XFxzKj1cXHMqKD86ZnVuY3Rpb25cXGJ8KD86XFwoW14oKV0qXFwpKD86XFxzKjpcXHMqXFx3Kyk/fCg/IVxccylbXyRhLXpcXHhBMC1cXHVGRkZGXSg/Oig/IVxccylbJFxcd1xceEEwLVxcdUZGRkZdKSopXFxzKj0+KSkvaVxuICAgIGRlbGV0ZSBQcmlzbS5sYW5ndWFnZXMuZmxvd1sncGFyYW1ldGVyJ11cbiAgICBQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdmbG93JywgJ29wZXJhdG9yJywge1xuICAgICAgJ2Zsb3ctcHVuY3R1YXRpb24nOiB7XG4gICAgICAgIHBhdHRlcm46IC9cXHtcXHx8XFx8XFx9LyxcbiAgICAgICAgYWxpYXM6ICdwdW5jdHVhdGlvbidcbiAgICAgIH1cbiAgICB9KVxuICAgIGlmICghQXJyYXkuaXNBcnJheShQcmlzbS5sYW5ndWFnZXMuZmxvdy5rZXl3b3JkKSkge1xuICAgICAgUHJpc20ubGFuZ3VhZ2VzLmZsb3cua2V5d29yZCA9IFtQcmlzbS5sYW5ndWFnZXMuZmxvdy5rZXl3b3JkXVxuICAgIH1cbiAgICBQcmlzbS5sYW5ndWFnZXMuZmxvdy5rZXl3b3JkLnVuc2hpZnQoXG4gICAgICB7XG4gICAgICAgIHBhdHRlcm46IC8oXnxbXiRdXFxiKSg/OkNsYXNzfGRlY2xhcmV8b3BhcXVlfHR5cGUpXFxiKD8hXFwkKS8sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHBhdHRlcm46XG4gICAgICAgICAgLyhefFteJF1cXEIpXFwkKD86RGlmZnxFbnVtfEV4YWN0fEtleXN8T2JqTWFwfFByb3BlcnR5VHlwZXxSZWNvcmR8U2hhcGV8U3VidHlwZXxTdXBlcnR5cGV8YXdhaXQpXFxiKD8hXFwkKS8sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH1cbiAgICApXG4gIH0pKFByaXNtKVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJmbG93IiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJleHRlbmQiLCJpbnNlcnRCZWZvcmUiLCJ0eXBlIiwicGF0dGVybiIsImFsaWFzIiwiQXJyYXkiLCJpc0FycmF5Iiwia2V5d29yZCIsInVuc2hpZnQiLCJsb29rYmVoaW5kIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/flow.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/fortran.js":
/*!************************************************!*\
  !*** ./node_modules/refractor/lang/fortran.js ***!
  \************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = fortran;\nfortran.displayName = 'fortran';\nfortran.aliases = [];\nfunction fortran(Prism) {\n  Prism.languages.fortran = {\n    'quoted-number': {\n      pattern: /[BOZ](['\"])[A-F0-9]+\\1/i,\n      alias: 'number'\n    },\n    string: {\n      pattern: /(?:\\b\\w+_)?(['\"])(?:\\1\\1|&(?:\\r\\n?|\\n)(?:[ \\t]*!.*(?:\\r\\n?|\\n)|(?![ \\t]*!))|(?!\\1).)*(?:\\1|&)/,\n      inside: {\n        comment: {\n          pattern: /(&(?:\\r\\n?|\\n)\\s*)!.*/,\n          lookbehind: true\n        }\n      }\n    },\n    comment: {\n      pattern: /!.*/,\n      greedy: true\n    },\n    \"boolean\": /\\.(?:FALSE|TRUE)\\.(?:_\\w+)?/i,\n    number: /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[ED][+-]?\\d+)?(?:_\\w+)?/i,\n    keyword: [\n    // Types\n    /\\b(?:CHARACTER|COMPLEX|DOUBLE ?PRECISION|INTEGER|LOGICAL|REAL)\\b/i,\n    // END statements\n    /\\b(?:END ?)?(?:BLOCK ?DATA|DO|FILE|FORALL|FUNCTION|IF|INTERFACE|MODULE(?! PROCEDURE)|PROGRAM|SELECT|SUBROUTINE|TYPE|WHERE)\\b/i,\n    // Statements\n    /\\b(?:ALLOCATABLE|ALLOCATE|BACKSPACE|CALL|CASE|CLOSE|COMMON|CONTAINS|CONTINUE|CYCLE|DATA|DEALLOCATE|DIMENSION|DO|END|EQUIVALENCE|EXIT|EXTERNAL|FORMAT|GO ?TO|IMPLICIT(?: NONE)?|INQUIRE|INTENT|INTRINSIC|MODULE PROCEDURE|NAMELIST|NULLIFY|OPEN|OPTIONAL|PARAMETER|POINTER|PRINT|PRIVATE|PUBLIC|READ|RETURN|REWIND|SAVE|SELECT|STOP|TARGET|WHILE|WRITE)\\b/i,\n    // Others\n    /\\b(?:ASSIGNMENT|DEFAULT|ELEMENTAL|ELSE|ELSEIF|ELSEWHERE|ENTRY|IN|INCLUDE|INOUT|KIND|NULL|ONLY|OPERATOR|OUT|PURE|RECURSIVE|RESULT|SEQUENCE|STAT|THEN|USE)\\b/i],\n    operator: [/\\*\\*|\\/\\/|=>|[=\\/]=|[<>]=?|::|[+\\-*=%]|\\.[A-Z]+\\./i, {\n      // Use lookbehind to prevent confusion with (/ /)\n      pattern: /(^|(?!\\().)\\/(?!\\))/,\n      lookbehind: true\n    }],\n    punctuation: /\\(\\/|\\/\\)|[(),;:&]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvZm9ydHJhbi5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLE9BQU87QUFDeEJBLE9BQU8sQ0FBQ0MsV0FBVyxHQUFHLFNBQVM7QUFDL0JELE9BQU8sQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDcEIsU0FBU0YsT0FBT0EsQ0FBQ0csS0FBSyxFQUFFO0VBQ3RCQSxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osT0FBTyxHQUFHO0lBQ3hCLGVBQWUsRUFBRTtNQUNmSyxPQUFPLEVBQUUseUJBQXlCO01BQ2xDQyxLQUFLLEVBQUU7SUFDVCxDQUFDO0lBQ0RDLE1BQU0sRUFBRTtNQUNORixPQUFPLEVBQ0wsK0ZBQStGO01BQ2pHRyxNQUFNLEVBQUU7UUFDTkMsT0FBTyxFQUFFO1VBQ1BKLE9BQU8sRUFBRSx1QkFBdUI7VUFDaENLLFVBQVUsRUFBRTtRQUNkO01BQ0Y7SUFDRixDQUFDO0lBQ0RELE9BQU8sRUFBRTtNQUNQSixPQUFPLEVBQUUsS0FBSztNQUNkTSxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0QsV0FBUyw4QkFBOEI7SUFDdkNDLE1BQU0sRUFBRSx3REFBd0Q7SUFDaEVDLE9BQU8sRUFBRTtJQUNQO0lBQ0EsbUVBQW1FO0lBQUU7SUFDckUsK0hBQStIO0lBQUU7SUFDakksMlZBQTJWO0lBQUU7SUFDN1YsNkpBQTZKLENBQzlKO0lBQ0RDLFFBQVEsRUFBRSxDQUNSLG9EQUFvRCxFQUNwRDtNQUNFO01BQ0FULE9BQU8sRUFBRSxxQkFBcUI7TUFDOUJLLFVBQVUsRUFBRTtJQUNkLENBQUMsQ0FDRjtJQUNESyxXQUFXLEVBQUU7RUFDZixDQUFDO0FBQ0giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxmb3J0cmFuLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZvcnRyYW5cbmZvcnRyYW4uZGlzcGxheU5hbWUgPSAnZm9ydHJhbidcbmZvcnRyYW4uYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBmb3J0cmFuKFByaXNtKSB7XG4gIFByaXNtLmxhbmd1YWdlcy5mb3J0cmFuID0ge1xuICAgICdxdW90ZWQtbnVtYmVyJzoge1xuICAgICAgcGF0dGVybjogL1tCT1pdKFsnXCJdKVtBLUYwLTldK1xcMS9pLFxuICAgICAgYWxpYXM6ICdudW1iZXInXG4gICAgfSxcbiAgICBzdHJpbmc6IHtcbiAgICAgIHBhdHRlcm46XG4gICAgICAgIC8oPzpcXGJcXHcrXyk/KFsnXCJdKSg/OlxcMVxcMXwmKD86XFxyXFxuP3xcXG4pKD86WyBcXHRdKiEuKig/Olxcclxcbj98XFxuKXwoPyFbIFxcdF0qISkpfCg/IVxcMSkuKSooPzpcXDF8JikvLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgIGNvbW1lbnQ6IHtcbiAgICAgICAgICBwYXR0ZXJuOiAvKCYoPzpcXHJcXG4/fFxcbilcXHMqKSEuKi8sXG4gICAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBjb21tZW50OiB7XG4gICAgICBwYXR0ZXJuOiAvIS4qLyxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgYm9vbGVhbjogL1xcLig/OkZBTFNFfFRSVUUpXFwuKD86X1xcdyspPy9pLFxuICAgIG51bWJlcjogLyg/OlxcYlxcZCsoPzpcXC5cXGQqKT98XFxCXFwuXFxkKykoPzpbRURdWystXT9cXGQrKT8oPzpfXFx3Kyk/L2ksXG4gICAga2V5d29yZDogW1xuICAgICAgLy8gVHlwZXNcbiAgICAgIC9cXGIoPzpDSEFSQUNURVJ8Q09NUExFWHxET1VCTEUgP1BSRUNJU0lPTnxJTlRFR0VSfExPR0lDQUx8UkVBTClcXGIvaSwgLy8gRU5EIHN0YXRlbWVudHNcbiAgICAgIC9cXGIoPzpFTkQgPyk/KD86QkxPQ0sgP0RBVEF8RE98RklMRXxGT1JBTEx8RlVOQ1RJT058SUZ8SU5URVJGQUNFfE1PRFVMRSg/ISBQUk9DRURVUkUpfFBST0dSQU18U0VMRUNUfFNVQlJPVVRJTkV8VFlQRXxXSEVSRSlcXGIvaSwgLy8gU3RhdGVtZW50c1xuICAgICAgL1xcYig/OkFMTE9DQVRBQkxFfEFMTE9DQVRFfEJBQ0tTUEFDRXxDQUxMfENBU0V8Q0xPU0V8Q09NTU9OfENPTlRBSU5TfENPTlRJTlVFfENZQ0xFfERBVEF8REVBTExPQ0FURXxESU1FTlNJT058RE98RU5EfEVRVUlWQUxFTkNFfEVYSVR8RVhURVJOQUx8Rk9STUFUfEdPID9UT3xJTVBMSUNJVCg/OiBOT05FKT98SU5RVUlSRXxJTlRFTlR8SU5UUklOU0lDfE1PRFVMRSBQUk9DRURVUkV8TkFNRUxJU1R8TlVMTElGWXxPUEVOfE9QVElPTkFMfFBBUkFNRVRFUnxQT0lOVEVSfFBSSU5UfFBSSVZBVEV8UFVCTElDfFJFQUR8UkVUVVJOfFJFV0lORHxTQVZFfFNFTEVDVHxTVE9QfFRBUkdFVHxXSElMRXxXUklURSlcXGIvaSwgLy8gT3RoZXJzXG4gICAgICAvXFxiKD86QVNTSUdOTUVOVHxERUZBVUxUfEVMRU1FTlRBTHxFTFNFfEVMU0VJRnxFTFNFV0hFUkV8RU5UUll8SU58SU5DTFVERXxJTk9VVHxLSU5EfE5VTEx8T05MWXxPUEVSQVRPUnxPVVR8UFVSRXxSRUNVUlNJVkV8UkVTVUxUfFNFUVVFTkNFfFNUQVR8VEhFTnxVU0UpXFxiL2lcbiAgICBdLFxuICAgIG9wZXJhdG9yOiBbXG4gICAgICAvXFwqXFwqfFxcL1xcL3w9PnxbPVxcL109fFs8Pl09P3w6OnxbK1xcLSo9JV18XFwuW0EtWl0rXFwuL2ksXG4gICAgICB7XG4gICAgICAgIC8vIFVzZSBsb29rYmVoaW5kIHRvIHByZXZlbnQgY29uZnVzaW9uIHdpdGggKC8gLylcbiAgICAgICAgcGF0dGVybjogLyhefCg/IVxcKCkuKVxcLyg/IVxcKSkvLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICB9XG4gICAgXSxcbiAgICBwdW5jdHVhdGlvbjogL1xcKFxcL3xcXC9cXCl8WygpLDs6Jl0vXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiZm9ydHJhbiIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwicGF0dGVybiIsImFsaWFzIiwic3RyaW5nIiwiaW5zaWRlIiwiY29tbWVudCIsImxvb2tiZWhpbmQiLCJncmVlZHkiLCJudW1iZXIiLCJrZXl3b3JkIiwib3BlcmF0b3IiLCJwdW5jdHVhdGlvbiJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/fortran.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/fsharp.js":
/*!***********************************************!*\
  !*** ./node_modules/refractor/lang/fsharp.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = fsharp;\nfsharp.displayName = 'fsharp';\nfsharp.aliases = [];\nfunction fsharp(Prism) {\n  Prism.languages.fsharp = Prism.languages.extend('clike', {\n    comment: [{\n      pattern: /(^|[^\\\\])\\(\\*(?!\\))[\\s\\S]*?\\*\\)/,\n      lookbehind: true,\n      greedy: true\n    }, {\n      pattern: /(^|[^\\\\:])\\/\\/.*/,\n      lookbehind: true,\n      greedy: true\n    }],\n    string: {\n      pattern: /(?:\"\"\"[\\s\\S]*?\"\"\"|@\"(?:\"\"|[^\"])*\"|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")B?/,\n      greedy: true\n    },\n    'class-name': {\n      pattern: /(\\b(?:exception|inherit|interface|new|of|type)\\s+|\\w\\s*:\\s*|\\s:\\??>\\s*)[.\\w]+\\b(?:\\s*(?:->|\\*)\\s*[.\\w]+\\b)*(?!\\s*[:.])/,\n      lookbehind: true,\n      inside: {\n        operator: /->|\\*/,\n        punctuation: /\\./\n      }\n    },\n    keyword: /\\b(?:let|return|use|yield)(?:!\\B|\\b)|\\b(?:abstract|and|as|asr|assert|atomic|base|begin|break|checked|class|component|const|constraint|constructor|continue|default|delegate|do|done|downcast|downto|eager|elif|else|end|event|exception|extern|external|false|finally|fixed|for|fun|function|functor|global|if|in|include|inherit|inline|interface|internal|land|lazy|lor|lsl|lsr|lxor|match|member|method|mixin|mod|module|mutable|namespace|new|not|null|object|of|open|or|override|parallel|private|process|protected|public|pure|rec|sealed|select|sig|static|struct|tailcall|then|to|trait|true|try|type|upcast|val|virtual|void|volatile|when|while|with)\\b/,\n    number: [/\\b0x[\\da-fA-F]+(?:LF|lf|un)?\\b/, /\\b0b[01]+(?:uy|y)?\\b/, /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[fm]|e[+-]?\\d+)?\\b/i, /\\b\\d+(?:[IlLsy]|UL|u[lsy]?)?\\b/],\n    operator: /([<>~&^])\\1\\1|([*.:<>&])\\2|<-|->|[!=:]=|<?\\|{1,3}>?|\\??(?:<=|>=|<>|[-+*/%=<>])\\??|[!?^&]|~[+~-]|:>|:\\?>?/\n  });\n  Prism.languages.insertBefore('fsharp', 'keyword', {\n    preprocessor: {\n      pattern: /(^[\\t ]*)#.*/m,\n      lookbehind: true,\n      alias: 'property',\n      inside: {\n        directive: {\n          pattern: /(^#)\\b(?:else|endif|if|light|line|nowarn)\\b/,\n          lookbehind: true,\n          alias: 'keyword'\n        }\n      }\n    }\n  });\n  Prism.languages.insertBefore('fsharp', 'punctuation', {\n    'computation-expression': {\n      pattern: /\\b[_a-z]\\w*(?=\\s*\\{)/i,\n      alias: 'keyword'\n    }\n  });\n  Prism.languages.insertBefore('fsharp', 'string', {\n    annotation: {\n      pattern: /\\[<.+?>\\]/,\n      greedy: true,\n      inside: {\n        punctuation: /^\\[<|>\\]$/,\n        'class-name': {\n          pattern: /^\\w+$|(^|;\\s*)[A-Z]\\w*(?=\\()/,\n          lookbehind: true\n        },\n        'annotation-content': {\n          pattern: /[\\s\\S]+/,\n          inside: Prism.languages.fsharp\n        }\n      }\n    },\n    \"char\": {\n      pattern: /'(?:[^\\\\']|\\\\(?:.|\\d{3}|x[a-fA-F\\d]{2}|u[a-fA-F\\d]{4}|U[a-fA-F\\d]{8}))'B?/,\n      greedy: true\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvZnNoYXJwLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsTUFBTTtBQUN2QkEsTUFBTSxDQUFDQyxXQUFXLEdBQUcsUUFBUTtBQUM3QkQsTUFBTSxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNuQixTQUFTRixNQUFNQSxDQUFDRyxLQUFLLEVBQUU7RUFDckJBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixNQUFNLEdBQUdHLEtBQUssQ0FBQ0MsU0FBUyxDQUFDQyxNQUFNLENBQUMsT0FBTyxFQUFFO0lBQ3ZEQyxPQUFPLEVBQUUsQ0FDUDtNQUNFQyxPQUFPLEVBQUUsaUNBQWlDO01BQzFDQyxVQUFVLEVBQUUsSUFBSTtNQUNoQkMsTUFBTSxFQUFFO0lBQ1YsQ0FBQyxFQUNEO01BQ0VGLE9BQU8sRUFBRSxrQkFBa0I7TUFDM0JDLFVBQVUsRUFBRSxJQUFJO01BQ2hCQyxNQUFNLEVBQUU7SUFDVixDQUFDLENBQ0Y7SUFDREMsTUFBTSxFQUFFO01BQ05ILE9BQU8sRUFBRSw2REFBNkQ7TUFDdEVFLE1BQU0sRUFBRTtJQUNWLENBQUM7SUFDRCxZQUFZLEVBQUU7TUFDWkYsT0FBTyxFQUNMLHdIQUF3SDtNQUMxSEMsVUFBVSxFQUFFLElBQUk7TUFDaEJHLE1BQU0sRUFBRTtRQUNOQyxRQUFRLEVBQUUsT0FBTztRQUNqQkMsV0FBVyxFQUFFO01BQ2Y7SUFDRixDQUFDO0lBQ0RDLE9BQU8sRUFDTCxtb0JBQW1vQjtJQUNyb0JDLE1BQU0sRUFBRSxDQUNOLGdDQUFnQyxFQUNoQyxzQkFBc0IsRUFDdEIsbURBQW1ELEVBQ25ELGdDQUFnQyxDQUNqQztJQUNESCxRQUFRLEVBQ047RUFDSixDQUFDLENBQUM7RUFDRlQsS0FBSyxDQUFDQyxTQUFTLENBQUNZLFlBQVksQ0FBQyxRQUFRLEVBQUUsU0FBUyxFQUFFO0lBQ2hEQyxZQUFZLEVBQUU7TUFDWlYsT0FBTyxFQUFFLGVBQWU7TUFDeEJDLFVBQVUsRUFBRSxJQUFJO01BQ2hCVSxLQUFLLEVBQUUsVUFBVTtNQUNqQlAsTUFBTSxFQUFFO1FBQ05RLFNBQVMsRUFBRTtVQUNUWixPQUFPLEVBQUUsNkNBQTZDO1VBQ3REQyxVQUFVLEVBQUUsSUFBSTtVQUNoQlUsS0FBSyxFQUFFO1FBQ1Q7TUFDRjtJQUNGO0VBQ0YsQ0FBQyxDQUFDO0VBQ0ZmLEtBQUssQ0FBQ0MsU0FBUyxDQUFDWSxZQUFZLENBQUMsUUFBUSxFQUFFLGFBQWEsRUFBRTtJQUNwRCx3QkFBd0IsRUFBRTtNQUN4QlQsT0FBTyxFQUFFLHVCQUF1QjtNQUNoQ1csS0FBSyxFQUFFO0lBQ1Q7RUFDRixDQUFDLENBQUM7RUFDRmYsS0FBSyxDQUFDQyxTQUFTLENBQUNZLFlBQVksQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFO0lBQy9DSSxVQUFVLEVBQUU7TUFDVmIsT0FBTyxFQUFFLFdBQVc7TUFDcEJFLE1BQU0sRUFBRSxJQUFJO01BQ1pFLE1BQU0sRUFBRTtRQUNORSxXQUFXLEVBQUUsV0FBVztRQUN4QixZQUFZLEVBQUU7VUFDWk4sT0FBTyxFQUFFLDhCQUE4QjtVQUN2Q0MsVUFBVSxFQUFFO1FBQ2QsQ0FBQztRQUNELG9CQUFvQixFQUFFO1VBQ3BCRCxPQUFPLEVBQUUsU0FBUztVQUNsQkksTUFBTSxFQUFFUixLQUFLLENBQUNDLFNBQVMsQ0FBQ0o7UUFDMUI7TUFDRjtJQUNGLENBQUM7SUFDRCxRQUFNO01BQ0pPLE9BQU8sRUFDTCwyRUFBMkU7TUFDN0VFLE1BQU0sRUFBRTtJQUNWO0VBQ0YsQ0FBQyxDQUFDO0FBQ0oiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxmc2hhcnAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gZnNoYXJwXG5mc2hhcnAuZGlzcGxheU5hbWUgPSAnZnNoYXJwJ1xuZnNoYXJwLmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24gZnNoYXJwKFByaXNtKSB7XG4gIFByaXNtLmxhbmd1YWdlcy5mc2hhcnAgPSBQcmlzbS5sYW5ndWFnZXMuZXh0ZW5kKCdjbGlrZScsIHtcbiAgICBjb21tZW50OiBbXG4gICAgICB7XG4gICAgICAgIHBhdHRlcm46IC8oXnxbXlxcXFxdKVxcKFxcKig/IVxcKSlbXFxzXFxTXSo/XFwqXFwpLyxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBwYXR0ZXJuOiAvKF58W15cXFxcOl0pXFwvXFwvLiovLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICBncmVlZHk6IHRydWVcbiAgICAgIH1cbiAgICBdLFxuICAgIHN0cmluZzoge1xuICAgICAgcGF0dGVybjogLyg/OlwiXCJcIltcXHNcXFNdKj9cIlwiXCJ8QFwiKD86XCJcInxbXlwiXSkqXCJ8XCIoPzpcXFxcW1xcc1xcU118W15cXFxcXCJdKSpcIilCPy8sXG4gICAgICBncmVlZHk6IHRydWVcbiAgICB9LFxuICAgICdjbGFzcy1uYW1lJzoge1xuICAgICAgcGF0dGVybjpcbiAgICAgICAgLyhcXGIoPzpleGNlcHRpb258aW5oZXJpdHxpbnRlcmZhY2V8bmV3fG9mfHR5cGUpXFxzK3xcXHdcXHMqOlxccyp8XFxzOlxcPz8+XFxzKilbLlxcd10rXFxiKD86XFxzKig/Oi0+fFxcKilcXHMqWy5cXHddK1xcYikqKD8hXFxzKls6Ll0pLyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBpbnNpZGU6IHtcbiAgICAgICAgb3BlcmF0b3I6IC8tPnxcXCovLFxuICAgICAgICBwdW5jdHVhdGlvbjogL1xcLi9cbiAgICAgIH1cbiAgICB9LFxuICAgIGtleXdvcmQ6XG4gICAgICAvXFxiKD86bGV0fHJldHVybnx1c2V8eWllbGQpKD86IVxcQnxcXGIpfFxcYig/OmFic3RyYWN0fGFuZHxhc3xhc3J8YXNzZXJ0fGF0b21pY3xiYXNlfGJlZ2lufGJyZWFrfGNoZWNrZWR8Y2xhc3N8Y29tcG9uZW50fGNvbnN0fGNvbnN0cmFpbnR8Y29uc3RydWN0b3J8Y29udGludWV8ZGVmYXVsdHxkZWxlZ2F0ZXxkb3xkb25lfGRvd25jYXN0fGRvd250b3xlYWdlcnxlbGlmfGVsc2V8ZW5kfGV2ZW50fGV4Y2VwdGlvbnxleHRlcm58ZXh0ZXJuYWx8ZmFsc2V8ZmluYWxseXxmaXhlZHxmb3J8ZnVufGZ1bmN0aW9ufGZ1bmN0b3J8Z2xvYmFsfGlmfGlufGluY2x1ZGV8aW5oZXJpdHxpbmxpbmV8aW50ZXJmYWNlfGludGVybmFsfGxhbmR8bGF6eXxsb3J8bHNsfGxzcnxseG9yfG1hdGNofG1lbWJlcnxtZXRob2R8bWl4aW58bW9kfG1vZHVsZXxtdXRhYmxlfG5hbWVzcGFjZXxuZXd8bm90fG51bGx8b2JqZWN0fG9mfG9wZW58b3J8b3ZlcnJpZGV8cGFyYWxsZWx8cHJpdmF0ZXxwcm9jZXNzfHByb3RlY3RlZHxwdWJsaWN8cHVyZXxyZWN8c2VhbGVkfHNlbGVjdHxzaWd8c3RhdGljfHN0cnVjdHx0YWlsY2FsbHx0aGVufHRvfHRyYWl0fHRydWV8dHJ5fHR5cGV8dXBjYXN0fHZhbHx2aXJ0dWFsfHZvaWR8dm9sYXRpbGV8d2hlbnx3aGlsZXx3aXRoKVxcYi8sXG4gICAgbnVtYmVyOiBbXG4gICAgICAvXFxiMHhbXFxkYS1mQS1GXSsoPzpMRnxsZnx1bik/XFxiLyxcbiAgICAgIC9cXGIwYlswMV0rKD86dXl8eSk/XFxiLyxcbiAgICAgIC8oPzpcXGJcXGQrKD86XFwuXFxkKik/fFxcQlxcLlxcZCspKD86W2ZtXXxlWystXT9cXGQrKT9cXGIvaSxcbiAgICAgIC9cXGJcXGQrKD86W0lsTHN5XXxVTHx1W2xzeV0/KT9cXGIvXG4gICAgXSxcbiAgICBvcGVyYXRvcjpcbiAgICAgIC8oWzw+fiZeXSlcXDFcXDF8KFsqLjo8PiZdKVxcMnw8LXwtPnxbIT06XT18PD9cXHx7MSwzfT4/fFxcPz8oPzo8PXw+PXw8PnxbLSsqLyU9PD5dKVxcPz98WyE/XiZdfH5bK34tXXw6Pnw6XFw/Pj8vXG4gIH0pXG4gIFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ2ZzaGFycCcsICdrZXl3b3JkJywge1xuICAgIHByZXByb2Nlc3Nvcjoge1xuICAgICAgcGF0dGVybjogLyheW1xcdCBdKikjLiovbSxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBhbGlhczogJ3Byb3BlcnR5JyxcbiAgICAgIGluc2lkZToge1xuICAgICAgICBkaXJlY3RpdmU6IHtcbiAgICAgICAgICBwYXR0ZXJuOiAvKF4jKVxcYig/OmVsc2V8ZW5kaWZ8aWZ8bGlnaHR8bGluZXxub3dhcm4pXFxiLyxcbiAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAgIGFsaWFzOiAna2V5d29yZCdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSlcbiAgUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgnZnNoYXJwJywgJ3B1bmN0dWF0aW9uJywge1xuICAgICdjb21wdXRhdGlvbi1leHByZXNzaW9uJzoge1xuICAgICAgcGF0dGVybjogL1xcYltfYS16XVxcdyooPz1cXHMqXFx7KS9pLFxuICAgICAgYWxpYXM6ICdrZXl3b3JkJ1xuICAgIH1cbiAgfSlcbiAgUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgnZnNoYXJwJywgJ3N0cmluZycsIHtcbiAgICBhbm5vdGF0aW9uOiB7XG4gICAgICBwYXR0ZXJuOiAvXFxbPC4rPz5cXF0vLFxuICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgIHB1bmN0dWF0aW9uOiAvXlxcWzx8PlxcXSQvLFxuICAgICAgICAnY2xhc3MtbmFtZSc6IHtcbiAgICAgICAgICBwYXR0ZXJuOiAvXlxcdyskfChefDtcXHMqKVtBLVpdXFx3Kig/PVxcKCkvLFxuICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgJ2Fubm90YXRpb24tY29udGVudCc6IHtcbiAgICAgICAgICBwYXR0ZXJuOiAvW1xcc1xcU10rLyxcbiAgICAgICAgICBpbnNpZGU6IFByaXNtLmxhbmd1YWdlcy5mc2hhcnBcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgY2hhcjoge1xuICAgICAgcGF0dGVybjpcbiAgICAgICAgLycoPzpbXlxcXFwnXXxcXFxcKD86LnxcXGR7M318eFthLWZBLUZcXGRdezJ9fHVbYS1mQS1GXFxkXXs0fXxVW2EtZkEtRlxcZF17OH0pKSdCPy8sXG4gICAgICBncmVlZHk6IHRydWVcbiAgICB9XG4gIH0pXG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImZzaGFycCIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwiZXh0ZW5kIiwiY29tbWVudCIsInBhdHRlcm4iLCJsb29rYmVoaW5kIiwiZ3JlZWR5Iiwic3RyaW5nIiwiaW5zaWRlIiwib3BlcmF0b3IiLCJwdW5jdHVhdGlvbiIsImtleXdvcmQiLCJudW1iZXIiLCJpbnNlcnRCZWZvcmUiLCJwcmVwcm9jZXNzb3IiLCJhbGlhcyIsImRpcmVjdGl2ZSIsImFubm90YXRpb24iXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/fsharp.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/ftl.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/ftl.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar refractorMarkupTemplating = __webpack_require__(/*! ./markup-templating.js */ \"(ssr)/./node_modules/refractor/lang/markup-templating.js\");\nmodule.exports = ftl;\nftl.displayName = 'ftl';\nftl.aliases = [];\nfunction ftl(Prism) {\n  Prism.register(refractorMarkupTemplating);\n  (function (Prism) {\n    // https://freemarker.apache.org/docs/dgui_template_exp.html\n    // FTL expression with 4 levels of nesting supported\n    var FTL_EXPR = /[^<()\"']|\\((?:<expr>)*\\)|<(?!#--)|<#--(?:[^-]|-(?!->))*-->|\"(?:[^\\\\\"]|\\\\.)*\"|'(?:[^\\\\']|\\\\.)*'/.source;\n    for (var i = 0; i < 2; i++) {\n      FTL_EXPR = FTL_EXPR.replace(/<expr>/g, function () {\n        return FTL_EXPR;\n      });\n    }\n    FTL_EXPR = FTL_EXPR.replace(/<expr>/g, /[^\\s\\S]/.source);\n    var ftl = {\n      comment: /<#--[\\s\\S]*?-->/,\n      string: [{\n        // raw string\n        pattern: /\\br(\"|')(?:(?!\\1)[^\\\\]|\\\\.)*\\1/,\n        greedy: true\n      }, {\n        pattern: RegExp(/(\"|')(?:(?!\\1|\\$\\{)[^\\\\]|\\\\.|\\$\\{(?:(?!\\})(?:<expr>))*\\})*\\1/.source.replace(/<expr>/g, function () {\n          return FTL_EXPR;\n        })),\n        greedy: true,\n        inside: {\n          interpolation: {\n            pattern: RegExp(/((?:^|[^\\\\])(?:\\\\\\\\)*)\\$\\{(?:(?!\\})(?:<expr>))*\\}/.source.replace(/<expr>/g, function () {\n              return FTL_EXPR;\n            })),\n            lookbehind: true,\n            inside: {\n              'interpolation-punctuation': {\n                pattern: /^\\$\\{|\\}$/,\n                alias: 'punctuation'\n              },\n              rest: null\n            }\n          }\n        }\n      }],\n      keyword: /\\b(?:as)\\b/,\n      \"boolean\": /\\b(?:false|true)\\b/,\n      'builtin-function': {\n        pattern: /((?:^|[^?])\\?\\s*)\\w+/,\n        lookbehind: true,\n        alias: 'function'\n      },\n      \"function\": /\\b\\w+(?=\\s*\\()/,\n      number: /\\b\\d+(?:\\.\\d+)?\\b/,\n      operator: /\\.\\.[<*!]?|->|--|\\+\\+|&&|\\|\\||\\?{1,2}|[-+*/%!=<>]=?|\\b(?:gt|gte|lt|lte)\\b/,\n      punctuation: /[,;.:()[\\]{}]/\n    };\n    ftl.string[1].inside.interpolation.inside.rest = ftl;\n    Prism.languages.ftl = {\n      'ftl-comment': {\n        // the pattern is shortened to be more efficient\n        pattern: /^<#--[\\s\\S]*/,\n        alias: 'comment'\n      },\n      'ftl-directive': {\n        pattern: /^<[\\s\\S]+>$/,\n        inside: {\n          directive: {\n            pattern: /(^<\\/?)[#@][a-z]\\w*/i,\n            lookbehind: true,\n            alias: 'keyword'\n          },\n          punctuation: /^<\\/?|\\/?>$/,\n          content: {\n            pattern: /\\s*\\S[\\s\\S]*/,\n            alias: 'ftl',\n            inside: ftl\n          }\n        }\n      },\n      'ftl-interpolation': {\n        pattern: /^\\$\\{[\\s\\S]*\\}$/,\n        inside: {\n          punctuation: /^\\$\\{|\\}$/,\n          content: {\n            pattern: /\\s*\\S[\\s\\S]*/,\n            alias: 'ftl',\n            inside: ftl\n          }\n        }\n      }\n    };\n    Prism.hooks.add('before-tokenize', function (env) {\n      // eslint-disable-next-line regexp/no-useless-lazy\n      var pattern = RegExp(/<#--[\\s\\S]*?-->|<\\/?[#@][a-zA-Z](?:<expr>)*?>|\\$\\{(?:<expr>)*?\\}/.source.replace(/<expr>/g, function () {\n        return FTL_EXPR;\n      }), 'gi');\n      Prism.languages['markup-templating'].buildPlaceholders(env, 'ftl', pattern);\n    });\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'ftl');\n    });\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/ftl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/gap.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/gap.js ***!
  \********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = gap;\ngap.displayName = 'gap';\ngap.aliases = [];\nfunction gap(Prism) {\n  // https://www.gap-system.org/Manuals/doc/ref/chap4.html\n  // https://www.gap-system.org/Manuals/doc/ref/chap27.html\n  Prism.languages.gap = {\n    shell: {\n      pattern: /^gap>[\\s\\S]*?(?=^gap>|$(?![\\s\\S]))/m,\n      greedy: true,\n      inside: {\n        gap: {\n          pattern: /^(gap>).+(?:(?:\\r(?:\\n|(?!\\n))|\\n)>.*)*/,\n          lookbehind: true,\n          inside: null // see below\n        },\n\n        punctuation: /^gap>/\n      }\n    },\n    comment: {\n      pattern: /#.*/,\n      greedy: true\n    },\n    string: {\n      pattern: /(^|[^\\\\'\"])(?:'(?:[^\\r\\n\\\\']|\\\\.){1,10}'|\"(?:[^\\r\\n\\\\\"]|\\\\.)*\"(?!\")|\"\"\"[\\s\\S]*?\"\"\")/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        continuation: {\n          pattern: /([\\r\\n])>/,\n          lookbehind: true,\n          alias: 'punctuation'\n        }\n      }\n    },\n    keyword: /\\b(?:Assert|Info|IsBound|QUIT|TryNextMethod|Unbind|and|atomic|break|continue|do|elif|else|end|fi|for|function|if|in|local|mod|not|od|or|quit|readonly|readwrite|rec|repeat|return|then|until|while)\\b/,\n    \"boolean\": /\\b(?:false|true)\\b/,\n    \"function\": /\\b[a-z_]\\w*(?=\\s*\\()/i,\n    number: {\n      pattern: /(^|[^\\w.]|\\.\\.)(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[eE][+-]?\\d+)?(?:_[a-z]?)?(?=$|[^\\w.]|\\.\\.)/,\n      lookbehind: true\n    },\n    continuation: {\n      pattern: /([\\r\\n])>/,\n      lookbehind: true,\n      alias: 'punctuation'\n    },\n    operator: /->|[-+*/^~=!]|<>|[<>]=?|:=|\\.\\./,\n    punctuation: /[()[\\]{},;.:]/\n  };\n  Prism.languages.gap.shell.inside.gap.inside = Prism.languages.gap;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvZ2FwLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsR0FBRztBQUNwQkEsR0FBRyxDQUFDQyxXQUFXLEdBQUcsS0FBSztBQUN2QkQsR0FBRyxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNoQixTQUFTRixHQUFHQSxDQUFDRyxLQUFLLEVBQUU7RUFDbEI7RUFDQTtFQUNBQSxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osR0FBRyxHQUFHO0lBQ3BCSyxLQUFLLEVBQUU7TUFDTEMsT0FBTyxFQUFFLHFDQUFxQztNQUM5Q0MsTUFBTSxFQUFFLElBQUk7TUFDWkMsTUFBTSxFQUFFO1FBQ05SLEdBQUcsRUFBRTtVQUNITSxPQUFPLEVBQUUseUNBQXlDO1VBQ2xERyxVQUFVLEVBQUUsSUFBSTtVQUNoQkQsTUFBTSxFQUFFLElBQUksQ0FBQztRQUNmLENBQUM7O1FBQ0RFLFdBQVcsRUFBRTtNQUNmO0lBQ0YsQ0FBQztJQUNEQyxPQUFPLEVBQUU7TUFDUEwsT0FBTyxFQUFFLEtBQUs7TUFDZEMsTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUNESyxNQUFNLEVBQUU7TUFDTk4sT0FBTyxFQUNMLHFGQUFxRjtNQUN2RkcsVUFBVSxFQUFFLElBQUk7TUFDaEJGLE1BQU0sRUFBRSxJQUFJO01BQ1pDLE1BQU0sRUFBRTtRQUNOSyxZQUFZLEVBQUU7VUFDWlAsT0FBTyxFQUFFLFdBQVc7VUFDcEJHLFVBQVUsRUFBRSxJQUFJO1VBQ2hCSyxLQUFLLEVBQUU7UUFDVDtNQUNGO0lBQ0YsQ0FBQztJQUNEQyxPQUFPLEVBQ0wsdU1BQXVNO0lBQ3pNLFdBQVMsb0JBQW9CO0lBQzdCLFlBQVUsdUJBQXVCO0lBQ2pDQyxNQUFNLEVBQUU7TUFDTlYsT0FBTyxFQUNMLHNGQUFzRjtNQUN4RkcsVUFBVSxFQUFFO0lBQ2QsQ0FBQztJQUNESSxZQUFZLEVBQUU7TUFDWlAsT0FBTyxFQUFFLFdBQVc7TUFDcEJHLFVBQVUsRUFBRSxJQUFJO01BQ2hCSyxLQUFLLEVBQUU7SUFDVCxDQUFDO0lBQ0RHLFFBQVEsRUFBRSxpQ0FBaUM7SUFDM0NQLFdBQVcsRUFBRTtFQUNmLENBQUM7RUFDRFAsS0FBSyxDQUFDQyxTQUFTLENBQUNKLEdBQUcsQ0FBQ0ssS0FBSyxDQUFDRyxNQUFNLENBQUNSLEdBQUcsQ0FBQ1EsTUFBTSxHQUFHTCxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osR0FBRztBQUNuRSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXGdhcC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBnYXBcbmdhcC5kaXNwbGF5TmFtZSA9ICdnYXAnXG5nYXAuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBnYXAoUHJpc20pIHtcbiAgLy8gaHR0cHM6Ly93d3cuZ2FwLXN5c3RlbS5vcmcvTWFudWFscy9kb2MvcmVmL2NoYXA0Lmh0bWxcbiAgLy8gaHR0cHM6Ly93d3cuZ2FwLXN5c3RlbS5vcmcvTWFudWFscy9kb2MvcmVmL2NoYXAyNy5odG1sXG4gIFByaXNtLmxhbmd1YWdlcy5nYXAgPSB7XG4gICAgc2hlbGw6IHtcbiAgICAgIHBhdHRlcm46IC9eZ2FwPltcXHNcXFNdKj8oPz1eZ2FwPnwkKD8hW1xcc1xcU10pKS9tLFxuICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgIGdhcDoge1xuICAgICAgICAgIHBhdHRlcm46IC9eKGdhcD4pLisoPzooPzpcXHIoPzpcXG58KD8hXFxuKSl8XFxuKT4uKikqLyxcbiAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAgIGluc2lkZTogbnVsbCAvLyBzZWUgYmVsb3dcbiAgICAgICAgfSxcbiAgICAgICAgcHVuY3R1YXRpb246IC9eZ2FwPi9cbiAgICAgIH1cbiAgICB9LFxuICAgIGNvbW1lbnQ6IHtcbiAgICAgIHBhdHRlcm46IC8jLiovLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICBzdHJpbmc6IHtcbiAgICAgIHBhdHRlcm46XG4gICAgICAgIC8oXnxbXlxcXFwnXCJdKSg/OicoPzpbXlxcclxcblxcXFwnXXxcXFxcLil7MSwxMH0nfFwiKD86W15cXHJcXG5cXFxcXCJdfFxcXFwuKSpcIig/IVwiKXxcIlwiXCJbXFxzXFxTXSo/XCJcIlwiKS8sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgIGNvbnRpbnVhdGlvbjoge1xuICAgICAgICAgIHBhdHRlcm46IC8oW1xcclxcbl0pPi8sXG4gICAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgICBhbGlhczogJ3B1bmN0dWF0aW9uJ1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBrZXl3b3JkOlxuICAgICAgL1xcYig/OkFzc2VydHxJbmZvfElzQm91bmR8UVVJVHxUcnlOZXh0TWV0aG9kfFVuYmluZHxhbmR8YXRvbWljfGJyZWFrfGNvbnRpbnVlfGRvfGVsaWZ8ZWxzZXxlbmR8Zml8Zm9yfGZ1bmN0aW9ufGlmfGlufGxvY2FsfG1vZHxub3R8b2R8b3J8cXVpdHxyZWFkb25seXxyZWFkd3JpdGV8cmVjfHJlcGVhdHxyZXR1cm58dGhlbnx1bnRpbHx3aGlsZSlcXGIvLFxuICAgIGJvb2xlYW46IC9cXGIoPzpmYWxzZXx0cnVlKVxcYi8sXG4gICAgZnVuY3Rpb246IC9cXGJbYS16X11cXHcqKD89XFxzKlxcKCkvaSxcbiAgICBudW1iZXI6IHtcbiAgICAgIHBhdHRlcm46XG4gICAgICAgIC8oXnxbXlxcdy5dfFxcLlxcLikoPzpcXGQrKD86XFwuXFxkKik/fFxcLlxcZCspKD86W2VFXVsrLV0/XFxkKyk/KD86X1thLXpdPyk/KD89JHxbXlxcdy5dfFxcLlxcLikvLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgIH0sXG4gICAgY29udGludWF0aW9uOiB7XG4gICAgICBwYXR0ZXJuOiAvKFtcXHJcXG5dKT4vLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGFsaWFzOiAncHVuY3R1YXRpb24nXG4gICAgfSxcbiAgICBvcGVyYXRvcjogLy0+fFstKyovXn49IV18PD58Wzw+XT0/fDo9fFxcLlxcLi8sXG4gICAgcHVuY3R1YXRpb246IC9bKClbXFxde30sOy46XS9cbiAgfVxuICBQcmlzbS5sYW5ndWFnZXMuZ2FwLnNoZWxsLmluc2lkZS5nYXAuaW5zaWRlID0gUHJpc20ubGFuZ3VhZ2VzLmdhcFxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJnYXAiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImxhbmd1YWdlcyIsInNoZWxsIiwicGF0dGVybiIsImdyZWVkeSIsImluc2lkZSIsImxvb2tiZWhpbmQiLCJwdW5jdHVhdGlvbiIsImNvbW1lbnQiLCJzdHJpbmciLCJjb250aW51YXRpb24iLCJhbGlhcyIsImtleXdvcmQiLCJudW1iZXIiLCJvcGVyYXRvciJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/gap.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/gcode.js":
/*!**********************************************!*\
  !*** ./node_modules/refractor/lang/gcode.js ***!
  \**********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = gcode;\ngcode.displayName = 'gcode';\ngcode.aliases = [];\nfunction gcode(Prism) {\n  Prism.languages.gcode = {\n    comment: /;.*|\\B\\(.*?\\)\\B/,\n    string: {\n      pattern: /\"(?:\"\"|[^\"])*\"/,\n      greedy: true\n    },\n    keyword: /\\b[GM]\\d+(?:\\.\\d+)?\\b/,\n    property: /\\b[A-Z]/,\n    checksum: {\n      pattern: /(\\*)\\d+/,\n      lookbehind: true,\n      alias: 'number'\n    },\n    // T0:0:0\n    punctuation: /[:*]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvZ2NvZGUuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxLQUFLO0FBQ3RCQSxLQUFLLENBQUNDLFdBQVcsR0FBRyxPQUFPO0FBQzNCRCxLQUFLLENBQUNFLE9BQU8sR0FBRyxFQUFFO0FBQ2xCLFNBQVNGLEtBQUtBLENBQUNHLEtBQUssRUFBRTtFQUNwQkEsS0FBSyxDQUFDQyxTQUFTLENBQUNKLEtBQUssR0FBRztJQUN0QkssT0FBTyxFQUFFLGlCQUFpQjtJQUMxQkMsTUFBTSxFQUFFO01BQ05DLE9BQU8sRUFBRSxnQkFBZ0I7TUFDekJDLE1BQU0sRUFBRTtJQUNWLENBQUM7SUFDREMsT0FBTyxFQUFFLHVCQUF1QjtJQUNoQ0MsUUFBUSxFQUFFLFNBQVM7SUFDbkJDLFFBQVEsRUFBRTtNQUNSSixPQUFPLEVBQUUsU0FBUztNQUNsQkssVUFBVSxFQUFFLElBQUk7TUFDaEJDLEtBQUssRUFBRTtJQUNULENBQUM7SUFDRDtJQUNBQyxXQUFXLEVBQUU7RUFDZixDQUFDO0FBQ0giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxnY29kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBnY29kZVxuZ2NvZGUuZGlzcGxheU5hbWUgPSAnZ2NvZGUnXG5nY29kZS5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIGdjb2RlKFByaXNtKSB7XG4gIFByaXNtLmxhbmd1YWdlcy5nY29kZSA9IHtcbiAgICBjb21tZW50OiAvOy4qfFxcQlxcKC4qP1xcKVxcQi8sXG4gICAgc3RyaW5nOiB7XG4gICAgICBwYXR0ZXJuOiAvXCIoPzpcIlwifFteXCJdKSpcIi8sXG4gICAgICBncmVlZHk6IHRydWVcbiAgICB9LFxuICAgIGtleXdvcmQ6IC9cXGJbR01dXFxkKyg/OlxcLlxcZCspP1xcYi8sXG4gICAgcHJvcGVydHk6IC9cXGJbQS1aXS8sXG4gICAgY2hlY2tzdW06IHtcbiAgICAgIHBhdHRlcm46IC8oXFwqKVxcZCsvLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGFsaWFzOiAnbnVtYmVyJ1xuICAgIH0sXG4gICAgLy8gVDA6MDowXG4gICAgcHVuY3R1YXRpb246IC9bOipdL1xuICB9XG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImdjb2RlIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJjb21tZW50Iiwic3RyaW5nIiwicGF0dGVybiIsImdyZWVkeSIsImtleXdvcmQiLCJwcm9wZXJ0eSIsImNoZWNrc3VtIiwibG9va2JlaGluZCIsImFsaWFzIiwicHVuY3R1YXRpb24iXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/gcode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/gdscript.js":
/*!*************************************************!*\
  !*** ./node_modules/refractor/lang/gdscript.js ***!
  \*************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = gdscript;\ngdscript.displayName = 'gdscript';\ngdscript.aliases = [];\nfunction gdscript(Prism) {\n  Prism.languages.gdscript = {\n    comment: /#.*/,\n    string: {\n      pattern: /@?(?:(\"|')(?:(?!\\1)[^\\n\\\\]|\\\\[\\s\\S])*\\1(?!\"|')|\"\"\"(?:[^\\\\]|\\\\[\\s\\S])*?\"\"\")/,\n      greedy: true\n    },\n    'class-name': {\n      // class_name Foo, extends Bar, class InnerClass\n      // export(int) var baz, export(int, 0) var i\n      // as Node\n      // const FOO: int = 9, var bar: bool = true\n      // func add(reference: Item, amount: int) -> Item:\n      pattern: /(^(?:class|class_name|extends)[ \\t]+|^export\\([ \\t]*|\\bas[ \\t]+|(?:\\b(?:const|var)[ \\t]|[,(])[ \\t]*\\w+[ \\t]*:[ \\t]*|->[ \\t]*)[a-zA-Z_]\\w*/m,\n      lookbehind: true\n    },\n    keyword: /\\b(?:and|as|assert|break|breakpoint|class|class_name|const|continue|elif|else|enum|export|extends|for|func|if|in|is|master|mastersync|match|not|null|onready|or|pass|preload|puppet|puppetsync|remote|remotesync|return|self|setget|signal|static|tool|var|while|yield)\\b/,\n    \"function\": /\\b[a-z_]\\w*(?=[ \\t]*\\()/i,\n    variable: /\\$\\w+/,\n    number: [/\\b0b[01_]+\\b|\\b0x[\\da-fA-F_]+\\b|(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.[\\d_]+)(?:e[+-]?[\\d_]+)?\\b/, /\\b(?:INF|NAN|PI|TAU)\\b/],\n    constant: /\\b[A-Z][A-Z_\\d]*\\b/,\n    \"boolean\": /\\b(?:false|true)\\b/,\n    operator: /->|:=|&&|\\|\\||<<|>>|[-+*/%&|!<>=]=?|[~^]/,\n    punctuation: /[.:,;()[\\]{}]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvZ2RzY3JpcHQuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxRQUFRO0FBQ3pCQSxRQUFRLENBQUNDLFdBQVcsR0FBRyxVQUFVO0FBQ2pDRCxRQUFRLENBQUNFLE9BQU8sR0FBRyxFQUFFO0FBQ3JCLFNBQVNGLFFBQVFBLENBQUNHLEtBQUssRUFBRTtFQUN2QkEsS0FBSyxDQUFDQyxTQUFTLENBQUNKLFFBQVEsR0FBRztJQUN6QkssT0FBTyxFQUFFLEtBQUs7SUFDZEMsTUFBTSxFQUFFO01BQ05DLE9BQU8sRUFDTCw0RUFBNEU7TUFDOUVDLE1BQU0sRUFBRTtJQUNWLENBQUM7SUFDRCxZQUFZLEVBQUU7TUFDWjtNQUNBO01BQ0E7TUFDQTtNQUNBO01BQ0FELE9BQU8sRUFDTCw0SUFBNEk7TUFDOUlFLFVBQVUsRUFBRTtJQUNkLENBQUM7SUFDREMsT0FBTyxFQUNMLDJRQUEyUTtJQUM3USxZQUFVLDBCQUEwQjtJQUNwQ0MsUUFBUSxFQUFFLE9BQU87SUFDakJDLE1BQU0sRUFBRSxDQUNOLDJGQUEyRixFQUMzRix3QkFBd0IsQ0FDekI7SUFDREMsUUFBUSxFQUFFLG9CQUFvQjtJQUM5QixXQUFTLG9CQUFvQjtJQUM3QkMsUUFBUSxFQUFFLDBDQUEwQztJQUNwREMsV0FBVyxFQUFFO0VBQ2YsQ0FBQztBQUNIIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcZ2RzY3JpcHQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gZ2RzY3JpcHRcbmdkc2NyaXB0LmRpc3BsYXlOYW1lID0gJ2dkc2NyaXB0J1xuZ2RzY3JpcHQuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBnZHNjcmlwdChQcmlzbSkge1xuICBQcmlzbS5sYW5ndWFnZXMuZ2RzY3JpcHQgPSB7XG4gICAgY29tbWVudDogLyMuKi8sXG4gICAgc3RyaW5nOiB7XG4gICAgICBwYXR0ZXJuOlxuICAgICAgICAvQD8oPzooXCJ8JykoPzooPyFcXDEpW15cXG5cXFxcXXxcXFxcW1xcc1xcU10pKlxcMSg/IVwifCcpfFwiXCJcIig/OlteXFxcXF18XFxcXFtcXHNcXFNdKSo/XCJcIlwiKS8sXG4gICAgICBncmVlZHk6IHRydWVcbiAgICB9LFxuICAgICdjbGFzcy1uYW1lJzoge1xuICAgICAgLy8gY2xhc3NfbmFtZSBGb28sIGV4dGVuZHMgQmFyLCBjbGFzcyBJbm5lckNsYXNzXG4gICAgICAvLyBleHBvcnQoaW50KSB2YXIgYmF6LCBleHBvcnQoaW50LCAwKSB2YXIgaVxuICAgICAgLy8gYXMgTm9kZVxuICAgICAgLy8gY29uc3QgRk9POiBpbnQgPSA5LCB2YXIgYmFyOiBib29sID0gdHJ1ZVxuICAgICAgLy8gZnVuYyBhZGQocmVmZXJlbmNlOiBJdGVtLCBhbW91bnQ6IGludCkgLT4gSXRlbTpcbiAgICAgIHBhdHRlcm46XG4gICAgICAgIC8oXig/OmNsYXNzfGNsYXNzX25hbWV8ZXh0ZW5kcylbIFxcdF0rfF5leHBvcnRcXChbIFxcdF0qfFxcYmFzWyBcXHRdK3woPzpcXGIoPzpjb25zdHx2YXIpWyBcXHRdfFssKF0pWyBcXHRdKlxcdytbIFxcdF0qOlsgXFx0XSp8LT5bIFxcdF0qKVthLXpBLVpfXVxcdyovbSxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICB9LFxuICAgIGtleXdvcmQ6XG4gICAgICAvXFxiKD86YW5kfGFzfGFzc2VydHxicmVha3xicmVha3BvaW50fGNsYXNzfGNsYXNzX25hbWV8Y29uc3R8Y29udGludWV8ZWxpZnxlbHNlfGVudW18ZXhwb3J0fGV4dGVuZHN8Zm9yfGZ1bmN8aWZ8aW58aXN8bWFzdGVyfG1hc3RlcnN5bmN8bWF0Y2h8bm90fG51bGx8b25yZWFkeXxvcnxwYXNzfHByZWxvYWR8cHVwcGV0fHB1cHBldHN5bmN8cmVtb3RlfHJlbW90ZXN5bmN8cmV0dXJufHNlbGZ8c2V0Z2V0fHNpZ25hbHxzdGF0aWN8dG9vbHx2YXJ8d2hpbGV8eWllbGQpXFxiLyxcbiAgICBmdW5jdGlvbjogL1xcYlthLXpfXVxcdyooPz1bIFxcdF0qXFwoKS9pLFxuICAgIHZhcmlhYmxlOiAvXFwkXFx3Ky8sXG4gICAgbnVtYmVyOiBbXG4gICAgICAvXFxiMGJbMDFfXStcXGJ8XFxiMHhbXFxkYS1mQS1GX10rXFxifCg/OlxcYlxcZFtcXGRfXSooPzpcXC5bXFxkX10qKT98XFxCXFwuW1xcZF9dKykoPzplWystXT9bXFxkX10rKT9cXGIvLFxuICAgICAgL1xcYig/OklORnxOQU58UEl8VEFVKVxcYi9cbiAgICBdLFxuICAgIGNvbnN0YW50OiAvXFxiW0EtWl1bQS1aX1xcZF0qXFxiLyxcbiAgICBib29sZWFuOiAvXFxiKD86ZmFsc2V8dHJ1ZSlcXGIvLFxuICAgIG9wZXJhdG9yOiAvLT58Oj18JiZ8XFx8XFx8fDw8fD4+fFstKyovJSZ8ITw+PV09P3xbfl5dLyxcbiAgICBwdW5jdHVhdGlvbjogL1suOiw7KClbXFxde31dL1xuICB9XG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImdkc2NyaXB0IiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJjb21tZW50Iiwic3RyaW5nIiwicGF0dGVybiIsImdyZWVkeSIsImxvb2tiZWhpbmQiLCJrZXl3b3JkIiwidmFyaWFibGUiLCJudW1iZXIiLCJjb25zdGFudCIsIm9wZXJhdG9yIiwicHVuY3R1YXRpb24iXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/gdscript.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/gedcom.js":
/*!***********************************************!*\
  !*** ./node_modules/refractor/lang/gedcom.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = gedcom;\ngedcom.displayName = 'gedcom';\ngedcom.aliases = [];\nfunction gedcom(Prism) {\n  Prism.languages.gedcom = {\n    'line-value': {\n      // Preceded by level, optional pointer, and tag\n      pattern: /(^[\\t ]*\\d+ +(?:@\\w[\\w!\"$%&'()*+,\\-./:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@ +)?\\w+ ).+/m,\n      lookbehind: true,\n      inside: {\n        pointer: {\n          pattern: /^@\\w[\\w!\"$%&'()*+,\\-./:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@$/,\n          alias: 'variable'\n        }\n      }\n    },\n    tag: {\n      // Preceded by level and optional pointer\n      pattern: /(^[\\t ]*\\d+ +(?:@\\w[\\w!\"$%&'()*+,\\-./:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@ +)?)\\w+/m,\n      lookbehind: true,\n      alias: 'string'\n    },\n    level: {\n      pattern: /(^[\\t ]*)\\d+/m,\n      lookbehind: true,\n      alias: 'number'\n    },\n    pointer: {\n      pattern: /@\\w[\\w!\"$%&'()*+,\\-./:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@/,\n      alias: 'variable'\n    }\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvZ2VkY29tLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsTUFBTTtBQUN2QkEsTUFBTSxDQUFDQyxXQUFXLEdBQUcsUUFBUTtBQUM3QkQsTUFBTSxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNuQixTQUFTRixNQUFNQSxDQUFDRyxLQUFLLEVBQUU7RUFDckJBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixNQUFNLEdBQUc7SUFDdkIsWUFBWSxFQUFFO01BQ1o7TUFDQUssT0FBTyxFQUNMLGtGQUFrRjtNQUNwRkMsVUFBVSxFQUFFLElBQUk7TUFDaEJDLE1BQU0sRUFBRTtRQUNOQyxPQUFPLEVBQUU7VUFDUEgsT0FBTyxFQUFFLHdEQUF3RDtVQUNqRUksS0FBSyxFQUFFO1FBQ1Q7TUFDRjtJQUNGLENBQUM7SUFDREMsR0FBRyxFQUFFO01BQ0g7TUFDQUwsT0FBTyxFQUNMLCtFQUErRTtNQUNqRkMsVUFBVSxFQUFFLElBQUk7TUFDaEJHLEtBQUssRUFBRTtJQUNULENBQUM7SUFDREUsS0FBSyxFQUFFO01BQ0xOLE9BQU8sRUFBRSxlQUFlO01BQ3hCQyxVQUFVLEVBQUUsSUFBSTtNQUNoQkcsS0FBSyxFQUFFO0lBQ1QsQ0FBQztJQUNERCxPQUFPLEVBQUU7TUFDUEgsT0FBTyxFQUFFLHNEQUFzRDtNQUMvREksS0FBSyxFQUFFO0lBQ1Q7RUFDRixDQUFDO0FBQ0giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxnZWRjb20uanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gZ2VkY29tXG5nZWRjb20uZGlzcGxheU5hbWUgPSAnZ2VkY29tJ1xuZ2VkY29tLmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24gZ2VkY29tKFByaXNtKSB7XG4gIFByaXNtLmxhbmd1YWdlcy5nZWRjb20gPSB7XG4gICAgJ2xpbmUtdmFsdWUnOiB7XG4gICAgICAvLyBQcmVjZWRlZCBieSBsZXZlbCwgb3B0aW9uYWwgcG9pbnRlciwgYW5kIHRhZ1xuICAgICAgcGF0dGVybjpcbiAgICAgICAgLyheW1xcdCBdKlxcZCsgKyg/OkBcXHdbXFx3IVwiJCUmJygpKissXFwtLi86Ozw9Pj9bXFxcXFxcXV5ge3x9flxceDgwLVxceGZlICNdKkAgKyk/XFx3KyApLisvbSxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBpbnNpZGU6IHtcbiAgICAgICAgcG9pbnRlcjoge1xuICAgICAgICAgIHBhdHRlcm46IC9eQFxcd1tcXHchXCIkJSYnKCkqKyxcXC0uLzo7PD0+P1tcXFxcXFxdXmB7fH1+XFx4ODAtXFx4ZmUgI10qQCQvLFxuICAgICAgICAgIGFsaWFzOiAndmFyaWFibGUnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHRhZzoge1xuICAgICAgLy8gUHJlY2VkZWQgYnkgbGV2ZWwgYW5kIG9wdGlvbmFsIHBvaW50ZXJcbiAgICAgIHBhdHRlcm46XG4gICAgICAgIC8oXltcXHQgXSpcXGQrICsoPzpAXFx3W1xcdyFcIiQlJicoKSorLFxcLS4vOjs8PT4/W1xcXFxcXF1eYHt8fX5cXHg4MC1cXHhmZSAjXSpAICspPylcXHcrL20sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgYWxpYXM6ICdzdHJpbmcnXG4gICAgfSxcbiAgICBsZXZlbDoge1xuICAgICAgcGF0dGVybjogLyheW1xcdCBdKilcXGQrL20sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgYWxpYXM6ICdudW1iZXInXG4gICAgfSxcbiAgICBwb2ludGVyOiB7XG4gICAgICBwYXR0ZXJuOiAvQFxcd1tcXHchXCIkJSYnKCkqKyxcXC0uLzo7PD0+P1tcXFxcXFxdXmB7fH1+XFx4ODAtXFx4ZmUgI10qQC8sXG4gICAgICBhbGlhczogJ3ZhcmlhYmxlJ1xuICAgIH1cbiAgfVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJnZWRjb20iLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImxhbmd1YWdlcyIsInBhdHRlcm4iLCJsb29rYmVoaW5kIiwiaW5zaWRlIiwicG9pbnRlciIsImFsaWFzIiwidGFnIiwibGV2ZWwiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/gedcom.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/gherkin.js":
/*!************************************************!*\
  !*** ./node_modules/refractor/lang/gherkin.js ***!
  \************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = gherkin;\ngherkin.displayName = 'gherkin';\ngherkin.aliases = [];\nfunction gherkin(Prism) {\n  ;\n  (function (Prism) {\n    var tableRow = /(?:\\r?\\n|\\r)[ \\t]*\\|.+\\|(?:(?!\\|).)*/.source;\n    Prism.languages.gherkin = {\n      pystring: {\n        pattern: /(\"\"\"|''')[\\s\\S]+?\\1/,\n        alias: 'string'\n      },\n      comment: {\n        pattern: /(^[ \\t]*)#.*/m,\n        lookbehind: true\n      },\n      tag: {\n        pattern: /(^[ \\t]*)@\\S*/m,\n        lookbehind: true\n      },\n      feature: {\n        pattern: /((?:^|\\r?\\n|\\r)[ \\t]*)(?:Ability|Ahoy matey!|Arwedd|Aspekt|Besigheid Behoefte|Business Need|Caracteristica|Característica|Egenskab|Egenskap|Eiginleiki|Feature|Fīča|Fitur|Fonctionnalité|Fonksyonalite|Funcionalidade|Funcionalitat|Functionalitate|Funcţionalitate|Funcționalitate|Functionaliteit|Fungsi|Funkcia|Funkcija|Funkcionalitāte|Funkcionalnost|Funkcja|Funksie|Funktionalität|Funktionalitéit|Funzionalità|Hwaet|Hwæt|Jellemző|Karakteristik|Lastnost|Mak|Mogucnost|laH|Mogućnost|Moznosti|Možnosti|OH HAI|Omadus|Ominaisuus|Osobina|Özellik|Potrzeba biznesowa|perbogh|poQbogh malja'|Požadavek|Požiadavka|Pretty much|Qap|Qu'meH 'ut|Savybė|Tính năng|Trajto|Vermoë|Vlastnosť|Właściwość|Značilnost|Δυνατότητα|Λειτουργία|Могућност|Мөмкинлек|Особина|Свойство|Үзенчәлеклелек|Функционал|Функционалност|Функция|Функціонал|תכונה|خاصية|خصوصیت|صلاحیت|کاروبار کی ضرورت|وِیژگی|रूप लेख|ਖਾਸੀਅਤ|ਨਕਸ਼ ਨੁਹਾਰ|ਮੁਹਾਂਦਰਾ|గుణము|ಹೆಚ್ಚಳ|ความต้องการทางธุรกิจ|ความสามารถ|โครงหลัก|기능|フィーチャ|功能|機能):(?:[^:\\r\\n]+(?:\\r?\\n|\\r|$))*/,\n        lookbehind: true,\n        inside: {\n          important: {\n            pattern: /(:)[^\\r\\n]+/,\n            lookbehind: true\n          },\n          keyword: /[^:\\r\\n]+:/\n        }\n      },\n      scenario: {\n        pattern: /(^[ \\t]*)(?:Abstract Scenario|Abstrakt Scenario|Achtergrond|Aer|Ær|Agtergrond|All y'all|Antecedentes|Antecedents|Atburðarás|Atburðarásir|Awww, look mate|B4|Background|Baggrund|Bakgrund|Bakgrunn|Bakgrunnur|Beispiele|Beispiller|Bối cảnh|Cefndir|Cenario|Cenário|Cenario de Fundo|Cenário de Fundo|Cenarios|Cenários|Contesto|Context|Contexte|Contexto|Conto|Contoh|Contone|Dæmi|Dasar|Dead men tell no tales|Delineacao do Cenario|Delineação do Cenário|Dis is what went down|Dữ liệu|Dyagram Senaryo|Dyagram senaryo|Egzanp|Ejemplos|Eksempler|Ekzemploj|Enghreifftiau|Esbozo do escenario|Escenari|Escenario|Esempi|Esquema de l'escenari|Esquema del escenario|Esquema do Cenario|Esquema do Cenário|EXAMPLZ|Examples|Exempel|Exemple|Exemples|Exemplos|First off|Fono|Forgatókönyv|Forgatókönyv vázlat|Fundo|Geçmiş|Grundlage|Hannergrond|ghantoH|Háttér|Heave to|Istorik|Juhtumid|Keadaan|Khung kịch bản|Khung tình huống|Kịch bản|Koncept|Konsep skenario|Kontèks|Kontekst|Kontekstas|Konteksts|Kontext|Konturo de la scenaro|Latar Belakang|lut chovnatlh|lut|lutmey|Lýsing Atburðarásar|Lýsing Dæma|MISHUN SRSLY|MISHUN|Menggariskan Senario|mo'|Náčrt Scenára|Náčrt Scénáře|Náčrt Scenáru|Oris scenarija|Örnekler|Osnova|Osnova Scenára|Osnova scénáře|Osnutek|Ozadje|Paraugs|Pavyzdžiai|Példák|Piemēri|Plan du scénario|Plan du Scénario|Plan Senaryo|Plan senaryo|Plang vum Szenario|Pozadí|Pozadie|Pozadina|Príklady|Příklady|Primer|Primeri|Primjeri|Przykłady|Raamstsenaarium|Reckon it's like|Rerefons|Scenár|Scénář|Scenarie|Scenarij|Scenarijai|Scenarijaus šablonas|Scenariji|Scenārijs|Scenārijs pēc parauga|Scenarijus|Scenario|Scénario|Scenario Amlinellol|Scenario Outline|Scenario Template|Scenariomal|Scenariomall|Scenarios|Scenariu|Scenariusz|Scenaro|Schema dello scenario|Se ðe|Se the|Se þe|Senario|Senaryo Deskripsyon|Senaryo deskripsyon|Senaryo|Senaryo taslağı|Shiver me timbers|Situācija|Situai|Situasie Uiteensetting|Situasie|Skenario konsep|Skenario|Skica|Structura scenariu|Structură scenariu|Struktura scenarija|Stsenaarium|Swa hwaer swa|Swa|Swa hwær swa|Szablon scenariusza|Szenario|Szenariogrundriss|Tapaukset|Tapaus|Tapausaihio|Taust|Tausta|Template Keadaan|Template Senario|Template Situai|The thing of it is|Tình huống|Variantai|Voorbeelde|Voorbeelden|Wharrimean is|Yo-ho-ho|You'll wanna|Założenia|Παραδείγματα|Περιγραφή Σεναρίου|Σενάρια|Σενάριο|Υπόβαθρο|Кереш|Контекст|Концепт|Мисаллар|Мисоллар|Основа|Передумова|Позадина|Предистория|Предыстория|Приклади|Пример|Примери|Примеры|Рамка на сценарий|Скица|Структура сценарија|Структура сценария|Структура сценарію|Сценарий|Сценарий структураси|Сценарийның төзелеше|Сценарији|Сценарио|Сценарій|Тарих|Үрнәкләр|דוגמאות|רקע|תבנית תרחיש|תרחיש|الخلفية|الگوی سناریو|امثلة|پس منظر|زمینه|سناریو|سيناريو|سيناريو مخطط|مثالیں|منظر نامے کا خاکہ|منظرنامہ|نمونه ها|उदाहरण|परिदृश्य|परिदृश्य रूपरेखा|पृष्ठभूमि|ਉਦਾਹਰਨਾਂ|ਪਟਕਥਾ|ਪਟਕਥਾ ਢਾਂਚਾ|ਪਟਕਥਾ ਰੂਪ ਰੇਖਾ|ਪਿਛੋਕੜ|ఉదాహరణలు|కథనం|నేపథ్యం|సన్నివేశం|ಉದಾಹರಣೆಗಳು|ಕಥಾಸಾರಾಂಶ|ವಿವರಣೆ|ಹಿನ್ನೆಲೆ|โครงสร้างของเหตุการณ์|ชุดของตัวอย่าง|ชุดของเหตุการณ์|แนวคิด|สรุปเหตุการณ์|เหตุการณ์|배경|시나리오|시나리오 개요|예|サンプル|シナリオ|シナリオアウトライン|シナリオテンプレ|シナリオテンプレート|テンプレ|例|例子|剧本|剧本大纲|劇本|劇本大綱|场景|场景大纲|場景|場景大綱|背景):[^:\\r\\n]*/m,\n        lookbehind: true,\n        inside: {\n          important: {\n            pattern: /(:)[^\\r\\n]*/,\n            lookbehind: true\n          },\n          keyword: /[^:\\r\\n]+:/\n        }\n      },\n      'table-body': {\n        // Look-behind is used to skip the table head, which has the same format as any table row\n        pattern: RegExp('(' + tableRow + ')(?:' + tableRow + ')+'),\n        lookbehind: true,\n        inside: {\n          outline: {\n            pattern: /<[^>]+>/,\n            alias: 'variable'\n          },\n          td: {\n            pattern: /\\s*[^\\s|][^|]*/,\n            alias: 'string'\n          },\n          punctuation: /\\|/\n        }\n      },\n      'table-head': {\n        pattern: RegExp(tableRow),\n        inside: {\n          th: {\n            pattern: /\\s*[^\\s|][^|]*/,\n            alias: 'variable'\n          },\n          punctuation: /\\|/\n        }\n      },\n      atrule: {\n        pattern: /(^[ \\t]+)(?:'a|'ach|'ej|7|a|A také|A taktiež|A tiež|A zároveň|Aber|Ac|Adott|Akkor|Ak|Aleshores|Ale|Ali|Allora|Alors|Als|Ama|Amennyiben|Amikor|Ampak|an|AN|Ananging|And y'all|And|Angenommen|Anrhegedig a|An|Apabila|Atès|Atesa|Atunci|Avast!|Aye|A|awer|Bagi|Banjur|Bet|Biết|Blimey!|Buh|But at the end of the day I reckon|But y'all|But|BUT|Cal|Când|Cand|Cando|Ce|Cuando|Če|Ða ðe|Ða|Dadas|Dada|Dados|Dado|DaH ghu' bejlu'|dann|Dann|Dano|Dan|Dar|Dat fiind|Data|Date fiind|Date|Dati fiind|Dati|Daţi fiind|Dați fiind|DEN|Dato|De|Den youse gotta|Dengan|Diberi|Diyelim ki|Donada|Donat|Donitaĵo|Do|Dun|Duota|Ðurh|Eeldades|Ef|Eğer ki|Entao|Então|Entón|E|En|Entonces|Epi|És|Etant donnée|Etant donné|Et|Étant données|Étant donnée|Étant donné|Etant données|Etant donnés|Étant donnés|Fakat|Gangway!|Gdy|Gegeben seien|Gegeben sei|Gegeven|Gegewe|ghu' noblu'|Gitt|Given y'all|Given|Givet|Givun|Ha|Cho|I CAN HAZ|In|Ir|It's just unbelievable|I|Ja|Jeśli|Jeżeli|Kad|Kada|Kadar|Kai|Kaj|Když|Keď|Kemudian|Ketika|Khi|Kiedy|Ko|Kuid|Kui|Kun|Lan|latlh|Le sa a|Let go and haul|Le|Lè sa a|Lè|Logo|Lorsqu'<|Lorsque|mä|Maar|Mais|Mając|Ma|Majd|Maka|Manawa|Mas|Men|Menawa|Mutta|Nalika|Nalikaning|Nanging|Når|När|Nato|Nhưng|Niin|Njuk|O zaman|Och|Og|Oletetaan|Ond|Onda|Oraz|Pak|Pero|Però|Podano|Pokiaľ|Pokud|Potem|Potom|Privzeto|Pryd|Quan|Quand|Quando|qaSDI'|Så|Sed|Se|Siis|Sipoze ke|Sipoze Ke|Sipoze|Si|Şi|Și|Soit|Stel|Tada|Tad|Takrat|Tak|Tapi|Ter|Tetapi|Tha the|Tha|Then y'all|Then|Thì|Thurh|Toda|Too right|Un|Und|ugeholl|Và|vaj|Vendar|Ve|wann|Wanneer|WEN|Wenn|When y'all|When|Wtedy|Wun|Y'know|Yeah nah|Yna|Youse know like when|Youse know when youse got|Y|Za predpokladu|Za předpokladu|Zadan|Zadani|Zadano|Zadate|Zadato|Zakładając|Zaradi|Zatati|Þa þe|Þa|Þá|Þegar|Þurh|Αλλά|Δεδομένου|Και|Όταν|Τότε|А також|Агар|Але|Али|Аммо|А|Әгәр|Әйтик|Әмма|Бирок|Ва|Вә|Дадено|Дано|Допустим|Если|Задате|Задати|Задато|И|І|К тому же|Када|Кад|Когато|Когда|Коли|Ләкин|Лекин|Нәтиҗәдә|Нехай|Но|Онда|Припустимо, що|Припустимо|Пусть|Также|Та|Тогда|Тоді|То|Унда|Һәм|Якщо|אבל|אזי|אז|בהינתן|וגם|כאשר|آنگاه|اذاً|اگر|اما|اور|با فرض|بالفرض|بفرض|پھر|تب|ثم|جب|عندما|فرض کیا|لكن|لیکن|متى|هنگامی|و|अगर|और|कदा|किन्तु|चूंकि|जब|तथा|तदा|तब|परन्तु|पर|यदि|ਅਤੇ|ਜਦੋਂ|ਜਿਵੇਂ ਕਿ|ਜੇਕਰ|ਤਦ|ਪਰ|అప్పుడు|ఈ పరిస్థితిలో|కాని|చెప్పబడినది|మరియు|ಆದರೆ|ನಂತರ|ನೀಡಿದ|ಮತ್ತು|ಸ್ಥಿತಿಯನ್ನು|กำหนดให้|ดังนั้น|แต่|เมื่อ|และ|그러면<|그리고<|단<|만약<|만일<|먼저<|조건<|하지만<|かつ<|しかし<|ただし<|ならば<|もし<|並且<|但し<|但是<|假如<|假定<|假設<|假设<|前提<|同时<|同時<|并且<|当<|當<|而且<|那么<|那麼<)(?=[ \\t])/m,\n        lookbehind: true\n      },\n      string: {\n        pattern: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|'(?:\\\\.|[^'\\\\\\r\\n])*'/,\n        inside: {\n          outline: {\n            pattern: /<[^>]+>/,\n            alias: 'variable'\n          }\n        }\n      },\n      outline: {\n        pattern: /<[^>]+>/,\n        alias: 'variable'\n      }\n    };\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/gherkin.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/git.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/git.js ***!
  \********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = git;\ngit.displayName = 'git';\ngit.aliases = [];\nfunction git(Prism) {\n  Prism.languages.git = {\n    /*\n     * A simple one line comment like in a git status command\n     * For instance:\n     * $ git status\n     * # On branch infinite-scroll\n     * # Your branch and 'origin/sharedBranches/frontendTeam/infinite-scroll' have diverged,\n     * # and have 1 and 2 different commits each, respectively.\n     * nothing to commit (working directory clean)\n     */\n    comment: /^#.*/m,\n    /*\n     * Regexp to match the changed lines in a git diff output. Check the example below.\n     */\n    deleted: /^[-–].*/m,\n    inserted: /^\\+.*/m,\n    /*\n     * a string (double and simple quote)\n     */\n    string: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    /*\n     * a git command. It starts with a random prompt finishing by a $, then \"git\" then some other parameters\n     * For instance:\n     * $ git add file.txt\n     */\n    command: {\n      pattern: /^.*\\$ git .*$/m,\n      inside: {\n        /*\n         * A git command can contain a parameter starting by a single or a double dash followed by a string\n         * For instance:\n         * $ git diff --cached\n         * $ git log -p\n         */\n        parameter: /\\s--?\\w+/\n      }\n    },\n    /*\n     * Coordinates displayed in a git diff command\n     * For instance:\n     * $ git diff\n     * diff --git file.txt file.txt\n     * index 6214953..1d54a52 100644\n     * --- file.txt\n     * +++ file.txt\n     * @@ -1 +1,2 @@\n     * -Here's my tetx file\n     * +Here's my text file\n     * +And this is the second line\n     */\n    coord: /^@@.*@@$/m,\n    /*\n     * Match a \"commit [SHA1]\" line in a git log output.\n     * For instance:\n     * $ git log\n     * commit a11a14ef7e26f2ca62d4b35eac455ce636d0dc09\n     * Author: lgiraudel\n     * Date:   Mon Feb 17 11:18:34 2014 +0100\n     *\n     *     Add of a new line\n     */\n    'commit-sha1': /^commit \\w{40}$/m\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvZ2l0LmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsR0FBRztBQUNwQkEsR0FBRyxDQUFDQyxXQUFXLEdBQUcsS0FBSztBQUN2QkQsR0FBRyxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNoQixTQUFTRixHQUFHQSxDQUFDRyxLQUFLLEVBQUU7RUFDbEJBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixHQUFHLEdBQUc7SUFDcEI7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0lBQ0lLLE9BQU8sRUFBRSxPQUFPO0lBQ2hCO0FBQ0o7QUFDQTtJQUNJQyxPQUFPLEVBQUUsVUFBVTtJQUNuQkMsUUFBUSxFQUFFLFFBQVE7SUFDbEI7QUFDSjtBQUNBO0lBQ0lDLE1BQU0sRUFBRSxpQ0FBaUM7SUFDekM7QUFDSjtBQUNBO0FBQ0E7QUFDQTtJQUNJQyxPQUFPLEVBQUU7TUFDUEMsT0FBTyxFQUFFLGdCQUFnQjtNQUN6QkMsTUFBTSxFQUFFO1FBQ047QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO1FBQ1FDLFNBQVMsRUFBRTtNQUNiO0lBQ0YsQ0FBQztJQUNEO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0lBQ0lDLEtBQUssRUFBRSxXQUFXO0lBQ2xCO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0lBQ0ksYUFBYSxFQUFFO0VBQ2pCLENBQUM7QUFDSCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXGdpdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBnaXRcbmdpdC5kaXNwbGF5TmFtZSA9ICdnaXQnXG5naXQuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBnaXQoUHJpc20pIHtcbiAgUHJpc20ubGFuZ3VhZ2VzLmdpdCA9IHtcbiAgICAvKlxuICAgICAqIEEgc2ltcGxlIG9uZSBsaW5lIGNvbW1lbnQgbGlrZSBpbiBhIGdpdCBzdGF0dXMgY29tbWFuZFxuICAgICAqIEZvciBpbnN0YW5jZTpcbiAgICAgKiAkIGdpdCBzdGF0dXNcbiAgICAgKiAjIE9uIGJyYW5jaCBpbmZpbml0ZS1zY3JvbGxcbiAgICAgKiAjIFlvdXIgYnJhbmNoIGFuZCAnb3JpZ2luL3NoYXJlZEJyYW5jaGVzL2Zyb250ZW5kVGVhbS9pbmZpbml0ZS1zY3JvbGwnIGhhdmUgZGl2ZXJnZWQsXG4gICAgICogIyBhbmQgaGF2ZSAxIGFuZCAyIGRpZmZlcmVudCBjb21taXRzIGVhY2gsIHJlc3BlY3RpdmVseS5cbiAgICAgKiBub3RoaW5nIHRvIGNvbW1pdCAod29ya2luZyBkaXJlY3RvcnkgY2xlYW4pXG4gICAgICovXG4gICAgY29tbWVudDogL14jLiovbSxcbiAgICAvKlxuICAgICAqIFJlZ2V4cCB0byBtYXRjaCB0aGUgY2hhbmdlZCBsaW5lcyBpbiBhIGdpdCBkaWZmIG91dHB1dC4gQ2hlY2sgdGhlIGV4YW1wbGUgYmVsb3cuXG4gICAgICovXG4gICAgZGVsZXRlZDogL15bLeKAk10uKi9tLFxuICAgIGluc2VydGVkOiAvXlxcKy4qL20sXG4gICAgLypcbiAgICAgKiBhIHN0cmluZyAoZG91YmxlIGFuZCBzaW1wbGUgcXVvdGUpXG4gICAgICovXG4gICAgc3RyaW5nOiAvKFwifCcpKD86XFxcXC58KD8hXFwxKVteXFxcXFxcclxcbl0pKlxcMS8sXG4gICAgLypcbiAgICAgKiBhIGdpdCBjb21tYW5kLiBJdCBzdGFydHMgd2l0aCBhIHJhbmRvbSBwcm9tcHQgZmluaXNoaW5nIGJ5IGEgJCwgdGhlbiBcImdpdFwiIHRoZW4gc29tZSBvdGhlciBwYXJhbWV0ZXJzXG4gICAgICogRm9yIGluc3RhbmNlOlxuICAgICAqICQgZ2l0IGFkZCBmaWxlLnR4dFxuICAgICAqL1xuICAgIGNvbW1hbmQ6IHtcbiAgICAgIHBhdHRlcm46IC9eLipcXCQgZ2l0IC4qJC9tLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgIC8qXG4gICAgICAgICAqIEEgZ2l0IGNvbW1hbmQgY2FuIGNvbnRhaW4gYSBwYXJhbWV0ZXIgc3RhcnRpbmcgYnkgYSBzaW5nbGUgb3IgYSBkb3VibGUgZGFzaCBmb2xsb3dlZCBieSBhIHN0cmluZ1xuICAgICAgICAgKiBGb3IgaW5zdGFuY2U6XG4gICAgICAgICAqICQgZ2l0IGRpZmYgLS1jYWNoZWRcbiAgICAgICAgICogJCBnaXQgbG9nIC1wXG4gICAgICAgICAqL1xuICAgICAgICBwYXJhbWV0ZXI6IC9cXHMtLT9cXHcrL1xuICAgICAgfVxuICAgIH0sXG4gICAgLypcbiAgICAgKiBDb29yZGluYXRlcyBkaXNwbGF5ZWQgaW4gYSBnaXQgZGlmZiBjb21tYW5kXG4gICAgICogRm9yIGluc3RhbmNlOlxuICAgICAqICQgZ2l0IGRpZmZcbiAgICAgKiBkaWZmIC0tZ2l0IGZpbGUudHh0IGZpbGUudHh0XG4gICAgICogaW5kZXggNjIxNDk1My4uMWQ1NGE1MiAxMDA2NDRcbiAgICAgKiAtLS0gZmlsZS50eHRcbiAgICAgKiArKysgZmlsZS50eHRcbiAgICAgKiBAQCAtMSArMSwyIEBAXG4gICAgICogLUhlcmUncyBteSB0ZXR4IGZpbGVcbiAgICAgKiArSGVyZSdzIG15IHRleHQgZmlsZVxuICAgICAqICtBbmQgdGhpcyBpcyB0aGUgc2Vjb25kIGxpbmVcbiAgICAgKi9cbiAgICBjb29yZDogL15AQC4qQEAkL20sXG4gICAgLypcbiAgICAgKiBNYXRjaCBhIFwiY29tbWl0IFtTSEExXVwiIGxpbmUgaW4gYSBnaXQgbG9nIG91dHB1dC5cbiAgICAgKiBGb3IgaW5zdGFuY2U6XG4gICAgICogJCBnaXQgbG9nXG4gICAgICogY29tbWl0IGExMWExNGVmN2UyNmYyY2E2MmQ0YjM1ZWFjNDU1Y2U2MzZkMGRjMDlcbiAgICAgKiBBdXRob3I6IGxnaXJhdWRlbFxuICAgICAqIERhdGU6ICAgTW9uIEZlYiAxNyAxMToxODozNCAyMDE0ICswMTAwXG4gICAgICpcbiAgICAgKiAgICAgQWRkIG9mIGEgbmV3IGxpbmVcbiAgICAgKi9cbiAgICAnY29tbWl0LXNoYTEnOiAvXmNvbW1pdCBcXHd7NDB9JC9tXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiZ2l0IiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJjb21tZW50IiwiZGVsZXRlZCIsImluc2VydGVkIiwic3RyaW5nIiwiY29tbWFuZCIsInBhdHRlcm4iLCJpbnNpZGUiLCJwYXJhbWV0ZXIiLCJjb29yZCJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/git.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/glsl.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/glsl.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar refractorC = __webpack_require__(/*! ./c.js */ \"(ssr)/./node_modules/refractor/lang/c.js\");\nmodule.exports = glsl;\nglsl.displayName = 'glsl';\nglsl.aliases = [];\nfunction glsl(Prism) {\n  Prism.register(refractorC);\n  Prism.languages.glsl = Prism.languages.extend('c', {\n    keyword: /\\b(?:active|asm|atomic_uint|attribute|[ibdu]?vec[234]|bool|break|buffer|case|cast|centroid|class|coherent|common|const|continue|d?mat[234](?:x[234])?|default|discard|do|double|else|enum|extern|external|false|filter|fixed|flat|float|for|fvec[234]|goto|half|highp|hvec[234]|[iu]?sampler2DMS(?:Array)?|[iu]?sampler2DRect|[iu]?samplerBuffer|[iu]?samplerCube|[iu]?samplerCubeArray|[iu]?sampler[123]D|[iu]?sampler[12]DArray|[iu]?image2DMS(?:Array)?|[iu]?image2DRect|[iu]?imageBuffer|[iu]?imageCube|[iu]?imageCubeArray|[iu]?image[123]D|[iu]?image[12]DArray|if|in|inline|inout|input|int|interface|invariant|layout|long|lowp|mediump|namespace|noinline|noperspective|out|output|partition|patch|precise|precision|public|readonly|resource|restrict|return|sample|sampler[12]DArrayShadow|sampler[12]DShadow|sampler2DRectShadow|sampler3DRect|samplerCubeArrayShadow|samplerCubeShadow|shared|short|sizeof|smooth|static|struct|subroutine|superp|switch|template|this|true|typedef|uint|uniform|union|unsigned|using|varying|void|volatile|while|writeonly)\\b/\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvZ2xzbC5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFDWixJQUFJQSxVQUFVLEdBQUdDLG1CQUFPLENBQUMsd0RBQVEsQ0FBQztBQUNsQ0MsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLElBQUk7QUFDckJBLElBQUksQ0FBQ0MsV0FBVyxHQUFHLE1BQU07QUFDekJELElBQUksQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDakIsU0FBU0YsSUFBSUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ25CQSxLQUFLLENBQUNDLFFBQVEsQ0FBQ1IsVUFBVSxDQUFDO0VBQzFCTyxLQUFLLENBQUNFLFNBQVMsQ0FBQ0wsSUFBSSxHQUFHRyxLQUFLLENBQUNFLFNBQVMsQ0FBQ0MsTUFBTSxDQUFDLEdBQUcsRUFBRTtJQUNqREMsT0FBTyxFQUNMO0VBQ0osQ0FBQyxDQUFDO0FBQ0oiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxnbHNsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xudmFyIHJlZnJhY3RvckMgPSByZXF1aXJlKCcuL2MuanMnKVxubW9kdWxlLmV4cG9ydHMgPSBnbHNsXG5nbHNsLmRpc3BsYXlOYW1lID0gJ2dsc2wnXG5nbHNsLmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24gZ2xzbChQcmlzbSkge1xuICBQcmlzbS5yZWdpc3RlcihyZWZyYWN0b3JDKVxuICBQcmlzbS5sYW5ndWFnZXMuZ2xzbCA9IFByaXNtLmxhbmd1YWdlcy5leHRlbmQoJ2MnLCB7XG4gICAga2V5d29yZDpcbiAgICAgIC9cXGIoPzphY3RpdmV8YXNtfGF0b21pY191aW50fGF0dHJpYnV0ZXxbaWJkdV0/dmVjWzIzNF18Ym9vbHxicmVha3xidWZmZXJ8Y2FzZXxjYXN0fGNlbnRyb2lkfGNsYXNzfGNvaGVyZW50fGNvbW1vbnxjb25zdHxjb250aW51ZXxkP21hdFsyMzRdKD86eFsyMzRdKT98ZGVmYXVsdHxkaXNjYXJkfGRvfGRvdWJsZXxlbHNlfGVudW18ZXh0ZXJufGV4dGVybmFsfGZhbHNlfGZpbHRlcnxmaXhlZHxmbGF0fGZsb2F0fGZvcnxmdmVjWzIzNF18Z290b3xoYWxmfGhpZ2hwfGh2ZWNbMjM0XXxbaXVdP3NhbXBsZXIyRE1TKD86QXJyYXkpP3xbaXVdP3NhbXBsZXIyRFJlY3R8W2l1XT9zYW1wbGVyQnVmZmVyfFtpdV0/c2FtcGxlckN1YmV8W2l1XT9zYW1wbGVyQ3ViZUFycmF5fFtpdV0/c2FtcGxlclsxMjNdRHxbaXVdP3NhbXBsZXJbMTJdREFycmF5fFtpdV0/aW1hZ2UyRE1TKD86QXJyYXkpP3xbaXVdP2ltYWdlMkRSZWN0fFtpdV0/aW1hZ2VCdWZmZXJ8W2l1XT9pbWFnZUN1YmV8W2l1XT9pbWFnZUN1YmVBcnJheXxbaXVdP2ltYWdlWzEyM11EfFtpdV0/aW1hZ2VbMTJdREFycmF5fGlmfGlufGlubGluZXxpbm91dHxpbnB1dHxpbnR8aW50ZXJmYWNlfGludmFyaWFudHxsYXlvdXR8bG9uZ3xsb3dwfG1lZGl1bXB8bmFtZXNwYWNlfG5vaW5saW5lfG5vcGVyc3BlY3RpdmV8b3V0fG91dHB1dHxwYXJ0aXRpb258cGF0Y2h8cHJlY2lzZXxwcmVjaXNpb258cHVibGljfHJlYWRvbmx5fHJlc291cmNlfHJlc3RyaWN0fHJldHVybnxzYW1wbGV8c2FtcGxlclsxMl1EQXJyYXlTaGFkb3d8c2FtcGxlclsxMl1EU2hhZG93fHNhbXBsZXIyRFJlY3RTaGFkb3d8c2FtcGxlcjNEUmVjdHxzYW1wbGVyQ3ViZUFycmF5U2hhZG93fHNhbXBsZXJDdWJlU2hhZG93fHNoYXJlZHxzaG9ydHxzaXplb2Z8c21vb3RofHN0YXRpY3xzdHJ1Y3R8c3Vicm91dGluZXxzdXBlcnB8c3dpdGNofHRlbXBsYXRlfHRoaXN8dHJ1ZXx0eXBlZGVmfHVpbnR8dW5pZm9ybXx1bmlvbnx1bnNpZ25lZHx1c2luZ3x2YXJ5aW5nfHZvaWR8dm9sYXRpbGV8d2hpbGV8d3JpdGVvbmx5KVxcYi9cbiAgfSlcbn1cbiJdLCJuYW1lcyI6WyJyZWZyYWN0b3JDIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJnbHNsIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJyZWdpc3RlciIsImxhbmd1YWdlcyIsImV4dGVuZCIsImtleXdvcmQiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/glsl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/gml.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/gml.js ***!
  \********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = gml;\ngml.displayName = 'gml';\ngml.aliases = [];\nfunction gml(Prism) {\n  Prism.languages.gamemakerlanguage = Prism.languages.gml = Prism.languages.extend('clike', {\n    keyword: /\\b(?:break|case|continue|default|do|else|enum|exit|for|globalvar|if|repeat|return|switch|until|var|while)\\b/,\n    number: /(?:\\b0x[\\da-f]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ulf]{0,4}/i,\n    operator: /--|\\+\\+|[-+%/=]=?|!=|\\*\\*?=?|<[<=>]?|>[=>]?|&&?|\\^\\^?|\\|\\|?|~|\\b(?:and|at|not|or|with|xor)\\b/,\n    constant: /\\b(?:GM_build_date|GM_version|action_(?:continue|restart|reverse|stop)|all|gamespeed_(?:fps|microseconds)|global|local|noone|other|pi|pointer_(?:invalid|null)|self|timezone_(?:local|utc)|undefined|ev_(?:create|destroy|step|alarm|keyboard|mouse|collision|other|draw|draw_(?:begin|end|post|pre)|keypress|keyrelease|trigger|(?:left|middle|no|right)_button|(?:left|middle|right)_press|(?:left|middle|right)_release|mouse_(?:enter|leave|wheel_down|wheel_up)|global_(?:left|middle|right)_button|global_(?:left|middle|right)_press|global_(?:left|middle|right)_release|joystick(?:1|2)_(?:button1|button2|button3|button4|button5|button6|button7|button8|down|left|right|up)|outside|boundary|game_start|game_end|room_start|room_end|no_more_lives|animation_end|end_of_path|no_more_health|user\\d|gui|gui_begin|gui_end|step_(?:begin|end|normal))|vk_(?:alt|anykey|backspace|control|delete|down|end|enter|escape|home|insert|left|nokey|pagedown|pageup|pause|printscreen|return|right|shift|space|tab|up|f\\d|numpad\\d|add|decimal|divide|lalt|lcontrol|lshift|multiply|ralt|rcontrol|rshift|subtract)|achievement_(?:filter_(?:all_players|favorites_only|friends_only)|friends_info|info|leaderboard_info|our_info|pic_loaded|show_(?:achievement|bank|friend_picker|leaderboard|profile|purchase_prompt|ui)|type_challenge|type_score_challenge)|asset_(?:font|object|path|room|script|shader|sound|sprite|tiles|timeline|unknown)|audio_(?:3d|falloff_(?:exponent_distance|exponent_distance_clamped|inverse_distance|inverse_distance_clamped|linear_distance|linear_distance_clamped|none)|mono|new_system|old_system|stereo)|bm_(?:add|complex|dest_alpha|dest_color|dest_colour|inv_dest_alpha|inv_dest_color|inv_dest_colour|inv_src_alpha|inv_src_color|inv_src_colour|max|normal|one|src_alpha|src_alpha_sat|src_color|src_colour|subtract|zero)|browser_(?:chrome|firefox|ie|ie_mobile|not_a_browser|opera|safari|safari_mobile|tizen|unknown|windows_store)|buffer_(?:bool|f16|f32|f64|fast|fixed|generalerror|grow|invalidtype|network|outofbounds|outofspace|s16|s32|s8|seek_end|seek_relative|seek_start|string|text|u16|u32|u64|u8|vbuffer|wrap)|c_(?:aqua|black|blue|dkgray|fuchsia|gray|green|lime|ltgray|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow)|cmpfunc_(?:always|equal|greater|greaterequal|less|lessequal|never|notequal)|cr_(?:appstart|arrow|beam|cross|default|drag|handpoint|hourglass|none|size_all|size_nesw|size_ns|size_nwse|size_we|uparrow)|cull_(?:clockwise|counterclockwise|noculling)|device_(?:emulator|tablet)|device_ios_(?:ipad|ipad_retina|iphone|iphone5|iphone6|iphone6plus|iphone_retina|unknown)|display_(?:landscape|landscape_flipped|portrait|portrait_flipped)|dll_(?:cdecl|cdel|stdcall)|ds_type_(?:grid|list|map|priority|queue|stack)|ef_(?:cloud|ellipse|explosion|firework|flare|rain|ring|smoke|smokeup|snow|spark|star)|fa_(?:archive|bottom|center|directory|hidden|left|middle|readonly|right|sysfile|top|volumeid)|fb_login_(?:default|fallback_to_webview|forcing_safari|forcing_webview|no_fallback_to_webview|use_system_account)|iap_(?:available|canceled|ev_consume|ev_product|ev_purchase|ev_restore|ev_storeload|failed|purchased|refunded|status_available|status_loading|status_processing|status_restoring|status_unavailable|status_uninitialised|storeload_failed|storeload_ok|unavailable)|leaderboard_type_(?:number|time_mins_secs)|lighttype_(?:dir|point)|matrix_(?:projection|view|world)|mb_(?:any|left|middle|none|right)|network_(?:config_(?:connect_timeout|disable_reliable_udp|enable_reliable_udp|use_non_blocking_socket)|socket_(?:bluetooth|tcp|udp)|type_(?:connect|data|disconnect|non_blocking_connect))|of_challenge_(?:lose|tie|win)|os_(?:android|ios|linux|macosx|ps3|ps4|psvita|unknown|uwp|win32|win8native|windows|winphone|xboxone)|phy_debug_render_(?:aabb|collision_pairs|coms|core_shapes|joints|obb|shapes)|phy_joint_(?:anchor_1_x|anchor_1_y|anchor_2_x|anchor_2_y|angle|angle_limits|damping_ratio|frequency|length_1|length_2|lower_angle_limit|max_force|max_length|max_motor_force|max_motor_torque|max_torque|motor_force|motor_speed|motor_torque|reaction_force_x|reaction_force_y|reaction_torque|speed|translation|upper_angle_limit)|phy_particle_data_flag_(?:category|color|colour|position|typeflags|velocity)|phy_particle_flag_(?:colormixing|colourmixing|elastic|powder|spring|tensile|viscous|wall|water|zombie)|phy_particle_group_flag_(?:rigid|solid)|pr_(?:linelist|linestrip|pointlist|trianglefan|trianglelist|trianglestrip)|ps_(?:distr|shape)_(?:diamond|ellipse|gaussian|invgaussian|line|linear|rectangle)|pt_shape_(?:circle|cloud|disk|explosion|flare|line|pixel|ring|smoke|snow|spark|sphere|square|star)|ty_(?:real|string)|gp_(?:face\\d|axislh|axislv|axisrh|axisrv|padd|padl|padr|padu|select|shoulderl|shoulderlb|shoulderr|shoulderrb|start|stickl|stickr)|lb_disp_(?:none|numeric|time_ms|time_sec)|lb_sort_(?:ascending|descending|none)|ov_(?:achievements|community|friends|gamegroup|players|settings)|ugc_(?:filetype_(?:community|microtrans)|list_(?:Favorited|Followed|Published|Subscribed|UsedOrPlayed|VotedDown|VotedOn|VotedUp|WillVoteLater)|match_(?:AllGuides|Artwork|Collections|ControllerBindings|IntegratedGuides|Items|Items_Mtx|Items_ReadyToUse|Screenshots|UsableInGame|Videos|WebGuides)|query_(?:AcceptedForGameRankedByAcceptanceDate|CreatedByFriendsRankedByPublicationDate|FavoritedByFriendsRankedByPublicationDate|NotYetRated)|query_RankedBy(?:NumTimesReported|PublicationDate|TextSearch|TotalVotesAsc|Trend|Vote|VotesUp)|result_success|sortorder_CreationOrder(?:Asc|Desc)|sortorder_(?:ForModeration|LastUpdatedDesc|SubscriptionDateDesc|TitleAsc|VoteScoreDesc)|visibility_(?:friends_only|private|public))|vertex_usage_(?:binormal|blendindices|blendweight|color|colour|depth|fog|normal|position|psize|sample|tangent|texcoord|textcoord)|vertex_type_(?:float\\d|color|colour|ubyte4)|input_type|layerelementtype_(?:background|instance|oldtilemap|particlesystem|sprite|tile|tilemap|undefined)|se_(?:chorus|compressor|echo|equalizer|flanger|gargle|none|reverb)|text_type|tile_(?:flip|index_mask|mirror|rotate)|(?:obj|rm|scr|spr)\\w+)\\b/,\n    variable: /\\b(?:alarm|application_surface|async_load|background_(?:alpha|blend|color|colour|foreground|height|hspeed|htiled|index|showcolor|showcolour|visible|vspeed|vtiled|width|x|xscale|y|yscale)|bbox_(?:bottom|left|right|top)|browser_(?:height|width)|caption_(?:health|lives|score)|current_(?:day|hour|minute|month|second|time|weekday|year)|cursor_sprite|debug_mode|delta_time|direction|display_aa|error_(?:last|occurred)|event_(?:action|number|object|type)|fps|fps_real|friction|game_(?:display|project|save)_(?:id|name)|gamemaker_(?:pro|registered|version)|gravity|gravity_direction|(?:h|v)speed|health|iap_data|id|image_(?:alpha|angle|blend|depth|index|number|speed|xscale|yscale)|instance_(?:count|id)|keyboard_(?:key|lastchar|lastkey|string)|layer|lives|mask_index|mouse_(?:button|lastbutton|x|y)|object_index|os_(?:browser|device|type|version)|path_(?:endaction|index|orientation|position|positionprevious|scale|speed)|persistent|phy_(?:rotation|(?:col_normal|collision|com|linear_velocity|position|speed)_(?:x|y)|angular_(?:damping|velocity)|position_(?:x|y)previous|speed|linear_damping|bullet|fixed_rotation|active|mass|inertia|dynamic|kinematic|sleeping|collision_points)|pointer_(?:invalid|null)|room|room_(?:caption|first|height|last|persistent|speed|width)|score|secure_mode|show_(?:health|lives|score)|solid|speed|sprite_(?:height|index|width|xoffset|yoffset)|temp_directory|timeline_(?:index|loop|position|running|speed)|transition_(?:color|kind|steps)|undefined|view_(?:angle|current|enabled|(?:h|v)(?:border|speed)|(?:h|w|x|y)port|(?:h|w|x|y)view|object|surface_id|visible)|visible|webgl_enabled|working_directory|(?:x|y)(?:previous|start)|x|y|argument(?:_relitive|_count|\\d)|argument|global|local|other|self)\\b/\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvZ21sLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsR0FBRztBQUNwQkEsR0FBRyxDQUFDQyxXQUFXLEdBQUcsS0FBSztBQUN2QkQsR0FBRyxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNoQixTQUFTRixHQUFHQSxDQUFDRyxLQUFLLEVBQUU7RUFDbEJBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDQyxpQkFBaUIsR0FBR0YsS0FBSyxDQUFDQyxTQUFTLENBQUNKLEdBQUcsR0FDckRHLEtBQUssQ0FBQ0MsU0FBUyxDQUFDRSxNQUFNLENBQUMsT0FBTyxFQUFFO0lBQzlCQyxPQUFPLEVBQ0wsNkdBQTZHO0lBQy9HQyxNQUFNLEVBQ0osdUVBQXVFO0lBQ3pFQyxRQUFRLEVBQ04sOEZBQThGO0lBQ2hHQyxRQUFRLEVBQ04scTVMQUFxNUw7SUFDdjVMQyxRQUFRLEVBQ047RUFDSixDQUFDLENBQUM7QUFDTiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXGdtbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBnbWxcbmdtbC5kaXNwbGF5TmFtZSA9ICdnbWwnXG5nbWwuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBnbWwoUHJpc20pIHtcbiAgUHJpc20ubGFuZ3VhZ2VzLmdhbWVtYWtlcmxhbmd1YWdlID0gUHJpc20ubGFuZ3VhZ2VzLmdtbCA9XG4gICAgUHJpc20ubGFuZ3VhZ2VzLmV4dGVuZCgnY2xpa2UnLCB7XG4gICAgICBrZXl3b3JkOlxuICAgICAgICAvXFxiKD86YnJlYWt8Y2FzZXxjb250aW51ZXxkZWZhdWx0fGRvfGVsc2V8ZW51bXxleGl0fGZvcnxnbG9iYWx2YXJ8aWZ8cmVwZWF0fHJldHVybnxzd2l0Y2h8dW50aWx8dmFyfHdoaWxlKVxcYi8sXG4gICAgICBudW1iZXI6XG4gICAgICAgIC8oPzpcXGIweFtcXGRhLWZdK3woPzpcXGJcXGQrKD86XFwuXFxkKik/fFxcQlxcLlxcZCspKD86ZVsrLV0/XFxkKyk/KVt1bGZdezAsNH0vaSxcbiAgICAgIG9wZXJhdG9yOlxuICAgICAgICAvLS18XFwrXFwrfFstKyUvPV09P3whPXxcXCpcXCo/PT98PFs8PT5dP3w+Wz0+XT98JiY/fFxcXlxcXj98XFx8XFx8P3x+fFxcYig/OmFuZHxhdHxub3R8b3J8d2l0aHx4b3IpXFxiLyxcbiAgICAgIGNvbnN0YW50OlxuICAgICAgICAvXFxiKD86R01fYnVpbGRfZGF0ZXxHTV92ZXJzaW9ufGFjdGlvbl8oPzpjb250aW51ZXxyZXN0YXJ0fHJldmVyc2V8c3RvcCl8YWxsfGdhbWVzcGVlZF8oPzpmcHN8bWljcm9zZWNvbmRzKXxnbG9iYWx8bG9jYWx8bm9vbmV8b3RoZXJ8cGl8cG9pbnRlcl8oPzppbnZhbGlkfG51bGwpfHNlbGZ8dGltZXpvbmVfKD86bG9jYWx8dXRjKXx1bmRlZmluZWR8ZXZfKD86Y3JlYXRlfGRlc3Ryb3l8c3RlcHxhbGFybXxrZXlib2FyZHxtb3VzZXxjb2xsaXNpb258b3RoZXJ8ZHJhd3xkcmF3Xyg/OmJlZ2lufGVuZHxwb3N0fHByZSl8a2V5cHJlc3N8a2V5cmVsZWFzZXx0cmlnZ2VyfCg/OmxlZnR8bWlkZGxlfG5vfHJpZ2h0KV9idXR0b258KD86bGVmdHxtaWRkbGV8cmlnaHQpX3ByZXNzfCg/OmxlZnR8bWlkZGxlfHJpZ2h0KV9yZWxlYXNlfG1vdXNlXyg/OmVudGVyfGxlYXZlfHdoZWVsX2Rvd258d2hlZWxfdXApfGdsb2JhbF8oPzpsZWZ0fG1pZGRsZXxyaWdodClfYnV0dG9ufGdsb2JhbF8oPzpsZWZ0fG1pZGRsZXxyaWdodClfcHJlc3N8Z2xvYmFsXyg/OmxlZnR8bWlkZGxlfHJpZ2h0KV9yZWxlYXNlfGpveXN0aWNrKD86MXwyKV8oPzpidXR0b24xfGJ1dHRvbjJ8YnV0dG9uM3xidXR0b240fGJ1dHRvbjV8YnV0dG9uNnxidXR0b243fGJ1dHRvbjh8ZG93bnxsZWZ0fHJpZ2h0fHVwKXxvdXRzaWRlfGJvdW5kYXJ5fGdhbWVfc3RhcnR8Z2FtZV9lbmR8cm9vbV9zdGFydHxyb29tX2VuZHxub19tb3JlX2xpdmVzfGFuaW1hdGlvbl9lbmR8ZW5kX29mX3BhdGh8bm9fbW9yZV9oZWFsdGh8dXNlclxcZHxndWl8Z3VpX2JlZ2lufGd1aV9lbmR8c3RlcF8oPzpiZWdpbnxlbmR8bm9ybWFsKSl8dmtfKD86YWx0fGFueWtleXxiYWNrc3BhY2V8Y29udHJvbHxkZWxldGV8ZG93bnxlbmR8ZW50ZXJ8ZXNjYXBlfGhvbWV8aW5zZXJ0fGxlZnR8bm9rZXl8cGFnZWRvd258cGFnZXVwfHBhdXNlfHByaW50c2NyZWVufHJldHVybnxyaWdodHxzaGlmdHxzcGFjZXx0YWJ8dXB8ZlxcZHxudW1wYWRcXGR8YWRkfGRlY2ltYWx8ZGl2aWRlfGxhbHR8bGNvbnRyb2x8bHNoaWZ0fG11bHRpcGx5fHJhbHR8cmNvbnRyb2x8cnNoaWZ0fHN1YnRyYWN0KXxhY2hpZXZlbWVudF8oPzpmaWx0ZXJfKD86YWxsX3BsYXllcnN8ZmF2b3JpdGVzX29ubHl8ZnJpZW5kc19vbmx5KXxmcmllbmRzX2luZm98aW5mb3xsZWFkZXJib2FyZF9pbmZvfG91cl9pbmZvfHBpY19sb2FkZWR8c2hvd18oPzphY2hpZXZlbWVudHxiYW5rfGZyaWVuZF9waWNrZXJ8bGVhZGVyYm9hcmR8cHJvZmlsZXxwdXJjaGFzZV9wcm9tcHR8dWkpfHR5cGVfY2hhbGxlbmdlfHR5cGVfc2NvcmVfY2hhbGxlbmdlKXxhc3NldF8oPzpmb250fG9iamVjdHxwYXRofHJvb218c2NyaXB0fHNoYWRlcnxzb3VuZHxzcHJpdGV8dGlsZXN8dGltZWxpbmV8dW5rbm93bil8YXVkaW9fKD86M2R8ZmFsbG9mZl8oPzpleHBvbmVudF9kaXN0YW5jZXxleHBvbmVudF9kaXN0YW5jZV9jbGFtcGVkfGludmVyc2VfZGlzdGFuY2V8aW52ZXJzZV9kaXN0YW5jZV9jbGFtcGVkfGxpbmVhcl9kaXN0YW5jZXxsaW5lYXJfZGlzdGFuY2VfY2xhbXBlZHxub25lKXxtb25vfG5ld19zeXN0ZW18b2xkX3N5c3RlbXxzdGVyZW8pfGJtXyg/OmFkZHxjb21wbGV4fGRlc3RfYWxwaGF8ZGVzdF9jb2xvcnxkZXN0X2NvbG91cnxpbnZfZGVzdF9hbHBoYXxpbnZfZGVzdF9jb2xvcnxpbnZfZGVzdF9jb2xvdXJ8aW52X3NyY19hbHBoYXxpbnZfc3JjX2NvbG9yfGludl9zcmNfY29sb3VyfG1heHxub3JtYWx8b25lfHNyY19hbHBoYXxzcmNfYWxwaGFfc2F0fHNyY19jb2xvcnxzcmNfY29sb3VyfHN1YnRyYWN0fHplcm8pfGJyb3dzZXJfKD86Y2hyb21lfGZpcmVmb3h8aWV8aWVfbW9iaWxlfG5vdF9hX2Jyb3dzZXJ8b3BlcmF8c2FmYXJpfHNhZmFyaV9tb2JpbGV8dGl6ZW58dW5rbm93bnx3aW5kb3dzX3N0b3JlKXxidWZmZXJfKD86Ym9vbHxmMTZ8ZjMyfGY2NHxmYXN0fGZpeGVkfGdlbmVyYWxlcnJvcnxncm93fGludmFsaWR0eXBlfG5ldHdvcmt8b3V0b2Zib3VuZHN8b3V0b2ZzcGFjZXxzMTZ8czMyfHM4fHNlZWtfZW5kfHNlZWtfcmVsYXRpdmV8c2Vla19zdGFydHxzdHJpbmd8dGV4dHx1MTZ8dTMyfHU2NHx1OHx2YnVmZmVyfHdyYXApfGNfKD86YXF1YXxibGFja3xibHVlfGRrZ3JheXxmdWNoc2lhfGdyYXl8Z3JlZW58bGltZXxsdGdyYXl8bWFyb29ufG5hdnl8b2xpdmV8b3JhbmdlfHB1cnBsZXxyZWR8c2lsdmVyfHRlYWx8d2hpdGV8eWVsbG93KXxjbXBmdW5jXyg/OmFsd2F5c3xlcXVhbHxncmVhdGVyfGdyZWF0ZXJlcXVhbHxsZXNzfGxlc3NlcXVhbHxuZXZlcnxub3RlcXVhbCl8Y3JfKD86YXBwc3RhcnR8YXJyb3d8YmVhbXxjcm9zc3xkZWZhdWx0fGRyYWd8aGFuZHBvaW50fGhvdXJnbGFzc3xub25lfHNpemVfYWxsfHNpemVfbmVzd3xzaXplX25zfHNpemVfbndzZXxzaXplX3dlfHVwYXJyb3cpfGN1bGxfKD86Y2xvY2t3aXNlfGNvdW50ZXJjbG9ja3dpc2V8bm9jdWxsaW5nKXxkZXZpY2VfKD86ZW11bGF0b3J8dGFibGV0KXxkZXZpY2VfaW9zXyg/OmlwYWR8aXBhZF9yZXRpbmF8aXBob25lfGlwaG9uZTV8aXBob25lNnxpcGhvbmU2cGx1c3xpcGhvbmVfcmV0aW5hfHVua25vd24pfGRpc3BsYXlfKD86bGFuZHNjYXBlfGxhbmRzY2FwZV9mbGlwcGVkfHBvcnRyYWl0fHBvcnRyYWl0X2ZsaXBwZWQpfGRsbF8oPzpjZGVjbHxjZGVsfHN0ZGNhbGwpfGRzX3R5cGVfKD86Z3JpZHxsaXN0fG1hcHxwcmlvcml0eXxxdWV1ZXxzdGFjayl8ZWZfKD86Y2xvdWR8ZWxsaXBzZXxleHBsb3Npb258ZmlyZXdvcmt8ZmxhcmV8cmFpbnxyaW5nfHNtb2tlfHNtb2tldXB8c25vd3xzcGFya3xzdGFyKXxmYV8oPzphcmNoaXZlfGJvdHRvbXxjZW50ZXJ8ZGlyZWN0b3J5fGhpZGRlbnxsZWZ0fG1pZGRsZXxyZWFkb25seXxyaWdodHxzeXNmaWxlfHRvcHx2b2x1bWVpZCl8ZmJfbG9naW5fKD86ZGVmYXVsdHxmYWxsYmFja190b193ZWJ2aWV3fGZvcmNpbmdfc2FmYXJpfGZvcmNpbmdfd2Vidmlld3xub19mYWxsYmFja190b193ZWJ2aWV3fHVzZV9zeXN0ZW1fYWNjb3VudCl8aWFwXyg/OmF2YWlsYWJsZXxjYW5jZWxlZHxldl9jb25zdW1lfGV2X3Byb2R1Y3R8ZXZfcHVyY2hhc2V8ZXZfcmVzdG9yZXxldl9zdG9yZWxvYWR8ZmFpbGVkfHB1cmNoYXNlZHxyZWZ1bmRlZHxzdGF0dXNfYXZhaWxhYmxlfHN0YXR1c19sb2FkaW5nfHN0YXR1c19wcm9jZXNzaW5nfHN0YXR1c19yZXN0b3Jpbmd8c3RhdHVzX3VuYXZhaWxhYmxlfHN0YXR1c191bmluaXRpYWxpc2VkfHN0b3JlbG9hZF9mYWlsZWR8c3RvcmVsb2FkX29rfHVuYXZhaWxhYmxlKXxsZWFkZXJib2FyZF90eXBlXyg/Om51bWJlcnx0aW1lX21pbnNfc2Vjcyl8bGlnaHR0eXBlXyg/OmRpcnxwb2ludCl8bWF0cml4Xyg/OnByb2plY3Rpb258dmlld3x3b3JsZCl8bWJfKD86YW55fGxlZnR8bWlkZGxlfG5vbmV8cmlnaHQpfG5ldHdvcmtfKD86Y29uZmlnXyg/OmNvbm5lY3RfdGltZW91dHxkaXNhYmxlX3JlbGlhYmxlX3VkcHxlbmFibGVfcmVsaWFibGVfdWRwfHVzZV9ub25fYmxvY2tpbmdfc29ja2V0KXxzb2NrZXRfKD86Ymx1ZXRvb3RofHRjcHx1ZHApfHR5cGVfKD86Y29ubmVjdHxkYXRhfGRpc2Nvbm5lY3R8bm9uX2Jsb2NraW5nX2Nvbm5lY3QpKXxvZl9jaGFsbGVuZ2VfKD86bG9zZXx0aWV8d2luKXxvc18oPzphbmRyb2lkfGlvc3xsaW51eHxtYWNvc3h8cHMzfHBzNHxwc3ZpdGF8dW5rbm93bnx1d3B8d2luMzJ8d2luOG5hdGl2ZXx3aW5kb3dzfHdpbnBob25lfHhib3hvbmUpfHBoeV9kZWJ1Z19yZW5kZXJfKD86YWFiYnxjb2xsaXNpb25fcGFpcnN8Y29tc3xjb3JlX3NoYXBlc3xqb2ludHN8b2JifHNoYXBlcyl8cGh5X2pvaW50Xyg/OmFuY2hvcl8xX3h8YW5jaG9yXzFfeXxhbmNob3JfMl94fGFuY2hvcl8yX3l8YW5nbGV8YW5nbGVfbGltaXRzfGRhbXBpbmdfcmF0aW98ZnJlcXVlbmN5fGxlbmd0aF8xfGxlbmd0aF8yfGxvd2VyX2FuZ2xlX2xpbWl0fG1heF9mb3JjZXxtYXhfbGVuZ3RofG1heF9tb3Rvcl9mb3JjZXxtYXhfbW90b3JfdG9ycXVlfG1heF90b3JxdWV8bW90b3JfZm9yY2V8bW90b3Jfc3BlZWR8bW90b3JfdG9ycXVlfHJlYWN0aW9uX2ZvcmNlX3h8cmVhY3Rpb25fZm9yY2VfeXxyZWFjdGlvbl90b3JxdWV8c3BlZWR8dHJhbnNsYXRpb258dXBwZXJfYW5nbGVfbGltaXQpfHBoeV9wYXJ0aWNsZV9kYXRhX2ZsYWdfKD86Y2F0ZWdvcnl8Y29sb3J8Y29sb3VyfHBvc2l0aW9ufHR5cGVmbGFnc3x2ZWxvY2l0eSl8cGh5X3BhcnRpY2xlX2ZsYWdfKD86Y29sb3JtaXhpbmd8Y29sb3VybWl4aW5nfGVsYXN0aWN8cG93ZGVyfHNwcmluZ3x0ZW5zaWxlfHZpc2NvdXN8d2FsbHx3YXRlcnx6b21iaWUpfHBoeV9wYXJ0aWNsZV9ncm91cF9mbGFnXyg/OnJpZ2lkfHNvbGlkKXxwcl8oPzpsaW5lbGlzdHxsaW5lc3RyaXB8cG9pbnRsaXN0fHRyaWFuZ2xlZmFufHRyaWFuZ2xlbGlzdHx0cmlhbmdsZXN0cmlwKXxwc18oPzpkaXN0cnxzaGFwZSlfKD86ZGlhbW9uZHxlbGxpcHNlfGdhdXNzaWFufGludmdhdXNzaWFufGxpbmV8bGluZWFyfHJlY3RhbmdsZSl8cHRfc2hhcGVfKD86Y2lyY2xlfGNsb3VkfGRpc2t8ZXhwbG9zaW9ufGZsYXJlfGxpbmV8cGl4ZWx8cmluZ3xzbW9rZXxzbm93fHNwYXJrfHNwaGVyZXxzcXVhcmV8c3Rhcil8dHlfKD86cmVhbHxzdHJpbmcpfGdwXyg/OmZhY2VcXGR8YXhpc2xofGF4aXNsdnxheGlzcmh8YXhpc3J2fHBhZGR8cGFkbHxwYWRyfHBhZHV8c2VsZWN0fHNob3VsZGVybHxzaG91bGRlcmxifHNob3VsZGVycnxzaG91bGRlcnJifHN0YXJ0fHN0aWNrbHxzdGlja3IpfGxiX2Rpc3BfKD86bm9uZXxudW1lcmljfHRpbWVfbXN8dGltZV9zZWMpfGxiX3NvcnRfKD86YXNjZW5kaW5nfGRlc2NlbmRpbmd8bm9uZSl8b3ZfKD86YWNoaWV2ZW1lbnRzfGNvbW11bml0eXxmcmllbmRzfGdhbWVncm91cHxwbGF5ZXJzfHNldHRpbmdzKXx1Z2NfKD86ZmlsZXR5cGVfKD86Y29tbXVuaXR5fG1pY3JvdHJhbnMpfGxpc3RfKD86RmF2b3JpdGVkfEZvbGxvd2VkfFB1Ymxpc2hlZHxTdWJzY3JpYmVkfFVzZWRPclBsYXllZHxWb3RlZERvd258Vm90ZWRPbnxWb3RlZFVwfFdpbGxWb3RlTGF0ZXIpfG1hdGNoXyg/OkFsbEd1aWRlc3xBcnR3b3JrfENvbGxlY3Rpb25zfENvbnRyb2xsZXJCaW5kaW5nc3xJbnRlZ3JhdGVkR3VpZGVzfEl0ZW1zfEl0ZW1zX010eHxJdGVtc19SZWFkeVRvVXNlfFNjcmVlbnNob3RzfFVzYWJsZUluR2FtZXxWaWRlb3N8V2ViR3VpZGVzKXxxdWVyeV8oPzpBY2NlcHRlZEZvckdhbWVSYW5rZWRCeUFjY2VwdGFuY2VEYXRlfENyZWF0ZWRCeUZyaWVuZHNSYW5rZWRCeVB1YmxpY2F0aW9uRGF0ZXxGYXZvcml0ZWRCeUZyaWVuZHNSYW5rZWRCeVB1YmxpY2F0aW9uRGF0ZXxOb3RZZXRSYXRlZCl8cXVlcnlfUmFua2VkQnkoPzpOdW1UaW1lc1JlcG9ydGVkfFB1YmxpY2F0aW9uRGF0ZXxUZXh0U2VhcmNofFRvdGFsVm90ZXNBc2N8VHJlbmR8Vm90ZXxWb3Rlc1VwKXxyZXN1bHRfc3VjY2Vzc3xzb3J0b3JkZXJfQ3JlYXRpb25PcmRlcig/OkFzY3xEZXNjKXxzb3J0b3JkZXJfKD86Rm9yTW9kZXJhdGlvbnxMYXN0VXBkYXRlZERlc2N8U3Vic2NyaXB0aW9uRGF0ZURlc2N8VGl0bGVBc2N8Vm90ZVNjb3JlRGVzYyl8dmlzaWJpbGl0eV8oPzpmcmllbmRzX29ubHl8cHJpdmF0ZXxwdWJsaWMpKXx2ZXJ0ZXhfdXNhZ2VfKD86Ymlub3JtYWx8YmxlbmRpbmRpY2VzfGJsZW5kd2VpZ2h0fGNvbG9yfGNvbG91cnxkZXB0aHxmb2d8bm9ybWFsfHBvc2l0aW9ufHBzaXplfHNhbXBsZXx0YW5nZW50fHRleGNvb3JkfHRleHRjb29yZCl8dmVydGV4X3R5cGVfKD86ZmxvYXRcXGR8Y29sb3J8Y29sb3VyfHVieXRlNCl8aW5wdXRfdHlwZXxsYXllcmVsZW1lbnR0eXBlXyg/OmJhY2tncm91bmR8aW5zdGFuY2V8b2xkdGlsZW1hcHxwYXJ0aWNsZXN5c3RlbXxzcHJpdGV8dGlsZXx0aWxlbWFwfHVuZGVmaW5lZCl8c2VfKD86Y2hvcnVzfGNvbXByZXNzb3J8ZWNob3xlcXVhbGl6ZXJ8ZmxhbmdlcnxnYXJnbGV8bm9uZXxyZXZlcmIpfHRleHRfdHlwZXx0aWxlXyg/OmZsaXB8aW5kZXhfbWFza3xtaXJyb3J8cm90YXRlKXwoPzpvYmp8cm18c2NyfHNwcilcXHcrKVxcYi8sXG4gICAgICB2YXJpYWJsZTpcbiAgICAgICAgL1xcYig/OmFsYXJtfGFwcGxpY2F0aW9uX3N1cmZhY2V8YXN5bmNfbG9hZHxiYWNrZ3JvdW5kXyg/OmFscGhhfGJsZW5kfGNvbG9yfGNvbG91cnxmb3JlZ3JvdW5kfGhlaWdodHxoc3BlZWR8aHRpbGVkfGluZGV4fHNob3djb2xvcnxzaG93Y29sb3VyfHZpc2libGV8dnNwZWVkfHZ0aWxlZHx3aWR0aHx4fHhzY2FsZXx5fHlzY2FsZSl8YmJveF8oPzpib3R0b218bGVmdHxyaWdodHx0b3ApfGJyb3dzZXJfKD86aGVpZ2h0fHdpZHRoKXxjYXB0aW9uXyg/OmhlYWx0aHxsaXZlc3xzY29yZSl8Y3VycmVudF8oPzpkYXl8aG91cnxtaW51dGV8bW9udGh8c2Vjb25kfHRpbWV8d2Vla2RheXx5ZWFyKXxjdXJzb3Jfc3ByaXRlfGRlYnVnX21vZGV8ZGVsdGFfdGltZXxkaXJlY3Rpb258ZGlzcGxheV9hYXxlcnJvcl8oPzpsYXN0fG9jY3VycmVkKXxldmVudF8oPzphY3Rpb258bnVtYmVyfG9iamVjdHx0eXBlKXxmcHN8ZnBzX3JlYWx8ZnJpY3Rpb258Z2FtZV8oPzpkaXNwbGF5fHByb2plY3R8c2F2ZSlfKD86aWR8bmFtZSl8Z2FtZW1ha2VyXyg/OnByb3xyZWdpc3RlcmVkfHZlcnNpb24pfGdyYXZpdHl8Z3Jhdml0eV9kaXJlY3Rpb258KD86aHx2KXNwZWVkfGhlYWx0aHxpYXBfZGF0YXxpZHxpbWFnZV8oPzphbHBoYXxhbmdsZXxibGVuZHxkZXB0aHxpbmRleHxudW1iZXJ8c3BlZWR8eHNjYWxlfHlzY2FsZSl8aW5zdGFuY2VfKD86Y291bnR8aWQpfGtleWJvYXJkXyg/OmtleXxsYXN0Y2hhcnxsYXN0a2V5fHN0cmluZyl8bGF5ZXJ8bGl2ZXN8bWFza19pbmRleHxtb3VzZV8oPzpidXR0b258bGFzdGJ1dHRvbnx4fHkpfG9iamVjdF9pbmRleHxvc18oPzpicm93c2VyfGRldmljZXx0eXBlfHZlcnNpb24pfHBhdGhfKD86ZW5kYWN0aW9ufGluZGV4fG9yaWVudGF0aW9ufHBvc2l0aW9ufHBvc2l0aW9ucHJldmlvdXN8c2NhbGV8c3BlZWQpfHBlcnNpc3RlbnR8cGh5Xyg/OnJvdGF0aW9ufCg/OmNvbF9ub3JtYWx8Y29sbGlzaW9ufGNvbXxsaW5lYXJfdmVsb2NpdHl8cG9zaXRpb258c3BlZWQpXyg/Onh8eSl8YW5ndWxhcl8oPzpkYW1waW5nfHZlbG9jaXR5KXxwb3NpdGlvbl8oPzp4fHkpcHJldmlvdXN8c3BlZWR8bGluZWFyX2RhbXBpbmd8YnVsbGV0fGZpeGVkX3JvdGF0aW9ufGFjdGl2ZXxtYXNzfGluZXJ0aWF8ZHluYW1pY3xraW5lbWF0aWN8c2xlZXBpbmd8Y29sbGlzaW9uX3BvaW50cyl8cG9pbnRlcl8oPzppbnZhbGlkfG51bGwpfHJvb218cm9vbV8oPzpjYXB0aW9ufGZpcnN0fGhlaWdodHxsYXN0fHBlcnNpc3RlbnR8c3BlZWR8d2lkdGgpfHNjb3JlfHNlY3VyZV9tb2RlfHNob3dfKD86aGVhbHRofGxpdmVzfHNjb3JlKXxzb2xpZHxzcGVlZHxzcHJpdGVfKD86aGVpZ2h0fGluZGV4fHdpZHRofHhvZmZzZXR8eW9mZnNldCl8dGVtcF9kaXJlY3Rvcnl8dGltZWxpbmVfKD86aW5kZXh8bG9vcHxwb3NpdGlvbnxydW5uaW5nfHNwZWVkKXx0cmFuc2l0aW9uXyg/OmNvbG9yfGtpbmR8c3RlcHMpfHVuZGVmaW5lZHx2aWV3Xyg/OmFuZ2xlfGN1cnJlbnR8ZW5hYmxlZHwoPzpofHYpKD86Ym9yZGVyfHNwZWVkKXwoPzpofHd8eHx5KXBvcnR8KD86aHx3fHh8eSl2aWV3fG9iamVjdHxzdXJmYWNlX2lkfHZpc2libGUpfHZpc2libGV8d2ViZ2xfZW5hYmxlZHx3b3JraW5nX2RpcmVjdG9yeXwoPzp4fHkpKD86cHJldmlvdXN8c3RhcnQpfHh8eXxhcmd1bWVudCg/Ol9yZWxpdGl2ZXxfY291bnR8XFxkKXxhcmd1bWVudHxnbG9iYWx8bG9jYWx8b3RoZXJ8c2VsZilcXGIvXG4gICAgfSlcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiZ21sIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJnYW1lbWFrZXJsYW5ndWFnZSIsImV4dGVuZCIsImtleXdvcmQiLCJudW1iZXIiLCJvcGVyYXRvciIsImNvbnN0YW50IiwidmFyaWFibGUiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/gml.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/gn.js":
/*!*******************************************!*\
  !*** ./node_modules/refractor/lang/gn.js ***!
  \*******************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = gn;\ngn.displayName = 'gn';\ngn.aliases = ['gni'];\nfunction gn(Prism) {\n  // https://gn.googlesource.com/gn/+/refs/heads/main/docs/reference.md#grammar\n  Prism.languages.gn = {\n    comment: {\n      pattern: /#.*/,\n      greedy: true\n    },\n    'string-literal': {\n      pattern: /(^|[^\\\\\"])\"(?:[^\\r\\n\"\\\\]|\\\\.)*\"/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$(?:\\{[\\s\\S]*?\\}|[a-zA-Z_]\\w*|0x[a-fA-F0-9]{2})/,\n          lookbehind: true,\n          inside: {\n            number: /^\\$0x[\\s\\S]{2}$/,\n            variable: /^\\$\\w+$/,\n            'interpolation-punctuation': {\n              pattern: /^\\$\\{|\\}$/,\n              alias: 'punctuation'\n            },\n            expression: {\n              pattern: /[\\s\\S]+/,\n              inside: null // see below\n            }\n          }\n        },\n\n        string: /[\\s\\S]+/\n      }\n    },\n    keyword: /\\b(?:else|if)\\b/,\n    \"boolean\": /\\b(?:false|true)\\b/,\n    'builtin-function': {\n      // a few functions get special highlighting to improve readability\n      pattern: /\\b(?:assert|defined|foreach|import|pool|print|template|tool|toolchain)(?=\\s*\\()/i,\n      alias: 'keyword'\n    },\n    \"function\": /\\b[a-z_]\\w*(?=\\s*\\()/i,\n    constant: /\\b(?:current_cpu|current_os|current_toolchain|default_toolchain|host_cpu|host_os|root_build_dir|root_gen_dir|root_out_dir|target_cpu|target_gen_dir|target_os|target_out_dir)\\b/,\n    number: /-?\\b\\d+\\b/,\n    operator: /[-+!=<>]=?|&&|\\|\\|/,\n    punctuation: /[(){}[\\],.]/\n  };\n  Prism.languages.gn['string-literal'].inside['interpolation'].inside['expression'].inside = Prism.languages.gn;\n  Prism.languages.gni = Prism.languages.gn;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvZ24uanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxFQUFFO0FBQ25CQSxFQUFFLENBQUNDLFdBQVcsR0FBRyxJQUFJO0FBQ3JCRCxFQUFFLENBQUNFLE9BQU8sR0FBRyxDQUFDLEtBQUssQ0FBQztBQUNwQixTQUFTRixFQUFFQSxDQUFDRyxLQUFLLEVBQUU7RUFDakI7RUFDQUEsS0FBSyxDQUFDQyxTQUFTLENBQUNKLEVBQUUsR0FBRztJQUNuQkssT0FBTyxFQUFFO01BQ1BDLE9BQU8sRUFBRSxLQUFLO01BQ2RDLE1BQU0sRUFBRTtJQUNWLENBQUM7SUFDRCxnQkFBZ0IsRUFBRTtNQUNoQkQsT0FBTyxFQUFFLGlDQUFpQztNQUMxQ0UsVUFBVSxFQUFFLElBQUk7TUFDaEJELE1BQU0sRUFBRSxJQUFJO01BQ1pFLE1BQU0sRUFBRTtRQUNOQyxhQUFhLEVBQUU7VUFDYkosT0FBTyxFQUNMLHlFQUF5RTtVQUMzRUUsVUFBVSxFQUFFLElBQUk7VUFDaEJDLE1BQU0sRUFBRTtZQUNORSxNQUFNLEVBQUUsaUJBQWlCO1lBQ3pCQyxRQUFRLEVBQUUsU0FBUztZQUNuQiwyQkFBMkIsRUFBRTtjQUMzQk4sT0FBTyxFQUFFLFdBQVc7Y0FDcEJPLEtBQUssRUFBRTtZQUNULENBQUM7WUFDREMsVUFBVSxFQUFFO2NBQ1ZSLE9BQU8sRUFBRSxTQUFTO2NBQ2xCRyxNQUFNLEVBQUUsSUFBSSxDQUFDO1lBQ2Y7VUFDRjtRQUNGLENBQUM7O1FBQ0RNLE1BQU0sRUFBRTtNQUNWO0lBQ0YsQ0FBQztJQUNEQyxPQUFPLEVBQUUsaUJBQWlCO0lBQzFCLFdBQVMsb0JBQW9CO0lBQzdCLGtCQUFrQixFQUFFO01BQ2xCO01BQ0FWLE9BQU8sRUFDTCxrRkFBa0Y7TUFDcEZPLEtBQUssRUFBRTtJQUNULENBQUM7SUFDRCxZQUFVLHVCQUF1QjtJQUNqQ0ksUUFBUSxFQUNOLGlMQUFpTDtJQUNuTE4sTUFBTSxFQUFFLFdBQVc7SUFDbkJPLFFBQVEsRUFBRSxvQkFBb0I7SUFDOUJDLFdBQVcsRUFBRTtFQUNmLENBQUM7RUFDRGhCLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixFQUFFLENBQUMsZ0JBQWdCLENBQUMsQ0FBQ1MsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDQSxNQUFNLENBQ2pFLFlBQVksQ0FDYixDQUFDQSxNQUFNLEdBQUdOLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixFQUFFO0VBQzdCRyxLQUFLLENBQUNDLFNBQVMsQ0FBQ2dCLEdBQUcsR0FBR2pCLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixFQUFFO0FBQzFDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcZ24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gZ25cbmduLmRpc3BsYXlOYW1lID0gJ2duJ1xuZ24uYWxpYXNlcyA9IFsnZ25pJ11cbmZ1bmN0aW9uIGduKFByaXNtKSB7XG4gIC8vIGh0dHBzOi8vZ24uZ29vZ2xlc291cmNlLmNvbS9nbi8rL3JlZnMvaGVhZHMvbWFpbi9kb2NzL3JlZmVyZW5jZS5tZCNncmFtbWFyXG4gIFByaXNtLmxhbmd1YWdlcy5nbiA9IHtcbiAgICBjb21tZW50OiB7XG4gICAgICBwYXR0ZXJuOiAvIy4qLyxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgJ3N0cmluZy1saXRlcmFsJzoge1xuICAgICAgcGF0dGVybjogLyhefFteXFxcXFwiXSlcIig/OlteXFxyXFxuXCJcXFxcXXxcXFxcLikqXCIvLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgIGluc2lkZToge1xuICAgICAgICBpbnRlcnBvbGF0aW9uOiB7XG4gICAgICAgICAgcGF0dGVybjpcbiAgICAgICAgICAgIC8oKD86XnxbXlxcXFxdKSg/OlxcXFx7Mn0pKilcXCQoPzpcXHtbXFxzXFxTXSo/XFx9fFthLXpBLVpfXVxcdyp8MHhbYS1mQS1GMC05XXsyfSkvLFxuICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgICBudW1iZXI6IC9eXFwkMHhbXFxzXFxTXXsyfSQvLFxuICAgICAgICAgICAgdmFyaWFibGU6IC9eXFwkXFx3KyQvLFxuICAgICAgICAgICAgJ2ludGVycG9sYXRpb24tcHVuY3R1YXRpb24nOiB7XG4gICAgICAgICAgICAgIHBhdHRlcm46IC9eXFwkXFx7fFxcfSQvLFxuICAgICAgICAgICAgICBhbGlhczogJ3B1bmN0dWF0aW9uJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGV4cHJlc3Npb246IHtcbiAgICAgICAgICAgICAgcGF0dGVybjogL1tcXHNcXFNdKy8sXG4gICAgICAgICAgICAgIGluc2lkZTogbnVsbCAvLyBzZWUgYmVsb3dcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHN0cmluZzogL1tcXHNcXFNdKy9cbiAgICAgIH1cbiAgICB9LFxuICAgIGtleXdvcmQ6IC9cXGIoPzplbHNlfGlmKVxcYi8sXG4gICAgYm9vbGVhbjogL1xcYig/OmZhbHNlfHRydWUpXFxiLyxcbiAgICAnYnVpbHRpbi1mdW5jdGlvbic6IHtcbiAgICAgIC8vIGEgZmV3IGZ1bmN0aW9ucyBnZXQgc3BlY2lhbCBoaWdobGlnaHRpbmcgdG8gaW1wcm92ZSByZWFkYWJpbGl0eVxuICAgICAgcGF0dGVybjpcbiAgICAgICAgL1xcYig/OmFzc2VydHxkZWZpbmVkfGZvcmVhY2h8aW1wb3J0fHBvb2x8cHJpbnR8dGVtcGxhdGV8dG9vbHx0b29sY2hhaW4pKD89XFxzKlxcKCkvaSxcbiAgICAgIGFsaWFzOiAna2V5d29yZCdcbiAgICB9LFxuICAgIGZ1bmN0aW9uOiAvXFxiW2Etel9dXFx3Kig/PVxccypcXCgpL2ksXG4gICAgY29uc3RhbnQ6XG4gICAgICAvXFxiKD86Y3VycmVudF9jcHV8Y3VycmVudF9vc3xjdXJyZW50X3Rvb2xjaGFpbnxkZWZhdWx0X3Rvb2xjaGFpbnxob3N0X2NwdXxob3N0X29zfHJvb3RfYnVpbGRfZGlyfHJvb3RfZ2VuX2Rpcnxyb290X291dF9kaXJ8dGFyZ2V0X2NwdXx0YXJnZXRfZ2VuX2Rpcnx0YXJnZXRfb3N8dGFyZ2V0X291dF9kaXIpXFxiLyxcbiAgICBudW1iZXI6IC8tP1xcYlxcZCtcXGIvLFxuICAgIG9wZXJhdG9yOiAvWy0rIT08Pl09P3wmJnxcXHxcXHwvLFxuICAgIHB1bmN0dWF0aW9uOiAvWygpe31bXFxdLC5dL1xuICB9XG4gIFByaXNtLmxhbmd1YWdlcy5nblsnc3RyaW5nLWxpdGVyYWwnXS5pbnNpZGVbJ2ludGVycG9sYXRpb24nXS5pbnNpZGVbXG4gICAgJ2V4cHJlc3Npb24nXG4gIF0uaW5zaWRlID0gUHJpc20ubGFuZ3VhZ2VzLmduXG4gIFByaXNtLmxhbmd1YWdlcy5nbmkgPSBQcmlzbS5sYW5ndWFnZXMuZ25cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiZ24iLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImxhbmd1YWdlcyIsImNvbW1lbnQiLCJwYXR0ZXJuIiwiZ3JlZWR5IiwibG9va2JlaGluZCIsImluc2lkZSIsImludGVycG9sYXRpb24iLCJudW1iZXIiLCJ2YXJpYWJsZSIsImFsaWFzIiwiZXhwcmVzc2lvbiIsInN0cmluZyIsImtleXdvcmQiLCJjb25zdGFudCIsIm9wZXJhdG9yIiwicHVuY3R1YXRpb24iLCJnbmkiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/gn.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/go-module.js":
/*!**************************************************!*\
  !*** ./node_modules/refractor/lang/go-module.js ***!
  \**************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = goModule;\ngoModule.displayName = 'goModule';\ngoModule.aliases = [];\nfunction goModule(Prism) {\n  // https://go.dev/ref/mod#go-mod-file-module\n  Prism.languages['go-mod'] = Prism.languages['go-module'] = {\n    comment: {\n      pattern: /\\/\\/.*/,\n      greedy: true\n    },\n    version: {\n      pattern: /(^|[\\s()[\\],])v\\d+\\.\\d+\\.\\d+(?:[+-][-+.\\w]*)?(?![^\\s()[\\],])/,\n      lookbehind: true,\n      alias: 'number'\n    },\n    'go-version': {\n      pattern: /((?:^|\\s)go\\s+)\\d+(?:\\.\\d+){1,2}/,\n      lookbehind: true,\n      alias: 'number'\n    },\n    keyword: {\n      pattern: /^([ \\t]*)(?:exclude|go|module|replace|require|retract)\\b/m,\n      lookbehind: true\n    },\n    operator: /=>/,\n    punctuation: /[()[\\],]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvZ28tbW9kdWxlLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsUUFBUTtBQUN6QkEsUUFBUSxDQUFDQyxXQUFXLEdBQUcsVUFBVTtBQUNqQ0QsUUFBUSxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNyQixTQUFTRixRQUFRQSxDQUFDRyxLQUFLLEVBQUU7RUFDdkI7RUFDQUEsS0FBSyxDQUFDQyxTQUFTLENBQUMsUUFBUSxDQUFDLEdBQUdELEtBQUssQ0FBQ0MsU0FBUyxDQUFDLFdBQVcsQ0FBQyxHQUFHO0lBQ3pEQyxPQUFPLEVBQUU7TUFDUEMsT0FBTyxFQUFFLFFBQVE7TUFDakJDLE1BQU0sRUFBRTtJQUNWLENBQUM7SUFDREMsT0FBTyxFQUFFO01BQ1BGLE9BQU8sRUFBRSw4REFBOEQ7TUFDdkVHLFVBQVUsRUFBRSxJQUFJO01BQ2hCQyxLQUFLLEVBQUU7SUFDVCxDQUFDO0lBQ0QsWUFBWSxFQUFFO01BQ1pKLE9BQU8sRUFBRSxrQ0FBa0M7TUFDM0NHLFVBQVUsRUFBRSxJQUFJO01BQ2hCQyxLQUFLLEVBQUU7SUFDVCxDQUFDO0lBQ0RDLE9BQU8sRUFBRTtNQUNQTCxPQUFPLEVBQUUsMkRBQTJEO01BQ3BFRyxVQUFVLEVBQUU7SUFDZCxDQUFDO0lBQ0RHLFFBQVEsRUFBRSxJQUFJO0lBQ2RDLFdBQVcsRUFBRTtFQUNmLENBQUM7QUFDSCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXGdvLW1vZHVsZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBnb01vZHVsZVxuZ29Nb2R1bGUuZGlzcGxheU5hbWUgPSAnZ29Nb2R1bGUnXG5nb01vZHVsZS5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIGdvTW9kdWxlKFByaXNtKSB7XG4gIC8vIGh0dHBzOi8vZ28uZGV2L3JlZi9tb2QjZ28tbW9kLWZpbGUtbW9kdWxlXG4gIFByaXNtLmxhbmd1YWdlc1snZ28tbW9kJ10gPSBQcmlzbS5sYW5ndWFnZXNbJ2dvLW1vZHVsZSddID0ge1xuICAgIGNvbW1lbnQ6IHtcbiAgICAgIHBhdHRlcm46IC9cXC9cXC8uKi8sXG4gICAgICBncmVlZHk6IHRydWVcbiAgICB9LFxuICAgIHZlcnNpb246IHtcbiAgICAgIHBhdHRlcm46IC8oXnxbXFxzKClbXFxdLF0pdlxcZCtcXC5cXGQrXFwuXFxkKyg/OlsrLV1bLSsuXFx3XSopPyg/IVteXFxzKClbXFxdLF0pLyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBhbGlhczogJ251bWJlcidcbiAgICB9LFxuICAgICdnby12ZXJzaW9uJzoge1xuICAgICAgcGF0dGVybjogLygoPzpefFxccylnb1xccyspXFxkKyg/OlxcLlxcZCspezEsMn0vLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGFsaWFzOiAnbnVtYmVyJ1xuICAgIH0sXG4gICAga2V5d29yZDoge1xuICAgICAgcGF0dGVybjogL14oWyBcXHRdKikoPzpleGNsdWRlfGdvfG1vZHVsZXxyZXBsYWNlfHJlcXVpcmV8cmV0cmFjdClcXGIvbSxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICB9LFxuICAgIG9wZXJhdG9yOiAvPT4vLFxuICAgIHB1bmN0dWF0aW9uOiAvWygpW1xcXSxdL1xuICB9XG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImdvTW9kdWxlIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJjb21tZW50IiwicGF0dGVybiIsImdyZWVkeSIsInZlcnNpb24iLCJsb29rYmVoaW5kIiwiYWxpYXMiLCJrZXl3b3JkIiwib3BlcmF0b3IiLCJwdW5jdHVhdGlvbiJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/go-module.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/go.js":
/*!*******************************************!*\
  !*** ./node_modules/refractor/lang/go.js ***!
  \*******************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = go;\ngo.displayName = 'go';\ngo.aliases = [];\nfunction go(Prism) {\n  Prism.languages.go = Prism.languages.extend('clike', {\n    string: {\n      pattern: /(^|[^\\\\])\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|`[^`]*`/,\n      lookbehind: true,\n      greedy: true\n    },\n    keyword: /\\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\\b/,\n    \"boolean\": /\\b(?:_|false|iota|nil|true)\\b/,\n    number: [\n    // binary and octal integers\n    /\\b0(?:b[01_]+|o[0-7_]+)i?\\b/i,\n    // hexadecimal integers and floats\n    /\\b0x(?:[a-f\\d_]+(?:\\.[a-f\\d_]*)?|\\.[a-f\\d_]+)(?:p[+-]?\\d+(?:_\\d+)*)?i?(?!\\w)/i,\n    // decimal integers and floats\n    /(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?[\\d_]+)?i?(?!\\w)/i],\n    operator: /[*\\/%^!=]=?|\\+[=+]?|-[=-]?|\\|[=|]?|&(?:=|&|\\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\\.\\.\\./,\n    builtin: /\\b(?:append|bool|byte|cap|close|complex|complex(?:64|128)|copy|delete|error|float(?:32|64)|u?int(?:8|16|32|64)?|imag|len|make|new|panic|print(?:ln)?|real|recover|rune|string|uintptr)\\b/\n  });\n  Prism.languages.insertBefore('go', 'string', {\n    \"char\": {\n      pattern: /'(?:\\\\.|[^'\\\\\\r\\n]){0,10}'/,\n      greedy: true\n    }\n  });\n  delete Prism.languages.go['class-name'];\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvZ28uanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxFQUFFO0FBQ25CQSxFQUFFLENBQUNDLFdBQVcsR0FBRyxJQUFJO0FBQ3JCRCxFQUFFLENBQUNFLE9BQU8sR0FBRyxFQUFFO0FBQ2YsU0FBU0YsRUFBRUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ2pCQSxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osRUFBRSxHQUFHRyxLQUFLLENBQUNDLFNBQVMsQ0FBQ0MsTUFBTSxDQUFDLE9BQU8sRUFBRTtJQUNuREMsTUFBTSxFQUFFO01BQ05DLE9BQU8sRUFBRSx3Q0FBd0M7TUFDakRDLFVBQVUsRUFBRSxJQUFJO01BQ2hCQyxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0RDLE9BQU8sRUFDTCxxS0FBcUs7SUFDdkssV0FBUywrQkFBK0I7SUFDeENDLE1BQU0sRUFBRTtJQUNOO0lBQ0EsOEJBQThCO0lBQUU7SUFDaEMsK0VBQStFO0lBQUU7SUFDakYsb0VBQW9FLENBQ3JFO0lBQ0RDLFFBQVEsRUFDTix1RkFBdUY7SUFDekZDLE9BQU8sRUFDTDtFQUNKLENBQUMsQ0FBQztFQUNGVixLQUFLLENBQUNDLFNBQVMsQ0FBQ1UsWUFBWSxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUU7SUFDM0MsUUFBTTtNQUNKUCxPQUFPLEVBQUUsNEJBQTRCO01BQ3JDRSxNQUFNLEVBQUU7SUFDVjtFQUNGLENBQUMsQ0FBQztFQUNGLE9BQU9OLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixFQUFFLENBQUMsWUFBWSxDQUFDO0FBQ3pDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcZ28uanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gZ29cbmdvLmRpc3BsYXlOYW1lID0gJ2dvJ1xuZ28uYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBnbyhQcmlzbSkge1xuICBQcmlzbS5sYW5ndWFnZXMuZ28gPSBQcmlzbS5sYW5ndWFnZXMuZXh0ZW5kKCdjbGlrZScsIHtcbiAgICBzdHJpbmc6IHtcbiAgICAgIHBhdHRlcm46IC8oXnxbXlxcXFxdKVwiKD86XFxcXC58W15cIlxcXFxcXHJcXG5dKSpcInxgW15gXSpgLyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBncmVlZHk6IHRydWVcbiAgICB9LFxuICAgIGtleXdvcmQ6XG4gICAgICAvXFxiKD86YnJlYWt8Y2FzZXxjaGFufGNvbnN0fGNvbnRpbnVlfGRlZmF1bHR8ZGVmZXJ8ZWxzZXxmYWxsdGhyb3VnaHxmb3J8ZnVuY3xnbyg/OnRvKT98aWZ8aW1wb3J0fGludGVyZmFjZXxtYXB8cGFja2FnZXxyYW5nZXxyZXR1cm58c2VsZWN0fHN0cnVjdHxzd2l0Y2h8dHlwZXx2YXIpXFxiLyxcbiAgICBib29sZWFuOiAvXFxiKD86X3xmYWxzZXxpb3RhfG5pbHx0cnVlKVxcYi8sXG4gICAgbnVtYmVyOiBbXG4gICAgICAvLyBiaW5hcnkgYW5kIG9jdGFsIGludGVnZXJzXG4gICAgICAvXFxiMCg/OmJbMDFfXSt8b1swLTdfXSspaT9cXGIvaSwgLy8gaGV4YWRlY2ltYWwgaW50ZWdlcnMgYW5kIGZsb2F0c1xuICAgICAgL1xcYjB4KD86W2EtZlxcZF9dKyg/OlxcLlthLWZcXGRfXSopP3xcXC5bYS1mXFxkX10rKSg/OnBbKy1dP1xcZCsoPzpfXFxkKykqKT9pPyg/IVxcdykvaSwgLy8gZGVjaW1hbCBpbnRlZ2VycyBhbmQgZmxvYXRzXG4gICAgICAvKD86XFxiXFxkW1xcZF9dKig/OlxcLltcXGRfXSopP3xcXEJcXC5cXGRbXFxkX10qKSg/OmVbKy1dP1tcXGRfXSspP2k/KD8hXFx3KS9pXG4gICAgXSxcbiAgICBvcGVyYXRvcjpcbiAgICAgIC9bKlxcLyVeIT1dPT98XFwrWz0rXT98LVs9LV0/fFxcfFs9fF0/fCYoPzo9fCZ8XFxePT8pP3w+KD86Pj0/fD0pP3w8KD86PD0/fD18LSk/fDo9fFxcLlxcLlxcLi8sXG4gICAgYnVpbHRpbjpcbiAgICAgIC9cXGIoPzphcHBlbmR8Ym9vbHxieXRlfGNhcHxjbG9zZXxjb21wbGV4fGNvbXBsZXgoPzo2NHwxMjgpfGNvcHl8ZGVsZXRlfGVycm9yfGZsb2F0KD86MzJ8NjQpfHU/aW50KD86OHwxNnwzMnw2NCk/fGltYWd8bGVufG1ha2V8bmV3fHBhbmljfHByaW50KD86bG4pP3xyZWFsfHJlY292ZXJ8cnVuZXxzdHJpbmd8dWludHB0cilcXGIvXG4gIH0pXG4gIFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ2dvJywgJ3N0cmluZycsIHtcbiAgICBjaGFyOiB7XG4gICAgICBwYXR0ZXJuOiAvJyg/OlxcXFwufFteJ1xcXFxcXHJcXG5dKXswLDEwfScvLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfVxuICB9KVxuICBkZWxldGUgUHJpc20ubGFuZ3VhZ2VzLmdvWydjbGFzcy1uYW1lJ11cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiZ28iLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImxhbmd1YWdlcyIsImV4dGVuZCIsInN0cmluZyIsInBhdHRlcm4iLCJsb29rYmVoaW5kIiwiZ3JlZWR5Iiwia2V5d29yZCIsIm51bWJlciIsIm9wZXJhdG9yIiwiYnVpbHRpbiIsImluc2VydEJlZm9yZSJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/go.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/graphql.js":
/*!************************************************!*\
  !*** ./node_modules/refractor/lang/graphql.js ***!
  \************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = graphql;\ngraphql.displayName = 'graphql';\ngraphql.aliases = [];\nfunction graphql(Prism) {\n  Prism.languages.graphql = {\n    comment: /#.*/,\n    description: {\n      pattern: /(?:\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")(?=\\s*[a-z_])/i,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        'language-markdown': {\n          pattern: /(^\"(?:\"\")?)(?!\\1)[\\s\\S]+(?=\\1$)/,\n          lookbehind: true,\n          inside: Prism.languages.markdown\n        }\n      }\n    },\n    string: {\n      pattern: /\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n      greedy: true\n    },\n    number: /(?:\\B-|\\b)\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n    \"boolean\": /\\b(?:false|true)\\b/,\n    variable: /\\$[a-z_]\\w*/i,\n    directive: {\n      pattern: /@[a-z_]\\w*/i,\n      alias: 'function'\n    },\n    'attr-name': {\n      pattern: /\\b[a-z_]\\w*(?=\\s*(?:\\((?:[^()\"]|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")*\\))?:)/i,\n      greedy: true\n    },\n    'atom-input': {\n      pattern: /\\b[A-Z]\\w*Input\\b/,\n      alias: 'class-name'\n    },\n    scalar: /\\b(?:Boolean|Float|ID|Int|String)\\b/,\n    constant: /\\b[A-Z][A-Z_\\d]*\\b/,\n    'class-name': {\n      pattern: /(\\b(?:enum|implements|interface|on|scalar|type|union)\\s+|&\\s*|:\\s*|\\[)[A-Z_]\\w*/,\n      lookbehind: true\n    },\n    fragment: {\n      pattern: /(\\bfragment\\s+|\\.{3}\\s*(?!on\\b))[a-zA-Z_]\\w*/,\n      lookbehind: true,\n      alias: 'function'\n    },\n    'definition-mutation': {\n      pattern: /(\\bmutation\\s+)[a-zA-Z_]\\w*/,\n      lookbehind: true,\n      alias: 'function'\n    },\n    'definition-query': {\n      pattern: /(\\bquery\\s+)[a-zA-Z_]\\w*/,\n      lookbehind: true,\n      alias: 'function'\n    },\n    keyword: /\\b(?:directive|enum|extend|fragment|implements|input|interface|mutation|on|query|repeatable|scalar|schema|subscription|type|union)\\b/,\n    operator: /[!=|&]|\\.{3}/,\n    'property-query': /\\w+(?=\\s*\\()/,\n    object: /\\w+(?=\\s*\\{)/,\n    punctuation: /[!(){}\\[\\]:=,]/,\n    property: /\\w+/\n  };\n  Prism.hooks.add('after-tokenize', function afterTokenizeGraphql(env) {\n    if (env.language !== 'graphql') {\n      return;\n    }\n    /**\n     * get the graphql token stream that we want to customize\n     *\n     * @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\n     * @type {Token[]}\n     */\n    var validTokens = env.tokens.filter(function (token) {\n      return typeof token !== 'string' && token.type !== 'comment' && token.type !== 'scalar';\n    });\n    var currentIndex = 0;\n    /**\n     * Returns whether the token relative to the current index has the given type.\n     *\n     * @param {number} offset\n     * @returns {Token | undefined}\n     */\n    function getToken(offset) {\n      return validTokens[currentIndex + offset];\n    }\n    /**\n     * Returns whether the token relative to the current index has the given type.\n     *\n     * @param {readonly string[]} types\n     * @param {number} [offset=0]\n     * @returns {boolean}\n     */\n    function isTokenType(types, offset) {\n      offset = offset || 0;\n      for (var i = 0; i < types.length; i++) {\n        var token = getToken(i + offset);\n        if (!token || token.type !== types[i]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    /**\n     * Returns the index of the closing bracket to an opening bracket.\n     *\n     * It is assumed that `token[currentIndex - 1]` is an opening bracket.\n     *\n     * If no closing bracket could be found, `-1` will be returned.\n     *\n     * @param {RegExp} open\n     * @param {RegExp} close\n     * @returns {number}\n     */\n    function findClosingBracket(open, close) {\n      var stackHeight = 1;\n      for (var i = currentIndex; i < validTokens.length; i++) {\n        var token = validTokens[i];\n        var content = token.content;\n        if (token.type === 'punctuation' && typeof content === 'string') {\n          if (open.test(content)) {\n            stackHeight++;\n          } else if (close.test(content)) {\n            stackHeight--;\n            if (stackHeight === 0) {\n              return i;\n            }\n          }\n        }\n      }\n      return -1;\n    }\n    /**\n     * Adds an alias to the given token.\n     *\n     * @param {Token} token\n     * @param {string} alias\n     * @returns {void}\n     */\n    function addAlias(token, alias) {\n      var aliases = token.alias;\n      if (!aliases) {\n        token.alias = aliases = [];\n      } else if (!Array.isArray(aliases)) {\n        token.alias = aliases = [aliases];\n      }\n      aliases.push(alias);\n    }\n    for (; currentIndex < validTokens.length;) {\n      var startToken = validTokens[currentIndex++]; // add special aliases for mutation tokens\n      if (startToken.type === 'keyword' && startToken.content === 'mutation') {\n        // any array of the names of all input variables (if any)\n        var inputVariables = [];\n        if (isTokenType(['definition-mutation', 'punctuation']) && getToken(1).content === '(') {\n          // definition\n          currentIndex += 2; // skip 'definition-mutation' and 'punctuation'\n          var definitionEnd = findClosingBracket(/^\\($/, /^\\)$/);\n          if (definitionEnd === -1) {\n            continue;\n          } // find all input variables\n          for (; currentIndex < definitionEnd; currentIndex++) {\n            var t = getToken(0);\n            if (t.type === 'variable') {\n              addAlias(t, 'variable-input');\n              inputVariables.push(t.content);\n            }\n          }\n          currentIndex = definitionEnd + 1;\n        }\n        if (isTokenType(['punctuation', 'property-query']) && getToken(0).content === '{') {\n          currentIndex++; // skip opening bracket\n          addAlias(getToken(0), 'property-mutation');\n          if (inputVariables.length > 0) {\n            var mutationEnd = findClosingBracket(/^\\{$/, /^\\}$/);\n            if (mutationEnd === -1) {\n              continue;\n            } // give references to input variables a special alias\n            for (var i = currentIndex; i < mutationEnd; i++) {\n              var varToken = validTokens[i];\n              if (varToken.type === 'variable' && inputVariables.indexOf(varToken.content) >= 0) {\n                addAlias(varToken, 'variable-input');\n              }\n            }\n          }\n        }\n      }\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/graphql.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/groovy.js":
/*!***********************************************!*\
  !*** ./node_modules/refractor/lang/groovy.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = groovy;\ngroovy.displayName = 'groovy';\ngroovy.aliases = [];\nfunction groovy(Prism) {\n  Prism.languages.groovy = Prism.languages.extend('clike', {\n    string: [{\n      // https://groovy-lang.org/syntax.html#_dollar_slashy_string\n      pattern: /(\"\"\"|''')(?:[^\\\\]|\\\\[\\s\\S])*?\\1|\\$\\/(?:[^/$]|\\$(?:[/$]|(?![/$]))|\\/(?!\\$))*\\/\\$/,\n      greedy: true\n    }, {\n      // TODO: Slash strings (e.g. /foo/) can contain line breaks but this will cause a lot of trouble with\n      // simple division (see JS regex), so find a fix maybe?\n      pattern: /([\"'/])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true\n    }],\n    keyword: /\\b(?:abstract|as|assert|boolean|break|byte|case|catch|char|class|const|continue|def|default|do|double|else|enum|extends|final|finally|float|for|goto|if|implements|import|in|instanceof|int|interface|long|native|new|package|private|protected|public|return|short|static|strictfp|super|switch|synchronized|this|throw|throws|trait|transient|try|void|volatile|while)\\b/,\n    number: /\\b(?:0b[01_]+|0x[\\da-f_]+(?:\\.[\\da-f_p\\-]+)?|[\\d_]+(?:\\.[\\d_]+)?(?:e[+-]?\\d+)?)[glidf]?\\b/i,\n    operator: {\n      pattern: /(^|[^.])(?:~|==?~?|\\?[.:]?|\\*(?:[.=]|\\*=?)?|\\.[@&]|\\.\\.<|\\.\\.(?!\\.)|-[-=>]?|\\+[+=]?|!=?|<(?:<=?|=>?)?|>(?:>>?=?|=)?|&[&=]?|\\|[|=]?|\\/=?|\\^=?|%=?)/,\n      lookbehind: true\n    },\n    punctuation: /\\.+|[{}[\\];(),:$]/\n  });\n  Prism.languages.insertBefore('groovy', 'string', {\n    shebang: {\n      pattern: /#!.+/,\n      alias: 'comment'\n    }\n  });\n  Prism.languages.insertBefore('groovy', 'punctuation', {\n    'spock-block': /\\b(?:and|cleanup|expect|given|setup|then|when|where):/\n  });\n  Prism.languages.insertBefore('groovy', 'function', {\n    annotation: {\n      pattern: /(^|[^.])@\\w+/,\n      lookbehind: true,\n      alias: 'punctuation'\n    }\n  }); // Handle string interpolation\n  Prism.hooks.add('wrap', function (env) {\n    if (env.language === 'groovy' && env.type === 'string') {\n      var delimiter = env.content.value[0];\n      if (delimiter != \"'\") {\n        var pattern = /([^\\\\])(?:\\$(?:\\{.*?\\}|[\\w.]+))/;\n        if (delimiter === '$') {\n          pattern = /([^\\$])(?:\\$(?:\\{.*?\\}|[\\w.]+))/;\n        } // To prevent double HTML-encoding we have to decode env.content first\n        env.content.value = env.content.value.replace(/&lt;/g, '<').replace(/&amp;/g, '&');\n        env.content = Prism.highlight(env.content.value, {\n          expression: {\n            pattern: pattern,\n            lookbehind: true,\n            inside: Prism.languages.groovy\n          }\n        });\n        env.classes.push(delimiter === '/' ? 'regex' : 'gstring');\n      }\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvZ3Jvb3Z5LmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsTUFBTTtBQUN2QkEsTUFBTSxDQUFDQyxXQUFXLEdBQUcsUUFBUTtBQUM3QkQsTUFBTSxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNuQixTQUFTRixNQUFNQSxDQUFDRyxLQUFLLEVBQUU7RUFDckJBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixNQUFNLEdBQUdHLEtBQUssQ0FBQ0MsU0FBUyxDQUFDQyxNQUFNLENBQUMsT0FBTyxFQUFFO0lBQ3ZEQyxNQUFNLEVBQUUsQ0FDTjtNQUNFO01BQ0FDLE9BQU8sRUFDTCxpRkFBaUY7TUFDbkZDLE1BQU0sRUFBRTtJQUNWLENBQUMsRUFDRDtNQUNFO01BQ0E7TUFDQUQsT0FBTyxFQUFFLG1DQUFtQztNQUM1Q0MsTUFBTSxFQUFFO0lBQ1YsQ0FBQyxDQUNGO0lBQ0RDLE9BQU8sRUFDTCw0V0FBNFc7SUFDOVdDLE1BQU0sRUFDSiw0RkFBNEY7SUFDOUZDLFFBQVEsRUFBRTtNQUNSSixPQUFPLEVBQ0wsbUpBQW1KO01BQ3JKSyxVQUFVLEVBQUU7SUFDZCxDQUFDO0lBQ0RDLFdBQVcsRUFBRTtFQUNmLENBQUMsQ0FBQztFQUNGVixLQUFLLENBQUNDLFNBQVMsQ0FBQ1UsWUFBWSxDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUU7SUFDL0NDLE9BQU8sRUFBRTtNQUNQUixPQUFPLEVBQUUsTUFBTTtNQUNmUyxLQUFLLEVBQUU7SUFDVDtFQUNGLENBQUMsQ0FBQztFQUNGYixLQUFLLENBQUNDLFNBQVMsQ0FBQ1UsWUFBWSxDQUFDLFFBQVEsRUFBRSxhQUFhLEVBQUU7SUFDcEQsYUFBYSxFQUFFO0VBQ2pCLENBQUMsQ0FBQztFQUNGWCxLQUFLLENBQUNDLFNBQVMsQ0FBQ1UsWUFBWSxDQUFDLFFBQVEsRUFBRSxVQUFVLEVBQUU7SUFDakRHLFVBQVUsRUFBRTtNQUNWVixPQUFPLEVBQUUsY0FBYztNQUN2QkssVUFBVSxFQUFFLElBQUk7TUFDaEJJLEtBQUssRUFBRTtJQUNUO0VBQ0YsQ0FBQyxDQUFDLEVBQUM7RUFDSGIsS0FBSyxDQUFDZSxLQUFLLENBQUNDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsVUFBVUMsR0FBRyxFQUFFO0lBQ3JDLElBQUlBLEdBQUcsQ0FBQ0MsUUFBUSxLQUFLLFFBQVEsSUFBSUQsR0FBRyxDQUFDRSxJQUFJLEtBQUssUUFBUSxFQUFFO01BQ3RELElBQUlDLFNBQVMsR0FBR0gsR0FBRyxDQUFDSSxPQUFPLENBQUNDLEtBQUssQ0FBQyxDQUFDLENBQUM7TUFDcEMsSUFBSUYsU0FBUyxJQUFJLEdBQUcsRUFBRTtRQUNwQixJQUFJaEIsT0FBTyxHQUFHLGlDQUFpQztRQUMvQyxJQUFJZ0IsU0FBUyxLQUFLLEdBQUcsRUFBRTtVQUNyQmhCLE9BQU8sR0FBRyxpQ0FBaUM7UUFDN0MsQ0FBQyxDQUFDO1FBQ0ZhLEdBQUcsQ0FBQ0ksT0FBTyxDQUFDQyxLQUFLLEdBQUdMLEdBQUcsQ0FBQ0ksT0FBTyxDQUFDQyxLQUFLLENBQ2xDQyxPQUFPLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUNyQkEsT0FBTyxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUM7UUFDekJOLEdBQUcsQ0FBQ0ksT0FBTyxHQUFHckIsS0FBSyxDQUFDd0IsU0FBUyxDQUFDUCxHQUFHLENBQUNJLE9BQU8sQ0FBQ0MsS0FBSyxFQUFFO1VBQy9DRyxVQUFVLEVBQUU7WUFDVnJCLE9BQU8sRUFBRUEsT0FBTztZQUNoQkssVUFBVSxFQUFFLElBQUk7WUFDaEJpQixNQUFNLEVBQUUxQixLQUFLLENBQUNDLFNBQVMsQ0FBQ0o7VUFDMUI7UUFDRixDQUFDLENBQUM7UUFDRm9CLEdBQUcsQ0FBQ1UsT0FBTyxDQUFDQyxJQUFJLENBQUNSLFNBQVMsS0FBSyxHQUFHLEdBQUcsT0FBTyxHQUFHLFNBQVMsQ0FBQztNQUMzRDtJQUNGO0VBQ0YsQ0FBQyxDQUFDO0FBQ0oiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxncm9vdnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gZ3Jvb3Z5XG5ncm9vdnkuZGlzcGxheU5hbWUgPSAnZ3Jvb3Z5J1xuZ3Jvb3Z5LmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24gZ3Jvb3Z5KFByaXNtKSB7XG4gIFByaXNtLmxhbmd1YWdlcy5ncm9vdnkgPSBQcmlzbS5sYW5ndWFnZXMuZXh0ZW5kKCdjbGlrZScsIHtcbiAgICBzdHJpbmc6IFtcbiAgICAgIHtcbiAgICAgICAgLy8gaHR0cHM6Ly9ncm9vdnktbGFuZy5vcmcvc3ludGF4Lmh0bWwjX2RvbGxhcl9zbGFzaHlfc3RyaW5nXG4gICAgICAgIHBhdHRlcm46XG4gICAgICAgICAgLyhcIlwiXCJ8JycnKSg/OlteXFxcXF18XFxcXFtcXHNcXFNdKSo/XFwxfFxcJFxcLyg/OlteLyRdfFxcJCg/OlsvJF18KD8hWy8kXSkpfFxcLyg/IVxcJCkpKlxcL1xcJC8sXG4gICAgICAgIGdyZWVkeTogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgLy8gVE9ETzogU2xhc2ggc3RyaW5ncyAoZS5nLiAvZm9vLykgY2FuIGNvbnRhaW4gbGluZSBicmVha3MgYnV0IHRoaXMgd2lsbCBjYXVzZSBhIGxvdCBvZiB0cm91YmxlIHdpdGhcbiAgICAgICAgLy8gc2ltcGxlIGRpdmlzaW9uIChzZWUgSlMgcmVnZXgpLCBzbyBmaW5kIGEgZml4IG1heWJlP1xuICAgICAgICBwYXR0ZXJuOiAvKFtcIicvXSkoPzpcXFxcLnwoPyFcXDEpW15cXFxcXFxyXFxuXSkqXFwxLyxcbiAgICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgICB9XG4gICAgXSxcbiAgICBrZXl3b3JkOlxuICAgICAgL1xcYig/OmFic3RyYWN0fGFzfGFzc2VydHxib29sZWFufGJyZWFrfGJ5dGV8Y2FzZXxjYXRjaHxjaGFyfGNsYXNzfGNvbnN0fGNvbnRpbnVlfGRlZnxkZWZhdWx0fGRvfGRvdWJsZXxlbHNlfGVudW18ZXh0ZW5kc3xmaW5hbHxmaW5hbGx5fGZsb2F0fGZvcnxnb3RvfGlmfGltcGxlbWVudHN8aW1wb3J0fGlufGluc3RhbmNlb2Z8aW50fGludGVyZmFjZXxsb25nfG5hdGl2ZXxuZXd8cGFja2FnZXxwcml2YXRlfHByb3RlY3RlZHxwdWJsaWN8cmV0dXJufHNob3J0fHN0YXRpY3xzdHJpY3RmcHxzdXBlcnxzd2l0Y2h8c3luY2hyb25pemVkfHRoaXN8dGhyb3d8dGhyb3dzfHRyYWl0fHRyYW5zaWVudHx0cnl8dm9pZHx2b2xhdGlsZXx3aGlsZSlcXGIvLFxuICAgIG51bWJlcjpcbiAgICAgIC9cXGIoPzowYlswMV9dK3wweFtcXGRhLWZfXSsoPzpcXC5bXFxkYS1mX3BcXC1dKyk/fFtcXGRfXSsoPzpcXC5bXFxkX10rKT8oPzplWystXT9cXGQrKT8pW2dsaWRmXT9cXGIvaSxcbiAgICBvcGVyYXRvcjoge1xuICAgICAgcGF0dGVybjpcbiAgICAgICAgLyhefFteLl0pKD86fnw9PT9+P3xcXD9bLjpdP3xcXCooPzpbLj1dfFxcKj0/KT98XFwuW0AmXXxcXC5cXC48fFxcLlxcLig/IVxcLil8LVstPT5dP3xcXCtbKz1dP3whPT98PCg/Ojw9P3w9Pj8pP3w+KD86Pj4/PT98PSk/fCZbJj1dP3xcXHxbfD1dP3xcXC89P3xcXF49P3wlPT8pLyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICB9LFxuICAgIHB1bmN0dWF0aW9uOiAvXFwuK3xbe31bXFxdOygpLDokXS9cbiAgfSlcbiAgUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgnZ3Jvb3Z5JywgJ3N0cmluZycsIHtcbiAgICBzaGViYW5nOiB7XG4gICAgICBwYXR0ZXJuOiAvIyEuKy8sXG4gICAgICBhbGlhczogJ2NvbW1lbnQnXG4gICAgfVxuICB9KVxuICBQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdncm9vdnknLCAncHVuY3R1YXRpb24nLCB7XG4gICAgJ3Nwb2NrLWJsb2NrJzogL1xcYig/OmFuZHxjbGVhbnVwfGV4cGVjdHxnaXZlbnxzZXR1cHx0aGVufHdoZW58d2hlcmUpOi9cbiAgfSlcbiAgUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgnZ3Jvb3Z5JywgJ2Z1bmN0aW9uJywge1xuICAgIGFubm90YXRpb246IHtcbiAgICAgIHBhdHRlcm46IC8oXnxbXi5dKUBcXHcrLyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBhbGlhczogJ3B1bmN0dWF0aW9uJ1xuICAgIH1cbiAgfSkgLy8gSGFuZGxlIHN0cmluZyBpbnRlcnBvbGF0aW9uXG4gIFByaXNtLmhvb2tzLmFkZCgnd3JhcCcsIGZ1bmN0aW9uIChlbnYpIHtcbiAgICBpZiAoZW52Lmxhbmd1YWdlID09PSAnZ3Jvb3Z5JyAmJiBlbnYudHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHZhciBkZWxpbWl0ZXIgPSBlbnYuY29udGVudC52YWx1ZVswXVxuICAgICAgaWYgKGRlbGltaXRlciAhPSBcIidcIikge1xuICAgICAgICB2YXIgcGF0dGVybiA9IC8oW15cXFxcXSkoPzpcXCQoPzpcXHsuKj9cXH18W1xcdy5dKykpL1xuICAgICAgICBpZiAoZGVsaW1pdGVyID09PSAnJCcpIHtcbiAgICAgICAgICBwYXR0ZXJuID0gLyhbXlxcJF0pKD86XFwkKD86XFx7Lio/XFx9fFtcXHcuXSspKS9cbiAgICAgICAgfSAvLyBUbyBwcmV2ZW50IGRvdWJsZSBIVE1MLWVuY29kaW5nIHdlIGhhdmUgdG8gZGVjb2RlIGVudi5jb250ZW50IGZpcnN0XG4gICAgICAgIGVudi5jb250ZW50LnZhbHVlID0gZW52LmNvbnRlbnQudmFsdWVcbiAgICAgICAgICAucmVwbGFjZSgvJmx0Oy9nLCAnPCcpXG4gICAgICAgICAgLnJlcGxhY2UoLyZhbXA7L2csICcmJylcbiAgICAgICAgZW52LmNvbnRlbnQgPSBQcmlzbS5oaWdobGlnaHQoZW52LmNvbnRlbnQudmFsdWUsIHtcbiAgICAgICAgICBleHByZXNzaW9uOiB7XG4gICAgICAgICAgICBwYXR0ZXJuOiBwYXR0ZXJuLFxuICAgICAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgICAgIGluc2lkZTogUHJpc20ubGFuZ3VhZ2VzLmdyb292eVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgZW52LmNsYXNzZXMucHVzaChkZWxpbWl0ZXIgPT09ICcvJyA/ICdyZWdleCcgOiAnZ3N0cmluZycpXG4gICAgICB9XG4gICAgfVxuICB9KVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJncm9vdnkiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImxhbmd1YWdlcyIsImV4dGVuZCIsInN0cmluZyIsInBhdHRlcm4iLCJncmVlZHkiLCJrZXl3b3JkIiwibnVtYmVyIiwib3BlcmF0b3IiLCJsb29rYmVoaW5kIiwicHVuY3R1YXRpb24iLCJpbnNlcnRCZWZvcmUiLCJzaGViYW5nIiwiYWxpYXMiLCJhbm5vdGF0aW9uIiwiaG9va3MiLCJhZGQiLCJlbnYiLCJsYW5ndWFnZSIsInR5cGUiLCJkZWxpbWl0ZXIiLCJjb250ZW50IiwidmFsdWUiLCJyZXBsYWNlIiwiaGlnaGxpZ2h0IiwiZXhwcmVzc2lvbiIsImluc2lkZSIsImNsYXNzZXMiLCJwdXNoIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/groovy.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/haml.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/haml.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar refractorRuby = __webpack_require__(/*! ./ruby.js */ \"(ssr)/./node_modules/refractor/lang/ruby.js\");\nmodule.exports = haml;\nhaml.displayName = 'haml';\nhaml.aliases = [];\nfunction haml(Prism) {\n  Prism.register(refractorRuby)\n  /* TODO\n  Handle multiline code after tag\n  %foo= some |\n  multiline |\n  code |\n  */;\n  (function (Prism) {\n    Prism.languages.haml = {\n      // Multiline stuff should appear before the rest\n      'multiline-comment': {\n        pattern: /((?:^|\\r?\\n|\\r)([\\t ]*))(?:\\/|-#).*(?:(?:\\r?\\n|\\r)\\2[\\t ].+)*/,\n        lookbehind: true,\n        alias: 'comment'\n      },\n      'multiline-code': [{\n        pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*,[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ].*,[\\t ]*)*(?:(?:\\r?\\n|\\r)\\2[\\t ].+)/,\n        lookbehind: true,\n        inside: Prism.languages.ruby\n      }, {\n        pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*\\|[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ].*\\|[\\t ]*)*/,\n        lookbehind: true,\n        inside: Prism.languages.ruby\n      }],\n      // See at the end of the file for known filters\n      filter: {\n        pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)):[\\w-]+(?:(?:\\r?\\n|\\r)(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/,\n        lookbehind: true,\n        inside: {\n          'filter-name': {\n            pattern: /^:[\\w-]+/,\n            alias: 'symbol'\n          }\n        }\n      },\n      markup: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)<.+/,\n        lookbehind: true,\n        inside: Prism.languages.markup\n      },\n      doctype: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)!!!(?: .+)?/,\n        lookbehind: true\n      },\n      tag: {\n        // Allows for one nested group of braces\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)[%.#][\\w\\-#.]*[\\w\\-](?:\\([^)]+\\)|\\{(?:\\{[^}]+\\}|[^{}])+\\}|\\[[^\\]]+\\])*[\\/<>]*/,\n        lookbehind: true,\n        inside: {\n          attributes: [{\n            // Lookbehind tries to prevent interpolations from breaking it all\n            // Allows for one nested group of braces\n            pattern: /(^|[^#])\\{(?:\\{[^}]+\\}|[^{}])+\\}/,\n            lookbehind: true,\n            inside: Prism.languages.ruby\n          }, {\n            pattern: /\\([^)]+\\)/,\n            inside: {\n              'attr-value': {\n                pattern: /(=\\s*)(?:\"(?:\\\\.|[^\\\\\"\\r\\n])*\"|[^)\\s]+)/,\n                lookbehind: true\n              },\n              'attr-name': /[\\w:-]+(?=\\s*!?=|\\s*[,)])/,\n              punctuation: /[=(),]/\n            }\n          }, {\n            pattern: /\\[[^\\]]+\\]/,\n            inside: Prism.languages.ruby\n          }],\n          punctuation: /[<>]/\n        }\n      },\n      code: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*(?:[~-]|[&!]?=)).+/,\n        lookbehind: true,\n        inside: Prism.languages.ruby\n      },\n      // Interpolations in plain text\n      interpolation: {\n        pattern: /#\\{[^}]+\\}/,\n        inside: {\n          delimiter: {\n            pattern: /^#\\{|\\}$/,\n            alias: 'punctuation'\n          },\n          ruby: {\n            pattern: /[\\s\\S]+/,\n            inside: Prism.languages.ruby\n          }\n        }\n      },\n      punctuation: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)[~=\\-&!]+/,\n        lookbehind: true\n      }\n    };\n    var filter_pattern = '((?:^|\\\\r?\\\\n|\\\\r)([\\\\t ]*)):{{filter_name}}(?:(?:\\\\r?\\\\n|\\\\r)(?:\\\\2[\\\\t ].+|\\\\s*?(?=\\\\r?\\\\n|\\\\r)))+'; // Non exhaustive list of available filters and associated languages\n    var filters = ['css', {\n      filter: 'coffee',\n      language: 'coffeescript'\n    }, 'erb', 'javascript', 'less', 'markdown', 'ruby', 'scss', 'textile'];\n    var all_filters = {};\n    for (var i = 0, l = filters.length; i < l; i++) {\n      var filter = filters[i];\n      filter = typeof filter === 'string' ? {\n        filter: filter,\n        language: filter\n      } : filter;\n      if (Prism.languages[filter.language]) {\n        all_filters['filter-' + filter.filter] = {\n          pattern: RegExp(filter_pattern.replace('{{filter_name}}', function () {\n            return filter.filter;\n          })),\n          lookbehind: true,\n          inside: {\n            'filter-name': {\n              pattern: /^:[\\w-]+/,\n              alias: 'symbol'\n            },\n            text: {\n              pattern: /[\\s\\S]+/,\n              alias: [filter.language, 'language-' + filter.language],\n              inside: Prism.languages[filter.language]\n            }\n          }\n        };\n      }\n    }\n    Prism.languages.insertBefore('haml', 'filter', all_filters);\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/haml.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/handlebars.js":
/*!***************************************************!*\
  !*** ./node_modules/refractor/lang/handlebars.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar refractorMarkupTemplating = __webpack_require__(/*! ./markup-templating.js */ \"(ssr)/./node_modules/refractor/lang/markup-templating.js\");\nmodule.exports = handlebars;\nhandlebars.displayName = 'handlebars';\nhandlebars.aliases = ['hbs'];\nfunction handlebars(Prism) {\n  Prism.register(refractorMarkupTemplating);\n  (function (Prism) {\n    Prism.languages.handlebars = {\n      comment: /\\{\\{![\\s\\S]*?\\}\\}/,\n      delimiter: {\n        pattern: /^\\{\\{\\{?|\\}\\}\\}?$/,\n        alias: 'punctuation'\n      },\n      string: /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      number: /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,\n      \"boolean\": /\\b(?:false|true)\\b/,\n      block: {\n        pattern: /^(\\s*(?:~\\s*)?)[#\\/]\\S+?(?=\\s*(?:~\\s*)?$|\\s)/,\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      brackets: {\n        pattern: /\\[[^\\]]+\\]/,\n        inside: {\n          punctuation: /\\[|\\]/,\n          variable: /[\\s\\S]+/\n        }\n      },\n      punctuation: /[!\"#%&':()*+,.\\/;<=>@\\[\\\\\\]^`{|}~]/,\n      variable: /[^!\"#%&'()*+,\\/;<=>@\\[\\\\\\]^`{|}~\\s]+/\n    };\n    Prism.hooks.add('before-tokenize', function (env) {\n      var handlebarsPattern = /\\{\\{\\{[\\s\\S]+?\\}\\}\\}|\\{\\{[\\s\\S]+?\\}\\}/g;\n      Prism.languages['markup-templating'].buildPlaceholders(env, 'handlebars', handlebarsPattern);\n    });\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'handlebars');\n    });\n    Prism.languages.hbs = Prism.languages.handlebars;\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvaGFuZGxlYmFycy5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFDWixJQUFJQSx5QkFBeUIsR0FBR0MsbUJBQU8sQ0FBQyx3RkFBd0IsQ0FBQztBQUNqRUMsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLFVBQVU7QUFDM0JBLFVBQVUsQ0FBQ0MsV0FBVyxHQUFHLFlBQVk7QUFDckNELFVBQVUsQ0FBQ0UsT0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDO0FBQzVCLFNBQVNGLFVBQVVBLENBQUNHLEtBQUssRUFBRTtFQUN6QkEsS0FBSyxDQUFDQyxRQUFRLENBQUNSLHlCQUF5QixDQUFDO0VBQ3hDLENBQUMsVUFBVU8sS0FBSyxFQUFFO0lBQ2pCQSxLQUFLLENBQUNFLFNBQVMsQ0FBQ0wsVUFBVSxHQUFHO01BQzNCTSxPQUFPLEVBQUUsbUJBQW1CO01BQzVCQyxTQUFTLEVBQUU7UUFDVEMsT0FBTyxFQUFFLG1CQUFtQjtRQUM1QkMsS0FBSyxFQUFFO01BQ1QsQ0FBQztNQUNEQyxNQUFNLEVBQUUsa0NBQWtDO01BQzFDQyxNQUFNLEVBQUUsZ0VBQWdFO01BQ3hFLFdBQVMsb0JBQW9CO01BQzdCQyxLQUFLLEVBQUU7UUFDTEosT0FBTyxFQUFFLDhDQUE4QztRQUN2REssVUFBVSxFQUFFLElBQUk7UUFDaEJKLEtBQUssRUFBRTtNQUNULENBQUM7TUFDREssUUFBUSxFQUFFO1FBQ1JOLE9BQU8sRUFBRSxZQUFZO1FBQ3JCTyxNQUFNLEVBQUU7VUFDTkMsV0FBVyxFQUFFLE9BQU87VUFDcEJDLFFBQVEsRUFBRTtRQUNaO01BQ0YsQ0FBQztNQUNERCxXQUFXLEVBQUUsb0NBQW9DO01BQ2pEQyxRQUFRLEVBQUU7SUFDWixDQUFDO0lBQ0RkLEtBQUssQ0FBQ2UsS0FBSyxDQUFDQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsVUFBVUMsR0FBRyxFQUFFO01BQ2hELElBQUlDLGlCQUFpQixHQUFHLHdDQUF3QztNQUNoRWxCLEtBQUssQ0FBQ0UsU0FBUyxDQUFDLG1CQUFtQixDQUFDLENBQUNpQixpQkFBaUIsQ0FDcERGLEdBQUcsRUFDSCxZQUFZLEVBQ1pDLGlCQUNGLENBQUM7SUFDSCxDQUFDLENBQUM7SUFDRmxCLEtBQUssQ0FBQ2UsS0FBSyxDQUFDQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsVUFBVUMsR0FBRyxFQUFFO01BQy9DakIsS0FBSyxDQUFDRSxTQUFTLENBQUMsbUJBQW1CLENBQUMsQ0FBQ2tCLG9CQUFvQixDQUN2REgsR0FBRyxFQUNILFlBQ0YsQ0FBQztJQUNILENBQUMsQ0FBQztJQUNGakIsS0FBSyxDQUFDRSxTQUFTLENBQUNtQixHQUFHLEdBQUdyQixLQUFLLENBQUNFLFNBQVMsQ0FBQ0wsVUFBVTtFQUNsRCxDQUFDLEVBQUVHLEtBQUssQ0FBQztBQUNYIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcaGFuZGxlYmFycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcbnZhciByZWZyYWN0b3JNYXJrdXBUZW1wbGF0aW5nID0gcmVxdWlyZSgnLi9tYXJrdXAtdGVtcGxhdGluZy5qcycpXG5tb2R1bGUuZXhwb3J0cyA9IGhhbmRsZWJhcnNcbmhhbmRsZWJhcnMuZGlzcGxheU5hbWUgPSAnaGFuZGxlYmFycydcbmhhbmRsZWJhcnMuYWxpYXNlcyA9IFsnaGJzJ11cbmZ1bmN0aW9uIGhhbmRsZWJhcnMoUHJpc20pIHtcbiAgUHJpc20ucmVnaXN0ZXIocmVmcmFjdG9yTWFya3VwVGVtcGxhdGluZylcbiAgOyhmdW5jdGlvbiAoUHJpc20pIHtcbiAgICBQcmlzbS5sYW5ndWFnZXMuaGFuZGxlYmFycyA9IHtcbiAgICAgIGNvbW1lbnQ6IC9cXHtcXHshW1xcc1xcU10qP1xcfVxcfS8sXG4gICAgICBkZWxpbWl0ZXI6IHtcbiAgICAgICAgcGF0dGVybjogL15cXHtcXHtcXHs/fFxcfVxcfVxcfT8kLyxcbiAgICAgICAgYWxpYXM6ICdwdW5jdHVhdGlvbidcbiAgICAgIH0sXG4gICAgICBzdHJpbmc6IC8oW1wiJ10pKD86XFxcXC58KD8hXFwxKVteXFxcXFxcclxcbl0pKlxcMS8sXG4gICAgICBudW1iZXI6IC9cXGIweFtcXGRBLUZhLWZdK1xcYnwoPzpcXGJcXGQrKD86XFwuXFxkKik/fFxcQlxcLlxcZCspKD86W0VlXVsrLV0/XFxkKyk/LyxcbiAgICAgIGJvb2xlYW46IC9cXGIoPzpmYWxzZXx0cnVlKVxcYi8sXG4gICAgICBibG9jazoge1xuICAgICAgICBwYXR0ZXJuOiAvXihcXHMqKD86flxccyopPylbI1xcL11cXFMrPyg/PVxccyooPzp+XFxzKik/JHxcXHMpLyxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgYWxpYXM6ICdrZXl3b3JkJ1xuICAgICAgfSxcbiAgICAgIGJyYWNrZXRzOiB7XG4gICAgICAgIHBhdHRlcm46IC9cXFtbXlxcXV0rXFxdLyxcbiAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgcHVuY3R1YXRpb246IC9cXFt8XFxdLyxcbiAgICAgICAgICB2YXJpYWJsZTogL1tcXHNcXFNdKy9cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHB1bmN0dWF0aW9uOiAvWyFcIiMlJic6KCkqKywuXFwvOzw9PkBcXFtcXFxcXFxdXmB7fH1+XS8sXG4gICAgICB2YXJpYWJsZTogL1teIVwiIyUmJygpKissXFwvOzw9PkBcXFtcXFxcXFxdXmB7fH1+XFxzXSsvXG4gICAgfVxuICAgIFByaXNtLmhvb2tzLmFkZCgnYmVmb3JlLXRva2VuaXplJywgZnVuY3Rpb24gKGVudikge1xuICAgICAgdmFyIGhhbmRsZWJhcnNQYXR0ZXJuID0gL1xce1xce1xce1tcXHNcXFNdKz9cXH1cXH1cXH18XFx7XFx7W1xcc1xcU10rP1xcfVxcfS9nXG4gICAgICBQcmlzbS5sYW5ndWFnZXNbJ21hcmt1cC10ZW1wbGF0aW5nJ10uYnVpbGRQbGFjZWhvbGRlcnMoXG4gICAgICAgIGVudixcbiAgICAgICAgJ2hhbmRsZWJhcnMnLFxuICAgICAgICBoYW5kbGViYXJzUGF0dGVyblxuICAgICAgKVxuICAgIH0pXG4gICAgUHJpc20uaG9va3MuYWRkKCdhZnRlci10b2tlbml6ZScsIGZ1bmN0aW9uIChlbnYpIHtcbiAgICAgIFByaXNtLmxhbmd1YWdlc1snbWFya3VwLXRlbXBsYXRpbmcnXS50b2tlbml6ZVBsYWNlaG9sZGVycyhcbiAgICAgICAgZW52LFxuICAgICAgICAnaGFuZGxlYmFycydcbiAgICAgIClcbiAgICB9KVxuICAgIFByaXNtLmxhbmd1YWdlcy5oYnMgPSBQcmlzbS5sYW5ndWFnZXMuaGFuZGxlYmFyc1xuICB9KShQcmlzbSlcbn1cbiJdLCJuYW1lcyI6WyJyZWZyYWN0b3JNYXJrdXBUZW1wbGF0aW5nIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJoYW5kbGViYXJzIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJyZWdpc3RlciIsImxhbmd1YWdlcyIsImNvbW1lbnQiLCJkZWxpbWl0ZXIiLCJwYXR0ZXJuIiwiYWxpYXMiLCJzdHJpbmciLCJudW1iZXIiLCJibG9jayIsImxvb2tiZWhpbmQiLCJicmFja2V0cyIsImluc2lkZSIsInB1bmN0dWF0aW9uIiwidmFyaWFibGUiLCJob29rcyIsImFkZCIsImVudiIsImhhbmRsZWJhcnNQYXR0ZXJuIiwiYnVpbGRQbGFjZWhvbGRlcnMiLCJ0b2tlbml6ZVBsYWNlaG9sZGVycyIsImhicyJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/handlebars.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/haskell.js":
/*!************************************************!*\
  !*** ./node_modules/refractor/lang/haskell.js ***!
  \************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = haskell;\nhaskell.displayName = 'haskell';\nhaskell.aliases = ['hs'];\nfunction haskell(Prism) {\n  Prism.languages.haskell = {\n    comment: {\n      pattern: /(^|[^-!#$%*+=?&@|~.:<>^\\\\\\/])(?:--(?:(?=.)[^-!#$%*+=?&@|~.:<>^\\\\\\/].*|$)|\\{-[\\s\\S]*?-\\})/m,\n      lookbehind: true\n    },\n    \"char\": {\n      pattern: /'(?:[^\\\\']|\\\\(?:[abfnrtv\\\\\"'&]|\\^[A-Z@[\\]^_]|ACK|BEL|BS|CAN|CR|DC1|DC2|DC3|DC4|DEL|DLE|EM|ENQ|EOT|ESC|ETB|ETX|FF|FS|GS|HT|LF|NAK|NUL|RS|SI|SO|SOH|SP|STX|SUB|SYN|US|VT|\\d+|o[0-7]+|x[0-9a-fA-F]+))'/,\n      alias: 'string'\n    },\n    string: {\n      pattern: /\"(?:[^\\\\\"]|\\\\(?:\\S|\\s+\\\\))*\"/,\n      greedy: true\n    },\n    keyword: /\\b(?:case|class|data|deriving|do|else|if|in|infixl|infixr|instance|let|module|newtype|of|primitive|then|type|where)\\b/,\n    'import-statement': {\n      // The imported or hidden names are not included in this import\n      // statement. This is because we want to highlight those exactly like\n      // we do for the names in the program.\n      pattern: /(^[\\t ]*)import\\s+(?:qualified\\s+)?(?:[A-Z][\\w']*)(?:\\.[A-Z][\\w']*)*(?:\\s+as\\s+(?:[A-Z][\\w']*)(?:\\.[A-Z][\\w']*)*)?(?:\\s+hiding\\b)?/m,\n      lookbehind: true,\n      inside: {\n        keyword: /\\b(?:as|hiding|import|qualified)\\b/,\n        punctuation: /\\./\n      }\n    },\n    // These are builtin variables only. Constructors are highlighted later as a constant.\n    builtin: /\\b(?:abs|acos|acosh|all|and|any|appendFile|approxRational|asTypeOf|asin|asinh|atan|atan2|atanh|basicIORun|break|catch|ceiling|chr|compare|concat|concatMap|const|cos|cosh|curry|cycle|decodeFloat|denominator|digitToInt|div|divMod|drop|dropWhile|either|elem|encodeFloat|enumFrom|enumFromThen|enumFromThenTo|enumFromTo|error|even|exp|exponent|fail|filter|flip|floatDigits|floatRadix|floatRange|floor|fmap|foldl|foldl1|foldr|foldr1|fromDouble|fromEnum|fromInt|fromInteger|fromIntegral|fromRational|fst|gcd|getChar|getContents|getLine|group|head|id|inRange|index|init|intToDigit|interact|ioError|isAlpha|isAlphaNum|isAscii|isControl|isDenormalized|isDigit|isHexDigit|isIEEE|isInfinite|isLower|isNaN|isNegativeZero|isOctDigit|isPrint|isSpace|isUpper|iterate|last|lcm|length|lex|lexDigits|lexLitChar|lines|log|logBase|lookup|map|mapM|mapM_|max|maxBound|maximum|maybe|min|minBound|minimum|mod|negate|not|notElem|null|numerator|odd|or|ord|otherwise|pack|pi|pred|primExitWith|print|product|properFraction|putChar|putStr|putStrLn|quot|quotRem|range|rangeSize|read|readDec|readFile|readFloat|readHex|readIO|readInt|readList|readLitChar|readLn|readOct|readParen|readSigned|reads|readsPrec|realToFrac|recip|rem|repeat|replicate|return|reverse|round|scaleFloat|scanl|scanl1|scanr|scanr1|seq|sequence|sequence_|show|showChar|showInt|showList|showLitChar|showParen|showSigned|showString|shows|showsPrec|significand|signum|sin|sinh|snd|sort|span|splitAt|sqrt|subtract|succ|sum|tail|take|takeWhile|tan|tanh|threadToIOResult|toEnum|toInt|toInteger|toLower|toRational|toUpper|truncate|uncurry|undefined|unlines|until|unwords|unzip|unzip3|userError|words|writeFile|zip|zip3|zipWith|zipWith3)\\b/,\n    // decimal integers and floating point numbers | octal integers | hexadecimal integers\n    number: /\\b(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|0o[0-7]+|0x[0-9a-f]+)\\b/i,\n    operator: [{\n      // infix operator\n      pattern: /`(?:[A-Z][\\w']*\\.)*[_a-z][\\w']*`/,\n      greedy: true\n    }, {\n      // function composition\n      pattern: /(\\s)\\.(?=\\s)/,\n      lookbehind: true\n    },\n    // Most of this is needed because of the meaning of a single '.'.\n    // If it stands alone freely, it is the function composition.\n    // It may also be a separator between a module name and an identifier => no\n    // operator. If it comes together with other special characters it is an\n    // operator too.\n    //\n    // This regex means: /[-!#$%*+=?&@|~.:<>^\\\\\\/]+/ without /\\./.\n    /[-!#$%*+=?&@|~:<>^\\\\\\/][-!#$%*+=?&@|~.:<>^\\\\\\/]*|\\.[-!#$%*+=?&@|~.:<>^\\\\\\/]+/],\n    // In Haskell, nearly everything is a variable, do not highlight these.\n    hvariable: {\n      pattern: /\\b(?:[A-Z][\\w']*\\.)*[_a-z][\\w']*/,\n      inside: {\n        punctuation: /\\./\n      }\n    },\n    constant: {\n      pattern: /\\b(?:[A-Z][\\w']*\\.)*[A-Z][\\w']*/,\n      inside: {\n        punctuation: /\\./\n      }\n    },\n    punctuation: /[{}[\\];(),.:]/\n  };\n  Prism.languages.hs = Prism.languages.haskell;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/haskell.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/haxe.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/haxe.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = haxe;\nhaxe.displayName = 'haxe';\nhaxe.aliases = [];\nfunction haxe(Prism) {\n  Prism.languages.haxe = Prism.languages.extend('clike', {\n    string: {\n      // Strings can be multi-line\n      pattern: /\"(?:[^\"\\\\]|\\\\[\\s\\S])*\"/,\n      greedy: true\n    },\n    'class-name': [{\n      pattern: /(\\b(?:abstract|class|enum|extends|implements|interface|new|typedef)\\s+)[A-Z_]\\w*/,\n      lookbehind: true\n    },\n    // based on naming convention\n    /\\b[A-Z]\\w*/],\n    // The final look-ahead prevents highlighting of keywords if expressions such as \"haxe.macro.Expr\"\n    keyword: /\\bthis\\b|\\b(?:abstract|as|break|case|cast|catch|class|continue|default|do|dynamic|else|enum|extends|extern|final|for|from|function|if|implements|import|in|inline|interface|macro|new|null|operator|overload|override|package|private|public|return|static|super|switch|throw|to|try|typedef|untyped|using|var|while)(?!\\.)\\b/,\n    \"function\": {\n      pattern: /\\b[a-z_]\\w*(?=\\s*(?:<[^<>]*>\\s*)?\\()/i,\n      greedy: true\n    },\n    operator: /\\.{3}|\\+\\+|--|&&|\\|\\||->|=>|(?:<<?|>{1,3}|[-+*/%!=&|^])=?|[?:~]/\n  });\n  Prism.languages.insertBefore('haxe', 'string', {\n    'string-interpolation': {\n      pattern: /'(?:[^'\\\\]|\\\\[\\s\\S])*'/,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /(^|[^\\\\])\\$(?:\\w+|\\{[^{}]+\\})/,\n          lookbehind: true,\n          inside: {\n            'interpolation-punctuation': {\n              pattern: /^\\$\\{?|\\}$/,\n              alias: 'punctuation'\n            },\n            expression: {\n              pattern: /[\\s\\S]+/,\n              inside: Prism.languages.haxe\n            }\n          }\n        },\n        string: /[\\s\\S]+/\n      }\n    }\n  });\n  Prism.languages.insertBefore('haxe', 'class-name', {\n    regex: {\n      pattern: /~\\/(?:[^\\/\\\\\\r\\n]|\\\\.)+\\/[a-z]*/,\n      greedy: true,\n      inside: {\n        'regex-flags': /\\b[a-z]+$/,\n        'regex-source': {\n          pattern: /^(~\\/)[\\s\\S]+(?=\\/$)/,\n          lookbehind: true,\n          alias: 'language-regex',\n          inside: Prism.languages.regex\n        },\n        'regex-delimiter': /^~\\/|\\/$/\n      }\n    }\n  });\n  Prism.languages.insertBefore('haxe', 'keyword', {\n    preprocessor: {\n      pattern: /#(?:else|elseif|end|if)\\b.*/,\n      alias: 'property'\n    },\n    metadata: {\n      pattern: /@:?[\\w.]+/,\n      alias: 'symbol'\n    },\n    reification: {\n      pattern: /\\$(?:\\w+|(?=\\{))/,\n      alias: 'important'\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvaGF4ZS5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLElBQUk7QUFDckJBLElBQUksQ0FBQ0MsV0FBVyxHQUFHLE1BQU07QUFDekJELElBQUksQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDakIsU0FBU0YsSUFBSUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ25CQSxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osSUFBSSxHQUFHRyxLQUFLLENBQUNDLFNBQVMsQ0FBQ0MsTUFBTSxDQUFDLE9BQU8sRUFBRTtJQUNyREMsTUFBTSxFQUFFO01BQ047TUFDQUMsT0FBTyxFQUFFLHdCQUF3QjtNQUNqQ0MsTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUNELFlBQVksRUFBRSxDQUNaO01BQ0VELE9BQU8sRUFDTCxrRkFBa0Y7TUFDcEZFLFVBQVUsRUFBRTtJQUNkLENBQUM7SUFBRTtJQUNILFlBQVksQ0FDYjtJQUNEO0lBQ0FDLE9BQU8sRUFDTCwrVEFBK1Q7SUFDalUsWUFBVTtNQUNSSCxPQUFPLEVBQUUsdUNBQXVDO01BQ2hEQyxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0RHLFFBQVEsRUFBRTtFQUNaLENBQUMsQ0FBQztFQUNGUixLQUFLLENBQUNDLFNBQVMsQ0FBQ1EsWUFBWSxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUU7SUFDN0Msc0JBQXNCLEVBQUU7TUFDdEJMLE9BQU8sRUFBRSx3QkFBd0I7TUFDakNDLE1BQU0sRUFBRSxJQUFJO01BQ1pLLE1BQU0sRUFBRTtRQUNOQyxhQUFhLEVBQUU7VUFDYlAsT0FBTyxFQUFFLCtCQUErQjtVQUN4Q0UsVUFBVSxFQUFFLElBQUk7VUFDaEJJLE1BQU0sRUFBRTtZQUNOLDJCQUEyQixFQUFFO2NBQzNCTixPQUFPLEVBQUUsWUFBWTtjQUNyQlEsS0FBSyxFQUFFO1lBQ1QsQ0FBQztZQUNEQyxVQUFVLEVBQUU7Y0FDVlQsT0FBTyxFQUFFLFNBQVM7Y0FDbEJNLE1BQU0sRUFBRVYsS0FBSyxDQUFDQyxTQUFTLENBQUNKO1lBQzFCO1VBQ0Y7UUFDRixDQUFDO1FBQ0RNLE1BQU0sRUFBRTtNQUNWO0lBQ0Y7RUFDRixDQUFDLENBQUM7RUFDRkgsS0FBSyxDQUFDQyxTQUFTLENBQUNRLFlBQVksQ0FBQyxNQUFNLEVBQUUsWUFBWSxFQUFFO0lBQ2pESyxLQUFLLEVBQUU7TUFDTFYsT0FBTyxFQUFFLGlDQUFpQztNQUMxQ0MsTUFBTSxFQUFFLElBQUk7TUFDWkssTUFBTSxFQUFFO1FBQ04sYUFBYSxFQUFFLFdBQVc7UUFDMUIsY0FBYyxFQUFFO1VBQ2ROLE9BQU8sRUFBRSxzQkFBc0I7VUFDL0JFLFVBQVUsRUFBRSxJQUFJO1VBQ2hCTSxLQUFLLEVBQUUsZ0JBQWdCO1VBQ3ZCRixNQUFNLEVBQUVWLEtBQUssQ0FBQ0MsU0FBUyxDQUFDYTtRQUMxQixDQUFDO1FBQ0QsaUJBQWlCLEVBQUU7TUFDckI7SUFDRjtFQUNGLENBQUMsQ0FBQztFQUNGZCxLQUFLLENBQUNDLFNBQVMsQ0FBQ1EsWUFBWSxDQUFDLE1BQU0sRUFBRSxTQUFTLEVBQUU7SUFDOUNNLFlBQVksRUFBRTtNQUNaWCxPQUFPLEVBQUUsNkJBQTZCO01BQ3RDUSxLQUFLLEVBQUU7SUFDVCxDQUFDO0lBQ0RJLFFBQVEsRUFBRTtNQUNSWixPQUFPLEVBQUUsV0FBVztNQUNwQlEsS0FBSyxFQUFFO0lBQ1QsQ0FBQztJQUNESyxXQUFXLEVBQUU7TUFDWGIsT0FBTyxFQUFFLGtCQUFrQjtNQUMzQlEsS0FBSyxFQUFFO0lBQ1Q7RUFDRixDQUFDLENBQUM7QUFDSiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXGhheGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gaGF4ZVxuaGF4ZS5kaXNwbGF5TmFtZSA9ICdoYXhlJ1xuaGF4ZS5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIGhheGUoUHJpc20pIHtcbiAgUHJpc20ubGFuZ3VhZ2VzLmhheGUgPSBQcmlzbS5sYW5ndWFnZXMuZXh0ZW5kKCdjbGlrZScsIHtcbiAgICBzdHJpbmc6IHtcbiAgICAgIC8vIFN0cmluZ3MgY2FuIGJlIG11bHRpLWxpbmVcbiAgICAgIHBhdHRlcm46IC9cIig/OlteXCJcXFxcXXxcXFxcW1xcc1xcU10pKlwiLyxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgJ2NsYXNzLW5hbWUnOiBbXG4gICAgICB7XG4gICAgICAgIHBhdHRlcm46XG4gICAgICAgICAgLyhcXGIoPzphYnN0cmFjdHxjbGFzc3xlbnVtfGV4dGVuZHN8aW1wbGVtZW50c3xpbnRlcmZhY2V8bmV3fHR5cGVkZWYpXFxzKylbQS1aX11cXHcqLyxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgfSwgLy8gYmFzZWQgb24gbmFtaW5nIGNvbnZlbnRpb25cbiAgICAgIC9cXGJbQS1aXVxcdyovXG4gICAgXSxcbiAgICAvLyBUaGUgZmluYWwgbG9vay1haGVhZCBwcmV2ZW50cyBoaWdobGlnaHRpbmcgb2Yga2V5d29yZHMgaWYgZXhwcmVzc2lvbnMgc3VjaCBhcyBcImhheGUubWFjcm8uRXhwclwiXG4gICAga2V5d29yZDpcbiAgICAgIC9cXGJ0aGlzXFxifFxcYig/OmFic3RyYWN0fGFzfGJyZWFrfGNhc2V8Y2FzdHxjYXRjaHxjbGFzc3xjb250aW51ZXxkZWZhdWx0fGRvfGR5bmFtaWN8ZWxzZXxlbnVtfGV4dGVuZHN8ZXh0ZXJufGZpbmFsfGZvcnxmcm9tfGZ1bmN0aW9ufGlmfGltcGxlbWVudHN8aW1wb3J0fGlufGlubGluZXxpbnRlcmZhY2V8bWFjcm98bmV3fG51bGx8b3BlcmF0b3J8b3ZlcmxvYWR8b3ZlcnJpZGV8cGFja2FnZXxwcml2YXRlfHB1YmxpY3xyZXR1cm58c3RhdGljfHN1cGVyfHN3aXRjaHx0aHJvd3x0b3x0cnl8dHlwZWRlZnx1bnR5cGVkfHVzaW5nfHZhcnx3aGlsZSkoPyFcXC4pXFxiLyxcbiAgICBmdW5jdGlvbjoge1xuICAgICAgcGF0dGVybjogL1xcYlthLXpfXVxcdyooPz1cXHMqKD86PFtePD5dKj5cXHMqKT9cXCgpL2ksXG4gICAgICBncmVlZHk6IHRydWVcbiAgICB9LFxuICAgIG9wZXJhdG9yOiAvXFwuezN9fFxcK1xcK3wtLXwmJnxcXHxcXHx8LT58PT58KD86PDw/fD57MSwzfXxbLSsqLyUhPSZ8Xl0pPT98Wz86fl0vXG4gIH0pXG4gIFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ2hheGUnLCAnc3RyaW5nJywge1xuICAgICdzdHJpbmctaW50ZXJwb2xhdGlvbic6IHtcbiAgICAgIHBhdHRlcm46IC8nKD86W14nXFxcXF18XFxcXFtcXHNcXFNdKSonLyxcbiAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgIGluc2lkZToge1xuICAgICAgICBpbnRlcnBvbGF0aW9uOiB7XG4gICAgICAgICAgcGF0dGVybjogLyhefFteXFxcXF0pXFwkKD86XFx3K3xcXHtbXnt9XStcXH0pLyxcbiAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAgIGluc2lkZToge1xuICAgICAgICAgICAgJ2ludGVycG9sYXRpb24tcHVuY3R1YXRpb24nOiB7XG4gICAgICAgICAgICAgIHBhdHRlcm46IC9eXFwkXFx7P3xcXH0kLyxcbiAgICAgICAgICAgICAgYWxpYXM6ICdwdW5jdHVhdGlvbidcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBleHByZXNzaW9uOiB7XG4gICAgICAgICAgICAgIHBhdHRlcm46IC9bXFxzXFxTXSsvLFxuICAgICAgICAgICAgICBpbnNpZGU6IFByaXNtLmxhbmd1YWdlcy5oYXhlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzdHJpbmc6IC9bXFxzXFxTXSsvXG4gICAgICB9XG4gICAgfVxuICB9KVxuICBQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdoYXhlJywgJ2NsYXNzLW5hbWUnLCB7XG4gICAgcmVnZXg6IHtcbiAgICAgIHBhdHRlcm46IC9+XFwvKD86W15cXC9cXFxcXFxyXFxuXXxcXFxcLikrXFwvW2Etel0qLyxcbiAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgIGluc2lkZToge1xuICAgICAgICAncmVnZXgtZmxhZ3MnOiAvXFxiW2Etel0rJC8sXG4gICAgICAgICdyZWdleC1zb3VyY2UnOiB7XG4gICAgICAgICAgcGF0dGVybjogL14oflxcLylbXFxzXFxTXSsoPz1cXC8kKS8sXG4gICAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgICBhbGlhczogJ2xhbmd1YWdlLXJlZ2V4JyxcbiAgICAgICAgICBpbnNpZGU6IFByaXNtLmxhbmd1YWdlcy5yZWdleFxuICAgICAgICB9LFxuICAgICAgICAncmVnZXgtZGVsaW1pdGVyJzogL15+XFwvfFxcLyQvXG4gICAgICB9XG4gICAgfVxuICB9KVxuICBQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdoYXhlJywgJ2tleXdvcmQnLCB7XG4gICAgcHJlcHJvY2Vzc29yOiB7XG4gICAgICBwYXR0ZXJuOiAvIyg/OmVsc2V8ZWxzZWlmfGVuZHxpZilcXGIuKi8sXG4gICAgICBhbGlhczogJ3Byb3BlcnR5J1xuICAgIH0sXG4gICAgbWV0YWRhdGE6IHtcbiAgICAgIHBhdHRlcm46IC9AOj9bXFx3Ll0rLyxcbiAgICAgIGFsaWFzOiAnc3ltYm9sJ1xuICAgIH0sXG4gICAgcmVpZmljYXRpb246IHtcbiAgICAgIHBhdHRlcm46IC9cXCQoPzpcXHcrfCg/PVxceykpLyxcbiAgICAgIGFsaWFzOiAnaW1wb3J0YW50J1xuICAgIH1cbiAgfSlcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiaGF4ZSIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwiZXh0ZW5kIiwic3RyaW5nIiwicGF0dGVybiIsImdyZWVkeSIsImxvb2tiZWhpbmQiLCJrZXl3b3JkIiwib3BlcmF0b3IiLCJpbnNlcnRCZWZvcmUiLCJpbnNpZGUiLCJpbnRlcnBvbGF0aW9uIiwiYWxpYXMiLCJleHByZXNzaW9uIiwicmVnZXgiLCJwcmVwcm9jZXNzb3IiLCJtZXRhZGF0YSIsInJlaWZpY2F0aW9uIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/haxe.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/hcl.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/hcl.js ***!
  \********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = hcl;\nhcl.displayName = 'hcl';\nhcl.aliases = [];\nfunction hcl(Prism) {\n  Prism.languages.hcl = {\n    comment: /(?:\\/\\/|#).*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    heredoc: {\n      pattern: /<<-?(\\w+\\b)[\\s\\S]*?^[ \\t]*\\1/m,\n      greedy: true,\n      alias: 'string'\n    },\n    keyword: [{\n      pattern: /(?:data|resource)\\s+(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")(?=\\s+\"[\\w-]+\"\\s+\\{)/i,\n      inside: {\n        type: {\n          pattern: /(resource|data|\\s+)(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")/i,\n          lookbehind: true,\n          alias: 'variable'\n        }\n      }\n    }, {\n      pattern: /(?:backend|module|output|provider|provisioner|variable)\\s+(?:[\\w-]+|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")\\s+(?=\\{)/i,\n      inside: {\n        type: {\n          pattern: /(backend|module|output|provider|provisioner|variable)\\s+(?:[\\w-]+|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")\\s+/i,\n          lookbehind: true,\n          alias: 'variable'\n        }\n      }\n    }, /[\\w-]+(?=\\s+\\{)/],\n    property: [/[-\\w\\.]+(?=\\s*=(?!=))/, /\"(?:\\\\[\\s\\S]|[^\\\\\"])+\"(?=\\s*[:=])/],\n    string: {\n      pattern: /\"(?:[^\\\\$\"]|\\\\[\\s\\S]|\\$(?:(?=\")|\\$+(?!\\$)|[^\"${])|\\$\\{(?:[^{}\"]|\"(?:[^\\\\\"]|\\\\[\\s\\S])*\")*\\})*\"/,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /(^|[^$])\\$\\{(?:[^{}\"]|\"(?:[^\\\\\"]|\\\\[\\s\\S])*\")*\\}/,\n          lookbehind: true,\n          inside: {\n            type: {\n              pattern: /(\\b(?:count|data|local|module|path|self|terraform|var)\\b\\.)[\\w\\*]+/i,\n              lookbehind: true,\n              alias: 'variable'\n            },\n            keyword: /\\b(?:count|data|local|module|path|self|terraform|var)\\b/i,\n            \"function\": /\\w+(?=\\()/,\n            string: {\n              pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n              greedy: true\n            },\n            number: /\\b0x[\\da-f]+\\b|\\b\\d+(?:\\.\\d*)?(?:e[+-]?\\d+)?/i,\n            punctuation: /[!\\$#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~?:]/\n          }\n        }\n      }\n    },\n    number: /\\b0x[\\da-f]+\\b|\\b\\d+(?:\\.\\d*)?(?:e[+-]?\\d+)?/i,\n    \"boolean\": /\\b(?:false|true)\\b/i,\n    punctuation: /[=\\[\\]{}]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvaGNsLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsR0FBRztBQUNwQkEsR0FBRyxDQUFDQyxXQUFXLEdBQUcsS0FBSztBQUN2QkQsR0FBRyxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNoQixTQUFTRixHQUFHQSxDQUFDRyxLQUFLLEVBQUU7RUFDbEJBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixHQUFHLEdBQUc7SUFDcEJLLE9BQU8sRUFBRSxxQ0FBcUM7SUFDOUNDLE9BQU8sRUFBRTtNQUNQQyxPQUFPLEVBQUUsK0JBQStCO01BQ3hDQyxNQUFNLEVBQUUsSUFBSTtNQUNaQyxLQUFLLEVBQUU7SUFDVCxDQUFDO0lBQ0RDLE9BQU8sRUFBRSxDQUNQO01BQ0VILE9BQU8sRUFDTCxxRUFBcUU7TUFDdkVJLE1BQU0sRUFBRTtRQUNOQyxJQUFJLEVBQUU7VUFDSkwsT0FBTyxFQUFFLGdEQUFnRDtVQUN6RE0sVUFBVSxFQUFFLElBQUk7VUFDaEJKLEtBQUssRUFBRTtRQUNUO01BQ0Y7SUFDRixDQUFDLEVBQ0Q7TUFDRUYsT0FBTyxFQUNMLHVHQUF1RztNQUN6R0ksTUFBTSxFQUFFO1FBQ05DLElBQUksRUFBRTtVQUNKTCxPQUFPLEVBQ0wsK0ZBQStGO1VBQ2pHTSxVQUFVLEVBQUUsSUFBSTtVQUNoQkosS0FBSyxFQUFFO1FBQ1Q7TUFDRjtJQUNGLENBQUMsRUFDRCxpQkFBaUIsQ0FDbEI7SUFDREssUUFBUSxFQUFFLENBQUMsdUJBQXVCLEVBQUUsbUNBQW1DLENBQUM7SUFDeEVDLE1BQU0sRUFBRTtNQUNOUixPQUFPLEVBQ0wsK0ZBQStGO01BQ2pHQyxNQUFNLEVBQUUsSUFBSTtNQUNaRyxNQUFNLEVBQUU7UUFDTkssYUFBYSxFQUFFO1VBQ2JULE9BQU8sRUFBRSxrREFBa0Q7VUFDM0RNLFVBQVUsRUFBRSxJQUFJO1VBQ2hCRixNQUFNLEVBQUU7WUFDTkMsSUFBSSxFQUFFO2NBQ0pMLE9BQU8sRUFDTCxxRUFBcUU7Y0FDdkVNLFVBQVUsRUFBRSxJQUFJO2NBQ2hCSixLQUFLLEVBQUU7WUFDVCxDQUFDO1lBQ0RDLE9BQU8sRUFBRSwwREFBMEQ7WUFDbkUsWUFBVSxXQUFXO1lBQ3JCSyxNQUFNLEVBQUU7Y0FDTlIsT0FBTyxFQUFFLHdCQUF3QjtjQUNqQ0MsTUFBTSxFQUFFO1lBQ1YsQ0FBQztZQUNEUyxNQUFNLEVBQUUsK0NBQStDO1lBQ3ZEQyxXQUFXLEVBQUU7VUFDZjtRQUNGO01BQ0Y7SUFDRixDQUFDO0lBQ0RELE1BQU0sRUFBRSwrQ0FBK0M7SUFDdkQsV0FBUyxxQkFBcUI7SUFDOUJDLFdBQVcsRUFBRTtFQUNmLENBQUM7QUFDSCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXGhjbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBoY2xcbmhjbC5kaXNwbGF5TmFtZSA9ICdoY2wnXG5oY2wuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBoY2woUHJpc20pIHtcbiAgUHJpc20ubGFuZ3VhZ2VzLmhjbCA9IHtcbiAgICBjb21tZW50OiAvKD86XFwvXFwvfCMpLip8XFwvXFwqW1xcc1xcU10qPyg/OlxcKlxcL3wkKS8sXG4gICAgaGVyZWRvYzoge1xuICAgICAgcGF0dGVybjogLzw8LT8oXFx3K1xcYilbXFxzXFxTXSo/XlsgXFx0XSpcXDEvbSxcbiAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgIGFsaWFzOiAnc3RyaW5nJ1xuICAgIH0sXG4gICAga2V5d29yZDogW1xuICAgICAge1xuICAgICAgICBwYXR0ZXJuOlxuICAgICAgICAgIC8oPzpkYXRhfHJlc291cmNlKVxccysoPzpcIig/OlxcXFxbXFxzXFxTXXxbXlxcXFxcIl0pKlwiKSg/PVxccytcIltcXHctXStcIlxccytcXHspL2ksXG4gICAgICAgIGluc2lkZToge1xuICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgIHBhdHRlcm46IC8ocmVzb3VyY2V8ZGF0YXxcXHMrKSg/OlwiKD86XFxcXFtcXHNcXFNdfFteXFxcXFwiXSkqXCIpL2ksXG4gICAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAgICAgYWxpYXM6ICd2YXJpYWJsZSdcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHBhdHRlcm46XG4gICAgICAgICAgLyg/OmJhY2tlbmR8bW9kdWxlfG91dHB1dHxwcm92aWRlcnxwcm92aXNpb25lcnx2YXJpYWJsZSlcXHMrKD86W1xcdy1dK3xcIig/OlxcXFxbXFxzXFxTXXxbXlxcXFxcIl0pKlwiKVxccysoPz1cXHspL2ksXG4gICAgICAgIGluc2lkZToge1xuICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgIHBhdHRlcm46XG4gICAgICAgICAgICAgIC8oYmFja2VuZHxtb2R1bGV8b3V0cHV0fHByb3ZpZGVyfHByb3Zpc2lvbmVyfHZhcmlhYmxlKVxccysoPzpbXFx3LV0rfFwiKD86XFxcXFtcXHNcXFNdfFteXFxcXFwiXSkqXCIpXFxzKy9pLFxuICAgICAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgICAgIGFsaWFzOiAndmFyaWFibGUnXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgL1tcXHctXSsoPz1cXHMrXFx7KS9cbiAgICBdLFxuICAgIHByb3BlcnR5OiBbL1stXFx3XFwuXSsoPz1cXHMqPSg/IT0pKS8sIC9cIig/OlxcXFxbXFxzXFxTXXxbXlxcXFxcIl0pK1wiKD89XFxzKls6PV0pL10sXG4gICAgc3RyaW5nOiB7XG4gICAgICBwYXR0ZXJuOlxuICAgICAgICAvXCIoPzpbXlxcXFwkXCJdfFxcXFxbXFxzXFxTXXxcXCQoPzooPz1cIil8XFwkKyg/IVxcJCl8W15cIiR7XSl8XFwkXFx7KD86W157fVwiXXxcIig/OlteXFxcXFwiXXxcXFxcW1xcc1xcU10pKlwiKSpcXH0pKlwiLyxcbiAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgIGluc2lkZToge1xuICAgICAgICBpbnRlcnBvbGF0aW9uOiB7XG4gICAgICAgICAgcGF0dGVybjogLyhefFteJF0pXFwkXFx7KD86W157fVwiXXxcIig/OlteXFxcXFwiXXxcXFxcW1xcc1xcU10pKlwiKSpcXH0vLFxuICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgIHBhdHRlcm46XG4gICAgICAgICAgICAgICAgLyhcXGIoPzpjb3VudHxkYXRhfGxvY2FsfG1vZHVsZXxwYXRofHNlbGZ8dGVycmFmb3JtfHZhcilcXGJcXC4pW1xcd1xcKl0rL2ksXG4gICAgICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgICAgICAgIGFsaWFzOiAndmFyaWFibGUnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAga2V5d29yZDogL1xcYig/OmNvdW50fGRhdGF8bG9jYWx8bW9kdWxlfHBhdGh8c2VsZnx0ZXJyYWZvcm18dmFyKVxcYi9pLFxuICAgICAgICAgICAgZnVuY3Rpb246IC9cXHcrKD89XFwoKS8sXG4gICAgICAgICAgICBzdHJpbmc6IHtcbiAgICAgICAgICAgICAgcGF0dGVybjogL1wiKD86XFxcXFtcXHNcXFNdfFteXFxcXFwiXSkqXCIvLFxuICAgICAgICAgICAgICBncmVlZHk6IHRydWVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBudW1iZXI6IC9cXGIweFtcXGRhLWZdK1xcYnxcXGJcXGQrKD86XFwuXFxkKik/KD86ZVsrLV0/XFxkKyk/L2ksXG4gICAgICAgICAgICBwdW5jdHVhdGlvbjogL1shXFwkIyUmJygpKissLlxcLzs8PT5AXFxbXFxcXFxcXV5ge3x9fj86XS9cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIG51bWJlcjogL1xcYjB4W1xcZGEtZl0rXFxifFxcYlxcZCsoPzpcXC5cXGQqKT8oPzplWystXT9cXGQrKT8vaSxcbiAgICBib29sZWFuOiAvXFxiKD86ZmFsc2V8dHJ1ZSlcXGIvaSxcbiAgICBwdW5jdHVhdGlvbjogL1s9XFxbXFxde31dL1xuICB9XG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImhjbCIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwiY29tbWVudCIsImhlcmVkb2MiLCJwYXR0ZXJuIiwiZ3JlZWR5IiwiYWxpYXMiLCJrZXl3b3JkIiwiaW5zaWRlIiwidHlwZSIsImxvb2tiZWhpbmQiLCJwcm9wZXJ0eSIsInN0cmluZyIsImludGVycG9sYXRpb24iLCJudW1iZXIiLCJwdW5jdHVhdGlvbiJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/hcl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/hlsl.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/hlsl.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar refractorC = __webpack_require__(/*! ./c.js */ \"(ssr)/./node_modules/refractor/lang/c.js\");\nmodule.exports = hlsl;\nhlsl.displayName = 'hlsl';\nhlsl.aliases = [];\nfunction hlsl(Prism) {\n  Prism.register(refractorC);\n  Prism.languages.hlsl = Prism.languages.extend('c', {\n    // Regarding keywords and class names:\n    // The list of all keywords was split into 'keyword' and 'class-name' tokens based on whether they are capitalized.\n    // https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-appendix-keywords\n    // https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-appendix-reserved-words\n    'class-name': [Prism.languages.c['class-name'], /\\b(?:AppendStructuredBuffer|BlendState|Buffer|ByteAddressBuffer|CompileShader|ComputeShader|ConsumeStructuredBuffer|DepthStencilState|DepthStencilView|DomainShader|GeometryShader|Hullshader|InputPatch|LineStream|OutputPatch|PixelShader|PointStream|RWBuffer|RWByteAddressBuffer|RWStructuredBuffer|RWTexture(?:1D|1DArray|2D|2DArray|3D)|RasterizerState|RenderTargetView|SamplerComparisonState|SamplerState|StructuredBuffer|Texture(?:1D|1DArray|2D|2DArray|2DMS|2DMSArray|3D|Cube|CubeArray)|TriangleStream|VertexShader)\\b/],\n    keyword: [\n    // HLSL keyword\n    /\\b(?:asm|asm_fragment|auto|break|case|catch|cbuffer|centroid|char|class|column_major|compile|compile_fragment|const|const_cast|continue|default|delete|discard|do|dynamic_cast|else|enum|explicit|export|extern|for|friend|fxgroup|goto|groupshared|if|in|inline|inout|interface|line|lineadj|linear|long|matrix|mutable|namespace|new|nointerpolation|noperspective|operator|out|packoffset|pass|pixelfragment|point|precise|private|protected|public|register|reinterpret_cast|return|row_major|sample|sampler|shared|short|signed|sizeof|snorm|stateblock|stateblock_state|static|static_cast|string|struct|switch|tbuffer|technique|technique10|technique11|template|texture|this|throw|triangle|triangleadj|try|typedef|typename|uniform|union|unorm|unsigned|using|vector|vertexfragment|virtual|void|volatile|while)\\b/,\n    // scalar, vector, and matrix types\n    /\\b(?:bool|double|dword|float|half|int|min(?:10float|12int|16(?:float|int|uint))|uint)(?:[1-4](?:x[1-4])?)?\\b/],\n    // https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-appendix-grammar#floating-point-numbers\n    number: /(?:(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[eE][+-]?\\d+)?|\\b0x[\\da-fA-F]+)[fFhHlLuU]?\\b/,\n    \"boolean\": /\\b(?:false|true)\\b/\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvaGxzbC5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFDWixJQUFJQSxVQUFVLEdBQUdDLG1CQUFPLENBQUMsd0RBQVEsQ0FBQztBQUNsQ0MsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLElBQUk7QUFDckJBLElBQUksQ0FBQ0MsV0FBVyxHQUFHLE1BQU07QUFDekJELElBQUksQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDakIsU0FBU0YsSUFBSUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ25CQSxLQUFLLENBQUNDLFFBQVEsQ0FBQ1IsVUFBVSxDQUFDO0VBQzFCTyxLQUFLLENBQUNFLFNBQVMsQ0FBQ0wsSUFBSSxHQUFHRyxLQUFLLENBQUNFLFNBQVMsQ0FBQ0MsTUFBTSxDQUFDLEdBQUcsRUFBRTtJQUNqRDtJQUNBO0lBQ0E7SUFDQTtJQUNBLFlBQVksRUFBRSxDQUNaSCxLQUFLLENBQUNFLFNBQVMsQ0FBQ0UsQ0FBQyxDQUFDLFlBQVksQ0FBQyxFQUMvQixzZ0JBQXNnQixDQUN2Z0I7SUFDREMsT0FBTyxFQUFFO0lBQ1A7SUFDQSwreEJBQSt4QjtJQUFFO0lBQ2p5Qiw4R0FBOEcsQ0FDL0c7SUFDRDtJQUNBQyxNQUFNLEVBQ0osK0VBQStFO0lBQ2pGLFdBQVM7RUFDWCxDQUFDLENBQUM7QUFDSiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXGhsc2wuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG52YXIgcmVmcmFjdG9yQyA9IHJlcXVpcmUoJy4vYy5qcycpXG5tb2R1bGUuZXhwb3J0cyA9IGhsc2xcbmhsc2wuZGlzcGxheU5hbWUgPSAnaGxzbCdcbmhsc2wuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBobHNsKFByaXNtKSB7XG4gIFByaXNtLnJlZ2lzdGVyKHJlZnJhY3RvckMpXG4gIFByaXNtLmxhbmd1YWdlcy5obHNsID0gUHJpc20ubGFuZ3VhZ2VzLmV4dGVuZCgnYycsIHtcbiAgICAvLyBSZWdhcmRpbmcga2V5d29yZHMgYW5kIGNsYXNzIG5hbWVzOlxuICAgIC8vIFRoZSBsaXN0IG9mIGFsbCBrZXl3b3JkcyB3YXMgc3BsaXQgaW50byAna2V5d29yZCcgYW5kICdjbGFzcy1uYW1lJyB0b2tlbnMgYmFzZWQgb24gd2hldGhlciB0aGV5IGFyZSBjYXBpdGFsaXplZC5cbiAgICAvLyBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy93aW5kb3dzL3dpbjMyL2RpcmVjdDNkaGxzbC9keC1ncmFwaGljcy1obHNsLWFwcGVuZGl4LWtleXdvcmRzXG4gICAgLy8gaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvd2luZG93cy93aW4zMi9kaXJlY3QzZGhsc2wvZHgtZ3JhcGhpY3MtaGxzbC1hcHBlbmRpeC1yZXNlcnZlZC13b3Jkc1xuICAgICdjbGFzcy1uYW1lJzogW1xuICAgICAgUHJpc20ubGFuZ3VhZ2VzLmNbJ2NsYXNzLW5hbWUnXSxcbiAgICAgIC9cXGIoPzpBcHBlbmRTdHJ1Y3R1cmVkQnVmZmVyfEJsZW5kU3RhdGV8QnVmZmVyfEJ5dGVBZGRyZXNzQnVmZmVyfENvbXBpbGVTaGFkZXJ8Q29tcHV0ZVNoYWRlcnxDb25zdW1lU3RydWN0dXJlZEJ1ZmZlcnxEZXB0aFN0ZW5jaWxTdGF0ZXxEZXB0aFN0ZW5jaWxWaWV3fERvbWFpblNoYWRlcnxHZW9tZXRyeVNoYWRlcnxIdWxsc2hhZGVyfElucHV0UGF0Y2h8TGluZVN0cmVhbXxPdXRwdXRQYXRjaHxQaXhlbFNoYWRlcnxQb2ludFN0cmVhbXxSV0J1ZmZlcnxSV0J5dGVBZGRyZXNzQnVmZmVyfFJXU3RydWN0dXJlZEJ1ZmZlcnxSV1RleHR1cmUoPzoxRHwxREFycmF5fDJEfDJEQXJyYXl8M0QpfFJhc3Rlcml6ZXJTdGF0ZXxSZW5kZXJUYXJnZXRWaWV3fFNhbXBsZXJDb21wYXJpc29uU3RhdGV8U2FtcGxlclN0YXRlfFN0cnVjdHVyZWRCdWZmZXJ8VGV4dHVyZSg/OjFEfDFEQXJyYXl8MkR8MkRBcnJheXwyRE1TfDJETVNBcnJheXwzRHxDdWJlfEN1YmVBcnJheSl8VHJpYW5nbGVTdHJlYW18VmVydGV4U2hhZGVyKVxcYi9cbiAgICBdLFxuICAgIGtleXdvcmQ6IFtcbiAgICAgIC8vIEhMU0wga2V5d29yZFxuICAgICAgL1xcYig/OmFzbXxhc21fZnJhZ21lbnR8YXV0b3xicmVha3xjYXNlfGNhdGNofGNidWZmZXJ8Y2VudHJvaWR8Y2hhcnxjbGFzc3xjb2x1bW5fbWFqb3J8Y29tcGlsZXxjb21waWxlX2ZyYWdtZW50fGNvbnN0fGNvbnN0X2Nhc3R8Y29udGludWV8ZGVmYXVsdHxkZWxldGV8ZGlzY2FyZHxkb3xkeW5hbWljX2Nhc3R8ZWxzZXxlbnVtfGV4cGxpY2l0fGV4cG9ydHxleHRlcm58Zm9yfGZyaWVuZHxmeGdyb3VwfGdvdG98Z3JvdXBzaGFyZWR8aWZ8aW58aW5saW5lfGlub3V0fGludGVyZmFjZXxsaW5lfGxpbmVhZGp8bGluZWFyfGxvbmd8bWF0cml4fG11dGFibGV8bmFtZXNwYWNlfG5ld3xub2ludGVycG9sYXRpb258bm9wZXJzcGVjdGl2ZXxvcGVyYXRvcnxvdXR8cGFja29mZnNldHxwYXNzfHBpeGVsZnJhZ21lbnR8cG9pbnR8cHJlY2lzZXxwcml2YXRlfHByb3RlY3RlZHxwdWJsaWN8cmVnaXN0ZXJ8cmVpbnRlcnByZXRfY2FzdHxyZXR1cm58cm93X21ham9yfHNhbXBsZXxzYW1wbGVyfHNoYXJlZHxzaG9ydHxzaWduZWR8c2l6ZW9mfHNub3JtfHN0YXRlYmxvY2t8c3RhdGVibG9ja19zdGF0ZXxzdGF0aWN8c3RhdGljX2Nhc3R8c3RyaW5nfHN0cnVjdHxzd2l0Y2h8dGJ1ZmZlcnx0ZWNobmlxdWV8dGVjaG5pcXVlMTB8dGVjaG5pcXVlMTF8dGVtcGxhdGV8dGV4dHVyZXx0aGlzfHRocm93fHRyaWFuZ2xlfHRyaWFuZ2xlYWRqfHRyeXx0eXBlZGVmfHR5cGVuYW1lfHVuaWZvcm18dW5pb258dW5vcm18dW5zaWduZWR8dXNpbmd8dmVjdG9yfHZlcnRleGZyYWdtZW50fHZpcnR1YWx8dm9pZHx2b2xhdGlsZXx3aGlsZSlcXGIvLCAvLyBzY2FsYXIsIHZlY3RvciwgYW5kIG1hdHJpeCB0eXBlc1xuICAgICAgL1xcYig/OmJvb2x8ZG91YmxlfGR3b3JkfGZsb2F0fGhhbGZ8aW50fG1pbig/OjEwZmxvYXR8MTJpbnR8MTYoPzpmbG9hdHxpbnR8dWludCkpfHVpbnQpKD86WzEtNF0oPzp4WzEtNF0pPyk/XFxiL1xuICAgIF0sXG4gICAgLy8gaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvd2luZG93cy93aW4zMi9kaXJlY3QzZGhsc2wvZHgtZ3JhcGhpY3MtaGxzbC1hcHBlbmRpeC1ncmFtbWFyI2Zsb2F0aW5nLXBvaW50LW51bWJlcnNcbiAgICBudW1iZXI6XG4gICAgICAvKD86KD86XFxiXFxkKyg/OlxcLlxcZCopP3xcXEJcXC5cXGQrKSg/OltlRV1bKy1dP1xcZCspP3xcXGIweFtcXGRhLWZBLUZdKylbZkZoSGxMdVVdP1xcYi8sXG4gICAgYm9vbGVhbjogL1xcYig/OmZhbHNlfHRydWUpXFxiL1xuICB9KVxufVxuIl0sIm5hbWVzIjpbInJlZnJhY3RvckMiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImhsc2wiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsInJlZ2lzdGVyIiwibGFuZ3VhZ2VzIiwiZXh0ZW5kIiwiYyIsImtleXdvcmQiLCJudW1iZXIiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/hlsl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/hoon.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/hoon.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = hoon;\nhoon.displayName = 'hoon';\nhoon.aliases = [];\nfunction hoon(Prism) {\n  Prism.languages.hoon = {\n    comment: {\n      pattern: /::.*/,\n      greedy: true\n    },\n    string: {\n      pattern: /\"[^\"]*\"|'[^']*'/,\n      greedy: true\n    },\n    constant: /%(?:\\.[ny]|[\\w-]+)/,\n    'class-name': /@(?:[a-z0-9-]*[a-z0-9])?|\\*/i,\n    \"function\": /(?:\\+[-+] {2})?(?:[a-z](?:[a-z0-9-]*[a-z0-9])?)/,\n    keyword: /\\.[\\^\\+\\*=\\?]|![><:\\.=\\?!]|=[>|:,\\.\\-\\^<+;/~\\*\\?]|\\?[>|:\\.\\-\\^<\\+&~=@!]|\\|[\\$_%:\\.\\-\\^~\\*=@\\?]|\\+[|\\$\\+\\*]|:[_\\-\\^\\+~\\*]|%[_:\\.\\-\\^\\+~\\*=]|\\^[|:\\.\\-\\+&~\\*=\\?]|\\$[|_%:<>\\-\\^&~@=\\?]|;[:<\\+;\\/~\\*=]|~[>|\\$_%<\\+\\/&=\\?!]|--|==/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvaG9vbi5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLElBQUk7QUFDckJBLElBQUksQ0FBQ0MsV0FBVyxHQUFHLE1BQU07QUFDekJELElBQUksQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDakIsU0FBU0YsSUFBSUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ25CQSxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osSUFBSSxHQUFHO0lBQ3JCSyxPQUFPLEVBQUU7TUFDUEMsT0FBTyxFQUFFLE1BQU07TUFDZkMsTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUNEQyxNQUFNLEVBQUU7TUFDTkYsT0FBTyxFQUFFLGlCQUFpQjtNQUMxQkMsTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUNERSxRQUFRLEVBQUUsb0JBQW9CO0lBQzlCLFlBQVksRUFBRSw4QkFBOEI7SUFDNUMsWUFBVSxpREFBaUQ7SUFDM0RDLE9BQU8sRUFDTDtFQUNKLENBQUM7QUFDSCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXGhvb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gaG9vblxuaG9vbi5kaXNwbGF5TmFtZSA9ICdob29uJ1xuaG9vbi5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIGhvb24oUHJpc20pIHtcbiAgUHJpc20ubGFuZ3VhZ2VzLmhvb24gPSB7XG4gICAgY29tbWVudDoge1xuICAgICAgcGF0dGVybjogLzo6LiovLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICBzdHJpbmc6IHtcbiAgICAgIHBhdHRlcm46IC9cIlteXCJdKlwifCdbXiddKicvLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICBjb25zdGFudDogLyUoPzpcXC5bbnldfFtcXHctXSspLyxcbiAgICAnY2xhc3MtbmFtZSc6IC9AKD86W2EtejAtOS1dKlthLXowLTldKT98XFwqL2ksXG4gICAgZnVuY3Rpb246IC8oPzpcXCtbLStdIHsyfSk/KD86W2Etel0oPzpbYS16MC05LV0qW2EtejAtOV0pPykvLFxuICAgIGtleXdvcmQ6XG4gICAgICAvXFwuW1xcXlxcK1xcKj1cXD9dfCFbPjw6XFwuPVxcPyFdfD1bPnw6LFxcLlxcLVxcXjwrOy9+XFwqXFw/XXxcXD9bPnw6XFwuXFwtXFxePFxcKyZ+PUAhXXxcXHxbXFwkXyU6XFwuXFwtXFxeflxcKj1AXFw/XXxcXCtbfFxcJFxcK1xcKl18OltfXFwtXFxeXFwrflxcKl18JVtfOlxcLlxcLVxcXlxcK35cXCo9XXxcXF5bfDpcXC5cXC1cXCsmflxcKj1cXD9dfFxcJFt8XyU6PD5cXC1cXF4mfkA9XFw/XXw7Wzo8XFwrO1xcL35cXCo9XXx+Wz58XFwkXyU8XFwrXFwvJj1cXD8hXXwtLXw9PS9cbiAgfVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJob29uIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJjb21tZW50IiwicGF0dGVybiIsImdyZWVkeSIsInN0cmluZyIsImNvbnN0YW50Iiwia2V5d29yZCJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/hoon.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/hpkp.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/hpkp.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = hpkp;\nhpkp.displayName = 'hpkp';\nhpkp.aliases = [];\nfunction hpkp(Prism) {\n  /**\n   * Original by Scott Helme.\n   *\n   * Reference: https://scotthelme.co.uk/hpkp-cheat-sheet/\n   */\n  Prism.languages.hpkp = {\n    directive: {\n      pattern: /\\b(?:includeSubDomains|max-age|pin-sha256|preload|report-to|report-uri|strict)(?=[\\s;=]|$)/i,\n      alias: 'property'\n    },\n    operator: /=/,\n    punctuation: /;/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvaHBrcC5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLElBQUk7QUFDckJBLElBQUksQ0FBQ0MsV0FBVyxHQUFHLE1BQU07QUFDekJELElBQUksQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDakIsU0FBU0YsSUFBSUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ25CO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRUEsS0FBSyxDQUFDQyxTQUFTLENBQUNKLElBQUksR0FBRztJQUNyQkssU0FBUyxFQUFFO01BQ1RDLE9BQU8sRUFDTCw2RkFBNkY7TUFDL0ZDLEtBQUssRUFBRTtJQUNULENBQUM7SUFDREMsUUFBUSxFQUFFLEdBQUc7SUFDYkMsV0FBVyxFQUFFO0VBQ2YsQ0FBQztBQUNIIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcaHBrcC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBocGtwXG5ocGtwLmRpc3BsYXlOYW1lID0gJ2hwa3AnXG5ocGtwLmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24gaHBrcChQcmlzbSkge1xuICAvKipcbiAgICogT3JpZ2luYWwgYnkgU2NvdHQgSGVsbWUuXG4gICAqXG4gICAqIFJlZmVyZW5jZTogaHR0cHM6Ly9zY290dGhlbG1lLmNvLnVrL2hwa3AtY2hlYXQtc2hlZXQvXG4gICAqL1xuICBQcmlzbS5sYW5ndWFnZXMuaHBrcCA9IHtcbiAgICBkaXJlY3RpdmU6IHtcbiAgICAgIHBhdHRlcm46XG4gICAgICAgIC9cXGIoPzppbmNsdWRlU3ViRG9tYWluc3xtYXgtYWdlfHBpbi1zaGEyNTZ8cHJlbG9hZHxyZXBvcnQtdG98cmVwb3J0LXVyaXxzdHJpY3QpKD89W1xcczs9XXwkKS9pLFxuICAgICAgYWxpYXM6ICdwcm9wZXJ0eSdcbiAgICB9LFxuICAgIG9wZXJhdG9yOiAvPS8sXG4gICAgcHVuY3R1YXRpb246IC87L1xuICB9XG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImhwa3AiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImxhbmd1YWdlcyIsImRpcmVjdGl2ZSIsInBhdHRlcm4iLCJhbGlhcyIsIm9wZXJhdG9yIiwicHVuY3R1YXRpb24iXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/hpkp.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/hsts.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/hsts.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = hsts;\nhsts.displayName = 'hsts';\nhsts.aliases = [];\nfunction hsts(Prism) {\n  /**\n   * Original by Scott Helme.\n   *\n   * Reference: https://scotthelme.co.uk/hsts-cheat-sheet/\n   */\n  Prism.languages.hsts = {\n    directive: {\n      pattern: /\\b(?:includeSubDomains|max-age|preload)(?=[\\s;=]|$)/i,\n      alias: 'property'\n    },\n    operator: /=/,\n    punctuation: /;/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvaHN0cy5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLElBQUk7QUFDckJBLElBQUksQ0FBQ0MsV0FBVyxHQUFHLE1BQU07QUFDekJELElBQUksQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDakIsU0FBU0YsSUFBSUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ25CO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRUEsS0FBSyxDQUFDQyxTQUFTLENBQUNKLElBQUksR0FBRztJQUNyQkssU0FBUyxFQUFFO01BQ1RDLE9BQU8sRUFBRSxzREFBc0Q7TUFDL0RDLEtBQUssRUFBRTtJQUNULENBQUM7SUFDREMsUUFBUSxFQUFFLEdBQUc7SUFDYkMsV0FBVyxFQUFFO0VBQ2YsQ0FBQztBQUNIIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcaHN0cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBoc3RzXG5oc3RzLmRpc3BsYXlOYW1lID0gJ2hzdHMnXG5oc3RzLmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24gaHN0cyhQcmlzbSkge1xuICAvKipcbiAgICogT3JpZ2luYWwgYnkgU2NvdHQgSGVsbWUuXG4gICAqXG4gICAqIFJlZmVyZW5jZTogaHR0cHM6Ly9zY290dGhlbG1lLmNvLnVrL2hzdHMtY2hlYXQtc2hlZXQvXG4gICAqL1xuICBQcmlzbS5sYW5ndWFnZXMuaHN0cyA9IHtcbiAgICBkaXJlY3RpdmU6IHtcbiAgICAgIHBhdHRlcm46IC9cXGIoPzppbmNsdWRlU3ViRG9tYWluc3xtYXgtYWdlfHByZWxvYWQpKD89W1xcczs9XXwkKS9pLFxuICAgICAgYWxpYXM6ICdwcm9wZXJ0eSdcbiAgICB9LFxuICAgIG9wZXJhdG9yOiAvPS8sXG4gICAgcHVuY3R1YXRpb246IC87L1xuICB9XG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImhzdHMiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImxhbmd1YWdlcyIsImRpcmVjdGl2ZSIsInBhdHRlcm4iLCJhbGlhcyIsIm9wZXJhdG9yIiwicHVuY3R1YXRpb24iXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/hsts.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/http.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/http.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = http;\nhttp.displayName = 'http';\nhttp.aliases = [];\nfunction http(Prism) {\n  ;\n  (function (Prism) {\n    /**\n     * @param {string} name\n     * @returns {RegExp}\n     */\n    function headerValueOf(name) {\n      return RegExp('(^(?:' + name + '):[ \\t]*(?![ \\t]))[^]+', 'i');\n    }\n    Prism.languages.http = {\n      'request-line': {\n        pattern: /^(?:CONNECT|DELETE|GET|HEAD|OPTIONS|PATCH|POST|PRI|PUT|SEARCH|TRACE)\\s(?:https?:\\/\\/|\\/)\\S*\\sHTTP\\/[\\d.]+/m,\n        inside: {\n          // HTTP Method\n          method: {\n            pattern: /^[A-Z]+\\b/,\n            alias: 'property'\n          },\n          // Request Target e.g. http://example.com, /path/to/file\n          'request-target': {\n            pattern: /^(\\s)(?:https?:\\/\\/|\\/)\\S*(?=\\s)/,\n            lookbehind: true,\n            alias: 'url',\n            inside: Prism.languages.uri\n          },\n          // HTTP Version\n          'http-version': {\n            pattern: /^(\\s)HTTP\\/[\\d.]+/,\n            lookbehind: true,\n            alias: 'property'\n          }\n        }\n      },\n      'response-status': {\n        pattern: /^HTTP\\/[\\d.]+ \\d+ .+/m,\n        inside: {\n          // HTTP Version\n          'http-version': {\n            pattern: /^HTTP\\/[\\d.]+/,\n            alias: 'property'\n          },\n          // Status Code\n          'status-code': {\n            pattern: /^(\\s)\\d+(?=\\s)/,\n            lookbehind: true,\n            alias: 'number'\n          },\n          // Reason Phrase\n          'reason-phrase': {\n            pattern: /^(\\s).+/,\n            lookbehind: true,\n            alias: 'string'\n          }\n        }\n      },\n      header: {\n        pattern: /^[\\w-]+:.+(?:(?:\\r\\n?|\\n)[ \\t].+)*/m,\n        inside: {\n          'header-value': [{\n            pattern: headerValueOf(/Content-Security-Policy/.source),\n            lookbehind: true,\n            alias: ['csp', 'languages-csp'],\n            inside: Prism.languages.csp\n          }, {\n            pattern: headerValueOf(/Public-Key-Pins(?:-Report-Only)?/.source),\n            lookbehind: true,\n            alias: ['hpkp', 'languages-hpkp'],\n            inside: Prism.languages.hpkp\n          }, {\n            pattern: headerValueOf(/Strict-Transport-Security/.source),\n            lookbehind: true,\n            alias: ['hsts', 'languages-hsts'],\n            inside: Prism.languages.hsts\n          }, {\n            pattern: headerValueOf(/[^:]+/.source),\n            lookbehind: true\n          }],\n          'header-name': {\n            pattern: /^[^:]+/,\n            alias: 'keyword'\n          },\n          punctuation: /^:/\n        }\n      }\n    }; // Create a mapping of Content-Type headers to language definitions\n    var langs = Prism.languages;\n    var httpLanguages = {\n      'application/javascript': langs.javascript,\n      'application/json': langs.json || langs.javascript,\n      'application/xml': langs.xml,\n      'text/xml': langs.xml,\n      'text/html': langs.html,\n      'text/css': langs.css,\n      'text/plain': langs.plain\n    }; // Declare which types can also be suffixes\n    var suffixTypes = {\n      'application/json': true,\n      'application/xml': true\n    };\n    /**\n     * Returns a pattern for the given content type which matches it and any type which has it as a suffix.\n     *\n     * @param {string} contentType\n     * @returns {string}\n     */\n    function getSuffixPattern(contentType) {\n      var suffix = contentType.replace(/^[a-z]+\\//, '');\n      var suffixPattern = '\\\\w+/(?:[\\\\w.-]+\\\\+)+' + suffix + '(?![+\\\\w.-])';\n      return '(?:' + contentType + '|' + suffixPattern + ')';\n    } // Insert each content type parser that has its associated language\n    // currently loaded.\n    var options;\n    for (var contentType in httpLanguages) {\n      if (httpLanguages[contentType]) {\n        options = options || {};\n        var pattern = suffixTypes[contentType] ? getSuffixPattern(contentType) : contentType;\n        options[contentType.replace(/\\//g, '-')] = {\n          pattern: RegExp('(' + /content-type:\\s*/.source + pattern + /(?:(?:\\r\\n?|\\n)[\\w-].*)*(?:\\r(?:\\n|(?!\\n))|\\n)/.source + ')' +\n          // This is a little interesting:\n          // The HTTP format spec required 1 empty line before the body to make everything unambiguous.\n          // However, when writing code by hand (e.g. to display on a website) people can forget about this,\n          // so we want to be liberal here. We will allow the empty line to be omitted if the first line of\n          // the body does not start with a [\\w-] character (as headers do).\n          /[^ \\t\\w-][\\s\\S]*/.source, 'i'),\n          lookbehind: true,\n          inside: httpLanguages[contentType]\n        };\n      }\n    }\n    if (options) {\n      Prism.languages.insertBefore('http', 'header', options);\n    }\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/http.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/ichigojam.js":
/*!**************************************************!*\
  !*** ./node_modules/refractor/lang/ichigojam.js ***!
  \**************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = ichigojam;\nichigojam.displayName = 'ichigojam';\nichigojam.aliases = [];\nfunction ichigojam(Prism) {\n  // according to the offical reference (EN)\n  // https://ichigojam.net/IchigoJam-en.html\n  Prism.languages.ichigojam = {\n    comment: /(?:\\B'|REM)(?:[^\\n\\r]*)/i,\n    string: {\n      pattern: /\"(?:\"\"|[!#$%&'()*,\\/:;<=>?^\\w +\\-.])*\"/,\n      greedy: true\n    },\n    number: /\\B#[0-9A-F]+|\\B`[01]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:E[+-]?\\d+)?/i,\n    keyword: /\\b(?:BEEP|BPS|CASE|CLEAR|CLK|CLO|CLP|CLS|CLT|CLV|CONT|COPY|ELSE|END|FILE|FILES|FOR|GOSUB|GOTO|GSB|IF|INPUT|KBD|LED|LET|LIST|LOAD|LOCATE|LRUN|NEW|NEXT|OUT|PLAY|POKE|PRINT|PWM|REM|RENUM|RESET|RETURN|RIGHT|RTN|RUN|SAVE|SCROLL|SLEEP|SRND|STEP|STOP|SUB|TEMPO|THEN|TO|UART|VIDEO|WAIT)(?:\\$|\\b)/i,\n    \"function\": /\\b(?:ABS|ANA|ASC|BIN|BTN|DEC|END|FREE|HELP|HEX|I2CR|I2CW|IN|INKEY|LEN|LINE|PEEK|RND|SCR|SOUND|STR|TICK|USR|VER|VPEEK|ZER)(?:\\$|\\b)/i,\n    label: /(?:\\B@\\S+)/,\n    operator: /<[=>]?|>=?|\\|\\||&&|[+\\-*\\/=|&^~!]|\\b(?:AND|NOT|OR)\\b/i,\n    punctuation: /[\\[,;:()\\]]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvaWNoaWdvamFtLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsU0FBUztBQUMxQkEsU0FBUyxDQUFDQyxXQUFXLEdBQUcsV0FBVztBQUNuQ0QsU0FBUyxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUN0QixTQUFTRixTQUFTQSxDQUFDRyxLQUFLLEVBQUU7RUFDeEI7RUFDQTtFQUNBQSxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osU0FBUyxHQUFHO0lBQzFCSyxPQUFPLEVBQUUsMEJBQTBCO0lBQ25DQyxNQUFNLEVBQUU7TUFDTkMsT0FBTyxFQUFFLHdDQUF3QztNQUNqREMsTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUNEQyxNQUFNLEVBQUUsa0VBQWtFO0lBQzFFQyxPQUFPLEVBQ0wsa1NBQWtTO0lBQ3BTLFlBQ0UscUlBQXFJO0lBQ3ZJQyxLQUFLLEVBQUUsWUFBWTtJQUNuQkMsUUFBUSxFQUFFLHVEQUF1RDtJQUNqRUMsV0FBVyxFQUFFO0VBQ2YsQ0FBQztBQUNIIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcaWNoaWdvamFtLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGljaGlnb2phbVxuaWNoaWdvamFtLmRpc3BsYXlOYW1lID0gJ2ljaGlnb2phbSdcbmljaGlnb2phbS5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIGljaGlnb2phbShQcmlzbSkge1xuICAvLyBhY2NvcmRpbmcgdG8gdGhlIG9mZmljYWwgcmVmZXJlbmNlIChFTilcbiAgLy8gaHR0cHM6Ly9pY2hpZ29qYW0ubmV0L0ljaGlnb0phbS1lbi5odG1sXG4gIFByaXNtLmxhbmd1YWdlcy5pY2hpZ29qYW0gPSB7XG4gICAgY29tbWVudDogLyg/OlxcQid8UkVNKSg/OlteXFxuXFxyXSopL2ksXG4gICAgc3RyaW5nOiB7XG4gICAgICBwYXR0ZXJuOiAvXCIoPzpcIlwifFshIyQlJicoKSosXFwvOjs8PT4/XlxcdyArXFwtLl0pKlwiLyxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgbnVtYmVyOiAvXFxCI1swLTlBLUZdK3xcXEJgWzAxXSt8KD86XFxiXFxkKyg/OlxcLlxcZCopP3xcXEJcXC5cXGQrKSg/OkVbKy1dP1xcZCspPy9pLFxuICAgIGtleXdvcmQ6XG4gICAgICAvXFxiKD86QkVFUHxCUFN8Q0FTRXxDTEVBUnxDTEt8Q0xPfENMUHxDTFN8Q0xUfENMVnxDT05UfENPUFl8RUxTRXxFTkR8RklMRXxGSUxFU3xGT1J8R09TVUJ8R09UT3xHU0J8SUZ8SU5QVVR8S0JEfExFRHxMRVR8TElTVHxMT0FEfExPQ0FURXxMUlVOfE5FV3xORVhUfE9VVHxQTEFZfFBPS0V8UFJJTlR8UFdNfFJFTXxSRU5VTXxSRVNFVHxSRVRVUk58UklHSFR8UlROfFJVTnxTQVZFfFNDUk9MTHxTTEVFUHxTUk5EfFNURVB8U1RPUHxTVUJ8VEVNUE98VEhFTnxUT3xVQVJUfFZJREVPfFdBSVQpKD86XFwkfFxcYikvaSxcbiAgICBmdW5jdGlvbjpcbiAgICAgIC9cXGIoPzpBQlN8QU5BfEFTQ3xCSU58QlROfERFQ3xFTkR8RlJFRXxIRUxQfEhFWHxJMkNSfEkyQ1d8SU58SU5LRVl8TEVOfExJTkV8UEVFS3xSTkR8U0NSfFNPVU5EfFNUUnxUSUNLfFVTUnxWRVJ8VlBFRUt8WkVSKSg/OlxcJHxcXGIpL2ksXG4gICAgbGFiZWw6IC8oPzpcXEJAXFxTKykvLFxuICAgIG9wZXJhdG9yOiAvPFs9Pl0/fD49P3xcXHxcXHx8JiZ8WytcXC0qXFwvPXwmXn4hXXxcXGIoPzpBTkR8Tk9UfE9SKVxcYi9pLFxuICAgIHB1bmN0dWF0aW9uOiAvW1xcWyw7OigpXFxdXS9cbiAgfVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJpY2hpZ29qYW0iLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImxhbmd1YWdlcyIsImNvbW1lbnQiLCJzdHJpbmciLCJwYXR0ZXJuIiwiZ3JlZWR5IiwibnVtYmVyIiwia2V5d29yZCIsImxhYmVsIiwib3BlcmF0b3IiLCJwdW5jdHVhdGlvbiJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/ichigojam.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/icon.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/icon.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = icon;\nicon.displayName = 'icon';\nicon.aliases = [];\nfunction icon(Prism) {\n  Prism.languages.icon = {\n    comment: /#.*/,\n    string: {\n      pattern: /([\"'])(?:(?!\\1)[^\\\\\\r\\n_]|\\\\.|_(?!\\1)(?:\\r\\n|[\\s\\S]))*\\1/,\n      greedy: true\n    },\n    number: /\\b(?:\\d+r[a-z\\d]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b|\\.\\d+\\b/i,\n    'builtin-keyword': {\n      pattern: /&(?:allocated|ascii|clock|collections|cset|current|date|dateline|digits|dump|e|error(?:number|text|value)?|errout|fail|features|file|host|input|lcase|letters|level|line|main|null|output|phi|pi|pos|progname|random|regions|source|storage|subject|time|trace|ucase|version)\\b/,\n      alias: 'variable'\n    },\n    directive: {\n      pattern: /\\$\\w+/,\n      alias: 'builtin'\n    },\n    keyword: /\\b(?:break|by|case|create|default|do|else|end|every|fail|global|if|initial|invocable|link|local|next|not|of|procedure|record|repeat|return|static|suspend|then|to|until|while)\\b/,\n    \"function\": /\\b(?!\\d)\\w+(?=\\s*[({]|\\s*!\\s*\\[)/,\n    operator: /[+-]:(?!=)|(?:[\\/?@^%&]|\\+\\+?|--?|==?=?|~==?=?|\\*\\*?|\\|\\|\\|?|<(?:->?|<?=?)|>>?=?)(?::=)?|:(?:=:?)?|[!.\\\\|~]/,\n    punctuation: /[\\[\\](){},;]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvaWNvbi5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLElBQUk7QUFDckJBLElBQUksQ0FBQ0MsV0FBVyxHQUFHLE1BQU07QUFDekJELElBQUksQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDakIsU0FBU0YsSUFBSUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ25CQSxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osSUFBSSxHQUFHO0lBQ3JCSyxPQUFPLEVBQUUsS0FBSztJQUNkQyxNQUFNLEVBQUU7TUFDTkMsT0FBTyxFQUFFLDBEQUEwRDtNQUNuRUMsTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUNEQyxNQUFNLEVBQUUsMkRBQTJEO0lBQ25FLGlCQUFpQixFQUFFO01BQ2pCRixPQUFPLEVBQ0wsaVJBQWlSO01BQ25SRyxLQUFLLEVBQUU7SUFDVCxDQUFDO0lBQ0RDLFNBQVMsRUFBRTtNQUNUSixPQUFPLEVBQUUsT0FBTztNQUNoQkcsS0FBSyxFQUFFO0lBQ1QsQ0FBQztJQUNERSxPQUFPLEVBQ0wsa0xBQWtMO0lBQ3BMLFlBQVUsa0NBQWtDO0lBQzVDQyxRQUFRLEVBQ04sNkdBQTZHO0lBQy9HQyxXQUFXLEVBQUU7RUFDZixDQUFDO0FBQ0giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxpY29uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGljb25cbmljb24uZGlzcGxheU5hbWUgPSAnaWNvbidcbmljb24uYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBpY29uKFByaXNtKSB7XG4gIFByaXNtLmxhbmd1YWdlcy5pY29uID0ge1xuICAgIGNvbW1lbnQ6IC8jLiovLFxuICAgIHN0cmluZzoge1xuICAgICAgcGF0dGVybjogLyhbXCInXSkoPzooPyFcXDEpW15cXFxcXFxyXFxuX118XFxcXC58Xyg/IVxcMSkoPzpcXHJcXG58W1xcc1xcU10pKSpcXDEvLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICBudW1iZXI6IC9cXGIoPzpcXGQrclthLXpcXGRdK3xcXGQrKD86XFwuXFxkKyk/KD86ZVsrLV0/XFxkKyk/KVxcYnxcXC5cXGQrXFxiL2ksXG4gICAgJ2J1aWx0aW4ta2V5d29yZCc6IHtcbiAgICAgIHBhdHRlcm46XG4gICAgICAgIC8mKD86YWxsb2NhdGVkfGFzY2lpfGNsb2NrfGNvbGxlY3Rpb25zfGNzZXR8Y3VycmVudHxkYXRlfGRhdGVsaW5lfGRpZ2l0c3xkdW1wfGV8ZXJyb3IoPzpudW1iZXJ8dGV4dHx2YWx1ZSk/fGVycm91dHxmYWlsfGZlYXR1cmVzfGZpbGV8aG9zdHxpbnB1dHxsY2FzZXxsZXR0ZXJzfGxldmVsfGxpbmV8bWFpbnxudWxsfG91dHB1dHxwaGl8cGl8cG9zfHByb2duYW1lfHJhbmRvbXxyZWdpb25zfHNvdXJjZXxzdG9yYWdlfHN1YmplY3R8dGltZXx0cmFjZXx1Y2FzZXx2ZXJzaW9uKVxcYi8sXG4gICAgICBhbGlhczogJ3ZhcmlhYmxlJ1xuICAgIH0sXG4gICAgZGlyZWN0aXZlOiB7XG4gICAgICBwYXR0ZXJuOiAvXFwkXFx3Ky8sXG4gICAgICBhbGlhczogJ2J1aWx0aW4nXG4gICAgfSxcbiAgICBrZXl3b3JkOlxuICAgICAgL1xcYig/OmJyZWFrfGJ5fGNhc2V8Y3JlYXRlfGRlZmF1bHR8ZG98ZWxzZXxlbmR8ZXZlcnl8ZmFpbHxnbG9iYWx8aWZ8aW5pdGlhbHxpbnZvY2FibGV8bGlua3xsb2NhbHxuZXh0fG5vdHxvZnxwcm9jZWR1cmV8cmVjb3JkfHJlcGVhdHxyZXR1cm58c3RhdGljfHN1c3BlbmR8dGhlbnx0b3x1bnRpbHx3aGlsZSlcXGIvLFxuICAgIGZ1bmN0aW9uOiAvXFxiKD8hXFxkKVxcdysoPz1cXHMqWyh7XXxcXHMqIVxccypcXFspLyxcbiAgICBvcGVyYXRvcjpcbiAgICAgIC9bKy1dOig/IT0pfCg/OltcXC8/QF4lJl18XFwrXFwrP3wtLT98PT0/PT98fj09Pz0/fFxcKlxcKj98XFx8XFx8XFx8P3w8KD86LT4/fDw/PT8pfD4+Pz0/KSg/Ojo9KT98Oig/Oj06Pyk/fFshLlxcXFx8fl0vLFxuICAgIHB1bmN0dWF0aW9uOiAvW1xcW1xcXSgpe30sO10vXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiaWNvbiIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwiY29tbWVudCIsInN0cmluZyIsInBhdHRlcm4iLCJncmVlZHkiLCJudW1iZXIiLCJhbGlhcyIsImRpcmVjdGl2ZSIsImtleXdvcmQiLCJvcGVyYXRvciIsInB1bmN0dWF0aW9uIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/icon.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/icu-message-format.js":
/*!***********************************************************!*\
  !*** ./node_modules/refractor/lang/icu-message-format.js ***!
  \***********************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = icuMessageFormat;\nicuMessageFormat.displayName = 'icuMessageFormat';\nicuMessageFormat.aliases = [];\nfunction icuMessageFormat(Prism) {\n  // https://unicode-org.github.io/icu/userguide/format_parse/messages/\n  // https://unicode-org.github.io/icu-docs/apidoc/released/icu4j/com/ibm/icu/text/MessageFormat.html\n  ;\n  (function (Prism) {\n    /**\n     * @param {string} source\n     * @param {number} level\n     * @returns {string}\n     */\n    function nested(source, level) {\n      if (level <= 0) {\n        return /[]/.source;\n      } else {\n        return source.replace(/<SELF>/g, function () {\n          return nested(source, level - 1);\n        });\n      }\n    }\n    var stringPattern = /'[{}:=,](?:[^']|'')*'(?!')/;\n    var escape = {\n      pattern: /''/,\n      greedy: true,\n      alias: 'operator'\n    };\n    var string = {\n      pattern: stringPattern,\n      greedy: true,\n      inside: {\n        escape: escape\n      }\n    };\n    var argumentSource = nested(/\\{(?:[^{}']|'(?![{},'])|''|<STR>|<SELF>)*\\}/.source.replace(/<STR>/g, function () {\n      return stringPattern.source;\n    }), 8);\n    var nestedMessage = {\n      pattern: RegExp(argumentSource),\n      inside: {\n        message: {\n          pattern: /^(\\{)[\\s\\S]+(?=\\}$)/,\n          lookbehind: true,\n          inside: null // see below\n        },\n\n        'message-delimiter': {\n          pattern: /./,\n          alias: 'punctuation'\n        }\n      }\n    };\n    Prism.languages['icu-message-format'] = {\n      argument: {\n        pattern: RegExp(argumentSource),\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /^(\\{)[\\s\\S]+(?=\\}$)/,\n            lookbehind: true,\n            inside: {\n              'argument-name': {\n                pattern: /^(\\s*)[^{}:=,\\s]+/,\n                lookbehind: true\n              },\n              'choice-style': {\n                // https://unicode-org.github.io/icu-docs/apidoc/released/icu4c/classicu_1_1ChoiceFormat.html#details\n                pattern: /^(\\s*,\\s*choice\\s*,\\s*)\\S(?:[\\s\\S]*\\S)?/,\n                lookbehind: true,\n                inside: {\n                  punctuation: /\\|/,\n                  range: {\n                    pattern: /^(\\s*)[+-]?(?:\\d+(?:\\.\\d*)?|\\u221e)\\s*[<#\\u2264]/,\n                    lookbehind: true,\n                    inside: {\n                      operator: /[<#\\u2264]/,\n                      number: /\\S+/\n                    }\n                  },\n                  rest: null // see below\n                }\n              },\n\n              'plural-style': {\n                // https://unicode-org.github.io/icu-docs/apidoc/released/icu4j/com/ibm/icu/text/PluralFormat.html#:~:text=Patterns%20and%20Their%20Interpretation\n                pattern: /^(\\s*,\\s*(?:plural|selectordinal)\\s*,\\s*)\\S(?:[\\s\\S]*\\S)?/,\n                lookbehind: true,\n                inside: {\n                  offset: /^offset:\\s*\\d+/,\n                  'nested-message': nestedMessage,\n                  selector: {\n                    pattern: /=\\d+|[^{}:=,\\s]+/,\n                    inside: {\n                      keyword: /^(?:few|many|one|other|two|zero)$/\n                    }\n                  }\n                }\n              },\n              'select-style': {\n                // https://unicode-org.github.io/icu-docs/apidoc/released/icu4j/com/ibm/icu/text/SelectFormat.html#:~:text=Patterns%20and%20Their%20Interpretation\n                pattern: /^(\\s*,\\s*select\\s*,\\s*)\\S(?:[\\s\\S]*\\S)?/,\n                lookbehind: true,\n                inside: {\n                  'nested-message': nestedMessage,\n                  selector: {\n                    pattern: /[^{}:=,\\s]+/,\n                    inside: {\n                      keyword: /^other$/\n                    }\n                  }\n                }\n              },\n              keyword: /\\b(?:choice|plural|select|selectordinal)\\b/,\n              'arg-type': {\n                pattern: /\\b(?:date|duration|number|ordinal|spellout|time)\\b/,\n                alias: 'keyword'\n              },\n              'arg-skeleton': {\n                pattern: /(,\\s*)::[^{}:=,\\s]+/,\n                lookbehind: true\n              },\n              'arg-style': {\n                pattern: /(,\\s*)(?:currency|full|integer|long|medium|percent|short)(?=\\s*$)/,\n                lookbehind: true\n              },\n              'arg-style-text': {\n                pattern: RegExp(/(^\\s*,\\s*(?=\\S))/.source + nested(/(?:[^{}']|'[^']*'|\\{(?:<SELF>)?\\})+/.source, 8) + '$'),\n                lookbehind: true,\n                alias: 'string'\n              },\n              punctuation: /,/\n            }\n          },\n          'argument-delimiter': {\n            pattern: /./,\n            alias: 'operator'\n          }\n        }\n      },\n      escape: escape,\n      string: string\n    };\n    nestedMessage.inside.message.inside = Prism.languages['icu-message-format'];\n    Prism.languages['icu-message-format'].argument.inside.content.inside['choice-style'].inside.rest = Prism.languages['icu-message-format'];\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/icu-message-format.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/idris.js":
/*!**********************************************!*\
  !*** ./node_modules/refractor/lang/idris.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar refractorHaskell = __webpack_require__(/*! ./haskell.js */ \"(ssr)/./node_modules/refractor/lang/haskell.js\");\nmodule.exports = idris;\nidris.displayName = 'idris';\nidris.aliases = ['idr'];\nfunction idris(Prism) {\n  Prism.register(refractorHaskell);\n  Prism.languages.idris = Prism.languages.extend('haskell', {\n    comment: {\n      pattern: /(?:(?:--|\\|\\|\\|).*$|\\{-[\\s\\S]*?-\\})/m\n    },\n    keyword: /\\b(?:Type|case|class|codata|constructor|corecord|data|do|dsl|else|export|if|implementation|implicit|import|impossible|in|infix|infixl|infixr|instance|interface|let|module|mutual|namespace|of|parameters|partial|postulate|private|proof|public|quoteGoal|record|rewrite|syntax|then|total|using|where|with)\\b/,\n    builtin: undefined\n  });\n  Prism.languages.insertBefore('idris', 'keyword', {\n    'import-statement': {\n      pattern: /(^\\s*import\\s+)(?:[A-Z][\\w']*)(?:\\.[A-Z][\\w']*)*/m,\n      lookbehind: true,\n      inside: {\n        punctuation: /\\./\n      }\n    }\n  });\n  Prism.languages.idr = Prism.languages.idris;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvaWRyaXMuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBQ1osSUFBSUEsZ0JBQWdCLEdBQUdDLG1CQUFPLENBQUMsb0VBQWMsQ0FBQztBQUM5Q0MsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLEtBQUs7QUFDdEJBLEtBQUssQ0FBQ0MsV0FBVyxHQUFHLE9BQU87QUFDM0JELEtBQUssQ0FBQ0UsT0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDO0FBQ3ZCLFNBQVNGLEtBQUtBLENBQUNHLEtBQUssRUFBRTtFQUNwQkEsS0FBSyxDQUFDQyxRQUFRLENBQUNSLGdCQUFnQixDQUFDO0VBQ2hDTyxLQUFLLENBQUNFLFNBQVMsQ0FBQ0wsS0FBSyxHQUFHRyxLQUFLLENBQUNFLFNBQVMsQ0FBQ0MsTUFBTSxDQUFDLFNBQVMsRUFBRTtJQUN4REMsT0FBTyxFQUFFO01BQ1BDLE9BQU8sRUFBRTtJQUNYLENBQUM7SUFDREMsT0FBTyxFQUNMLGlUQUFpVDtJQUNuVEMsT0FBTyxFQUFFQztFQUNYLENBQUMsQ0FBQztFQUNGUixLQUFLLENBQUNFLFNBQVMsQ0FBQ08sWUFBWSxDQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUU7SUFDL0Msa0JBQWtCLEVBQUU7TUFDbEJKLE9BQU8sRUFBRSxtREFBbUQ7TUFDNURLLFVBQVUsRUFBRSxJQUFJO01BQ2hCQyxNQUFNLEVBQUU7UUFDTkMsV0FBVyxFQUFFO01BQ2Y7SUFDRjtFQUNGLENBQUMsQ0FBQztFQUNGWixLQUFLLENBQUNFLFNBQVMsQ0FBQ1csR0FBRyxHQUFHYixLQUFLLENBQUNFLFNBQVMsQ0FBQ0wsS0FBSztBQUM3QyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXGlkcmlzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xudmFyIHJlZnJhY3Rvckhhc2tlbGwgPSByZXF1aXJlKCcuL2hhc2tlbGwuanMnKVxubW9kdWxlLmV4cG9ydHMgPSBpZHJpc1xuaWRyaXMuZGlzcGxheU5hbWUgPSAnaWRyaXMnXG5pZHJpcy5hbGlhc2VzID0gWydpZHInXVxuZnVuY3Rpb24gaWRyaXMoUHJpc20pIHtcbiAgUHJpc20ucmVnaXN0ZXIocmVmcmFjdG9ySGFza2VsbClcbiAgUHJpc20ubGFuZ3VhZ2VzLmlkcmlzID0gUHJpc20ubGFuZ3VhZ2VzLmV4dGVuZCgnaGFza2VsbCcsIHtcbiAgICBjb21tZW50OiB7XG4gICAgICBwYXR0ZXJuOiAvKD86KD86LS18XFx8XFx8XFx8KS4qJHxcXHstW1xcc1xcU10qPy1cXH0pL21cbiAgICB9LFxuICAgIGtleXdvcmQ6XG4gICAgICAvXFxiKD86VHlwZXxjYXNlfGNsYXNzfGNvZGF0YXxjb25zdHJ1Y3Rvcnxjb3JlY29yZHxkYXRhfGRvfGRzbHxlbHNlfGV4cG9ydHxpZnxpbXBsZW1lbnRhdGlvbnxpbXBsaWNpdHxpbXBvcnR8aW1wb3NzaWJsZXxpbnxpbmZpeHxpbmZpeGx8aW5maXhyfGluc3RhbmNlfGludGVyZmFjZXxsZXR8bW9kdWxlfG11dHVhbHxuYW1lc3BhY2V8b2Z8cGFyYW1ldGVyc3xwYXJ0aWFsfHBvc3R1bGF0ZXxwcml2YXRlfHByb29mfHB1YmxpY3xxdW90ZUdvYWx8cmVjb3JkfHJld3JpdGV8c3ludGF4fHRoZW58dG90YWx8dXNpbmd8d2hlcmV8d2l0aClcXGIvLFxuICAgIGJ1aWx0aW46IHVuZGVmaW5lZFxuICB9KVxuICBQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdpZHJpcycsICdrZXl3b3JkJywge1xuICAgICdpbXBvcnQtc3RhdGVtZW50Jzoge1xuICAgICAgcGF0dGVybjogLyheXFxzKmltcG9ydFxccyspKD86W0EtWl1bXFx3J10qKSg/OlxcLltBLVpdW1xcdyddKikqL20sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgIHB1bmN0dWF0aW9uOiAvXFwuL1xuICAgICAgfVxuICAgIH1cbiAgfSlcbiAgUHJpc20ubGFuZ3VhZ2VzLmlkciA9IFByaXNtLmxhbmd1YWdlcy5pZHJpc1xufVxuIl0sIm5hbWVzIjpbInJlZnJhY3Rvckhhc2tlbGwiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImlkcmlzIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJyZWdpc3RlciIsImxhbmd1YWdlcyIsImV4dGVuZCIsImNvbW1lbnQiLCJwYXR0ZXJuIiwia2V5d29yZCIsImJ1aWx0aW4iLCJ1bmRlZmluZWQiLCJpbnNlcnRCZWZvcmUiLCJsb29rYmVoaW5kIiwiaW5zaWRlIiwicHVuY3R1YXRpb24iLCJpZHIiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/idris.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/iecst.js":
/*!**********************************************!*\
  !*** ./node_modules/refractor/lang/iecst.js ***!
  \**********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = iecst;\niecst.displayName = 'iecst';\niecst.aliases = [];\nfunction iecst(Prism) {\n  Prism.languages.iecst = {\n    comment: [{\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?(?:\\*\\/|$)|\\(\\*[\\s\\S]*?(?:\\*\\)|$)|\\{[\\s\\S]*?(?:\\}|$))/,\n      lookbehind: true,\n      greedy: true\n    }, {\n      pattern: /(^|[^\\\\:])\\/\\/.*/,\n      lookbehind: true,\n      greedy: true\n    }],\n    string: {\n      pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true\n    },\n    keyword: [/\\b(?:END_)?(?:PROGRAM|CONFIGURATION|INTERFACE|FUNCTION_BLOCK|FUNCTION|ACTION|TRANSITION|TYPE|STRUCT|(?:INITIAL_)?STEP|NAMESPACE|LIBRARY|CHANNEL|FOLDER|RESOURCE|VAR_(?:ACCESS|CONFIG|EXTERNAL|GLOBAL|INPUT|IN_OUT|OUTPUT|TEMP)|VAR|METHOD|PROPERTY)\\b/i, /\\b(?:AT|BY|(?:END_)?(?:CASE|FOR|IF|REPEAT|WHILE)|CONSTANT|CONTINUE|DO|ELSE|ELSIF|EXIT|EXTENDS|FROM|GET|GOTO|IMPLEMENTS|JMP|NON_RETAIN|OF|PRIVATE|PROTECTED|PUBLIC|RETAIN|RETURN|SET|TASK|THEN|TO|UNTIL|USING|WITH|__CATCH|__ENDTRY|__FINALLY|__TRY)\\b/],\n    'class-name': /\\b(?:ANY|ARRAY|BOOL|BYTE|U?(?:D|L|S)?INT|(?:D|L)?WORD|DATE(?:_AND_TIME)?|DT|L?REAL|POINTER|STRING|TIME(?:_OF_DAY)?|TOD)\\b/,\n    address: {\n      pattern: /%[IQM][XBWDL][\\d.]*|%[IQ][\\d.]*/,\n      alias: 'symbol'\n    },\n    number: /\\b(?:16#[\\da-f]+|2#[01_]+|0x[\\da-f]+)\\b|\\b(?:D|DT|T|TOD)#[\\d_shmd:]*|\\b[A-Z]*#[\\d.,_]*|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n    \"boolean\": /\\b(?:FALSE|NULL|TRUE)\\b/,\n    operator: /S?R?:?=>?|&&?|\\*\\*?|<[=>]?|>=?|[-:^/+#]|\\b(?:AND|EQ|EXPT|GE|GT|LE|LT|MOD|NE|NOT|OR|XOR)\\b/,\n    \"function\": /\\b[a-z_]\\w*(?=\\s*\\()/i,\n    punctuation: /[()[\\].,;]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvaWVjc3QuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxLQUFLO0FBQ3RCQSxLQUFLLENBQUNDLFdBQVcsR0FBRyxPQUFPO0FBQzNCRCxLQUFLLENBQUNFLE9BQU8sR0FBRyxFQUFFO0FBQ2xCLFNBQVNGLEtBQUtBLENBQUNHLEtBQUssRUFBRTtFQUNwQkEsS0FBSyxDQUFDQyxTQUFTLENBQUNKLEtBQUssR0FBRztJQUN0QkssT0FBTyxFQUFFLENBQ1A7TUFDRUMsT0FBTyxFQUNMLCtFQUErRTtNQUNqRkMsVUFBVSxFQUFFLElBQUk7TUFDaEJDLE1BQU0sRUFBRTtJQUNWLENBQUMsRUFDRDtNQUNFRixPQUFPLEVBQUUsa0JBQWtCO01BQzNCQyxVQUFVLEVBQUUsSUFBSTtNQUNoQkMsTUFBTSxFQUFFO0lBQ1YsQ0FBQyxDQUNGO0lBQ0RDLE1BQU0sRUFBRTtNQUNOSCxPQUFPLEVBQUUsZ0RBQWdEO01BQ3pERSxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0RFLE9BQU8sRUFBRSxDQUNQLHdQQUF3UCxFQUN4UCx1UEFBdVAsQ0FDeFA7SUFDRCxZQUFZLEVBQ1YsMkhBQTJIO0lBQzdIQyxPQUFPLEVBQUU7TUFDUEwsT0FBTyxFQUFFLGlDQUFpQztNQUMxQ00sS0FBSyxFQUFFO0lBQ1QsQ0FBQztJQUNEQyxNQUFNLEVBQ0osbUlBQW1JO0lBQ3JJLFdBQVMseUJBQXlCO0lBQ2xDQyxRQUFRLEVBQ04sMkZBQTJGO0lBQzdGLFlBQVUsdUJBQXVCO0lBQ2pDQyxXQUFXLEVBQUU7RUFDZixDQUFDO0FBQ0giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxpZWNzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBpZWNzdFxuaWVjc3QuZGlzcGxheU5hbWUgPSAnaWVjc3QnXG5pZWNzdC5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIGllY3N0KFByaXNtKSB7XG4gIFByaXNtLmxhbmd1YWdlcy5pZWNzdCA9IHtcbiAgICBjb21tZW50OiBbXG4gICAgICB7XG4gICAgICAgIHBhdHRlcm46XG4gICAgICAgICAgLyhefFteXFxcXF0pKD86XFwvXFwqW1xcc1xcU10qPyg/OlxcKlxcL3wkKXxcXChcXCpbXFxzXFxTXSo/KD86XFwqXFwpfCQpfFxce1tcXHNcXFNdKj8oPzpcXH18JCkpLyxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBwYXR0ZXJuOiAvKF58W15cXFxcOl0pXFwvXFwvLiovLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICBncmVlZHk6IHRydWVcbiAgICAgIH1cbiAgICBdLFxuICAgIHN0cmluZzoge1xuICAgICAgcGF0dGVybjogLyhbXCInXSkoPzpcXFxcKD86XFxyXFxufFtcXHNcXFNdKXwoPyFcXDEpW15cXFxcXFxyXFxuXSkqXFwxLyxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAga2V5d29yZDogW1xuICAgICAgL1xcYig/OkVORF8pPyg/OlBST0dSQU18Q09ORklHVVJBVElPTnxJTlRFUkZBQ0V8RlVOQ1RJT05fQkxPQ0t8RlVOQ1RJT058QUNUSU9OfFRSQU5TSVRJT058VFlQRXxTVFJVQ1R8KD86SU5JVElBTF8pP1NURVB8TkFNRVNQQUNFfExJQlJBUll8Q0hBTk5FTHxGT0xERVJ8UkVTT1VSQ0V8VkFSXyg/OkFDQ0VTU3xDT05GSUd8RVhURVJOQUx8R0xPQkFMfElOUFVUfElOX09VVHxPVVRQVVR8VEVNUCl8VkFSfE1FVEhPRHxQUk9QRVJUWSlcXGIvaSxcbiAgICAgIC9cXGIoPzpBVHxCWXwoPzpFTkRfKT8oPzpDQVNFfEZPUnxJRnxSRVBFQVR8V0hJTEUpfENPTlNUQU5UfENPTlRJTlVFfERPfEVMU0V8RUxTSUZ8RVhJVHxFWFRFTkRTfEZST018R0VUfEdPVE98SU1QTEVNRU5UU3xKTVB8Tk9OX1JFVEFJTnxPRnxQUklWQVRFfFBST1RFQ1RFRHxQVUJMSUN8UkVUQUlOfFJFVFVSTnxTRVR8VEFTS3xUSEVOfFRPfFVOVElMfFVTSU5HfFdJVEh8X19DQVRDSHxfX0VORFRSWXxfX0ZJTkFMTFl8X19UUlkpXFxiL1xuICAgIF0sXG4gICAgJ2NsYXNzLW5hbWUnOlxuICAgICAgL1xcYig/OkFOWXxBUlJBWXxCT09MfEJZVEV8VT8oPzpEfEx8Uyk/SU5UfCg/OkR8TCk/V09SRHxEQVRFKD86X0FORF9USU1FKT98RFR8TD9SRUFMfFBPSU5URVJ8U1RSSU5HfFRJTUUoPzpfT0ZfREFZKT98VE9EKVxcYi8sXG4gICAgYWRkcmVzczoge1xuICAgICAgcGF0dGVybjogLyVbSVFNXVtYQldETF1bXFxkLl0qfCVbSVFdW1xcZC5dKi8sXG4gICAgICBhbGlhczogJ3N5bWJvbCdcbiAgICB9LFxuICAgIG51bWJlcjpcbiAgICAgIC9cXGIoPzoxNiNbXFxkYS1mXSt8MiNbMDFfXSt8MHhbXFxkYS1mXSspXFxifFxcYig/OkR8RFR8VHxUT0QpI1tcXGRfc2htZDpdKnxcXGJbQS1aXSojW1xcZC4sX10qfCg/OlxcYlxcZCsoPzpcXC5cXGQqKT98XFxCXFwuXFxkKykoPzplWystXT9cXGQrKT8vaSxcbiAgICBib29sZWFuOiAvXFxiKD86RkFMU0V8TlVMTHxUUlVFKVxcYi8sXG4gICAgb3BlcmF0b3I6XG4gICAgICAvUz9SPzo/PT4/fCYmP3xcXCpcXCo/fDxbPT5dP3w+PT98Wy06Xi8rI118XFxiKD86QU5EfEVRfEVYUFR8R0V8R1R8TEV8TFR8TU9EfE5FfE5PVHxPUnxYT1IpXFxiLyxcbiAgICBmdW5jdGlvbjogL1xcYlthLXpfXVxcdyooPz1cXHMqXFwoKS9pLFxuICAgIHB1bmN0dWF0aW9uOiAvWygpW1xcXS4sO10vXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiaWVjc3QiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImxhbmd1YWdlcyIsImNvbW1lbnQiLCJwYXR0ZXJuIiwibG9va2JlaGluZCIsImdyZWVkeSIsInN0cmluZyIsImtleXdvcmQiLCJhZGRyZXNzIiwiYWxpYXMiLCJudW1iZXIiLCJvcGVyYXRvciIsInB1bmN0dWF0aW9uIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/iecst.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/ignore.js":
/*!***********************************************!*\
  !*** ./node_modules/refractor/lang/ignore.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = ignore;\nignore.displayName = 'ignore';\nignore.aliases = ['gitignore', 'hgignore', 'npmignore'];\nfunction ignore(Prism) {\n  ;\n  (function (Prism) {\n    Prism.languages.ignore = {\n      // https://git-scm.com/docs/gitignore\n      comment: /^#.*/m,\n      entry: {\n        pattern: /\\S(?:.*(?:(?:\\\\ )|\\S))?/,\n        alias: 'string',\n        inside: {\n          operator: /^!|\\*\\*?|\\?/,\n          regex: {\n            pattern: /(^|[^\\\\])\\[[^\\[\\]]*\\]/,\n            lookbehind: true\n          },\n          punctuation: /\\//\n        }\n      }\n    };\n    Prism.languages.gitignore = Prism.languages.ignore;\n    Prism.languages.hgignore = Prism.languages.ignore;\n    Prism.languages.npmignore = Prism.languages.ignore;\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvaWdub3JlLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsTUFBTTtBQUN2QkEsTUFBTSxDQUFDQyxXQUFXLEdBQUcsUUFBUTtBQUM3QkQsTUFBTSxDQUFDRSxPQUFPLEdBQUcsQ0FBQyxXQUFXLEVBQUUsVUFBVSxFQUFFLFdBQVcsQ0FBQztBQUN2RCxTQUFTRixNQUFNQSxDQUFDRyxLQUFLLEVBQUU7RUFDckI7RUFBQyxDQUFDLFVBQVVBLEtBQUssRUFBRTtJQUNqQkEsS0FBSyxDQUFDQyxTQUFTLENBQUNKLE1BQU0sR0FBRztNQUN2QjtNQUNBSyxPQUFPLEVBQUUsT0FBTztNQUNoQkMsS0FBSyxFQUFFO1FBQ0xDLE9BQU8sRUFBRSx5QkFBeUI7UUFDbENDLEtBQUssRUFBRSxRQUFRO1FBQ2ZDLE1BQU0sRUFBRTtVQUNOQyxRQUFRLEVBQUUsYUFBYTtVQUN2QkMsS0FBSyxFQUFFO1lBQ0xKLE9BQU8sRUFBRSx1QkFBdUI7WUFDaENLLFVBQVUsRUFBRTtVQUNkLENBQUM7VUFDREMsV0FBVyxFQUFFO1FBQ2Y7TUFDRjtJQUNGLENBQUM7SUFDRFYsS0FBSyxDQUFDQyxTQUFTLENBQUNVLFNBQVMsR0FBR1gsS0FBSyxDQUFDQyxTQUFTLENBQUNKLE1BQU07SUFDbERHLEtBQUssQ0FBQ0MsU0FBUyxDQUFDVyxRQUFRLEdBQUdaLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixNQUFNO0lBQ2pERyxLQUFLLENBQUNDLFNBQVMsQ0FBQ1ksU0FBUyxHQUFHYixLQUFLLENBQUNDLFNBQVMsQ0FBQ0osTUFBTTtFQUNwRCxDQUFDLEVBQUVHLEtBQUssQ0FBQztBQUNYIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcaWdub3JlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlnbm9yZVxuaWdub3JlLmRpc3BsYXlOYW1lID0gJ2lnbm9yZSdcbmlnbm9yZS5hbGlhc2VzID0gWydnaXRpZ25vcmUnLCAnaGdpZ25vcmUnLCAnbnBtaWdub3JlJ11cbmZ1bmN0aW9uIGlnbm9yZShQcmlzbSkge1xuICA7KGZ1bmN0aW9uIChQcmlzbSkge1xuICAgIFByaXNtLmxhbmd1YWdlcy5pZ25vcmUgPSB7XG4gICAgICAvLyBodHRwczovL2dpdC1zY20uY29tL2RvY3MvZ2l0aWdub3JlXG4gICAgICBjb21tZW50OiAvXiMuKi9tLFxuICAgICAgZW50cnk6IHtcbiAgICAgICAgcGF0dGVybjogL1xcUyg/Oi4qKD86KD86XFxcXCApfFxcUykpPy8sXG4gICAgICAgIGFsaWFzOiAnc3RyaW5nJyxcbiAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgb3BlcmF0b3I6IC9eIXxcXCpcXCo/fFxcPy8sXG4gICAgICAgICAgcmVnZXg6IHtcbiAgICAgICAgICAgIHBhdHRlcm46IC8oXnxbXlxcXFxdKVxcW1teXFxbXFxdXSpcXF0vLFxuICAgICAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgcHVuY3R1YXRpb246IC9cXC8vXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgUHJpc20ubGFuZ3VhZ2VzLmdpdGlnbm9yZSA9IFByaXNtLmxhbmd1YWdlcy5pZ25vcmVcbiAgICBQcmlzbS5sYW5ndWFnZXMuaGdpZ25vcmUgPSBQcmlzbS5sYW5ndWFnZXMuaWdub3JlXG4gICAgUHJpc20ubGFuZ3VhZ2VzLm5wbWlnbm9yZSA9IFByaXNtLmxhbmd1YWdlcy5pZ25vcmVcbiAgfSkoUHJpc20pXG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImlnbm9yZSIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwiY29tbWVudCIsImVudHJ5IiwicGF0dGVybiIsImFsaWFzIiwiaW5zaWRlIiwib3BlcmF0b3IiLCJyZWdleCIsImxvb2tiZWhpbmQiLCJwdW5jdHVhdGlvbiIsImdpdGlnbm9yZSIsImhnaWdub3JlIiwibnBtaWdub3JlIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/ignore.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/inform7.js":
/*!************************************************!*\
  !*** ./node_modules/refractor/lang/inform7.js ***!
  \************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = inform7;\ninform7.displayName = 'inform7';\ninform7.aliases = [];\nfunction inform7(Prism) {\n  Prism.languages.inform7 = {\n    string: {\n      pattern: /\"[^\"]*\"/,\n      inside: {\n        substitution: {\n          pattern: /\\[[^\\[\\]]+\\]/,\n          inside: {\n            delimiter: {\n              pattern: /\\[|\\]/,\n              alias: 'punctuation'\n            } // See rest below\n          }\n        }\n      }\n    },\n\n    comment: {\n      pattern: /\\[[^\\[\\]]+\\]/,\n      greedy: true\n    },\n    title: {\n      pattern: /^[ \\t]*(?:book|chapter|part(?! of)|section|table|volume)\\b.+/im,\n      alias: 'important'\n    },\n    number: {\n      pattern: /(^|[^-])(?:\\b\\d+(?:\\.\\d+)?(?:\\^\\d+)?(?:(?!\\d)\\w+)?|\\b(?:eight|eleven|five|four|nine|one|seven|six|ten|three|twelve|two))\\b(?!-)/i,\n      lookbehind: true\n    },\n    verb: {\n      pattern: /(^|[^-])\\b(?:answering|applying to|are|asking|attacking|be(?:ing)?|burning|buying|called|carries|carry(?! out)|carrying|climbing|closing|conceal(?:ing|s)?|consulting|contain(?:ing|s)?|cutting|drinking|dropping|eating|enclos(?:es?|ing)|entering|examining|exiting|getting|giving|going|ha(?:s|ve|ving)|hold(?:ing|s)?|impl(?:ies|y)|incorporat(?:es?|ing)|inserting|is|jumping|kissing|listening|locking|looking|mean(?:ing|s)?|opening|provid(?:es?|ing)|pulling|pushing|putting|relat(?:es?|ing)|removing|searching|see(?:ing|s)?|setting|showing|singing|sleeping|smelling|squeezing|support(?:ing|s)?|swearing|switching|taking|tasting|telling|thinking|throwing|touching|turning|tying|unlock(?:ing|s)?|var(?:ies|y|ying)|waiting|waking|waving|wear(?:ing|s)?)\\b(?!-)/i,\n      lookbehind: true,\n      alias: 'operator'\n    },\n    keyword: {\n      pattern: /(^|[^-])\\b(?:after|before|carry out|check|continue the action|definition(?= *:)|do nothing|else|end (?:if|the story|unless)|every turn|if|include|instead(?: of)?|let|move|no|now|otherwise|repeat|report|resume the story|rule for|running through|say(?:ing)?|stop the action|test|try(?:ing)?|understand|unless|use|when|while|yes)\\b(?!-)/i,\n      lookbehind: true\n    },\n    property: {\n      pattern: /(^|[^-])\\b(?:adjacent(?! to)|carried|closed|concealed|contained|dark|described|edible|empty|enclosed|enterable|even|female|fixed in place|full|handled|held|improper-named|incorporated|inedible|invisible|lighted|lit|lock(?:able|ed)|male|marked for listing|mentioned|negative|neuter|non-(?:empty|full|recurring)|odd|opaque|open(?:able)?|plural-named|portable|positive|privately-named|proper-named|provided|publically-named|pushable between rooms|recurring|related|rubbing|scenery|seen|singular-named|supported|swinging|switch(?:able|ed(?: off| on)?)|touch(?:able|ed)|transparent|unconcealed|undescribed|unlit|unlocked|unmarked for listing|unmentioned|unopenable|untouchable|unvisited|variable|visible|visited|wearable|worn)\\b(?!-)/i,\n      lookbehind: true,\n      alias: 'symbol'\n    },\n    position: {\n      pattern: /(^|[^-])\\b(?:above|adjacent to|back side of|below|between|down|east|everywhere|front side|here|in|inside(?: from)?|north(?:east|west)?|nowhere|on(?: top of)?|other side|outside(?: from)?|parts? of|regionally in|south(?:east|west)?|through|up|west|within)\\b(?!-)/i,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    type: {\n      pattern: /(^|[^-])\\b(?:actions?|activit(?:ies|y)|actors?|animals?|backdrops?|containers?|devices?|directions?|doors?|holders?|kinds?|lists?|m[ae]n|nobody|nothing|nouns?|numbers?|objects?|people|persons?|player(?:'s holdall)?|regions?|relations?|rooms?|rule(?:book)?s?|scenes?|someone|something|supporters?|tables?|texts?|things?|time|vehicles?|wom[ae]n)\\b(?!-)/i,\n      lookbehind: true,\n      alias: 'variable'\n    },\n    punctuation: /[.,:;(){}]/\n  };\n  Prism.languages.inform7['string'].inside['substitution'].inside.rest = Prism.languages.inform7; // We don't want the remaining text in the substitution to be highlighted as the string.\n  Prism.languages.inform7['string'].inside['substitution'].inside.rest.text = {\n    pattern: /\\S(?:\\s*\\S)*/,\n    alias: 'comment'\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/inform7.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/ini.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/ini.js ***!
  \********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = ini;\nini.displayName = 'ini';\nini.aliases = [];\nfunction ini(Prism) {\n  Prism.languages.ini = {\n    /**\n     * The component mimics the behavior of the Win32 API parser.\n     *\n     * @see {@link https://github.com/PrismJS/prism/issues/2775#issuecomment-787477723}\n     */\n    comment: {\n      pattern: /(^[ \\f\\t\\v]*)[#;][^\\n\\r]*/m,\n      lookbehind: true\n    },\n    section: {\n      pattern: /(^[ \\f\\t\\v]*)\\[[^\\n\\r\\]]*\\]?/m,\n      lookbehind: true,\n      inside: {\n        'section-name': {\n          pattern: /(^\\[[ \\f\\t\\v]*)[^ \\f\\t\\v\\]]+(?:[ \\f\\t\\v]+[^ \\f\\t\\v\\]]+)*/,\n          lookbehind: true,\n          alias: 'selector'\n        },\n        punctuation: /\\[|\\]/\n      }\n    },\n    key: {\n      pattern: /(^[ \\f\\t\\v]*)[^ \\f\\n\\r\\t\\v=]+(?:[ \\f\\t\\v]+[^ \\f\\n\\r\\t\\v=]+)*(?=[ \\f\\t\\v]*=)/m,\n      lookbehind: true,\n      alias: 'attr-name'\n    },\n    value: {\n      pattern: /(=[ \\f\\t\\v]*)[^ \\f\\n\\r\\t\\v]+(?:[ \\f\\t\\v]+[^ \\f\\n\\r\\t\\v]+)*/,\n      lookbehind: true,\n      alias: 'attr-value',\n      inside: {\n        'inner-value': {\n          pattern: /^(\"|').+(?=\\1$)/,\n          lookbehind: true\n        }\n      }\n    },\n    punctuation: /=/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvaW5pLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsR0FBRztBQUNwQkEsR0FBRyxDQUFDQyxXQUFXLEdBQUcsS0FBSztBQUN2QkQsR0FBRyxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNoQixTQUFTRixHQUFHQSxDQUFDRyxLQUFLLEVBQUU7RUFDbEJBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixHQUFHLEdBQUc7SUFDcEI7QUFDSjtBQUNBO0FBQ0E7QUFDQTtJQUNJSyxPQUFPLEVBQUU7TUFDUEMsT0FBTyxFQUFFLDRCQUE0QjtNQUNyQ0MsVUFBVSxFQUFFO0lBQ2QsQ0FBQztJQUNEQyxPQUFPLEVBQUU7TUFDUEYsT0FBTyxFQUFFLCtCQUErQjtNQUN4Q0MsVUFBVSxFQUFFLElBQUk7TUFDaEJFLE1BQU0sRUFBRTtRQUNOLGNBQWMsRUFBRTtVQUNkSCxPQUFPLEVBQUUsMERBQTBEO1VBQ25FQyxVQUFVLEVBQUUsSUFBSTtVQUNoQkcsS0FBSyxFQUFFO1FBQ1QsQ0FBQztRQUNEQyxXQUFXLEVBQUU7TUFDZjtJQUNGLENBQUM7SUFDREMsR0FBRyxFQUFFO01BQ0hOLE9BQU8sRUFDTCw4RUFBOEU7TUFDaEZDLFVBQVUsRUFBRSxJQUFJO01BQ2hCRyxLQUFLLEVBQUU7SUFDVCxDQUFDO0lBQ0RHLEtBQUssRUFBRTtNQUNMUCxPQUFPLEVBQUUsNERBQTREO01BQ3JFQyxVQUFVLEVBQUUsSUFBSTtNQUNoQkcsS0FBSyxFQUFFLFlBQVk7TUFDbkJELE1BQU0sRUFBRTtRQUNOLGFBQWEsRUFBRTtVQUNiSCxPQUFPLEVBQUUsaUJBQWlCO1VBQzFCQyxVQUFVLEVBQUU7UUFDZDtNQUNGO0lBQ0YsQ0FBQztJQUNESSxXQUFXLEVBQUU7RUFDZixDQUFDO0FBQ0giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxpbmkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gaW5pXG5pbmkuZGlzcGxheU5hbWUgPSAnaW5pJ1xuaW5pLmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24gaW5pKFByaXNtKSB7XG4gIFByaXNtLmxhbmd1YWdlcy5pbmkgPSB7XG4gICAgLyoqXG4gICAgICogVGhlIGNvbXBvbmVudCBtaW1pY3MgdGhlIGJlaGF2aW9yIG9mIHRoZSBXaW4zMiBBUEkgcGFyc2VyLlxuICAgICAqXG4gICAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL1ByaXNtSlMvcHJpc20vaXNzdWVzLzI3NzUjaXNzdWVjb21tZW50LTc4NzQ3NzcyM31cbiAgICAgKi9cbiAgICBjb21tZW50OiB7XG4gICAgICBwYXR0ZXJuOiAvKF5bIFxcZlxcdFxcdl0qKVsjO11bXlxcblxccl0qL20sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgfSxcbiAgICBzZWN0aW9uOiB7XG4gICAgICBwYXR0ZXJuOiAvKF5bIFxcZlxcdFxcdl0qKVxcW1teXFxuXFxyXFxdXSpcXF0/L20sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgICdzZWN0aW9uLW5hbWUnOiB7XG4gICAgICAgICAgcGF0dGVybjogLyheXFxbWyBcXGZcXHRcXHZdKilbXiBcXGZcXHRcXHZcXF1dKyg/OlsgXFxmXFx0XFx2XStbXiBcXGZcXHRcXHZcXF1dKykqLyxcbiAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAgIGFsaWFzOiAnc2VsZWN0b3InXG4gICAgICAgIH0sXG4gICAgICAgIHB1bmN0dWF0aW9uOiAvXFxbfFxcXS9cbiAgICAgIH1cbiAgICB9LFxuICAgIGtleToge1xuICAgICAgcGF0dGVybjpcbiAgICAgICAgLyheWyBcXGZcXHRcXHZdKilbXiBcXGZcXG5cXHJcXHRcXHY9XSsoPzpbIFxcZlxcdFxcdl0rW14gXFxmXFxuXFxyXFx0XFx2PV0rKSooPz1bIFxcZlxcdFxcdl0qPSkvbSxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBhbGlhczogJ2F0dHItbmFtZSdcbiAgICB9LFxuICAgIHZhbHVlOiB7XG4gICAgICBwYXR0ZXJuOiAvKD1bIFxcZlxcdFxcdl0qKVteIFxcZlxcblxcclxcdFxcdl0rKD86WyBcXGZcXHRcXHZdK1teIFxcZlxcblxcclxcdFxcdl0rKSovLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGFsaWFzOiAnYXR0ci12YWx1ZScsXG4gICAgICBpbnNpZGU6IHtcbiAgICAgICAgJ2lubmVyLXZhbHVlJzoge1xuICAgICAgICAgIHBhdHRlcm46IC9eKFwifCcpLisoPz1cXDEkKS8sXG4gICAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBwdW5jdHVhdGlvbjogLz0vXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiaW5pIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJjb21tZW50IiwicGF0dGVybiIsImxvb2tiZWhpbmQiLCJzZWN0aW9uIiwiaW5zaWRlIiwiYWxpYXMiLCJwdW5jdHVhdGlvbiIsImtleSIsInZhbHVlIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/ini.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/io.js":
/*!*******************************************!*\
  !*** ./node_modules/refractor/lang/io.js ***!
  \*******************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = io;\nio.displayName = 'io';\nio.aliases = [];\nfunction io(Prism) {\n  Prism.languages.io = {\n    comment: {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?(?:\\*\\/|$)|\\/\\/.*|#.*)/,\n      lookbehind: true,\n      greedy: true\n    },\n    'triple-quoted-string': {\n      pattern: /\"\"\"(?:\\\\[\\s\\S]|(?!\"\"\")[^\\\\])*\"\"\"/,\n      greedy: true,\n      alias: 'string'\n    },\n    string: {\n      pattern: /\"(?:\\\\.|[^\\\\\\r\\n\"])*\"/,\n      greedy: true\n    },\n    keyword: /\\b(?:activate|activeCoroCount|asString|block|break|call|catch|clone|collectGarbage|compileString|continue|do|doFile|doMessage|doString|else|elseif|exit|for|foreach|forward|getEnvironmentVariable|getSlot|hasSlot|if|ifFalse|ifNil|ifNilEval|ifTrue|isActive|isNil|isResumable|list|message|method|parent|pass|pause|perform|performWithArgList|print|println|proto|raise|raiseResumable|removeSlot|resend|resume|schedulerSleepSeconds|self|sender|setSchedulerSleepSeconds|setSlot|shallowCopy|slotNames|super|system|then|thisBlock|thisContext|try|type|uniqueId|updateSlot|wait|while|write|yield)\\b/,\n    builtin: /\\b(?:Array|AudioDevice|AudioMixer|BigNum|Block|Box|Buffer|CFunction|CGI|Color|Curses|DBM|DNSResolver|DOConnection|DOProxy|DOServer|Date|Directory|Duration|DynLib|Error|Exception|FFT|File|Fnmatch|Font|Future|GL|GLE|GLScissor|GLU|GLUCylinder|GLUQuadric|GLUSphere|GLUT|Host|Image|Importer|LinkList|List|Lobby|Locals|MD5|MP3Decoder|MP3Encoder|Map|Message|Movie|Notification|Number|Object|OpenGL|Point|Protos|Random|Regex|SGML|SGMLElement|SGMLParser|SQLite|Sequence|Server|ShowMessage|SleepyCat|SleepyCatCursor|Socket|SocketManager|Sound|Soup|Store|String|Tree|UDPSender|UPDReceiver|URL|User|Warning|WeakLink)\\b/,\n    \"boolean\": /\\b(?:false|nil|true)\\b/,\n    number: /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e-?\\d+)?/i,\n    operator: /[=!*/%+\\-^&|]=|>>?=?|<<?=?|:?:?=|\\+\\+?|--?|\\*\\*?|\\/\\/?|%|\\|\\|?|&&?|\\b(?:and|not|or|return)\\b|@@?|\\?\\??|\\.\\./,\n    punctuation: /[{}[\\];(),.:]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvaW8uanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxFQUFFO0FBQ25CQSxFQUFFLENBQUNDLFdBQVcsR0FBRyxJQUFJO0FBQ3JCRCxFQUFFLENBQUNFLE9BQU8sR0FBRyxFQUFFO0FBQ2YsU0FBU0YsRUFBRUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ2pCQSxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osRUFBRSxHQUFHO0lBQ25CSyxPQUFPLEVBQUU7TUFDUEMsT0FBTyxFQUFFLGdEQUFnRDtNQUN6REMsVUFBVSxFQUFFLElBQUk7TUFDaEJDLE1BQU0sRUFBRTtJQUNWLENBQUM7SUFDRCxzQkFBc0IsRUFBRTtNQUN0QkYsT0FBTyxFQUFFLGtDQUFrQztNQUMzQ0UsTUFBTSxFQUFFLElBQUk7TUFDWkMsS0FBSyxFQUFFO0lBQ1QsQ0FBQztJQUNEQyxNQUFNLEVBQUU7TUFDTkosT0FBTyxFQUFFLHVCQUF1QjtNQUNoQ0UsTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUNERyxPQUFPLEVBQ0wsNGtCQUE0a0I7SUFDOWtCQyxPQUFPLEVBQ0wsZ21CQUFnbUI7SUFDbG1CLFdBQVMsd0JBQXdCO0lBQ2pDQyxNQUFNLEVBQUUsd0RBQXdEO0lBQ2hFQyxRQUFRLEVBQ04sNkdBQTZHO0lBQy9HQyxXQUFXLEVBQUU7RUFDZixDQUFDO0FBQ0giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxpby5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBpb1xuaW8uZGlzcGxheU5hbWUgPSAnaW8nXG5pby5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIGlvKFByaXNtKSB7XG4gIFByaXNtLmxhbmd1YWdlcy5pbyA9IHtcbiAgICBjb21tZW50OiB7XG4gICAgICBwYXR0ZXJuOiAvKF58W15cXFxcXSkoPzpcXC9cXCpbXFxzXFxTXSo/KD86XFwqXFwvfCQpfFxcL1xcLy4qfCMuKikvLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgJ3RyaXBsZS1xdW90ZWQtc3RyaW5nJzoge1xuICAgICAgcGF0dGVybjogL1wiXCJcIig/OlxcXFxbXFxzXFxTXXwoPyFcIlwiXCIpW15cXFxcXSkqXCJcIlwiLyxcbiAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgIGFsaWFzOiAnc3RyaW5nJ1xuICAgIH0sXG4gICAgc3RyaW5nOiB7XG4gICAgICBwYXR0ZXJuOiAvXCIoPzpcXFxcLnxbXlxcXFxcXHJcXG5cIl0pKlwiLyxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAga2V5d29yZDpcbiAgICAgIC9cXGIoPzphY3RpdmF0ZXxhY3RpdmVDb3JvQ291bnR8YXNTdHJpbmd8YmxvY2t8YnJlYWt8Y2FsbHxjYXRjaHxjbG9uZXxjb2xsZWN0R2FyYmFnZXxjb21waWxlU3RyaW5nfGNvbnRpbnVlfGRvfGRvRmlsZXxkb01lc3NhZ2V8ZG9TdHJpbmd8ZWxzZXxlbHNlaWZ8ZXhpdHxmb3J8Zm9yZWFjaHxmb3J3YXJkfGdldEVudmlyb25tZW50VmFyaWFibGV8Z2V0U2xvdHxoYXNTbG90fGlmfGlmRmFsc2V8aWZOaWx8aWZOaWxFdmFsfGlmVHJ1ZXxpc0FjdGl2ZXxpc05pbHxpc1Jlc3VtYWJsZXxsaXN0fG1lc3NhZ2V8bWV0aG9kfHBhcmVudHxwYXNzfHBhdXNlfHBlcmZvcm18cGVyZm9ybVdpdGhBcmdMaXN0fHByaW50fHByaW50bG58cHJvdG98cmFpc2V8cmFpc2VSZXN1bWFibGV8cmVtb3ZlU2xvdHxyZXNlbmR8cmVzdW1lfHNjaGVkdWxlclNsZWVwU2Vjb25kc3xzZWxmfHNlbmRlcnxzZXRTY2hlZHVsZXJTbGVlcFNlY29uZHN8c2V0U2xvdHxzaGFsbG93Q29weXxzbG90TmFtZXN8c3VwZXJ8c3lzdGVtfHRoZW58dGhpc0Jsb2NrfHRoaXNDb250ZXh0fHRyeXx0eXBlfHVuaXF1ZUlkfHVwZGF0ZVNsb3R8d2FpdHx3aGlsZXx3cml0ZXx5aWVsZClcXGIvLFxuICAgIGJ1aWx0aW46XG4gICAgICAvXFxiKD86QXJyYXl8QXVkaW9EZXZpY2V8QXVkaW9NaXhlcnxCaWdOdW18QmxvY2t8Qm94fEJ1ZmZlcnxDRnVuY3Rpb258Q0dJfENvbG9yfEN1cnNlc3xEQk18RE5TUmVzb2x2ZXJ8RE9Db25uZWN0aW9ufERPUHJveHl8RE9TZXJ2ZXJ8RGF0ZXxEaXJlY3Rvcnl8RHVyYXRpb258RHluTGlifEVycm9yfEV4Y2VwdGlvbnxGRlR8RmlsZXxGbm1hdGNofEZvbnR8RnV0dXJlfEdMfEdMRXxHTFNjaXNzb3J8R0xVfEdMVUN5bGluZGVyfEdMVVF1YWRyaWN8R0xVU3BoZXJlfEdMVVR8SG9zdHxJbWFnZXxJbXBvcnRlcnxMaW5rTGlzdHxMaXN0fExvYmJ5fExvY2Fsc3xNRDV8TVAzRGVjb2RlcnxNUDNFbmNvZGVyfE1hcHxNZXNzYWdlfE1vdmllfE5vdGlmaWNhdGlvbnxOdW1iZXJ8T2JqZWN0fE9wZW5HTHxQb2ludHxQcm90b3N8UmFuZG9tfFJlZ2V4fFNHTUx8U0dNTEVsZW1lbnR8U0dNTFBhcnNlcnxTUUxpdGV8U2VxdWVuY2V8U2VydmVyfFNob3dNZXNzYWdlfFNsZWVweUNhdHxTbGVlcHlDYXRDdXJzb3J8U29ja2V0fFNvY2tldE1hbmFnZXJ8U291bmR8U291cHxTdG9yZXxTdHJpbmd8VHJlZXxVRFBTZW5kZXJ8VVBEUmVjZWl2ZXJ8VVJMfFVzZXJ8V2FybmluZ3xXZWFrTGluaylcXGIvLFxuICAgIGJvb2xlYW46IC9cXGIoPzpmYWxzZXxuaWx8dHJ1ZSlcXGIvLFxuICAgIG51bWJlcjogL1xcYjB4W1xcZGEtZl0rXFxifCg/OlxcYlxcZCsoPzpcXC5cXGQqKT98XFxCXFwuXFxkKykoPzplLT9cXGQrKT8vaSxcbiAgICBvcGVyYXRvcjpcbiAgICAgIC9bPSEqLyUrXFwtXiZ8XT18Pj4/PT98PDw/PT98Oj86Pz18XFwrXFwrP3wtLT98XFwqXFwqP3xcXC9cXC8/fCV8XFx8XFx8P3wmJj98XFxiKD86YW5kfG5vdHxvcnxyZXR1cm4pXFxifEBAP3xcXD9cXD8/fFxcLlxcLi8sXG4gICAgcHVuY3R1YXRpb246IC9be31bXFxdOygpLC46XS9cbiAgfVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJpbyIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwiY29tbWVudCIsInBhdHRlcm4iLCJsb29rYmVoaW5kIiwiZ3JlZWR5IiwiYWxpYXMiLCJzdHJpbmciLCJrZXl3b3JkIiwiYnVpbHRpbiIsIm51bWJlciIsIm9wZXJhdG9yIiwicHVuY3R1YXRpb24iXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/io.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/j.js":
/*!******************************************!*\
  !*** ./node_modules/refractor/lang/j.js ***!
  \******************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = j;\nj.displayName = 'j';\nj.aliases = [];\nfunction j(Prism) {\n  Prism.languages.j = {\n    comment: {\n      pattern: /\\bNB\\..*/,\n      greedy: true\n    },\n    string: {\n      pattern: /'(?:''|[^'\\r\\n])*'/,\n      greedy: true\n    },\n    keyword: /\\b(?:(?:CR|LF|adverb|conjunction|def|define|dyad|monad|noun|verb)\\b|(?:assert|break|case|catch[dt]?|continue|do|else|elseif|end|fcase|for|for_\\w+|goto_\\w+|if|label_\\w+|return|select|throw|try|while|whilst)\\.)/,\n    verb: {\n      // Negative look-ahead prevents bad highlighting\n      // of ^: ;. =. =: !. !:\n      pattern: /(?!\\^:|;\\.|[=!][.:])(?:\\{(?:\\.|::?)?|p(?:\\.\\.?|:)|[=!\\]]|[<>+*\\-%$|,#][.:]?|[?^]\\.?|[;\\[]:?|[~}\"i][.:]|[ACeEIjLor]\\.|(?:[_\\/\\\\qsux]|_?\\d):)/,\n      alias: 'keyword'\n    },\n    number: /\\b_?(?:(?!\\d:)\\d+(?:\\.\\d+)?(?:(?:ad|ar|[ejpx])_?\\d+(?:\\.\\d+)?)*(?:b_?[\\da-z]+(?:\\.[\\da-z]+)?)?|_\\b(?!\\.))/,\n    adverb: {\n      pattern: /[~}]|[\\/\\\\]\\.?|[bfM]\\.|t[.:]/,\n      alias: 'builtin'\n    },\n    operator: /[=a][.:]|_\\./,\n    conjunction: {\n      pattern: /&(?:\\.:?|:)?|[.:@][.:]?|[!D][.:]|[;dHT]\\.|`:?|[\\^LS]:|\"/,\n      alias: 'variable'\n    },\n    punctuation: /[()]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvai5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLENBQUM7QUFDbEJBLENBQUMsQ0FBQ0MsV0FBVyxHQUFHLEdBQUc7QUFDbkJELENBQUMsQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDZCxTQUFTRixDQUFDQSxDQUFDRyxLQUFLLEVBQUU7RUFDaEJBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixDQUFDLEdBQUc7SUFDbEJLLE9BQU8sRUFBRTtNQUNQQyxPQUFPLEVBQUUsVUFBVTtNQUNuQkMsTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUNEQyxNQUFNLEVBQUU7TUFDTkYsT0FBTyxFQUFFLG9CQUFvQjtNQUM3QkMsTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUNERSxPQUFPLEVBQ0wsa05BQWtOO0lBQ3BOQyxJQUFJLEVBQUU7TUFDSjtNQUNBO01BQ0FKLE9BQU8sRUFDTCw2SUFBNkk7TUFDL0lLLEtBQUssRUFBRTtJQUNULENBQUM7SUFDREMsTUFBTSxFQUNKLDJHQUEyRztJQUM3R0MsTUFBTSxFQUFFO01BQ05QLE9BQU8sRUFBRSw4QkFBOEI7TUFDdkNLLEtBQUssRUFBRTtJQUNULENBQUM7SUFDREcsUUFBUSxFQUFFLGNBQWM7SUFDeEJDLFdBQVcsRUFBRTtNQUNYVCxPQUFPLEVBQUUseURBQXlEO01BQ2xFSyxLQUFLLEVBQUU7SUFDVCxDQUFDO0lBQ0RLLFdBQVcsRUFBRTtFQUNmLENBQUM7QUFDSCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXGouanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0galxuai5kaXNwbGF5TmFtZSA9ICdqJ1xuai5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIGooUHJpc20pIHtcbiAgUHJpc20ubGFuZ3VhZ2VzLmogPSB7XG4gICAgY29tbWVudDoge1xuICAgICAgcGF0dGVybjogL1xcYk5CXFwuLiovLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICBzdHJpbmc6IHtcbiAgICAgIHBhdHRlcm46IC8nKD86Jyd8W14nXFxyXFxuXSkqJy8sXG4gICAgICBncmVlZHk6IHRydWVcbiAgICB9LFxuICAgIGtleXdvcmQ6XG4gICAgICAvXFxiKD86KD86Q1J8TEZ8YWR2ZXJifGNvbmp1bmN0aW9ufGRlZnxkZWZpbmV8ZHlhZHxtb25hZHxub3VufHZlcmIpXFxifCg/OmFzc2VydHxicmVha3xjYXNlfGNhdGNoW2R0XT98Y29udGludWV8ZG98ZWxzZXxlbHNlaWZ8ZW5kfGZjYXNlfGZvcnxmb3JfXFx3K3xnb3RvX1xcdyt8aWZ8bGFiZWxfXFx3K3xyZXR1cm58c2VsZWN0fHRocm93fHRyeXx3aGlsZXx3aGlsc3QpXFwuKS8sXG4gICAgdmVyYjoge1xuICAgICAgLy8gTmVnYXRpdmUgbG9vay1haGVhZCBwcmV2ZW50cyBiYWQgaGlnaGxpZ2h0aW5nXG4gICAgICAvLyBvZiBeOiA7LiA9LiA9OiAhLiAhOlxuICAgICAgcGF0dGVybjpcbiAgICAgICAgLyg/IVxcXjp8O1xcLnxbPSFdWy46XSkoPzpcXHsoPzpcXC58Ojo/KT98cCg/OlxcLlxcLj98Oil8Wz0hXFxdXXxbPD4rKlxcLSUkfCwjXVsuOl0/fFs/Xl1cXC4/fFs7XFxbXTo/fFt+fVwiaV1bLjpdfFtBQ2VFSWpMb3JdXFwufCg/OltfXFwvXFxcXHFzdXhdfF8/XFxkKTopLyxcbiAgICAgIGFsaWFzOiAna2V5d29yZCdcbiAgICB9LFxuICAgIG51bWJlcjpcbiAgICAgIC9cXGJfPyg/Oig/IVxcZDopXFxkKyg/OlxcLlxcZCspPyg/Oig/OmFkfGFyfFtlanB4XSlfP1xcZCsoPzpcXC5cXGQrKT8pKig/OmJfP1tcXGRhLXpdKyg/OlxcLltcXGRhLXpdKyk/KT98X1xcYig/IVxcLikpLyxcbiAgICBhZHZlcmI6IHtcbiAgICAgIHBhdHRlcm46IC9bfn1dfFtcXC9cXFxcXVxcLj98W2JmTV1cXC58dFsuOl0vLFxuICAgICAgYWxpYXM6ICdidWlsdGluJ1xuICAgIH0sXG4gICAgb3BlcmF0b3I6IC9bPWFdWy46XXxfXFwuLyxcbiAgICBjb25qdW5jdGlvbjoge1xuICAgICAgcGF0dGVybjogLyYoPzpcXC46P3w6KT98Wy46QF1bLjpdP3xbIURdWy46XXxbO2RIVF1cXC58YDo/fFtcXF5MU106fFwiLyxcbiAgICAgIGFsaWFzOiAndmFyaWFibGUnXG4gICAgfSxcbiAgICBwdW5jdHVhdGlvbjogL1soKV0vXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiaiIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwiY29tbWVudCIsInBhdHRlcm4iLCJncmVlZHkiLCJzdHJpbmciLCJrZXl3b3JkIiwidmVyYiIsImFsaWFzIiwibnVtYmVyIiwiYWR2ZXJiIiwib3BlcmF0b3IiLCJjb25qdW5jdGlvbiIsInB1bmN0dWF0aW9uIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/j.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/java.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/java.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = java;\njava.displayName = 'java';\njava.aliases = [];\nfunction java(Prism) {\n  ;\n  (function (Prism) {\n    var keywords = /\\b(?:abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|exports|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|module|native|new|non-sealed|null|open|opens|package|permits|private|protected|provides|public|record|requires|return|sealed|short|static|strictfp|super|switch|synchronized|this|throw|throws|to|transient|transitive|try|uses|var|void|volatile|while|with|yield)\\b/; // full package (optional) + parent classes (optional)\n    var classNamePrefix = /(^|[^\\w.])(?:[a-z]\\w*\\s*\\.\\s*)*(?:[A-Z]\\w*\\s*\\.\\s*)*/.source; // based on the java naming conventions\n    var className = {\n      pattern: RegExp(classNamePrefix + /[A-Z](?:[\\d_A-Z]*[a-z]\\w*)?\\b/.source),\n      lookbehind: true,\n      inside: {\n        namespace: {\n          pattern: /^[a-z]\\w*(?:\\s*\\.\\s*[a-z]\\w*)*(?:\\s*\\.)?/,\n          inside: {\n            punctuation: /\\./\n          }\n        },\n        punctuation: /\\./\n      }\n    };\n    Prism.languages.java = Prism.languages.extend('clike', {\n      string: {\n        pattern: /(^|[^\\\\])\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n        lookbehind: true,\n        greedy: true\n      },\n      'class-name': [className, {\n        // variables and parameters\n        // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n        pattern: RegExp(classNamePrefix + /[A-Z]\\w*(?=\\s+\\w+\\s*[;,=()])/.source),\n        lookbehind: true,\n        inside: className.inside\n      }],\n      keyword: keywords,\n      \"function\": [Prism.languages.clike[\"function\"], {\n        pattern: /(::\\s*)[a-z_]\\w*/,\n        lookbehind: true\n      }],\n      number: /\\b0b[01][01_]*L?\\b|\\b0x(?:\\.[\\da-f_p+-]+|[\\da-f_]+(?:\\.[\\da-f_p+-]+)?)\\b|(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfl]?/i,\n      operator: {\n        pattern: /(^|[^.])(?:<<=?|>>>?=?|->|--|\\+\\+|&&|\\|\\||::|[?:~]|[-+*/%&|^!=<>]=?)/m,\n        lookbehind: true\n      }\n    });\n    Prism.languages.insertBefore('java', 'string', {\n      'triple-quoted-string': {\n        // http://openjdk.java.net/jeps/355#Description\n        pattern: /\"\"\"[ \\t]*[\\r\\n](?:(?:\"|\"\")?(?:\\\\.|[^\"\\\\]))*\"\"\"/,\n        greedy: true,\n        alias: 'string'\n      },\n      \"char\": {\n        pattern: /'(?:\\\\.|[^'\\\\\\r\\n]){1,6}'/,\n        greedy: true\n      }\n    });\n    Prism.languages.insertBefore('java', 'class-name', {\n      annotation: {\n        pattern: /(^|[^.])@\\w+(?:\\s*\\.\\s*\\w+)*/,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      generics: {\n        pattern: /<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&))*>)*>)*>)*>/,\n        inside: {\n          'class-name': className,\n          keyword: keywords,\n          punctuation: /[<>(),.:]/,\n          operator: /[?&|]/\n        }\n      },\n      namespace: {\n        pattern: RegExp(/(\\b(?:exports|import(?:\\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\\s+)(?!<keyword>)[a-z]\\w*(?:\\.[a-z]\\w*)*\\.?/.source.replace(/<keyword>/g, function () {\n          return keywords.source;\n        })),\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      }\n    });\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/java.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/javadoc.js":
/*!************************************************!*\
  !*** ./node_modules/refractor/lang/javadoc.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar refractorJava = __webpack_require__(/*! ./java.js */ \"(ssr)/./node_modules/refractor/lang/java.js\");\nvar refractorJavadoclike = __webpack_require__(/*! ./javadoclike.js */ \"(ssr)/./node_modules/refractor/lang/javadoclike.js\");\nmodule.exports = javadoc;\njavadoc.displayName = 'javadoc';\njavadoc.aliases = [];\nfunction javadoc(Prism) {\n  Prism.register(refractorJava);\n  Prism.register(refractorJavadoclike);\n  (function (Prism) {\n    var codeLinePattern = /(^(?:[\\t ]*(?:\\*\\s*)*))[^*\\s].*$/m;\n    var memberReference = /#\\s*\\w+(?:\\s*\\([^()]*\\))?/.source;\n    var reference = /(?:\\b[a-zA-Z]\\w+\\s*\\.\\s*)*\\b[A-Z]\\w*(?:\\s*<mem>)?|<mem>/.source.replace(/<mem>/g, function () {\n      return memberReference;\n    });\n    Prism.languages.javadoc = Prism.languages.extend('javadoclike', {});\n    Prism.languages.insertBefore('javadoc', 'keyword', {\n      reference: {\n        pattern: RegExp(/(@(?:exception|link|linkplain|see|throws|value)\\s+(?:\\*\\s*)?)/.source + '(?:' + reference + ')'),\n        lookbehind: true,\n        inside: {\n          \"function\": {\n            pattern: /(#\\s*)\\w+(?=\\s*\\()/,\n            lookbehind: true\n          },\n          field: {\n            pattern: /(#\\s*)\\w+/,\n            lookbehind: true\n          },\n          namespace: {\n            pattern: /\\b(?:[a-z]\\w*\\s*\\.\\s*)+/,\n            inside: {\n              punctuation: /\\./\n            }\n          },\n          'class-name': /\\b[A-Z]\\w*/,\n          keyword: Prism.languages.java.keyword,\n          punctuation: /[#()[\\],.]/\n        }\n      },\n      'class-name': {\n        // @param <T> the first generic type parameter\n        pattern: /(@param\\s+)<[A-Z]\\w*>/,\n        lookbehind: true,\n        inside: {\n          punctuation: /[.<>]/\n        }\n      },\n      'code-section': [{\n        pattern: /(\\{@code\\s+(?!\\s))(?:[^\\s{}]|\\s+(?![\\s}])|\\{(?:[^{}]|\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})*\\})*\\})+(?=\\s*\\})/,\n        lookbehind: true,\n        inside: {\n          code: {\n            // there can't be any HTML inside of {@code} tags\n            pattern: codeLinePattern,\n            lookbehind: true,\n            inside: Prism.languages.java,\n            alias: 'language-java'\n          }\n        }\n      }, {\n        pattern: /(<(code|pre|tt)>(?!<code>)\\s*)\\S(?:\\S|\\s+\\S)*?(?=\\s*<\\/\\2>)/,\n        lookbehind: true,\n        inside: {\n          line: {\n            pattern: codeLinePattern,\n            lookbehind: true,\n            inside: {\n              // highlight HTML tags and entities\n              tag: Prism.languages.markup.tag,\n              entity: Prism.languages.markup.entity,\n              code: {\n                // everything else is Java code\n                pattern: /.+/,\n                inside: Prism.languages.java,\n                alias: 'language-java'\n              }\n            }\n          }\n        }\n      }],\n      tag: Prism.languages.markup.tag,\n      entity: Prism.languages.markup.entity\n    });\n    Prism.languages.javadoclike.addSupport('java', Prism.languages.javadoc);\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/javadoc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/javadoclike.js":
/*!****************************************************!*\
  !*** ./node_modules/refractor/lang/javadoclike.js ***!
  \****************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = javadoclike;\njavadoclike.displayName = 'javadoclike';\njavadoclike.aliases = [];\nfunction javadoclike(Prism) {\n  ;\n  (function (Prism) {\n    var javaDocLike = Prism.languages.javadoclike = {\n      parameter: {\n        pattern: /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:arg|arguments|param)\\s+)\\w+/m,\n        lookbehind: true\n      },\n      keyword: {\n        // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n        // @word, {@word}\n        pattern: /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n        lookbehind: true\n      },\n      punctuation: /[{}]/\n    };\n    /**\n     * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\n     *\n     * @param {string} lang the language add doc comment support to.\n     * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\n     */\n    function docCommentSupport(lang, callback) {\n      var tokenName = 'doc-comment';\n      var grammar = Prism.languages[lang];\n      if (!grammar) {\n        return;\n      }\n      var token = grammar[tokenName];\n      if (!token) {\n        // add doc comment: /** */\n        var definition = {};\n        definition[tokenName] = {\n          pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n          lookbehind: true,\n          alias: 'comment'\n        };\n        grammar = Prism.languages.insertBefore(lang, 'comment', definition);\n        token = grammar[tokenName];\n      }\n      if (token instanceof RegExp) {\n        // convert regex to object\n        token = grammar[tokenName] = {\n          pattern: token\n        };\n      }\n      if (Array.isArray(token)) {\n        for (var i = 0, l = token.length; i < l; i++) {\n          if (token[i] instanceof RegExp) {\n            token[i] = {\n              pattern: token[i]\n            };\n          }\n          callback(token[i]);\n        }\n      } else {\n        callback(token);\n      }\n    }\n    /**\n     * Adds doc-comment support to the given languages for the given documentation language.\n     *\n     * @param {string[]|string} languages\n     * @param {Object} docLanguage\n     */\n    function addSupport(languages, docLanguage) {\n      if (typeof languages === 'string') {\n        languages = [languages];\n      }\n      languages.forEach(function (lang) {\n        docCommentSupport(lang, function (pattern) {\n          if (!pattern.inside) {\n            pattern.inside = {};\n          }\n          pattern.inside.rest = docLanguage;\n        });\n      });\n    }\n    Object.defineProperty(javaDocLike, 'addSupport', {\n      value: addSupport\n    });\n    javaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike);\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvamF2YWRvY2xpa2UuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxXQUFXO0FBQzVCQSxXQUFXLENBQUNDLFdBQVcsR0FBRyxhQUFhO0FBQ3ZDRCxXQUFXLENBQUNFLE9BQU8sR0FBRyxFQUFFO0FBQ3hCLFNBQVNGLFdBQVdBLENBQUNHLEtBQUssRUFBRTtFQUMxQjtFQUFDLENBQUMsVUFBVUEsS0FBSyxFQUFFO0lBQ2pCLElBQUlDLFdBQVcsR0FBSUQsS0FBSyxDQUFDRSxTQUFTLENBQUNMLFdBQVcsR0FBRztNQUMvQ00sU0FBUyxFQUFFO1FBQ1RDLE9BQU8sRUFDTCxnRUFBZ0U7UUFDbEVDLFVBQVUsRUFBRTtNQUNkLENBQUM7TUFDREMsT0FBTyxFQUFFO1FBQ1A7UUFDQTtRQUNBRixPQUFPLEVBQUUsdURBQXVEO1FBQ2hFQyxVQUFVLEVBQUU7TUFDZCxDQUFDO01BQ0RFLFdBQVcsRUFBRTtJQUNmLENBQUU7SUFDRjtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7SUFDSSxTQUFTQyxpQkFBaUJBLENBQUNDLElBQUksRUFBRUMsUUFBUSxFQUFFO01BQ3pDLElBQUlDLFNBQVMsR0FBRyxhQUFhO01BQzdCLElBQUlDLE9BQU8sR0FBR1osS0FBSyxDQUFDRSxTQUFTLENBQUNPLElBQUksQ0FBQztNQUNuQyxJQUFJLENBQUNHLE9BQU8sRUFBRTtRQUNaO01BQ0Y7TUFDQSxJQUFJQyxLQUFLLEdBQUdELE9BQU8sQ0FBQ0QsU0FBUyxDQUFDO01BQzlCLElBQUksQ0FBQ0UsS0FBSyxFQUFFO1FBQ1Y7UUFDQSxJQUFJQyxVQUFVLEdBQUcsQ0FBQyxDQUFDO1FBQ25CQSxVQUFVLENBQUNILFNBQVMsQ0FBQyxHQUFHO1VBQ3RCUCxPQUFPLEVBQUUsdUNBQXVDO1VBQ2hEQyxVQUFVLEVBQUUsSUFBSTtVQUNoQlUsS0FBSyxFQUFFO1FBQ1QsQ0FBQztRQUNESCxPQUFPLEdBQUdaLEtBQUssQ0FBQ0UsU0FBUyxDQUFDYyxZQUFZLENBQUNQLElBQUksRUFBRSxTQUFTLEVBQUVLLFVBQVUsQ0FBQztRQUNuRUQsS0FBSyxHQUFHRCxPQUFPLENBQUNELFNBQVMsQ0FBQztNQUM1QjtNQUNBLElBQUlFLEtBQUssWUFBWUksTUFBTSxFQUFFO1FBQzNCO1FBQ0FKLEtBQUssR0FBR0QsT0FBTyxDQUFDRCxTQUFTLENBQUMsR0FBRztVQUMzQlAsT0FBTyxFQUFFUztRQUNYLENBQUM7TUFDSDtNQUNBLElBQUlLLEtBQUssQ0FBQ0MsT0FBTyxDQUFDTixLQUFLLENBQUMsRUFBRTtRQUN4QixLQUFLLElBQUlPLENBQUMsR0FBRyxDQUFDLEVBQUVDLENBQUMsR0FBR1IsS0FBSyxDQUFDUyxNQUFNLEVBQUVGLENBQUMsR0FBR0MsQ0FBQyxFQUFFRCxDQUFDLEVBQUUsRUFBRTtVQUM1QyxJQUFJUCxLQUFLLENBQUNPLENBQUMsQ0FBQyxZQUFZSCxNQUFNLEVBQUU7WUFDOUJKLEtBQUssQ0FBQ08sQ0FBQyxDQUFDLEdBQUc7Y0FDVGhCLE9BQU8sRUFBRVMsS0FBSyxDQUFDTyxDQUFDO1lBQ2xCLENBQUM7VUFDSDtVQUNBVixRQUFRLENBQUNHLEtBQUssQ0FBQ08sQ0FBQyxDQUFDLENBQUM7UUFDcEI7TUFDRixDQUFDLE1BQU07UUFDTFYsUUFBUSxDQUFDRyxLQUFLLENBQUM7TUFDakI7SUFDRjtJQUNBO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtJQUNJLFNBQVNVLFVBQVVBLENBQUNyQixTQUFTLEVBQUVzQixXQUFXLEVBQUU7TUFDMUMsSUFBSSxPQUFPdEIsU0FBUyxLQUFLLFFBQVEsRUFBRTtRQUNqQ0EsU0FBUyxHQUFHLENBQUNBLFNBQVMsQ0FBQztNQUN6QjtNQUNBQSxTQUFTLENBQUN1QixPQUFPLENBQUMsVUFBVWhCLElBQUksRUFBRTtRQUNoQ0QsaUJBQWlCLENBQUNDLElBQUksRUFBRSxVQUFVTCxPQUFPLEVBQUU7VUFDekMsSUFBSSxDQUFDQSxPQUFPLENBQUNzQixNQUFNLEVBQUU7WUFDbkJ0QixPQUFPLENBQUNzQixNQUFNLEdBQUcsQ0FBQyxDQUFDO1VBQ3JCO1VBQ0F0QixPQUFPLENBQUNzQixNQUFNLENBQUNDLElBQUksR0FBR0gsV0FBVztRQUNuQyxDQUFDLENBQUM7TUFDSixDQUFDLENBQUM7SUFDSjtJQUNBSSxNQUFNLENBQUNDLGNBQWMsQ0FBQzVCLFdBQVcsRUFBRSxZQUFZLEVBQUU7TUFDL0M2QixLQUFLLEVBQUVQO0lBQ1QsQ0FBQyxDQUFDO0lBQ0Z0QixXQUFXLENBQUNzQixVQUFVLENBQUMsQ0FBQyxNQUFNLEVBQUUsWUFBWSxFQUFFLEtBQUssQ0FBQyxFQUFFdEIsV0FBVyxDQUFDO0VBQ3BFLENBQUMsRUFBRUQsS0FBSyxDQUFDO0FBQ1giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxqYXZhZG9jbGlrZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBqYXZhZG9jbGlrZVxuamF2YWRvY2xpa2UuZGlzcGxheU5hbWUgPSAnamF2YWRvY2xpa2UnXG5qYXZhZG9jbGlrZS5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIGphdmFkb2NsaWtlKFByaXNtKSB7XG4gIDsoZnVuY3Rpb24gKFByaXNtKSB7XG4gICAgdmFyIGphdmFEb2NMaWtlID0gKFByaXNtLmxhbmd1YWdlcy5qYXZhZG9jbGlrZSA9IHtcbiAgICAgIHBhcmFtZXRlcjoge1xuICAgICAgICBwYXR0ZXJuOlxuICAgICAgICAgIC8oXltcXHQgXSooPzpcXC97M318XFwqfFxcL1xcKlxcKilcXHMqQCg/OmFyZ3xhcmd1bWVudHN8cGFyYW0pXFxzKylcXHcrL20sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH0sXG4gICAgICBrZXl3b3JkOiB7XG4gICAgICAgIC8vIGtleXdvcmRzIGFyZSB0aGUgZmlyc3Qgd29yZCBpbiBhIGxpbmUgcHJlY2VkZWQgYmUgYW4gYEBgIG9yIHN1cnJvdW5kZWQgYnkgY3VybHkgYnJhY2VzLlxuICAgICAgICAvLyBAd29yZCwge0B3b3JkfVxuICAgICAgICBwYXR0ZXJuOiAvKF5bXFx0IF0qKD86XFwvezN9fFxcKnxcXC9cXCpcXCopXFxzKnxcXHspQFthLXpdW2EtekEtWi1dK1xcYi9tLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICB9LFxuICAgICAgcHVuY3R1YXRpb246IC9be31dL1xuICAgIH0pXG4gICAgLyoqXG4gICAgICogQWRkcyBkb2MgY29tbWVudCBzdXBwb3J0IHRvIHRoZSBnaXZlbiBsYW5ndWFnZSBhbmQgY2FsbHMgYSBnaXZlbiBjYWxsYmFjayBvbiBlYWNoIGRvYyBjb21tZW50IHBhdHRlcm4uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbGFuZyB0aGUgbGFuZ3VhZ2UgYWRkIGRvYyBjb21tZW50IHN1cHBvcnQgdG8uXG4gICAgICogQHBhcmFtIHsocGF0dGVybjoge2luc2lkZToge3Jlc3Q6IHVuZGVmaW5lZH19KSA9PiB2b2lkfSBjYWxsYmFjayB0aGUgZnVuY3Rpb24gY2FsbGVkIHdpdGggZWFjaCBkb2MgY29tbWVudCBwYXR0ZXJuIGFzIGFyZ3VtZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRvY0NvbW1lbnRTdXBwb3J0KGxhbmcsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgdG9rZW5OYW1lID0gJ2RvYy1jb21tZW50J1xuICAgICAgdmFyIGdyYW1tYXIgPSBQcmlzbS5sYW5ndWFnZXNbbGFuZ11cbiAgICAgIGlmICghZ3JhbW1hcikge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIHZhciB0b2tlbiA9IGdyYW1tYXJbdG9rZW5OYW1lXVxuICAgICAgaWYgKCF0b2tlbikge1xuICAgICAgICAvLyBhZGQgZG9jIGNvbW1lbnQ6IC8qKiAqL1xuICAgICAgICB2YXIgZGVmaW5pdGlvbiA9IHt9XG4gICAgICAgIGRlZmluaXRpb25bdG9rZW5OYW1lXSA9IHtcbiAgICAgICAgICBwYXR0ZXJuOiAvKF58W15cXFxcXSlcXC9cXCpcXCpbXi9dW1xcc1xcU10qPyg/OlxcKlxcL3wkKS8sXG4gICAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgICBhbGlhczogJ2NvbW1lbnQnXG4gICAgICAgIH1cbiAgICAgICAgZ3JhbW1hciA9IFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUobGFuZywgJ2NvbW1lbnQnLCBkZWZpbml0aW9uKVxuICAgICAgICB0b2tlbiA9IGdyYW1tYXJbdG9rZW5OYW1lXVxuICAgICAgfVxuICAgICAgaWYgKHRva2VuIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICAgIC8vIGNvbnZlcnQgcmVnZXggdG8gb2JqZWN0XG4gICAgICAgIHRva2VuID0gZ3JhbW1hclt0b2tlbk5hbWVdID0ge1xuICAgICAgICAgIHBhdHRlcm46IHRva2VuXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHRva2VuKSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHRva2VuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgIGlmICh0b2tlbltpXSBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgICAgICAgdG9rZW5baV0gPSB7XG4gICAgICAgICAgICAgIHBhdHRlcm46IHRva2VuW2ldXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhbGxiYWNrKHRva2VuW2ldKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjayh0b2tlbilcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkcyBkb2MtY29tbWVudCBzdXBwb3J0IHRvIHRoZSBnaXZlbiBsYW5ndWFnZXMgZm9yIHRoZSBnaXZlbiBkb2N1bWVudGF0aW9uIGxhbmd1YWdlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXXxzdHJpbmd9IGxhbmd1YWdlc1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkb2NMYW5ndWFnZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFkZFN1cHBvcnQobGFuZ3VhZ2VzLCBkb2NMYW5ndWFnZSkge1xuICAgICAgaWYgKHR5cGVvZiBsYW5ndWFnZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGxhbmd1YWdlcyA9IFtsYW5ndWFnZXNdXG4gICAgICB9XG4gICAgICBsYW5ndWFnZXMuZm9yRWFjaChmdW5jdGlvbiAobGFuZykge1xuICAgICAgICBkb2NDb21tZW50U3VwcG9ydChsYW5nLCBmdW5jdGlvbiAocGF0dGVybikge1xuICAgICAgICAgIGlmICghcGF0dGVybi5pbnNpZGUpIHtcbiAgICAgICAgICAgIHBhdHRlcm4uaW5zaWRlID0ge31cbiAgICAgICAgICB9XG4gICAgICAgICAgcGF0dGVybi5pbnNpZGUucmVzdCA9IGRvY0xhbmd1YWdlXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoamF2YURvY0xpa2UsICdhZGRTdXBwb3J0Jywge1xuICAgICAgdmFsdWU6IGFkZFN1cHBvcnRcbiAgICB9KVxuICAgIGphdmFEb2NMaWtlLmFkZFN1cHBvcnQoWydqYXZhJywgJ2phdmFzY3JpcHQnLCAncGhwJ10sIGphdmFEb2NMaWtlKVxuICB9KShQcmlzbSlcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiamF2YWRvY2xpa2UiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImphdmFEb2NMaWtlIiwibGFuZ3VhZ2VzIiwicGFyYW1ldGVyIiwicGF0dGVybiIsImxvb2tiZWhpbmQiLCJrZXl3b3JkIiwicHVuY3R1YXRpb24iLCJkb2NDb21tZW50U3VwcG9ydCIsImxhbmciLCJjYWxsYmFjayIsInRva2VuTmFtZSIsImdyYW1tYXIiLCJ0b2tlbiIsImRlZmluaXRpb24iLCJhbGlhcyIsImluc2VydEJlZm9yZSIsIlJlZ0V4cCIsIkFycmF5IiwiaXNBcnJheSIsImkiLCJsIiwibGVuZ3RoIiwiYWRkU3VwcG9ydCIsImRvY0xhbmd1YWdlIiwiZm9yRWFjaCIsImluc2lkZSIsInJlc3QiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/javadoclike.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/javascript.js":
/*!***************************************************!*\
  !*** ./node_modules/refractor/lang/javascript.js ***!
  \***************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = javascript;\njavascript.displayName = 'javascript';\njavascript.aliases = ['js'];\nfunction javascript(Prism) {\n  Prism.languages.javascript = Prism.languages.extend('clike', {\n    'class-name': [Prism.languages.clike['class-name'], {\n      pattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:constructor|prototype))/,\n      lookbehind: true\n    }],\n    keyword: [{\n      pattern: /((?:^|\\})\\s*)catch\\b/,\n      lookbehind: true\n    }, {\n      pattern: /(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|assert(?=\\s*\\{)|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\\s*(?:\\{|$))|for|from(?=\\s*(?:['\"]|$))|function|(?:get|set)(?=\\s*(?:[#\\[$\\w\\xA0-\\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n      lookbehind: true\n    }],\n    // Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n    \"function\": /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n    number: {\n      pattern: RegExp(/(^|[^\\w$])/.source + '(?:' + (\n      // constant\n      /NaN|Infinity/.source + '|' +\n      // binary integer\n      /0[bB][01]+(?:_[01]+)*n?/.source + '|' +\n      // octal integer\n      /0[oO][0-7]+(?:_[0-7]+)*n?/.source + '|' +\n      // hexadecimal integer\n      /0[xX][\\dA-Fa-f]+(?:_[\\dA-Fa-f]+)*n?/.source + '|' +\n      // decimal bigint\n      /\\d+(?:_\\d+)*n/.source + '|' +\n      // decimal number (integer or float) but no bigint\n      /(?:\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\.\\d+(?:_\\d+)*)(?:[Ee][+-]?\\d+(?:_\\d+)*)?/.source) + ')' + /(?![\\w$])/.source),\n      lookbehind: true\n    },\n    operator: /--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/\n  });\n  Prism.languages.javascript['class-name'][0].pattern = /(\\b(?:class|extends|implements|instanceof|interface|new)\\s+)[\\w.\\\\]+/;\n  Prism.languages.insertBefore('javascript', 'keyword', {\n    regex: {\n      // eslint-disable-next-line regexp/no-dupe-characters-character-class\n      pattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'regex-source': {\n          pattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\n          lookbehind: true,\n          alias: 'language-regex',\n          inside: Prism.languages.regex\n        },\n        'regex-delimiter': /^\\/|\\/$/,\n        'regex-flags': /^[a-z]+$/\n      }\n    },\n    // This must be declared before keyword because we use \"function\" inside the look-forward\n    'function-variable': {\n      pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,\n      alias: 'function'\n    },\n    parameter: [{\n      pattern: /(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/,\n      lookbehind: true,\n      inside: Prism.languages.javascript\n    }, {\n      pattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i,\n      lookbehind: true,\n      inside: Prism.languages.javascript\n    }, {\n      pattern: /(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/,\n      lookbehind: true,\n      inside: Prism.languages.javascript\n    }, {\n      pattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/,\n      lookbehind: true,\n      inside: Prism.languages.javascript\n    }],\n    constant: /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n  });\n  Prism.languages.insertBefore('javascript', 'string', {\n    hashbang: {\n      pattern: /^#!.*/,\n      greedy: true,\n      alias: 'comment'\n    },\n    'template-string': {\n      pattern: /`(?:\\\\[\\s\\S]|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}|(?!\\$\\{)[^\\\\`])*`/,\n      greedy: true,\n      inside: {\n        'template-punctuation': {\n          pattern: /^`|`$/,\n          alias: 'string'\n        },\n        interpolation: {\n          pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\n          lookbehind: true,\n          inside: {\n            'interpolation-punctuation': {\n              pattern: /^\\$\\{|\\}$/,\n              alias: 'punctuation'\n            },\n            rest: Prism.languages.javascript\n          }\n        },\n        string: /[\\s\\S]+/\n      }\n    },\n    'string-property': {\n      pattern: /((?:^|[,{])[ \\t]*)([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2(?=\\s*:)/m,\n      lookbehind: true,\n      greedy: true,\n      alias: 'property'\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'operator', {\n    'literal-property': {\n      pattern: /((?:^|[,{])[ \\t]*)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*:)/m,\n      lookbehind: true,\n      alias: 'property'\n    }\n  });\n  if (Prism.languages.markup) {\n    Prism.languages.markup.tag.addInlined('script', 'javascript'); // add attribute support for all DOM events.\n    // https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events\n    Prism.languages.markup.tag.addAttribute(/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source, 'javascript');\n  }\n  Prism.languages.js = Prism.languages.javascript;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/javascript.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/javastacktrace.js":
/*!*******************************************************!*\
  !*** ./node_modules/refractor/lang/javastacktrace.js ***!
  \*******************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = javastacktrace;\njavastacktrace.displayName = 'javastacktrace';\njavastacktrace.aliases = [];\nfunction javastacktrace(Prism) {\n  // Specification:\n  // https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/lang/Throwable.html#printStackTrace()\n  Prism.languages.javastacktrace = {\n    // java.sql.SQLException: Violation of unique constraint MY_ENTITY_UK_1: duplicate value(s) for column(s) MY_COLUMN in statement [...]\n    // Caused by: java.sql.SQLException: Violation of unique constraint MY_ENTITY_UK_1: duplicate value(s) for column(s) MY_COLUMN in statement [...]\n    // Caused by: com.example.myproject.MyProjectServletException\n    // Caused by: MidLevelException: LowLevelException\n    // Suppressed: Resource$CloseFailException: Resource ID = 0\n    summary: {\n      pattern: /^([\\t ]*)(?:(?:Caused by:|Suppressed:|Exception in thread \"[^\"]*\")[\\t ]+)?[\\w$.]+(?::.*)?$/m,\n      lookbehind: true,\n      inside: {\n        keyword: {\n          pattern: /^([\\t ]*)(?:(?:Caused by|Suppressed)(?=:)|Exception in thread)/m,\n          lookbehind: true\n        },\n        // the current thread if the summary starts with 'Exception in thread'\n        string: {\n          pattern: /^(\\s*)\"[^\"]*\"/,\n          lookbehind: true\n        },\n        exceptions: {\n          pattern: /^(:?\\s*)[\\w$.]+(?=:|$)/,\n          lookbehind: true,\n          inside: {\n            'class-name': /[\\w$]+$/,\n            namespace: /\\b[a-z]\\w*\\b/,\n            punctuation: /\\./\n          }\n        },\n        message: {\n          pattern: /(:\\s*)\\S.*/,\n          lookbehind: true,\n          alias: 'string'\n        },\n        punctuation: /:/\n      }\n    },\n    // at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1166)\n    // at org.hsqldb.jdbc.Util.throwError(Unknown Source) here could be some notes\n    // at java.base/java.lang.Class.forName0(Native Method)\n    // at Util.<init>(Unknown Source)\n    // at com.foo.loader/foo@9.0/com.foo.Main.run(Main.java:101)\n    // at com.foo.loader//com.foo.bar.App.run(App.java:12)\n    // at acme@2.1/org.acme.Lib.test(Lib.java:80)\n    // at MyClass.mash(MyClass.java:9)\n    //\n    // More information:\n    // https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/lang/StackTraceElement.html#toString()\n    //\n    // A valid Java module name is defined as:\n    //   \"A module name consists of one or more Java identifiers (§3.8) separated by \".\" tokens.\"\n    // https://docs.oracle.com/javase/specs/jls/se9/html/jls-6.html#jls-ModuleName\n    //\n    // A Java module version is defined by this class:\n    // https://docs.oracle.com/javase/9/docs/api/java/lang/module/ModuleDescriptor.Version.html\n    // This is the implementation of the `parse` method in JDK13:\n    // https://github.com/matcdac/jdk/blob/2305df71d1b7710266ae0956d73927a225132c0f/src/java.base/share/classes/java/lang/module/ModuleDescriptor.java#L1108\n    // However, to keep this simple, a version will be matched by the pattern /@[\\w$.+-]*/.\n    'stack-frame': {\n      pattern: /^([\\t ]*)at (?:[\\w$./]|@[\\w$.+-]*\\/)+(?:<init>)?\\([^()]*\\)/m,\n      lookbehind: true,\n      inside: {\n        keyword: {\n          pattern: /^(\\s*)at(?= )/,\n          lookbehind: true\n        },\n        source: [\n        // (Main.java:15)\n        // (Main.scala:15)\n        {\n          pattern: /(\\()\\w+\\.\\w+:\\d+(?=\\))/,\n          lookbehind: true,\n          inside: {\n            file: /^\\w+\\.\\w+/,\n            punctuation: /:/,\n            'line-number': {\n              pattern: /\\b\\d+\\b/,\n              alias: 'number'\n            }\n          }\n        },\n        // (Unknown Source)\n        // (Native Method)\n        // (...something...)\n        {\n          pattern: /(\\()[^()]*(?=\\))/,\n          lookbehind: true,\n          inside: {\n            keyword: /^(?:Native Method|Unknown Source)$/\n          }\n        }],\n        'class-name': /[\\w$]+(?=\\.(?:<init>|[\\w$]+)\\()/,\n        \"function\": /(?:<init>|[\\w$]+)(?=\\()/,\n        'class-loader': {\n          pattern: /(\\s)[a-z]\\w*(?:\\.[a-z]\\w*)*(?=\\/[\\w@$.]*\\/)/,\n          lookbehind: true,\n          alias: 'namespace',\n          inside: {\n            punctuation: /\\./\n          }\n        },\n        module: {\n          pattern: /([\\s/])[a-z]\\w*(?:\\.[a-z]\\w*)*(?:@[\\w$.+-]*)?(?=\\/)/,\n          lookbehind: true,\n          inside: {\n            version: {\n              pattern: /(@)[\\s\\S]+/,\n              lookbehind: true,\n              alias: 'number'\n            },\n            punctuation: /[@.]/\n          }\n        },\n        namespace: {\n          pattern: /(?:\\b[a-z]\\w*\\.)+/,\n          inside: {\n            punctuation: /\\./\n          }\n        },\n        punctuation: /[()/.]/\n      }\n    },\n    // ... 32 more\n    // ... 32 common frames omitted\n    more: {\n      pattern: /^([\\t ]*)\\.{3} \\d+ [a-z]+(?: [a-z]+)*/m,\n      lookbehind: true,\n      inside: {\n        punctuation: /\\.{3}/,\n        number: /\\d+/,\n        keyword: /\\b[a-z]+(?: [a-z]+)*\\b/\n      }\n    }\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/javastacktrace.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/jexl.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/jexl.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = jexl;\njexl.displayName = 'jexl';\njexl.aliases = [];\nfunction jexl(Prism) {\n  Prism.languages.jexl = {\n    string: /([\"'])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n    transform: {\n      pattern: /(\\|\\s*)[a-zA-Zа-яА-Я_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u00FF$][\\wа-яА-Я\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u00FF$]*/,\n      alias: 'function',\n      lookbehind: true\n    },\n    \"function\": /[a-zA-Zа-яА-Я_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u00FF$][\\wа-яА-Я\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u00FF$]*\\s*(?=\\()/,\n    number: /\\b\\d+(?:\\.\\d+)?\\b|\\B\\.\\d+\\b/,\n    operator: /[<>!]=?|-|\\+|&&|==|\\|\\|?|\\/\\/?|[?:*^%]/,\n    \"boolean\": /\\b(?:false|true)\\b/,\n    keyword: /\\bin\\b/,\n    punctuation: /[{}[\\](),.]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvamV4bC5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLElBQUk7QUFDckJBLElBQUksQ0FBQ0MsV0FBVyxHQUFHLE1BQU07QUFDekJELElBQUksQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDakIsU0FBU0YsSUFBSUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ25CQSxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osSUFBSSxHQUFHO0lBQ3JCSyxNQUFNLEVBQUUsbUNBQW1DO0lBQzNDQyxTQUFTLEVBQUU7TUFDVEMsT0FBTyxFQUNMLG1IQUFtSDtNQUNySEMsS0FBSyxFQUFFLFVBQVU7TUFDakJDLFVBQVUsRUFBRTtJQUNkLENBQUM7SUFDRCxZQUNFLHFIQUFxSDtJQUN2SEMsTUFBTSxFQUFFLDZCQUE2QjtJQUNyQ0MsUUFBUSxFQUFFLHdDQUF3QztJQUNsRCxXQUFTLG9CQUFvQjtJQUM3QkMsT0FBTyxFQUFFLFFBQVE7SUFDakJDLFdBQVcsRUFBRTtFQUNmLENBQUM7QUFDSCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXGpleGwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gamV4bFxuamV4bC5kaXNwbGF5TmFtZSA9ICdqZXhsJ1xuamV4bC5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIGpleGwoUHJpc20pIHtcbiAgUHJpc20ubGFuZ3VhZ2VzLmpleGwgPSB7XG4gICAgc3RyaW5nOiAvKFtcIiddKSg/OlxcXFxbXFxzXFxTXXwoPyFcXDEpW15cXFxcXSkqXFwxLyxcbiAgICB0cmFuc2Zvcm06IHtcbiAgICAgIHBhdHRlcm46XG4gICAgICAgIC8oXFx8XFxzKilbYS16QS1a0LAt0Y/QkC3Qr19cXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAwRkYkXVtcXHfQsC3Rj9CQLdCvXFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMEZGJF0qLyxcbiAgICAgIGFsaWFzOiAnZnVuY3Rpb24nLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgIH0sXG4gICAgZnVuY3Rpb246XG4gICAgICAvW2EtekEtWtCwLdGP0JAt0K9fXFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMEZGJF1bXFx30LAt0Y/QkC3Qr1xcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDBGRiRdKlxccyooPz1cXCgpLyxcbiAgICBudW1iZXI6IC9cXGJcXGQrKD86XFwuXFxkKyk/XFxifFxcQlxcLlxcZCtcXGIvLFxuICAgIG9wZXJhdG9yOiAvWzw+IV09P3wtfFxcK3wmJnw9PXxcXHxcXHw/fFxcL1xcLz98Wz86Kl4lXS8sXG4gICAgYm9vbGVhbjogL1xcYig/OmZhbHNlfHRydWUpXFxiLyxcbiAgICBrZXl3b3JkOiAvXFxiaW5cXGIvLFxuICAgIHB1bmN0dWF0aW9uOiAvW3t9W1xcXSgpLC5dL1xuICB9XG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImpleGwiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImxhbmd1YWdlcyIsInN0cmluZyIsInRyYW5zZm9ybSIsInBhdHRlcm4iLCJhbGlhcyIsImxvb2tiZWhpbmQiLCJudW1iZXIiLCJvcGVyYXRvciIsImtleXdvcmQiLCJwdW5jdHVhdGlvbiJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/jexl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/jolie.js":
/*!**********************************************!*\
  !*** ./node_modules/refractor/lang/jolie.js ***!
  \**********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = jolie;\njolie.displayName = 'jolie';\njolie.aliases = [];\nfunction jolie(Prism) {\n  Prism.languages.jolie = Prism.languages.extend('clike', {\n    string: {\n      pattern: /(^|[^\\\\])\"(?:\\\\[\\s\\S]|[^\"\\\\])*\"/,\n      lookbehind: true,\n      greedy: true\n    },\n    'class-name': {\n      pattern: /((?:\\b(?:as|courier|embed|in|inputPort|outputPort|service)\\b|@)[ \\t]*)\\w+/,\n      lookbehind: true\n    },\n    keyword: /\\b(?:as|cH|comp|concurrent|constants|courier|cset|csets|default|define|else|embed|embedded|execution|exit|extender|for|foreach|forward|from|global|if|import|in|include|init|inputPort|install|instanceof|interface|is_defined|linkIn|linkOut|main|new|nullProcess|outputPort|over|private|provide|public|scope|sequential|service|single|spawn|synchronized|this|throw|throws|type|undef|until|while|with)\\b/,\n    \"function\": /\\b[a-z_]\\w*(?=[ \\t]*[@(])/i,\n    number: /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?l?/i,\n    operator: /-[-=>]?|\\+[+=]?|<[<=]?|[>=*!]=?|&&|\\|\\||[?\\/%^@|]/,\n    punctuation: /[()[\\]{},;.:]/,\n    builtin: /\\b(?:Byte|any|bool|char|double|enum|float|int|length|long|ranges|regex|string|undefined|void)\\b/\n  });\n  Prism.languages.insertBefore('jolie', 'keyword', {\n    aggregates: {\n      pattern: /(\\bAggregates\\s*:\\s*)(?:\\w+(?:\\s+with\\s+\\w+)?\\s*,\\s*)*\\w+(?:\\s+with\\s+\\w+)?/,\n      lookbehind: true,\n      inside: {\n        keyword: /\\bwith\\b/,\n        'class-name': /\\w+/,\n        punctuation: /,/\n      }\n    },\n    redirects: {\n      pattern: /(\\bRedirects\\s*:\\s*)(?:\\w+\\s*=>\\s*\\w+\\s*,\\s*)*(?:\\w+\\s*=>\\s*\\w+)/,\n      lookbehind: true,\n      inside: {\n        punctuation: /,/,\n        'class-name': /\\w+/,\n        operator: /=>/\n      }\n    },\n    property: {\n      pattern: /\\b(?:Aggregates|[Ii]nterfaces|Java|Javascript|Jolie|[Ll]ocation|OneWay|[Pp]rotocol|Redirects|RequestResponse)\\b(?=[ \\t]*:)/\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvam9saWUuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxLQUFLO0FBQ3RCQSxLQUFLLENBQUNDLFdBQVcsR0FBRyxPQUFPO0FBQzNCRCxLQUFLLENBQUNFLE9BQU8sR0FBRyxFQUFFO0FBQ2xCLFNBQVNGLEtBQUtBLENBQUNHLEtBQUssRUFBRTtFQUNwQkEsS0FBSyxDQUFDQyxTQUFTLENBQUNKLEtBQUssR0FBR0csS0FBSyxDQUFDQyxTQUFTLENBQUNDLE1BQU0sQ0FBQyxPQUFPLEVBQUU7SUFDdERDLE1BQU0sRUFBRTtNQUNOQyxPQUFPLEVBQUUsaUNBQWlDO01BQzFDQyxVQUFVLEVBQUUsSUFBSTtNQUNoQkMsTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUNELFlBQVksRUFBRTtNQUNaRixPQUFPLEVBQ0wsMkVBQTJFO01BQzdFQyxVQUFVLEVBQUU7SUFDZCxDQUFDO0lBQ0RFLE9BQU8sRUFDTCwrWUFBK1k7SUFDalosWUFBVSw0QkFBNEI7SUFDdENDLE1BQU0sRUFBRSw4Q0FBOEM7SUFDdERDLFFBQVEsRUFBRSxtREFBbUQ7SUFDN0RDLFdBQVcsRUFBRSxlQUFlO0lBQzVCQyxPQUFPLEVBQ0w7RUFDSixDQUFDLENBQUM7RUFDRlgsS0FBSyxDQUFDQyxTQUFTLENBQUNXLFlBQVksQ0FBQyxPQUFPLEVBQUUsU0FBUyxFQUFFO0lBQy9DQyxVQUFVLEVBQUU7TUFDVlQsT0FBTyxFQUNMLDZFQUE2RTtNQUMvRUMsVUFBVSxFQUFFLElBQUk7TUFDaEJTLE1BQU0sRUFBRTtRQUNOUCxPQUFPLEVBQUUsVUFBVTtRQUNuQixZQUFZLEVBQUUsS0FBSztRQUNuQkcsV0FBVyxFQUFFO01BQ2Y7SUFDRixDQUFDO0lBQ0RLLFNBQVMsRUFBRTtNQUNUWCxPQUFPLEVBQ0wsa0VBQWtFO01BQ3BFQyxVQUFVLEVBQUUsSUFBSTtNQUNoQlMsTUFBTSxFQUFFO1FBQ05KLFdBQVcsRUFBRSxHQUFHO1FBQ2hCLFlBQVksRUFBRSxLQUFLO1FBQ25CRCxRQUFRLEVBQUU7TUFDWjtJQUNGLENBQUM7SUFDRE8sUUFBUSxFQUFFO01BQ1JaLE9BQU8sRUFDTDtJQUNKO0VBQ0YsQ0FBQyxDQUFDO0FBQ0oiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxqb2xpZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBqb2xpZVxuam9saWUuZGlzcGxheU5hbWUgPSAnam9saWUnXG5qb2xpZS5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIGpvbGllKFByaXNtKSB7XG4gIFByaXNtLmxhbmd1YWdlcy5qb2xpZSA9IFByaXNtLmxhbmd1YWdlcy5leHRlbmQoJ2NsaWtlJywge1xuICAgIHN0cmluZzoge1xuICAgICAgcGF0dGVybjogLyhefFteXFxcXF0pXCIoPzpcXFxcW1xcc1xcU118W15cIlxcXFxdKSpcIi8sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICAnY2xhc3MtbmFtZSc6IHtcbiAgICAgIHBhdHRlcm46XG4gICAgICAgIC8oKD86XFxiKD86YXN8Y291cmllcnxlbWJlZHxpbnxpbnB1dFBvcnR8b3V0cHV0UG9ydHxzZXJ2aWNlKVxcYnxAKVsgXFx0XSopXFx3Ky8sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgfSxcbiAgICBrZXl3b3JkOlxuICAgICAgL1xcYig/OmFzfGNIfGNvbXB8Y29uY3VycmVudHxjb25zdGFudHN8Y291cmllcnxjc2V0fGNzZXRzfGRlZmF1bHR8ZGVmaW5lfGVsc2V8ZW1iZWR8ZW1iZWRkZWR8ZXhlY3V0aW9ufGV4aXR8ZXh0ZW5kZXJ8Zm9yfGZvcmVhY2h8Zm9yd2FyZHxmcm9tfGdsb2JhbHxpZnxpbXBvcnR8aW58aW5jbHVkZXxpbml0fGlucHV0UG9ydHxpbnN0YWxsfGluc3RhbmNlb2Z8aW50ZXJmYWNlfGlzX2RlZmluZWR8bGlua0lufGxpbmtPdXR8bWFpbnxuZXd8bnVsbFByb2Nlc3N8b3V0cHV0UG9ydHxvdmVyfHByaXZhdGV8cHJvdmlkZXxwdWJsaWN8c2NvcGV8c2VxdWVudGlhbHxzZXJ2aWNlfHNpbmdsZXxzcGF3bnxzeW5jaHJvbml6ZWR8dGhpc3x0aHJvd3x0aHJvd3N8dHlwZXx1bmRlZnx1bnRpbHx3aGlsZXx3aXRoKVxcYi8sXG4gICAgZnVuY3Rpb246IC9cXGJbYS16X11cXHcqKD89WyBcXHRdKltAKF0pL2ksXG4gICAgbnVtYmVyOiAvKD86XFxiXFxkKyg/OlxcLlxcZCopP3xcXEJcXC5cXGQrKSg/OmVbKy1dP1xcZCspP2w/L2ksXG4gICAgb3BlcmF0b3I6IC8tWy09Pl0/fFxcK1srPV0/fDxbPD1dP3xbPj0qIV09P3wmJnxcXHxcXHx8Wz9cXC8lXkB8XS8sXG4gICAgcHVuY3R1YXRpb246IC9bKClbXFxde30sOy46XS8sXG4gICAgYnVpbHRpbjpcbiAgICAgIC9cXGIoPzpCeXRlfGFueXxib29sfGNoYXJ8ZG91YmxlfGVudW18ZmxvYXR8aW50fGxlbmd0aHxsb25nfHJhbmdlc3xyZWdleHxzdHJpbmd8dW5kZWZpbmVkfHZvaWQpXFxiL1xuICB9KVxuICBQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdqb2xpZScsICdrZXl3b3JkJywge1xuICAgIGFnZ3JlZ2F0ZXM6IHtcbiAgICAgIHBhdHRlcm46XG4gICAgICAgIC8oXFxiQWdncmVnYXRlc1xccyo6XFxzKikoPzpcXHcrKD86XFxzK3dpdGhcXHMrXFx3Kyk/XFxzKixcXHMqKSpcXHcrKD86XFxzK3dpdGhcXHMrXFx3Kyk/LyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBpbnNpZGU6IHtcbiAgICAgICAga2V5d29yZDogL1xcYndpdGhcXGIvLFxuICAgICAgICAnY2xhc3MtbmFtZSc6IC9cXHcrLyxcbiAgICAgICAgcHVuY3R1YXRpb246IC8sL1xuICAgICAgfVxuICAgIH0sXG4gICAgcmVkaXJlY3RzOiB7XG4gICAgICBwYXR0ZXJuOlxuICAgICAgICAvKFxcYlJlZGlyZWN0c1xccyo6XFxzKikoPzpcXHcrXFxzKj0+XFxzKlxcdytcXHMqLFxccyopKig/OlxcdytcXHMqPT5cXHMqXFx3KykvLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGluc2lkZToge1xuICAgICAgICBwdW5jdHVhdGlvbjogLywvLFxuICAgICAgICAnY2xhc3MtbmFtZSc6IC9cXHcrLyxcbiAgICAgICAgb3BlcmF0b3I6IC89Pi9cbiAgICAgIH1cbiAgICB9LFxuICAgIHByb3BlcnR5OiB7XG4gICAgICBwYXR0ZXJuOlxuICAgICAgICAvXFxiKD86QWdncmVnYXRlc3xbSWldbnRlcmZhY2VzfEphdmF8SmF2YXNjcmlwdHxKb2xpZXxbTGxdb2NhdGlvbnxPbmVXYXl8W1BwXXJvdG9jb2x8UmVkaXJlY3RzfFJlcXVlc3RSZXNwb25zZSlcXGIoPz1bIFxcdF0qOikvXG4gICAgfVxuICB9KVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJqb2xpZSIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwiZXh0ZW5kIiwic3RyaW5nIiwicGF0dGVybiIsImxvb2tiZWhpbmQiLCJncmVlZHkiLCJrZXl3b3JkIiwibnVtYmVyIiwib3BlcmF0b3IiLCJwdW5jdHVhdGlvbiIsImJ1aWx0aW4iLCJpbnNlcnRCZWZvcmUiLCJhZ2dyZWdhdGVzIiwiaW5zaWRlIiwicmVkaXJlY3RzIiwicHJvcGVydHkiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/jolie.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/jq.js":
/*!*******************************************!*\
  !*** ./node_modules/refractor/lang/jq.js ***!
  \*******************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = jq;\njq.displayName = 'jq';\njq.aliases = [];\nfunction jq(Prism) {\n  ;\n  (function (Prism) {\n    var interpolation = /\\\\\\((?:[^()]|\\([^()]*\\))*\\)/.source;\n    var string = RegExp(/(^|[^\\\\])\"(?:[^\"\\r\\n\\\\]|\\\\[^\\r\\n(]|__)*\"/.source.replace(/__/g, function () {\n      return interpolation;\n    }));\n    var stringInterpolation = {\n      interpolation: {\n        pattern: RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + interpolation),\n        lookbehind: true,\n        inside: {\n          content: {\n            pattern: /^(\\\\\\()[\\s\\S]+(?=\\)$)/,\n            lookbehind: true,\n            inside: null // see below\n          },\n\n          punctuation: /^\\\\\\(|\\)$/\n        }\n      }\n    };\n    var jq = Prism.languages.jq = {\n      comment: /#.*/,\n      property: {\n        pattern: RegExp(string.source + /(?=\\s*:(?!:))/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: stringInterpolation\n      },\n      string: {\n        pattern: string,\n        lookbehind: true,\n        greedy: true,\n        inside: stringInterpolation\n      },\n      \"function\": {\n        pattern: /(\\bdef\\s+)[a-z_]\\w+/i,\n        lookbehind: true\n      },\n      variable: /\\B\\$\\w+/,\n      'property-literal': {\n        pattern: /\\b[a-z_]\\w*(?=\\s*:(?!:))/i,\n        alias: 'property'\n      },\n      keyword: /\\b(?:as|break|catch|def|elif|else|end|foreach|if|import|include|label|module|modulemeta|null|reduce|then|try|while)\\b/,\n      \"boolean\": /\\b(?:false|true)\\b/,\n      number: /(?:\\b\\d+\\.|\\B\\.)?\\b\\d+(?:[eE][+-]?\\d+)?\\b/,\n      operator: [{\n        pattern: /\\|=?/,\n        alias: 'pipe'\n      }, /\\.\\.|[!=<>]?=|\\?\\/\\/|\\/\\/=?|[-+*/%]=?|[<>?]|\\b(?:and|not|or)\\b/],\n      'c-style-function': {\n        pattern: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n        alias: 'function'\n      },\n      punctuation: /::|[()\\[\\]{},:;]|\\.(?=\\s*[\\[\\w$])/,\n      dot: {\n        pattern: /\\./,\n        alias: 'important'\n      }\n    };\n    stringInterpolation.interpolation.inside.content.inside = jq;\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvanEuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxFQUFFO0FBQ25CQSxFQUFFLENBQUNDLFdBQVcsR0FBRyxJQUFJO0FBQ3JCRCxFQUFFLENBQUNFLE9BQU8sR0FBRyxFQUFFO0FBQ2YsU0FBU0YsRUFBRUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ2pCO0VBQUMsQ0FBQyxVQUFVQSxLQUFLLEVBQUU7SUFDakIsSUFBSUMsYUFBYSxHQUFHLDZCQUE2QixDQUFDQyxNQUFNO0lBQ3hELElBQUlDLE1BQU0sR0FBR0MsTUFBTSxDQUNqQiwwQ0FBMEMsQ0FBQ0YsTUFBTSxDQUFDRyxPQUFPLENBQ3ZELEtBQUssRUFDTCxZQUFZO01BQ1YsT0FBT0osYUFBYTtJQUN0QixDQUNGLENBQ0YsQ0FBQztJQUNELElBQUlLLG1CQUFtQixHQUFHO01BQ3hCTCxhQUFhLEVBQUU7UUFDYk0sT0FBTyxFQUFFSCxNQUFNLENBQUMseUJBQXlCLENBQUNGLE1BQU0sR0FBR0QsYUFBYSxDQUFDO1FBQ2pFTyxVQUFVLEVBQUUsSUFBSTtRQUNoQkMsTUFBTSxFQUFFO1VBQ05DLE9BQU8sRUFBRTtZQUNQSCxPQUFPLEVBQUUsdUJBQXVCO1lBQ2hDQyxVQUFVLEVBQUUsSUFBSTtZQUNoQkMsTUFBTSxFQUFFLElBQUksQ0FBQztVQUNmLENBQUM7O1VBQ0RFLFdBQVcsRUFBRTtRQUNmO01BQ0Y7SUFDRixDQUFDO0lBQ0QsSUFBSWQsRUFBRSxHQUFJRyxLQUFLLENBQUNZLFNBQVMsQ0FBQ2YsRUFBRSxHQUFHO01BQzdCZ0IsT0FBTyxFQUFFLEtBQUs7TUFDZEMsUUFBUSxFQUFFO1FBQ1JQLE9BQU8sRUFBRUgsTUFBTSxDQUFDRCxNQUFNLENBQUNELE1BQU0sR0FBRyxlQUFlLENBQUNBLE1BQU0sQ0FBQztRQUN2RE0sVUFBVSxFQUFFLElBQUk7UUFDaEJPLE1BQU0sRUFBRSxJQUFJO1FBQ1pOLE1BQU0sRUFBRUg7TUFDVixDQUFDO01BQ0RILE1BQU0sRUFBRTtRQUNOSSxPQUFPLEVBQUVKLE1BQU07UUFDZkssVUFBVSxFQUFFLElBQUk7UUFDaEJPLE1BQU0sRUFBRSxJQUFJO1FBQ1pOLE1BQU0sRUFBRUg7TUFDVixDQUFDO01BQ0QsWUFBVTtRQUNSQyxPQUFPLEVBQUUsc0JBQXNCO1FBQy9CQyxVQUFVLEVBQUU7TUFDZCxDQUFDO01BQ0RRLFFBQVEsRUFBRSxTQUFTO01BQ25CLGtCQUFrQixFQUFFO1FBQ2xCVCxPQUFPLEVBQUUsMkJBQTJCO1FBQ3BDVSxLQUFLLEVBQUU7TUFDVCxDQUFDO01BQ0RDLE9BQU8sRUFDTCx1SEFBdUg7TUFDekgsV0FBUyxvQkFBb0I7TUFDN0JDLE1BQU0sRUFBRSwyQ0FBMkM7TUFDbkRDLFFBQVEsRUFBRSxDQUNSO1FBQ0ViLE9BQU8sRUFBRSxNQUFNO1FBQ2ZVLEtBQUssRUFBRTtNQUNULENBQUMsRUFDRCxnRUFBZ0UsQ0FDakU7TUFDRCxrQkFBa0IsRUFBRTtRQUNsQlYsT0FBTyxFQUFFLHVCQUF1QjtRQUNoQ1UsS0FBSyxFQUFFO01BQ1QsQ0FBQztNQUNETixXQUFXLEVBQUUsbUNBQW1DO01BQ2hEVSxHQUFHLEVBQUU7UUFDSGQsT0FBTyxFQUFFLElBQUk7UUFDYlUsS0FBSyxFQUFFO01BQ1Q7SUFDRixDQUFFO0lBQ0ZYLG1CQUFtQixDQUFDTCxhQUFhLENBQUNRLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDRCxNQUFNLEdBQUdaLEVBQUU7RUFDOUQsQ0FBQyxFQUFFRyxLQUFLLENBQUM7QUFDWCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXGpxLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGpxXG5qcS5kaXNwbGF5TmFtZSA9ICdqcSdcbmpxLmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24ganEoUHJpc20pIHtcbiAgOyhmdW5jdGlvbiAoUHJpc20pIHtcbiAgICB2YXIgaW50ZXJwb2xhdGlvbiA9IC9cXFxcXFwoKD86W14oKV18XFwoW14oKV0qXFwpKSpcXCkvLnNvdXJjZVxuICAgIHZhciBzdHJpbmcgPSBSZWdFeHAoXG4gICAgICAvKF58W15cXFxcXSlcIig/OlteXCJcXHJcXG5cXFxcXXxcXFxcW15cXHJcXG4oXXxfXykqXCIvLnNvdXJjZS5yZXBsYWNlKFxuICAgICAgICAvX18vZyxcbiAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBpbnRlcnBvbGF0aW9uXG4gICAgICAgIH1cbiAgICAgIClcbiAgICApXG4gICAgdmFyIHN0cmluZ0ludGVycG9sYXRpb24gPSB7XG4gICAgICBpbnRlcnBvbGF0aW9uOiB7XG4gICAgICAgIHBhdHRlcm46IFJlZ0V4cCgvKCg/Ol58W15cXFxcXSkoPzpcXFxcezJ9KSopLy5zb3VyY2UgKyBpbnRlcnBvbGF0aW9uKSxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgcGF0dGVybjogL14oXFxcXFxcKClbXFxzXFxTXSsoPz1cXCkkKS8sXG4gICAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAgICAgaW5zaWRlOiBudWxsIC8vIHNlZSBiZWxvd1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcHVuY3R1YXRpb246IC9eXFxcXFxcKHxcXCkkL1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBqcSA9IChQcmlzbS5sYW5ndWFnZXMuanEgPSB7XG4gICAgICBjb21tZW50OiAvIy4qLyxcbiAgICAgIHByb3BlcnR5OiB7XG4gICAgICAgIHBhdHRlcm46IFJlZ0V4cChzdHJpbmcuc291cmNlICsgLyg/PVxccyo6KD8hOikpLy5zb3VyY2UpLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICBncmVlZHk6IHRydWUsXG4gICAgICAgIGluc2lkZTogc3RyaW5nSW50ZXJwb2xhdGlvblxuICAgICAgfSxcbiAgICAgIHN0cmluZzoge1xuICAgICAgICBwYXR0ZXJuOiBzdHJpbmcsXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgICAgaW5zaWRlOiBzdHJpbmdJbnRlcnBvbGF0aW9uXG4gICAgICB9LFxuICAgICAgZnVuY3Rpb246IHtcbiAgICAgICAgcGF0dGVybjogLyhcXGJkZWZcXHMrKVthLXpfXVxcdysvaSxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHZhcmlhYmxlOiAvXFxCXFwkXFx3Ky8sXG4gICAgICAncHJvcGVydHktbGl0ZXJhbCc6IHtcbiAgICAgICAgcGF0dGVybjogL1xcYlthLXpfXVxcdyooPz1cXHMqOig/ITopKS9pLFxuICAgICAgICBhbGlhczogJ3Byb3BlcnR5J1xuICAgICAgfSxcbiAgICAgIGtleXdvcmQ6XG4gICAgICAgIC9cXGIoPzphc3xicmVha3xjYXRjaHxkZWZ8ZWxpZnxlbHNlfGVuZHxmb3JlYWNofGlmfGltcG9ydHxpbmNsdWRlfGxhYmVsfG1vZHVsZXxtb2R1bGVtZXRhfG51bGx8cmVkdWNlfHRoZW58dHJ5fHdoaWxlKVxcYi8sXG4gICAgICBib29sZWFuOiAvXFxiKD86ZmFsc2V8dHJ1ZSlcXGIvLFxuICAgICAgbnVtYmVyOiAvKD86XFxiXFxkK1xcLnxcXEJcXC4pP1xcYlxcZCsoPzpbZUVdWystXT9cXGQrKT9cXGIvLFxuICAgICAgb3BlcmF0b3I6IFtcbiAgICAgICAge1xuICAgICAgICAgIHBhdHRlcm46IC9cXHw9Py8sXG4gICAgICAgICAgYWxpYXM6ICdwaXBlJ1xuICAgICAgICB9LFxuICAgICAgICAvXFwuXFwufFshPTw+XT89fFxcP1xcL1xcL3xcXC9cXC89P3xbLSsqLyVdPT98Wzw+P118XFxiKD86YW5kfG5vdHxvcilcXGIvXG4gICAgICBdLFxuICAgICAgJ2Mtc3R5bGUtZnVuY3Rpb24nOiB7XG4gICAgICAgIHBhdHRlcm46IC9cXGJbYS16X11cXHcqKD89XFxzKlxcKCkvaSxcbiAgICAgICAgYWxpYXM6ICdmdW5jdGlvbidcbiAgICAgIH0sXG4gICAgICBwdW5jdHVhdGlvbjogLzo6fFsoKVxcW1xcXXt9LDo7XXxcXC4oPz1cXHMqW1xcW1xcdyRdKS8sXG4gICAgICBkb3Q6IHtcbiAgICAgICAgcGF0dGVybjogL1xcLi8sXG4gICAgICAgIGFsaWFzOiAnaW1wb3J0YW50J1xuICAgICAgfVxuICAgIH0pXG4gICAgc3RyaW5nSW50ZXJwb2xhdGlvbi5pbnRlcnBvbGF0aW9uLmluc2lkZS5jb250ZW50Lmluc2lkZSA9IGpxXG4gIH0pKFByaXNtKVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJqcSIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwiaW50ZXJwb2xhdGlvbiIsInNvdXJjZSIsInN0cmluZyIsIlJlZ0V4cCIsInJlcGxhY2UiLCJzdHJpbmdJbnRlcnBvbGF0aW9uIiwicGF0dGVybiIsImxvb2tiZWhpbmQiLCJpbnNpZGUiLCJjb250ZW50IiwicHVuY3R1YXRpb24iLCJsYW5ndWFnZXMiLCJjb21tZW50IiwicHJvcGVydHkiLCJncmVlZHkiLCJ2YXJpYWJsZSIsImFsaWFzIiwia2V5d29yZCIsIm51bWJlciIsIm9wZXJhdG9yIiwiZG90Il0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/jq.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/js-extras.js":
/*!**************************************************!*\
  !*** ./node_modules/refractor/lang/js-extras.js ***!
  \**************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = jsExtras;\njsExtras.displayName = 'jsExtras';\njsExtras.aliases = [];\nfunction jsExtras(Prism) {\n  ;\n  (function (Prism) {\n    Prism.languages.insertBefore('javascript', 'function-variable', {\n      'method-variable': {\n        pattern: RegExp('(\\\\.\\\\s*)' + Prism.languages.javascript['function-variable'].pattern.source),\n        lookbehind: true,\n        alias: ['function-variable', 'method', 'function', 'property-access']\n      }\n    });\n    Prism.languages.insertBefore('javascript', 'function', {\n      method: {\n        pattern: RegExp('(\\\\.\\\\s*)' + Prism.languages.javascript['function'].source),\n        lookbehind: true,\n        alias: ['function', 'property-access']\n      }\n    });\n    Prism.languages.insertBefore('javascript', 'constant', {\n      'known-class-name': [{\n        // standard built-ins\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\n        pattern: /\\b(?:(?:Float(?:32|64)|(?:Int|Uint)(?:8|16|32)|Uint8Clamped)?Array|ArrayBuffer|BigInt|Boolean|DataView|Date|Error|Function|Intl|JSON|(?:Weak)?(?:Map|Set)|Math|Number|Object|Promise|Proxy|Reflect|RegExp|String|Symbol|WebAssembly)\\b/,\n        alias: 'class-name'\n      }, {\n        // errors\n        pattern: /\\b(?:[A-Z]\\w*)Error\\b/,\n        alias: 'class-name'\n      }]\n    });\n    /**\n     * Replaces the `<ID>` placeholder in the given pattern with a pattern for general JS identifiers.\n     *\n     * @param {string} source\n     * @param {string} [flags]\n     * @returns {RegExp}\n     */\n    function withId(source, flags) {\n      return RegExp(source.replace(/<ID>/g, function () {\n        return /(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/.source;\n      }), flags);\n    }\n    Prism.languages.insertBefore('javascript', 'keyword', {\n      imports: {\n        // https://tc39.es/ecma262/#sec-imports\n        pattern: withId(/(\\bimport\\b\\s*)(?:<ID>(?:\\s*,\\s*(?:\\*\\s*as\\s+<ID>|\\{[^{}]*\\}))?|\\*\\s*as\\s+<ID>|\\{[^{}]*\\})(?=\\s*\\bfrom\\b)/.source),\n        lookbehind: true,\n        inside: Prism.languages.javascript\n      },\n      exports: {\n        // https://tc39.es/ecma262/#sec-exports\n        pattern: withId(/(\\bexport\\b\\s*)(?:\\*(?:\\s*as\\s+<ID>)?(?=\\s*\\bfrom\\b)|\\{[^{}]*\\})/.source),\n        lookbehind: true,\n        inside: Prism.languages.javascript\n      }\n    });\n    Prism.languages.javascript['keyword'].unshift({\n      pattern: /\\b(?:as|default|export|from|import)\\b/,\n      alias: 'module'\n    }, {\n      pattern: /\\b(?:await|break|catch|continue|do|else|finally|for|if|return|switch|throw|try|while|yield)\\b/,\n      alias: 'control-flow'\n    }, {\n      pattern: /\\bnull\\b/,\n      alias: ['null', 'nil']\n    }, {\n      pattern: /\\bundefined\\b/,\n      alias: 'nil'\n    });\n    Prism.languages.insertBefore('javascript', 'operator', {\n      spread: {\n        pattern: /\\.{3}/,\n        alias: 'operator'\n      },\n      arrow: {\n        pattern: /=>/,\n        alias: 'operator'\n      }\n    });\n    Prism.languages.insertBefore('javascript', 'punctuation', {\n      'property-access': {\n        pattern: withId(/(\\.\\s*)#?<ID>/.source),\n        lookbehind: true\n      },\n      'maybe-class-name': {\n        pattern: /(^|[^$\\w\\xA0-\\uFFFF])[A-Z][$\\w\\xA0-\\uFFFF]+/,\n        lookbehind: true\n      },\n      dom: {\n        // this contains only a few commonly used DOM variables\n        pattern: /\\b(?:document|(?:local|session)Storage|location|navigator|performance|window)\\b/,\n        alias: 'variable'\n      },\n      console: {\n        pattern: /\\bconsole(?=\\s*\\.)/,\n        alias: 'class-name'\n      }\n    }); // add 'maybe-class-name' to tokens which might be a class name\n    var maybeClassNameTokens = ['function', 'function-variable', 'method', 'method-variable', 'property-access'];\n    for (var i = 0; i < maybeClassNameTokens.length; i++) {\n      var token = maybeClassNameTokens[i];\n      var value = Prism.languages.javascript[token]; // convert regex to object\n      if (Prism.util.type(value) === 'RegExp') {\n        value = Prism.languages.javascript[token] = {\n          pattern: value\n        };\n      } // keep in mind that we don't support arrays\n      var inside = value.inside || {};\n      value.inside = inside;\n      inside['maybe-class-name'] = /^[A-Z][\\s\\S]*/;\n    }\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/js-extras.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/js-templates.js":
/*!*****************************************************!*\
  !*** ./node_modules/refractor/lang/js-templates.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = jsTemplates;\njsTemplates.displayName = 'jsTemplates';\njsTemplates.aliases = [];\nfunction jsTemplates(Prism) {\n  ;\n  (function (Prism) {\n    var templateString = Prism.languages.javascript['template-string']; // see the pattern in prism-javascript.js\n    var templateLiteralPattern = templateString.pattern.source;\n    var interpolationObject = templateString.inside['interpolation'];\n    var interpolationPunctuationObject = interpolationObject.inside['interpolation-punctuation'];\n    var interpolationPattern = interpolationObject.pattern.source;\n    /**\n     * Creates a new pattern to match a template string with a special tag.\n     *\n     * This will return `undefined` if there is no grammar with the given language id.\n     *\n     * @param {string} language The language id of the embedded language. E.g. `markdown`.\n     * @param {string} tag The regex pattern to match the tag.\n     * @returns {object | undefined}\n     * @example\n     * createTemplate('css', /\\bcss/.source);\n     */\n    function createTemplate(language, tag) {\n      if (!Prism.languages[language]) {\n        return undefined;\n      }\n      return {\n        pattern: RegExp('((?:' + tag + ')\\\\s*)' + templateLiteralPattern),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          'template-punctuation': {\n            pattern: /^`|`$/,\n            alias: 'string'\n          },\n          'embedded-code': {\n            pattern: /[\\s\\S]+/,\n            alias: language\n          }\n        }\n      };\n    }\n    Prism.languages.javascript['template-string'] = [\n    // styled-jsx:\n    //   css`a { color: #25F; }`\n    // styled-components:\n    //   styled.h1`color: red;`\n    createTemplate('css', /\\b(?:styled(?:\\([^)]*\\))?(?:\\s*\\.\\s*\\w+(?:\\([^)]*\\))*)*|css(?:\\s*\\.\\s*(?:global|resolve))?|createGlobalStyle|keyframes)/.source),\n    // html`<p></p>`\n    // div.innerHTML = `<p></p>`\n    createTemplate('html', /\\bhtml|\\.\\s*(?:inner|outer)HTML\\s*\\+?=/.source),\n    // svg`<path fill=\"#fff\" d=\"M55.37 ...\"/>`\n    createTemplate('svg', /\\bsvg/.source),\n    // md`# h1`, markdown`## h2`\n    createTemplate('markdown', /\\b(?:markdown|md)/.source),\n    // gql`...`, graphql`...`, graphql.experimental`...`\n    createTemplate('graphql', /\\b(?:gql|graphql(?:\\s*\\.\\s*experimental)?)/.source),\n    // sql`...`\n    createTemplate('sql', /\\bsql/.source),\n    // vanilla template string\n    templateString].filter(Boolean);\n    /**\n     * Returns a specific placeholder literal for the given language.\n     *\n     * @param {number} counter\n     * @param {string} language\n     * @returns {string}\n     */\n    function getPlaceholder(counter, language) {\n      return '___' + language.toUpperCase() + '_' + counter + '___';\n    }\n    /**\n     * Returns the tokens of `Prism.tokenize` but also runs the `before-tokenize` and `after-tokenize` hooks.\n     *\n     * @param {string} code\n     * @param {any} grammar\n     * @param {string} language\n     * @returns {(string|Token)[]}\n     */\n    function tokenizeWithHooks(code, grammar, language) {\n      var env = {\n        code: code,\n        grammar: grammar,\n        language: language\n      };\n      Prism.hooks.run('before-tokenize', env);\n      env.tokens = Prism.tokenize(env.code, env.grammar);\n      Prism.hooks.run('after-tokenize', env);\n      return env.tokens;\n    }\n    /**\n     * Returns the token of the given JavaScript interpolation expression.\n     *\n     * @param {string} expression The code of the expression. E.g. `\"${42}\"`\n     * @returns {Token}\n     */\n    function tokenizeInterpolationExpression(expression) {\n      var tempGrammar = {};\n      tempGrammar['interpolation-punctuation'] = interpolationPunctuationObject;\n      /** @type {Array} */\n      var tokens = Prism.tokenize(expression, tempGrammar);\n      if (tokens.length === 3) {\n        /**\n         * The token array will look like this\n         * [\n         *     [\"interpolation-punctuation\", \"${\"]\n         *     \"...\" // JavaScript expression of the interpolation\n         *     [\"interpolation-punctuation\", \"}\"]\n         * ]\n         */\n        var args = [1, 1];\n        args.push.apply(args, tokenizeWithHooks(tokens[1], Prism.languages.javascript, 'javascript'));\n        tokens.splice.apply(tokens, args);\n      }\n      return new Prism.Token('interpolation', tokens, interpolationObject.alias, expression);\n    }\n    /**\n     * Tokenizes the given code with support for JavaScript interpolation expressions mixed in.\n     *\n     * This function has 3 phases:\n     *\n     * 1. Replace all JavaScript interpolation expression with a placeholder.\n     *    The placeholder will have the syntax of a identify of the target language.\n     * 2. Tokenize the code with placeholders.\n     * 3. Tokenize the interpolation expressions and re-insert them into the tokenize code.\n     *    The insertion only works if a placeholder hasn't been \"ripped apart\" meaning that the placeholder has been\n     *    tokenized as two tokens by the grammar of the embedded language.\n     *\n     * @param {string} code\n     * @param {object} grammar\n     * @param {string} language\n     * @returns {Token}\n     */\n    function tokenizeEmbedded(code, grammar, language) {\n      // 1. First filter out all interpolations\n      // because they might be escaped, we need a lookbehind, so we use Prism\n      /** @type {(Token|string)[]} */\n      var _tokens = Prism.tokenize(code, {\n        interpolation: {\n          pattern: RegExp(interpolationPattern),\n          lookbehind: true\n        }\n      }); // replace all interpolations with a placeholder which is not in the code already\n      var placeholderCounter = 0;\n      /** @type {Object<string, string>} */\n      var placeholderMap = {};\n      var embeddedCode = _tokens.map(function (token) {\n        if (typeof token === 'string') {\n          return token;\n        } else {\n          var interpolationExpression = token.content;\n          var placeholder;\n          while (code.indexOf(placeholder = getPlaceholder(placeholderCounter++, language)) !== -1) {\n            /* noop */\n          }\n          placeholderMap[placeholder] = interpolationExpression;\n          return placeholder;\n        }\n      }).join(''); // 2. Tokenize the embedded code\n      var embeddedTokens = tokenizeWithHooks(embeddedCode, grammar, language); // 3. Re-insert the interpolation\n      var placeholders = Object.keys(placeholderMap);\n      placeholderCounter = 0;\n      /**\n       *\n       * @param {(Token|string)[]} tokens\n       * @returns {void}\n       */\n      function walkTokens(tokens) {\n        for (var i = 0; i < tokens.length; i++) {\n          if (placeholderCounter >= placeholders.length) {\n            return;\n          }\n          var token = tokens[i];\n          if (typeof token === 'string' || typeof token.content === 'string') {\n            var placeholder = placeholders[placeholderCounter];\n            var s = typeof token === 'string' ? token : /** @type {string} */\n            token.content;\n            var index = s.indexOf(placeholder);\n            if (index !== -1) {\n              ++placeholderCounter;\n              var before = s.substring(0, index);\n              var middle = tokenizeInterpolationExpression(placeholderMap[placeholder]);\n              var after = s.substring(index + placeholder.length);\n              var replacement = [];\n              if (before) {\n                replacement.push(before);\n              }\n              replacement.push(middle);\n              if (after) {\n                var afterTokens = [after];\n                walkTokens(afterTokens);\n                replacement.push.apply(replacement, afterTokens);\n              }\n              if (typeof token === 'string') {\n                tokens.splice.apply(tokens, [i, 1].concat(replacement));\n                i += replacement.length - 1;\n              } else {\n                token.content = replacement;\n              }\n            }\n          } else {\n            var content = token.content;\n            if (Array.isArray(content)) {\n              walkTokens(content);\n            } else {\n              walkTokens([content]);\n            }\n          }\n        }\n      }\n      walkTokens(embeddedTokens);\n      return new Prism.Token(language, embeddedTokens, 'language-' + language, code);\n    }\n    /**\n     * The languages for which JS templating will handle tagged template literals.\n     *\n     * JS templating isn't active for only JavaScript but also related languages like TypeScript, JSX, and TSX.\n     */\n    var supportedLanguages = {\n      javascript: true,\n      js: true,\n      typescript: true,\n      ts: true,\n      jsx: true,\n      tsx: true\n    };\n    Prism.hooks.add('after-tokenize', function (env) {\n      if (!(env.language in supportedLanguages)) {\n        return;\n      }\n      /**\n       * Finds and tokenizes all template strings with an embedded languages.\n       *\n       * @param {(Token | string)[]} tokens\n       * @returns {void}\n       */\n      function findTemplateStrings(tokens) {\n        for (var i = 0, l = tokens.length; i < l; i++) {\n          var token = tokens[i];\n          if (typeof token === 'string') {\n            continue;\n          }\n          var content = token.content;\n          if (!Array.isArray(content)) {\n            if (typeof content !== 'string') {\n              findTemplateStrings([content]);\n            }\n            continue;\n          }\n          if (token.type === 'template-string') {\n            /**\n             * A JavaScript template-string token will look like this:\n             *\n             * [\"template-string\", [\n             *     [\"template-punctuation\", \"`\"],\n             *     (\n             *         An array of \"string\" and \"interpolation\" tokens. This is the simple string case.\n             *         or\n             *         [\"embedded-code\", \"...\"] This is the token containing the embedded code.\n             *                                  It also has an alias which is the language of the embedded code.\n             *     ),\n             *     [\"template-punctuation\", \"`\"]\n             * ]]\n             */\n            var embedded = content[1];\n            if (content.length === 3 && typeof embedded !== 'string' && embedded.type === 'embedded-code') {\n              // get string content\n              var code = stringContent(embedded);\n              var alias = embedded.alias;\n              var language = Array.isArray(alias) ? alias[0] : alias;\n              var grammar = Prism.languages[language];\n              if (!grammar) {\n                // the embedded language isn't registered.\n                continue;\n              }\n              content[1] = tokenizeEmbedded(code, grammar, language);\n            }\n          } else {\n            findTemplateStrings(content);\n          }\n        }\n      }\n      findTemplateStrings(env.tokens);\n    });\n    /**\n     * Returns the string content of a token or token stream.\n     *\n     * @param {string | Token | (string | Token)[]} value\n     * @returns {string}\n     */\n    function stringContent(value) {\n      if (typeof value === 'string') {\n        return value;\n      } else if (Array.isArray(value)) {\n        return value.map(stringContent).join('');\n      } else {\n        return stringContent(value.content);\n      }\n    }\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/js-templates.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/jsdoc.js":
/*!**********************************************!*\
  !*** ./node_modules/refractor/lang/jsdoc.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar refractorJavadoclike = __webpack_require__(/*! ./javadoclike.js */ \"(ssr)/./node_modules/refractor/lang/javadoclike.js\");\nvar refractorTypescript = __webpack_require__(/*! ./typescript.js */ \"(ssr)/./node_modules/refractor/lang/typescript.js\");\nmodule.exports = jsdoc;\njsdoc.displayName = 'jsdoc';\njsdoc.aliases = [];\nfunction jsdoc(Prism) {\n  Prism.register(refractorJavadoclike);\n  Prism.register(refractorTypescript);\n  (function (Prism) {\n    var javascript = Prism.languages.javascript;\n    var type = /\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})+\\}/.source;\n    var parameterPrefix = '(@(?:arg|argument|param|property)\\\\s+(?:' + type + '\\\\s+)?)';\n    Prism.languages.jsdoc = Prism.languages.extend('javadoclike', {\n      parameter: {\n        // @param {string} foo - foo bar\n        pattern: RegExp(parameterPrefix + /(?:(?!\\s)[$\\w\\xA0-\\uFFFF.])+(?=\\s|$)/.source),\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      }\n    });\n    Prism.languages.insertBefore('jsdoc', 'keyword', {\n      'optional-parameter': {\n        // @param {string} [baz.foo=\"bar\"] foo bar\n        pattern: RegExp(parameterPrefix + /\\[(?:(?!\\s)[$\\w\\xA0-\\uFFFF.])+(?:=[^[\\]]+)?\\](?=\\s|$)/.source),\n        lookbehind: true,\n        inside: {\n          parameter: {\n            pattern: /(^\\[)[$\\w\\xA0-\\uFFFF\\.]+/,\n            lookbehind: true,\n            inside: {\n              punctuation: /\\./\n            }\n          },\n          code: {\n            pattern: /(=)[\\s\\S]*(?=\\]$)/,\n            lookbehind: true,\n            inside: javascript,\n            alias: 'language-javascript'\n          },\n          punctuation: /[=[\\]]/\n        }\n      },\n      'class-name': [{\n        pattern: RegExp(/(@(?:augments|class|extends|interface|memberof!?|template|this|typedef)\\s+(?:<TYPE>\\s+)?)[A-Z]\\w*(?:\\.[A-Z]\\w*)*/.source.replace(/<TYPE>/g, function () {\n          return type;\n        })),\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      }, {\n        pattern: RegExp('(@[a-z]+\\\\s+)' + type),\n        lookbehind: true,\n        inside: {\n          string: javascript.string,\n          number: javascript.number,\n          \"boolean\": javascript[\"boolean\"],\n          keyword: Prism.languages.typescript.keyword,\n          operator: /=>|\\.\\.\\.|[&|?:*]/,\n          punctuation: /[.,;=<>{}()[\\]]/\n        }\n      }],\n      example: {\n        pattern: /(@example\\s+(?!\\s))(?:[^@\\s]|\\s+(?!\\s))+?(?=\\s*(?:\\*\\s*)?(?:@\\w|\\*\\/))/,\n        lookbehind: true,\n        inside: {\n          code: {\n            pattern: /^([\\t ]*(?:\\*\\s*)?)\\S.*$/m,\n            lookbehind: true,\n            inside: javascript,\n            alias: 'language-javascript'\n          }\n        }\n      }\n    });\n    Prism.languages.javadoclike.addSupport('javascript', Prism.languages.jsdoc);\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvanNkb2MuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBQ1osSUFBSUEsb0JBQW9CLEdBQUdDLG1CQUFPLENBQUMsNEVBQWtCLENBQUM7QUFDdEQsSUFBSUMsbUJBQW1CLEdBQUdELG1CQUFPLENBQUMsMEVBQWlCLENBQUM7QUFDcERFLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxLQUFLO0FBQ3RCQSxLQUFLLENBQUNDLFdBQVcsR0FBRyxPQUFPO0FBQzNCRCxLQUFLLENBQUNFLE9BQU8sR0FBRyxFQUFFO0FBQ2xCLFNBQVNGLEtBQUtBLENBQUNHLEtBQUssRUFBRTtFQUNwQkEsS0FBSyxDQUFDQyxRQUFRLENBQUNULG9CQUFvQixDQUFDO0VBQ3BDUSxLQUFLLENBQUNDLFFBQVEsQ0FBQ1AsbUJBQW1CLENBQUM7RUFDbEMsQ0FBQyxVQUFVTSxLQUFLLEVBQUU7SUFDakIsSUFBSUUsVUFBVSxHQUFHRixLQUFLLENBQUNHLFNBQVMsQ0FBQ0QsVUFBVTtJQUMzQyxJQUFJRSxJQUFJLEdBQUcsMENBQTBDLENBQUNDLE1BQU07SUFDNUQsSUFBSUMsZUFBZSxHQUNqQiwwQ0FBMEMsR0FBR0YsSUFBSSxHQUFHLFNBQVM7SUFDL0RKLEtBQUssQ0FBQ0csU0FBUyxDQUFDTixLQUFLLEdBQUdHLEtBQUssQ0FBQ0csU0FBUyxDQUFDSSxNQUFNLENBQUMsYUFBYSxFQUFFO01BQzVEQyxTQUFTLEVBQUU7UUFDVDtRQUNBQyxPQUFPLEVBQUVDLE1BQU0sQ0FDYkosZUFBZSxHQUFHLHNDQUFzQyxDQUFDRCxNQUMzRCxDQUFDO1FBQ0RNLFVBQVUsRUFBRSxJQUFJO1FBQ2hCQyxNQUFNLEVBQUU7VUFDTkMsV0FBVyxFQUFFO1FBQ2Y7TUFDRjtJQUNGLENBQUMsQ0FBQztJQUNGYixLQUFLLENBQUNHLFNBQVMsQ0FBQ1csWUFBWSxDQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUU7TUFDL0Msb0JBQW9CLEVBQUU7UUFDcEI7UUFDQUwsT0FBTyxFQUFFQyxNQUFNLENBQ2JKLGVBQWUsR0FDYix1REFBdUQsQ0FBQ0QsTUFDNUQsQ0FBQztRQUNETSxVQUFVLEVBQUUsSUFBSTtRQUNoQkMsTUFBTSxFQUFFO1VBQ05KLFNBQVMsRUFBRTtZQUNUQyxPQUFPLEVBQUUsMEJBQTBCO1lBQ25DRSxVQUFVLEVBQUUsSUFBSTtZQUNoQkMsTUFBTSxFQUFFO2NBQ05DLFdBQVcsRUFBRTtZQUNmO1VBQ0YsQ0FBQztVQUNERSxJQUFJLEVBQUU7WUFDSk4sT0FBTyxFQUFFLG1CQUFtQjtZQUM1QkUsVUFBVSxFQUFFLElBQUk7WUFDaEJDLE1BQU0sRUFBRVYsVUFBVTtZQUNsQmMsS0FBSyxFQUFFO1VBQ1QsQ0FBQztVQUNESCxXQUFXLEVBQUU7UUFDZjtNQUNGLENBQUM7TUFDRCxZQUFZLEVBQUUsQ0FDWjtRQUNFSixPQUFPLEVBQUVDLE1BQU0sQ0FDYixrSEFBa0gsQ0FBQ0wsTUFBTSxDQUFDWSxPQUFPLENBQy9ILFNBQVMsRUFDVCxZQUFZO1VBQ1YsT0FBT2IsSUFBSTtRQUNiLENBQ0YsQ0FDRixDQUFDO1FBQ0RPLFVBQVUsRUFBRSxJQUFJO1FBQ2hCQyxNQUFNLEVBQUU7VUFDTkMsV0FBVyxFQUFFO1FBQ2Y7TUFDRixDQUFDLEVBQ0Q7UUFDRUosT0FBTyxFQUFFQyxNQUFNLENBQUMsZUFBZSxHQUFHTixJQUFJLENBQUM7UUFDdkNPLFVBQVUsRUFBRSxJQUFJO1FBQ2hCQyxNQUFNLEVBQUU7VUFDTk0sTUFBTSxFQUFFaEIsVUFBVSxDQUFDZ0IsTUFBTTtVQUN6QkMsTUFBTSxFQUFFakIsVUFBVSxDQUFDaUIsTUFBTTtVQUN6QixXQUFTakIsVUFBVSxXQUFRO1VBQzNCa0IsT0FBTyxFQUFFcEIsS0FBSyxDQUFDRyxTQUFTLENBQUNrQixVQUFVLENBQUNELE9BQU87VUFDM0NFLFFBQVEsRUFBRSxtQkFBbUI7VUFDN0JULFdBQVcsRUFBRTtRQUNmO01BQ0YsQ0FBQyxDQUNGO01BQ0RVLE9BQU8sRUFBRTtRQUNQZCxPQUFPLEVBQ0wsd0VBQXdFO1FBQzFFRSxVQUFVLEVBQUUsSUFBSTtRQUNoQkMsTUFBTSxFQUFFO1VBQ05HLElBQUksRUFBRTtZQUNKTixPQUFPLEVBQUUsMkJBQTJCO1lBQ3BDRSxVQUFVLEVBQUUsSUFBSTtZQUNoQkMsTUFBTSxFQUFFVixVQUFVO1lBQ2xCYyxLQUFLLEVBQUU7VUFDVDtRQUNGO01BQ0Y7SUFDRixDQUFDLENBQUM7SUFDRmhCLEtBQUssQ0FBQ0csU0FBUyxDQUFDcUIsV0FBVyxDQUFDQyxVQUFVLENBQUMsWUFBWSxFQUFFekIsS0FBSyxDQUFDRyxTQUFTLENBQUNOLEtBQUssQ0FBQztFQUM3RSxDQUFDLEVBQUVHLEtBQUssQ0FBQztBQUNYIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcanNkb2MuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG52YXIgcmVmcmFjdG9ySmF2YWRvY2xpa2UgPSByZXF1aXJlKCcuL2phdmFkb2NsaWtlLmpzJylcbnZhciByZWZyYWN0b3JUeXBlc2NyaXB0ID0gcmVxdWlyZSgnLi90eXBlc2NyaXB0LmpzJylcbm1vZHVsZS5leHBvcnRzID0ganNkb2NcbmpzZG9jLmRpc3BsYXlOYW1lID0gJ2pzZG9jJ1xuanNkb2MuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBqc2RvYyhQcmlzbSkge1xuICBQcmlzbS5yZWdpc3RlcihyZWZyYWN0b3JKYXZhZG9jbGlrZSlcbiAgUHJpc20ucmVnaXN0ZXIocmVmcmFjdG9yVHlwZXNjcmlwdClcbiAgOyhmdW5jdGlvbiAoUHJpc20pIHtcbiAgICB2YXIgamF2YXNjcmlwdCA9IFByaXNtLmxhbmd1YWdlcy5qYXZhc2NyaXB0XG4gICAgdmFyIHR5cGUgPSAvXFx7KD86W157fV18XFx7KD86W157fV18XFx7W157fV0qXFx9KSpcXH0pK1xcfS8uc291cmNlXG4gICAgdmFyIHBhcmFtZXRlclByZWZpeCA9XG4gICAgICAnKEAoPzphcmd8YXJndW1lbnR8cGFyYW18cHJvcGVydHkpXFxcXHMrKD86JyArIHR5cGUgKyAnXFxcXHMrKT8pJ1xuICAgIFByaXNtLmxhbmd1YWdlcy5qc2RvYyA9IFByaXNtLmxhbmd1YWdlcy5leHRlbmQoJ2phdmFkb2NsaWtlJywge1xuICAgICAgcGFyYW1ldGVyOiB7XG4gICAgICAgIC8vIEBwYXJhbSB7c3RyaW5nfSBmb28gLSBmb28gYmFyXG4gICAgICAgIHBhdHRlcm46IFJlZ0V4cChcbiAgICAgICAgICBwYXJhbWV0ZXJQcmVmaXggKyAvKD86KD8hXFxzKVskXFx3XFx4QTAtXFx1RkZGRi5dKSsoPz1cXHN8JCkvLnNvdXJjZVxuICAgICAgICApLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICBwdW5jdHVhdGlvbjogL1xcLi9cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gICAgUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgnanNkb2MnLCAna2V5d29yZCcsIHtcbiAgICAgICdvcHRpb25hbC1wYXJhbWV0ZXInOiB7XG4gICAgICAgIC8vIEBwYXJhbSB7c3RyaW5nfSBbYmF6LmZvbz1cImJhclwiXSBmb28gYmFyXG4gICAgICAgIHBhdHRlcm46IFJlZ0V4cChcbiAgICAgICAgICBwYXJhbWV0ZXJQcmVmaXggK1xuICAgICAgICAgICAgL1xcWyg/Oig/IVxccylbJFxcd1xceEEwLVxcdUZGRkYuXSkrKD86PVteW1xcXV0rKT9cXF0oPz1cXHN8JCkvLnNvdXJjZVxuICAgICAgICApLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICBwYXJhbWV0ZXI6IHtcbiAgICAgICAgICAgIHBhdHRlcm46IC8oXlxcWylbJFxcd1xceEEwLVxcdUZGRkZcXC5dKy8sXG4gICAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgICAgIHB1bmN0dWF0aW9uOiAvXFwuL1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgY29kZToge1xuICAgICAgICAgICAgcGF0dGVybjogLyg9KVtcXHNcXFNdKig/PVxcXSQpLyxcbiAgICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgICAgICBpbnNpZGU6IGphdmFzY3JpcHQsXG4gICAgICAgICAgICBhbGlhczogJ2xhbmd1YWdlLWphdmFzY3JpcHQnXG4gICAgICAgICAgfSxcbiAgICAgICAgICBwdW5jdHVhdGlvbjogL1s9W1xcXV0vXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAnY2xhc3MtbmFtZSc6IFtcbiAgICAgICAge1xuICAgICAgICAgIHBhdHRlcm46IFJlZ0V4cChcbiAgICAgICAgICAgIC8oQCg/OmF1Z21lbnRzfGNsYXNzfGV4dGVuZHN8aW50ZXJmYWNlfG1lbWJlcm9mIT98dGVtcGxhdGV8dGhpc3x0eXBlZGVmKVxccysoPzo8VFlQRT5cXHMrKT8pW0EtWl1cXHcqKD86XFwuW0EtWl1cXHcqKSovLnNvdXJjZS5yZXBsYWNlKFxuICAgICAgICAgICAgICAvPFRZUEU+L2csXG4gICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHlwZVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApXG4gICAgICAgICAgKSxcbiAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAgIGluc2lkZToge1xuICAgICAgICAgICAgcHVuY3R1YXRpb246IC9cXC4vXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcGF0dGVybjogUmVnRXhwKCcoQFthLXpdK1xcXFxzKyknICsgdHlwZSksXG4gICAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICAgIHN0cmluZzogamF2YXNjcmlwdC5zdHJpbmcsXG4gICAgICAgICAgICBudW1iZXI6IGphdmFzY3JpcHQubnVtYmVyLFxuICAgICAgICAgICAgYm9vbGVhbjogamF2YXNjcmlwdC5ib29sZWFuLFxuICAgICAgICAgICAga2V5d29yZDogUHJpc20ubGFuZ3VhZ2VzLnR5cGVzY3JpcHQua2V5d29yZCxcbiAgICAgICAgICAgIG9wZXJhdG9yOiAvPT58XFwuXFwuXFwufFsmfD86Kl0vLFxuICAgICAgICAgICAgcHVuY3R1YXRpb246IC9bLiw7PTw+e30oKVtcXF1dL1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIGV4YW1wbGU6IHtcbiAgICAgICAgcGF0dGVybjpcbiAgICAgICAgICAvKEBleGFtcGxlXFxzKyg/IVxccykpKD86W15AXFxzXXxcXHMrKD8hXFxzKSkrPyg/PVxccyooPzpcXCpcXHMqKT8oPzpAXFx3fFxcKlxcLykpLyxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgY29kZToge1xuICAgICAgICAgICAgcGF0dGVybjogL14oW1xcdCBdKig/OlxcKlxccyopPylcXFMuKiQvbSxcbiAgICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgICAgICBpbnNpZGU6IGphdmFzY3JpcHQsXG4gICAgICAgICAgICBhbGlhczogJ2xhbmd1YWdlLWphdmFzY3JpcHQnXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgICBQcmlzbS5sYW5ndWFnZXMuamF2YWRvY2xpa2UuYWRkU3VwcG9ydCgnamF2YXNjcmlwdCcsIFByaXNtLmxhbmd1YWdlcy5qc2RvYylcbiAgfSkoUHJpc20pXG59XG4iXSwibmFtZXMiOlsicmVmcmFjdG9ySmF2YWRvY2xpa2UiLCJyZXF1aXJlIiwicmVmcmFjdG9yVHlwZXNjcmlwdCIsIm1vZHVsZSIsImV4cG9ydHMiLCJqc2RvYyIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwicmVnaXN0ZXIiLCJqYXZhc2NyaXB0IiwibGFuZ3VhZ2VzIiwidHlwZSIsInNvdXJjZSIsInBhcmFtZXRlclByZWZpeCIsImV4dGVuZCIsInBhcmFtZXRlciIsInBhdHRlcm4iLCJSZWdFeHAiLCJsb29rYmVoaW5kIiwiaW5zaWRlIiwicHVuY3R1YXRpb24iLCJpbnNlcnRCZWZvcmUiLCJjb2RlIiwiYWxpYXMiLCJyZXBsYWNlIiwic3RyaW5nIiwibnVtYmVyIiwia2V5d29yZCIsInR5cGVzY3JpcHQiLCJvcGVyYXRvciIsImV4YW1wbGUiLCJqYXZhZG9jbGlrZSIsImFkZFN1cHBvcnQiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/jsdoc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/json.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/json.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = json;\njson.displayName = 'json';\njson.aliases = ['webmanifest'];\nfunction json(Prism) {\n  // https://www.json.org/json-en.html\n  Prism.languages.json = {\n    property: {\n      pattern: /(^|[^\\\\])\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/,\n      lookbehind: true,\n      greedy: true\n    },\n    string: {\n      pattern: /(^|[^\\\\])\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?!\\s*:)/,\n      lookbehind: true,\n      greedy: true\n    },\n    comment: {\n      pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n      greedy: true\n    },\n    number: /-?\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n    punctuation: /[{}[\\],]/,\n    operator: /:/,\n    \"boolean\": /\\b(?:false|true)\\b/,\n    \"null\": {\n      pattern: /\\bnull\\b/,\n      alias: 'keyword'\n    }\n  };\n  Prism.languages.webmanifest = Prism.languages.json;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvanNvbi5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLElBQUk7QUFDckJBLElBQUksQ0FBQ0MsV0FBVyxHQUFHLE1BQU07QUFDekJELElBQUksQ0FBQ0UsT0FBTyxHQUFHLENBQUMsYUFBYSxDQUFDO0FBQzlCLFNBQVNGLElBQUlBLENBQUNHLEtBQUssRUFBRTtFQUNuQjtFQUNBQSxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osSUFBSSxHQUFHO0lBQ3JCSyxRQUFRLEVBQUU7TUFDUkMsT0FBTyxFQUFFLHdDQUF3QztNQUNqREMsVUFBVSxFQUFFLElBQUk7TUFDaEJDLE1BQU0sRUFBRTtJQUNWLENBQUM7SUFDREMsTUFBTSxFQUFFO01BQ05ILE9BQU8sRUFBRSx3Q0FBd0M7TUFDakRDLFVBQVUsRUFBRSxJQUFJO01BQ2hCQyxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0RFLE9BQU8sRUFBRTtNQUNQSixPQUFPLEVBQUUsK0JBQStCO01BQ3hDRSxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0RHLE1BQU0sRUFBRSxvQ0FBb0M7SUFDNUNDLFdBQVcsRUFBRSxVQUFVO0lBQ3ZCQyxRQUFRLEVBQUUsR0FBRztJQUNiLFdBQVMsb0JBQW9CO0lBQzdCLFFBQU07TUFDSlAsT0FBTyxFQUFFLFVBQVU7TUFDbkJRLEtBQUssRUFBRTtJQUNUO0VBQ0YsQ0FBQztFQUNEWCxLQUFLLENBQUNDLFNBQVMsQ0FBQ1csV0FBVyxHQUFHWixLQUFLLENBQUNDLFNBQVMsQ0FBQ0osSUFBSTtBQUNwRCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXGpzb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0ganNvblxuanNvbi5kaXNwbGF5TmFtZSA9ICdqc29uJ1xuanNvbi5hbGlhc2VzID0gWyd3ZWJtYW5pZmVzdCddXG5mdW5jdGlvbiBqc29uKFByaXNtKSB7XG4gIC8vIGh0dHBzOi8vd3d3Lmpzb24ub3JnL2pzb24tZW4uaHRtbFxuICBQcmlzbS5sYW5ndWFnZXMuanNvbiA9IHtcbiAgICBwcm9wZXJ0eToge1xuICAgICAgcGF0dGVybjogLyhefFteXFxcXF0pXCIoPzpcXFxcLnxbXlxcXFxcIlxcclxcbl0pKlwiKD89XFxzKjopLyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBncmVlZHk6IHRydWVcbiAgICB9LFxuICAgIHN0cmluZzoge1xuICAgICAgcGF0dGVybjogLyhefFteXFxcXF0pXCIoPzpcXFxcLnxbXlxcXFxcIlxcclxcbl0pKlwiKD8hXFxzKjopLyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBncmVlZHk6IHRydWVcbiAgICB9LFxuICAgIGNvbW1lbnQ6IHtcbiAgICAgIHBhdHRlcm46IC9cXC9cXC8uKnxcXC9cXCpbXFxzXFxTXSo/KD86XFwqXFwvfCQpLyxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgbnVtYmVyOiAvLT9cXGJcXGQrKD86XFwuXFxkKyk/KD86ZVsrLV0/XFxkKyk/XFxiL2ksXG4gICAgcHVuY3R1YXRpb246IC9be31bXFxdLF0vLFxuICAgIG9wZXJhdG9yOiAvOi8sXG4gICAgYm9vbGVhbjogL1xcYig/OmZhbHNlfHRydWUpXFxiLyxcbiAgICBudWxsOiB7XG4gICAgICBwYXR0ZXJuOiAvXFxibnVsbFxcYi8sXG4gICAgICBhbGlhczogJ2tleXdvcmQnXG4gICAgfVxuICB9XG4gIFByaXNtLmxhbmd1YWdlcy53ZWJtYW5pZmVzdCA9IFByaXNtLmxhbmd1YWdlcy5qc29uXG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImpzb24iLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImxhbmd1YWdlcyIsInByb3BlcnR5IiwicGF0dGVybiIsImxvb2tiZWhpbmQiLCJncmVlZHkiLCJzdHJpbmciLCJjb21tZW50IiwibnVtYmVyIiwicHVuY3R1YXRpb24iLCJvcGVyYXRvciIsImFsaWFzIiwid2VibWFuaWZlc3QiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/json.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/json5.js":
/*!**********************************************!*\
  !*** ./node_modules/refractor/lang/json5.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar refractorJson = __webpack_require__(/*! ./json.js */ \"(ssr)/./node_modules/refractor/lang/json.js\");\nmodule.exports = json5;\njson5.displayName = 'json5';\njson5.aliases = [];\nfunction json5(Prism) {\n  Prism.register(refractorJson);\n  (function (Prism) {\n    var string = /(\"|')(?:\\\\(?:\\r\\n?|\\n|.)|(?!\\1)[^\\\\\\r\\n])*\\1/;\n    Prism.languages.json5 = Prism.languages.extend('json', {\n      property: [{\n        pattern: RegExp(string.source + '(?=\\\\s*:)'),\n        greedy: true\n      }, {\n        pattern: /(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*:)/,\n        alias: 'unquoted'\n      }],\n      string: {\n        pattern: string,\n        greedy: true\n      },\n      number: /[+-]?\\b(?:NaN|Infinity|0x[a-fA-F\\d]+)\\b|[+-]?(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[eE][+-]?\\d+\\b)?/\n    });\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvanNvbjUuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBQ1osSUFBSUEsYUFBYSxHQUFHQyxtQkFBTyxDQUFDLDhEQUFXLENBQUM7QUFDeENDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxLQUFLO0FBQ3RCQSxLQUFLLENBQUNDLFdBQVcsR0FBRyxPQUFPO0FBQzNCRCxLQUFLLENBQUNFLE9BQU8sR0FBRyxFQUFFO0FBQ2xCLFNBQVNGLEtBQUtBLENBQUNHLEtBQUssRUFBRTtFQUNwQkEsS0FBSyxDQUFDQyxRQUFRLENBQUNSLGFBQWEsQ0FBQztFQUM1QixDQUFDLFVBQVVPLEtBQUssRUFBRTtJQUNqQixJQUFJRSxNQUFNLEdBQUcsOENBQThDO0lBQzNERixLQUFLLENBQUNHLFNBQVMsQ0FBQ04sS0FBSyxHQUFHRyxLQUFLLENBQUNHLFNBQVMsQ0FBQ0MsTUFBTSxDQUFDLE1BQU0sRUFBRTtNQUNyREMsUUFBUSxFQUFFLENBQ1I7UUFDRUMsT0FBTyxFQUFFQyxNQUFNLENBQUNMLE1BQU0sQ0FBQ00sTUFBTSxHQUFHLFdBQVcsQ0FBQztRQUM1Q0MsTUFBTSxFQUFFO01BQ1YsQ0FBQyxFQUNEO1FBQ0VILE9BQU8sRUFDTCxnRUFBZ0U7UUFDbEVJLEtBQUssRUFBRTtNQUNULENBQUMsQ0FDRjtNQUNEUixNQUFNLEVBQUU7UUFDTkksT0FBTyxFQUFFSixNQUFNO1FBQ2ZPLE1BQU0sRUFBRTtNQUNWLENBQUM7TUFDREUsTUFBTSxFQUNKO0lBQ0osQ0FBQyxDQUFDO0VBQ0osQ0FBQyxFQUFFWCxLQUFLLENBQUM7QUFDWCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXGpzb241LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xudmFyIHJlZnJhY3Rvckpzb24gPSByZXF1aXJlKCcuL2pzb24uanMnKVxubW9kdWxlLmV4cG9ydHMgPSBqc29uNVxuanNvbjUuZGlzcGxheU5hbWUgPSAnanNvbjUnXG5qc29uNS5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIGpzb241KFByaXNtKSB7XG4gIFByaXNtLnJlZ2lzdGVyKHJlZnJhY3Rvckpzb24pXG4gIDsoZnVuY3Rpb24gKFByaXNtKSB7XG4gICAgdmFyIHN0cmluZyA9IC8oXCJ8JykoPzpcXFxcKD86XFxyXFxuP3xcXG58Lil8KD8hXFwxKVteXFxcXFxcclxcbl0pKlxcMS9cbiAgICBQcmlzbS5sYW5ndWFnZXMuanNvbjUgPSBQcmlzbS5sYW5ndWFnZXMuZXh0ZW5kKCdqc29uJywge1xuICAgICAgcHJvcGVydHk6IFtcbiAgICAgICAge1xuICAgICAgICAgIHBhdHRlcm46IFJlZ0V4cChzdHJpbmcuc291cmNlICsgJyg/PVxcXFxzKjopJyksXG4gICAgICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwYXR0ZXJuOlxuICAgICAgICAgICAgLyg/IVxccylbXyRhLXpBLVpcXHhBMC1cXHVGRkZGXSg/Oig/IVxccylbJFxcd1xceEEwLVxcdUZGRkZdKSooPz1cXHMqOikvLFxuICAgICAgICAgIGFsaWFzOiAndW5xdW90ZWQnXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBzdHJpbmc6IHtcbiAgICAgICAgcGF0dGVybjogc3RyaW5nLFxuICAgICAgICBncmVlZHk6IHRydWVcbiAgICAgIH0sXG4gICAgICBudW1iZXI6XG4gICAgICAgIC9bKy1dP1xcYig/Ok5hTnxJbmZpbml0eXwweFthLWZBLUZcXGRdKylcXGJ8WystXT8oPzpcXGJcXGQrKD86XFwuXFxkKik/fFxcQlxcLlxcZCspKD86W2VFXVsrLV0/XFxkK1xcYik/L1xuICAgIH0pXG4gIH0pKFByaXNtKVxufVxuIl0sIm5hbWVzIjpbInJlZnJhY3Rvckpzb24iLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImpzb241IiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJyZWdpc3RlciIsInN0cmluZyIsImxhbmd1YWdlcyIsImV4dGVuZCIsInByb3BlcnR5IiwicGF0dGVybiIsIlJlZ0V4cCIsInNvdXJjZSIsImdyZWVkeSIsImFsaWFzIiwibnVtYmVyIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/json5.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/jsonp.js":
/*!**********************************************!*\
  !*** ./node_modules/refractor/lang/jsonp.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar refractorJson = __webpack_require__(/*! ./json.js */ \"(ssr)/./node_modules/refractor/lang/json.js\");\nmodule.exports = jsonp;\njsonp.displayName = 'jsonp';\njsonp.aliases = [];\nfunction jsonp(Prism) {\n  Prism.register(refractorJson);\n  Prism.languages.jsonp = Prism.languages.extend('json', {\n    punctuation: /[{}[\\]();,.]/\n  });\n  Prism.languages.insertBefore('jsonp', 'punctuation', {\n    \"function\": /(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*\\()/\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvanNvbnAuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBQ1osSUFBSUEsYUFBYSxHQUFHQyxtQkFBTyxDQUFDLDhEQUFXLENBQUM7QUFDeENDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxLQUFLO0FBQ3RCQSxLQUFLLENBQUNDLFdBQVcsR0FBRyxPQUFPO0FBQzNCRCxLQUFLLENBQUNFLE9BQU8sR0FBRyxFQUFFO0FBQ2xCLFNBQVNGLEtBQUtBLENBQUNHLEtBQUssRUFBRTtFQUNwQkEsS0FBSyxDQUFDQyxRQUFRLENBQUNSLGFBQWEsQ0FBQztFQUM3Qk8sS0FBSyxDQUFDRSxTQUFTLENBQUNMLEtBQUssR0FBR0csS0FBSyxDQUFDRSxTQUFTLENBQUNDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7SUFDckRDLFdBQVcsRUFBRTtFQUNmLENBQUMsQ0FBQztFQUNGSixLQUFLLENBQUNFLFNBQVMsQ0FBQ0csWUFBWSxDQUFDLE9BQU8sRUFBRSxhQUFhLEVBQUU7SUFDbkQsWUFBVTtFQUNaLENBQUMsQ0FBQztBQUNKIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcanNvbnAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG52YXIgcmVmcmFjdG9ySnNvbiA9IHJlcXVpcmUoJy4vanNvbi5qcycpXG5tb2R1bGUuZXhwb3J0cyA9IGpzb25wXG5qc29ucC5kaXNwbGF5TmFtZSA9ICdqc29ucCdcbmpzb25wLmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24ganNvbnAoUHJpc20pIHtcbiAgUHJpc20ucmVnaXN0ZXIocmVmcmFjdG9ySnNvbilcbiAgUHJpc20ubGFuZ3VhZ2VzLmpzb25wID0gUHJpc20ubGFuZ3VhZ2VzLmV4dGVuZCgnanNvbicsIHtcbiAgICBwdW5jdHVhdGlvbjogL1t7fVtcXF0oKTssLl0vXG4gIH0pXG4gIFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ2pzb25wJywgJ3B1bmN0dWF0aW9uJywge1xuICAgIGZ1bmN0aW9uOiAvKD8hXFxzKVtfJGEtekEtWlxceEEwLVxcdUZGRkZdKD86KD8hXFxzKVskXFx3XFx4QTAtXFx1RkZGRl0pKig/PVxccypcXCgpL1xuICB9KVxufVxuIl0sIm5hbWVzIjpbInJlZnJhY3Rvckpzb24iLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImpzb25wIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJyZWdpc3RlciIsImxhbmd1YWdlcyIsImV4dGVuZCIsInB1bmN0dWF0aW9uIiwiaW5zZXJ0QmVmb3JlIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/jsonp.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/jsstacktrace.js":
/*!*****************************************************!*\
  !*** ./node_modules/refractor/lang/jsstacktrace.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = jsstacktrace;\njsstacktrace.displayName = 'jsstacktrace';\njsstacktrace.aliases = [];\nfunction jsstacktrace(Prism) {\n  Prism.languages.jsstacktrace = {\n    'error-message': {\n      pattern: /^\\S.*/m,\n      alias: 'string'\n    },\n    'stack-frame': {\n      pattern: /(^[ \\t]+)at[ \\t].*/m,\n      lookbehind: true,\n      inside: {\n        'not-my-code': {\n          pattern: /^at[ \\t]+(?!\\s)(?:node\\.js|<unknown>|.*(?:node_modules|\\(<anonymous>\\)|\\(<unknown>|<anonymous>$|\\(internal\\/|\\(node\\.js)).*/m,\n          alias: 'comment'\n        },\n        filename: {\n          pattern: /(\\bat\\s+(?!\\s)|\\()(?:[a-zA-Z]:)?[^():]+(?=:)/,\n          lookbehind: true,\n          alias: 'url'\n        },\n        \"function\": {\n          pattern: /(\\bat\\s+(?:new\\s+)?)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF<][.$\\w\\xA0-\\uFFFF<>]*/,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\./\n          }\n        },\n        punctuation: /[()]/,\n        keyword: /\\b(?:at|new)\\b/,\n        alias: {\n          pattern: /\\[(?:as\\s+)?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*\\]/,\n          alias: 'variable'\n        },\n        'line-number': {\n          pattern: /:\\d+(?::\\d+)?\\b/,\n          alias: 'number',\n          inside: {\n            punctuation: /:/\n          }\n        }\n      }\n    }\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvanNzdGFja3RyYWNlLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsWUFBWTtBQUM3QkEsWUFBWSxDQUFDQyxXQUFXLEdBQUcsY0FBYztBQUN6Q0QsWUFBWSxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUN6QixTQUFTRixZQUFZQSxDQUFDRyxLQUFLLEVBQUU7RUFDM0JBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixZQUFZLEdBQUc7SUFDN0IsZUFBZSxFQUFFO01BQ2ZLLE9BQU8sRUFBRSxRQUFRO01BQ2pCQyxLQUFLLEVBQUU7SUFDVCxDQUFDO0lBQ0QsYUFBYSxFQUFFO01BQ2JELE9BQU8sRUFBRSxxQkFBcUI7TUFDOUJFLFVBQVUsRUFBRSxJQUFJO01BQ2hCQyxNQUFNLEVBQUU7UUFDTixhQUFhLEVBQUU7VUFDYkgsT0FBTyxFQUNMLDhIQUE4SDtVQUNoSUMsS0FBSyxFQUFFO1FBQ1QsQ0FBQztRQUNERyxRQUFRLEVBQUU7VUFDUkosT0FBTyxFQUFFLDhDQUE4QztVQUN2REUsVUFBVSxFQUFFLElBQUk7VUFDaEJELEtBQUssRUFBRTtRQUNULENBQUM7UUFDRCxZQUFVO1VBQ1JELE9BQU8sRUFDTCxzRUFBc0U7VUFDeEVFLFVBQVUsRUFBRSxJQUFJO1VBQ2hCQyxNQUFNLEVBQUU7WUFDTkUsV0FBVyxFQUFFO1VBQ2Y7UUFDRixDQUFDO1FBQ0RBLFdBQVcsRUFBRSxNQUFNO1FBQ25CQyxPQUFPLEVBQUUsZ0JBQWdCO1FBQ3pCTCxLQUFLLEVBQUU7VUFDTEQsT0FBTyxFQUFFLDREQUE0RDtVQUNyRUMsS0FBSyxFQUFFO1FBQ1QsQ0FBQztRQUNELGFBQWEsRUFBRTtVQUNiRCxPQUFPLEVBQUUsaUJBQWlCO1VBQzFCQyxLQUFLLEVBQUUsUUFBUTtVQUNmRSxNQUFNLEVBQUU7WUFDTkUsV0FBVyxFQUFFO1VBQ2Y7UUFDRjtNQUNGO0lBQ0Y7RUFDRixDQUFDO0FBQ0giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxqc3N0YWNrdHJhY2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0ganNzdGFja3RyYWNlXG5qc3N0YWNrdHJhY2UuZGlzcGxheU5hbWUgPSAnanNzdGFja3RyYWNlJ1xuanNzdGFja3RyYWNlLmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24ganNzdGFja3RyYWNlKFByaXNtKSB7XG4gIFByaXNtLmxhbmd1YWdlcy5qc3N0YWNrdHJhY2UgPSB7XG4gICAgJ2Vycm9yLW1lc3NhZ2UnOiB7XG4gICAgICBwYXR0ZXJuOiAvXlxcUy4qL20sXG4gICAgICBhbGlhczogJ3N0cmluZydcbiAgICB9LFxuICAgICdzdGFjay1mcmFtZSc6IHtcbiAgICAgIHBhdHRlcm46IC8oXlsgXFx0XSspYXRbIFxcdF0uKi9tLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGluc2lkZToge1xuICAgICAgICAnbm90LW15LWNvZGUnOiB7XG4gICAgICAgICAgcGF0dGVybjpcbiAgICAgICAgICAgIC9eYXRbIFxcdF0rKD8hXFxzKSg/Om5vZGVcXC5qc3w8dW5rbm93bj58LiooPzpub2RlX21vZHVsZXN8XFwoPGFub255bW91cz5cXCl8XFwoPHVua25vd24+fDxhbm9ueW1vdXM+JHxcXChpbnRlcm5hbFxcL3xcXChub2RlXFwuanMpKS4qL20sXG4gICAgICAgICAgYWxpYXM6ICdjb21tZW50J1xuICAgICAgICB9LFxuICAgICAgICBmaWxlbmFtZToge1xuICAgICAgICAgIHBhdHRlcm46IC8oXFxiYXRcXHMrKD8hXFxzKXxcXCgpKD86W2EtekEtWl06KT9bXigpOl0rKD89OikvLFxuICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgICAgYWxpYXM6ICd1cmwnXG4gICAgICAgIH0sXG4gICAgICAgIGZ1bmN0aW9uOiB7XG4gICAgICAgICAgcGF0dGVybjpcbiAgICAgICAgICAgIC8oXFxiYXRcXHMrKD86bmV3XFxzKyk/KSg/IVxccylbXyRhLXpBLVpcXHhBMC1cXHVGRkZGPF1bLiRcXHdcXHhBMC1cXHVGRkZGPD5dKi8sXG4gICAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICAgIHB1bmN0dWF0aW9uOiAvXFwuL1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcHVuY3R1YXRpb246IC9bKCldLyxcbiAgICAgICAga2V5d29yZDogL1xcYig/OmF0fG5ldylcXGIvLFxuICAgICAgICBhbGlhczoge1xuICAgICAgICAgIHBhdHRlcm46IC9cXFsoPzphc1xccyspPyg/IVxccylbXyRhLXpBLVpcXHhBMC1cXHVGRkZGXVskXFx3XFx4QTAtXFx1RkZGRl0qXFxdLyxcbiAgICAgICAgICBhbGlhczogJ3ZhcmlhYmxlJ1xuICAgICAgICB9LFxuICAgICAgICAnbGluZS1udW1iZXInOiB7XG4gICAgICAgICAgcGF0dGVybjogLzpcXGQrKD86OlxcZCspP1xcYi8sXG4gICAgICAgICAgYWxpYXM6ICdudW1iZXInLFxuICAgICAgICAgIGluc2lkZToge1xuICAgICAgICAgICAgcHVuY3R1YXRpb246IC86L1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJqc3N0YWNrdHJhY2UiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImxhbmd1YWdlcyIsInBhdHRlcm4iLCJhbGlhcyIsImxvb2tiZWhpbmQiLCJpbnNpZGUiLCJmaWxlbmFtZSIsInB1bmN0dWF0aW9uIiwia2V5d29yZCJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/jsstacktrace.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/jsx.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/jsx.js ***!
  \********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = jsx;\njsx.displayName = 'jsx';\njsx.aliases = [];\nfunction jsx(Prism) {\n  ;\n  (function (Prism) {\n    var javascript = Prism.util.clone(Prism.languages.javascript);\n    var space = /(?:\\s|\\/\\/.*(?!.)|\\/\\*(?:[^*]|\\*(?!\\/))\\*\\/)/.source;\n    var braces = /(?:\\{(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])*\\})/.source;\n    var spread = /(?:\\{<S>*\\.{3}(?:[^{}]|<BRACES>)*\\})/.source;\n    /**\n     * @param {string} source\n     * @param {string} [flags]\n     */\n    function re(source, flags) {\n      source = source.replace(/<S>/g, function () {\n        return space;\n      }).replace(/<BRACES>/g, function () {\n        return braces;\n      }).replace(/<SPREAD>/g, function () {\n        return spread;\n      });\n      return RegExp(source, flags);\n    }\n    spread = re(spread).source;\n    Prism.languages.jsx = Prism.languages.extend('markup', javascript);\n    Prism.languages.jsx.tag.pattern = re(/<\\/?(?:[\\w.:-]+(?:<S>+(?:[\\w.:$-]+(?:=(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s{'\"/>=]+|<BRACES>))?|<SPREAD>))*<S>*\\/?)?>/.source);\n    Prism.languages.jsx.tag.inside['tag'].pattern = /^<\\/?[^\\s>\\/]*/;\n    Prism.languages.jsx.tag.inside['attr-value'].pattern = /=(?!\\{)(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s'\">]+)/;\n    Prism.languages.jsx.tag.inside['tag'].inside['class-name'] = /^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/;\n    Prism.languages.jsx.tag.inside['comment'] = javascript['comment'];\n    Prism.languages.insertBefore('inside', 'attr-name', {\n      spread: {\n        pattern: re(/<SPREAD>/.source),\n        inside: Prism.languages.jsx\n      }\n    }, Prism.languages.jsx.tag);\n    Prism.languages.insertBefore('inside', 'special-attr', {\n      script: {\n        // Allow for two levels of nesting\n        pattern: re(/=<BRACES>/.source),\n        alias: 'language-javascript',\n        inside: {\n          'script-punctuation': {\n            pattern: /^=(?=\\{)/,\n            alias: 'punctuation'\n          },\n          rest: Prism.languages.jsx\n        }\n      }\n    }, Prism.languages.jsx.tag); // The following will handle plain text inside tags\n    var _stringifyToken = function stringifyToken(token) {\n      if (!token) {\n        return '';\n      }\n      if (typeof token === 'string') {\n        return token;\n      }\n      if (typeof token.content === 'string') {\n        return token.content;\n      }\n      return token.content.map(_stringifyToken).join('');\n    };\n    var _walkTokens = function walkTokens(tokens) {\n      var openedTags = [];\n      for (var i = 0; i < tokens.length; i++) {\n        var token = tokens[i];\n        var notTagNorBrace = false;\n        if (typeof token !== 'string') {\n          if (token.type === 'tag' && token.content[0] && token.content[0].type === 'tag') {\n            // We found a tag, now find its kind\n            if (token.content[0].content[0].content === '</') {\n              // Closing tag\n              if (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === _stringifyToken(token.content[0].content[1])) {\n                // Pop matching opening tag\n                openedTags.pop();\n              }\n            } else {\n              if (token.content[token.content.length - 1].content === '/>') {\n                // Autoclosed tag, ignore\n              } else {\n                // Opening tag\n                openedTags.push({\n                  tagName: _stringifyToken(token.content[0].content[1]),\n                  openedBraces: 0\n                });\n              }\n            }\n          } else if (openedTags.length > 0 && token.type === 'punctuation' && token.content === '{') {\n            // Here we might have entered a JSX context inside a tag\n            openedTags[openedTags.length - 1].openedBraces++;\n          } else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === 'punctuation' && token.content === '}') {\n            // Here we might have left a JSX context inside a tag\n            openedTags[openedTags.length - 1].openedBraces--;\n          } else {\n            notTagNorBrace = true;\n          }\n        }\n        if (notTagNorBrace || typeof token === 'string') {\n          if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {\n            // Here we are inside a tag, and not inside a JSX context.\n            // That's plain text: drop any tokens matched.\n            var plainText = _stringifyToken(token); // And merge text with adjacent text\n            if (i < tokens.length - 1 && (typeof tokens[i + 1] === 'string' || tokens[i + 1].type === 'plain-text')) {\n              plainText += _stringifyToken(tokens[i + 1]);\n              tokens.splice(i + 1, 1);\n            }\n            if (i > 0 && (typeof tokens[i - 1] === 'string' || tokens[i - 1].type === 'plain-text')) {\n              plainText = _stringifyToken(tokens[i - 1]) + plainText;\n              tokens.splice(i - 1, 1);\n              i--;\n            }\n            tokens[i] = new Prism.Token('plain-text', plainText, null, plainText);\n          }\n        }\n        if (token.content && typeof token.content !== 'string') {\n          _walkTokens(token.content);\n        }\n      }\n    };\n    Prism.hooks.add('after-tokenize', function (env) {\n      if (env.language !== 'jsx' && env.language !== 'tsx') {\n        return;\n      }\n      _walkTokens(env.tokens);\n    });\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/jsx.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/julia.js":
/*!**********************************************!*\
  !*** ./node_modules/refractor/lang/julia.js ***!
  \**********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = julia;\njulia.displayName = 'julia';\njulia.aliases = [];\nfunction julia(Prism) {\n  Prism.languages.julia = {\n    comment: {\n      // support one level of nested comments\n      // https://github.com/JuliaLang/julia/pull/6128\n      pattern: /(^|[^\\\\])(?:#=(?:[^#=]|=(?!#)|#(?!=)|#=(?:[^#=]|=(?!#)|#(?!=))*=#)*=#|#.*)/,\n      lookbehind: true\n    },\n    regex: {\n      // https://docs.julialang.org/en/v1/manual/strings/#Regular-Expressions-1\n      pattern: /r\"(?:\\\\.|[^\"\\\\\\r\\n])*\"[imsx]{0,4}/,\n      greedy: true\n    },\n    string: {\n      // https://docs.julialang.org/en/v1/manual/strings/#String-Basics-1\n      // https://docs.julialang.org/en/v1/manual/strings/#non-standard-string-literals-1\n      // https://docs.julialang.org/en/v1/manual/running-external-programs/#Running-External-Programs-1\n      pattern: /\"\"\"[\\s\\S]+?\"\"\"|(?:\\b\\w+)?\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|`(?:[^\\\\`\\r\\n]|\\\\.)*`/,\n      greedy: true\n    },\n    \"char\": {\n      // https://docs.julialang.org/en/v1/manual/strings/#man-characters-1\n      pattern: /(^|[^\\w'])'(?:\\\\[^\\r\\n][^'\\r\\n]*|[^\\\\\\r\\n])'/,\n      lookbehind: true,\n      greedy: true\n    },\n    keyword: /\\b(?:abstract|baremodule|begin|bitstype|break|catch|ccall|const|continue|do|else|elseif|end|export|finally|for|function|global|if|immutable|import|importall|in|let|local|macro|module|print|println|quote|return|struct|try|type|typealias|using|while)\\b/,\n    \"boolean\": /\\b(?:false|true)\\b/,\n    number: /(?:\\b(?=\\d)|\\B(?=\\.))(?:0[box])?(?:[\\da-f]+(?:_[\\da-f]+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\.\\d+(?:_\\d+)*)(?:[efp][+-]?\\d+(?:_\\d+)*)?j?/i,\n    // https://docs.julialang.org/en/v1/manual/mathematical-operations/\n    // https://docs.julialang.org/en/v1/manual/mathematical-operations/#Operator-Precedence-and-Associativity-1\n    operator: /&&|\\|\\||[-+*^%÷⊻&$\\\\]=?|\\/[\\/=]?|!=?=?|\\|[=>]?|<(?:<=?|[=:|])?|>(?:=|>>?=?)?|==?=?|[~≠≤≥'√∛]/,\n    punctuation: /::?|[{}[\\]();,.?]/,\n    // https://docs.julialang.org/en/v1/base/numbers/#Base.im\n    constant: /\\b(?:(?:Inf|NaN)(?:16|32|64)?|im|pi)\\b|[πℯ]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvanVsaWEuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxLQUFLO0FBQ3RCQSxLQUFLLENBQUNDLFdBQVcsR0FBRyxPQUFPO0FBQzNCRCxLQUFLLENBQUNFLE9BQU8sR0FBRyxFQUFFO0FBQ2xCLFNBQVNGLEtBQUtBLENBQUNHLEtBQUssRUFBRTtFQUNwQkEsS0FBSyxDQUFDQyxTQUFTLENBQUNKLEtBQUssR0FBRztJQUN0QkssT0FBTyxFQUFFO01BQ1A7TUFDQTtNQUNBQyxPQUFPLEVBQ0wsNEVBQTRFO01BQzlFQyxVQUFVLEVBQUU7SUFDZCxDQUFDO0lBQ0RDLEtBQUssRUFBRTtNQUNMO01BQ0FGLE9BQU8sRUFBRSxtQ0FBbUM7TUFDNUNHLE1BQU0sRUFBRTtJQUNWLENBQUM7SUFDREMsTUFBTSxFQUFFO01BQ047TUFDQTtNQUNBO01BQ0FKLE9BQU8sRUFDTCxzRUFBc0U7TUFDeEVHLE1BQU0sRUFBRTtJQUNWLENBQUM7SUFDRCxRQUFNO01BQ0o7TUFDQUgsT0FBTyxFQUFFLDhDQUE4QztNQUN2REMsVUFBVSxFQUFFLElBQUk7TUFDaEJFLE1BQU0sRUFBRTtJQUNWLENBQUM7SUFDREUsT0FBTyxFQUNMLDRQQUE0UDtJQUM5UCxXQUFTLG9CQUFvQjtJQUM3QkMsTUFBTSxFQUNKLGlJQUFpSTtJQUNuSTtJQUNBO0lBQ0FDLFFBQVEsRUFDTiw4RkFBOEY7SUFDaEdDLFdBQVcsRUFBRSxtQkFBbUI7SUFDaEM7SUFDQUMsUUFBUSxFQUFFO0VBQ1osQ0FBQztBQUNIIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcanVsaWEuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0ganVsaWFcbmp1bGlhLmRpc3BsYXlOYW1lID0gJ2p1bGlhJ1xuanVsaWEuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBqdWxpYShQcmlzbSkge1xuICBQcmlzbS5sYW5ndWFnZXMuanVsaWEgPSB7XG4gICAgY29tbWVudDoge1xuICAgICAgLy8gc3VwcG9ydCBvbmUgbGV2ZWwgb2YgbmVzdGVkIGNvbW1lbnRzXG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vSnVsaWFMYW5nL2p1bGlhL3B1bGwvNjEyOFxuICAgICAgcGF0dGVybjpcbiAgICAgICAgLyhefFteXFxcXF0pKD86Iz0oPzpbXiM9XXw9KD8hIyl8Iyg/IT0pfCM9KD86W14jPV18PSg/ISMpfCMoPyE9KSkqPSMpKj0jfCMuKikvLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgIH0sXG4gICAgcmVnZXg6IHtcbiAgICAgIC8vIGh0dHBzOi8vZG9jcy5qdWxpYWxhbmcub3JnL2VuL3YxL21hbnVhbC9zdHJpbmdzLyNSZWd1bGFyLUV4cHJlc3Npb25zLTFcbiAgICAgIHBhdHRlcm46IC9yXCIoPzpcXFxcLnxbXlwiXFxcXFxcclxcbl0pKlwiW2ltc3hdezAsNH0vLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICBzdHJpbmc6IHtcbiAgICAgIC8vIGh0dHBzOi8vZG9jcy5qdWxpYWxhbmcub3JnL2VuL3YxL21hbnVhbC9zdHJpbmdzLyNTdHJpbmctQmFzaWNzLTFcbiAgICAgIC8vIGh0dHBzOi8vZG9jcy5qdWxpYWxhbmcub3JnL2VuL3YxL21hbnVhbC9zdHJpbmdzLyNub24tc3RhbmRhcmQtc3RyaW5nLWxpdGVyYWxzLTFcbiAgICAgIC8vIGh0dHBzOi8vZG9jcy5qdWxpYWxhbmcub3JnL2VuL3YxL21hbnVhbC9ydW5uaW5nLWV4dGVybmFsLXByb2dyYW1zLyNSdW5uaW5nLUV4dGVybmFsLVByb2dyYW1zLTFcbiAgICAgIHBhdHRlcm46XG4gICAgICAgIC9cIlwiXCJbXFxzXFxTXSs/XCJcIlwifCg/OlxcYlxcdyspP1wiKD86XFxcXC58W15cIlxcXFxcXHJcXG5dKSpcInxgKD86W15cXFxcYFxcclxcbl18XFxcXC4pKmAvLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICBjaGFyOiB7XG4gICAgICAvLyBodHRwczovL2RvY3MuanVsaWFsYW5nLm9yZy9lbi92MS9tYW51YWwvc3RyaW5ncy8jbWFuLWNoYXJhY3RlcnMtMVxuICAgICAgcGF0dGVybjogLyhefFteXFx3J10pJyg/OlxcXFxbXlxcclxcbl1bXidcXHJcXG5dKnxbXlxcXFxcXHJcXG5dKScvLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAga2V5d29yZDpcbiAgICAgIC9cXGIoPzphYnN0cmFjdHxiYXJlbW9kdWxlfGJlZ2lufGJpdHN0eXBlfGJyZWFrfGNhdGNofGNjYWxsfGNvbnN0fGNvbnRpbnVlfGRvfGVsc2V8ZWxzZWlmfGVuZHxleHBvcnR8ZmluYWxseXxmb3J8ZnVuY3Rpb258Z2xvYmFsfGlmfGltbXV0YWJsZXxpbXBvcnR8aW1wb3J0YWxsfGlufGxldHxsb2NhbHxtYWNyb3xtb2R1bGV8cHJpbnR8cHJpbnRsbnxxdW90ZXxyZXR1cm58c3RydWN0fHRyeXx0eXBlfHR5cGVhbGlhc3x1c2luZ3x3aGlsZSlcXGIvLFxuICAgIGJvb2xlYW46IC9cXGIoPzpmYWxzZXx0cnVlKVxcYi8sXG4gICAgbnVtYmVyOlxuICAgICAgLyg/OlxcYig/PVxcZCl8XFxCKD89XFwuKSkoPzowW2JveF0pPyg/OltcXGRhLWZdKyg/Ol9bXFxkYS1mXSspKig/OlxcLig/OlxcZCsoPzpfXFxkKykqKT8pP3xcXC5cXGQrKD86X1xcZCspKikoPzpbZWZwXVsrLV0/XFxkKyg/Ol9cXGQrKSopP2o/L2ksXG4gICAgLy8gaHR0cHM6Ly9kb2NzLmp1bGlhbGFuZy5vcmcvZW4vdjEvbWFudWFsL21hdGhlbWF0aWNhbC1vcGVyYXRpb25zL1xuICAgIC8vIGh0dHBzOi8vZG9jcy5qdWxpYWxhbmcub3JnL2VuL3YxL21hbnVhbC9tYXRoZW1hdGljYWwtb3BlcmF0aW9ucy8jT3BlcmF0b3ItUHJlY2VkZW5jZS1hbmQtQXNzb2NpYXRpdml0eS0xXG4gICAgb3BlcmF0b3I6XG4gICAgICAvJiZ8XFx8XFx8fFstKypeJcO34oq7JiRcXFxcXT0/fFxcL1tcXC89XT98IT0/PT98XFx8Wz0+XT98PCg/Ojw9P3xbPTp8XSk/fD4oPzo9fD4+Pz0/KT98PT0/PT98W37iiaDiiaTiiaUn4oia4oibXS8sXG4gICAgcHVuY3R1YXRpb246IC86Oj98W3t9W1xcXSgpOywuP10vLFxuICAgIC8vIGh0dHBzOi8vZG9jcy5qdWxpYWxhbmcub3JnL2VuL3YxL2Jhc2UvbnVtYmVycy8jQmFzZS5pbVxuICAgIGNvbnN0YW50OiAvXFxiKD86KD86SW5mfE5hTikoPzoxNnwzMnw2NCk/fGltfHBpKVxcYnxbz4DihK9dL1xuICB9XG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImp1bGlhIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJjb21tZW50IiwicGF0dGVybiIsImxvb2tiZWhpbmQiLCJyZWdleCIsImdyZWVkeSIsInN0cmluZyIsImtleXdvcmQiLCJudW1iZXIiLCJvcGVyYXRvciIsInB1bmN0dWF0aW9uIiwiY29uc3RhbnQiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/julia.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/keepalived.js":
/*!***************************************************!*\
  !*** ./node_modules/refractor/lang/keepalived.js ***!
  \***************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = keepalived;\nkeepalived.displayName = 'keepalived';\nkeepalived.aliases = [];\nfunction keepalived(Prism) {\n  Prism.languages.keepalived = {\n    comment: {\n      pattern: /[#!].*/,\n      greedy: true\n    },\n    string: {\n      pattern: /(^|[^\\\\])(?:\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n])*')/,\n      lookbehind: true,\n      greedy: true\n    },\n    // support IPv4, IPv6, subnet mask\n    ip: {\n      pattern: RegExp(/\\b(?:(?:(?:[\\da-f]{1,4}:){7}[\\da-f]{1,4}|(?:[\\da-f]{1,4}:){6}:[\\da-f]{1,4}|(?:[\\da-f]{1,4}:){5}:(?:[\\da-f]{1,4}:)?[\\da-f]{1,4}|(?:[\\da-f]{1,4}:){4}:(?:[\\da-f]{1,4}:){0,2}[\\da-f]{1,4}|(?:[\\da-f]{1,4}:){3}:(?:[\\da-f]{1,4}:){0,3}[\\da-f]{1,4}|(?:[\\da-f]{1,4}:){2}:(?:[\\da-f]{1,4}:){0,4}[\\da-f]{1,4}|(?:[\\da-f]{1,4}:){6}<ipv4>|(?:[\\da-f]{1,4}:){0,5}:<ipv4>|::(?:[\\da-f]{1,4}:){0,5}<ipv4>|[\\da-f]{1,4}::(?:[\\da-f]{1,4}:){0,5}[\\da-f]{1,4}|::(?:[\\da-f]{1,4}:){0,6}[\\da-f]{1,4}|(?:[\\da-f]{1,4}:){1,7}:)(?:\\/\\d{1,3})?|<ipv4>(?:\\/\\d{1,2})?)\\b/.source.replace(/<ipv4>/g, function () {\n        return /(?:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d))/.source;\n      }), 'i'),\n      alias: 'number'\n    },\n    // support *nix / Windows, directory / file\n    path: {\n      pattern: /(\\s)\\/(?:[^\\/\\s]+\\/)*[^\\/\\s]*|\\b[a-zA-Z]:\\\\(?:[^\\\\\\s]+\\\\)*[^\\\\\\s]*/,\n      lookbehind: true,\n      alias: 'string'\n    },\n    variable: /\\$\\{?\\w+\\}?/,\n    email: {\n      pattern: /[\\w-]+@[\\w-]+(?:\\.[\\w-]{2,3}){1,2}/,\n      alias: 'string'\n    },\n    'conditional-configuration': {\n      pattern: /@\\^?[\\w-]+/,\n      alias: 'variable'\n    },\n    operator: /=/,\n    property: /\\b(?:BFD_CHECK|DNS_CHECK|FILE_CHECK|HTTP_GET|MISC_CHECK|NAME|PING_CHECK|SCRIPTS|SMTP_CHECK|SSL|SSL_GET|TCP_CHECK|UDP_CHECK|accept|advert_int|alpha|auth_pass|auth_type|authentication|bfd_cpu_affinity|bfd_instance|bfd_no_swap|bfd_priority|bfd_process_name|bfd_rlimit_rttime|bfd_rt_priority|bind_if|bind_port|bindto|ca|certificate|check_unicast_src|checker|checker_cpu_affinity|checker_log_all_failures|checker_no_swap|checker_priority|checker_rlimit_rttime|checker_rt_priority|child_wait_time|connect_ip|connect_port|connect_timeout|dbus_service_name|debug|default_interface|delay|delay_before_retry|delay_loop|digest|dont_track_primary|dynamic|dynamic_interfaces|enable_(?:dbus|script_security|sni|snmp_checker|snmp_rfc|snmp_rfcv2|snmp_rfcv3|snmp_vrrp|traps)|end|fall|fast_recovery|file|flag-[123]|fork_delay|full_command|fwmark|garp_group|garp_interval|garp_lower_prio_delay|garp_lower_prio_repeat|garp_master_delay|garp_master_refresh|garp_master_refresh_repeat|garp_master_repeat|global_defs|global_tracking|gna_interval|group|ha_suspend|hashed|helo_name|higher_prio_send_advert|hoplimit|http_protocol|hysteresis|idle_tx|include|inhibit_on_failure|init_fail|init_file|instance|interface|interfaces|interval|ip_family|ipvs_process_name|keepalived.conf|kernel_rx_buf_size|key|linkbeat_interfaces|linkbeat_use_polling|log_all_failures|log_unknown_vrids|lower_prio_no_advert|lthreshold|lvs_flush|lvs_flush_onstop|lvs_method|lvs_netlink_cmd_rcv_bufs|lvs_netlink_cmd_rcv_bufs_force|lvs_netlink_monitor_rcv_bufs|lvs_netlink_monitor_rcv_bufs_force|lvs_notify_fifo|lvs_notify_fifo_script|lvs_sched|lvs_sync_daemon|max_auto_priority|max_hops|mcast_src_ip|mh-fallback|mh-port|min_auto_priority_delay|min_rx|min_tx|misc_dynamic|misc_path|misc_timeout|multiplier|name|namespace_with_ipsets|native_ipv6|neighbor_ip|net_namespace|net_namespace_ipvs|nftables|nftables_counters|nftables_ifindex|nftables_priority|no_accept|no_checker_emails|no_email_faults|nopreempt|notification_email|notification_email_from|notify|notify_backup|notify_deleted|notify_down|notify_fault|notify_fifo|notify_fifo_script|notify_master|notify_master_rx_lower_pri|notify_priority_changes|notify_stop|notify_up|old_unicast_checksum|omega|ops|param_match|passive|password|path|persistence_engine|persistence_granularity|persistence_timeout|preempt|preempt_delay|priority|process|process_monitor_rcv_bufs|process_monitor_rcv_bufs_force|process_name|process_names|promote_secondaries|protocol|proxy_arp|proxy_arp_pvlan|quorum|quorum_down|quorum_max|quorum_up|random_seed|real_server|regex|regex_max_offset|regex_min_offset|regex_no_match|regex_options|regex_stack|reload_repeat|reload_time_file|require_reply|retry|rise|router_id|rs_init_notifies|script|script_user|sh-fallback|sh-port|shutdown_script|shutdown_script_timeout|skip_check_adv_addr|smtp_alert|smtp_alert_checker|smtp_alert_vrrp|smtp_connect_timeout|smtp_helo_name|smtp_server|snmp_socket|sorry_server|sorry_server_inhibit|sorry_server_lvs_method|source_ip|start|startup_script|startup_script_timeout|state|static_ipaddress|static_routes|static_rules|status_code|step|strict_mode|sync_group_tracking_weight|terminate_delay|timeout|track_bfd|track_file|track_group|track_interface|track_process|track_script|track_src_ip|ttl|type|umask|unicast_peer|unicast_src_ip|unicast_ttl|url|use_ipvlan|use_pid_dir|use_vmac|user|uthreshold|val[123]|version|virtual_ipaddress|virtual_ipaddress_excluded|virtual_router_id|virtual_routes|virtual_rules|virtual_server|virtual_server_group|virtualhost|vmac_xmit_base|vrrp|vrrp_(?:check_unicast_src|cpu_affinity|garp_interval|garp_lower_prio_delay|garp_lower_prio_repeat|garp_master_delay|garp_master_refresh|garp_master_refresh_repeat|garp_master_repeat|gna_interval|higher_prio_send_advert|instance|ipsets|iptables|lower_prio_no_advert|mcast_group4|mcast_group6|min_garp|netlink_cmd_rcv_bufs|netlink_cmd_rcv_bufs_force|netlink_monitor_rcv_bufs|netlink_monitor_rcv_bufs_force|no_swap|notify_fifo|notify_fifo_script|notify_priority_changes|priority|process_name|rlimit_rttime|rt_priority|rx_bufs_multiplier|rx_bufs_policy|script|skip_check_adv_addr|startup_delay|strict|sync_group|track_process|version)|warmup|weight)\\b/,\n    constant: /\\b(?:A|AAAA|AH|BACKUP|CNAME|DR|MASTER|MX|NAT|NS|PASS|SCTP|SOA|TCP|TUN|TXT|UDP|dh|fo|lblc|lblcr|lc|mh|nq|ovf|rr|sed|sh|wlc|wrr)\\b/,\n    number: {\n      pattern: /(^|[^\\w.-])-?\\d+(?:\\.\\d+)?/,\n      lookbehind: true\n    },\n    \"boolean\": /\\b(?:false|no|off|on|true|yes)\\b/,\n    punctuation: /[\\{\\}]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/keepalived.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/keyman.js":
/*!***********************************************!*\
  !*** ./node_modules/refractor/lang/keyman.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = keyman;\nkeyman.displayName = 'keyman';\nkeyman.aliases = [];\nfunction keyman(Prism) {\n  Prism.languages.keyman = {\n    comment: {\n      pattern: /\\bc .*/i,\n      greedy: true\n    },\n    string: {\n      pattern: /\"[^\"\\r\\n]*\"|'[^'\\r\\n]*'/,\n      greedy: true\n    },\n    'virtual-key': {\n      pattern: /\\[\\s*(?:(?:ALT|CAPS|CTRL|LALT|LCTRL|NCAPS|RALT|RCTRL|SHIFT)\\s+)*(?:[TKU]_[\\w?]+|[A-E]\\d\\d?|\"[^\"\\r\\n]*\"|'[^'\\r\\n]*')\\s*\\]/i,\n      greedy: true,\n      alias: 'function' // alias for styles\n    },\n\n    // https://help.keyman.com/developer/language/guide/headers\n    'header-keyword': {\n      pattern: /&\\w+/,\n      alias: 'bold' // alias for styles\n    },\n\n    'header-statement': {\n      pattern: /\\b(?:bitmap|bitmaps|caps always off|caps on only|copyright|hotkey|language|layout|message|name|shift frees caps|version)\\b/i,\n      alias: 'bold' // alias for styles\n    },\n\n    'rule-keyword': {\n      pattern: /\\b(?:any|baselayout|beep|call|context|deadkey|dk|if|index|layer|notany|nul|outs|platform|reset|return|save|set|store|use)\\b/i,\n      alias: 'keyword'\n    },\n    'structural-keyword': {\n      pattern: /\\b(?:ansi|begin|group|match|nomatch|unicode|using keys)\\b/i,\n      alias: 'keyword'\n    },\n    'compile-target': {\n      pattern: /\\$(?:keyman|keymanonly|keymanweb|kmfl|weaver):/i,\n      alias: 'property'\n    },\n    // U+####, x###, d### characters and numbers\n    number: /\\b(?:U\\+[\\dA-F]+|d\\d+|x[\\da-f]+|\\d+)\\b/i,\n    operator: /[+>\\\\$]|\\.\\./,\n    punctuation: /[()=,]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcva2V5bWFuLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsTUFBTTtBQUN2QkEsTUFBTSxDQUFDQyxXQUFXLEdBQUcsUUFBUTtBQUM3QkQsTUFBTSxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNuQixTQUFTRixNQUFNQSxDQUFDRyxLQUFLLEVBQUU7RUFDckJBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixNQUFNLEdBQUc7SUFDdkJLLE9BQU8sRUFBRTtNQUNQQyxPQUFPLEVBQUUsU0FBUztNQUNsQkMsTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUNEQyxNQUFNLEVBQUU7TUFDTkYsT0FBTyxFQUFFLHlCQUF5QjtNQUNsQ0MsTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUNELGFBQWEsRUFBRTtNQUNiRCxPQUFPLEVBQ0wsMkhBQTJIO01BQzdIQyxNQUFNLEVBQUUsSUFBSTtNQUNaRSxLQUFLLEVBQUUsVUFBVSxDQUFDO0lBQ3BCLENBQUM7O0lBQ0Q7SUFDQSxnQkFBZ0IsRUFBRTtNQUNoQkgsT0FBTyxFQUFFLE1BQU07TUFDZkcsS0FBSyxFQUFFLE1BQU0sQ0FBQztJQUNoQixDQUFDOztJQUNELGtCQUFrQixFQUFFO01BQ2xCSCxPQUFPLEVBQ0wsNkhBQTZIO01BQy9IRyxLQUFLLEVBQUUsTUFBTSxDQUFDO0lBQ2hCLENBQUM7O0lBQ0QsY0FBYyxFQUFFO01BQ2RILE9BQU8sRUFDTCw4SEFBOEg7TUFDaElHLEtBQUssRUFBRTtJQUNULENBQUM7SUFDRCxvQkFBb0IsRUFBRTtNQUNwQkgsT0FBTyxFQUFFLDREQUE0RDtNQUNyRUcsS0FBSyxFQUFFO0lBQ1QsQ0FBQztJQUNELGdCQUFnQixFQUFFO01BQ2hCSCxPQUFPLEVBQUUsaURBQWlEO01BQzFERyxLQUFLLEVBQUU7SUFDVCxDQUFDO0lBQ0Q7SUFDQUMsTUFBTSxFQUFFLHlDQUF5QztJQUNqREMsUUFBUSxFQUFFLGNBQWM7SUFDeEJDLFdBQVcsRUFBRTtFQUNmLENBQUM7QUFDSCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXGtleW1hbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBrZXltYW5cbmtleW1hbi5kaXNwbGF5TmFtZSA9ICdrZXltYW4nXG5rZXltYW4uYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBrZXltYW4oUHJpc20pIHtcbiAgUHJpc20ubGFuZ3VhZ2VzLmtleW1hbiA9IHtcbiAgICBjb21tZW50OiB7XG4gICAgICBwYXR0ZXJuOiAvXFxiYyAuKi9pLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICBzdHJpbmc6IHtcbiAgICAgIHBhdHRlcm46IC9cIlteXCJcXHJcXG5dKlwifCdbXidcXHJcXG5dKicvLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICAndmlydHVhbC1rZXknOiB7XG4gICAgICBwYXR0ZXJuOlxuICAgICAgICAvXFxbXFxzKig/Oig/OkFMVHxDQVBTfENUUkx8TEFMVHxMQ1RSTHxOQ0FQU3xSQUxUfFJDVFJMfFNISUZUKVxccyspKig/OltUS1VdX1tcXHc/XSt8W0EtRV1cXGRcXGQ/fFwiW15cIlxcclxcbl0qXCJ8J1teJ1xcclxcbl0qJylcXHMqXFxdL2ksXG4gICAgICBncmVlZHk6IHRydWUsXG4gICAgICBhbGlhczogJ2Z1bmN0aW9uJyAvLyBhbGlhcyBmb3Igc3R5bGVzXG4gICAgfSxcbiAgICAvLyBodHRwczovL2hlbHAua2V5bWFuLmNvbS9kZXZlbG9wZXIvbGFuZ3VhZ2UvZ3VpZGUvaGVhZGVyc1xuICAgICdoZWFkZXIta2V5d29yZCc6IHtcbiAgICAgIHBhdHRlcm46IC8mXFx3Ky8sXG4gICAgICBhbGlhczogJ2JvbGQnIC8vIGFsaWFzIGZvciBzdHlsZXNcbiAgICB9LFxuICAgICdoZWFkZXItc3RhdGVtZW50Jzoge1xuICAgICAgcGF0dGVybjpcbiAgICAgICAgL1xcYig/OmJpdG1hcHxiaXRtYXBzfGNhcHMgYWx3YXlzIG9mZnxjYXBzIG9uIG9ubHl8Y29weXJpZ2h0fGhvdGtleXxsYW5ndWFnZXxsYXlvdXR8bWVzc2FnZXxuYW1lfHNoaWZ0IGZyZWVzIGNhcHN8dmVyc2lvbilcXGIvaSxcbiAgICAgIGFsaWFzOiAnYm9sZCcgLy8gYWxpYXMgZm9yIHN0eWxlc1xuICAgIH0sXG4gICAgJ3J1bGUta2V5d29yZCc6IHtcbiAgICAgIHBhdHRlcm46XG4gICAgICAgIC9cXGIoPzphbnl8YmFzZWxheW91dHxiZWVwfGNhbGx8Y29udGV4dHxkZWFka2V5fGRrfGlmfGluZGV4fGxheWVyfG5vdGFueXxudWx8b3V0c3xwbGF0Zm9ybXxyZXNldHxyZXR1cm58c2F2ZXxzZXR8c3RvcmV8dXNlKVxcYi9pLFxuICAgICAgYWxpYXM6ICdrZXl3b3JkJ1xuICAgIH0sXG4gICAgJ3N0cnVjdHVyYWwta2V5d29yZCc6IHtcbiAgICAgIHBhdHRlcm46IC9cXGIoPzphbnNpfGJlZ2lufGdyb3VwfG1hdGNofG5vbWF0Y2h8dW5pY29kZXx1c2luZyBrZXlzKVxcYi9pLFxuICAgICAgYWxpYXM6ICdrZXl3b3JkJ1xuICAgIH0sXG4gICAgJ2NvbXBpbGUtdGFyZ2V0Jzoge1xuICAgICAgcGF0dGVybjogL1xcJCg/OmtleW1hbnxrZXltYW5vbmx5fGtleW1hbndlYnxrbWZsfHdlYXZlcik6L2ksXG4gICAgICBhbGlhczogJ3Byb3BlcnR5J1xuICAgIH0sXG4gICAgLy8gVSsjIyMjLCB4IyMjLCBkIyMjIGNoYXJhY3RlcnMgYW5kIG51bWJlcnNcbiAgICBudW1iZXI6IC9cXGIoPzpVXFwrW1xcZEEtRl0rfGRcXGQrfHhbXFxkYS1mXSt8XFxkKylcXGIvaSxcbiAgICBvcGVyYXRvcjogL1srPlxcXFwkXXxcXC5cXC4vLFxuICAgIHB1bmN0dWF0aW9uOiAvWygpPSxdL1xuICB9XG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImtleW1hbiIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwiY29tbWVudCIsInBhdHRlcm4iLCJncmVlZHkiLCJzdHJpbmciLCJhbGlhcyIsIm51bWJlciIsIm9wZXJhdG9yIiwicHVuY3R1YXRpb24iXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/keyman.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/kotlin.js":
/*!***********************************************!*\
  !*** ./node_modules/refractor/lang/kotlin.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = kotlin;\nkotlin.displayName = 'kotlin';\nkotlin.aliases = ['kt', 'kts'];\nfunction kotlin(Prism) {\n  ;\n  (function (Prism) {\n    Prism.languages.kotlin = Prism.languages.extend('clike', {\n      keyword: {\n        // The lookbehind prevents wrong highlighting of e.g. kotlin.properties.get\n        pattern: /(^|[^.])\\b(?:abstract|actual|annotation|as|break|by|catch|class|companion|const|constructor|continue|crossinline|data|do|dynamic|else|enum|expect|external|final|finally|for|fun|get|if|import|in|infix|init|inline|inner|interface|internal|is|lateinit|noinline|null|object|open|operator|out|override|package|private|protected|public|reified|return|sealed|set|super|suspend|tailrec|this|throw|to|try|typealias|val|var|vararg|when|where|while)\\b/,\n        lookbehind: true\n      },\n      \"function\": [{\n        pattern: /(?:`[^\\r\\n`]+`|\\b\\w+)(?=\\s*\\()/,\n        greedy: true\n      }, {\n        pattern: /(\\.)(?:`[^\\r\\n`]+`|\\w+)(?=\\s*\\{)/,\n        lookbehind: true,\n        greedy: true\n      }],\n      number: /\\b(?:0[xX][\\da-fA-F]+(?:_[\\da-fA-F]+)*|0[bB][01]+(?:_[01]+)*|\\d+(?:_\\d+)*(?:\\.\\d+(?:_\\d+)*)?(?:[eE][+-]?\\d+(?:_\\d+)*)?[fFL]?)\\b/,\n      operator: /\\+[+=]?|-[-=>]?|==?=?|!(?:!|==?)?|[\\/*%<>]=?|[?:]:?|\\.\\.|&&|\\|\\||\\b(?:and|inv|or|shl|shr|ushr|xor)\\b/\n    });\n    delete Prism.languages.kotlin['class-name'];\n    var interpolationInside = {\n      'interpolation-punctuation': {\n        pattern: /^\\$\\{?|\\}$/,\n        alias: 'punctuation'\n      },\n      expression: {\n        pattern: /[\\s\\S]+/,\n        inside: Prism.languages.kotlin\n      }\n    };\n    Prism.languages.insertBefore('kotlin', 'string', {\n      // https://kotlinlang.org/spec/expressions.html#string-interpolation-expressions\n      'string-literal': [{\n        pattern: /\"\"\"(?:[^$]|\\$(?:(?!\\{)|\\{[^{}]*\\}))*?\"\"\"/,\n        alias: 'multiline',\n        inside: {\n          interpolation: {\n            pattern: /\\$(?:[a-z_]\\w*|\\{[^{}]*\\})/i,\n            inside: interpolationInside\n          },\n          string: /[\\s\\S]+/\n        }\n      }, {\n        pattern: /\"(?:[^\"\\\\\\r\\n$]|\\\\.|\\$(?:(?!\\{)|\\{[^{}]*\\}))*\"/,\n        alias: 'singleline',\n        inside: {\n          interpolation: {\n            pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$(?:[a-z_]\\w*|\\{[^{}]*\\})/i,\n            lookbehind: true,\n            inside: interpolationInside\n          },\n          string: /[\\s\\S]+/\n        }\n      }],\n      \"char\": {\n        // https://kotlinlang.org/spec/expressions.html#character-literals\n        pattern: /'(?:[^'\\\\\\r\\n]|\\\\(?:.|u[a-fA-F0-9]{0,4}))'/,\n        greedy: true\n      }\n    });\n    delete Prism.languages.kotlin['string'];\n    Prism.languages.insertBefore('kotlin', 'keyword', {\n      annotation: {\n        pattern: /\\B@(?:\\w+:)?(?:[A-Z]\\w*|\\[[^\\]]+\\])/,\n        alias: 'builtin'\n      }\n    });\n    Prism.languages.insertBefore('kotlin', 'function', {\n      label: {\n        pattern: /\\b\\w+@|@\\w+\\b/,\n        alias: 'symbol'\n      }\n    });\n    Prism.languages.kt = Prism.languages.kotlin;\n    Prism.languages.kts = Prism.languages.kotlin;\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcva290bGluLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsTUFBTTtBQUN2QkEsTUFBTSxDQUFDQyxXQUFXLEdBQUcsUUFBUTtBQUM3QkQsTUFBTSxDQUFDRSxPQUFPLEdBQUcsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDO0FBQzlCLFNBQVNGLE1BQU1BLENBQUNHLEtBQUssRUFBRTtFQUNyQjtFQUFDLENBQUMsVUFBVUEsS0FBSyxFQUFFO0lBQ2pCQSxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osTUFBTSxHQUFHRyxLQUFLLENBQUNDLFNBQVMsQ0FBQ0MsTUFBTSxDQUFDLE9BQU8sRUFBRTtNQUN2REMsT0FBTyxFQUFFO1FBQ1A7UUFDQUMsT0FBTyxFQUNMLDBiQUEwYjtRQUM1YkMsVUFBVSxFQUFFO01BQ2QsQ0FBQztNQUNELFlBQVUsQ0FDUjtRQUNFRCxPQUFPLEVBQUUsZ0NBQWdDO1FBQ3pDRSxNQUFNLEVBQUU7TUFDVixDQUFDLEVBQ0Q7UUFDRUYsT0FBTyxFQUFFLGtDQUFrQztRQUMzQ0MsVUFBVSxFQUFFLElBQUk7UUFDaEJDLE1BQU0sRUFBRTtNQUNWLENBQUMsQ0FDRjtNQUNEQyxNQUFNLEVBQ0osaUlBQWlJO01BQ25JQyxRQUFRLEVBQ047SUFDSixDQUFDLENBQUM7SUFDRixPQUFPUixLQUFLLENBQUNDLFNBQVMsQ0FBQ0osTUFBTSxDQUFDLFlBQVksQ0FBQztJQUMzQyxJQUFJWSxtQkFBbUIsR0FBRztNQUN4QiwyQkFBMkIsRUFBRTtRQUMzQkwsT0FBTyxFQUFFLFlBQVk7UUFDckJNLEtBQUssRUFBRTtNQUNULENBQUM7TUFDREMsVUFBVSxFQUFFO1FBQ1ZQLE9BQU8sRUFBRSxTQUFTO1FBQ2xCUSxNQUFNLEVBQUVaLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSjtNQUMxQjtJQUNGLENBQUM7SUFDREcsS0FBSyxDQUFDQyxTQUFTLENBQUNZLFlBQVksQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFO01BQy9DO01BQ0EsZ0JBQWdCLEVBQUUsQ0FDaEI7UUFDRVQsT0FBTyxFQUFFLDBDQUEwQztRQUNuRE0sS0FBSyxFQUFFLFdBQVc7UUFDbEJFLE1BQU0sRUFBRTtVQUNORSxhQUFhLEVBQUU7WUFDYlYsT0FBTyxFQUFFLDZCQUE2QjtZQUN0Q1EsTUFBTSxFQUFFSDtVQUNWLENBQUM7VUFDRE0sTUFBTSxFQUFFO1FBQ1Y7TUFDRixDQUFDLEVBQ0Q7UUFDRVgsT0FBTyxFQUFFLGdEQUFnRDtRQUN6RE0sS0FBSyxFQUFFLFlBQVk7UUFDbkJFLE1BQU0sRUFBRTtVQUNORSxhQUFhLEVBQUU7WUFDYlYsT0FBTyxFQUFFLG9EQUFvRDtZQUM3REMsVUFBVSxFQUFFLElBQUk7WUFDaEJPLE1BQU0sRUFBRUg7VUFDVixDQUFDO1VBQ0RNLE1BQU0sRUFBRTtRQUNWO01BQ0YsQ0FBQyxDQUNGO01BQ0QsUUFBTTtRQUNKO1FBQ0FYLE9BQU8sRUFBRSw0Q0FBNEM7UUFDckRFLE1BQU0sRUFBRTtNQUNWO0lBQ0YsQ0FBQyxDQUFDO0lBQ0YsT0FBT04sS0FBSyxDQUFDQyxTQUFTLENBQUNKLE1BQU0sQ0FBQyxRQUFRLENBQUM7SUFDdkNHLEtBQUssQ0FBQ0MsU0FBUyxDQUFDWSxZQUFZLENBQUMsUUFBUSxFQUFFLFNBQVMsRUFBRTtNQUNoREcsVUFBVSxFQUFFO1FBQ1ZaLE9BQU8sRUFBRSxxQ0FBcUM7UUFDOUNNLEtBQUssRUFBRTtNQUNUO0lBQ0YsQ0FBQyxDQUFDO0lBQ0ZWLEtBQUssQ0FBQ0MsU0FBUyxDQUFDWSxZQUFZLENBQUMsUUFBUSxFQUFFLFVBQVUsRUFBRTtNQUNqREksS0FBSyxFQUFFO1FBQ0xiLE9BQU8sRUFBRSxlQUFlO1FBQ3hCTSxLQUFLLEVBQUU7TUFDVDtJQUNGLENBQUMsQ0FBQztJQUNGVixLQUFLLENBQUNDLFNBQVMsQ0FBQ2lCLEVBQUUsR0FBR2xCLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixNQUFNO0lBQzNDRyxLQUFLLENBQUNDLFNBQVMsQ0FBQ2tCLEdBQUcsR0FBR25CLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixNQUFNO0VBQzlDLENBQUMsRUFBRUcsS0FBSyxDQUFDO0FBQ1giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxrb3RsaW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0ga290bGluXG5rb3RsaW4uZGlzcGxheU5hbWUgPSAna290bGluJ1xua290bGluLmFsaWFzZXMgPSBbJ2t0JywgJ2t0cyddXG5mdW5jdGlvbiBrb3RsaW4oUHJpc20pIHtcbiAgOyhmdW5jdGlvbiAoUHJpc20pIHtcbiAgICBQcmlzbS5sYW5ndWFnZXMua290bGluID0gUHJpc20ubGFuZ3VhZ2VzLmV4dGVuZCgnY2xpa2UnLCB7XG4gICAgICBrZXl3b3JkOiB7XG4gICAgICAgIC8vIFRoZSBsb29rYmVoaW5kIHByZXZlbnRzIHdyb25nIGhpZ2hsaWdodGluZyBvZiBlLmcuIGtvdGxpbi5wcm9wZXJ0aWVzLmdldFxuICAgICAgICBwYXR0ZXJuOlxuICAgICAgICAgIC8oXnxbXi5dKVxcYig/OmFic3RyYWN0fGFjdHVhbHxhbm5vdGF0aW9ufGFzfGJyZWFrfGJ5fGNhdGNofGNsYXNzfGNvbXBhbmlvbnxjb25zdHxjb25zdHJ1Y3Rvcnxjb250aW51ZXxjcm9zc2lubGluZXxkYXRhfGRvfGR5bmFtaWN8ZWxzZXxlbnVtfGV4cGVjdHxleHRlcm5hbHxmaW5hbHxmaW5hbGx5fGZvcnxmdW58Z2V0fGlmfGltcG9ydHxpbnxpbmZpeHxpbml0fGlubGluZXxpbm5lcnxpbnRlcmZhY2V8aW50ZXJuYWx8aXN8bGF0ZWluaXR8bm9pbmxpbmV8bnVsbHxvYmplY3R8b3BlbnxvcGVyYXRvcnxvdXR8b3ZlcnJpZGV8cGFja2FnZXxwcml2YXRlfHByb3RlY3RlZHxwdWJsaWN8cmVpZmllZHxyZXR1cm58c2VhbGVkfHNldHxzdXBlcnxzdXNwZW5kfHRhaWxyZWN8dGhpc3x0aHJvd3x0b3x0cnl8dHlwZWFsaWFzfHZhbHx2YXJ8dmFyYXJnfHdoZW58d2hlcmV8d2hpbGUpXFxiLyxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIGZ1bmN0aW9uOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwYXR0ZXJuOiAvKD86YFteXFxyXFxuYF0rYHxcXGJcXHcrKSg/PVxccypcXCgpLyxcbiAgICAgICAgICBncmVlZHk6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHBhdHRlcm46IC8oXFwuKSg/OmBbXlxcclxcbmBdK2B8XFx3KykoPz1cXHMqXFx7KS8sXG4gICAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgICBncmVlZHk6IHRydWVcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIG51bWJlcjpcbiAgICAgICAgL1xcYig/OjBbeFhdW1xcZGEtZkEtRl0rKD86X1tcXGRhLWZBLUZdKykqfDBbYkJdWzAxXSsoPzpfWzAxXSspKnxcXGQrKD86X1xcZCspKig/OlxcLlxcZCsoPzpfXFxkKykqKT8oPzpbZUVdWystXT9cXGQrKD86X1xcZCspKik/W2ZGTF0/KVxcYi8sXG4gICAgICBvcGVyYXRvcjpcbiAgICAgICAgL1xcK1srPV0/fC1bLT0+XT98PT0/PT98ISg/OiF8PT0/KT98W1xcLyolPD5dPT98Wz86XTo/fFxcLlxcLnwmJnxcXHxcXHx8XFxiKD86YW5kfGludnxvcnxzaGx8c2hyfHVzaHJ8eG9yKVxcYi9cbiAgICB9KVxuICAgIGRlbGV0ZSBQcmlzbS5sYW5ndWFnZXMua290bGluWydjbGFzcy1uYW1lJ11cbiAgICB2YXIgaW50ZXJwb2xhdGlvbkluc2lkZSA9IHtcbiAgICAgICdpbnRlcnBvbGF0aW9uLXB1bmN0dWF0aW9uJzoge1xuICAgICAgICBwYXR0ZXJuOiAvXlxcJFxcez98XFx9JC8sXG4gICAgICAgIGFsaWFzOiAncHVuY3R1YXRpb24nXG4gICAgICB9LFxuICAgICAgZXhwcmVzc2lvbjoge1xuICAgICAgICBwYXR0ZXJuOiAvW1xcc1xcU10rLyxcbiAgICAgICAgaW5zaWRlOiBQcmlzbS5sYW5ndWFnZXMua290bGluXG4gICAgICB9XG4gICAgfVxuICAgIFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ2tvdGxpbicsICdzdHJpbmcnLCB7XG4gICAgICAvLyBodHRwczovL2tvdGxpbmxhbmcub3JnL3NwZWMvZXhwcmVzc2lvbnMuaHRtbCNzdHJpbmctaW50ZXJwb2xhdGlvbi1leHByZXNzaW9uc1xuICAgICAgJ3N0cmluZy1saXRlcmFsJzogW1xuICAgICAgICB7XG4gICAgICAgICAgcGF0dGVybjogL1wiXCJcIig/OlteJF18XFwkKD86KD8hXFx7KXxcXHtbXnt9XSpcXH0pKSo/XCJcIlwiLyxcbiAgICAgICAgICBhbGlhczogJ211bHRpbGluZScsXG4gICAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgICBpbnRlcnBvbGF0aW9uOiB7XG4gICAgICAgICAgICAgIHBhdHRlcm46IC9cXCQoPzpbYS16X11cXHcqfFxce1tee31dKlxcfSkvaSxcbiAgICAgICAgICAgICAgaW5zaWRlOiBpbnRlcnBvbGF0aW9uSW5zaWRlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RyaW5nOiAvW1xcc1xcU10rL1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHBhdHRlcm46IC9cIig/OlteXCJcXFxcXFxyXFxuJF18XFxcXC58XFwkKD86KD8hXFx7KXxcXHtbXnt9XSpcXH0pKSpcIi8sXG4gICAgICAgICAgYWxpYXM6ICdzaW5nbGVsaW5lJyxcbiAgICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICAgIGludGVycG9sYXRpb246IHtcbiAgICAgICAgICAgICAgcGF0dGVybjogLygoPzpefFteXFxcXF0pKD86XFxcXHsyfSkqKVxcJCg/OlthLXpfXVxcdyp8XFx7W157fV0qXFx9KS9pLFxuICAgICAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAgICAgICBpbnNpZGU6IGludGVycG9sYXRpb25JbnNpZGVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdHJpbmc6IC9bXFxzXFxTXSsvXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgY2hhcjoge1xuICAgICAgICAvLyBodHRwczovL2tvdGxpbmxhbmcub3JnL3NwZWMvZXhwcmVzc2lvbnMuaHRtbCNjaGFyYWN0ZXItbGl0ZXJhbHNcbiAgICAgICAgcGF0dGVybjogLycoPzpbXidcXFxcXFxyXFxuXXxcXFxcKD86Lnx1W2EtZkEtRjAtOV17MCw0fSkpJy8sXG4gICAgICAgIGdyZWVkeTogdHJ1ZVxuICAgICAgfVxuICAgIH0pXG4gICAgZGVsZXRlIFByaXNtLmxhbmd1YWdlcy5rb3RsaW5bJ3N0cmluZyddXG4gICAgUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgna290bGluJywgJ2tleXdvcmQnLCB7XG4gICAgICBhbm5vdGF0aW9uOiB7XG4gICAgICAgIHBhdHRlcm46IC9cXEJAKD86XFx3KzopPyg/OltBLVpdXFx3KnxcXFtbXlxcXV0rXFxdKS8sXG4gICAgICAgIGFsaWFzOiAnYnVpbHRpbidcbiAgICAgIH1cbiAgICB9KVxuICAgIFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ2tvdGxpbicsICdmdW5jdGlvbicsIHtcbiAgICAgIGxhYmVsOiB7XG4gICAgICAgIHBhdHRlcm46IC9cXGJcXHcrQHxAXFx3K1xcYi8sXG4gICAgICAgIGFsaWFzOiAnc3ltYm9sJ1xuICAgICAgfVxuICAgIH0pXG4gICAgUHJpc20ubGFuZ3VhZ2VzLmt0ID0gUHJpc20ubGFuZ3VhZ2VzLmtvdGxpblxuICAgIFByaXNtLmxhbmd1YWdlcy5rdHMgPSBQcmlzbS5sYW5ndWFnZXMua290bGluXG4gIH0pKFByaXNtKVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJrb3RsaW4iLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImxhbmd1YWdlcyIsImV4dGVuZCIsImtleXdvcmQiLCJwYXR0ZXJuIiwibG9va2JlaGluZCIsImdyZWVkeSIsIm51bWJlciIsIm9wZXJhdG9yIiwiaW50ZXJwb2xhdGlvbkluc2lkZSIsImFsaWFzIiwiZXhwcmVzc2lvbiIsImluc2lkZSIsImluc2VydEJlZm9yZSIsImludGVycG9sYXRpb24iLCJzdHJpbmciLCJhbm5vdGF0aW9uIiwibGFiZWwiLCJrdCIsImt0cyJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/kotlin.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/kumir.js":
/*!**********************************************!*\
  !*** ./node_modules/refractor/lang/kumir.js ***!
  \**********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = kumir;\nkumir.displayName = 'kumir';\nkumir.aliases = ['kum'];\nfunction kumir(Prism) {\n  /* eslint-disable regexp/no-dupe-characters-character-class */\n  ;\n  (function (Prism) {\n    /**\n     * Regular expression for characters that are not allowed in identifiers.\n     *\n     * @type {string}\n     */\n    var nonId = /\\s\\x00-\\x1f\\x22-\\x2f\\x3a-\\x3f\\x5b-\\x5e\\x60\\x7b-\\x7e/.source;\n    /**\n     * Surround a regular expression for IDs with patterns for non-ID sequences.\n     *\n     * @param {string} pattern A regular expression for identifiers.\n     * @param {string} [flags] The regular expression flags.\n     * @returns {RegExp} A wrapped regular expression for identifiers.\n     */\n    function wrapId(pattern, flags) {\n      return RegExp(pattern.replace(/<nonId>/g, nonId), flags);\n    }\n    Prism.languages.kumir = {\n      comment: {\n        pattern: /\\|.*/\n      },\n      prolog: {\n        pattern: /#.*/,\n        greedy: true\n      },\n      string: {\n        pattern: /\"[^\\n\\r\"]*\"|'[^\\n\\r']*'/,\n        greedy: true\n      },\n      \"boolean\": {\n        pattern: wrapId(/(^|[<nonId>])(?:да|нет)(?=[<nonId>]|$)/.source),\n        lookbehind: true\n      },\n      'operator-word': {\n        pattern: wrapId(/(^|[<nonId>])(?:и|или|не)(?=[<nonId>]|$)/.source),\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      'system-variable': {\n        pattern: wrapId(/(^|[<nonId>])знач(?=[<nonId>]|$)/.source),\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      type: [{\n        pattern: wrapId(/(^|[<nonId>])(?:вещ|лит|лог|сим|цел)(?:\\x20*таб)?(?=[<nonId>]|$)/.source),\n        lookbehind: true,\n        alias: 'builtin'\n      }, {\n        pattern: wrapId(/(^|[<nonId>])(?:компл|сканкод|файл|цвет)(?=[<nonId>]|$)/.source),\n        lookbehind: true,\n        alias: 'important'\n      }],\n      /**\n       * Should be performed after searching for type names because of \"таб\".\n       * \"таб\" is a reserved word, but never used without a preceding type name.\n       * \"НАЗНАЧИТЬ\", \"Фввод\", and \"Фвывод\" are not reserved words.\n       */\n      keyword: {\n        pattern: wrapId(/(^|[<nonId>])(?:алг|арг(?:\\x20*рез)?|ввод|ВКЛЮЧИТЬ|вс[её]|выбор|вывод|выход|дано|для|до|дс|если|иначе|исп|использовать|кон(?:(?:\\x20+|_)исп)?|кц(?:(?:\\x20+|_)при)?|надо|нач|нс|нц|от|пауза|пока|при|раза?|рез|стоп|таб|то|утв|шаг)(?=[<nonId>]|$)/.source),\n        lookbehind: true\n      },\n      /** Should be performed after searching for reserved words. */\n      name: {\n        // eslint-disable-next-line regexp/no-super-linear-backtracking\n        pattern: wrapId(/(^|[<nonId>])[^\\d<nonId>][^<nonId>]*(?:\\x20+[^<nonId>]+)*(?=[<nonId>]|$)/.source),\n        lookbehind: true\n      },\n      /** Should be performed after searching for names. */\n      number: {\n        pattern: wrapId(/(^|[<nonId>])(?:\\B\\$[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)(?=[<nonId>]|$)/.source, 'i'),\n        lookbehind: true\n      },\n      /** Should be performed after searching for words. */\n      punctuation: /:=|[(),:;\\[\\]]/,\n      /**\n       * Should be performed after searching for\n       * - numeric constants (because of \"+\" and \"-\");\n       * - punctuation marks (because of \":=\" and \"=\").\n       */\n      'operator-char': {\n        pattern: /\\*\\*?|<[=>]?|>=?|[-+/=]/,\n        alias: 'operator'\n      }\n    };\n    Prism.languages.kum = Prism.languages.kumir;\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcva3VtaXIuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxLQUFLO0FBQ3RCQSxLQUFLLENBQUNDLFdBQVcsR0FBRyxPQUFPO0FBQzNCRCxLQUFLLENBQUNFLE9BQU8sR0FBRyxDQUFDLEtBQUssQ0FBQztBQUN2QixTQUFTRixLQUFLQSxDQUFDRyxLQUFLLEVBQUU7RUFDcEI7RUFDQTtFQUFDLENBQUMsVUFBVUEsS0FBSyxFQUFFO0lBQ2pCO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7SUFDSSxJQUFJQyxLQUFLLEdBQUcscURBQXFELENBQUNDLE1BQU07SUFDeEU7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7SUFDSSxTQUFTQyxNQUFNQSxDQUFDQyxPQUFPLEVBQUVDLEtBQUssRUFBRTtNQUM5QixPQUFPQyxNQUFNLENBQUNGLE9BQU8sQ0FBQ0csT0FBTyxDQUFDLFVBQVUsRUFBRU4sS0FBSyxDQUFDLEVBQUVJLEtBQUssQ0FBQztJQUMxRDtJQUNBTCxLQUFLLENBQUNRLFNBQVMsQ0FBQ1gsS0FBSyxHQUFHO01BQ3RCWSxPQUFPLEVBQUU7UUFDUEwsT0FBTyxFQUFFO01BQ1gsQ0FBQztNQUNETSxNQUFNLEVBQUU7UUFDTk4sT0FBTyxFQUFFLEtBQUs7UUFDZE8sTUFBTSxFQUFFO01BQ1YsQ0FBQztNQUNEQyxNQUFNLEVBQUU7UUFDTlIsT0FBTyxFQUFFLHlCQUF5QjtRQUNsQ08sTUFBTSxFQUFFO01BQ1YsQ0FBQztNQUNELFdBQVM7UUFDUFAsT0FBTyxFQUFFRCxNQUFNLENBQUMsd0NBQXdDLENBQUNELE1BQU0sQ0FBQztRQUNoRVcsVUFBVSxFQUFFO01BQ2QsQ0FBQztNQUNELGVBQWUsRUFBRTtRQUNmVCxPQUFPLEVBQUVELE1BQU0sQ0FBQywwQ0FBMEMsQ0FBQ0QsTUFBTSxDQUFDO1FBQ2xFVyxVQUFVLEVBQUUsSUFBSTtRQUNoQkMsS0FBSyxFQUFFO01BQ1QsQ0FBQztNQUNELGlCQUFpQixFQUFFO1FBQ2pCVixPQUFPLEVBQUVELE1BQU0sQ0FBQyxrQ0FBa0MsQ0FBQ0QsTUFBTSxDQUFDO1FBQzFEVyxVQUFVLEVBQUUsSUFBSTtRQUNoQkMsS0FBSyxFQUFFO01BQ1QsQ0FBQztNQUNEQyxJQUFJLEVBQUUsQ0FDSjtRQUNFWCxPQUFPLEVBQUVELE1BQU0sQ0FDYixrRUFBa0UsQ0FDL0RELE1BQ0wsQ0FBQztRQUNEVyxVQUFVLEVBQUUsSUFBSTtRQUNoQkMsS0FBSyxFQUFFO01BQ1QsQ0FBQyxFQUNEO1FBQ0VWLE9BQU8sRUFBRUQsTUFBTSxDQUNiLHlEQUF5RCxDQUFDRCxNQUM1RCxDQUFDO1FBQ0RXLFVBQVUsRUFBRSxJQUFJO1FBQ2hCQyxLQUFLLEVBQUU7TUFDVCxDQUFDLENBQ0Y7TUFDRDtBQUNOO0FBQ0E7QUFDQTtBQUNBO01BQ01FLE9BQU8sRUFBRTtRQUNQWixPQUFPLEVBQUVELE1BQU0sQ0FDYixvUEFBb1AsQ0FDalBELE1BQ0wsQ0FBQztRQUNEVyxVQUFVLEVBQUU7TUFDZCxDQUFDO01BQ0Q7TUFDQUksSUFBSSxFQUFFO1FBQ0o7UUFDQWIsT0FBTyxFQUFFRCxNQUFNLENBQ2IsMEVBQTBFLENBQ3ZFRCxNQUNMLENBQUM7UUFDRFcsVUFBVSxFQUFFO01BQ2QsQ0FBQztNQUNEO01BQ0FLLE1BQU0sRUFBRTtRQUNOZCxPQUFPLEVBQUVELE1BQU0sQ0FDYiwwRkFBMEYsQ0FDdkZELE1BQU0sRUFDVCxHQUNGLENBQUM7UUFDRFcsVUFBVSxFQUFFO01BQ2QsQ0FBQztNQUNEO01BQ0FNLFdBQVcsRUFBRSxnQkFBZ0I7TUFDN0I7QUFDTjtBQUNBO0FBQ0E7QUFDQTtNQUNNLGVBQWUsRUFBRTtRQUNmZixPQUFPLEVBQUUseUJBQXlCO1FBQ2xDVSxLQUFLLEVBQUU7TUFDVDtJQUNGLENBQUM7SUFDRGQsS0FBSyxDQUFDUSxTQUFTLENBQUNZLEdBQUcsR0FBR3BCLEtBQUssQ0FBQ1EsU0FBUyxDQUFDWCxLQUFLO0VBQzdDLENBQUMsRUFBRUcsS0FBSyxDQUFDO0FBQ1giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxrdW1pci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBrdW1pclxua3VtaXIuZGlzcGxheU5hbWUgPSAna3VtaXInXG5rdW1pci5hbGlhc2VzID0gWydrdW0nXVxuZnVuY3Rpb24ga3VtaXIoUHJpc20pIHtcbiAgLyogZXNsaW50LWRpc2FibGUgcmVnZXhwL25vLWR1cGUtY2hhcmFjdGVycy1jaGFyYWN0ZXItY2xhc3MgKi9cbiAgOyhmdW5jdGlvbiAoUHJpc20pIHtcbiAgICAvKipcbiAgICAgKiBSZWd1bGFyIGV4cHJlc3Npb24gZm9yIGNoYXJhY3RlcnMgdGhhdCBhcmUgbm90IGFsbG93ZWQgaW4gaWRlbnRpZmllcnMuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHZhciBub25JZCA9IC9cXHNcXHgwMC1cXHgxZlxceDIyLVxceDJmXFx4M2EtXFx4M2ZcXHg1Yi1cXHg1ZVxceDYwXFx4N2ItXFx4N2UvLnNvdXJjZVxuICAgIC8qKlxuICAgICAqIFN1cnJvdW5kIGEgcmVndWxhciBleHByZXNzaW9uIGZvciBJRHMgd2l0aCBwYXR0ZXJucyBmb3Igbm9uLUlEIHNlcXVlbmNlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXR0ZXJuIEEgcmVndWxhciBleHByZXNzaW9uIGZvciBpZGVudGlmaWVycy5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2ZsYWdzXSBUaGUgcmVndWxhciBleHByZXNzaW9uIGZsYWdzLlxuICAgICAqIEByZXR1cm5zIHtSZWdFeHB9IEEgd3JhcHBlZCByZWd1bGFyIGV4cHJlc3Npb24gZm9yIGlkZW50aWZpZXJzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBJZChwYXR0ZXJuLCBmbGFncykge1xuICAgICAgcmV0dXJuIFJlZ0V4cChwYXR0ZXJuLnJlcGxhY2UoLzxub25JZD4vZywgbm9uSWQpLCBmbGFncylcbiAgICB9XG4gICAgUHJpc20ubGFuZ3VhZ2VzLmt1bWlyID0ge1xuICAgICAgY29tbWVudDoge1xuICAgICAgICBwYXR0ZXJuOiAvXFx8LiovXG4gICAgICB9LFxuICAgICAgcHJvbG9nOiB7XG4gICAgICAgIHBhdHRlcm46IC8jLiovLFxuICAgICAgICBncmVlZHk6IHRydWVcbiAgICAgIH0sXG4gICAgICBzdHJpbmc6IHtcbiAgICAgICAgcGF0dGVybjogL1wiW15cXG5cXHJcIl0qXCJ8J1teXFxuXFxyJ10qJy8sXG4gICAgICAgIGdyZWVkeTogdHJ1ZVxuICAgICAgfSxcbiAgICAgIGJvb2xlYW46IHtcbiAgICAgICAgcGF0dGVybjogd3JhcElkKC8oXnxbPG5vbklkPl0pKD860LTQsHzQvdC10YIpKD89Wzxub25JZD5dfCQpLy5zb3VyY2UpLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICB9LFxuICAgICAgJ29wZXJhdG9yLXdvcmQnOiB7XG4gICAgICAgIHBhdHRlcm46IHdyYXBJZCgvKF58Wzxub25JZD5dKSg/OtC4fNC40LvQuHzQvdC1KSg/PVs8bm9uSWQ+XXwkKS8uc291cmNlKSxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgYWxpYXM6ICdrZXl3b3JkJ1xuICAgICAgfSxcbiAgICAgICdzeXN0ZW0tdmFyaWFibGUnOiB7XG4gICAgICAgIHBhdHRlcm46IHdyYXBJZCgvKF58Wzxub25JZD5dKdC30L3QsNGHKD89Wzxub25JZD5dfCQpLy5zb3VyY2UpLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICBhbGlhczogJ2tleXdvcmQnXG4gICAgICB9LFxuICAgICAgdHlwZTogW1xuICAgICAgICB7XG4gICAgICAgICAgcGF0dGVybjogd3JhcElkKFxuICAgICAgICAgICAgLyhefFs8bm9uSWQ+XSkoPzrQstC10Yl80LvQuNGCfNC70L7Qs3zRgdC40Lx80YbQtdC7KSg/OlxceDIwKtGC0LDQsSk/KD89Wzxub25JZD5dfCQpL1xuICAgICAgICAgICAgICAuc291cmNlXG4gICAgICAgICAgKSxcbiAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAgIGFsaWFzOiAnYnVpbHRpbidcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHBhdHRlcm46IHdyYXBJZChcbiAgICAgICAgICAgIC8oXnxbPG5vbklkPl0pKD860LrQvtC80L/Qu3zRgdC60LDQvdC60L7QtHzRhNCw0LnQu3zRhtCy0LXRgikoPz1bPG5vbklkPl18JCkvLnNvdXJjZVxuICAgICAgICAgICksXG4gICAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgICBhbGlhczogJ2ltcG9ydGFudCdcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIC8qKlxuICAgICAgICogU2hvdWxkIGJlIHBlcmZvcm1lZCBhZnRlciBzZWFyY2hpbmcgZm9yIHR5cGUgbmFtZXMgYmVjYXVzZSBvZiBcItGC0LDQsVwiLlxuICAgICAgICogXCLRgtCw0LFcIiBpcyBhIHJlc2VydmVkIHdvcmQsIGJ1dCBuZXZlciB1c2VkIHdpdGhvdXQgYSBwcmVjZWRpbmcgdHlwZSBuYW1lLlxuICAgICAgICogXCLQndCQ0JfQndCQ0KfQmNCi0KxcIiwgXCLQpNCy0LLQvtC0XCIsIGFuZCBcItCk0LLRi9Cy0L7QtFwiIGFyZSBub3QgcmVzZXJ2ZWQgd29yZHMuXG4gICAgICAgKi9cbiAgICAgIGtleXdvcmQ6IHtcbiAgICAgICAgcGF0dGVybjogd3JhcElkKFxuICAgICAgICAgIC8oXnxbPG5vbklkPl0pKD860LDQu9CzfNCw0YDQsyg/OlxceDIwKtGA0LXQtyk/fNCy0LLQvtC0fNCS0JrQm9Cu0KfQmNCi0Kx80LLRgVvQtdGRXXzQstGL0LHQvtGAfNCy0YvQstC+0LR80LLRi9GF0L7QtHzQtNCw0L3QvnzQtNC70Y980LTQvnzQtNGBfNC10YHQu9C4fNC40L3QsNGH0LV80LjRgdC/fNC40YHQv9C+0LvRjNC30L7QstCw0YLRjHzQutC+0L0oPzooPzpcXHgyMCt8XynQuNGB0L8pP3zQutGGKD86KD86XFx4MjArfF8p0L/RgNC4KT980L3QsNC00L580L3QsNGHfNC90YF80L3RhnzQvtGCfNC/0LDRg9C30LB80L/QvtC60LB80L/RgNC4fNGA0LDQt9CwP3zRgNC10Ld80YHRgtC+0L980YLQsNCxfNGC0L580YPRgtCyfNGI0LDQsykoPz1bPG5vbklkPl18JCkvXG4gICAgICAgICAgICAuc291cmNlXG4gICAgICAgICksXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH0sXG4gICAgICAvKiogU2hvdWxkIGJlIHBlcmZvcm1lZCBhZnRlciBzZWFyY2hpbmcgZm9yIHJlc2VydmVkIHdvcmRzLiAqL1xuICAgICAgbmFtZToge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVnZXhwL25vLXN1cGVyLWxpbmVhci1iYWNrdHJhY2tpbmdcbiAgICAgICAgcGF0dGVybjogd3JhcElkKFxuICAgICAgICAgIC8oXnxbPG5vbklkPl0pW15cXGQ8bm9uSWQ+XVtePG5vbklkPl0qKD86XFx4MjArW148bm9uSWQ+XSspKig/PVs8bm9uSWQ+XXwkKS9cbiAgICAgICAgICAgIC5zb3VyY2VcbiAgICAgICAgKSxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIC8qKiBTaG91bGQgYmUgcGVyZm9ybWVkIGFmdGVyIHNlYXJjaGluZyBmb3IgbmFtZXMuICovXG4gICAgICBudW1iZXI6IHtcbiAgICAgICAgcGF0dGVybjogd3JhcElkKFxuICAgICAgICAgIC8oXnxbPG5vbklkPl0pKD86XFxCXFwkW1xcZGEtZl0rXFxifCg/OlxcYlxcZCsoPzpcXC5cXGQqKT98XFxCXFwuXFxkKykoPzplWystXT9cXGQrKT8pKD89Wzxub25JZD5dfCQpL1xuICAgICAgICAgICAgLnNvdXJjZSxcbiAgICAgICAgICAnaSdcbiAgICAgICAgKSxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIC8qKiBTaG91bGQgYmUgcGVyZm9ybWVkIGFmdGVyIHNlYXJjaGluZyBmb3Igd29yZHMuICovXG4gICAgICBwdW5jdHVhdGlvbjogLzo9fFsoKSw6O1xcW1xcXV0vLFxuICAgICAgLyoqXG4gICAgICAgKiBTaG91bGQgYmUgcGVyZm9ybWVkIGFmdGVyIHNlYXJjaGluZyBmb3JcbiAgICAgICAqIC0gbnVtZXJpYyBjb25zdGFudHMgKGJlY2F1c2Ugb2YgXCIrXCIgYW5kIFwiLVwiKTtcbiAgICAgICAqIC0gcHVuY3R1YXRpb24gbWFya3MgKGJlY2F1c2Ugb2YgXCI6PVwiIGFuZCBcIj1cIikuXG4gICAgICAgKi9cbiAgICAgICdvcGVyYXRvci1jaGFyJzoge1xuICAgICAgICBwYXR0ZXJuOiAvXFwqXFwqP3w8Wz0+XT98Pj0/fFstKy89XS8sXG4gICAgICAgIGFsaWFzOiAnb3BlcmF0b3InXG4gICAgICB9XG4gICAgfVxuICAgIFByaXNtLmxhbmd1YWdlcy5rdW0gPSBQcmlzbS5sYW5ndWFnZXMua3VtaXJcbiAgfSkoUHJpc20pXG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImt1bWlyIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJub25JZCIsInNvdXJjZSIsIndyYXBJZCIsInBhdHRlcm4iLCJmbGFncyIsIlJlZ0V4cCIsInJlcGxhY2UiLCJsYW5ndWFnZXMiLCJjb21tZW50IiwicHJvbG9nIiwiZ3JlZWR5Iiwic3RyaW5nIiwibG9va2JlaGluZCIsImFsaWFzIiwidHlwZSIsImtleXdvcmQiLCJuYW1lIiwibnVtYmVyIiwicHVuY3R1YXRpb24iLCJrdW0iXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/kumir.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/kusto.js":
/*!**********************************************!*\
  !*** ./node_modules/refractor/lang/kusto.js ***!
  \**********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = kusto;\nkusto.displayName = 'kusto';\nkusto.aliases = [];\nfunction kusto(Prism) {\n  Prism.languages.kusto = {\n    comment: {\n      pattern: /\\/\\/.*/,\n      greedy: true\n    },\n    string: {\n      pattern: /```[\\s\\S]*?```|[hH]?(?:\"(?:[^\\r\\n\\\\\"]|\\\\.)*\"|'(?:[^\\r\\n\\\\']|\\\\.)*'|@(?:\"[^\\r\\n\"]*\"|'[^\\r\\n']*'))/,\n      greedy: true\n    },\n    verb: {\n      pattern: /(\\|\\s*)[a-z][\\w-]*/i,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    command: {\n      pattern: /\\.[a-z][a-z\\d-]*\\b/,\n      alias: 'keyword'\n    },\n    'class-name': /\\b(?:bool|datetime|decimal|dynamic|guid|int|long|real|string|timespan)\\b/,\n    keyword: /\\b(?:access|alias|and|anti|as|asc|auto|between|by|(?:contains|(?:ends|starts)with|has(?:perfix|suffix)?)(?:_cs)?|database|declare|desc|external|from|fullouter|has_all|in|ingestion|inline|inner|innerunique|into|(?:left|right)(?:anti(?:semi)?|inner|outer|semi)?|let|like|local|not|of|on|or|pattern|print|query_parameters|range|restrict|schema|set|step|table|tables|to|view|where|with|matches\\s+regex|nulls\\s+(?:first|last))(?![\\w-])/,\n    \"boolean\": /\\b(?:false|null|true)\\b/,\n    \"function\": /\\b[a-z_]\\w*(?=\\s*\\()/,\n    datetime: [{\n      // RFC 822 + RFC 850\n      pattern: /\\b(?:(?:Fri|Friday|Mon|Monday|Sat|Saturday|Sun|Sunday|Thu|Thursday|Tue|Tuesday|Wed|Wednesday)\\s*,\\s*)?\\d{1,2}(?:\\s+|-)(?:Apr|Aug|Dec|Feb|Jan|Jul|Jun|Mar|May|Nov|Oct|Sep)(?:\\s+|-)\\d{2}\\s+\\d{2}:\\d{2}(?::\\d{2})?(?:\\s*(?:\\b(?:[A-Z]|(?:[ECMT][DS]|GM|U)T)|[+-]\\d{4}))?\\b/,\n      alias: 'number'\n    }, {\n      // ISO 8601\n      pattern: /[+-]?\\b(?:\\d{4}-\\d{2}-\\d{2}(?:[ T]\\d{2}:\\d{2}(?::\\d{2}(?:\\.\\d+)?)?)?|\\d{2}:\\d{2}(?::\\d{2}(?:\\.\\d+)?)?)Z?/,\n      alias: 'number'\n    }],\n    number: /\\b(?:0x[0-9A-Fa-f]+|\\d+(?:\\.\\d+)?(?:[Ee][+-]?\\d+)?)(?:(?:min|sec|[mnµ]s|[dhms]|microsecond|tick)\\b)?|[+-]?\\binf\\b/,\n    operator: /=>|[!=]~|[!=<>]=?|[-+*/%|]|\\.\\./,\n    punctuation: /[()\\[\\]{},;.:]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcva3VzdG8uanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxLQUFLO0FBQ3RCQSxLQUFLLENBQUNDLFdBQVcsR0FBRyxPQUFPO0FBQzNCRCxLQUFLLENBQUNFLE9BQU8sR0FBRyxFQUFFO0FBQ2xCLFNBQVNGLEtBQUtBLENBQUNHLEtBQUssRUFBRTtFQUNwQkEsS0FBSyxDQUFDQyxTQUFTLENBQUNKLEtBQUssR0FBRztJQUN0QkssT0FBTyxFQUFFO01BQ1BDLE9BQU8sRUFBRSxRQUFRO01BQ2pCQyxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0RDLE1BQU0sRUFBRTtNQUNORixPQUFPLEVBQ0wsa0dBQWtHO01BQ3BHQyxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0RFLElBQUksRUFBRTtNQUNKSCxPQUFPLEVBQUUscUJBQXFCO01BQzlCSSxVQUFVLEVBQUUsSUFBSTtNQUNoQkMsS0FBSyxFQUFFO0lBQ1QsQ0FBQztJQUNEQyxPQUFPLEVBQUU7TUFDUE4sT0FBTyxFQUFFLG9CQUFvQjtNQUM3QkssS0FBSyxFQUFFO0lBQ1QsQ0FBQztJQUNELFlBQVksRUFDViwwRUFBMEU7SUFDNUVFLE9BQU8sRUFDTCxnYkFBZ2I7SUFDbGIsV0FBUyx5QkFBeUI7SUFDbEMsWUFBVSxzQkFBc0I7SUFDaENDLFFBQVEsRUFBRSxDQUNSO01BQ0U7TUFDQVIsT0FBTyxFQUNMLDBRQUEwUTtNQUM1UUssS0FBSyxFQUFFO0lBQ1QsQ0FBQyxFQUNEO01BQ0U7TUFDQUwsT0FBTyxFQUNMLDBHQUEwRztNQUM1R0ssS0FBSyxFQUFFO0lBQ1QsQ0FBQyxDQUNGO0lBQ0RJLE1BQU0sRUFDSixtSEFBbUg7SUFDckhDLFFBQVEsRUFBRSxpQ0FBaUM7SUFDM0NDLFdBQVcsRUFBRTtFQUNmLENBQUM7QUFDSCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXGt1c3RvLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGt1c3RvXG5rdXN0by5kaXNwbGF5TmFtZSA9ICdrdXN0bydcbmt1c3RvLmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24ga3VzdG8oUHJpc20pIHtcbiAgUHJpc20ubGFuZ3VhZ2VzLmt1c3RvID0ge1xuICAgIGNvbW1lbnQ6IHtcbiAgICAgIHBhdHRlcm46IC9cXC9cXC8uKi8sXG4gICAgICBncmVlZHk6IHRydWVcbiAgICB9LFxuICAgIHN0cmluZzoge1xuICAgICAgcGF0dGVybjpcbiAgICAgICAgL2BgYFtcXHNcXFNdKj9gYGB8W2hIXT8oPzpcIig/OlteXFxyXFxuXFxcXFwiXXxcXFxcLikqXCJ8Jyg/OlteXFxyXFxuXFxcXCddfFxcXFwuKSonfEAoPzpcIlteXFxyXFxuXCJdKlwifCdbXlxcclxcbiddKicpKS8sXG4gICAgICBncmVlZHk6IHRydWVcbiAgICB9LFxuICAgIHZlcmI6IHtcbiAgICAgIHBhdHRlcm46IC8oXFx8XFxzKilbYS16XVtcXHctXSovaSxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBhbGlhczogJ2tleXdvcmQnXG4gICAgfSxcbiAgICBjb21tYW5kOiB7XG4gICAgICBwYXR0ZXJuOiAvXFwuW2Etel1bYS16XFxkLV0qXFxiLyxcbiAgICAgIGFsaWFzOiAna2V5d29yZCdcbiAgICB9LFxuICAgICdjbGFzcy1uYW1lJzpcbiAgICAgIC9cXGIoPzpib29sfGRhdGV0aW1lfGRlY2ltYWx8ZHluYW1pY3xndWlkfGludHxsb25nfHJlYWx8c3RyaW5nfHRpbWVzcGFuKVxcYi8sXG4gICAga2V5d29yZDpcbiAgICAgIC9cXGIoPzphY2Nlc3N8YWxpYXN8YW5kfGFudGl8YXN8YXNjfGF1dG98YmV0d2VlbnxieXwoPzpjb250YWluc3woPzplbmRzfHN0YXJ0cyl3aXRofGhhcyg/OnBlcmZpeHxzdWZmaXgpPykoPzpfY3MpP3xkYXRhYmFzZXxkZWNsYXJlfGRlc2N8ZXh0ZXJuYWx8ZnJvbXxmdWxsb3V0ZXJ8aGFzX2FsbHxpbnxpbmdlc3Rpb258aW5saW5lfGlubmVyfGlubmVydW5pcXVlfGludG98KD86bGVmdHxyaWdodCkoPzphbnRpKD86c2VtaSk/fGlubmVyfG91dGVyfHNlbWkpP3xsZXR8bGlrZXxsb2NhbHxub3R8b2Z8b258b3J8cGF0dGVybnxwcmludHxxdWVyeV9wYXJhbWV0ZXJzfHJhbmdlfHJlc3RyaWN0fHNjaGVtYXxzZXR8c3RlcHx0YWJsZXx0YWJsZXN8dG98dmlld3x3aGVyZXx3aXRofG1hdGNoZXNcXHMrcmVnZXh8bnVsbHNcXHMrKD86Zmlyc3R8bGFzdCkpKD8hW1xcdy1dKS8sXG4gICAgYm9vbGVhbjogL1xcYig/OmZhbHNlfG51bGx8dHJ1ZSlcXGIvLFxuICAgIGZ1bmN0aW9uOiAvXFxiW2Etel9dXFx3Kig/PVxccypcXCgpLyxcbiAgICBkYXRldGltZTogW1xuICAgICAge1xuICAgICAgICAvLyBSRkMgODIyICsgUkZDIDg1MFxuICAgICAgICBwYXR0ZXJuOlxuICAgICAgICAgIC9cXGIoPzooPzpGcml8RnJpZGF5fE1vbnxNb25kYXl8U2F0fFNhdHVyZGF5fFN1bnxTdW5kYXl8VGh1fFRodXJzZGF5fFR1ZXxUdWVzZGF5fFdlZHxXZWRuZXNkYXkpXFxzKixcXHMqKT9cXGR7MSwyfSg/Olxccyt8LSkoPzpBcHJ8QXVnfERlY3xGZWJ8SmFufEp1bHxKdW58TWFyfE1heXxOb3Z8T2N0fFNlcCkoPzpcXHMrfC0pXFxkezJ9XFxzK1xcZHsyfTpcXGR7Mn0oPzo6XFxkezJ9KT8oPzpcXHMqKD86XFxiKD86W0EtWl18KD86W0VDTVRdW0RTXXxHTXxVKVQpfFsrLV1cXGR7NH0pKT9cXGIvLFxuICAgICAgICBhbGlhczogJ251bWJlcidcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIC8vIElTTyA4NjAxXG4gICAgICAgIHBhdHRlcm46XG4gICAgICAgICAgL1srLV0/XFxiKD86XFxkezR9LVxcZHsyfS1cXGR7Mn0oPzpbIFRdXFxkezJ9OlxcZHsyfSg/OjpcXGR7Mn0oPzpcXC5cXGQrKT8pPyk/fFxcZHsyfTpcXGR7Mn0oPzo6XFxkezJ9KD86XFwuXFxkKyk/KT8pWj8vLFxuICAgICAgICBhbGlhczogJ251bWJlcidcbiAgICAgIH1cbiAgICBdLFxuICAgIG51bWJlcjpcbiAgICAgIC9cXGIoPzoweFswLTlBLUZhLWZdK3xcXGQrKD86XFwuXFxkKyk/KD86W0VlXVsrLV0/XFxkKyk/KSg/Oig/Om1pbnxzZWN8W21uwrVdc3xbZGhtc118bWljcm9zZWNvbmR8dGljaylcXGIpP3xbKy1dP1xcYmluZlxcYi8sXG4gICAgb3BlcmF0b3I6IC89PnxbIT1dfnxbIT08Pl09P3xbLSsqLyV8XXxcXC5cXC4vLFxuICAgIHB1bmN0dWF0aW9uOiAvWygpXFxbXFxde30sOy46XS9cbiAgfVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJrdXN0byIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwiY29tbWVudCIsInBhdHRlcm4iLCJncmVlZHkiLCJzdHJpbmciLCJ2ZXJiIiwibG9va2JlaGluZCIsImFsaWFzIiwiY29tbWFuZCIsImtleXdvcmQiLCJkYXRldGltZSIsIm51bWJlciIsIm9wZXJhdG9yIiwicHVuY3R1YXRpb24iXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/kusto.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/latex.js":
/*!**********************************************!*\
  !*** ./node_modules/refractor/lang/latex.js ***!
  \**********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = latex;\nlatex.displayName = 'latex';\nlatex.aliases = ['tex', 'context'];\nfunction latex(Prism) {\n  ;\n  (function (Prism) {\n    var funcPattern = /\\\\(?:[^a-z()[\\]]|[a-z*]+)/i;\n    var insideEqu = {\n      'equation-command': {\n        pattern: funcPattern,\n        alias: 'regex'\n      }\n    };\n    Prism.languages.latex = {\n      comment: /%.*/,\n      // the verbatim environment prints whitespace to the document\n      cdata: {\n        pattern: /(\\\\begin\\{((?:lstlisting|verbatim)\\*?)\\})[\\s\\S]*?(?=\\\\end\\{\\2\\})/,\n        lookbehind: true\n      },\n      /*\n       * equations can be between $$ $$ or $ $ or \\( \\) or \\[ \\]\n       * (all are multiline)\n       */\n      equation: [{\n        pattern: /\\$\\$(?:\\\\[\\s\\S]|[^\\\\$])+\\$\\$|\\$(?:\\\\[\\s\\S]|[^\\\\$])+\\$|\\\\\\([\\s\\S]*?\\\\\\)|\\\\\\[[\\s\\S]*?\\\\\\]/,\n        inside: insideEqu,\n        alias: 'string'\n      }, {\n        pattern: /(\\\\begin\\{((?:align|eqnarray|equation|gather|math|multline)\\*?)\\})[\\s\\S]*?(?=\\\\end\\{\\2\\})/,\n        lookbehind: true,\n        inside: insideEqu,\n        alias: 'string'\n      }],\n      /*\n       * arguments which are keywords or references are highlighted\n       * as keywords\n       */\n      keyword: {\n        pattern: /(\\\\(?:begin|cite|documentclass|end|label|ref|usepackage)(?:\\[[^\\]]+\\])?\\{)[^}]+(?=\\})/,\n        lookbehind: true\n      },\n      url: {\n        pattern: /(\\\\url\\{)[^}]+(?=\\})/,\n        lookbehind: true\n      },\n      /*\n       * section or chapter headlines are highlighted as bold so that\n       * they stand out more\n       */\n      headline: {\n        pattern: /(\\\\(?:chapter|frametitle|paragraph|part|section|subparagraph|subsection|subsubparagraph|subsubsection|subsubsubparagraph)\\*?(?:\\[[^\\]]+\\])?\\{)[^}]+(?=\\})/,\n        lookbehind: true,\n        alias: 'class-name'\n      },\n      \"function\": {\n        pattern: funcPattern,\n        alias: 'selector'\n      },\n      punctuation: /[[\\]{}&]/\n    };\n    Prism.languages.tex = Prism.languages.latex;\n    Prism.languages.context = Prism.languages.latex;\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvbGF0ZXguanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxLQUFLO0FBQ3RCQSxLQUFLLENBQUNDLFdBQVcsR0FBRyxPQUFPO0FBQzNCRCxLQUFLLENBQUNFLE9BQU8sR0FBRyxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUM7QUFDbEMsU0FBU0YsS0FBS0EsQ0FBQ0csS0FBSyxFQUFFO0VBQ3BCO0VBQUMsQ0FBQyxVQUFVQSxLQUFLLEVBQUU7SUFDakIsSUFBSUMsV0FBVyxHQUFHLDRCQUE0QjtJQUM5QyxJQUFJQyxTQUFTLEdBQUc7TUFDZCxrQkFBa0IsRUFBRTtRQUNsQkMsT0FBTyxFQUFFRixXQUFXO1FBQ3BCRyxLQUFLLEVBQUU7TUFDVDtJQUNGLENBQUM7SUFDREosS0FBSyxDQUFDSyxTQUFTLENBQUNSLEtBQUssR0FBRztNQUN0QlMsT0FBTyxFQUFFLEtBQUs7TUFDZDtNQUNBQyxLQUFLLEVBQUU7UUFDTEosT0FBTyxFQUNMLGtFQUFrRTtRQUNwRUssVUFBVSxFQUFFO01BQ2QsQ0FBQztNQUNEO0FBQ047QUFDQTtBQUNBO01BQ01DLFFBQVEsRUFBRSxDQUNSO1FBQ0VOLE9BQU8sRUFDTCx5RkFBeUY7UUFDM0ZPLE1BQU0sRUFBRVIsU0FBUztRQUNqQkUsS0FBSyxFQUFFO01BQ1QsQ0FBQyxFQUNEO1FBQ0VELE9BQU8sRUFDTCwyRkFBMkY7UUFDN0ZLLFVBQVUsRUFBRSxJQUFJO1FBQ2hCRSxNQUFNLEVBQUVSLFNBQVM7UUFDakJFLEtBQUssRUFBRTtNQUNULENBQUMsQ0FDRjtNQUNEO0FBQ047QUFDQTtBQUNBO01BQ01PLE9BQU8sRUFBRTtRQUNQUixPQUFPLEVBQ0wsdUZBQXVGO1FBQ3pGSyxVQUFVLEVBQUU7TUFDZCxDQUFDO01BQ0RJLEdBQUcsRUFBRTtRQUNIVCxPQUFPLEVBQUUsc0JBQXNCO1FBQy9CSyxVQUFVLEVBQUU7TUFDZCxDQUFDO01BQ0Q7QUFDTjtBQUNBO0FBQ0E7TUFDTUssUUFBUSxFQUFFO1FBQ1JWLE9BQU8sRUFDTCwySkFBMko7UUFDN0pLLFVBQVUsRUFBRSxJQUFJO1FBQ2hCSixLQUFLLEVBQUU7TUFDVCxDQUFDO01BQ0QsWUFBVTtRQUNSRCxPQUFPLEVBQUVGLFdBQVc7UUFDcEJHLEtBQUssRUFBRTtNQUNULENBQUM7TUFDRFUsV0FBVyxFQUFFO0lBQ2YsQ0FBQztJQUNEZCxLQUFLLENBQUNLLFNBQVMsQ0FBQ1UsR0FBRyxHQUFHZixLQUFLLENBQUNLLFNBQVMsQ0FBQ1IsS0FBSztJQUMzQ0csS0FBSyxDQUFDSyxTQUFTLENBQUNXLE9BQU8sR0FBR2hCLEtBQUssQ0FBQ0ssU0FBUyxDQUFDUixLQUFLO0VBQ2pELENBQUMsRUFBRUcsS0FBSyxDQUFDO0FBQ1giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxsYXRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBsYXRleFxubGF0ZXguZGlzcGxheU5hbWUgPSAnbGF0ZXgnXG5sYXRleC5hbGlhc2VzID0gWyd0ZXgnLCAnY29udGV4dCddXG5mdW5jdGlvbiBsYXRleChQcmlzbSkge1xuICA7KGZ1bmN0aW9uIChQcmlzbSkge1xuICAgIHZhciBmdW5jUGF0dGVybiA9IC9cXFxcKD86W15hLXooKVtcXF1dfFthLXoqXSspL2lcbiAgICB2YXIgaW5zaWRlRXF1ID0ge1xuICAgICAgJ2VxdWF0aW9uLWNvbW1hbmQnOiB7XG4gICAgICAgIHBhdHRlcm46IGZ1bmNQYXR0ZXJuLFxuICAgICAgICBhbGlhczogJ3JlZ2V4J1xuICAgICAgfVxuICAgIH1cbiAgICBQcmlzbS5sYW5ndWFnZXMubGF0ZXggPSB7XG4gICAgICBjb21tZW50OiAvJS4qLyxcbiAgICAgIC8vIHRoZSB2ZXJiYXRpbSBlbnZpcm9ubWVudCBwcmludHMgd2hpdGVzcGFjZSB0byB0aGUgZG9jdW1lbnRcbiAgICAgIGNkYXRhOiB7XG4gICAgICAgIHBhdHRlcm46XG4gICAgICAgICAgLyhcXFxcYmVnaW5cXHsoKD86bHN0bGlzdGluZ3x2ZXJiYXRpbSlcXCo/KVxcfSlbXFxzXFxTXSo/KD89XFxcXGVuZFxce1xcMlxcfSkvLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICB9LFxuICAgICAgLypcbiAgICAgICAqIGVxdWF0aW9ucyBjYW4gYmUgYmV0d2VlbiAkJCAkJCBvciAkICQgb3IgXFwoIFxcKSBvciBcXFsgXFxdXG4gICAgICAgKiAoYWxsIGFyZSBtdWx0aWxpbmUpXG4gICAgICAgKi9cbiAgICAgIGVxdWF0aW9uOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwYXR0ZXJuOlxuICAgICAgICAgICAgL1xcJFxcJCg/OlxcXFxbXFxzXFxTXXxbXlxcXFwkXSkrXFwkXFwkfFxcJCg/OlxcXFxbXFxzXFxTXXxbXlxcXFwkXSkrXFwkfFxcXFxcXChbXFxzXFxTXSo/XFxcXFxcKXxcXFxcXFxbW1xcc1xcU10qP1xcXFxcXF0vLFxuICAgICAgICAgIGluc2lkZTogaW5zaWRlRXF1LFxuICAgICAgICAgIGFsaWFzOiAnc3RyaW5nJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcGF0dGVybjpcbiAgICAgICAgICAgIC8oXFxcXGJlZ2luXFx7KCg/OmFsaWdufGVxbmFycmF5fGVxdWF0aW9ufGdhdGhlcnxtYXRofG11bHRsaW5lKVxcKj8pXFx9KVtcXHNcXFNdKj8oPz1cXFxcZW5kXFx7XFwyXFx9KS8sXG4gICAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgICBpbnNpZGU6IGluc2lkZUVxdSxcbiAgICAgICAgICBhbGlhczogJ3N0cmluZydcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIC8qXG4gICAgICAgKiBhcmd1bWVudHMgd2hpY2ggYXJlIGtleXdvcmRzIG9yIHJlZmVyZW5jZXMgYXJlIGhpZ2hsaWdodGVkXG4gICAgICAgKiBhcyBrZXl3b3Jkc1xuICAgICAgICovXG4gICAgICBrZXl3b3JkOiB7XG4gICAgICAgIHBhdHRlcm46XG4gICAgICAgICAgLyhcXFxcKD86YmVnaW58Y2l0ZXxkb2N1bWVudGNsYXNzfGVuZHxsYWJlbHxyZWZ8dXNlcGFja2FnZSkoPzpcXFtbXlxcXV0rXFxdKT9cXHspW159XSsoPz1cXH0pLyxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHVybDoge1xuICAgICAgICBwYXR0ZXJuOiAvKFxcXFx1cmxcXHspW159XSsoPz1cXH0pLyxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIC8qXG4gICAgICAgKiBzZWN0aW9uIG9yIGNoYXB0ZXIgaGVhZGxpbmVzIGFyZSBoaWdobGlnaHRlZCBhcyBib2xkIHNvIHRoYXRcbiAgICAgICAqIHRoZXkgc3RhbmQgb3V0IG1vcmVcbiAgICAgICAqL1xuICAgICAgaGVhZGxpbmU6IHtcbiAgICAgICAgcGF0dGVybjpcbiAgICAgICAgICAvKFxcXFwoPzpjaGFwdGVyfGZyYW1ldGl0bGV8cGFyYWdyYXBofHBhcnR8c2VjdGlvbnxzdWJwYXJhZ3JhcGh8c3Vic2VjdGlvbnxzdWJzdWJwYXJhZ3JhcGh8c3Vic3Vic2VjdGlvbnxzdWJzdWJzdWJwYXJhZ3JhcGgpXFwqPyg/OlxcW1teXFxdXStcXF0pP1xceylbXn1dKyg/PVxcfSkvLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICBhbGlhczogJ2NsYXNzLW5hbWUnXG4gICAgICB9LFxuICAgICAgZnVuY3Rpb246IHtcbiAgICAgICAgcGF0dGVybjogZnVuY1BhdHRlcm4sXG4gICAgICAgIGFsaWFzOiAnc2VsZWN0b3InXG4gICAgICB9LFxuICAgICAgcHVuY3R1YXRpb246IC9bW1xcXXt9Jl0vXG4gICAgfVxuICAgIFByaXNtLmxhbmd1YWdlcy50ZXggPSBQcmlzbS5sYW5ndWFnZXMubGF0ZXhcbiAgICBQcmlzbS5sYW5ndWFnZXMuY29udGV4dCA9IFByaXNtLmxhbmd1YWdlcy5sYXRleFxuICB9KShQcmlzbSlcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwibGF0ZXgiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImZ1bmNQYXR0ZXJuIiwiaW5zaWRlRXF1IiwicGF0dGVybiIsImFsaWFzIiwibGFuZ3VhZ2VzIiwiY29tbWVudCIsImNkYXRhIiwibG9va2JlaGluZCIsImVxdWF0aW9uIiwiaW5zaWRlIiwia2V5d29yZCIsInVybCIsImhlYWRsaW5lIiwicHVuY3R1YXRpb24iLCJ0ZXgiLCJjb250ZXh0Il0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/latex.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/latte.js":
/*!**********************************************!*\
  !*** ./node_modules/refractor/lang/latte.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar refractorMarkupTemplating = __webpack_require__(/*! ./markup-templating.js */ \"(ssr)/./node_modules/refractor/lang/markup-templating.js\");\nvar refractorPhp = __webpack_require__(/*! ./php.js */ \"(ssr)/./node_modules/refractor/lang/php.js\");\nmodule.exports = latte;\nlatte.displayName = 'latte';\nlatte.aliases = [];\nfunction latte(Prism) {\n  Prism.register(refractorMarkupTemplating);\n  Prism.register(refractorPhp);\n  (function (Prism) {\n    Prism.languages.latte = {\n      comment: /^\\{\\*[\\s\\S]*/,\n      'latte-tag': {\n        // https://latte.nette.org/en/tags\n        pattern: /(^\\{(?:\\/(?=[a-z]))?)(?:[=_]|[a-z]\\w*\\b(?!\\())/i,\n        lookbehind: true,\n        alias: 'important'\n      },\n      delimiter: {\n        pattern: /^\\{\\/?|\\}$/,\n        alias: 'punctuation'\n      },\n      php: {\n        pattern: /\\S(?:[\\s\\S]*\\S)?/,\n        alias: 'language-php',\n        inside: Prism.languages.php\n      }\n    };\n    var markupLatte = Prism.languages.extend('markup', {});\n    Prism.languages.insertBefore('inside', 'attr-value', {\n      'n-attr': {\n        pattern: /n:[\\w-]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+))?/,\n        inside: {\n          'attr-name': {\n            pattern: /^[^\\s=]+/,\n            alias: 'important'\n          },\n          'attr-value': {\n            pattern: /=[\\s\\S]+/,\n            inside: {\n              punctuation: [/^=/, {\n                pattern: /^(\\s*)[\"']|[\"']$/,\n                lookbehind: true\n              }],\n              php: {\n                pattern: /\\S(?:[\\s\\S]*\\S)?/,\n                inside: Prism.languages.php\n              }\n            }\n          }\n        }\n      }\n    }, markupLatte.tag);\n    Prism.hooks.add('before-tokenize', function (env) {\n      if (env.language !== 'latte') {\n        return;\n      }\n      var lattePattern = /\\{\\*[\\s\\S]*?\\*\\}|\\{[^'\"\\s{}*](?:[^\"'/{}]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*\\}/g;\n      Prism.languages['markup-templating'].buildPlaceholders(env, 'latte', lattePattern);\n      env.grammar = markupLatte;\n    });\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'latte');\n    });\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvbGF0dGUuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBQ1osSUFBSUEseUJBQXlCLEdBQUdDLG1CQUFPLENBQUMsd0ZBQXdCLENBQUM7QUFDakUsSUFBSUMsWUFBWSxHQUFHRCxtQkFBTyxDQUFDLDREQUFVLENBQUM7QUFDdENFLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxLQUFLO0FBQ3RCQSxLQUFLLENBQUNDLFdBQVcsR0FBRyxPQUFPO0FBQzNCRCxLQUFLLENBQUNFLE9BQU8sR0FBRyxFQUFFO0FBQ2xCLFNBQVNGLEtBQUtBLENBQUNHLEtBQUssRUFBRTtFQUNwQkEsS0FBSyxDQUFDQyxRQUFRLENBQUNULHlCQUF5QixDQUFDO0VBQ3pDUSxLQUFLLENBQUNDLFFBQVEsQ0FBQ1AsWUFBWSxDQUFDO0VBQzNCLENBQUMsVUFBVU0sS0FBSyxFQUFFO0lBQ2pCQSxLQUFLLENBQUNFLFNBQVMsQ0FBQ0wsS0FBSyxHQUFHO01BQ3RCTSxPQUFPLEVBQUUsY0FBYztNQUN2QixXQUFXLEVBQUU7UUFDWDtRQUNBQyxPQUFPLEVBQUUsaURBQWlEO1FBQzFEQyxVQUFVLEVBQUUsSUFBSTtRQUNoQkMsS0FBSyxFQUFFO01BQ1QsQ0FBQztNQUNEQyxTQUFTLEVBQUU7UUFDVEgsT0FBTyxFQUFFLFlBQVk7UUFDckJFLEtBQUssRUFBRTtNQUNULENBQUM7TUFDREUsR0FBRyxFQUFFO1FBQ0hKLE9BQU8sRUFBRSxrQkFBa0I7UUFDM0JFLEtBQUssRUFBRSxjQUFjO1FBQ3JCRyxNQUFNLEVBQUVULEtBQUssQ0FBQ0UsU0FBUyxDQUFDTTtNQUMxQjtJQUNGLENBQUM7SUFDRCxJQUFJRSxXQUFXLEdBQUdWLEtBQUssQ0FBQ0UsU0FBUyxDQUFDUyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3REWCxLQUFLLENBQUNFLFNBQVMsQ0FBQ1UsWUFBWSxDQUMxQixRQUFRLEVBQ1IsWUFBWSxFQUNaO01BQ0UsUUFBUSxFQUFFO1FBQ1JSLE9BQU8sRUFBRSxvREFBb0Q7UUFDN0RLLE1BQU0sRUFBRTtVQUNOLFdBQVcsRUFBRTtZQUNYTCxPQUFPLEVBQUUsVUFBVTtZQUNuQkUsS0FBSyxFQUFFO1VBQ1QsQ0FBQztVQUNELFlBQVksRUFBRTtZQUNaRixPQUFPLEVBQUUsVUFBVTtZQUNuQkssTUFBTSxFQUFFO2NBQ05JLFdBQVcsRUFBRSxDQUNYLElBQUksRUFDSjtnQkFDRVQsT0FBTyxFQUFFLGtCQUFrQjtnQkFDM0JDLFVBQVUsRUFBRTtjQUNkLENBQUMsQ0FDRjtjQUNERyxHQUFHLEVBQUU7Z0JBQ0hKLE9BQU8sRUFBRSxrQkFBa0I7Z0JBQzNCSyxNQUFNLEVBQUVULEtBQUssQ0FBQ0UsU0FBUyxDQUFDTTtjQUMxQjtZQUNGO1VBQ0Y7UUFDRjtNQUNGO0lBQ0YsQ0FBQyxFQUNERSxXQUFXLENBQUNJLEdBQ2QsQ0FBQztJQUNEZCxLQUFLLENBQUNlLEtBQUssQ0FBQ0MsR0FBRyxDQUFDLGlCQUFpQixFQUFFLFVBQVVDLEdBQUcsRUFBRTtNQUNoRCxJQUFJQSxHQUFHLENBQUNDLFFBQVEsS0FBSyxPQUFPLEVBQUU7UUFDNUI7TUFDRjtNQUNBLElBQUlDLFlBQVksR0FDZCxzSEFBc0g7TUFDeEhuQixLQUFLLENBQUNFLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDa0IsaUJBQWlCLENBQ3BESCxHQUFHLEVBQ0gsT0FBTyxFQUNQRSxZQUNGLENBQUM7TUFDREYsR0FBRyxDQUFDSSxPQUFPLEdBQUdYLFdBQVc7SUFDM0IsQ0FBQyxDQUFDO0lBQ0ZWLEtBQUssQ0FBQ2UsS0FBSyxDQUFDQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsVUFBVUMsR0FBRyxFQUFFO01BQy9DakIsS0FBSyxDQUFDRSxTQUFTLENBQUMsbUJBQW1CLENBQUMsQ0FBQ29CLG9CQUFvQixDQUFDTCxHQUFHLEVBQUUsT0FBTyxDQUFDO0lBQ3pFLENBQUMsQ0FBQztFQUNKLENBQUMsRUFBRWpCLEtBQUssQ0FBQztBQUNYIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcbGF0dGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG52YXIgcmVmcmFjdG9yTWFya3VwVGVtcGxhdGluZyA9IHJlcXVpcmUoJy4vbWFya3VwLXRlbXBsYXRpbmcuanMnKVxudmFyIHJlZnJhY3RvclBocCA9IHJlcXVpcmUoJy4vcGhwLmpzJylcbm1vZHVsZS5leHBvcnRzID0gbGF0dGVcbmxhdHRlLmRpc3BsYXlOYW1lID0gJ2xhdHRlJ1xubGF0dGUuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBsYXR0ZShQcmlzbSkge1xuICBQcmlzbS5yZWdpc3RlcihyZWZyYWN0b3JNYXJrdXBUZW1wbGF0aW5nKVxuICBQcmlzbS5yZWdpc3RlcihyZWZyYWN0b3JQaHApXG4gIDsoZnVuY3Rpb24gKFByaXNtKSB7XG4gICAgUHJpc20ubGFuZ3VhZ2VzLmxhdHRlID0ge1xuICAgICAgY29tbWVudDogL15cXHtcXCpbXFxzXFxTXSovLFxuICAgICAgJ2xhdHRlLXRhZyc6IHtcbiAgICAgICAgLy8gaHR0cHM6Ly9sYXR0ZS5uZXR0ZS5vcmcvZW4vdGFnc1xuICAgICAgICBwYXR0ZXJuOiAvKF5cXHsoPzpcXC8oPz1bYS16XSkpPykoPzpbPV9dfFthLXpdXFx3KlxcYig/IVxcKCkpL2ksXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGFsaWFzOiAnaW1wb3J0YW50J1xuICAgICAgfSxcbiAgICAgIGRlbGltaXRlcjoge1xuICAgICAgICBwYXR0ZXJuOiAvXlxce1xcLz98XFx9JC8sXG4gICAgICAgIGFsaWFzOiAncHVuY3R1YXRpb24nXG4gICAgICB9LFxuICAgICAgcGhwOiB7XG4gICAgICAgIHBhdHRlcm46IC9cXFMoPzpbXFxzXFxTXSpcXFMpPy8sXG4gICAgICAgIGFsaWFzOiAnbGFuZ3VhZ2UtcGhwJyxcbiAgICAgICAgaW5zaWRlOiBQcmlzbS5sYW5ndWFnZXMucGhwXG4gICAgICB9XG4gICAgfVxuICAgIHZhciBtYXJrdXBMYXR0ZSA9IFByaXNtLmxhbmd1YWdlcy5leHRlbmQoJ21hcmt1cCcsIHt9KVxuICAgIFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoXG4gICAgICAnaW5zaWRlJyxcbiAgICAgICdhdHRyLXZhbHVlJyxcbiAgICAgIHtcbiAgICAgICAgJ24tYXR0cic6IHtcbiAgICAgICAgICBwYXR0ZXJuOiAvbjpbXFx3LV0rKD86XFxzKj1cXHMqKD86XCJbXlwiXSpcInwnW14nXSonfFteXFxzJ1wiPj1dKykpPy8sXG4gICAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgICAnYXR0ci1uYW1lJzoge1xuICAgICAgICAgICAgICBwYXR0ZXJuOiAvXlteXFxzPV0rLyxcbiAgICAgICAgICAgICAgYWxpYXM6ICdpbXBvcnRhbnQnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ2F0dHItdmFsdWUnOiB7XG4gICAgICAgICAgICAgIHBhdHRlcm46IC89W1xcc1xcU10rLyxcbiAgICAgICAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgICAgICAgcHVuY3R1YXRpb246IFtcbiAgICAgICAgICAgICAgICAgIC9ePS8sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHBhdHRlcm46IC9eKFxccyopW1wiJ118W1wiJ10kLyxcbiAgICAgICAgICAgICAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgcGhwOiB7XG4gICAgICAgICAgICAgICAgICBwYXR0ZXJuOiAvXFxTKD86W1xcc1xcU10qXFxTKT8vLFxuICAgICAgICAgICAgICAgICAgaW5zaWRlOiBQcmlzbS5sYW5ndWFnZXMucGhwXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgbWFya3VwTGF0dGUudGFnXG4gICAgKVxuICAgIFByaXNtLmhvb2tzLmFkZCgnYmVmb3JlLXRva2VuaXplJywgZnVuY3Rpb24gKGVudikge1xuICAgICAgaWYgKGVudi5sYW5ndWFnZSAhPT0gJ2xhdHRlJykge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIHZhciBsYXR0ZVBhdHRlcm4gPVxuICAgICAgICAvXFx7XFwqW1xcc1xcU10qP1xcKlxcfXxcXHtbXidcIlxcc3t9Kl0oPzpbXlwiJy97fV18XFwvKD8hWyovXSl8KFwifCcpKD86XFxcXFtcXHNcXFNdfCg/IVxcMSlbXlxcXFxdKSpcXDF8XFwvXFwqKD86W14qXXxcXCooPyFcXC8pKSpcXCpcXC8pKlxcfS9nXG4gICAgICBQcmlzbS5sYW5ndWFnZXNbJ21hcmt1cC10ZW1wbGF0aW5nJ10uYnVpbGRQbGFjZWhvbGRlcnMoXG4gICAgICAgIGVudixcbiAgICAgICAgJ2xhdHRlJyxcbiAgICAgICAgbGF0dGVQYXR0ZXJuXG4gICAgICApXG4gICAgICBlbnYuZ3JhbW1hciA9IG1hcmt1cExhdHRlXG4gICAgfSlcbiAgICBQcmlzbS5ob29rcy5hZGQoJ2FmdGVyLXRva2VuaXplJywgZnVuY3Rpb24gKGVudikge1xuICAgICAgUHJpc20ubGFuZ3VhZ2VzWydtYXJrdXAtdGVtcGxhdGluZyddLnRva2VuaXplUGxhY2Vob2xkZXJzKGVudiwgJ2xhdHRlJylcbiAgICB9KVxuICB9KShQcmlzbSlcbn1cbiJdLCJuYW1lcyI6WyJyZWZyYWN0b3JNYXJrdXBUZW1wbGF0aW5nIiwicmVxdWlyZSIsInJlZnJhY3RvclBocCIsIm1vZHVsZSIsImV4cG9ydHMiLCJsYXR0ZSIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwicmVnaXN0ZXIiLCJsYW5ndWFnZXMiLCJjb21tZW50IiwicGF0dGVybiIsImxvb2tiZWhpbmQiLCJhbGlhcyIsImRlbGltaXRlciIsInBocCIsImluc2lkZSIsIm1hcmt1cExhdHRlIiwiZXh0ZW5kIiwiaW5zZXJ0QmVmb3JlIiwicHVuY3R1YXRpb24iLCJ0YWciLCJob29rcyIsImFkZCIsImVudiIsImxhbmd1YWdlIiwibGF0dGVQYXR0ZXJuIiwiYnVpbGRQbGFjZWhvbGRlcnMiLCJncmFtbWFyIiwidG9rZW5pemVQbGFjZWhvbGRlcnMiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/latte.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/less.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/less.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = less;\nless.displayName = 'less';\nless.aliases = [];\nfunction less(Prism) {\n  /* FIXME :\n  :extend() is not handled specifically : its highlighting is buggy.\n  Mixin usage must be inside a ruleset to be highlighted.\n  At-rules (e.g. import) containing interpolations are buggy.\n  Detached rulesets are highlighted as at-rules.\n  A comment before a mixin usage prevents the latter to be properly highlighted.\n  */\n  Prism.languages.less = Prism.languages.extend('css', {\n    comment: [/\\/\\*[\\s\\S]*?\\*\\//, {\n      pattern: /(^|[^\\\\])\\/\\/.*/,\n      lookbehind: true\n    }],\n    atrule: {\n      pattern: /@[\\w-](?:\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\n      inside: {\n        punctuation: /[:()]/\n      }\n    },\n    // selectors and mixins are considered the same\n    selector: {\n      pattern: /(?:@\\{[\\w-]+\\}|[^{};\\s@])(?:@\\{[\\w-]+\\}|\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};@\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\n      inside: {\n        // mixin parameters\n        variable: /@+[\\w-]+/\n      }\n    },\n    property: /(?:@\\{[\\w-]+\\}|[\\w-])+(?:\\+_?)?(?=\\s*:)/,\n    operator: /[+\\-*\\/]/\n  });\n  Prism.languages.insertBefore('less', 'property', {\n    variable: [\n    // Variable declaration (the colon must be consumed!)\n    {\n      pattern: /@[\\w-]+\\s*:/,\n      inside: {\n        punctuation: /:/\n      }\n    },\n    // Variable usage\n    /@@?[\\w-]+/],\n    'mixin-usage': {\n      pattern: /([{;]\\s*)[.#](?!\\d)[\\w-].*?(?=[(;])/,\n      lookbehind: true,\n      alias: 'function'\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvbGVzcy5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLElBQUk7QUFDckJBLElBQUksQ0FBQ0MsV0FBVyxHQUFHLE1BQU07QUFDekJELElBQUksQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDakIsU0FBU0YsSUFBSUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ25CO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixJQUFJLEdBQUdHLEtBQUssQ0FBQ0MsU0FBUyxDQUFDQyxNQUFNLENBQUMsS0FBSyxFQUFFO0lBQ25EQyxPQUFPLEVBQUUsQ0FDUCxrQkFBa0IsRUFDbEI7TUFDRUMsT0FBTyxFQUFFLGlCQUFpQjtNQUMxQkMsVUFBVSxFQUFFO0lBQ2QsQ0FBQyxDQUNGO0lBQ0RDLE1BQU0sRUFBRTtNQUNORixPQUFPLEVBQ0wseUVBQXlFO01BQzNFRyxNQUFNLEVBQUU7UUFDTkMsV0FBVyxFQUFFO01BQ2Y7SUFDRixDQUFDO0lBQ0Q7SUFDQUMsUUFBUSxFQUFFO01BQ1JMLE9BQU8sRUFDTCx5R0FBeUc7TUFDM0dHLE1BQU0sRUFBRTtRQUNOO1FBQ0FHLFFBQVEsRUFBRTtNQUNaO0lBQ0YsQ0FBQztJQUNEQyxRQUFRLEVBQUUseUNBQXlDO0lBQ25EQyxRQUFRLEVBQUU7RUFDWixDQUFDLENBQUM7RUFDRlosS0FBSyxDQUFDQyxTQUFTLENBQUNZLFlBQVksQ0FBQyxNQUFNLEVBQUUsVUFBVSxFQUFFO0lBQy9DSCxRQUFRLEVBQUU7SUFDUjtJQUNBO01BQ0VOLE9BQU8sRUFBRSxhQUFhO01BQ3RCRyxNQUFNLEVBQUU7UUFDTkMsV0FBVyxFQUFFO01BQ2Y7SUFDRixDQUFDO0lBQUU7SUFDSCxXQUFXLENBQ1o7SUFDRCxhQUFhLEVBQUU7TUFDYkosT0FBTyxFQUFFLHFDQUFxQztNQUM5Q0MsVUFBVSxFQUFFLElBQUk7TUFDaEJTLEtBQUssRUFBRTtJQUNUO0VBQ0YsQ0FBQyxDQUFDO0FBQ0oiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxsZXNzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGxlc3Ncbmxlc3MuZGlzcGxheU5hbWUgPSAnbGVzcydcbmxlc3MuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBsZXNzKFByaXNtKSB7XG4gIC8qIEZJWE1FIDpcbjpleHRlbmQoKSBpcyBub3QgaGFuZGxlZCBzcGVjaWZpY2FsbHkgOiBpdHMgaGlnaGxpZ2h0aW5nIGlzIGJ1Z2d5LlxuTWl4aW4gdXNhZ2UgbXVzdCBiZSBpbnNpZGUgYSBydWxlc2V0IHRvIGJlIGhpZ2hsaWdodGVkLlxuQXQtcnVsZXMgKGUuZy4gaW1wb3J0KSBjb250YWluaW5nIGludGVycG9sYXRpb25zIGFyZSBidWdneS5cbkRldGFjaGVkIHJ1bGVzZXRzIGFyZSBoaWdobGlnaHRlZCBhcyBhdC1ydWxlcy5cbkEgY29tbWVudCBiZWZvcmUgYSBtaXhpbiB1c2FnZSBwcmV2ZW50cyB0aGUgbGF0dGVyIHRvIGJlIHByb3Blcmx5IGhpZ2hsaWdodGVkLlxuKi9cbiAgUHJpc20ubGFuZ3VhZ2VzLmxlc3MgPSBQcmlzbS5sYW5ndWFnZXMuZXh0ZW5kKCdjc3MnLCB7XG4gICAgY29tbWVudDogW1xuICAgICAgL1xcL1xcKltcXHNcXFNdKj9cXCpcXC8vLFxuICAgICAge1xuICAgICAgICBwYXR0ZXJuOiAvKF58W15cXFxcXSlcXC9cXC8uKi8sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH1cbiAgICBdLFxuICAgIGF0cnVsZToge1xuICAgICAgcGF0dGVybjpcbiAgICAgICAgL0BbXFx3LV0oPzpcXCgoPzpbXigpe31dfFxcKFteKCl7fV0qXFwpKSpcXCl8W14oKXt9O1xcc118XFxzKyg/IVxccykpKj8oPz1cXHMqXFx7KS8sXG4gICAgICBpbnNpZGU6IHtcbiAgICAgICAgcHVuY3R1YXRpb246IC9bOigpXS9cbiAgICAgIH1cbiAgICB9LFxuICAgIC8vIHNlbGVjdG9ycyBhbmQgbWl4aW5zIGFyZSBjb25zaWRlcmVkIHRoZSBzYW1lXG4gICAgc2VsZWN0b3I6IHtcbiAgICAgIHBhdHRlcm46XG4gICAgICAgIC8oPzpAXFx7W1xcdy1dK1xcfXxbXnt9O1xcc0BdKSg/OkBcXHtbXFx3LV0rXFx9fFxcKCg/OlteKCl7fV18XFwoW14oKXt9XSpcXCkpKlxcKXxbXigpe307QFxcc118XFxzKyg/IVxccykpKj8oPz1cXHMqXFx7KS8sXG4gICAgICBpbnNpZGU6IHtcbiAgICAgICAgLy8gbWl4aW4gcGFyYW1ldGVyc1xuICAgICAgICB2YXJpYWJsZTogL0ArW1xcdy1dKy9cbiAgICAgIH1cbiAgICB9LFxuICAgIHByb3BlcnR5OiAvKD86QFxce1tcXHctXStcXH18W1xcdy1dKSsoPzpcXCtfPyk/KD89XFxzKjopLyxcbiAgICBvcGVyYXRvcjogL1srXFwtKlxcL10vXG4gIH0pXG4gIFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ2xlc3MnLCAncHJvcGVydHknLCB7XG4gICAgdmFyaWFibGU6IFtcbiAgICAgIC8vIFZhcmlhYmxlIGRlY2xhcmF0aW9uICh0aGUgY29sb24gbXVzdCBiZSBjb25zdW1lZCEpXG4gICAgICB7XG4gICAgICAgIHBhdHRlcm46IC9AW1xcdy1dK1xccyo6LyxcbiAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgcHVuY3R1YXRpb246IC86L1xuICAgICAgICB9XG4gICAgICB9LCAvLyBWYXJpYWJsZSB1c2FnZVxuICAgICAgL0BAP1tcXHctXSsvXG4gICAgXSxcbiAgICAnbWl4aW4tdXNhZ2UnOiB7XG4gICAgICBwYXR0ZXJuOiAvKFt7O11cXHMqKVsuI10oPyFcXGQpW1xcdy1dLio/KD89Wyg7XSkvLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGFsaWFzOiAnZnVuY3Rpb24nXG4gICAgfVxuICB9KVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJsZXNzIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJleHRlbmQiLCJjb21tZW50IiwicGF0dGVybiIsImxvb2tiZWhpbmQiLCJhdHJ1bGUiLCJpbnNpZGUiLCJwdW5jdHVhdGlvbiIsInNlbGVjdG9yIiwidmFyaWFibGUiLCJwcm9wZXJ0eSIsIm9wZXJhdG9yIiwiaW5zZXJ0QmVmb3JlIiwiYWxpYXMiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/less.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/lilypond.js":
/*!*************************************************!*\
  !*** ./node_modules/refractor/lang/lilypond.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar refractorScheme = __webpack_require__(/*! ./scheme.js */ \"(ssr)/./node_modules/refractor/lang/scheme.js\");\nmodule.exports = lilypond;\nlilypond.displayName = 'lilypond';\nlilypond.aliases = [];\nfunction lilypond(Prism) {\n  Prism.register(refractorScheme);\n  (function (Prism) {\n    var schemeExpression = /\\((?:[^();\"#\\\\]|\\\\[\\s\\S]|;.*(?!.)|\"(?:[^\"\\\\]|\\\\.)*\"|#(?:\\{(?:(?!#\\})[\\s\\S])*#\\}|[^{])|<expr>)*\\)/.source; // allow for up to pow(2, recursivenessLog2) many levels of recursive brace expressions\n    // For some reason, this can't be 4\n    var recursivenessLog2 = 5;\n    for (var i = 0; i < recursivenessLog2; i++) {\n      schemeExpression = schemeExpression.replace(/<expr>/g, function () {\n        return schemeExpression;\n      });\n    }\n    schemeExpression = schemeExpression.replace(/<expr>/g, /[^\\s\\S]/.source);\n    var lilypond = Prism.languages.lilypond = {\n      comment: /%(?:(?!\\{).*|\\{[\\s\\S]*?%\\})/,\n      'embedded-scheme': {\n        pattern: RegExp(/(^|[=\\s])#(?:\"(?:[^\"\\\\]|\\\\.)*\"|[^\\s()\"]*(?:[^\\s()]|<expr>))/.source.replace(/<expr>/g, function () {\n          return schemeExpression;\n        }), 'm'),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          scheme: {\n            pattern: /^(#)[\\s\\S]+$/,\n            lookbehind: true,\n            alias: 'language-scheme',\n            inside: {\n              'embedded-lilypond': {\n                pattern: /#\\{[\\s\\S]*?#\\}/,\n                greedy: true,\n                inside: {\n                  punctuation: /^#\\{|#\\}$/,\n                  lilypond: {\n                    pattern: /[\\s\\S]+/,\n                    alias: 'language-lilypond',\n                    inside: null // see below\n                  }\n                }\n              },\n\n              rest: Prism.languages.scheme\n            }\n          },\n          punctuation: /#/\n        }\n      },\n      string: {\n        pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n        greedy: true\n      },\n      'class-name': {\n        pattern: /(\\\\new\\s+)[\\w-]+/,\n        lookbehind: true\n      },\n      keyword: {\n        pattern: /\\\\[a-z][-\\w]*/i,\n        inside: {\n          punctuation: /^\\\\/\n        }\n      },\n      operator: /[=|]|<<|>>/,\n      punctuation: {\n        pattern: /(^|[a-z\\d])(?:'+|,+|[_^]?-[_^]?(?:[-+^!>._]|(?=\\d))|[_^]\\.?|[.!])|[{}()[\\]<>^~]|\\\\[()[\\]<>\\\\!]|--|__/,\n        lookbehind: true\n      },\n      number: /\\b\\d+(?:\\/\\d+)?\\b/\n    };\n    lilypond['embedded-scheme'].inside['scheme'].inside['embedded-lilypond'].inside['lilypond'].inside = lilypond;\n    Prism.languages.ly = lilypond;\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvbGlseXBvbmQuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBQ1osSUFBSUEsZUFBZSxHQUFHQyxtQkFBTyxDQUFDLGtFQUFhLENBQUM7QUFDNUNDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxRQUFRO0FBQ3pCQSxRQUFRLENBQUNDLFdBQVcsR0FBRyxVQUFVO0FBQ2pDRCxRQUFRLENBQUNFLE9BQU8sR0FBRyxFQUFFO0FBQ3JCLFNBQVNGLFFBQVFBLENBQUNHLEtBQUssRUFBRTtFQUN2QkEsS0FBSyxDQUFDQyxRQUFRLENBQUNSLGVBQWUsQ0FBQztFQUM5QixDQUFDLFVBQVVPLEtBQUssRUFBRTtJQUNqQixJQUFJRSxnQkFBZ0IsR0FDbEIsa0dBQWtHLENBQy9GQyxNQUFNLEVBQUM7SUFDWjtJQUNBLElBQUlDLGlCQUFpQixHQUFHLENBQUM7SUFDekIsS0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdELGlCQUFpQixFQUFFQyxDQUFDLEVBQUUsRUFBRTtNQUMxQ0gsZ0JBQWdCLEdBQUdBLGdCQUFnQixDQUFDSSxPQUFPLENBQUMsU0FBUyxFQUFFLFlBQVk7UUFDakUsT0FBT0osZ0JBQWdCO01BQ3pCLENBQUMsQ0FBQztJQUNKO0lBQ0FBLGdCQUFnQixHQUFHQSxnQkFBZ0IsQ0FBQ0ksT0FBTyxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUNILE1BQU0sQ0FBQztJQUN4RSxJQUFJTixRQUFRLEdBQUlHLEtBQUssQ0FBQ08sU0FBUyxDQUFDVixRQUFRLEdBQUc7TUFDekNXLE9BQU8sRUFBRSw2QkFBNkI7TUFDdEMsaUJBQWlCLEVBQUU7UUFDakJDLE9BQU8sRUFBRUMsTUFBTSxDQUNiLDZEQUE2RCxDQUFDUCxNQUFNLENBQUNHLE9BQU8sQ0FDMUUsU0FBUyxFQUNULFlBQVk7VUFDVixPQUFPSixnQkFBZ0I7UUFDekIsQ0FDRixDQUFDLEVBQ0QsR0FDRixDQUFDO1FBQ0RTLFVBQVUsRUFBRSxJQUFJO1FBQ2hCQyxNQUFNLEVBQUUsSUFBSTtRQUNaQyxNQUFNLEVBQUU7VUFDTkMsTUFBTSxFQUFFO1lBQ05MLE9BQU8sRUFBRSxjQUFjO1lBQ3ZCRSxVQUFVLEVBQUUsSUFBSTtZQUNoQkksS0FBSyxFQUFFLGlCQUFpQjtZQUN4QkYsTUFBTSxFQUFFO2NBQ04sbUJBQW1CLEVBQUU7Z0JBQ25CSixPQUFPLEVBQUUsZ0JBQWdCO2dCQUN6QkcsTUFBTSxFQUFFLElBQUk7Z0JBQ1pDLE1BQU0sRUFBRTtrQkFDTkcsV0FBVyxFQUFFLFdBQVc7a0JBQ3hCbkIsUUFBUSxFQUFFO29CQUNSWSxPQUFPLEVBQUUsU0FBUztvQkFDbEJNLEtBQUssRUFBRSxtQkFBbUI7b0JBQzFCRixNQUFNLEVBQUUsSUFBSSxDQUFDO2tCQUNmO2dCQUNGO2NBQ0YsQ0FBQzs7Y0FDREksSUFBSSxFQUFFakIsS0FBSyxDQUFDTyxTQUFTLENBQUNPO1lBQ3hCO1VBQ0YsQ0FBQztVQUNERSxXQUFXLEVBQUU7UUFDZjtNQUNGLENBQUM7TUFDREUsTUFBTSxFQUFFO1FBQ05ULE9BQU8sRUFBRSxtQkFBbUI7UUFDNUJHLE1BQU0sRUFBRTtNQUNWLENBQUM7TUFDRCxZQUFZLEVBQUU7UUFDWkgsT0FBTyxFQUFFLGtCQUFrQjtRQUMzQkUsVUFBVSxFQUFFO01BQ2QsQ0FBQztNQUNEUSxPQUFPLEVBQUU7UUFDUFYsT0FBTyxFQUFFLGdCQUFnQjtRQUN6QkksTUFBTSxFQUFFO1VBQ05HLFdBQVcsRUFBRTtRQUNmO01BQ0YsQ0FBQztNQUNESSxRQUFRLEVBQUUsWUFBWTtNQUN0QkosV0FBVyxFQUFFO1FBQ1hQLE9BQU8sRUFDTCxzR0FBc0c7UUFDeEdFLFVBQVUsRUFBRTtNQUNkLENBQUM7TUFDRFUsTUFBTSxFQUFFO0lBQ1YsQ0FBRTtJQUNGeEIsUUFBUSxDQUFDLGlCQUFpQixDQUFDLENBQUNnQixNQUFNLENBQUMsUUFBUSxDQUFDLENBQUNBLE1BQU0sQ0FDakQsbUJBQW1CLENBQ3BCLENBQUNBLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQ0EsTUFBTSxHQUFHaEIsUUFBUTtJQUN0Q0csS0FBSyxDQUFDTyxTQUFTLENBQUNlLEVBQUUsR0FBR3pCLFFBQVE7RUFDL0IsQ0FBQyxFQUFFRyxLQUFLLENBQUM7QUFDWCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXGxpbHlwb25kLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xudmFyIHJlZnJhY3RvclNjaGVtZSA9IHJlcXVpcmUoJy4vc2NoZW1lLmpzJylcbm1vZHVsZS5leHBvcnRzID0gbGlseXBvbmRcbmxpbHlwb25kLmRpc3BsYXlOYW1lID0gJ2xpbHlwb25kJ1xubGlseXBvbmQuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBsaWx5cG9uZChQcmlzbSkge1xuICBQcmlzbS5yZWdpc3RlcihyZWZyYWN0b3JTY2hlbWUpXG4gIDsoZnVuY3Rpb24gKFByaXNtKSB7XG4gICAgdmFyIHNjaGVtZUV4cHJlc3Npb24gPVxuICAgICAgL1xcKCg/OlteKCk7XCIjXFxcXF18XFxcXFtcXHNcXFNdfDsuKig/IS4pfFwiKD86W15cIlxcXFxdfFxcXFwuKSpcInwjKD86XFx7KD86KD8hI1xcfSlbXFxzXFxTXSkqI1xcfXxbXntdKXw8ZXhwcj4pKlxcKS9cbiAgICAgICAgLnNvdXJjZSAvLyBhbGxvdyBmb3IgdXAgdG8gcG93KDIsIHJlY3Vyc2l2ZW5lc3NMb2cyKSBtYW55IGxldmVscyBvZiByZWN1cnNpdmUgYnJhY2UgZXhwcmVzc2lvbnNcbiAgICAvLyBGb3Igc29tZSByZWFzb24sIHRoaXMgY2FuJ3QgYmUgNFxuICAgIHZhciByZWN1cnNpdmVuZXNzTG9nMiA9IDVcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlY3Vyc2l2ZW5lc3NMb2cyOyBpKyspIHtcbiAgICAgIHNjaGVtZUV4cHJlc3Npb24gPSBzY2hlbWVFeHByZXNzaW9uLnJlcGxhY2UoLzxleHByPi9nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBzY2hlbWVFeHByZXNzaW9uXG4gICAgICB9KVxuICAgIH1cbiAgICBzY2hlbWVFeHByZXNzaW9uID0gc2NoZW1lRXhwcmVzc2lvbi5yZXBsYWNlKC88ZXhwcj4vZywgL1teXFxzXFxTXS8uc291cmNlKVxuICAgIHZhciBsaWx5cG9uZCA9IChQcmlzbS5sYW5ndWFnZXMubGlseXBvbmQgPSB7XG4gICAgICBjb21tZW50OiAvJSg/Oig/IVxceykuKnxcXHtbXFxzXFxTXSo/JVxcfSkvLFxuICAgICAgJ2VtYmVkZGVkLXNjaGVtZSc6IHtcbiAgICAgICAgcGF0dGVybjogUmVnRXhwKFxuICAgICAgICAgIC8oXnxbPVxcc10pIyg/OlwiKD86W15cIlxcXFxdfFxcXFwuKSpcInxbXlxccygpXCJdKig/OlteXFxzKCldfDxleHByPikpLy5zb3VyY2UucmVwbGFjZShcbiAgICAgICAgICAgIC88ZXhwcj4vZyxcbiAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHNjaGVtZUV4cHJlc3Npb25cbiAgICAgICAgICAgIH1cbiAgICAgICAgICApLFxuICAgICAgICAgICdtJ1xuICAgICAgICApLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICBncmVlZHk6IHRydWUsXG4gICAgICAgIGluc2lkZToge1xuICAgICAgICAgIHNjaGVtZToge1xuICAgICAgICAgICAgcGF0dGVybjogL14oIylbXFxzXFxTXSskLyxcbiAgICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgICAgICBhbGlhczogJ2xhbmd1YWdlLXNjaGVtZScsXG4gICAgICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICAgICAgJ2VtYmVkZGVkLWxpbHlwb25kJzoge1xuICAgICAgICAgICAgICAgIHBhdHRlcm46IC8jXFx7W1xcc1xcU10qPyNcXH0vLFxuICAgICAgICAgICAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICAgICAgICAgIHB1bmN0dWF0aW9uOiAvXiNcXHt8I1xcfSQvLFxuICAgICAgICAgICAgICAgICAgbGlseXBvbmQ6IHtcbiAgICAgICAgICAgICAgICAgICAgcGF0dGVybjogL1tcXHNcXFNdKy8sXG4gICAgICAgICAgICAgICAgICAgIGFsaWFzOiAnbGFuZ3VhZ2UtbGlseXBvbmQnLFxuICAgICAgICAgICAgICAgICAgICBpbnNpZGU6IG51bGwgLy8gc2VlIGJlbG93XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICByZXN0OiBQcmlzbS5sYW5ndWFnZXMuc2NoZW1lXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBwdW5jdHVhdGlvbjogLyMvXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBzdHJpbmc6IHtcbiAgICAgICAgcGF0dGVybjogL1wiKD86W15cIlxcXFxdfFxcXFwuKSpcIi8sXG4gICAgICAgIGdyZWVkeTogdHJ1ZVxuICAgICAgfSxcbiAgICAgICdjbGFzcy1uYW1lJzoge1xuICAgICAgICBwYXR0ZXJuOiAvKFxcXFxuZXdcXHMrKVtcXHctXSsvLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICB9LFxuICAgICAga2V5d29yZDoge1xuICAgICAgICBwYXR0ZXJuOiAvXFxcXFthLXpdWy1cXHddKi9pLFxuICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICBwdW5jdHVhdGlvbjogL15cXFxcL1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb3BlcmF0b3I6IC9bPXxdfDw8fD4+LyxcbiAgICAgIHB1bmN0dWF0aW9uOiB7XG4gICAgICAgIHBhdHRlcm46XG4gICAgICAgICAgLyhefFthLXpcXGRdKSg/OicrfCwrfFtfXl0/LVtfXl0/KD86Wy0rXiE+Ll9dfCg/PVxcZCkpfFtfXl1cXC4/fFsuIV0pfFt7fSgpW1xcXTw+Xn5dfFxcXFxbKClbXFxdPD5cXFxcIV18LS18X18vLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICB9LFxuICAgICAgbnVtYmVyOiAvXFxiXFxkKyg/OlxcL1xcZCspP1xcYi9cbiAgICB9KVxuICAgIGxpbHlwb25kWydlbWJlZGRlZC1zY2hlbWUnXS5pbnNpZGVbJ3NjaGVtZSddLmluc2lkZVtcbiAgICAgICdlbWJlZGRlZC1saWx5cG9uZCdcbiAgICBdLmluc2lkZVsnbGlseXBvbmQnXS5pbnNpZGUgPSBsaWx5cG9uZFxuICAgIFByaXNtLmxhbmd1YWdlcy5seSA9IGxpbHlwb25kXG4gIH0pKFByaXNtKVxufVxuIl0sIm5hbWVzIjpbInJlZnJhY3RvclNjaGVtZSIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwibGlseXBvbmQiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsInJlZ2lzdGVyIiwic2NoZW1lRXhwcmVzc2lvbiIsInNvdXJjZSIsInJlY3Vyc2l2ZW5lc3NMb2cyIiwiaSIsInJlcGxhY2UiLCJsYW5ndWFnZXMiLCJjb21tZW50IiwicGF0dGVybiIsIlJlZ0V4cCIsImxvb2tiZWhpbmQiLCJncmVlZHkiLCJpbnNpZGUiLCJzY2hlbWUiLCJhbGlhcyIsInB1bmN0dWF0aW9uIiwicmVzdCIsInN0cmluZyIsImtleXdvcmQiLCJvcGVyYXRvciIsIm51bWJlciIsImx5Il0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/lilypond.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/liquid.js":
/*!***********************************************!*\
  !*** ./node_modules/refractor/lang/liquid.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar refractorMarkupTemplating = __webpack_require__(/*! ./markup-templating.js */ \"(ssr)/./node_modules/refractor/lang/markup-templating.js\");\nmodule.exports = liquid;\nliquid.displayName = 'liquid';\nliquid.aliases = [];\nfunction liquid(Prism) {\n  Prism.register(refractorMarkupTemplating);\n  Prism.languages.liquid = {\n    comment: {\n      pattern: /(^\\{%\\s*comment\\s*%\\})[\\s\\S]+(?=\\{%\\s*endcomment\\s*%\\}$)/,\n      lookbehind: true\n    },\n    delimiter: {\n      pattern: /^\\{(?:\\{\\{|[%\\{])-?|-?(?:\\}\\}|[%\\}])\\}$/,\n      alias: 'punctuation'\n    },\n    string: {\n      pattern: /\"[^\"]*\"|'[^']*'/,\n      greedy: true\n    },\n    keyword: /\\b(?:as|assign|break|(?:end)?(?:capture|case|comment|for|form|if|paginate|raw|style|tablerow|unless)|continue|cycle|decrement|echo|else|elsif|in|include|increment|limit|liquid|offset|range|render|reversed|section|when|with)\\b/,\n    object: /\\b(?:address|all_country_option_tags|article|block|blog|cart|checkout|collection|color|country|country_option_tags|currency|current_page|current_tags|customer|customer_address|date|discount_allocation|discount_application|external_video|filter|filter_value|font|forloop|fulfillment|generic_file|gift_card|group|handle|image|line_item|link|linklist|localization|location|measurement|media|metafield|model|model_source|order|page|page_description|page_image|page_title|part|policy|product|product_option|recommendations|request|robots|routes|rule|script|search|selling_plan|selling_plan_allocation|selling_plan_group|shipping_method|shop|shop_locale|sitemap|store_availability|tax_line|template|theme|transaction|unit_price_measurement|user_agent|variant|video|video_source)\\b/,\n    \"function\": [{\n      pattern: /(\\|\\s*)\\w+/,\n      lookbehind: true,\n      alias: 'filter'\n    }, {\n      // array functions\n      pattern: /(\\.\\s*)(?:first|last|size)/,\n      lookbehind: true\n    }],\n    \"boolean\": /\\b(?:false|nil|true)\\b/,\n    range: {\n      pattern: /\\.\\./,\n      alias: 'operator'\n    },\n    // https://github.com/Shopify/liquid/blob/698f5e0d967423e013f6169d9111bd969bd78337/lib/liquid/lexer.rb#L21\n    number: /\\b\\d+(?:\\.\\d+)?\\b/,\n    operator: /[!=]=|<>|[<>]=?|[|?:=-]|\\b(?:and|contains(?=\\s)|or)\\b/,\n    punctuation: /[.,\\[\\]()]/,\n    empty: {\n      pattern: /\\bempty\\b/,\n      alias: 'keyword'\n    }\n  };\n  Prism.hooks.add('before-tokenize', function (env) {\n    var liquidPattern = /\\{%\\s*comment\\s*%\\}[\\s\\S]*?\\{%\\s*endcomment\\s*%\\}|\\{(?:%[\\s\\S]*?%|\\{\\{[\\s\\S]*?\\}\\}|\\{[\\s\\S]*?\\})\\}/g;\n    var insideRaw = false;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'liquid', liquidPattern, function (match) {\n      var tagMatch = /^\\{%-?\\s*(\\w+)/.exec(match);\n      if (tagMatch) {\n        var tag = tagMatch[1];\n        if (tag === 'raw' && !insideRaw) {\n          insideRaw = true;\n          return true;\n        } else if (tag === 'endraw') {\n          insideRaw = false;\n          return true;\n        }\n      }\n      return !insideRaw;\n    });\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'liquid');\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvbGlxdWlkLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUNaLElBQUlBLHlCQUF5QixHQUFHQyxtQkFBTyxDQUFDLHdGQUF3QixDQUFDO0FBQ2pFQyxNQUFNLENBQUNDLE9BQU8sR0FBR0MsTUFBTTtBQUN2QkEsTUFBTSxDQUFDQyxXQUFXLEdBQUcsUUFBUTtBQUM3QkQsTUFBTSxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNuQixTQUFTRixNQUFNQSxDQUFDRyxLQUFLLEVBQUU7RUFDckJBLEtBQUssQ0FBQ0MsUUFBUSxDQUFDUix5QkFBeUIsQ0FBQztFQUN6Q08sS0FBSyxDQUFDRSxTQUFTLENBQUNMLE1BQU0sR0FBRztJQUN2Qk0sT0FBTyxFQUFFO01BQ1BDLE9BQU8sRUFBRSwwREFBMEQ7TUFDbkVDLFVBQVUsRUFBRTtJQUNkLENBQUM7SUFDREMsU0FBUyxFQUFFO01BQ1RGLE9BQU8sRUFBRSx5Q0FBeUM7TUFDbERHLEtBQUssRUFBRTtJQUNULENBQUM7SUFDREMsTUFBTSxFQUFFO01BQ05KLE9BQU8sRUFBRSxpQkFBaUI7TUFDMUJLLE1BQU0sRUFBRTtJQUNWLENBQUM7SUFDREMsT0FBTyxFQUNMLG1PQUFtTztJQUNyT0MsTUFBTSxFQUNKLHd3QkFBd3dCO0lBQzF3QixZQUFVLENBQ1I7TUFDRVAsT0FBTyxFQUFFLFlBQVk7TUFDckJDLFVBQVUsRUFBRSxJQUFJO01BQ2hCRSxLQUFLLEVBQUU7SUFDVCxDQUFDLEVBQ0Q7TUFDRTtNQUNBSCxPQUFPLEVBQUUsNEJBQTRCO01BQ3JDQyxVQUFVLEVBQUU7SUFDZCxDQUFDLENBQ0Y7SUFDRCxXQUFTLHdCQUF3QjtJQUNqQ08sS0FBSyxFQUFFO01BQ0xSLE9BQU8sRUFBRSxNQUFNO01BQ2ZHLEtBQUssRUFBRTtJQUNULENBQUM7SUFDRDtJQUNBTSxNQUFNLEVBQUUsbUJBQW1CO0lBQzNCQyxRQUFRLEVBQUUsdURBQXVEO0lBQ2pFQyxXQUFXLEVBQUUsWUFBWTtJQUN6QkMsS0FBSyxFQUFFO01BQ0xaLE9BQU8sRUFBRSxXQUFXO01BQ3BCRyxLQUFLLEVBQUU7SUFDVDtFQUNGLENBQUM7RUFDRFAsS0FBSyxDQUFDaUIsS0FBSyxDQUFDQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsVUFBVUMsR0FBRyxFQUFFO0lBQ2hELElBQUlDLGFBQWEsR0FDZixxR0FBcUc7SUFDdkcsSUFBSUMsU0FBUyxHQUFHLEtBQUs7SUFDckJyQixLQUFLLENBQUNFLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDb0IsaUJBQWlCLENBQ3BESCxHQUFHLEVBQ0gsUUFBUSxFQUNSQyxhQUFhLEVBQ2IsVUFBVUcsS0FBSyxFQUFFO01BQ2YsSUFBSUMsUUFBUSxHQUFHLGdCQUFnQixDQUFDQyxJQUFJLENBQUNGLEtBQUssQ0FBQztNQUMzQyxJQUFJQyxRQUFRLEVBQUU7UUFDWixJQUFJRSxHQUFHLEdBQUdGLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDckIsSUFBSUUsR0FBRyxLQUFLLEtBQUssSUFBSSxDQUFDTCxTQUFTLEVBQUU7VUFDL0JBLFNBQVMsR0FBRyxJQUFJO1VBQ2hCLE9BQU8sSUFBSTtRQUNiLENBQUMsTUFBTSxJQUFJSyxHQUFHLEtBQUssUUFBUSxFQUFFO1VBQzNCTCxTQUFTLEdBQUcsS0FBSztVQUNqQixPQUFPLElBQUk7UUFDYjtNQUNGO01BQ0EsT0FBTyxDQUFDQSxTQUFTO0lBQ25CLENBQ0YsQ0FBQztFQUNILENBQUMsQ0FBQztFQUNGckIsS0FBSyxDQUFDaUIsS0FBSyxDQUFDQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsVUFBVUMsR0FBRyxFQUFFO0lBQy9DbkIsS0FBSyxDQUFDRSxTQUFTLENBQUMsbUJBQW1CLENBQUMsQ0FBQ3lCLG9CQUFvQixDQUFDUixHQUFHLEVBQUUsUUFBUSxDQUFDO0VBQzFFLENBQUMsQ0FBQztBQUNKIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcbGlxdWlkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xudmFyIHJlZnJhY3Rvck1hcmt1cFRlbXBsYXRpbmcgPSByZXF1aXJlKCcuL21hcmt1cC10ZW1wbGF0aW5nLmpzJylcbm1vZHVsZS5leHBvcnRzID0gbGlxdWlkXG5saXF1aWQuZGlzcGxheU5hbWUgPSAnbGlxdWlkJ1xubGlxdWlkLmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24gbGlxdWlkKFByaXNtKSB7XG4gIFByaXNtLnJlZ2lzdGVyKHJlZnJhY3Rvck1hcmt1cFRlbXBsYXRpbmcpXG4gIFByaXNtLmxhbmd1YWdlcy5saXF1aWQgPSB7XG4gICAgY29tbWVudDoge1xuICAgICAgcGF0dGVybjogLyheXFx7JVxccypjb21tZW50XFxzKiVcXH0pW1xcc1xcU10rKD89XFx7JVxccyplbmRjb21tZW50XFxzKiVcXH0kKS8sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgfSxcbiAgICBkZWxpbWl0ZXI6IHtcbiAgICAgIHBhdHRlcm46IC9eXFx7KD86XFx7XFx7fFslXFx7XSktP3wtPyg/OlxcfVxcfXxbJVxcfV0pXFx9JC8sXG4gICAgICBhbGlhczogJ3B1bmN0dWF0aW9uJ1xuICAgIH0sXG4gICAgc3RyaW5nOiB7XG4gICAgICBwYXR0ZXJuOiAvXCJbXlwiXSpcInwnW14nXSonLyxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAga2V5d29yZDpcbiAgICAgIC9cXGIoPzphc3xhc3NpZ258YnJlYWt8KD86ZW5kKT8oPzpjYXB0dXJlfGNhc2V8Y29tbWVudHxmb3J8Zm9ybXxpZnxwYWdpbmF0ZXxyYXd8c3R5bGV8dGFibGVyb3d8dW5sZXNzKXxjb250aW51ZXxjeWNsZXxkZWNyZW1lbnR8ZWNob3xlbHNlfGVsc2lmfGlufGluY2x1ZGV8aW5jcmVtZW50fGxpbWl0fGxpcXVpZHxvZmZzZXR8cmFuZ2V8cmVuZGVyfHJldmVyc2VkfHNlY3Rpb258d2hlbnx3aXRoKVxcYi8sXG4gICAgb2JqZWN0OlxuICAgICAgL1xcYig/OmFkZHJlc3N8YWxsX2NvdW50cnlfb3B0aW9uX3RhZ3N8YXJ0aWNsZXxibG9ja3xibG9nfGNhcnR8Y2hlY2tvdXR8Y29sbGVjdGlvbnxjb2xvcnxjb3VudHJ5fGNvdW50cnlfb3B0aW9uX3RhZ3N8Y3VycmVuY3l8Y3VycmVudF9wYWdlfGN1cnJlbnRfdGFnc3xjdXN0b21lcnxjdXN0b21lcl9hZGRyZXNzfGRhdGV8ZGlzY291bnRfYWxsb2NhdGlvbnxkaXNjb3VudF9hcHBsaWNhdGlvbnxleHRlcm5hbF92aWRlb3xmaWx0ZXJ8ZmlsdGVyX3ZhbHVlfGZvbnR8Zm9ybG9vcHxmdWxmaWxsbWVudHxnZW5lcmljX2ZpbGV8Z2lmdF9jYXJkfGdyb3VwfGhhbmRsZXxpbWFnZXxsaW5lX2l0ZW18bGlua3xsaW5rbGlzdHxsb2NhbGl6YXRpb258bG9jYXRpb258bWVhc3VyZW1lbnR8bWVkaWF8bWV0YWZpZWxkfG1vZGVsfG1vZGVsX3NvdXJjZXxvcmRlcnxwYWdlfHBhZ2VfZGVzY3JpcHRpb258cGFnZV9pbWFnZXxwYWdlX3RpdGxlfHBhcnR8cG9saWN5fHByb2R1Y3R8cHJvZHVjdF9vcHRpb258cmVjb21tZW5kYXRpb25zfHJlcXVlc3R8cm9ib3RzfHJvdXRlc3xydWxlfHNjcmlwdHxzZWFyY2h8c2VsbGluZ19wbGFufHNlbGxpbmdfcGxhbl9hbGxvY2F0aW9ufHNlbGxpbmdfcGxhbl9ncm91cHxzaGlwcGluZ19tZXRob2R8c2hvcHxzaG9wX2xvY2FsZXxzaXRlbWFwfHN0b3JlX2F2YWlsYWJpbGl0eXx0YXhfbGluZXx0ZW1wbGF0ZXx0aGVtZXx0cmFuc2FjdGlvbnx1bml0X3ByaWNlX21lYXN1cmVtZW50fHVzZXJfYWdlbnR8dmFyaWFudHx2aWRlb3x2aWRlb19zb3VyY2UpXFxiLyxcbiAgICBmdW5jdGlvbjogW1xuICAgICAge1xuICAgICAgICBwYXR0ZXJuOiAvKFxcfFxccyopXFx3Ky8sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGFsaWFzOiAnZmlsdGVyJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgLy8gYXJyYXkgZnVuY3Rpb25zXG4gICAgICAgIHBhdHRlcm46IC8oXFwuXFxzKikoPzpmaXJzdHxsYXN0fHNpemUpLyxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgfVxuICAgIF0sXG4gICAgYm9vbGVhbjogL1xcYig/OmZhbHNlfG5pbHx0cnVlKVxcYi8sXG4gICAgcmFuZ2U6IHtcbiAgICAgIHBhdHRlcm46IC9cXC5cXC4vLFxuICAgICAgYWxpYXM6ICdvcGVyYXRvcidcbiAgICB9LFxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9TaG9waWZ5L2xpcXVpZC9ibG9iLzY5OGY1ZTBkOTY3NDIzZTAxM2Y2MTY5ZDkxMTFiZDk2OWJkNzgzMzcvbGliL2xpcXVpZC9sZXhlci5yYiNMMjFcbiAgICBudW1iZXI6IC9cXGJcXGQrKD86XFwuXFxkKyk/XFxiLyxcbiAgICBvcGVyYXRvcjogL1shPV09fDw+fFs8Pl09P3xbfD86PS1dfFxcYig/OmFuZHxjb250YWlucyg/PVxccyl8b3IpXFxiLyxcbiAgICBwdW5jdHVhdGlvbjogL1suLFxcW1xcXSgpXS8sXG4gICAgZW1wdHk6IHtcbiAgICAgIHBhdHRlcm46IC9cXGJlbXB0eVxcYi8sXG4gICAgICBhbGlhczogJ2tleXdvcmQnXG4gICAgfVxuICB9XG4gIFByaXNtLmhvb2tzLmFkZCgnYmVmb3JlLXRva2VuaXplJywgZnVuY3Rpb24gKGVudikge1xuICAgIHZhciBsaXF1aWRQYXR0ZXJuID1cbiAgICAgIC9cXHslXFxzKmNvbW1lbnRcXHMqJVxcfVtcXHNcXFNdKj9cXHslXFxzKmVuZGNvbW1lbnRcXHMqJVxcfXxcXHsoPzolW1xcc1xcU10qPyV8XFx7XFx7W1xcc1xcU10qP1xcfVxcfXxcXHtbXFxzXFxTXSo/XFx9KVxcfS9nXG4gICAgdmFyIGluc2lkZVJhdyA9IGZhbHNlXG4gICAgUHJpc20ubGFuZ3VhZ2VzWydtYXJrdXAtdGVtcGxhdGluZyddLmJ1aWxkUGxhY2Vob2xkZXJzKFxuICAgICAgZW52LFxuICAgICAgJ2xpcXVpZCcsXG4gICAgICBsaXF1aWRQYXR0ZXJuLFxuICAgICAgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgIHZhciB0YWdNYXRjaCA9IC9eXFx7JS0/XFxzKihcXHcrKS8uZXhlYyhtYXRjaClcbiAgICAgICAgaWYgKHRhZ01hdGNoKSB7XG4gICAgICAgICAgdmFyIHRhZyA9IHRhZ01hdGNoWzFdXG4gICAgICAgICAgaWYgKHRhZyA9PT0gJ3JhdycgJiYgIWluc2lkZVJhdykge1xuICAgICAgICAgICAgaW5zaWRlUmF3ID0gdHJ1ZVxuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICB9IGVsc2UgaWYgKHRhZyA9PT0gJ2VuZHJhdycpIHtcbiAgICAgICAgICAgIGluc2lkZVJhdyA9IGZhbHNlXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gIWluc2lkZVJhd1xuICAgICAgfVxuICAgIClcbiAgfSlcbiAgUHJpc20uaG9va3MuYWRkKCdhZnRlci10b2tlbml6ZScsIGZ1bmN0aW9uIChlbnYpIHtcbiAgICBQcmlzbS5sYW5ndWFnZXNbJ21hcmt1cC10ZW1wbGF0aW5nJ10udG9rZW5pemVQbGFjZWhvbGRlcnMoZW52LCAnbGlxdWlkJylcbiAgfSlcbn1cbiJdLCJuYW1lcyI6WyJyZWZyYWN0b3JNYXJrdXBUZW1wbGF0aW5nIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJsaXF1aWQiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsInJlZ2lzdGVyIiwibGFuZ3VhZ2VzIiwiY29tbWVudCIsInBhdHRlcm4iLCJsb29rYmVoaW5kIiwiZGVsaW1pdGVyIiwiYWxpYXMiLCJzdHJpbmciLCJncmVlZHkiLCJrZXl3b3JkIiwib2JqZWN0IiwicmFuZ2UiLCJudW1iZXIiLCJvcGVyYXRvciIsInB1bmN0dWF0aW9uIiwiZW1wdHkiLCJob29rcyIsImFkZCIsImVudiIsImxpcXVpZFBhdHRlcm4iLCJpbnNpZGVSYXciLCJidWlsZFBsYWNlaG9sZGVycyIsIm1hdGNoIiwidGFnTWF0Y2giLCJleGVjIiwidGFnIiwidG9rZW5pemVQbGFjZWhvbGRlcnMiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/liquid.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/lisp.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/lisp.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = lisp;\nlisp.displayName = 'lisp';\nlisp.aliases = [];\nfunction lisp(Prism) {\n  ;\n  (function (Prism) {\n    /**\n     * Functions to construct regular expressions\n     * e.g. (interactive ... or (interactive)\n     *\n     * @param {string} name\n     * @returns {RegExp}\n     */\n    function simple_form(name) {\n      return RegExp(/(\\()/.source + '(?:' + name + ')' + /(?=[\\s\\)])/.source);\n    }\n    /**\n     * booleans and numbers\n     *\n     * @param {string} pattern\n     * @returns {RegExp}\n     */\n    function primitive(pattern) {\n      return RegExp(/([\\s([])/.source + '(?:' + pattern + ')' + /(?=[\\s)])/.source);\n    } // Patterns in regular expressions\n    // Symbol name. See https://www.gnu.org/software/emacs/manual/html_node/elisp/Symbol-Type.html\n    // & and : are excluded as they are usually used for special purposes\n    var symbol = /(?!\\d)[-+*/~!@$%^=<>{}\\w]+/.source; // symbol starting with & used in function arguments\n    var marker = '&' + symbol; // Open parenthesis for look-behind\n    var par = '(\\\\()';\n    var endpar = '(?=\\\\))'; // End the pattern with look-ahead space\n    var space = '(?=\\\\s)';\n    var nestedPar = /(?:[^()]|\\((?:[^()]|\\((?:[^()]|\\((?:[^()]|\\((?:[^()]|\\([^()]*\\))*\\))*\\))*\\))*\\))*/.source;\n    var language = {\n      // Three or four semicolons are considered a heading.\n      // See https://www.gnu.org/software/emacs/manual/html_node/elisp/Comment-Tips.html\n      heading: {\n        pattern: /;;;.*/,\n        alias: ['comment', 'title']\n      },\n      comment: /;.*/,\n      string: {\n        pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n        greedy: true,\n        inside: {\n          argument: /[-A-Z]+(?=[.,\\s])/,\n          symbol: RegExp('`' + symbol + \"'\")\n        }\n      },\n      'quoted-symbol': {\n        pattern: RegExp(\"#?'\" + symbol),\n        alias: ['variable', 'symbol']\n      },\n      'lisp-property': {\n        pattern: RegExp(':' + symbol),\n        alias: 'property'\n      },\n      splice: {\n        pattern: RegExp(',@?' + symbol),\n        alias: ['symbol', 'variable']\n      },\n      keyword: [{\n        pattern: RegExp(par + '(?:and|(?:cl-)?letf|cl-loop|cond|cons|error|if|(?:lexical-)?let\\\\*?|message|not|null|or|provide|require|setq|unless|use-package|when|while)' + space),\n        lookbehind: true\n      }, {\n        pattern: RegExp(par + '(?:append|by|collect|concat|do|finally|for|in|return)' + space),\n        lookbehind: true\n      }],\n      declare: {\n        pattern: simple_form(/declare/.source),\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      interactive: {\n        pattern: simple_form(/interactive/.source),\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      \"boolean\": {\n        pattern: primitive(/nil|t/.source),\n        lookbehind: true\n      },\n      number: {\n        pattern: primitive(/[-+]?\\d+(?:\\.\\d*)?/.source),\n        lookbehind: true\n      },\n      defvar: {\n        pattern: RegExp(par + 'def(?:const|custom|group|var)\\\\s+' + symbol),\n        lookbehind: true,\n        inside: {\n          keyword: /^def[a-z]+/,\n          variable: RegExp(symbol)\n        }\n      },\n      defun: {\n        pattern: RegExp(par + /(?:cl-)?(?:defmacro|defun\\*?)\\s+/.source + symbol + /\\s+\\(/.source + nestedPar + /\\)/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          keyword: /^(?:cl-)?def\\S+/,\n          // See below, this property needs to be defined later so that it can\n          // reference the language object.\n          arguments: null,\n          \"function\": {\n            pattern: RegExp('(^\\\\s)' + symbol),\n            lookbehind: true\n          },\n          punctuation: /[()]/\n        }\n      },\n      lambda: {\n        pattern: RegExp(par + 'lambda\\\\s+\\\\(\\\\s*(?:&?' + symbol + '(?:\\\\s+&?' + symbol + ')*\\\\s*)?\\\\)'),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          keyword: /^lambda/,\n          // See below, this property needs to be defined later so that it can\n          // reference the language object.\n          arguments: null,\n          punctuation: /[()]/\n        }\n      },\n      car: {\n        pattern: RegExp(par + symbol),\n        lookbehind: true\n      },\n      punctuation: [\n      // open paren, brackets, and close paren\n      /(?:['`,]?\\(|[)\\[\\]])/,\n      // cons\n      {\n        pattern: /(\\s)\\.(?=\\s)/,\n        lookbehind: true\n      }]\n    };\n    var arg = {\n      'lisp-marker': RegExp(marker),\n      varform: {\n        pattern: RegExp(/\\(/.source + symbol + /\\s+(?=\\S)/.source + nestedPar + /\\)/.source),\n        inside: language\n      },\n      argument: {\n        pattern: RegExp(/(^|[\\s(])/.source + symbol),\n        lookbehind: true,\n        alias: 'variable'\n      },\n      rest: language\n    };\n    var forms = '\\\\S+(?:\\\\s+\\\\S+)*';\n    var arglist = {\n      pattern: RegExp(par + nestedPar + endpar),\n      lookbehind: true,\n      inside: {\n        'rest-vars': {\n          pattern: RegExp('&(?:body|rest)\\\\s+' + forms),\n          inside: arg\n        },\n        'other-marker-vars': {\n          pattern: RegExp('&(?:aux|optional)\\\\s+' + forms),\n          inside: arg\n        },\n        keys: {\n          pattern: RegExp('&key\\\\s+' + forms + '(?:\\\\s+&allow-other-keys)?'),\n          inside: arg\n        },\n        argument: {\n          pattern: RegExp(symbol),\n          alias: 'variable'\n        },\n        punctuation: /[()]/\n      }\n    };\n    language['lambda'].inside.arguments = arglist;\n    language['defun'].inside.arguments = Prism.util.clone(arglist);\n    language['defun'].inside.arguments.inside.sublist = arglist;\n    Prism.languages.lisp = language;\n    Prism.languages.elisp = language;\n    Prism.languages.emacs = language;\n    Prism.languages['emacs-lisp'] = language;\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/lisp.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/livescript.js":
/*!***************************************************!*\
  !*** ./node_modules/refractor/lang/livescript.js ***!
  \***************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = livescript;\nlivescript.displayName = 'livescript';\nlivescript.aliases = [];\nfunction livescript(Prism) {\n  Prism.languages.livescript = {\n    comment: [{\n      pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n      lookbehind: true\n    }, {\n      pattern: /(^|[^\\\\])#.*/,\n      lookbehind: true\n    }],\n    'interpolated-string': {\n      /* Look-behind and look-ahead prevents wrong behavior of the greedy pattern\n       * forcing it to match \"\"\"-quoted string when it would otherwise match \"-quoted first. */\n      pattern: /(^|[^\"])(\"\"\"|\")(?:\\\\[\\s\\S]|(?!\\2)[^\\\\])*\\2(?!\")/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        variable: {\n          pattern: /(^|[^\\\\])#[a-z_](?:-?[a-z]|[\\d_])*/m,\n          lookbehind: true\n        },\n        interpolation: {\n          pattern: /(^|[^\\\\])#\\{[^}]+\\}/m,\n          lookbehind: true,\n          inside: {\n            'interpolation-punctuation': {\n              pattern: /^#\\{|\\}$/,\n              alias: 'variable'\n            } // See rest below\n          }\n        },\n\n        string: /[\\s\\S]+/\n      }\n    },\n    string: [{\n      pattern: /('''|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n      greedy: true\n    }, {\n      pattern: /<\\[[\\s\\S]*?\\]>/,\n      greedy: true\n    }, /\\\\[^\\s,;\\])}]+/],\n    regex: [{\n      pattern: /\\/\\/(?:\\[[^\\r\\n\\]]*\\]|\\\\.|(?!\\/\\/)[^\\\\\\[])+\\/\\/[gimyu]{0,5}/,\n      greedy: true,\n      inside: {\n        comment: {\n          pattern: /(^|[^\\\\])#.*/,\n          lookbehind: true\n        }\n      }\n    }, {\n      pattern: /\\/(?:\\[[^\\r\\n\\]]*\\]|\\\\.|[^/\\\\\\r\\n\\[])+\\/[gimyu]{0,5}/,\n      greedy: true\n    }],\n    keyword: {\n      pattern: /(^|(?!-).)\\b(?:break|case|catch|class|const|continue|default|do|else|extends|fallthrough|finally|for(?: ever)?|function|if|implements|it|let|loop|new|null|otherwise|own|return|super|switch|that|then|this|throw|try|unless|until|var|void|when|while|yield)(?!-)\\b/m,\n      lookbehind: true\n    },\n    'keyword-operator': {\n      pattern: /(^|[^-])\\b(?:(?:delete|require|typeof)!|(?:and|by|delete|export|from|import(?: all)?|in|instanceof|is(?: not|nt)?|not|of|or|til|to|typeof|with|xor)(?!-)\\b)/m,\n      lookbehind: true,\n      alias: 'operator'\n    },\n    \"boolean\": {\n      pattern: /(^|[^-])\\b(?:false|no|off|on|true|yes)(?!-)\\b/m,\n      lookbehind: true\n    },\n    argument: {\n      // Don't match .&. nor &&\n      pattern: /(^|(?!\\.&\\.)[^&])&(?!&)\\d*/m,\n      lookbehind: true,\n      alias: 'variable'\n    },\n    number: /\\b(?:\\d+~[\\da-z]+|\\d[\\d_]*(?:\\.\\d[\\d_]*)?(?:[a-z]\\w*)?)/i,\n    identifier: /[a-z_](?:-?[a-z]|[\\d_])*/i,\n    operator: [\n    // Spaced .\n    {\n      pattern: /( )\\.(?= )/,\n      lookbehind: true\n    },\n    // Full list, in order:\n    // .= .~ .. ...\n    // .&. .^. .<<. .>>. .>>>.\n    // := :: ::=\n    // &&\n    // || |>\n    // < << <<< <<<<\n    // <- <-- <-! <--!\n    // <~ <~~ <~! <~~!\n    // <| <= <?\n    // > >> >= >?\n    // - -- -> -->\n    // + ++\n    // @ @@\n    // % %%\n    // * **\n    // ! != !~=\n    // !~> !~~>\n    // !-> !-->\n    // ~ ~> ~~> ~=\n    // = ==\n    // ^ ^^\n    // / ?\n    /\\.(?:[=~]|\\.\\.?)|\\.(?:[&|^]|<<|>>>?)\\.|:(?:=|:=?)|&&|\\|[|>]|<(?:<<?<?|--?!?|~~?!?|[|=?])?|>[>=?]?|-(?:->?|>)?|\\+\\+?|@@?|%%?|\\*\\*?|!(?:~?=|--?>|~?~>)?|~(?:~?>|=)?|==?|\\^\\^?|[\\/?]/],\n    punctuation: /[(){}\\[\\]|.,:;`]/\n  };\n  Prism.languages.livescript['interpolated-string'].inside['interpolation'].inside.rest = Prism.languages.livescript;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/livescript.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/llvm.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/llvm.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = llvm;\nllvm.displayName = 'llvm';\nllvm.aliases = [];\nfunction llvm(Prism) {\n  ;\n  (function (Prism) {\n    Prism.languages.llvm = {\n      comment: /;.*/,\n      string: {\n        pattern: /\"[^\"]*\"/,\n        greedy: true\n      },\n      \"boolean\": /\\b(?:false|true)\\b/,\n      variable: /[%@!#](?:(?!\\d)(?:[-$.\\w]|\\\\[a-f\\d]{2})+|\\d+)/i,\n      label: /(?!\\d)(?:[-$.\\w]|\\\\[a-f\\d]{2})+:/i,\n      type: {\n        pattern: /\\b(?:double|float|fp128|half|i[1-9]\\d*|label|metadata|ppc_fp128|token|void|x86_fp80|x86_mmx)\\b/,\n        alias: 'class-name'\n      },\n      keyword: /\\b[a-z_][a-z_0-9]*\\b/,\n      number: /[+-]?\\b\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?\\b|\\b0x[\\dA-Fa-f]+\\b|\\b0xK[\\dA-Fa-f]{20}\\b|\\b0x[ML][\\dA-Fa-f]{32}\\b|\\b0xH[\\dA-Fa-f]{4}\\b/,\n      punctuation: /[{}[\\];(),.!*=<>]/\n    };\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvbGx2bS5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLElBQUk7QUFDckJBLElBQUksQ0FBQ0MsV0FBVyxHQUFHLE1BQU07QUFDekJELElBQUksQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDakIsU0FBU0YsSUFBSUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ25CO0VBQUMsQ0FBQyxVQUFVQSxLQUFLLEVBQUU7SUFDakJBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixJQUFJLEdBQUc7TUFDckJLLE9BQU8sRUFBRSxLQUFLO01BQ2RDLE1BQU0sRUFBRTtRQUNOQyxPQUFPLEVBQUUsU0FBUztRQUNsQkMsTUFBTSxFQUFFO01BQ1YsQ0FBQztNQUNELFdBQVMsb0JBQW9CO01BQzdCQyxRQUFRLEVBQUUsZ0RBQWdEO01BQzFEQyxLQUFLLEVBQUUsbUNBQW1DO01BQzFDQyxJQUFJLEVBQUU7UUFDSkosT0FBTyxFQUNMLGdHQUFnRztRQUNsR0ssS0FBSyxFQUFFO01BQ1QsQ0FBQztNQUNEQyxPQUFPLEVBQUUsc0JBQXNCO01BQy9CQyxNQUFNLEVBQ0osK0hBQStIO01BQ2pJQyxXQUFXLEVBQUU7SUFDZixDQUFDO0VBQ0gsQ0FBQyxFQUFFWixLQUFLLENBQUM7QUFDWCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXGxsdm0uanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gbGx2bVxubGx2bS5kaXNwbGF5TmFtZSA9ICdsbHZtJ1xubGx2bS5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIGxsdm0oUHJpc20pIHtcbiAgOyhmdW5jdGlvbiAoUHJpc20pIHtcbiAgICBQcmlzbS5sYW5ndWFnZXMubGx2bSA9IHtcbiAgICAgIGNvbW1lbnQ6IC87LiovLFxuICAgICAgc3RyaW5nOiB7XG4gICAgICAgIHBhdHRlcm46IC9cIlteXCJdKlwiLyxcbiAgICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgICB9LFxuICAgICAgYm9vbGVhbjogL1xcYig/OmZhbHNlfHRydWUpXFxiLyxcbiAgICAgIHZhcmlhYmxlOiAvWyVAISNdKD86KD8hXFxkKSg/OlstJC5cXHddfFxcXFxbYS1mXFxkXXsyfSkrfFxcZCspL2ksXG4gICAgICBsYWJlbDogLyg/IVxcZCkoPzpbLSQuXFx3XXxcXFxcW2EtZlxcZF17Mn0pKzovaSxcbiAgICAgIHR5cGU6IHtcbiAgICAgICAgcGF0dGVybjpcbiAgICAgICAgICAvXFxiKD86ZG91YmxlfGZsb2F0fGZwMTI4fGhhbGZ8aVsxLTldXFxkKnxsYWJlbHxtZXRhZGF0YXxwcGNfZnAxMjh8dG9rZW58dm9pZHx4ODZfZnA4MHx4ODZfbW14KVxcYi8sXG4gICAgICAgIGFsaWFzOiAnY2xhc3MtbmFtZSdcbiAgICAgIH0sXG4gICAgICBrZXl3b3JkOiAvXFxiW2Etel9dW2Etel8wLTldKlxcYi8sXG4gICAgICBudW1iZXI6XG4gICAgICAgIC9bKy1dP1xcYlxcZCsoPzpcXC5cXGQrKT8oPzpbZUVdWystXT9cXGQrKT9cXGJ8XFxiMHhbXFxkQS1GYS1mXStcXGJ8XFxiMHhLW1xcZEEtRmEtZl17MjB9XFxifFxcYjB4W01MXVtcXGRBLUZhLWZdezMyfVxcYnxcXGIweEhbXFxkQS1GYS1mXXs0fVxcYi8sXG4gICAgICBwdW5jdHVhdGlvbjogL1t7fVtcXF07KCksLiEqPTw+XS9cbiAgICB9XG4gIH0pKFByaXNtKVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJsbHZtIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJjb21tZW50Iiwic3RyaW5nIiwicGF0dGVybiIsImdyZWVkeSIsInZhcmlhYmxlIiwibGFiZWwiLCJ0eXBlIiwiYWxpYXMiLCJrZXl3b3JkIiwibnVtYmVyIiwicHVuY3R1YXRpb24iXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/llvm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/log.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/log.js ***!
  \********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = log;\nlog.displayName = 'log';\nlog.aliases = [];\nfunction log(Prism) {\n  // This is a language definition for generic log files.\n  // Since there is no one log format, this language definition has to support all formats to some degree.\n  //\n  // Based on https://github.com/MTDL9/vim-log-highlighting\n  Prism.languages.log = {\n    string: {\n      // Single-quoted strings must not be confused with plain text. E.g. Can't isn't Susan's Chris' toy\n      pattern: /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?![st] | \\w)(?:[^'\\\\\\r\\n]|\\\\.)*'/,\n      greedy: true\n    },\n    exception: {\n      pattern: /(^|[^\\w.])[a-z][\\w.]*(?:Error|Exception):.*(?:(?:\\r\\n?|\\n)[ \\t]*(?:at[ \\t].+|\\.{3}.*|Caused by:.*))+(?:(?:\\r\\n?|\\n)[ \\t]*\\.\\.\\. .*)?/,\n      lookbehind: true,\n      greedy: true,\n      alias: ['javastacktrace', 'language-javastacktrace'],\n      inside: Prism.languages['javastacktrace'] || {\n        keyword: /\\bat\\b/,\n        \"function\": /[a-z_][\\w$]*(?=\\()/,\n        punctuation: /[.:()]/\n      }\n    },\n    level: [{\n      pattern: /\\b(?:ALERT|CRIT|CRITICAL|EMERG|EMERGENCY|ERR|ERROR|FAILURE|FATAL|SEVERE)\\b/,\n      alias: ['error', 'important']\n    }, {\n      pattern: /\\b(?:WARN|WARNING|WRN)\\b/,\n      alias: ['warning', 'important']\n    }, {\n      pattern: /\\b(?:DISPLAY|INF|INFO|NOTICE|STATUS)\\b/,\n      alias: ['info', 'keyword']\n    }, {\n      pattern: /\\b(?:DBG|DEBUG|FINE)\\b/,\n      alias: ['debug', 'keyword']\n    }, {\n      pattern: /\\b(?:FINER|FINEST|TRACE|TRC|VERBOSE|VRB)\\b/,\n      alias: ['trace', 'comment']\n    }],\n    property: {\n      pattern: /((?:^|[\\]|])[ \\t]*)[a-z_](?:[\\w-]|\\b\\/\\b)*(?:[. ]\\(?\\w(?:[\\w-]|\\b\\/\\b)*\\)?)*:(?=\\s)/im,\n      lookbehind: true\n    },\n    separator: {\n      pattern: /(^|[^-+])-{3,}|={3,}|\\*{3,}|- - /m,\n      lookbehind: true,\n      alias: 'comment'\n    },\n    url: /\\b(?:file|ftp|https?):\\/\\/[^\\s|,;'\"]*[^\\s|,;'\">.]/,\n    email: {\n      pattern: /(^|\\s)[-\\w+.]+@[a-z][a-z0-9-]*(?:\\.[a-z][a-z0-9-]*)+(?=\\s)/,\n      lookbehind: true,\n      alias: 'url'\n    },\n    'ip-address': {\n      pattern: /\\b(?:\\d{1,3}(?:\\.\\d{1,3}){3})\\b/,\n      alias: 'constant'\n    },\n    'mac-address': {\n      pattern: /\\b[a-f0-9]{2}(?::[a-f0-9]{2}){5}\\b/i,\n      alias: 'constant'\n    },\n    domain: {\n      pattern: /(^|\\s)[a-z][a-z0-9-]*(?:\\.[a-z][a-z0-9-]*)*\\.[a-z][a-z0-9-]+(?=\\s)/,\n      lookbehind: true,\n      alias: 'constant'\n    },\n    uuid: {\n      pattern: /\\b[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\\b/i,\n      alias: 'constant'\n    },\n    hash: {\n      pattern: /\\b(?:[a-f0-9]{32}){1,2}\\b/i,\n      alias: 'constant'\n    },\n    'file-path': {\n      pattern: /\\b[a-z]:[\\\\/][^\\s|,;:(){}\\[\\]\"']+|(^|[\\s:\\[\\](>|])\\.{0,2}\\/\\w[^\\s|,;:(){}\\[\\]\"']*/i,\n      lookbehind: true,\n      greedy: true,\n      alias: 'string'\n    },\n    date: {\n      pattern: RegExp(/\\b\\d{4}[-/]\\d{2}[-/]\\d{2}(?:T(?=\\d{1,2}:)|(?=\\s\\d{1,2}:))/.source + '|' + /\\b\\d{1,4}[-/ ](?:\\d{1,2}|Apr|Aug|Dec|Feb|Jan|Jul|Jun|Mar|May|Nov|Oct|Sep)[-/ ]\\d{2,4}T?\\b/.source + '|' + /\\b(?:(?:Fri|Mon|Sat|Sun|Thu|Tue|Wed)(?:\\s{1,2}(?:Apr|Aug|Dec|Feb|Jan|Jul|Jun|Mar|May|Nov|Oct|Sep))?|Apr|Aug|Dec|Feb|Jan|Jul|Jun|Mar|May|Nov|Oct|Sep)\\s{1,2}\\d{1,2}\\b/.source, 'i'),\n      alias: 'number'\n    },\n    time: {\n      pattern: /\\b\\d{1,2}:\\d{1,2}:\\d{1,2}(?:[.,:]\\d+)?(?:\\s?[+-]\\d{2}:?\\d{2}|Z)?\\b/,\n      alias: 'number'\n    },\n    \"boolean\": /\\b(?:false|null|true)\\b/i,\n    number: {\n      pattern: /(^|[^.\\w])(?:0x[a-f0-9]+|0o[0-7]+|0b[01]+|v?\\d[\\da-f]*(?:\\.\\d+)*(?:e[+-]?\\d+)?[a-z]{0,3}\\b)\\b(?!\\.\\w)/i,\n      lookbehind: true\n    },\n    operator: /[;:?<=>~/@!$%&+\\-|^(){}*#]/,\n    punctuation: /[\\[\\].,]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/log.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/lolcode.js":
/*!************************************************!*\
  !*** ./node_modules/refractor/lang/lolcode.js ***!
  \************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = lolcode;\nlolcode.displayName = 'lolcode';\nlolcode.aliases = [];\nfunction lolcode(Prism) {\n  Prism.languages.lolcode = {\n    comment: [/\\bOBTW\\s[\\s\\S]*?\\sTLDR\\b/, /\\bBTW.+/],\n    string: {\n      pattern: /\"(?::.|[^\":])*\"/,\n      inside: {\n        variable: /:\\{[^}]+\\}/,\n        symbol: [/:\\([a-f\\d]+\\)/i, /:\\[[^\\]]+\\]/, /:[)>o\":]/]\n      },\n      greedy: true\n    },\n    number: /(?:\\B-)?(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)/,\n    symbol: {\n      pattern: /(^|\\s)(?:A )?(?:BUKKIT|NOOB|NUMBAR|NUMBR|TROOF|YARN)(?=\\s|,|$)/,\n      lookbehind: true,\n      inside: {\n        keyword: /A(?=\\s)/\n      }\n    },\n    label: {\n      pattern: /((?:^|\\s)(?:IM IN YR|IM OUTTA YR) )[a-zA-Z]\\w*/,\n      lookbehind: true,\n      alias: 'string'\n    },\n    \"function\": {\n      pattern: /((?:^|\\s)(?:HOW IZ I|I IZ|IZ) )[a-zA-Z]\\w*/,\n      lookbehind: true\n    },\n    keyword: [{\n      pattern: /(^|\\s)(?:AN|FOUND YR|GIMMEH|GTFO|HAI|HAS A|HOW IZ I|I HAS A|I IZ|IF U SAY SO|IM IN YR|IM OUTTA YR|IS NOW(?: A)?|ITZ(?: A)?|IZ|KTHX|KTHXBYE|LIEK(?: A)?|MAEK|MEBBE|MKAY|NERFIN|NO WAI|O HAI IM|O RLY\\?|OIC|OMG|OMGWTF|R|SMOOSH|SRS|TIL|UPPIN|VISIBLE|WILE|WTF\\?|YA RLY|YR)(?=\\s|,|$)/,\n      lookbehind: true\n    }, /'Z(?=\\s|,|$)/],\n    \"boolean\": {\n      pattern: /(^|\\s)(?:FAIL|WIN)(?=\\s|,|$)/,\n      lookbehind: true\n    },\n    variable: {\n      pattern: /(^|\\s)IT(?=\\s|,|$)/,\n      lookbehind: true\n    },\n    operator: {\n      pattern: /(^|\\s)(?:NOT|BOTH SAEM|DIFFRINT|(?:ALL|ANY|BIGGR|BOTH|DIFF|EITHER|MOD|PRODUKT|QUOSHUNT|SMALLR|SUM|WON) OF)(?=\\s|,|$)/,\n      lookbehind: true\n    },\n    punctuation: /\\.{3}|…|,|!/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvbG9sY29kZS5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLE9BQU87QUFDeEJBLE9BQU8sQ0FBQ0MsV0FBVyxHQUFHLFNBQVM7QUFDL0JELE9BQU8sQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDcEIsU0FBU0YsT0FBT0EsQ0FBQ0csS0FBSyxFQUFFO0VBQ3RCQSxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osT0FBTyxHQUFHO0lBQ3hCSyxPQUFPLEVBQUUsQ0FBQywwQkFBMEIsRUFBRSxTQUFTLENBQUM7SUFDaERDLE1BQU0sRUFBRTtNQUNOQyxPQUFPLEVBQUUsaUJBQWlCO01BQzFCQyxNQUFNLEVBQUU7UUFDTkMsUUFBUSxFQUFFLFlBQVk7UUFDdEJDLE1BQU0sRUFBRSxDQUFDLGdCQUFnQixFQUFFLGFBQWEsRUFBRSxVQUFVO01BQ3RELENBQUM7TUFDREMsTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUNEQyxNQUFNLEVBQUUscUNBQXFDO0lBQzdDRixNQUFNLEVBQUU7TUFDTkgsT0FBTyxFQUFFLGdFQUFnRTtNQUN6RU0sVUFBVSxFQUFFLElBQUk7TUFDaEJMLE1BQU0sRUFBRTtRQUNOTSxPQUFPLEVBQUU7TUFDWDtJQUNGLENBQUM7SUFDREMsS0FBSyxFQUFFO01BQ0xSLE9BQU8sRUFBRSxnREFBZ0Q7TUFDekRNLFVBQVUsRUFBRSxJQUFJO01BQ2hCRyxLQUFLLEVBQUU7SUFDVCxDQUFDO0lBQ0QsWUFBVTtNQUNSVCxPQUFPLEVBQUUsNENBQTRDO01BQ3JETSxVQUFVLEVBQUU7SUFDZCxDQUFDO0lBQ0RDLE9BQU8sRUFBRSxDQUNQO01BQ0VQLE9BQU8sRUFDTCxxUkFBcVI7TUFDdlJNLFVBQVUsRUFBRTtJQUNkLENBQUMsRUFDRCxjQUFjLENBQ2Y7SUFDRCxXQUFTO01BQ1BOLE9BQU8sRUFBRSw4QkFBOEI7TUFDdkNNLFVBQVUsRUFBRTtJQUNkLENBQUM7SUFDREosUUFBUSxFQUFFO01BQ1JGLE9BQU8sRUFBRSxvQkFBb0I7TUFDN0JNLFVBQVUsRUFBRTtJQUNkLENBQUM7SUFDREksUUFBUSxFQUFFO01BQ1JWLE9BQU8sRUFDTCxzSEFBc0g7TUFDeEhNLFVBQVUsRUFBRTtJQUNkLENBQUM7SUFDREssV0FBVyxFQUFFO0VBQ2YsQ0FBQztBQUNIIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcbG9sY29kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBsb2xjb2RlXG5sb2xjb2RlLmRpc3BsYXlOYW1lID0gJ2xvbGNvZGUnXG5sb2xjb2RlLmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24gbG9sY29kZShQcmlzbSkge1xuICBQcmlzbS5sYW5ndWFnZXMubG9sY29kZSA9IHtcbiAgICBjb21tZW50OiBbL1xcYk9CVFdcXHNbXFxzXFxTXSo/XFxzVExEUlxcYi8sIC9cXGJCVFcuKy9dLFxuICAgIHN0cmluZzoge1xuICAgICAgcGF0dGVybjogL1wiKD86Oi58W15cIjpdKSpcIi8sXG4gICAgICBpbnNpZGU6IHtcbiAgICAgICAgdmFyaWFibGU6IC86XFx7W159XStcXH0vLFxuICAgICAgICBzeW1ib2w6IFsvOlxcKFthLWZcXGRdK1xcKS9pLCAvOlxcW1teXFxdXStcXF0vLCAvOlspPm9cIjpdL11cbiAgICAgIH0sXG4gICAgICBncmVlZHk6IHRydWVcbiAgICB9LFxuICAgIG51bWJlcjogLyg/OlxcQi0pPyg/OlxcYlxcZCsoPzpcXC5cXGQqKT98XFxCXFwuXFxkKykvLFxuICAgIHN5bWJvbDoge1xuICAgICAgcGF0dGVybjogLyhefFxccykoPzpBICk/KD86QlVLS0lUfE5PT0J8TlVNQkFSfE5VTUJSfFRST09GfFlBUk4pKD89XFxzfCx8JCkvLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGluc2lkZToge1xuICAgICAgICBrZXl3b3JkOiAvQSg/PVxccykvXG4gICAgICB9XG4gICAgfSxcbiAgICBsYWJlbDoge1xuICAgICAgcGF0dGVybjogLygoPzpefFxccykoPzpJTSBJTiBZUnxJTSBPVVRUQSBZUikgKVthLXpBLVpdXFx3Ki8sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgYWxpYXM6ICdzdHJpbmcnXG4gICAgfSxcbiAgICBmdW5jdGlvbjoge1xuICAgICAgcGF0dGVybjogLygoPzpefFxccykoPzpIT1cgSVogSXxJIElafElaKSApW2EtekEtWl1cXHcqLyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICB9LFxuICAgIGtleXdvcmQ6IFtcbiAgICAgIHtcbiAgICAgICAgcGF0dGVybjpcbiAgICAgICAgICAvKF58XFxzKSg/OkFOfEZPVU5EIFlSfEdJTU1FSHxHVEZPfEhBSXxIQVMgQXxIT1cgSVogSXxJIEhBUyBBfEkgSVp8SUYgVSBTQVkgU098SU0gSU4gWVJ8SU0gT1VUVEEgWVJ8SVMgTk9XKD86IEEpP3xJVFooPzogQSk/fElafEtUSFh8S1RIWEJZRXxMSUVLKD86IEEpP3xNQUVLfE1FQkJFfE1LQVl8TkVSRklOfE5PIFdBSXxPIEhBSSBJTXxPIFJMWVxcP3xPSUN8T01HfE9NR1dURnxSfFNNT09TSHxTUlN8VElMfFVQUElOfFZJU0lCTEV8V0lMRXxXVEZcXD98WUEgUkxZfFlSKSg/PVxcc3wsfCQpLyxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIC8nWig/PVxcc3wsfCQpL1xuICAgIF0sXG4gICAgYm9vbGVhbjoge1xuICAgICAgcGF0dGVybjogLyhefFxccykoPzpGQUlMfFdJTikoPz1cXHN8LHwkKS8sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgfSxcbiAgICB2YXJpYWJsZToge1xuICAgICAgcGF0dGVybjogLyhefFxccylJVCg/PVxcc3wsfCQpLyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICB9LFxuICAgIG9wZXJhdG9yOiB7XG4gICAgICBwYXR0ZXJuOlxuICAgICAgICAvKF58XFxzKSg/Ok5PVHxCT1RIIFNBRU18RElGRlJJTlR8KD86QUxMfEFOWXxCSUdHUnxCT1RIfERJRkZ8RUlUSEVSfE1PRHxQUk9EVUtUfFFVT1NIVU5UfFNNQUxMUnxTVU18V09OKSBPRikoPz1cXHN8LHwkKS8sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgfSxcbiAgICBwdW5jdHVhdGlvbjogL1xcLnszfXzigKZ8LHwhL1xuICB9XG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImxvbGNvZGUiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImxhbmd1YWdlcyIsImNvbW1lbnQiLCJzdHJpbmciLCJwYXR0ZXJuIiwiaW5zaWRlIiwidmFyaWFibGUiLCJzeW1ib2wiLCJncmVlZHkiLCJudW1iZXIiLCJsb29rYmVoaW5kIiwia2V5d29yZCIsImxhYmVsIiwiYWxpYXMiLCJvcGVyYXRvciIsInB1bmN0dWF0aW9uIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/lolcode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/lua.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/lua.js ***!
  \********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = lua;\nlua.displayName = 'lua';\nlua.aliases = [];\nfunction lua(Prism) {\n  Prism.languages.lua = {\n    comment: /^#!.+|--(?:\\[(=*)\\[[\\s\\S]*?\\]\\1\\]|.*)/m,\n    // \\z may be used to skip the following space\n    string: {\n      pattern: /([\"'])(?:(?!\\1)[^\\\\\\r\\n]|\\\\z(?:\\r\\n|\\s)|\\\\(?:\\r\\n|[^z]))*\\1|\\[(=*)\\[[\\s\\S]*?\\]\\2\\]/,\n      greedy: true\n    },\n    number: /\\b0x[a-f\\d]+(?:\\.[a-f\\d]*)?(?:p[+-]?\\d+)?\\b|\\b\\d+(?:\\.\\B|(?:\\.\\d*)?(?:e[+-]?\\d+)?\\b)|\\B\\.\\d+(?:e[+-]?\\d+)?\\b/i,\n    keyword: /\\b(?:and|break|do|else|elseif|end|false|for|function|goto|if|in|local|nil|not|or|repeat|return|then|true|until|while)\\b/,\n    \"function\": /(?!\\d)\\w+(?=\\s*(?:[({]))/,\n    operator: [/[-+*%^&|#]|\\/\\/?|<[<=]?|>[>=]?|[=~]=?/, {\n      // Match \"..\" but don't break \"...\"\n      pattern: /(^|[^.])\\.\\.(?!\\.)/,\n      lookbehind: true\n    }],\n    punctuation: /[\\[\\](){},;]|\\.+|:+/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvbHVhLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsR0FBRztBQUNwQkEsR0FBRyxDQUFDQyxXQUFXLEdBQUcsS0FBSztBQUN2QkQsR0FBRyxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNoQixTQUFTRixHQUFHQSxDQUFDRyxLQUFLLEVBQUU7RUFDbEJBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixHQUFHLEdBQUc7SUFDcEJLLE9BQU8sRUFBRSx3Q0FBd0M7SUFDakQ7SUFDQUMsTUFBTSxFQUFFO01BQ05DLE9BQU8sRUFDTCxvRkFBb0Y7TUFDdEZDLE1BQU0sRUFBRTtJQUNWLENBQUM7SUFDREMsTUFBTSxFQUNKLCtHQUErRztJQUNqSEMsT0FBTyxFQUNMLHlIQUF5SDtJQUMzSCxZQUFVLDBCQUEwQjtJQUNwQ0MsUUFBUSxFQUFFLENBQ1IsdUNBQXVDLEVBQ3ZDO01BQ0U7TUFDQUosT0FBTyxFQUFFLG9CQUFvQjtNQUM3QkssVUFBVSxFQUFFO0lBQ2QsQ0FBQyxDQUNGO0lBQ0RDLFdBQVcsRUFBRTtFQUNmLENBQUM7QUFDSCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXGx1YS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBsdWFcbmx1YS5kaXNwbGF5TmFtZSA9ICdsdWEnXG5sdWEuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBsdWEoUHJpc20pIHtcbiAgUHJpc20ubGFuZ3VhZ2VzLmx1YSA9IHtcbiAgICBjb21tZW50OiAvXiMhLit8LS0oPzpcXFsoPSopXFxbW1xcc1xcU10qP1xcXVxcMVxcXXwuKikvbSxcbiAgICAvLyBcXHogbWF5IGJlIHVzZWQgdG8gc2tpcCB0aGUgZm9sbG93aW5nIHNwYWNlXG4gICAgc3RyaW5nOiB7XG4gICAgICBwYXR0ZXJuOlxuICAgICAgICAvKFtcIiddKSg/Oig/IVxcMSlbXlxcXFxcXHJcXG5dfFxcXFx6KD86XFxyXFxufFxccyl8XFxcXCg/OlxcclxcbnxbXnpdKSkqXFwxfFxcWyg9KilcXFtbXFxzXFxTXSo/XFxdXFwyXFxdLyxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgbnVtYmVyOlxuICAgICAgL1xcYjB4W2EtZlxcZF0rKD86XFwuW2EtZlxcZF0qKT8oPzpwWystXT9cXGQrKT9cXGJ8XFxiXFxkKyg/OlxcLlxcQnwoPzpcXC5cXGQqKT8oPzplWystXT9cXGQrKT9cXGIpfFxcQlxcLlxcZCsoPzplWystXT9cXGQrKT9cXGIvaSxcbiAgICBrZXl3b3JkOlxuICAgICAgL1xcYig/OmFuZHxicmVha3xkb3xlbHNlfGVsc2VpZnxlbmR8ZmFsc2V8Zm9yfGZ1bmN0aW9ufGdvdG98aWZ8aW58bG9jYWx8bmlsfG5vdHxvcnxyZXBlYXR8cmV0dXJufHRoZW58dHJ1ZXx1bnRpbHx3aGlsZSlcXGIvLFxuICAgIGZ1bmN0aW9uOiAvKD8hXFxkKVxcdysoPz1cXHMqKD86Wyh7XSkpLyxcbiAgICBvcGVyYXRvcjogW1xuICAgICAgL1stKyolXiZ8I118XFwvXFwvP3w8Wzw9XT98Pls+PV0/fFs9fl09Py8sXG4gICAgICB7XG4gICAgICAgIC8vIE1hdGNoIFwiLi5cIiBidXQgZG9uJ3QgYnJlYWsgXCIuLi5cIlxuICAgICAgICBwYXR0ZXJuOiAvKF58W14uXSlcXC5cXC4oPyFcXC4pLyxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgfVxuICAgIF0sXG4gICAgcHVuY3R1YXRpb246IC9bXFxbXFxdKCl7fSw7XXxcXC4rfDorL1xuICB9XG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImx1YSIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwiY29tbWVudCIsInN0cmluZyIsInBhdHRlcm4iLCJncmVlZHkiLCJudW1iZXIiLCJrZXl3b3JkIiwib3BlcmF0b3IiLCJsb29rYmVoaW5kIiwicHVuY3R1YXRpb24iXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/lua.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/magma.js":
/*!**********************************************!*\
  !*** ./node_modules/refractor/lang/magma.js ***!
  \**********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = magma;\nmagma.displayName = 'magma';\nmagma.aliases = [];\nfunction magma(Prism) {\n  Prism.languages.magma = {\n    output: {\n      pattern: /^(>.*(?:\\r(?:\\n|(?!\\n))|\\n))(?!>)(?:.+|(?:\\r(?:\\n|(?!\\n))|\\n)(?!>).*)(?:(?:\\r(?:\\n|(?!\\n))|\\n)(?!>).*)*/m,\n      lookbehind: true,\n      greedy: true\n    },\n    comment: {\n      pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,\n      greedy: true\n    },\n    string: {\n      pattern: /(^|[^\\\\\"])\"(?:[^\\r\\n\\\\\"]|\\\\.)*\"/,\n      lookbehind: true,\n      greedy: true\n    },\n    // http://magma.maths.usyd.edu.au/magma/handbook/text/82\n    keyword: /\\b(?:_|adj|and|assert|assert2|assert3|assigned|break|by|case|cat|catch|clear|cmpeq|cmpne|continue|declare|default|delete|diff|div|do|elif|else|end|eq|error|eval|exists|exit|for|forall|forward|fprintf|freeze|function|ge|gt|if|iload|import|in|intrinsic|is|join|le|load|local|lt|meet|mod|ne|not|notadj|notin|notsubset|or|print|printf|procedure|quit|random|read|readi|repeat|require|requirege|requirerange|restore|return|save|sdiff|select|subset|then|time|to|try|until|vprint|vprintf|vtime|when|where|while|xor)\\b/,\n    \"boolean\": /\\b(?:false|true)\\b/,\n    generator: {\n      pattern: /\\b[a-z_]\\w*(?=\\s*<)/i,\n      alias: 'class-name'\n    },\n    \"function\": /\\b[a-z_]\\w*(?=\\s*\\()/i,\n    number: {\n      pattern: /(^|[^\\w.]|\\.\\.)(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[eE][+-]?\\d+)?(?:_[a-z]?)?(?=$|[^\\w.]|\\.\\.)/,\n      lookbehind: true\n    },\n    operator: /->|[-+*/^~!|#=]|:=|\\.\\./,\n    punctuation: /[()[\\]{}<>,;.:]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvbWFnbWEuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxLQUFLO0FBQ3RCQSxLQUFLLENBQUNDLFdBQVcsR0FBRyxPQUFPO0FBQzNCRCxLQUFLLENBQUNFLE9BQU8sR0FBRyxFQUFFO0FBQ2xCLFNBQVNGLEtBQUtBLENBQUNHLEtBQUssRUFBRTtFQUNwQkEsS0FBSyxDQUFDQyxTQUFTLENBQUNKLEtBQUssR0FBRztJQUN0QkssTUFBTSxFQUFFO01BQ05DLE9BQU8sRUFDTCwwR0FBMEc7TUFDNUdDLFVBQVUsRUFBRSxJQUFJO01BQ2hCQyxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0RDLE9BQU8sRUFBRTtNQUNQSCxPQUFPLEVBQUUseUJBQXlCO01BQ2xDRSxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0RFLE1BQU0sRUFBRTtNQUNOSixPQUFPLEVBQUUsaUNBQWlDO01BQzFDQyxVQUFVLEVBQUUsSUFBSTtNQUNoQkMsTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUNEO0lBQ0FHLE9BQU8sRUFDTCwrZkFBK2Y7SUFDamdCLFdBQVMsb0JBQW9CO0lBQzdCQyxTQUFTLEVBQUU7TUFDVE4sT0FBTyxFQUFFLHNCQUFzQjtNQUMvQk8sS0FBSyxFQUFFO0lBQ1QsQ0FBQztJQUNELFlBQVUsdUJBQXVCO0lBQ2pDQyxNQUFNLEVBQUU7TUFDTlIsT0FBTyxFQUNMLHNGQUFzRjtNQUN4RkMsVUFBVSxFQUFFO0lBQ2QsQ0FBQztJQUNEUSxRQUFRLEVBQUUseUJBQXlCO0lBQ25DQyxXQUFXLEVBQUU7RUFDZixDQUFDO0FBQ0giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxtYWdtYS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBtYWdtYVxubWFnbWEuZGlzcGxheU5hbWUgPSAnbWFnbWEnXG5tYWdtYS5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIG1hZ21hKFByaXNtKSB7XG4gIFByaXNtLmxhbmd1YWdlcy5tYWdtYSA9IHtcbiAgICBvdXRwdXQ6IHtcbiAgICAgIHBhdHRlcm46XG4gICAgICAgIC9eKD4uKig/Olxccig/OlxcbnwoPyFcXG4pKXxcXG4pKSg/IT4pKD86Lit8KD86XFxyKD86XFxufCg/IVxcbikpfFxcbikoPyE+KS4qKSg/Oig/Olxccig/OlxcbnwoPyFcXG4pKXxcXG4pKD8hPikuKikqL20sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICBjb21tZW50OiB7XG4gICAgICBwYXR0ZXJuOiAvXFwvXFwvLip8XFwvXFwqW1xcc1xcU10qP1xcKlxcLy8sXG4gICAgICBncmVlZHk6IHRydWVcbiAgICB9LFxuICAgIHN0cmluZzoge1xuICAgICAgcGF0dGVybjogLyhefFteXFxcXFwiXSlcIig/OlteXFxyXFxuXFxcXFwiXXxcXFxcLikqXCIvLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgLy8gaHR0cDovL21hZ21hLm1hdGhzLnVzeWQuZWR1LmF1L21hZ21hL2hhbmRib29rL3RleHQvODJcbiAgICBrZXl3b3JkOlxuICAgICAgL1xcYig/Ol98YWRqfGFuZHxhc3NlcnR8YXNzZXJ0Mnxhc3NlcnQzfGFzc2lnbmVkfGJyZWFrfGJ5fGNhc2V8Y2F0fGNhdGNofGNsZWFyfGNtcGVxfGNtcG5lfGNvbnRpbnVlfGRlY2xhcmV8ZGVmYXVsdHxkZWxldGV8ZGlmZnxkaXZ8ZG98ZWxpZnxlbHNlfGVuZHxlcXxlcnJvcnxldmFsfGV4aXN0c3xleGl0fGZvcnxmb3JhbGx8Zm9yd2FyZHxmcHJpbnRmfGZyZWV6ZXxmdW5jdGlvbnxnZXxndHxpZnxpbG9hZHxpbXBvcnR8aW58aW50cmluc2ljfGlzfGpvaW58bGV8bG9hZHxsb2NhbHxsdHxtZWV0fG1vZHxuZXxub3R8bm90YWRqfG5vdGlufG5vdHN1YnNldHxvcnxwcmludHxwcmludGZ8cHJvY2VkdXJlfHF1aXR8cmFuZG9tfHJlYWR8cmVhZGl8cmVwZWF0fHJlcXVpcmV8cmVxdWlyZWdlfHJlcXVpcmVyYW5nZXxyZXN0b3JlfHJldHVybnxzYXZlfHNkaWZmfHNlbGVjdHxzdWJzZXR8dGhlbnx0aW1lfHRvfHRyeXx1bnRpbHx2cHJpbnR8dnByaW50Znx2dGltZXx3aGVufHdoZXJlfHdoaWxlfHhvcilcXGIvLFxuICAgIGJvb2xlYW46IC9cXGIoPzpmYWxzZXx0cnVlKVxcYi8sXG4gICAgZ2VuZXJhdG9yOiB7XG4gICAgICBwYXR0ZXJuOiAvXFxiW2Etel9dXFx3Kig/PVxccyo8KS9pLFxuICAgICAgYWxpYXM6ICdjbGFzcy1uYW1lJ1xuICAgIH0sXG4gICAgZnVuY3Rpb246IC9cXGJbYS16X11cXHcqKD89XFxzKlxcKCkvaSxcbiAgICBudW1iZXI6IHtcbiAgICAgIHBhdHRlcm46XG4gICAgICAgIC8oXnxbXlxcdy5dfFxcLlxcLikoPzpcXGQrKD86XFwuXFxkKik/fFxcLlxcZCspKD86W2VFXVsrLV0/XFxkKyk/KD86X1thLXpdPyk/KD89JHxbXlxcdy5dfFxcLlxcLikvLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgIH0sXG4gICAgb3BlcmF0b3I6IC8tPnxbLSsqL15+IXwjPV18Oj18XFwuXFwuLyxcbiAgICBwdW5jdHVhdGlvbjogL1soKVtcXF17fTw+LDsuOl0vXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwibWFnbWEiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImxhbmd1YWdlcyIsIm91dHB1dCIsInBhdHRlcm4iLCJsb29rYmVoaW5kIiwiZ3JlZWR5IiwiY29tbWVudCIsInN0cmluZyIsImtleXdvcmQiLCJnZW5lcmF0b3IiLCJhbGlhcyIsIm51bWJlciIsIm9wZXJhdG9yIiwicHVuY3R1YXRpb24iXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/magma.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/makefile.js":
/*!*************************************************!*\
  !*** ./node_modules/refractor/lang/makefile.js ***!
  \*************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = makefile;\nmakefile.displayName = 'makefile';\nmakefile.aliases = [];\nfunction makefile(Prism) {\n  Prism.languages.makefile = {\n    comment: {\n      pattern: /(^|[^\\\\])#(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])*/,\n      lookbehind: true\n    },\n    string: {\n      pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true\n    },\n    'builtin-target': {\n      pattern: /\\.[A-Z][^:#=\\s]+(?=\\s*:(?!=))/,\n      alias: 'builtin'\n    },\n    target: {\n      pattern: /^(?:[^:=\\s]|[ \\t]+(?![\\s:]))+(?=\\s*:(?!=))/m,\n      alias: 'symbol',\n      inside: {\n        variable: /\\$+(?:(?!\\$)[^(){}:#=\\s]+|(?=[({]))/\n      }\n    },\n    variable: /\\$+(?:(?!\\$)[^(){}:#=\\s]+|\\([@*%<^+?][DF]\\)|(?=[({]))/,\n    // Directives\n    keyword: /-include\\b|\\b(?:define|else|endef|endif|export|ifn?def|ifn?eq|include|override|private|sinclude|undefine|unexport|vpath)\\b/,\n    \"function\": {\n      pattern: /(\\()(?:abspath|addsuffix|and|basename|call|dir|error|eval|file|filter(?:-out)?|findstring|firstword|flavor|foreach|guile|if|info|join|lastword|load|notdir|or|origin|patsubst|realpath|shell|sort|strip|subst|suffix|value|warning|wildcard|word(?:list|s)?)(?=[ \\t])/,\n      lookbehind: true\n    },\n    operator: /(?:::|[?:+!])?=|[|@]/,\n    punctuation: /[:;(){}]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvbWFrZWZpbGUuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxRQUFRO0FBQ3pCQSxRQUFRLENBQUNDLFdBQVcsR0FBRyxVQUFVO0FBQ2pDRCxRQUFRLENBQUNFLE9BQU8sR0FBRyxFQUFFO0FBQ3JCLFNBQVNGLFFBQVFBLENBQUNHLEtBQUssRUFBRTtFQUN2QkEsS0FBSyxDQUFDQyxTQUFTLENBQUNKLFFBQVEsR0FBRztJQUN6QkssT0FBTyxFQUFFO01BQ1BDLE9BQU8sRUFBRSw0Q0FBNEM7TUFDckRDLFVBQVUsRUFBRTtJQUNkLENBQUM7SUFDREMsTUFBTSxFQUFFO01BQ05GLE9BQU8sRUFBRSxnREFBZ0Q7TUFDekRHLE1BQU0sRUFBRTtJQUNWLENBQUM7SUFDRCxnQkFBZ0IsRUFBRTtNQUNoQkgsT0FBTyxFQUFFLCtCQUErQjtNQUN4Q0ksS0FBSyxFQUFFO0lBQ1QsQ0FBQztJQUNEQyxNQUFNLEVBQUU7TUFDTkwsT0FBTyxFQUFFLDZDQUE2QztNQUN0REksS0FBSyxFQUFFLFFBQVE7TUFDZkUsTUFBTSxFQUFFO1FBQ05DLFFBQVEsRUFBRTtNQUNaO0lBQ0YsQ0FBQztJQUNEQSxRQUFRLEVBQUUsdURBQXVEO0lBQ2pFO0lBQ0FDLE9BQU8sRUFDTCw0SEFBNEg7SUFDOUgsWUFBVTtNQUNSUixPQUFPLEVBQ0wsdVFBQXVRO01BQ3pRQyxVQUFVLEVBQUU7SUFDZCxDQUFDO0lBQ0RRLFFBQVEsRUFBRSxzQkFBc0I7SUFDaENDLFdBQVcsRUFBRTtFQUNmLENBQUM7QUFDSCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXG1ha2VmaWxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IG1ha2VmaWxlXG5tYWtlZmlsZS5kaXNwbGF5TmFtZSA9ICdtYWtlZmlsZSdcbm1ha2VmaWxlLmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24gbWFrZWZpbGUoUHJpc20pIHtcbiAgUHJpc20ubGFuZ3VhZ2VzLm1ha2VmaWxlID0ge1xuICAgIGNvbW1lbnQ6IHtcbiAgICAgIHBhdHRlcm46IC8oXnxbXlxcXFxdKSMoPzpcXFxcKD86XFxyXFxufFtcXHNcXFNdKXxbXlxcXFxcXHJcXG5dKSovLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgIH0sXG4gICAgc3RyaW5nOiB7XG4gICAgICBwYXR0ZXJuOiAvKFtcIiddKSg/OlxcXFwoPzpcXHJcXG58W1xcc1xcU10pfCg/IVxcMSlbXlxcXFxcXHJcXG5dKSpcXDEvLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICAnYnVpbHRpbi10YXJnZXQnOiB7XG4gICAgICBwYXR0ZXJuOiAvXFwuW0EtWl1bXjojPVxcc10rKD89XFxzKjooPyE9KSkvLFxuICAgICAgYWxpYXM6ICdidWlsdGluJ1xuICAgIH0sXG4gICAgdGFyZ2V0OiB7XG4gICAgICBwYXR0ZXJuOiAvXig/OlteOj1cXHNdfFsgXFx0XSsoPyFbXFxzOl0pKSsoPz1cXHMqOig/IT0pKS9tLFxuICAgICAgYWxpYXM6ICdzeW1ib2wnLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgIHZhcmlhYmxlOiAvXFwkKyg/Oig/IVxcJClbXigpe306Iz1cXHNdK3woPz1bKHtdKSkvXG4gICAgICB9XG4gICAgfSxcbiAgICB2YXJpYWJsZTogL1xcJCsoPzooPyFcXCQpW14oKXt9OiM9XFxzXSt8XFwoW0AqJTxeKz9dW0RGXVxcKXwoPz1bKHtdKSkvLFxuICAgIC8vIERpcmVjdGl2ZXNcbiAgICBrZXl3b3JkOlxuICAgICAgLy1pbmNsdWRlXFxifFxcYig/OmRlZmluZXxlbHNlfGVuZGVmfGVuZGlmfGV4cG9ydHxpZm4/ZGVmfGlmbj9lcXxpbmNsdWRlfG92ZXJyaWRlfHByaXZhdGV8c2luY2x1ZGV8dW5kZWZpbmV8dW5leHBvcnR8dnBhdGgpXFxiLyxcbiAgICBmdW5jdGlvbjoge1xuICAgICAgcGF0dGVybjpcbiAgICAgICAgLyhcXCgpKD86YWJzcGF0aHxhZGRzdWZmaXh8YW5kfGJhc2VuYW1lfGNhbGx8ZGlyfGVycm9yfGV2YWx8ZmlsZXxmaWx0ZXIoPzotb3V0KT98ZmluZHN0cmluZ3xmaXJzdHdvcmR8Zmxhdm9yfGZvcmVhY2h8Z3VpbGV8aWZ8aW5mb3xqb2lufGxhc3R3b3JkfGxvYWR8bm90ZGlyfG9yfG9yaWdpbnxwYXRzdWJzdHxyZWFscGF0aHxzaGVsbHxzb3J0fHN0cmlwfHN1YnN0fHN1ZmZpeHx2YWx1ZXx3YXJuaW5nfHdpbGRjYXJkfHdvcmQoPzpsaXN0fHMpPykoPz1bIFxcdF0pLyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICB9LFxuICAgIG9wZXJhdG9yOiAvKD86Ojp8Wz86KyFdKT89fFt8QF0vLFxuICAgIHB1bmN0dWF0aW9uOiAvWzo7KCl7fV0vXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwibWFrZWZpbGUiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImxhbmd1YWdlcyIsImNvbW1lbnQiLCJwYXR0ZXJuIiwibG9va2JlaGluZCIsInN0cmluZyIsImdyZWVkeSIsImFsaWFzIiwidGFyZ2V0IiwiaW5zaWRlIiwidmFyaWFibGUiLCJrZXl3b3JkIiwib3BlcmF0b3IiLCJwdW5jdHVhdGlvbiJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/makefile.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/markdown.js":
/*!*************************************************!*\
  !*** ./node_modules/refractor/lang/markdown.js ***!
  \*************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = markdown;\nmarkdown.displayName = 'markdown';\nmarkdown.aliases = ['md'];\nfunction markdown(Prism) {\n  ;\n  (function (Prism) {\n    // Allow only one line break\n    var inner = /(?:\\\\.|[^\\\\\\n\\r]|(?:\\n|\\r\\n?)(?![\\r\\n]))/.source;\n    /**\n     * This function is intended for the creation of the bold or italic pattern.\n     *\n     * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.\n     *\n     * _Note:_ Keep in mind that this adds a capturing group.\n     *\n     * @param {string} pattern\n     * @returns {RegExp}\n     */\n    function createInline(pattern) {\n      pattern = pattern.replace(/<inner>/g, function () {\n        return inner;\n      });\n      return RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + '(?:' + pattern + ')');\n    }\n    var tableCell = /(?:\\\\.|``(?:[^`\\r\\n]|`(?!`))+``|`[^`\\r\\n]+`|[^\\\\|\\r\\n`])+/.source;\n    var tableRow = /\\|?__(?:\\|__)+\\|?(?:(?:\\n|\\r\\n?)|(?![\\s\\S]))/.source.replace(/__/g, function () {\n      return tableCell;\n    });\n    var tableLine = /\\|?[ \\t]*:?-{3,}:?[ \\t]*(?:\\|[ \\t]*:?-{3,}:?[ \\t]*)+\\|?(?:\\n|\\r\\n?)/.source;\n    Prism.languages.markdown = Prism.languages.extend('markup', {});\n    Prism.languages.insertBefore('markdown', 'prolog', {\n      'front-matter-block': {\n        pattern: /(^(?:\\s*[\\r\\n])?)---(?!.)[\\s\\S]*?[\\r\\n]---(?!.)/,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          punctuation: /^---|---$/,\n          'front-matter': {\n            pattern: /\\S+(?:\\s+\\S+)*/,\n            alias: ['yaml', 'language-yaml'],\n            inside: Prism.languages.yaml\n          }\n        }\n      },\n      blockquote: {\n        // > ...\n        pattern: /^>(?:[\\t ]*>)*/m,\n        alias: 'punctuation'\n      },\n      table: {\n        pattern: RegExp('^' + tableRow + tableLine + '(?:' + tableRow + ')*', 'm'),\n        inside: {\n          'table-data-rows': {\n            pattern: RegExp('^(' + tableRow + tableLine + ')(?:' + tableRow + ')*$'),\n            lookbehind: true,\n            inside: {\n              'table-data': {\n                pattern: RegExp(tableCell),\n                inside: Prism.languages.markdown\n              },\n              punctuation: /\\|/\n            }\n          },\n          'table-line': {\n            pattern: RegExp('^(' + tableRow + ')' + tableLine + '$'),\n            lookbehind: true,\n            inside: {\n              punctuation: /\\||:?-{3,}:?/\n            }\n          },\n          'table-header-row': {\n            pattern: RegExp('^' + tableRow + '$'),\n            inside: {\n              'table-header': {\n                pattern: RegExp(tableCell),\n                alias: 'important',\n                inside: Prism.languages.markdown\n              },\n              punctuation: /\\|/\n            }\n          }\n        }\n      },\n      code: [{\n        // Prefixed by 4 spaces or 1 tab and preceded by an empty line\n        pattern: /((?:^|\\n)[ \\t]*\\n|(?:^|\\r\\n?)[ \\t]*\\r\\n?)(?: {4}|\\t).+(?:(?:\\n|\\r\\n?)(?: {4}|\\t).+)*/,\n        lookbehind: true,\n        alias: 'keyword'\n      }, {\n        // ```optional language\n        // code block\n        // ```\n        pattern: /^```[\\s\\S]*?^```$/m,\n        greedy: true,\n        inside: {\n          'code-block': {\n            pattern: /^(```.*(?:\\n|\\r\\n?))[\\s\\S]+?(?=(?:\\n|\\r\\n?)^```$)/m,\n            lookbehind: true\n          },\n          'code-language': {\n            pattern: /^(```).+/,\n            lookbehind: true\n          },\n          punctuation: /```/\n        }\n      }],\n      title: [{\n        // title 1\n        // =======\n        // title 2\n        // -------\n        pattern: /\\S.*(?:\\n|\\r\\n?)(?:==+|--+)(?=[ \\t]*$)/m,\n        alias: 'important',\n        inside: {\n          punctuation: /==+$|--+$/\n        }\n      }, {\n        // # title 1\n        // ###### title 6\n        pattern: /(^\\s*)#.+/m,\n        lookbehind: true,\n        alias: 'important',\n        inside: {\n          punctuation: /^#+|#+$/\n        }\n      }],\n      hr: {\n        // ***\n        // ---\n        // * * *\n        // -----------\n        pattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      list: {\n        // * item\n        // + item\n        // - item\n        // 1. item\n        pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      'url-reference': {\n        // [id]: http://example.com \"Optional title\"\n        // [id]: http://example.com 'Optional title'\n        // [id]: http://example.com (Optional title)\n        // [id]: <http://example.com> \"Optional title\"\n        pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n        inside: {\n          variable: {\n            pattern: /^(!?\\[)[^\\]]+/,\n            lookbehind: true\n          },\n          string: /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n          punctuation: /^[\\[\\]!:]|[<>]/\n        },\n        alias: 'url'\n      },\n      bold: {\n        // **strong**\n        // __strong__\n        // allow one nested instance of italic text using the same delimiter\n        pattern: createInline(/\\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\\b|\\*\\*(?:(?!\\*)<inner>|\\*(?:(?!\\*)<inner>)+\\*)+\\*\\*/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /(^..)[\\s\\S]+(?=..$)/,\n            lookbehind: true,\n            inside: {} // see below\n          },\n\n          punctuation: /\\*\\*|__/\n        }\n      },\n      italic: {\n        // *em*\n        // _em_\n        // allow one nested instance of bold text using the same delimiter\n        pattern: createInline(/\\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\\b|\\*(?:(?!\\*)<inner>|\\*\\*(?:(?!\\*)<inner>)+\\*\\*)+\\*/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /(^.)[\\s\\S]+(?=.$)/,\n            lookbehind: true,\n            inside: {} // see below\n          },\n\n          punctuation: /[*_]/\n        }\n      },\n      strike: {\n        // ~~strike through~~\n        // ~strike~\n        // eslint-disable-next-line regexp/strict\n        pattern: createInline(/(~~?)(?:(?!~)<inner>)+\\2/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /(^~~?)[\\s\\S]+(?=\\1$)/,\n            lookbehind: true,\n            inside: {} // see below\n          },\n\n          punctuation: /~~?/\n        }\n      },\n      'code-snippet': {\n        // `code`\n        // ``code``\n        pattern: /(^|[^\\\\`])(?:``[^`\\r\\n]+(?:`[^`\\r\\n]+)*``(?!`)|`[^`\\r\\n]+`(?!`))/,\n        lookbehind: true,\n        greedy: true,\n        alias: ['code', 'keyword']\n      },\n      url: {\n        // [example](http://example.com \"Optional title\")\n        // [example][id]\n        // [example] [id]\n        pattern: createInline(/!?\\[(?:(?!\\])<inner>)+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)|[ \\t]?\\[(?:(?!\\])<inner>)+\\])/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          operator: /^!/,\n          content: {\n            pattern: /(^\\[)[^\\]]+(?=\\])/,\n            lookbehind: true,\n            inside: {} // see below\n          },\n\n          variable: {\n            pattern: /(^\\][ \\t]?\\[)[^\\]]+(?=\\]$)/,\n            lookbehind: true\n          },\n          url: {\n            pattern: /(^\\]\\()[^\\s)]+/,\n            lookbehind: true\n          },\n          string: {\n            pattern: /(^[ \\t]+)\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/,\n            lookbehind: true\n          }\n        }\n      }\n    });\n    ['url', 'bold', 'italic', 'strike'].forEach(function (token) {\n      ;\n      ['url', 'bold', 'italic', 'strike', 'code-snippet'].forEach(function (inside) {\n        if (token !== inside) {\n          Prism.languages.markdown[token].inside.content.inside[inside] = Prism.languages.markdown[inside];\n        }\n      });\n    });\n    Prism.hooks.add('after-tokenize', function (env) {\n      if (env.language !== 'markdown' && env.language !== 'md') {\n        return;\n      }\n      function walkTokens(tokens) {\n        if (!tokens || typeof tokens === 'string') {\n          return;\n        }\n        for (var i = 0, l = tokens.length; i < l; i++) {\n          var token = tokens[i];\n          if (token.type !== 'code') {\n            walkTokens(token.content);\n            continue;\n          }\n          /*\n           * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token\n           * is optional. But the grammar is defined so that there is only one case we have to handle:\n           *\n           * token.content = [\n           *     <span class=\"punctuation\">```</span>,\n           *     <span class=\"code-language\">xxxx</span>,\n           *     '\\n', // exactly one new lines (\\r or \\n or \\r\\n)\n           *     <span class=\"code-block\">...</span>,\n           *     '\\n', // exactly one new lines again\n           *     <span class=\"punctuation\">```</span>\n           * ];\n           */\n          var codeLang = token.content[1];\n          var codeBlock = token.content[3];\n          if (codeLang && codeBlock && codeLang.type === 'code-language' && codeBlock.type === 'code-block' && typeof codeLang.content === 'string') {\n            // this might be a language that Prism does not support\n            // do some replacements to support C++, C#, and F#\n            var lang = codeLang.content.replace(/\\b#/g, 'sharp').replace(/\\b\\+\\+/g, 'pp'); // only use the first word\n            lang = (/[a-z][\\w-]*/i.exec(lang) || [''])[0].toLowerCase();\n            var alias = 'language-' + lang; // add alias\n            if (!codeBlock.alias) {\n              codeBlock.alias = [alias];\n            } else if (typeof codeBlock.alias === 'string') {\n              codeBlock.alias = [codeBlock.alias, alias];\n            } else {\n              codeBlock.alias.push(alias);\n            }\n          }\n        }\n      }\n      walkTokens(env.tokens);\n    });\n    Prism.hooks.add('wrap', function (env) {\n      if (env.type !== 'code-block') {\n        return;\n      }\n      var codeLang = '';\n      for (var i = 0, l = env.classes.length; i < l; i++) {\n        var cls = env.classes[i];\n        var match = /language-(.+)/.exec(cls);\n        if (match) {\n          codeLang = match[1];\n          break;\n        }\n      }\n      var grammar = Prism.languages[codeLang];\n      if (!grammar) {\n        if (codeLang && codeLang !== 'none' && Prism.plugins.autoloader) {\n          var id = 'md-' + new Date().valueOf() + '-' + Math.floor(Math.random() * 1e16);\n          env.attributes['id'] = id;\n          Prism.plugins.autoloader.loadLanguages(codeLang, function () {\n            var ele = document.getElementById(id);\n            if (ele) {\n              ele.innerHTML = Prism.highlight(ele.textContent, Prism.languages[codeLang], codeLang);\n            }\n          });\n        }\n      } else {\n        env.content = Prism.highlight(textContent(env.content.value), grammar, codeLang);\n      }\n    });\n    var tagPattern = RegExp(Prism.languages.markup.tag.pattern.source, 'gi');\n    /**\n     * A list of known entity names.\n     *\n     * This will always be incomplete to save space. The current list is the one used by lowdash's unescape function.\n     *\n     * @see {@link https://github.com/lodash/lodash/blob/2da024c3b4f9947a48517639de7560457cd4ec6c/unescape.js#L2}\n     */\n    var KNOWN_ENTITY_NAMES = {\n      amp: '&',\n      lt: '<',\n      gt: '>',\n      quot: '\"'\n    }; // IE 11 doesn't support `String.fromCodePoint`\n    var fromCodePoint = String.fromCodePoint || String.fromCharCode;\n    /**\n     * Returns the text content of a given HTML source code string.\n     *\n     * @param {string} html\n     * @returns {string}\n     */\n    function textContent(html) {\n      // remove all tags\n      var text = html.replace(tagPattern, ''); // decode known entities\n      text = text.replace(/&(\\w{1,8}|#x?[\\da-f]{1,8});/gi, function (m, code) {\n        code = code.toLowerCase();\n        if (code[0] === '#') {\n          var value;\n          if (code[1] === 'x') {\n            value = parseInt(code.slice(2), 16);\n          } else {\n            value = Number(code.slice(1));\n          }\n          return fromCodePoint(value);\n        } else {\n          var known = KNOWN_ENTITY_NAMES[code];\n          if (known) {\n            return known;\n          } // unable to decode\n          return m;\n        }\n      });\n      return text;\n    }\n    Prism.languages.md = Prism.languages.markdown;\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/markdown.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/markup-templating.js":
/*!**********************************************************!*\
  !*** ./node_modules/refractor/lang/markup-templating.js ***!
  \**********************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = markupTemplating;\nmarkupTemplating.displayName = 'markupTemplating';\nmarkupTemplating.aliases = [];\nfunction markupTemplating(Prism) {\n  ;\n  (function (Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___';\n    }\n    Object.defineProperties(Prism.languages['markup-templating'] = {}, {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function value(env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return;\n          }\n          var tokenStack = env.tokenStack = [];\n          env.code = env.code.replace(placeholderPattern, function (match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match;\n            }\n            var i = tokenStack.length;\n            var placeholder; // Check for existing strings\n            while (env.code.indexOf(placeholder = getPlaceholder(language, i)) !== -1) {\n              ++i;\n            } // Create a sparse array\n            tokenStack[i] = match;\n            return placeholder;\n          }); // Switch the grammar to markup\n          env.grammar = Prism.languages.markup;\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function value(env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return;\n          } // Switch the grammar back\n          env.grammar = Prism.languages[language];\n          var j = 0;\n          var keys = Object.keys(env.tokenStack);\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break;\n              }\n              var token = tokens[i];\n              if (typeof token === 'string' || token.content && typeof token.content === 'string') {\n                var k = keys[j];\n                var t = env.tokenStack[k];\n                var s = typeof token === 'string' ? token : token.content;\n                var placeholder = getPlaceholder(language, k);\n                var index = s.indexOf(placeholder);\n                if (index > -1) {\n                  ++j;\n                  var before = s.substring(0, index);\n                  var middle = new Prism.Token(language, Prism.tokenize(t, env.grammar), 'language-' + language, t);\n                  var after = s.substring(index + placeholder.length);\n                  var replacement = [];\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]));\n                  }\n                  replacement.push(middle);\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]));\n                  }\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement));\n                  } else {\n                    token.content = replacement;\n                  }\n                }\n              } else if (token.content\n              /* && typeof token.content !== 'string' */) {\n                walkTokens(token.content);\n              }\n            }\n            return tokens;\n          }\n          walkTokens(env.tokens);\n        }\n      }\n    });\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvbWFya3VwLXRlbXBsYXRpbmcuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxnQkFBZ0I7QUFDakNBLGdCQUFnQixDQUFDQyxXQUFXLEdBQUcsa0JBQWtCO0FBQ2pERCxnQkFBZ0IsQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDN0IsU0FBU0YsZ0JBQWdCQSxDQUFDRyxLQUFLLEVBQUU7RUFDL0I7RUFBQyxDQUFDLFVBQVVBLEtBQUssRUFBRTtJQUNqQjtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtJQUNJLFNBQVNDLGNBQWNBLENBQUNDLFFBQVEsRUFBRUMsS0FBSyxFQUFFO01BQ3ZDLE9BQU8sS0FBSyxHQUFHRCxRQUFRLENBQUNFLFdBQVcsQ0FBQyxDQUFDLEdBQUdELEtBQUssR0FBRyxLQUFLO0lBQ3ZEO0lBQ0FFLE1BQU0sQ0FBQ0MsZ0JBQWdCLENBQUVOLEtBQUssQ0FBQ08sU0FBUyxDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUc7TUFDbkVDLGlCQUFpQixFQUFFO1FBQ2pCO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7UUFDUUMsS0FBSyxFQUFFLFNBQVBBLEtBQUtBLENBQVlDLEdBQUcsRUFBRVIsUUFBUSxFQUFFUyxrQkFBa0IsRUFBRUMsYUFBYSxFQUFFO1VBQ2pFLElBQUlGLEdBQUcsQ0FBQ1IsUUFBUSxLQUFLQSxRQUFRLEVBQUU7WUFDN0I7VUFDRjtVQUNBLElBQUlXLFVBQVUsR0FBSUgsR0FBRyxDQUFDRyxVQUFVLEdBQUcsRUFBRztVQUN0Q0gsR0FBRyxDQUFDSSxJQUFJLEdBQUdKLEdBQUcsQ0FBQ0ksSUFBSSxDQUFDQyxPQUFPLENBQUNKLGtCQUFrQixFQUFFLFVBQVVLLEtBQUssRUFBRTtZQUMvRCxJQUFJLE9BQU9KLGFBQWEsS0FBSyxVQUFVLElBQUksQ0FBQ0EsYUFBYSxDQUFDSSxLQUFLLENBQUMsRUFBRTtjQUNoRSxPQUFPQSxLQUFLO1lBQ2Q7WUFDQSxJQUFJQyxDQUFDLEdBQUdKLFVBQVUsQ0FBQ0ssTUFBTTtZQUN6QixJQUFJQyxXQUFXLEVBQUM7WUFDaEIsT0FDRVQsR0FBRyxDQUFDSSxJQUFJLENBQUNNLE9BQU8sQ0FBRUQsV0FBVyxHQUFHbEIsY0FBYyxDQUFDQyxRQUFRLEVBQUVlLENBQUMsQ0FBRSxDQUFDLEtBQzdELENBQUMsQ0FBQyxFQUNGO2NBQ0EsRUFBRUEsQ0FBQztZQUNMLENBQUMsQ0FBQztZQUNGSixVQUFVLENBQUNJLENBQUMsQ0FBQyxHQUFHRCxLQUFLO1lBQ3JCLE9BQU9HLFdBQVc7VUFDcEIsQ0FBQyxDQUFDLEVBQUM7VUFDSFQsR0FBRyxDQUFDVyxPQUFPLEdBQUdyQixLQUFLLENBQUNPLFNBQVMsQ0FBQ2UsTUFBTTtRQUN0QztNQUNGLENBQUM7TUFDREMsb0JBQW9CLEVBQUU7UUFDcEI7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO1FBQ1FkLEtBQUssRUFBRSxTQUFQQSxLQUFLQSxDQUFZQyxHQUFHLEVBQUVSLFFBQVEsRUFBRTtVQUM5QixJQUFJUSxHQUFHLENBQUNSLFFBQVEsS0FBS0EsUUFBUSxJQUFJLENBQUNRLEdBQUcsQ0FBQ0csVUFBVSxFQUFFO1lBQ2hEO1VBQ0YsQ0FBQyxDQUFDO1VBQ0ZILEdBQUcsQ0FBQ1csT0FBTyxHQUFHckIsS0FBSyxDQUFDTyxTQUFTLENBQUNMLFFBQVEsQ0FBQztVQUN2QyxJQUFJc0IsQ0FBQyxHQUFHLENBQUM7VUFDVCxJQUFJQyxJQUFJLEdBQUdwQixNQUFNLENBQUNvQixJQUFJLENBQUNmLEdBQUcsQ0FBQ0csVUFBVSxDQUFDO1VBQ3RDLFNBQVNhLFVBQVVBLENBQUNDLE1BQU0sRUFBRTtZQUMxQixLQUFLLElBQUlWLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR1UsTUFBTSxDQUFDVCxNQUFNLEVBQUVELENBQUMsRUFBRSxFQUFFO2NBQ3RDO2NBQ0EsSUFBSU8sQ0FBQyxJQUFJQyxJQUFJLENBQUNQLE1BQU0sRUFBRTtnQkFDcEI7Y0FDRjtjQUNBLElBQUlVLEtBQUssR0FBR0QsTUFBTSxDQUFDVixDQUFDLENBQUM7Y0FDckIsSUFDRSxPQUFPVyxLQUFLLEtBQUssUUFBUSxJQUN4QkEsS0FBSyxDQUFDQyxPQUFPLElBQUksT0FBT0QsS0FBSyxDQUFDQyxPQUFPLEtBQUssUUFBUyxFQUNwRDtnQkFDQSxJQUFJQyxDQUFDLEdBQUdMLElBQUksQ0FBQ0QsQ0FBQyxDQUFDO2dCQUNmLElBQUlPLENBQUMsR0FBR3JCLEdBQUcsQ0FBQ0csVUFBVSxDQUFDaUIsQ0FBQyxDQUFDO2dCQUN6QixJQUFJRSxDQUFDLEdBQUcsT0FBT0osS0FBSyxLQUFLLFFBQVEsR0FBR0EsS0FBSyxHQUFHQSxLQUFLLENBQUNDLE9BQU87Z0JBQ3pELElBQUlWLFdBQVcsR0FBR2xCLGNBQWMsQ0FBQ0MsUUFBUSxFQUFFNEIsQ0FBQyxDQUFDO2dCQUM3QyxJQUFJM0IsS0FBSyxHQUFHNkIsQ0FBQyxDQUFDWixPQUFPLENBQUNELFdBQVcsQ0FBQztnQkFDbEMsSUFBSWhCLEtBQUssR0FBRyxDQUFDLENBQUMsRUFBRTtrQkFDZCxFQUFFcUIsQ0FBQztrQkFDSCxJQUFJUyxNQUFNLEdBQUdELENBQUMsQ0FBQ0UsU0FBUyxDQUFDLENBQUMsRUFBRS9CLEtBQUssQ0FBQztrQkFDbEMsSUFBSWdDLE1BQU0sR0FBRyxJQUFJbkMsS0FBSyxDQUFDb0MsS0FBSyxDQUMxQmxDLFFBQVEsRUFDUkYsS0FBSyxDQUFDcUMsUUFBUSxDQUFDTixDQUFDLEVBQUVyQixHQUFHLENBQUNXLE9BQU8sQ0FBQyxFQUM5QixXQUFXLEdBQUduQixRQUFRLEVBQ3RCNkIsQ0FDRixDQUFDO2tCQUNELElBQUlPLEtBQUssR0FBR04sQ0FBQyxDQUFDRSxTQUFTLENBQUMvQixLQUFLLEdBQUdnQixXQUFXLENBQUNELE1BQU0sQ0FBQztrQkFDbkQsSUFBSXFCLFdBQVcsR0FBRyxFQUFFO2tCQUNwQixJQUFJTixNQUFNLEVBQUU7b0JBQ1ZNLFdBQVcsQ0FBQ0MsSUFBSSxDQUFDQyxLQUFLLENBQUNGLFdBQVcsRUFBRWIsVUFBVSxDQUFDLENBQUNPLE1BQU0sQ0FBQyxDQUFDLENBQUM7a0JBQzNEO2tCQUNBTSxXQUFXLENBQUNDLElBQUksQ0FBQ0wsTUFBTSxDQUFDO2tCQUN4QixJQUFJRyxLQUFLLEVBQUU7b0JBQ1RDLFdBQVcsQ0FBQ0MsSUFBSSxDQUFDQyxLQUFLLENBQUNGLFdBQVcsRUFBRWIsVUFBVSxDQUFDLENBQUNZLEtBQUssQ0FBQyxDQUFDLENBQUM7a0JBQzFEO2tCQUNBLElBQUksT0FBT1YsS0FBSyxLQUFLLFFBQVEsRUFBRTtvQkFDN0JELE1BQU0sQ0FBQ2UsTUFBTSxDQUFDRCxLQUFLLENBQUNkLE1BQU0sRUFBRSxDQUFDVixDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMwQixNQUFNLENBQUNKLFdBQVcsQ0FBQyxDQUFDO2tCQUN6RCxDQUFDLE1BQU07b0JBQ0xYLEtBQUssQ0FBQ0MsT0FBTyxHQUFHVSxXQUFXO2tCQUM3QjtnQkFDRjtjQUNGLENBQUMsTUFBTSxJQUNMWCxLQUFLLENBQUNDO2NBQ04sNENBQ0E7Z0JBQ0FILFVBQVUsQ0FBQ0UsS0FBSyxDQUFDQyxPQUFPLENBQUM7Y0FDM0I7WUFDRjtZQUNBLE9BQU9GLE1BQU07VUFDZjtVQUNBRCxVQUFVLENBQUNoQixHQUFHLENBQUNpQixNQUFNLENBQUM7UUFDeEI7TUFDRjtJQUNGLENBQUMsQ0FBQztFQUNKLENBQUMsRUFBRTNCLEtBQUssQ0FBQztBQUNYIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcbWFya3VwLXRlbXBsYXRpbmcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gbWFya3VwVGVtcGxhdGluZ1xubWFya3VwVGVtcGxhdGluZy5kaXNwbGF5TmFtZSA9ICdtYXJrdXBUZW1wbGF0aW5nJ1xubWFya3VwVGVtcGxhdGluZy5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIG1hcmt1cFRlbXBsYXRpbmcoUHJpc20pIHtcbiAgOyhmdW5jdGlvbiAoUHJpc20pIHtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBwbGFjZWhvbGRlciBmb3IgdGhlIGdpdmVuIGxhbmd1YWdlIGlkIGFuZCBpbmRleC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsYW5ndWFnZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gaW5kZXhcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFBsYWNlaG9sZGVyKGxhbmd1YWdlLCBpbmRleCkge1xuICAgICAgcmV0dXJuICdfX18nICsgbGFuZ3VhZ2UudG9VcHBlckNhc2UoKSArIGluZGV4ICsgJ19fXydcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoKFByaXNtLmxhbmd1YWdlc1snbWFya3VwLXRlbXBsYXRpbmcnXSA9IHt9KSwge1xuICAgICAgYnVpbGRQbGFjZWhvbGRlcnM6IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRva2VuaXplIGFsbCBpbmxpbmUgdGVtcGxhdGluZyBleHByZXNzaW9ucyBtYXRjaGluZyBgcGxhY2Vob2xkZXJQYXR0ZXJuYC5cbiAgICAgICAgICpcbiAgICAgICAgICogSWYgYHJlcGxhY2VGaWx0ZXJgIGlzIHByb3ZpZGVkLCBvbmx5IG1hdGNoZXMgb2YgYHBsYWNlaG9sZGVyUGF0dGVybmAgZm9yIHdoaWNoIGByZXBsYWNlRmlsdGVyYCByZXR1cm5zXG4gICAgICAgICAqIGB0cnVlYCB3aWxsIGJlIHJlcGxhY2VkLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge29iamVjdH0gZW52IFRoZSBlbnZpcm9ubWVudCBvZiB0aGUgYGJlZm9yZS10b2tlbml6ZWAgaG9vay5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGxhbmd1YWdlIFRoZSBsYW5ndWFnZSBpZC5cbiAgICAgICAgICogQHBhcmFtIHtSZWdFeHB9IHBsYWNlaG9sZGVyUGF0dGVybiBUaGUgbWF0Y2hlcyBvZiB0aGlzIHBhdHRlcm4gd2lsbCBiZSByZXBsYWNlZCBieSBwbGFjZWhvbGRlcnMuXG4gICAgICAgICAqIEBwYXJhbSB7KG1hdGNoOiBzdHJpbmcpID0+IGJvb2xlYW59IFtyZXBsYWNlRmlsdGVyXVxuICAgICAgICAgKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIChlbnYsIGxhbmd1YWdlLCBwbGFjZWhvbGRlclBhdHRlcm4sIHJlcGxhY2VGaWx0ZXIpIHtcbiAgICAgICAgICBpZiAoZW52Lmxhbmd1YWdlICE9PSBsYW5ndWFnZSkge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciB0b2tlblN0YWNrID0gKGVudi50b2tlblN0YWNrID0gW10pXG4gICAgICAgICAgZW52LmNvZGUgPSBlbnYuY29kZS5yZXBsYWNlKHBsYWNlaG9sZGVyUGF0dGVybiwgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHJlcGxhY2VGaWx0ZXIgPT09ICdmdW5jdGlvbicgJiYgIXJlcGxhY2VGaWx0ZXIobWF0Y2gpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBtYXRjaFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGkgPSB0b2tlblN0YWNrLmxlbmd0aFxuICAgICAgICAgICAgdmFyIHBsYWNlaG9sZGVyIC8vIENoZWNrIGZvciBleGlzdGluZyBzdHJpbmdzXG4gICAgICAgICAgICB3aGlsZSAoXG4gICAgICAgICAgICAgIGVudi5jb2RlLmluZGV4T2YoKHBsYWNlaG9sZGVyID0gZ2V0UGxhY2Vob2xkZXIobGFuZ3VhZ2UsIGkpKSkgIT09XG4gICAgICAgICAgICAgIC0xXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgKytpXG4gICAgICAgICAgICB9IC8vIENyZWF0ZSBhIHNwYXJzZSBhcnJheVxuICAgICAgICAgICAgdG9rZW5TdGFja1tpXSA9IG1hdGNoXG4gICAgICAgICAgICByZXR1cm4gcGxhY2Vob2xkZXJcbiAgICAgICAgICB9KSAvLyBTd2l0Y2ggdGhlIGdyYW1tYXIgdG8gbWFya3VwXG4gICAgICAgICAgZW52LmdyYW1tYXIgPSBQcmlzbS5sYW5ndWFnZXMubWFya3VwXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB0b2tlbml6ZVBsYWNlaG9sZGVyczoge1xuICAgICAgICAvKipcbiAgICAgICAgICogUmVwbGFjZSBwbGFjZWhvbGRlcnMgd2l0aCBwcm9wZXIgdG9rZW5zIGFmdGVyIHRva2VuaXppbmcuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBlbnYgVGhlIGVudmlyb25tZW50IG9mIHRoZSBgYWZ0ZXItdG9rZW5pemVgIGhvb2suXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsYW5ndWFnZSBUaGUgbGFuZ3VhZ2UgaWQuXG4gICAgICAgICAqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKGVudiwgbGFuZ3VhZ2UpIHtcbiAgICAgICAgICBpZiAoZW52Lmxhbmd1YWdlICE9PSBsYW5ndWFnZSB8fCAhZW52LnRva2VuU3RhY2spIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgIH0gLy8gU3dpdGNoIHRoZSBncmFtbWFyIGJhY2tcbiAgICAgICAgICBlbnYuZ3JhbW1hciA9IFByaXNtLmxhbmd1YWdlc1tsYW5ndWFnZV1cbiAgICAgICAgICB2YXIgaiA9IDBcbiAgICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGVudi50b2tlblN0YWNrKVxuICAgICAgICAgIGZ1bmN0aW9uIHdhbGtUb2tlbnModG9rZW5zKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAvLyBhbGwgcGxhY2Vob2xkZXJzIGFyZSByZXBsYWNlZCBhbHJlYWR5XG4gICAgICAgICAgICAgIGlmIChqID49IGtleXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV1cbiAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycgfHxcbiAgICAgICAgICAgICAgICAodG9rZW4uY29udGVudCAmJiB0eXBlb2YgdG9rZW4uY29udGVudCA9PT0gJ3N0cmluZycpXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHZhciBrID0ga2V5c1tqXVxuICAgICAgICAgICAgICAgIHZhciB0ID0gZW52LnRva2VuU3RhY2tba11cbiAgICAgICAgICAgICAgICB2YXIgcyA9IHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycgPyB0b2tlbiA6IHRva2VuLmNvbnRlbnRcbiAgICAgICAgICAgICAgICB2YXIgcGxhY2Vob2xkZXIgPSBnZXRQbGFjZWhvbGRlcihsYW5ndWFnZSwgaylcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBzLmluZGV4T2YocGxhY2Vob2xkZXIpXG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICsralxuICAgICAgICAgICAgICAgICAgdmFyIGJlZm9yZSA9IHMuc3Vic3RyaW5nKDAsIGluZGV4KVxuICAgICAgICAgICAgICAgICAgdmFyIG1pZGRsZSA9IG5ldyBQcmlzbS5Ub2tlbihcbiAgICAgICAgICAgICAgICAgICAgbGFuZ3VhZ2UsXG4gICAgICAgICAgICAgICAgICAgIFByaXNtLnRva2VuaXplKHQsIGVudi5ncmFtbWFyKSxcbiAgICAgICAgICAgICAgICAgICAgJ2xhbmd1YWdlLScgKyBsYW5ndWFnZSxcbiAgICAgICAgICAgICAgICAgICAgdFxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgdmFyIGFmdGVyID0gcy5zdWJzdHJpbmcoaW5kZXggKyBwbGFjZWhvbGRlci5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICB2YXIgcmVwbGFjZW1lbnQgPSBbXVxuICAgICAgICAgICAgICAgICAgaWYgKGJlZm9yZSkge1xuICAgICAgICAgICAgICAgICAgICByZXBsYWNlbWVudC5wdXNoLmFwcGx5KHJlcGxhY2VtZW50LCB3YWxrVG9rZW5zKFtiZWZvcmVdKSlcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50LnB1c2gobWlkZGxlKVxuICAgICAgICAgICAgICAgICAgaWYgKGFmdGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50LnB1c2guYXBwbHkocmVwbGFjZW1lbnQsIHdhbGtUb2tlbnMoW2FmdGVyXSkpXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICB0b2tlbnMuc3BsaWNlLmFwcGx5KHRva2VucywgW2ksIDFdLmNvbmNhdChyZXBsYWNlbWVudCkpXG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0b2tlbi5jb250ZW50ID0gcmVwbGFjZW1lbnRcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAgICAgdG9rZW4uY29udGVudFxuICAgICAgICAgICAgICAgIC8qICYmIHR5cGVvZiB0b2tlbi5jb250ZW50ICE9PSAnc3RyaW5nJyAqL1xuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICB3YWxrVG9rZW5zKHRva2VuLmNvbnRlbnQpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0b2tlbnNcbiAgICAgICAgICB9XG4gICAgICAgICAgd2Fsa1Rva2VucyhlbnYudG9rZW5zKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgfSkoUHJpc20pXG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIm1hcmt1cFRlbXBsYXRpbmciLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImdldFBsYWNlaG9sZGVyIiwibGFuZ3VhZ2UiLCJpbmRleCIsInRvVXBwZXJDYXNlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydGllcyIsImxhbmd1YWdlcyIsImJ1aWxkUGxhY2Vob2xkZXJzIiwidmFsdWUiLCJlbnYiLCJwbGFjZWhvbGRlclBhdHRlcm4iLCJyZXBsYWNlRmlsdGVyIiwidG9rZW5TdGFjayIsImNvZGUiLCJyZXBsYWNlIiwibWF0Y2giLCJpIiwibGVuZ3RoIiwicGxhY2Vob2xkZXIiLCJpbmRleE9mIiwiZ3JhbW1hciIsIm1hcmt1cCIsInRva2VuaXplUGxhY2Vob2xkZXJzIiwiaiIsImtleXMiLCJ3YWxrVG9rZW5zIiwidG9rZW5zIiwidG9rZW4iLCJjb250ZW50IiwiayIsInQiLCJzIiwiYmVmb3JlIiwic3Vic3RyaW5nIiwibWlkZGxlIiwiVG9rZW4iLCJ0b2tlbml6ZSIsImFmdGVyIiwicmVwbGFjZW1lbnQiLCJwdXNoIiwiYXBwbHkiLCJzcGxpY2UiLCJjb25jYXQiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/markup-templating.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/markup.js":
/*!***********************************************!*\
  !*** ./node_modules/refractor/lang/markup.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = markup;\nmarkup.displayName = 'markup';\nmarkup.aliases = ['html', 'mathml', 'svg', 'xml', 'ssml', 'atom', 'rss'];\nfunction markup(Prism) {\n  Prism.languages.markup = {\n    comment: {\n      pattern: /<!--(?:(?!<!--)[\\s\\S])*?-->/,\n      greedy: true\n    },\n    prolog: {\n      pattern: /<\\?[\\s\\S]+?\\?>/,\n      greedy: true\n    },\n    doctype: {\n      // https://www.w3.org/TR/xml/#NT-doctypedecl\n      pattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,\n      greedy: true,\n      inside: {\n        'internal-subset': {\n          pattern: /(^[^\\[]*\\[)[\\s\\S]+(?=\\]>$)/,\n          lookbehind: true,\n          greedy: true,\n          inside: null // see below\n        },\n\n        string: {\n          pattern: /\"[^\"]*\"|'[^']*'/,\n          greedy: true\n        },\n        punctuation: /^<!|>$|[[\\]]/,\n        'doctype-tag': /^DOCTYPE/i,\n        name: /[^\\s<>'\"]+/\n      }\n    },\n    cdata: {\n      pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n      greedy: true\n    },\n    tag: {\n      pattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,\n      greedy: true,\n      inside: {\n        tag: {\n          pattern: /^<\\/?[^\\s>\\/]+/,\n          inside: {\n            punctuation: /^<\\/?/,\n            namespace: /^[^\\s>\\/:]+:/\n          }\n        },\n        'special-attr': [],\n        'attr-value': {\n          pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\n          inside: {\n            punctuation: [{\n              pattern: /^=/,\n              alias: 'attr-equals'\n            }, /\"|'/]\n          }\n        },\n        punctuation: /\\/?>/,\n        'attr-name': {\n          pattern: /[^\\s>\\/]+/,\n          inside: {\n            namespace: /^[^\\s>\\/:]+:/\n          }\n        }\n      }\n    },\n    entity: [{\n      pattern: /&[\\da-z]{1,8};/i,\n      alias: 'named-entity'\n    }, /&#x?[\\da-f]{1,8};/i]\n  };\n  Prism.languages.markup['tag'].inside['attr-value'].inside['entity'] = Prism.languages.markup['entity'];\n  Prism.languages.markup['doctype'].inside['internal-subset'].inside = Prism.languages.markup; // Plugin to make entity title show the real entity, idea by Roman Komarov\n  Prism.hooks.add('wrap', function (env) {\n    if (env.type === 'entity') {\n      env.attributes['title'] = env.content.value.replace(/&amp;/, '&');\n    }\n  });\n  Object.defineProperty(Prism.languages.markup.tag, 'addInlined', {\n    /**\n     * Adds an inlined language to markup.\n     *\n     * An example of an inlined language is CSS with `<style>` tags.\n     *\n     * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n     * case insensitive.\n     * @param {string} lang The language key.\n     * @example\n     * addInlined('style', 'css');\n     */\n    value: function addInlined(tagName, lang) {\n      var includedCdataInside = {};\n      includedCdataInside['language-' + lang] = {\n        pattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n        lookbehind: true,\n        inside: Prism.languages[lang]\n      };\n      includedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;\n      var inside = {\n        'included-cdata': {\n          pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n          inside: includedCdataInside\n        }\n      };\n      inside['language-' + lang] = {\n        pattern: /[\\s\\S]+/,\n        inside: Prism.languages[lang]\n      };\n      var def = {};\n      def[tagName] = {\n        pattern: RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function () {\n          return tagName;\n        }), 'i'),\n        lookbehind: true,\n        greedy: true,\n        inside: inside\n      };\n      Prism.languages.insertBefore('markup', 'cdata', def);\n    }\n  });\n  Object.defineProperty(Prism.languages.markup.tag, 'addAttribute', {\n    /**\n     * Adds an pattern to highlight languages embedded in HTML attributes.\n     *\n     * An example of an inlined language is CSS with `style` attributes.\n     *\n     * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as\n     * case insensitive.\n     * @param {string} lang The language key.\n     * @example\n     * addAttribute('style', 'css');\n     */\n    value: function value(attrName, lang) {\n      Prism.languages.markup.tag.inside['special-attr'].push({\n        pattern: RegExp(/(^|[\"'\\s])/.source + '(?:' + attrName + ')' + /\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))/.source, 'i'),\n        lookbehind: true,\n        inside: {\n          'attr-name': /^[^\\s=]+/,\n          'attr-value': {\n            pattern: /=[\\s\\S]+/,\n            inside: {\n              value: {\n                pattern: /(^=\\s*([\"']|(?![\"'])))\\S[\\s\\S]*(?=\\2$)/,\n                lookbehind: true,\n                alias: [lang, 'language-' + lang],\n                inside: Prism.languages[lang]\n              },\n              punctuation: [{\n                pattern: /^=/,\n                alias: 'attr-equals'\n              }, /\"|'/]\n            }\n          }\n        }\n      });\n    }\n  });\n  Prism.languages.html = Prism.languages.markup;\n  Prism.languages.mathml = Prism.languages.markup;\n  Prism.languages.svg = Prism.languages.markup;\n  Prism.languages.xml = Prism.languages.extend('markup', {});\n  Prism.languages.ssml = Prism.languages.xml;\n  Prism.languages.atom = Prism.languages.xml;\n  Prism.languages.rss = Prism.languages.xml;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/markup.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/matlab.js":
/*!***********************************************!*\
  !*** ./node_modules/refractor/lang/matlab.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = matlab;\nmatlab.displayName = 'matlab';\nmatlab.aliases = [];\nfunction matlab(Prism) {\n  Prism.languages.matlab = {\n    comment: [/%\\{[\\s\\S]*?\\}%/, /%.+/],\n    string: {\n      pattern: /\\B'(?:''|[^'\\r\\n])*'/,\n      greedy: true\n    },\n    // FIXME We could handle imaginary numbers as a whole\n    number: /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[eE][+-]?\\d+)?(?:[ij])?|\\b[ij]\\b/,\n    keyword: /\\b(?:NaN|break|case|catch|continue|else|elseif|end|for|function|if|inf|otherwise|parfor|pause|pi|return|switch|try|while)\\b/,\n    \"function\": /\\b(?!\\d)\\w+(?=\\s*\\()/,\n    operator: /\\.?[*^\\/\\\\']|[+\\-:@]|[<>=~]=?|&&?|\\|\\|?/,\n    punctuation: /\\.{3}|[.,;\\[\\](){}!]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvbWF0bGFiLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsTUFBTTtBQUN2QkEsTUFBTSxDQUFDQyxXQUFXLEdBQUcsUUFBUTtBQUM3QkQsTUFBTSxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNuQixTQUFTRixNQUFNQSxDQUFDRyxLQUFLLEVBQUU7RUFDckJBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixNQUFNLEdBQUc7SUFDdkJLLE9BQU8sRUFBRSxDQUFDLGdCQUFnQixFQUFFLEtBQUssQ0FBQztJQUNsQ0MsTUFBTSxFQUFFO01BQ05DLE9BQU8sRUFBRSxzQkFBc0I7TUFDL0JDLE1BQU0sRUFBRTtJQUNWLENBQUM7SUFDRDtJQUNBQyxNQUFNLEVBQUUsZ0VBQWdFO0lBQ3hFQyxPQUFPLEVBQ0wsNkhBQTZIO0lBQy9ILFlBQVUsc0JBQXNCO0lBQ2hDQyxRQUFRLEVBQUUseUNBQXlDO0lBQ25EQyxXQUFXLEVBQUU7RUFDZixDQUFDO0FBQ0giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxtYXRsYWIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gbWF0bGFiXG5tYXRsYWIuZGlzcGxheU5hbWUgPSAnbWF0bGFiJ1xubWF0bGFiLmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24gbWF0bGFiKFByaXNtKSB7XG4gIFByaXNtLmxhbmd1YWdlcy5tYXRsYWIgPSB7XG4gICAgY29tbWVudDogWy8lXFx7W1xcc1xcU10qP1xcfSUvLCAvJS4rL10sXG4gICAgc3RyaW5nOiB7XG4gICAgICBwYXR0ZXJuOiAvXFxCJyg/OicnfFteJ1xcclxcbl0pKicvLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICAvLyBGSVhNRSBXZSBjb3VsZCBoYW5kbGUgaW1hZ2luYXJ5IG51bWJlcnMgYXMgYSB3aG9sZVxuICAgIG51bWJlcjogLyg/OlxcYlxcZCsoPzpcXC5cXGQqKT98XFxCXFwuXFxkKykoPzpbZUVdWystXT9cXGQrKT8oPzpbaWpdKT98XFxiW2lqXVxcYi8sXG4gICAga2V5d29yZDpcbiAgICAgIC9cXGIoPzpOYU58YnJlYWt8Y2FzZXxjYXRjaHxjb250aW51ZXxlbHNlfGVsc2VpZnxlbmR8Zm9yfGZ1bmN0aW9ufGlmfGluZnxvdGhlcndpc2V8cGFyZm9yfHBhdXNlfHBpfHJldHVybnxzd2l0Y2h8dHJ5fHdoaWxlKVxcYi8sXG4gICAgZnVuY3Rpb246IC9cXGIoPyFcXGQpXFx3Kyg/PVxccypcXCgpLyxcbiAgICBvcGVyYXRvcjogL1xcLj9bKl5cXC9cXFxcJ118WytcXC06QF18Wzw+PX5dPT98JiY/fFxcfFxcfD8vLFxuICAgIHB1bmN0dWF0aW9uOiAvXFwuezN9fFsuLDtcXFtcXF0oKXt9IV0vXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwibWF0bGFiIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJjb21tZW50Iiwic3RyaW5nIiwicGF0dGVybiIsImdyZWVkeSIsIm51bWJlciIsImtleXdvcmQiLCJvcGVyYXRvciIsInB1bmN0dWF0aW9uIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/matlab.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/maxscript.js":
/*!**************************************************!*\
  !*** ./node_modules/refractor/lang/maxscript.js ***!
  \**************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = maxscript;\nmaxscript.displayName = 'maxscript';\nmaxscript.aliases = [];\nfunction maxscript(Prism) {\n  ;\n  (function (Prism) {\n    var keywords = /\\b(?:about|and|animate|as|at|attributes|by|case|catch|collect|continue|coordsys|do|else|exit|fn|for|from|function|global|if|in|local|macroscript|mapped|max|not|of|off|on|or|parameters|persistent|plugin|rcmenu|return|rollout|set|struct|then|throw|to|tool|try|undo|utility|when|where|while|with)\\b/i;\n    Prism.languages.maxscript = {\n      comment: {\n        pattern: /\\/\\*[\\s\\S]*?(?:\\*\\/|$)|--.*/,\n        greedy: true\n      },\n      string: {\n        pattern: /(^|[^\"\\\\@])(?:\"(?:[^\"\\\\]|\\\\[\\s\\S])*\"|@\"[^\"]*\")/,\n        lookbehind: true,\n        greedy: true\n      },\n      path: {\n        pattern: /\\$(?:[\\w/\\\\.*?]|'[^']*')*/,\n        greedy: true,\n        alias: 'string'\n      },\n      'function-call': {\n        pattern: RegExp('((?:' + (\n        // start of line\n        /^/.source + '|' +\n        // operators and other language constructs\n        /[;=<>+\\-*/^({\\[]/.source + '|' +\n        // keywords as part of statements\n        /\\b(?:and|by|case|catch|collect|do|else|if|in|not|or|return|then|to|try|where|while|with)\\b/.source) + ')[ \\t]*)' + '(?!' + keywords.source + ')' + /[a-z_]\\w*\\b/.source + '(?=[ \\t]*(?:' + (\n        // variable\n        '(?!' + keywords.source + ')' + /[a-z_]/.source + '|' +\n        // number\n        /\\d|-\\.?\\d/.source + '|' +\n        // other expressions or literals\n        /[({'\"$@#?]/.source) + '))', 'im'),\n        lookbehind: true,\n        greedy: true,\n        alias: 'function'\n      },\n      'function-definition': {\n        pattern: /(\\b(?:fn|function)\\s+)\\w+\\b/i,\n        lookbehind: true,\n        alias: 'function'\n      },\n      argument: {\n        pattern: /\\b[a-z_]\\w*(?=:)/i,\n        alias: 'attr-name'\n      },\n      keyword: keywords,\n      \"boolean\": /\\b(?:false|true)\\b/,\n      time: {\n        pattern: /(^|[^\\w.])(?:(?:(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[eEdD][+-]\\d+|[LP])?[msft])+|\\d+:\\d+(?:\\.\\d*)?)(?![\\w.:])/,\n        lookbehind: true,\n        alias: 'number'\n      },\n      number: [{\n        pattern: /(^|[^\\w.])(?:(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[eEdD][+-]\\d+|[LP])?|0x[a-fA-F0-9]+)(?![\\w.:])/,\n        lookbehind: true\n      }, /\\b(?:e|pi)\\b/],\n      constant: /\\b(?:dontcollect|ok|silentValue|undefined|unsupplied)\\b/,\n      color: {\n        pattern: /\\b(?:black|blue|brown|gray|green|orange|red|white|yellow)\\b/i,\n        alias: 'constant'\n      },\n      operator: /[-+*/<>=!]=?|[&^?]|#(?!\\()/,\n      punctuation: /[()\\[\\]{}.:,;]|#(?=\\()|\\\\$/m\n    };\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvbWF4c2NyaXB0LmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsU0FBUztBQUMxQkEsU0FBUyxDQUFDQyxXQUFXLEdBQUcsV0FBVztBQUNuQ0QsU0FBUyxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUN0QixTQUFTRixTQUFTQSxDQUFDRyxLQUFLLEVBQUU7RUFDeEI7RUFBQyxDQUFDLFVBQVVBLEtBQUssRUFBRTtJQUNqQixJQUFJQyxRQUFRLEdBQ1YsMFNBQTBTO0lBQzVTRCxLQUFLLENBQUNFLFNBQVMsQ0FBQ0wsU0FBUyxHQUFHO01BQzFCTSxPQUFPLEVBQUU7UUFDUEMsT0FBTyxFQUFFLDZCQUE2QjtRQUN0Q0MsTUFBTSxFQUFFO01BQ1YsQ0FBQztNQUNEQyxNQUFNLEVBQUU7UUFDTkYsT0FBTyxFQUFFLGdEQUFnRDtRQUN6REcsVUFBVSxFQUFFLElBQUk7UUFDaEJGLE1BQU0sRUFBRTtNQUNWLENBQUM7TUFDREcsSUFBSSxFQUFFO1FBQ0pKLE9BQU8sRUFBRSwyQkFBMkI7UUFDcENDLE1BQU0sRUFBRSxJQUFJO1FBQ1pJLEtBQUssRUFBRTtNQUNULENBQUM7TUFDRCxlQUFlLEVBQUU7UUFDZkwsT0FBTyxFQUFFTSxNQUFNLENBQ2IsTUFBTTtRQUFHO1FBQ04sR0FBRyxDQUFDQyxNQUFNLEdBQ1QsR0FBRztRQUFHO1FBQ04sa0JBQWtCLENBQUNBLE1BQU0sR0FDekIsR0FBRztRQUFHO1FBQ04sNEZBQTRGLENBQ3pGQSxNQUFNLENBQUMsR0FDWixVQUFVLEdBQ1YsS0FBSyxHQUNMVixRQUFRLENBQUNVLE1BQU0sR0FDZixHQUFHLEdBQ0gsYUFBYSxDQUFDQSxNQUFNLEdBQ3BCLGNBQWM7UUFBRztRQUNoQixLQUFLLEdBQ0pWLFFBQVEsQ0FBQ1UsTUFBTSxHQUNmLEdBQUcsR0FDSCxRQUFRLENBQUNBLE1BQU0sR0FDZixHQUFHO1FBQUc7UUFDTixXQUFXLENBQUNBLE1BQU0sR0FDbEIsR0FBRztRQUFHO1FBQ04sWUFBWSxDQUFDQSxNQUFNLENBQUMsR0FDdEIsSUFBSSxFQUNOLElBQ0YsQ0FBQztRQUNESixVQUFVLEVBQUUsSUFBSTtRQUNoQkYsTUFBTSxFQUFFLElBQUk7UUFDWkksS0FBSyxFQUFFO01BQ1QsQ0FBQztNQUNELHFCQUFxQixFQUFFO1FBQ3JCTCxPQUFPLEVBQUUsOEJBQThCO1FBQ3ZDRyxVQUFVLEVBQUUsSUFBSTtRQUNoQkUsS0FBSyxFQUFFO01BQ1QsQ0FBQztNQUNERyxRQUFRLEVBQUU7UUFDUlIsT0FBTyxFQUFFLG1CQUFtQjtRQUM1QkssS0FBSyxFQUFFO01BQ1QsQ0FBQztNQUNESSxPQUFPLEVBQUVaLFFBQVE7TUFDakIsV0FBUyxvQkFBb0I7TUFDN0JhLElBQUksRUFBRTtRQUNKVixPQUFPLEVBQ0wscUdBQXFHO1FBQ3ZHRyxVQUFVLEVBQUUsSUFBSTtRQUNoQkUsS0FBSyxFQUFFO01BQ1QsQ0FBQztNQUNETSxNQUFNLEVBQUUsQ0FDTjtRQUNFWCxPQUFPLEVBQ0wsdUZBQXVGO1FBQ3pGRyxVQUFVLEVBQUU7TUFDZCxDQUFDLEVBQ0QsY0FBYyxDQUNmO01BQ0RTLFFBQVEsRUFBRSx5REFBeUQ7TUFDbkVDLEtBQUssRUFBRTtRQUNMYixPQUFPLEVBQUUsOERBQThEO1FBQ3ZFSyxLQUFLLEVBQUU7TUFDVCxDQUFDO01BQ0RTLFFBQVEsRUFBRSw0QkFBNEI7TUFDdENDLFdBQVcsRUFBRTtJQUNmLENBQUM7RUFDSCxDQUFDLEVBQUVuQixLQUFLLENBQUM7QUFDWCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXG1heHNjcmlwdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBtYXhzY3JpcHRcbm1heHNjcmlwdC5kaXNwbGF5TmFtZSA9ICdtYXhzY3JpcHQnXG5tYXhzY3JpcHQuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBtYXhzY3JpcHQoUHJpc20pIHtcbiAgOyhmdW5jdGlvbiAoUHJpc20pIHtcbiAgICB2YXIga2V5d29yZHMgPVxuICAgICAgL1xcYig/OmFib3V0fGFuZHxhbmltYXRlfGFzfGF0fGF0dHJpYnV0ZXN8Ynl8Y2FzZXxjYXRjaHxjb2xsZWN0fGNvbnRpbnVlfGNvb3Jkc3lzfGRvfGVsc2V8ZXhpdHxmbnxmb3J8ZnJvbXxmdW5jdGlvbnxnbG9iYWx8aWZ8aW58bG9jYWx8bWFjcm9zY3JpcHR8bWFwcGVkfG1heHxub3R8b2Z8b2ZmfG9ufG9yfHBhcmFtZXRlcnN8cGVyc2lzdGVudHxwbHVnaW58cmNtZW51fHJldHVybnxyb2xsb3V0fHNldHxzdHJ1Y3R8dGhlbnx0aHJvd3x0b3x0b29sfHRyeXx1bmRvfHV0aWxpdHl8d2hlbnx3aGVyZXx3aGlsZXx3aXRoKVxcYi9pXG4gICAgUHJpc20ubGFuZ3VhZ2VzLm1heHNjcmlwdCA9IHtcbiAgICAgIGNvbW1lbnQ6IHtcbiAgICAgICAgcGF0dGVybjogL1xcL1xcKltcXHNcXFNdKj8oPzpcXCpcXC98JCl8LS0uKi8sXG4gICAgICAgIGdyZWVkeTogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHN0cmluZzoge1xuICAgICAgICBwYXR0ZXJuOiAvKF58W15cIlxcXFxAXSkoPzpcIig/OlteXCJcXFxcXXxcXFxcW1xcc1xcU10pKlwifEBcIlteXCJdKlwiKS8sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGdyZWVkeTogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHBhdGg6IHtcbiAgICAgICAgcGF0dGVybjogL1xcJCg/OltcXHcvXFxcXC4qP118J1teJ10qJykqLyxcbiAgICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgICBhbGlhczogJ3N0cmluZydcbiAgICAgIH0sXG4gICAgICAnZnVuY3Rpb24tY2FsbCc6IHtcbiAgICAgICAgcGF0dGVybjogUmVnRXhwKFxuICAgICAgICAgICcoKD86JyArIC8vIHN0YXJ0IG9mIGxpbmVcbiAgICAgICAgICAgICgvXi8uc291cmNlICtcbiAgICAgICAgICAgICAgJ3wnICsgLy8gb3BlcmF0b3JzIGFuZCBvdGhlciBsYW5ndWFnZSBjb25zdHJ1Y3RzXG4gICAgICAgICAgICAgIC9bOz08PitcXC0qL14oe1xcW10vLnNvdXJjZSArXG4gICAgICAgICAgICAgICd8JyArIC8vIGtleXdvcmRzIGFzIHBhcnQgb2Ygc3RhdGVtZW50c1xuICAgICAgICAgICAgICAvXFxiKD86YW5kfGJ5fGNhc2V8Y2F0Y2h8Y29sbGVjdHxkb3xlbHNlfGlmfGlufG5vdHxvcnxyZXR1cm58dGhlbnx0b3x0cnl8d2hlcmV8d2hpbGV8d2l0aClcXGIvXG4gICAgICAgICAgICAgICAgLnNvdXJjZSkgK1xuICAgICAgICAgICAgJylbIFxcdF0qKScgK1xuICAgICAgICAgICAgJyg/IScgK1xuICAgICAgICAgICAga2V5d29yZHMuc291cmNlICtcbiAgICAgICAgICAgICcpJyArXG4gICAgICAgICAgICAvW2Etel9dXFx3KlxcYi8uc291cmNlICtcbiAgICAgICAgICAgICcoPz1bIFxcdF0qKD86JyArIC8vIHZhcmlhYmxlXG4gICAgICAgICAgICAoJyg/IScgK1xuICAgICAgICAgICAgICBrZXl3b3Jkcy5zb3VyY2UgK1xuICAgICAgICAgICAgICAnKScgK1xuICAgICAgICAgICAgICAvW2Etel9dLy5zb3VyY2UgK1xuICAgICAgICAgICAgICAnfCcgKyAvLyBudW1iZXJcbiAgICAgICAgICAgICAgL1xcZHwtXFwuP1xcZC8uc291cmNlICtcbiAgICAgICAgICAgICAgJ3wnICsgLy8gb3RoZXIgZXhwcmVzc2lvbnMgb3IgbGl0ZXJhbHNcbiAgICAgICAgICAgICAgL1soeydcIiRAIz9dLy5zb3VyY2UpICtcbiAgICAgICAgICAgICcpKScsXG4gICAgICAgICAgJ2ltJ1xuICAgICAgICApLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICBncmVlZHk6IHRydWUsXG4gICAgICAgIGFsaWFzOiAnZnVuY3Rpb24nXG4gICAgICB9LFxuICAgICAgJ2Z1bmN0aW9uLWRlZmluaXRpb24nOiB7XG4gICAgICAgIHBhdHRlcm46IC8oXFxiKD86Zm58ZnVuY3Rpb24pXFxzKylcXHcrXFxiL2ksXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGFsaWFzOiAnZnVuY3Rpb24nXG4gICAgICB9LFxuICAgICAgYXJndW1lbnQ6IHtcbiAgICAgICAgcGF0dGVybjogL1xcYlthLXpfXVxcdyooPz06KS9pLFxuICAgICAgICBhbGlhczogJ2F0dHItbmFtZSdcbiAgICAgIH0sXG4gICAgICBrZXl3b3JkOiBrZXl3b3JkcyxcbiAgICAgIGJvb2xlYW46IC9cXGIoPzpmYWxzZXx0cnVlKVxcYi8sXG4gICAgICB0aW1lOiB7XG4gICAgICAgIHBhdHRlcm46XG4gICAgICAgICAgLyhefFteXFx3Ll0pKD86KD86KD86XFxkKyg/OlxcLlxcZCopP3xcXC5cXGQrKSg/OltlRWREXVsrLV1cXGQrfFtMUF0pP1ttc2Z0XSkrfFxcZCs6XFxkKyg/OlxcLlxcZCopPykoPyFbXFx3LjpdKS8sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGFsaWFzOiAnbnVtYmVyJ1xuICAgICAgfSxcbiAgICAgIG51bWJlcjogW1xuICAgICAgICB7XG4gICAgICAgICAgcGF0dGVybjpcbiAgICAgICAgICAgIC8oXnxbXlxcdy5dKSg/Oig/OlxcZCsoPzpcXC5cXGQqKT98XFwuXFxkKykoPzpbZUVkRF1bKy1dXFxkK3xbTFBdKT98MHhbYS1mQS1GMC05XSspKD8hW1xcdy46XSkvLFxuICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgL1xcYig/OmV8cGkpXFxiL1xuICAgICAgXSxcbiAgICAgIGNvbnN0YW50OiAvXFxiKD86ZG9udGNvbGxlY3R8b2t8c2lsZW50VmFsdWV8dW5kZWZpbmVkfHVuc3VwcGxpZWQpXFxiLyxcbiAgICAgIGNvbG9yOiB7XG4gICAgICAgIHBhdHRlcm46IC9cXGIoPzpibGFja3xibHVlfGJyb3dufGdyYXl8Z3JlZW58b3JhbmdlfHJlZHx3aGl0ZXx5ZWxsb3cpXFxiL2ksXG4gICAgICAgIGFsaWFzOiAnY29uc3RhbnQnXG4gICAgICB9LFxuICAgICAgb3BlcmF0b3I6IC9bLSsqLzw+PSFdPT98WyZeP118Iyg/IVxcKCkvLFxuICAgICAgcHVuY3R1YXRpb246IC9bKClcXFtcXF17fS46LDtdfCMoPz1cXCgpfFxcXFwkL21cbiAgICB9XG4gIH0pKFByaXNtKVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJtYXhzY3JpcHQiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImtleXdvcmRzIiwibGFuZ3VhZ2VzIiwiY29tbWVudCIsInBhdHRlcm4iLCJncmVlZHkiLCJzdHJpbmciLCJsb29rYmVoaW5kIiwicGF0aCIsImFsaWFzIiwiUmVnRXhwIiwic291cmNlIiwiYXJndW1lbnQiLCJrZXl3b3JkIiwidGltZSIsIm51bWJlciIsImNvbnN0YW50IiwiY29sb3IiLCJvcGVyYXRvciIsInB1bmN0dWF0aW9uIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/maxscript.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/mel.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/mel.js ***!
  \********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = mel;\nmel.displayName = 'mel';\nmel.aliases = [];\nfunction mel(Prism) {\n  Prism.languages.mel = {\n    comment: /\\/\\/.*/,\n    code: {\n      pattern: /`(?:\\\\.|[^\\\\`\\r\\n])*`/,\n      greedy: true,\n      alias: 'italic',\n      inside: {\n        delimiter: {\n          pattern: /^`|`$/,\n          alias: 'punctuation'\n        } // See rest below\n      }\n    },\n\n    string: {\n      pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n      greedy: true\n    },\n    variable: /\\$\\w+/,\n    number: /\\b0x[\\da-fA-F]+\\b|\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+/,\n    flag: {\n      pattern: /-[^\\d\\W]\\w*/,\n      alias: 'operator'\n    },\n    keyword: /\\b(?:break|case|continue|default|do|else|float|for|global|if|in|int|matrix|proc|return|string|switch|vector|while)\\b/,\n    \"function\": /\\b\\w+(?=\\()|\\b(?:CBG|HfAddAttractorToAS|HfAssignAS|HfBuildEqualMap|HfBuildFurFiles|HfBuildFurImages|HfCancelAFR|HfConnectASToHF|HfCreateAttractor|HfDeleteAS|HfEditAS|HfPerformCreateAS|HfRemoveAttractorFromAS|HfSelectAttached|HfSelectAttractors|HfUnAssignAS|Mayatomr|about|abs|addAttr|addAttributeEditorNodeHelp|addDynamic|addNewShelfTab|addPP|addPanelCategory|addPrefixToName|advanceToNextDrivenKey|affectedNet|affects|aimConstraint|air|alias|aliasAttr|align|alignCtx|alignCurve|alignSurface|allViewFit|ambientLight|angle|angleBetween|animCone|animCurveEditor|animDisplay|animView|annotate|appendStringArray|applicationName|applyAttrPreset|applyTake|arcLenDimContext|arcLengthDimension|arclen|arrayMapper|art3dPaintCtx|artAttrCtx|artAttrPaintVertexCtx|artAttrSkinPaintCtx|artAttrTool|artBuildPaintMenu|artFluidAttrCtx|artPuttyCtx|artSelectCtx|artSetPaintCtx|artUserPaintCtx|assignCommand|assignInputDevice|assignViewportFactories|attachCurve|attachDeviceAttr|attachSurface|attrColorSliderGrp|attrCompatibility|attrControlGrp|attrEnumOptionMenu|attrEnumOptionMenuGrp|attrFieldGrp|attrFieldSliderGrp|attrNavigationControlGrp|attrPresetEditWin|attributeExists|attributeInfo|attributeMenu|attributeQuery|autoKeyframe|autoPlace|bakeClip|bakeFluidShading|bakePartialHistory|bakeResults|bakeSimulation|basename|basenameEx|batchRender|bessel|bevel|bevelPlus|binMembership|bindSkin|blend2|blendShape|blendShapeEditor|blendShapePanel|blendTwoAttr|blindDataType|boneLattice|boundary|boxDollyCtx|boxZoomCtx|bufferCurve|buildBookmarkMenu|buildKeyframeMenu|button|buttonManip|cacheFile|cacheFileCombine|cacheFileMerge|cacheFileTrack|camera|cameraView|canCreateManip|canvas|capitalizeString|catch|catchQuiet|ceil|changeSubdivComponentDisplayLevel|changeSubdivRegion|channelBox|character|characterMap|characterOutlineEditor|characterize|chdir|checkBox|checkBoxGrp|checkDefaultRenderGlobals|choice|circle|circularFillet|clamp|clear|clearCache|clip|clipEditor|clipEditorCurrentTimeCtx|clipSchedule|clipSchedulerOutliner|clipTrimBefore|closeCurve|closeSurface|cluster|cmdFileOutput|cmdScrollFieldExecuter|cmdScrollFieldReporter|cmdShell|coarsenSubdivSelectionList|collision|color|colorAtPoint|colorEditor|colorIndex|colorIndexSliderGrp|colorSliderButtonGrp|colorSliderGrp|columnLayout|commandEcho|commandLine|commandPort|compactHairSystem|componentEditor|compositingInterop|computePolysetVolume|condition|cone|confirmDialog|connectAttr|connectControl|connectDynamic|connectJoint|connectionInfo|constrain|constrainValue|constructionHistory|container|containsMultibyte|contextInfo|control|convertFromOldLayers|convertIffToPsd|convertLightmap|convertSolidTx|convertTessellation|convertUnit|copyArray|copyFlexor|copyKey|copySkinWeights|cos|cpButton|cpCache|cpClothSet|cpCollision|cpConstraint|cpConvClothToMesh|cpForces|cpGetSolverAttr|cpPanel|cpProperty|cpRigidCollisionFilter|cpSeam|cpSetEdit|cpSetSolverAttr|cpSolver|cpSolverTypes|cpTool|cpUpdateClothUVs|createDisplayLayer|createDrawCtx|createEditor|createLayeredPsdFile|createMotionField|createNewShelf|createNode|createRenderLayer|createSubdivRegion|cross|crossProduct|ctxAbort|ctxCompletion|ctxEditMode|ctxTraverse|currentCtx|currentTime|currentTimeCtx|currentUnit|curve|curveAddPtCtx|curveCVCtx|curveEPCtx|curveEditorCtx|curveIntersect|curveMoveEPCtx|curveOnSurface|curveSketchCtx|cutKey|cycleCheck|cylinder|dagPose|date|defaultLightListCheckBox|defaultNavigation|defineDataServer|defineVirtualDevice|deformer|deg_to_rad|delete|deleteAttr|deleteShadingGroupsAndMaterials|deleteShelfTab|deleteUI|deleteUnusedBrushes|delrandstr|detachCurve|detachDeviceAttr|detachSurface|deviceEditor|devicePanel|dgInfo|dgdirty|dgeval|dgtimer|dimWhen|directKeyCtx|directionalLight|dirmap|dirname|disable|disconnectAttr|disconnectJoint|diskCache|displacementToPoly|displayAffected|displayColor|displayCull|displayLevelOfDetail|displayPref|displayRGBColor|displaySmoothness|displayStats|displayString|displaySurface|distanceDimContext|distanceDimension|doBlur|dolly|dollyCtx|dopeSheetEditor|dot|dotProduct|doubleProfileBirailSurface|drag|dragAttrContext|draggerContext|dropoffLocator|duplicate|duplicateCurve|duplicateSurface|dynCache|dynControl|dynExport|dynExpression|dynGlobals|dynPaintEditor|dynParticleCtx|dynPref|dynRelEdPanel|dynRelEditor|dynamicLoad|editAttrLimits|editDisplayLayerGlobals|editDisplayLayerMembers|editRenderLayerAdjustment|editRenderLayerGlobals|editRenderLayerMembers|editor|editorTemplate|effector|emit|emitter|enableDevice|encodeString|endString|endsWith|env|equivalent|equivalentTol|erf|error|eval|evalDeferred|evalEcho|event|exactWorldBoundingBox|exclusiveLightCheckBox|exec|executeForEachObject|exists|exp|expression|expressionEditorListen|extendCurve|extendSurface|extrude|fcheck|fclose|feof|fflush|fgetline|fgetword|file|fileBrowserDialog|fileDialog|fileExtension|fileInfo|filetest|filletCurve|filter|filterCurve|filterExpand|filterStudioImport|findAllIntersections|findAnimCurves|findKeyframe|findMenuItem|findRelatedSkinCluster|finder|firstParentOf|fitBspline|flexor|floatEq|floatField|floatFieldGrp|floatScrollBar|floatSlider|floatSlider2|floatSliderButtonGrp|floatSliderGrp|floor|flow|fluidCacheInfo|fluidEmitter|fluidVoxelInfo|flushUndo|fmod|fontDialog|fopen|formLayout|format|fprint|frameLayout|fread|freeFormFillet|frewind|fromNativePath|fwrite|gamma|gauss|geometryConstraint|getApplicationVersionAsFloat|getAttr|getClassification|getDefaultBrush|getFileList|getFluidAttr|getInputDeviceRange|getMayaPanelTypes|getModifiers|getPanel|getParticleAttr|getPluginResource|getenv|getpid|glRender|glRenderEditor|globalStitch|gmatch|goal|gotoBindPose|grabColor|gradientControl|gradientControlNoAttr|graphDollyCtx|graphSelectContext|graphTrackCtx|gravity|grid|gridLayout|group|groupObjectsByName|hardenPointCurve|hardware|hardwareRenderPanel|headsUpDisplay|headsUpMessage|help|helpLine|hermite|hide|hilite|hitTest|hotBox|hotkey|hotkeyCheck|hsv_to_rgb|hudButton|hudSlider|hudSliderButton|hwReflectionMap|hwRender|hwRenderLoad|hyperGraph|hyperPanel|hyperShade|hypot|iconTextButton|iconTextCheckBox|iconTextRadioButton|iconTextRadioCollection|iconTextScrollList|iconTextStaticLabel|ikHandle|ikHandleCtx|ikHandleDisplayScale|ikSolver|ikSplineHandleCtx|ikSystem|ikSystemInfo|ikfkDisplayMethod|illustratorCurves|image|imfPlugins|inheritTransform|insertJoint|insertJointCtx|insertKeyCtx|insertKnotCurve|insertKnotSurface|instance|instanceable|instancer|intField|intFieldGrp|intScrollBar|intSlider|intSliderGrp|interToUI|internalVar|intersect|iprEngine|isAnimCurve|isConnected|isDirty|isParentOf|isSameObject|isTrue|isValidObjectName|isValidString|isValidUiName|isolateSelect|itemFilter|itemFilterAttr|itemFilterRender|itemFilterType|joint|jointCluster|jointCtx|jointDisplayScale|jointLattice|keyTangent|keyframe|keyframeOutliner|keyframeRegionCurrentTimeCtx|keyframeRegionDirectKeyCtx|keyframeRegionDollyCtx|keyframeRegionInsertKeyCtx|keyframeRegionMoveKeyCtx|keyframeRegionScaleKeyCtx|keyframeRegionSelectKeyCtx|keyframeRegionSetKeyCtx|keyframeRegionTrackCtx|keyframeStats|lassoContext|lattice|latticeDeformKeyCtx|launch|launchImageEditor|layerButton|layeredShaderPort|layeredTexturePort|layout|layoutDialog|lightList|lightListEditor|lightListPanel|lightlink|lineIntersection|linearPrecision|linstep|listAnimatable|listAttr|listCameras|listConnections|listDeviceAttachments|listHistory|listInputDeviceAxes|listInputDeviceButtons|listInputDevices|listMenuAnnotation|listNodeTypes|listPanelCategories|listRelatives|listSets|listTransforms|listUnselected|listerEditor|loadFluid|loadNewShelf|loadPlugin|loadPluginLanguageResources|loadPrefObjects|localizedPanelLabel|lockNode|loft|log|longNameOf|lookThru|ls|lsThroughFilter|lsType|lsUI|mag|makeIdentity|makeLive|makePaintable|makeRoll|makeSingleSurface|makeTubeOn|makebot|manipMoveContext|manipMoveLimitsCtx|manipOptions|manipRotateContext|manipRotateLimitsCtx|manipScaleContext|manipScaleLimitsCtx|marker|match|max|memory|menu|menuBarLayout|menuEditor|menuItem|menuItemToShelf|menuSet|menuSetPref|messageLine|min|minimizeApp|mirrorJoint|modelCurrentTimeCtx|modelEditor|modelPanel|mouse|movIn|movOut|move|moveIKtoFK|moveKeyCtx|moveVertexAlongDirection|multiProfileBirailSurface|mute|nParticle|nameCommand|nameField|namespace|namespaceInfo|newPanelItems|newton|nodeCast|nodeIconButton|nodeOutliner|nodePreset|nodeType|noise|nonLinear|normalConstraint|normalize|nurbsBoolean|nurbsCopyUVSet|nurbsCube|nurbsEditUV|nurbsPlane|nurbsSelect|nurbsSquare|nurbsToPoly|nurbsToPolygonsPref|nurbsToSubdiv|nurbsToSubdivPref|nurbsUVSet|nurbsViewDirectionVector|objExists|objectCenter|objectLayer|objectType|objectTypeUI|obsoleteProc|oceanNurbsPreviewPlane|offsetCurve|offsetCurveOnSurface|offsetSurface|openGLExtension|openMayaPref|optionMenu|optionMenuGrp|optionVar|orbit|orbitCtx|orientConstraint|outlinerEditor|outlinerPanel|overrideModifier|paintEffectsDisplay|pairBlend|palettePort|paneLayout|panel|panelConfiguration|panelHistory|paramDimContext|paramDimension|paramLocator|parent|parentConstraint|particle|particleExists|particleInstancer|particleRenderInfo|partition|pasteKey|pathAnimation|pause|pclose|percent|performanceOptions|pfxstrokes|pickWalk|picture|pixelMove|planarSrf|plane|play|playbackOptions|playblast|plugAttr|plugNode|pluginInfo|pluginResourceUtil|pointConstraint|pointCurveConstraint|pointLight|pointMatrixMult|pointOnCurve|pointOnSurface|pointPosition|poleVectorConstraint|polyAppend|polyAppendFacetCtx|polyAppendVertex|polyAutoProjection|polyAverageNormal|polyAverageVertex|polyBevel|polyBlendColor|polyBlindData|polyBoolOp|polyBridgeEdge|polyCacheMonitor|polyCheck|polyChipOff|polyClipboard|polyCloseBorder|polyCollapseEdge|polyCollapseFacet|polyColorBlindData|polyColorDel|polyColorPerVertex|polyColorSet|polyCompare|polyCone|polyCopyUV|polyCrease|polyCreaseCtx|polyCreateFacet|polyCreateFacetCtx|polyCube|polyCut|polyCutCtx|polyCylinder|polyCylindricalProjection|polyDelEdge|polyDelFacet|polyDelVertex|polyDuplicateAndConnect|polyDuplicateEdge|polyEditUV|polyEditUVShell|polyEvaluate|polyExtrudeEdge|polyExtrudeFacet|polyExtrudeVertex|polyFlipEdge|polyFlipUV|polyForceUV|polyGeoSampler|polyHelix|polyInfo|polyInstallAction|polyLayoutUV|polyListComponentConversion|polyMapCut|polyMapDel|polyMapSew|polyMapSewMove|polyMergeEdge|polyMergeEdgeCtx|polyMergeFacet|polyMergeFacetCtx|polyMergeUV|polyMergeVertex|polyMirrorFace|polyMoveEdge|polyMoveFacet|polyMoveFacetUV|polyMoveUV|polyMoveVertex|polyNormal|polyNormalPerVertex|polyNormalizeUV|polyOptUvs|polyOptions|polyOutput|polyPipe|polyPlanarProjection|polyPlane|polyPlatonicSolid|polyPoke|polyPrimitive|polyPrism|polyProjection|polyPyramid|polyQuad|polyQueryBlindData|polyReduce|polySelect|polySelectConstraint|polySelectConstraintMonitor|polySelectCtx|polySelectEditCtx|polySeparate|polySetToFaceNormal|polySewEdge|polyShortestPathCtx|polySmooth|polySoftEdge|polySphere|polySphericalProjection|polySplit|polySplitCtx|polySplitEdge|polySplitRing|polySplitVertex|polyStraightenUVBorder|polySubdivideEdge|polySubdivideFacet|polyToSubdiv|polyTorus|polyTransfer|polyTriangulate|polyUVSet|polyUnite|polyWedgeFace|popen|popupMenu|pose|pow|preloadRefEd|print|progressBar|progressWindow|projFileViewer|projectCurve|projectTangent|projectionContext|projectionManip|promptDialog|propModCtx|propMove|psdChannelOutliner|psdEditTextureFile|psdExport|psdTextureFile|putenv|pwd|python|querySubdiv|quit|rad_to_deg|radial|radioButton|radioButtonGrp|radioCollection|radioMenuItemCollection|rampColorPort|rand|randomizeFollicles|randstate|rangeControl|readTake|rebuildCurve|rebuildSurface|recordAttr|recordDevice|redo|reference|referenceEdit|referenceQuery|refineSubdivSelectionList|refresh|refreshAE|registerPluginResource|rehash|reloadImage|removeJoint|removeMultiInstance|removePanelCategory|rename|renameAttr|renameSelectionList|renameUI|render|renderGlobalsNode|renderInfo|renderLayerButton|renderLayerParent|renderLayerPostProcess|renderLayerUnparent|renderManip|renderPartition|renderQualityNode|renderSettings|renderThumbnailUpdate|renderWindowEditor|renderWindowSelectContext|renderer|reorder|reorderDeformers|requires|reroot|resampleFluid|resetAE|resetPfxToPolyCamera|resetTool|resolutionNode|retarget|reverseCurve|reverseSurface|revolve|rgb_to_hsv|rigidBody|rigidSolver|roll|rollCtx|rootOf|rot|rotate|rotationInterpolation|roundConstantRadius|rowColumnLayout|rowLayout|runTimeCommand|runup|sampleImage|saveAllShelves|saveAttrPreset|saveFluid|saveImage|saveInitialState|saveMenu|savePrefObjects|savePrefs|saveShelf|saveToolSettings|scale|scaleBrushBrightness|scaleComponents|scaleConstraint|scaleKey|scaleKeyCtx|sceneEditor|sceneUIReplacement|scmh|scriptCtx|scriptEditorInfo|scriptJob|scriptNode|scriptTable|scriptToShelf|scriptedPanel|scriptedPanelType|scrollField|scrollLayout|sculpt|searchPathArray|seed|selLoadSettings|select|selectContext|selectCurveCV|selectKey|selectKeyCtx|selectKeyframeRegionCtx|selectMode|selectPref|selectPriority|selectType|selectedNodes|selectionConnection|separator|setAttr|setAttrEnumResource|setAttrMapping|setAttrNiceNameResource|setConstraintRestPosition|setDefaultShadingGroup|setDrivenKeyframe|setDynamic|setEditCtx|setEditor|setFluidAttr|setFocus|setInfinity|setInputDeviceMapping|setKeyCtx|setKeyPath|setKeyframe|setKeyframeBlendshapeTargetWts|setMenuMode|setNodeNiceNameResource|setNodeTypeFlag|setParent|setParticleAttr|setPfxToPolyCamera|setPluginResource|setProject|setStampDensity|setStartupMessage|setState|setToolTo|setUITemplate|setXformManip|sets|shadingConnection|shadingGeometryRelCtx|shadingLightRelCtx|shadingNetworkCompare|shadingNode|shapeCompare|shelfButton|shelfLayout|shelfTabLayout|shellField|shortNameOf|showHelp|showHidden|showManipCtx|showSelectionInTitle|showShadingGroupAttrEditor|showWindow|sign|simplify|sin|singleProfileBirailSurface|size|sizeBytes|skinCluster|skinPercent|smoothCurve|smoothTangentSurface|smoothstep|snap2to2|snapKey|snapMode|snapTogetherCtx|snapshot|soft|softMod|softModCtx|sort|sound|soundControl|source|spaceLocator|sphere|sphrand|spotLight|spotLightPreviewPort|spreadSheetEditor|spring|sqrt|squareSurface|srtContext|stackTrace|startString|startsWith|stitchAndExplodeShell|stitchSurface|stitchSurfacePoints|strcmp|stringArrayCatenate|stringArrayContains|stringArrayCount|stringArrayInsertAtIndex|stringArrayIntersector|stringArrayRemove|stringArrayRemoveAtIndex|stringArrayRemoveDuplicates|stringArrayRemoveExact|stringArrayToString|stringToStringArray|strip|stripPrefixFromName|stroke|subdAutoProjection|subdCleanTopology|subdCollapse|subdDuplicateAndConnect|subdEditUV|subdListComponentConversion|subdMapCut|subdMapSewMove|subdMatchTopology|subdMirror|subdToBlind|subdToPoly|subdTransferUVsToCache|subdiv|subdivCrease|subdivDisplaySmoothness|substitute|substituteAllString|substituteGeometry|substring|surface|surfaceSampler|surfaceShaderList|swatchDisplayPort|switchTable|symbolButton|symbolCheckBox|sysFile|system|tabLayout|tan|tangentConstraint|texLatticeDeformContext|texManipContext|texMoveContext|texMoveUVShellContext|texRotateContext|texScaleContext|texSelectContext|texSelectShortestPathCtx|texSmudgeUVContext|texWinToolCtx|text|textCurves|textField|textFieldButtonGrp|textFieldGrp|textManip|textScrollList|textToShelf|textureDisplacePlane|textureHairColor|texturePlacementContext|textureWindow|threadCount|threePointArcCtx|timeControl|timePort|timerX|toNativePath|toggle|toggleAxis|toggleWindowVisibility|tokenize|tokenizeList|tolerance|tolower|toolButton|toolCollection|toolDropped|toolHasOptions|toolPropertyWindow|torus|toupper|trace|track|trackCtx|transferAttributes|transformCompare|transformLimits|translator|trim|trunc|truncateFluidCache|truncateHairCache|tumble|tumbleCtx|turbulence|twoPointArcCtx|uiRes|uiTemplate|unassignInputDevice|undo|undoInfo|ungroup|uniform|unit|unloadPlugin|untangleUV|untitledFileName|untrim|upAxis|updateAE|userCtx|uvLink|uvSnapshot|validateShelfName|vectorize|view2dToolCtx|viewCamera|viewClipPlane|viewFit|viewHeadOn|viewLookAt|viewManip|viewPlace|viewSet|visor|volumeAxis|vortex|waitCursor|warning|webBrowser|webBrowserPrefs|whatIs|window|windowPref|wire|wireContext|workspace|wrinkle|wrinkleContext|writeTake|xbmLangPathList|xform)\\b/,\n    operator: [/\\+[+=]?|-[-=]?|&&|\\|\\||[<>]=|[*\\/!=]=?|[%^]/, {\n      // We don't want to match <<\n      pattern: /(^|[^<])<(?!<)/,\n      lookbehind: true\n    }, {\n      // We don't want to match >>\n      pattern: /(^|[^>])>(?!>)/,\n      lookbehind: true\n    }],\n    punctuation: /<<|>>|[.,:;?\\[\\](){}]/\n  };\n  Prism.languages.mel['code'].inside.rest = Prism.languages.mel;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/mel.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/mermaid.js":
/*!************************************************!*\
  !*** ./node_modules/refractor/lang/mermaid.js ***!
  \************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = mermaid;\nmermaid.displayName = 'mermaid';\nmermaid.aliases = [];\nfunction mermaid(Prism) {\n  Prism.languages.mermaid = {\n    comment: {\n      pattern: /%%.*/,\n      greedy: true\n    },\n    style: {\n      pattern: /^([ \\t]*(?:classDef|linkStyle|style)[ \\t]+[\\w$-]+[ \\t]+)\\w.*[^\\s;]/m,\n      lookbehind: true,\n      inside: {\n        property: /\\b\\w[\\w-]*(?=[ \\t]*:)/,\n        operator: /:/,\n        punctuation: /,/\n      }\n    },\n    'inter-arrow-label': {\n      pattern: /([^<>ox.=-])(?:-[-.]|==)(?![<>ox.=-])[ \\t]*(?:\"[^\"\\r\\n]*\"|[^\\s\".=-](?:[^\\r\\n.=-]*[^\\s.=-])?)[ \\t]*(?:\\.+->?|--+[->]|==+[=>])(?![<>ox.=-])/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        arrow: {\n          pattern: /(?:\\.+->?|--+[->]|==+[=>])$/,\n          alias: 'operator'\n        },\n        label: {\n          pattern: /^([\\s\\S]{2}[ \\t]*)\\S(?:[\\s\\S]*\\S)?/,\n          lookbehind: true,\n          alias: 'property'\n        },\n        'arrow-head': {\n          pattern: /^\\S+/,\n          alias: ['arrow', 'operator']\n        }\n      }\n    },\n    arrow: [\n    // This might look complex but it really isn't.\n    // There are many possible arrows (see tests) and it's impossible to fit all of them into one pattern. The\n    // problem is that we only have one lookbehind per pattern. However, we cannot disallow too many arrow\n    // characters in the one lookbehind because that would create too many false negatives. So we have to split the\n    // arrows into different patterns.\n    {\n      // ER diagram\n      pattern: /(^|[^{}|o.-])[|}][|o](?:--|\\.\\.)[|o][|{](?![{}|o.-])/,\n      lookbehind: true,\n      alias: 'operator'\n    }, {\n      // flow chart\n      // (?:==+|--+|-\\.*-)\n      pattern: /(^|[^<>ox.=-])(?:[<ox](?:==+|--+|-\\.*-)[>ox]?|(?:==+|--+|-\\.*-)[>ox]|===+|---+|-\\.+-)(?![<>ox.=-])/,\n      lookbehind: true,\n      alias: 'operator'\n    }, {\n      // sequence diagram\n      pattern: /(^|[^<>()x-])(?:--?(?:>>|[x>)])(?![<>()x])|(?:<<|[x<(])--?(?!-))/,\n      lookbehind: true,\n      alias: 'operator'\n    }, {\n      // class diagram\n      pattern: /(^|[^<>|*o.-])(?:[*o]--|--[*o]|<\\|?(?:--|\\.\\.)|(?:--|\\.\\.)\\|?>|--|\\.\\.)(?![<>|*o.-])/,\n      lookbehind: true,\n      alias: 'operator'\n    }],\n    label: {\n      pattern: /(^|[^|<])\\|(?:[^\\r\\n\"|]|\"[^\"\\r\\n]*\")+\\|/,\n      lookbehind: true,\n      greedy: true,\n      alias: 'property'\n    },\n    text: {\n      pattern: /(?:[(\\[{]+|\\b>)(?:[^\\r\\n\"()\\[\\]{}]|\"[^\"\\r\\n]*\")+(?:[)\\]}]+|>)/,\n      alias: 'string'\n    },\n    string: {\n      pattern: /\"[^\"\\r\\n]*\"/,\n      greedy: true\n    },\n    annotation: {\n      pattern: /<<(?:abstract|choice|enumeration|fork|interface|join|service)>>|\\[\\[(?:choice|fork|join)\\]\\]/i,\n      alias: 'important'\n    },\n    keyword: [\n    // This language has both case-sensitive and case-insensitive keywords\n    {\n      pattern: /(^[ \\t]*)(?:action|callback|class|classDef|classDiagram|click|direction|erDiagram|flowchart|gantt|gitGraph|graph|journey|link|linkStyle|pie|requirementDiagram|sequenceDiagram|stateDiagram|stateDiagram-v2|style|subgraph)(?![\\w$-])/m,\n      lookbehind: true,\n      greedy: true\n    }, {\n      pattern: /(^[ \\t]*)(?:activate|alt|and|as|autonumber|deactivate|else|end(?:[ \\t]+note)?|loop|opt|par|participant|rect|state|note[ \\t]+(?:over|(?:left|right)[ \\t]+of))(?![\\w$-])/im,\n      lookbehind: true,\n      greedy: true\n    }],\n    entity: /#[a-z0-9]+;/,\n    operator: {\n      pattern: /(\\w[ \\t]*)&(?=[ \\t]*\\w)|:::|:/,\n      lookbehind: true\n    },\n    punctuation: /[(){};]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/mermaid.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/mizar.js":
/*!**********************************************!*\
  !*** ./node_modules/refractor/lang/mizar.js ***!
  \**********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = mizar;\nmizar.displayName = 'mizar';\nmizar.aliases = [];\nfunction mizar(Prism) {\n  Prism.languages.mizar = {\n    comment: /::.+/,\n    keyword: /@proof\\b|\\b(?:according|aggregate|all|and|antonym|are|as|associativity|assume|asymmetry|attr|be|begin|being|by|canceled|case|cases|clusters?|coherence|commutativity|compatibility|connectedness|consider|consistency|constructors|contradiction|correctness|def|deffunc|define|definitions?|defpred|do|does|end|environ|equals|ex|exactly|existence|for|from|func|given|hence|hereby|holds|idempotence|identity|iff?|implies|involutiveness|irreflexivity|is|it|let|means|mode|non|not|notations?|now|of|or|otherwise|over|per|pred|prefix|projectivity|proof|provided|qua|reconsider|redefine|reduce|reducibility|reflexivity|registrations?|requirements|reserve|sch|schemes?|section|selector|set|sethood|st|struct|such|suppose|symmetry|synonym|take|that|the|then|theorems?|thesis|thus|to|transitivity|uniqueness|vocabular(?:ies|y)|when|where|with|wrt)\\b/,\n    parameter: {\n      pattern: /\\$(?:10|\\d)/,\n      alias: 'variable'\n    },\n    variable: /\\b\\w+(?=:)/,\n    number: /(?:\\b|-)\\d+\\b/,\n    operator: /\\.\\.\\.|->|&|\\.?=/,\n    punctuation: /\\(#|#\\)|[,:;\\[\\](){}]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvbWl6YXIuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxLQUFLO0FBQ3RCQSxLQUFLLENBQUNDLFdBQVcsR0FBRyxPQUFPO0FBQzNCRCxLQUFLLENBQUNFLE9BQU8sR0FBRyxFQUFFO0FBQ2xCLFNBQVNGLEtBQUtBLENBQUNHLEtBQUssRUFBRTtFQUNwQkEsS0FBSyxDQUFDQyxTQUFTLENBQUNKLEtBQUssR0FBRztJQUN0QkssT0FBTyxFQUFFLE1BQU07SUFDZkMsT0FBTyxFQUNMLHEwQkFBcTBCO0lBQ3YwQkMsU0FBUyxFQUFFO01BQ1RDLE9BQU8sRUFBRSxhQUFhO01BQ3RCQyxLQUFLLEVBQUU7SUFDVCxDQUFDO0lBQ0RDLFFBQVEsRUFBRSxZQUFZO0lBQ3RCQyxNQUFNLEVBQUUsZUFBZTtJQUN2QkMsUUFBUSxFQUFFLGtCQUFrQjtJQUM1QkMsV0FBVyxFQUFFO0VBQ2YsQ0FBQztBQUNIIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcbWl6YXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gbWl6YXJcbm1pemFyLmRpc3BsYXlOYW1lID0gJ21pemFyJ1xubWl6YXIuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBtaXphcihQcmlzbSkge1xuICBQcmlzbS5sYW5ndWFnZXMubWl6YXIgPSB7XG4gICAgY29tbWVudDogLzo6LisvLFxuICAgIGtleXdvcmQ6XG4gICAgICAvQHByb29mXFxifFxcYig/OmFjY29yZGluZ3xhZ2dyZWdhdGV8YWxsfGFuZHxhbnRvbnltfGFyZXxhc3xhc3NvY2lhdGl2aXR5fGFzc3VtZXxhc3ltbWV0cnl8YXR0cnxiZXxiZWdpbnxiZWluZ3xieXxjYW5jZWxlZHxjYXNlfGNhc2VzfGNsdXN0ZXJzP3xjb2hlcmVuY2V8Y29tbXV0YXRpdml0eXxjb21wYXRpYmlsaXR5fGNvbm5lY3RlZG5lc3N8Y29uc2lkZXJ8Y29uc2lzdGVuY3l8Y29uc3RydWN0b3JzfGNvbnRyYWRpY3Rpb258Y29ycmVjdG5lc3N8ZGVmfGRlZmZ1bmN8ZGVmaW5lfGRlZmluaXRpb25zP3xkZWZwcmVkfGRvfGRvZXN8ZW5kfGVudmlyb258ZXF1YWxzfGV4fGV4YWN0bHl8ZXhpc3RlbmNlfGZvcnxmcm9tfGZ1bmN8Z2l2ZW58aGVuY2V8aGVyZWJ5fGhvbGRzfGlkZW1wb3RlbmNlfGlkZW50aXR5fGlmZj98aW1wbGllc3xpbnZvbHV0aXZlbmVzc3xpcnJlZmxleGl2aXR5fGlzfGl0fGxldHxtZWFuc3xtb2RlfG5vbnxub3R8bm90YXRpb25zP3xub3d8b2Z8b3J8b3RoZXJ3aXNlfG92ZXJ8cGVyfHByZWR8cHJlZml4fHByb2plY3Rpdml0eXxwcm9vZnxwcm92aWRlZHxxdWF8cmVjb25zaWRlcnxyZWRlZmluZXxyZWR1Y2V8cmVkdWNpYmlsaXR5fHJlZmxleGl2aXR5fHJlZ2lzdHJhdGlvbnM/fHJlcXVpcmVtZW50c3xyZXNlcnZlfHNjaHxzY2hlbWVzP3xzZWN0aW9ufHNlbGVjdG9yfHNldHxzZXRob29kfHN0fHN0cnVjdHxzdWNofHN1cHBvc2V8c3ltbWV0cnl8c3lub255bXx0YWtlfHRoYXR8dGhlfHRoZW58dGhlb3JlbXM/fHRoZXNpc3x0aHVzfHRvfHRyYW5zaXRpdml0eXx1bmlxdWVuZXNzfHZvY2FidWxhcig/Omllc3x5KXx3aGVufHdoZXJlfHdpdGh8d3J0KVxcYi8sXG4gICAgcGFyYW1ldGVyOiB7XG4gICAgICBwYXR0ZXJuOiAvXFwkKD86MTB8XFxkKS8sXG4gICAgICBhbGlhczogJ3ZhcmlhYmxlJ1xuICAgIH0sXG4gICAgdmFyaWFibGU6IC9cXGJcXHcrKD89OikvLFxuICAgIG51bWJlcjogLyg/OlxcYnwtKVxcZCtcXGIvLFxuICAgIG9wZXJhdG9yOiAvXFwuXFwuXFwufC0+fCZ8XFwuPz0vLFxuICAgIHB1bmN0dWF0aW9uOiAvXFwoI3wjXFwpfFssOjtcXFtcXF0oKXt9XS9cbiAgfVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJtaXphciIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwiY29tbWVudCIsImtleXdvcmQiLCJwYXJhbWV0ZXIiLCJwYXR0ZXJuIiwiYWxpYXMiLCJ2YXJpYWJsZSIsIm51bWJlciIsIm9wZXJhdG9yIiwicHVuY3R1YXRpb24iXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/mizar.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/mongodb.js":
/*!************************************************!*\
  !*** ./node_modules/refractor/lang/mongodb.js ***!
  \************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = mongodb;\nmongodb.displayName = 'mongodb';\nmongodb.aliases = [];\nfunction mongodb(Prism) {\n  ;\n  (function (Prism) {\n    var operators = [\n    // query and projection\n    '$eq', '$gt', '$gte', '$in', '$lt', '$lte', '$ne', '$nin', '$and', '$not', '$nor', '$or', '$exists', '$type', '$expr', '$jsonSchema', '$mod', '$regex', '$text', '$where', '$geoIntersects', '$geoWithin', '$near', '$nearSphere', '$all', '$elemMatch', '$size', '$bitsAllClear', '$bitsAllSet', '$bitsAnyClear', '$bitsAnySet', '$comment', '$elemMatch', '$meta', '$slice',\n    // update\n    '$currentDate', '$inc', '$min', '$max', '$mul', '$rename', '$set', '$setOnInsert', '$unset', '$addToSet', '$pop', '$pull', '$push', '$pullAll', '$each', '$position', '$slice', '$sort', '$bit',\n    // aggregation pipeline stages\n    '$addFields', '$bucket', '$bucketAuto', '$collStats', '$count', '$currentOp', '$facet', '$geoNear', '$graphLookup', '$group', '$indexStats', '$limit', '$listLocalSessions', '$listSessions', '$lookup', '$match', '$merge', '$out', '$planCacheStats', '$project', '$redact', '$replaceRoot', '$replaceWith', '$sample', '$set', '$skip', '$sort', '$sortByCount', '$unionWith', '$unset', '$unwind', '$setWindowFields',\n    // aggregation pipeline operators\n    '$abs', '$accumulator', '$acos', '$acosh', '$add', '$addToSet', '$allElementsTrue', '$and', '$anyElementTrue', '$arrayElemAt', '$arrayToObject', '$asin', '$asinh', '$atan', '$atan2', '$atanh', '$avg', '$binarySize', '$bsonSize', '$ceil', '$cmp', '$concat', '$concatArrays', '$cond', '$convert', '$cos', '$dateFromParts', '$dateToParts', '$dateFromString', '$dateToString', '$dayOfMonth', '$dayOfWeek', '$dayOfYear', '$degreesToRadians', '$divide', '$eq', '$exp', '$filter', '$first', '$floor', '$function', '$gt', '$gte', '$hour', '$ifNull', '$in', '$indexOfArray', '$indexOfBytes', '$indexOfCP', '$isArray', '$isNumber', '$isoDayOfWeek', '$isoWeek', '$isoWeekYear', '$last', '$last', '$let', '$literal', '$ln', '$log', '$log10', '$lt', '$lte', '$ltrim', '$map', '$max', '$mergeObjects', '$meta', '$min', '$millisecond', '$minute', '$mod', '$month', '$multiply', '$ne', '$not', '$objectToArray', '$or', '$pow', '$push', '$radiansToDegrees', '$range', '$reduce', '$regexFind', '$regexFindAll', '$regexMatch', '$replaceOne', '$replaceAll', '$reverseArray', '$round', '$rtrim', '$second', '$setDifference', '$setEquals', '$setIntersection', '$setIsSubset', '$setUnion', '$size', '$sin', '$slice', '$split', '$sqrt', '$stdDevPop', '$stdDevSamp', '$strcasecmp', '$strLenBytes', '$strLenCP', '$substr', '$substrBytes', '$substrCP', '$subtract', '$sum', '$switch', '$tan', '$toBool', '$toDate', '$toDecimal', '$toDouble', '$toInt', '$toLong', '$toObjectId', '$toString', '$toLower', '$toUpper', '$trim', '$trunc', '$type', '$week', '$year', '$zip', '$count', '$dateAdd', '$dateDiff', '$dateSubtract', '$dateTrunc', '$getField', '$rand', '$sampleRate', '$setField', '$unsetField',\n    // aggregation pipeline query modifiers\n    '$comment', '$explain', '$hint', '$max', '$maxTimeMS', '$min', '$orderby', '$query', '$returnKey', '$showDiskLoc', '$natural'];\n    var builtinFunctions = ['ObjectId', 'Code', 'BinData', 'DBRef', 'Timestamp', 'NumberLong', 'NumberDecimal', 'MaxKey', 'MinKey', 'RegExp', 'ISODate', 'UUID'];\n    operators = operators.map(function (operator) {\n      return operator.replace('$', '\\\\$');\n    });\n    var operatorsSource = '(?:' + operators.join('|') + ')\\\\b';\n    Prism.languages.mongodb = Prism.languages.extend('javascript', {});\n    Prism.languages.insertBefore('mongodb', 'string', {\n      property: {\n        pattern: /(?:([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)(?=\\s*:)/,\n        greedy: true,\n        inside: {\n          keyword: RegExp('^([\\'\"])?' + operatorsSource + '(?:\\\\1)?$')\n        }\n      }\n    });\n    Prism.languages.mongodb.string.inside = {\n      url: {\n        // url pattern\n        pattern: /https?:\\/\\/[-\\w@:%.+~#=]{1,256}\\.[a-z0-9()]{1,6}\\b[-\\w()@:%+.~#?&/=]*/i,\n        greedy: true\n      },\n      entity: {\n        // ipv4\n        pattern: /\\b(?:(?:[01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.){3}(?:[01]?\\d\\d?|2[0-4]\\d|25[0-5])\\b/,\n        greedy: true\n      }\n    };\n    Prism.languages.insertBefore('mongodb', 'constant', {\n      builtin: {\n        pattern: RegExp('\\\\b(?:' + builtinFunctions.join('|') + ')\\\\b'),\n        alias: 'keyword'\n      }\n    });\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/mongodb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/monkey.js":
/*!***********************************************!*\
  !*** ./node_modules/refractor/lang/monkey.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = monkey;\nmonkey.displayName = 'monkey';\nmonkey.aliases = [];\nfunction monkey(Prism) {\n  Prism.languages.monkey = {\n    comment: {\n      pattern: /^#Rem\\s[\\s\\S]*?^#End|'.+/im,\n      greedy: true\n    },\n    string: {\n      pattern: /\"[^\"\\r\\n]*\"/,\n      greedy: true\n    },\n    preprocessor: {\n      pattern: /(^[ \\t]*)#.+/m,\n      lookbehind: true,\n      greedy: true,\n      alias: 'property'\n    },\n    \"function\": /\\b\\w+(?=\\()/,\n    'type-char': {\n      pattern: /\\b[?%#$]/,\n      alias: 'class-name'\n    },\n    number: {\n      pattern: /((?:\\.\\.)?)(?:(?:\\b|\\B-\\.?|\\B\\.)\\d+(?:(?!\\.\\.)\\.\\d*)?|\\$[\\da-f]+)/i,\n      lookbehind: true\n    },\n    keyword: /\\b(?:Abstract|Array|Bool|Case|Catch|Class|Const|Continue|Default|Eachin|Else|ElseIf|End|EndIf|Exit|Extends|Extern|False|Field|Final|Float|For|Forever|Function|Global|If|Implements|Import|Inline|Int|Interface|Local|Method|Module|New|Next|Null|Object|Private|Property|Public|Repeat|Return|Select|Self|Step|Strict|String|Super|Then|Throw|To|True|Try|Until|Void|Wend|While)\\b/i,\n    operator: /\\.\\.|<[=>]?|>=?|:?=|(?:[+\\-*\\/&~|]|\\b(?:Mod|Shl|Shr)\\b)=?|\\b(?:And|Not|Or)\\b/i,\n    punctuation: /[.,:;()\\[\\]]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvbW9ua2V5LmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsTUFBTTtBQUN2QkEsTUFBTSxDQUFDQyxXQUFXLEdBQUcsUUFBUTtBQUM3QkQsTUFBTSxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNuQixTQUFTRixNQUFNQSxDQUFDRyxLQUFLLEVBQUU7RUFDckJBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixNQUFNLEdBQUc7SUFDdkJLLE9BQU8sRUFBRTtNQUNQQyxPQUFPLEVBQUUsNEJBQTRCO01BQ3JDQyxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0RDLE1BQU0sRUFBRTtNQUNORixPQUFPLEVBQUUsYUFBYTtNQUN0QkMsTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUNERSxZQUFZLEVBQUU7TUFDWkgsT0FBTyxFQUFFLGVBQWU7TUFDeEJJLFVBQVUsRUFBRSxJQUFJO01BQ2hCSCxNQUFNLEVBQUUsSUFBSTtNQUNaSSxLQUFLLEVBQUU7SUFDVCxDQUFDO0lBQ0QsWUFBVSxhQUFhO0lBQ3ZCLFdBQVcsRUFBRTtNQUNYTCxPQUFPLEVBQUUsVUFBVTtNQUNuQkssS0FBSyxFQUFFO0lBQ1QsQ0FBQztJQUNEQyxNQUFNLEVBQUU7TUFDTk4sT0FBTyxFQUNMLG9FQUFvRTtNQUN0RUksVUFBVSxFQUFFO0lBQ2QsQ0FBQztJQUNERyxPQUFPLEVBQ0wsc1hBQXNYO0lBQ3hYQyxRQUFRLEVBQ04sK0VBQStFO0lBQ2pGQyxXQUFXLEVBQUU7RUFDZixDQUFDO0FBQ0giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxtb25rZXkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gbW9ua2V5XG5tb25rZXkuZGlzcGxheU5hbWUgPSAnbW9ua2V5J1xubW9ua2V5LmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24gbW9ua2V5KFByaXNtKSB7XG4gIFByaXNtLmxhbmd1YWdlcy5tb25rZXkgPSB7XG4gICAgY29tbWVudDoge1xuICAgICAgcGF0dGVybjogL14jUmVtXFxzW1xcc1xcU10qP14jRW5kfCcuKy9pbSxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgc3RyaW5nOiB7XG4gICAgICBwYXR0ZXJuOiAvXCJbXlwiXFxyXFxuXSpcIi8sXG4gICAgICBncmVlZHk6IHRydWVcbiAgICB9LFxuICAgIHByZXByb2Nlc3Nvcjoge1xuICAgICAgcGF0dGVybjogLyheWyBcXHRdKikjLisvbSxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBncmVlZHk6IHRydWUsXG4gICAgICBhbGlhczogJ3Byb3BlcnR5J1xuICAgIH0sXG4gICAgZnVuY3Rpb246IC9cXGJcXHcrKD89XFwoKS8sXG4gICAgJ3R5cGUtY2hhcic6IHtcbiAgICAgIHBhdHRlcm46IC9cXGJbPyUjJF0vLFxuICAgICAgYWxpYXM6ICdjbGFzcy1uYW1lJ1xuICAgIH0sXG4gICAgbnVtYmVyOiB7XG4gICAgICBwYXR0ZXJuOlxuICAgICAgICAvKCg/OlxcLlxcLik/KSg/Oig/OlxcYnxcXEItXFwuP3xcXEJcXC4pXFxkKyg/Oig/IVxcLlxcLilcXC5cXGQqKT98XFwkW1xcZGEtZl0rKS9pLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgIH0sXG4gICAga2V5d29yZDpcbiAgICAgIC9cXGIoPzpBYnN0cmFjdHxBcnJheXxCb29sfENhc2V8Q2F0Y2h8Q2xhc3N8Q29uc3R8Q29udGludWV8RGVmYXVsdHxFYWNoaW58RWxzZXxFbHNlSWZ8RW5kfEVuZElmfEV4aXR8RXh0ZW5kc3xFeHRlcm58RmFsc2V8RmllbGR8RmluYWx8RmxvYXR8Rm9yfEZvcmV2ZXJ8RnVuY3Rpb258R2xvYmFsfElmfEltcGxlbWVudHN8SW1wb3J0fElubGluZXxJbnR8SW50ZXJmYWNlfExvY2FsfE1ldGhvZHxNb2R1bGV8TmV3fE5leHR8TnVsbHxPYmplY3R8UHJpdmF0ZXxQcm9wZXJ0eXxQdWJsaWN8UmVwZWF0fFJldHVybnxTZWxlY3R8U2VsZnxTdGVwfFN0cmljdHxTdHJpbmd8U3VwZXJ8VGhlbnxUaHJvd3xUb3xUcnVlfFRyeXxVbnRpbHxWb2lkfFdlbmR8V2hpbGUpXFxiL2ksXG4gICAgb3BlcmF0b3I6XG4gICAgICAvXFwuXFwufDxbPT5dP3w+PT98Oj89fCg/OlsrXFwtKlxcLyZ+fF18XFxiKD86TW9kfFNobHxTaHIpXFxiKT0/fFxcYig/OkFuZHxOb3R8T3IpXFxiL2ksXG4gICAgcHVuY3R1YXRpb246IC9bLiw6OygpXFxbXFxdXS9cbiAgfVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJtb25rZXkiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImxhbmd1YWdlcyIsImNvbW1lbnQiLCJwYXR0ZXJuIiwiZ3JlZWR5Iiwic3RyaW5nIiwicHJlcHJvY2Vzc29yIiwibG9va2JlaGluZCIsImFsaWFzIiwibnVtYmVyIiwia2V5d29yZCIsIm9wZXJhdG9yIiwicHVuY3R1YXRpb24iXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/monkey.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/moonscript.js":
/*!***************************************************!*\
  !*** ./node_modules/refractor/lang/moonscript.js ***!
  \***************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = moonscript;\nmoonscript.displayName = 'moonscript';\nmoonscript.aliases = ['moon'];\nfunction moonscript(Prism) {\n  Prism.languages.moonscript = {\n    comment: /--.*/,\n    string: [{\n      pattern: /'[^']*'|\\[(=*)\\[[\\s\\S]*?\\]\\1\\]/,\n      greedy: true\n    }, {\n      pattern: /\"[^\"]*\"/,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /#\\{[^{}]*\\}/,\n          inside: {\n            moonscript: {\n              pattern: /(^#\\{)[\\s\\S]+(?=\\})/,\n              lookbehind: true,\n              inside: null // see beow\n            },\n\n            'interpolation-punctuation': {\n              pattern: /#\\{|\\}/,\n              alias: 'punctuation'\n            }\n          }\n        }\n      }\n    }],\n    'class-name': [{\n      pattern: /(\\b(?:class|extends)[ \\t]+)\\w+/,\n      lookbehind: true\n    },\n    // class-like names start with a capital letter\n    /\\b[A-Z]\\w*/],\n    keyword: /\\b(?:class|continue|do|else|elseif|export|extends|for|from|if|import|in|local|nil|return|self|super|switch|then|unless|using|when|while|with)\\b/,\n    variable: /@@?\\w*/,\n    property: {\n      pattern: /\\b(?!\\d)\\w+(?=:)|(:)(?!\\d)\\w+/,\n      lookbehind: true\n    },\n    \"function\": {\n      pattern: /\\b(?:_G|_VERSION|assert|collectgarbage|coroutine\\.(?:create|resume|running|status|wrap|yield)|debug\\.(?:debug|getfenv|gethook|getinfo|getlocal|getmetatable|getregistry|getupvalue|setfenv|sethook|setlocal|setmetatable|setupvalue|traceback)|dofile|error|getfenv|getmetatable|io\\.(?:close|flush|input|lines|open|output|popen|read|stderr|stdin|stdout|tmpfile|type|write)|ipairs|load|loadfile|loadstring|math\\.(?:abs|acos|asin|atan|atan2|ceil|cos|cosh|deg|exp|floor|fmod|frexp|ldexp|log|log10|max|min|modf|pi|pow|rad|random|randomseed|sin|sinh|sqrt|tan|tanh)|module|next|os\\.(?:clock|date|difftime|execute|exit|getenv|remove|rename|setlocale|time|tmpname)|package\\.(?:cpath|loaded|loadlib|path|preload|seeall)|pairs|pcall|print|rawequal|rawget|rawset|require|select|setfenv|setmetatable|string\\.(?:byte|char|dump|find|format|gmatch|gsub|len|lower|match|rep|reverse|sub|upper)|table\\.(?:concat|insert|maxn|remove|sort)|tonumber|tostring|type|unpack|xpcall)\\b/,\n      inside: {\n        punctuation: /\\./\n      }\n    },\n    \"boolean\": /\\b(?:false|true)\\b/,\n    number: /(?:\\B\\.\\d+|\\b\\d+\\.\\d+|\\b\\d+(?=[eE]))(?:[eE][-+]?\\d+)?\\b|\\b(?:0x[a-fA-F\\d]+|\\d+)(?:U?LL)?\\b/,\n    operator: /\\.{3}|[-=]>|~=|(?:[-+*/%<>!=]|\\.\\.)=?|[:#^]|\\b(?:and|or)\\b=?|\\b(?:not)\\b/,\n    punctuation: /[.,()[\\]{}\\\\]/\n  };\n  Prism.languages.moonscript.string[1].inside.interpolation.inside.moonscript.inside = Prism.languages.moonscript;\n  Prism.languages.moon = Prism.languages.moonscript;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvbW9vbnNjcmlwdC5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLFVBQVU7QUFDM0JBLFVBQVUsQ0FBQ0MsV0FBVyxHQUFHLFlBQVk7QUFDckNELFVBQVUsQ0FBQ0UsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDO0FBQzdCLFNBQVNGLFVBQVVBLENBQUNHLEtBQUssRUFBRTtFQUN6QkEsS0FBSyxDQUFDQyxTQUFTLENBQUNKLFVBQVUsR0FBRztJQUMzQkssT0FBTyxFQUFFLE1BQU07SUFDZkMsTUFBTSxFQUFFLENBQ047TUFDRUMsT0FBTyxFQUFFLGdDQUFnQztNQUN6Q0MsTUFBTSxFQUFFO0lBQ1YsQ0FBQyxFQUNEO01BQ0VELE9BQU8sRUFBRSxTQUFTO01BQ2xCQyxNQUFNLEVBQUUsSUFBSTtNQUNaQyxNQUFNLEVBQUU7UUFDTkMsYUFBYSxFQUFFO1VBQ2JILE9BQU8sRUFBRSxhQUFhO1VBQ3RCRSxNQUFNLEVBQUU7WUFDTlQsVUFBVSxFQUFFO2NBQ1ZPLE9BQU8sRUFBRSxxQkFBcUI7Y0FDOUJJLFVBQVUsRUFBRSxJQUFJO2NBQ2hCRixNQUFNLEVBQUUsSUFBSSxDQUFDO1lBQ2YsQ0FBQzs7WUFDRCwyQkFBMkIsRUFBRTtjQUMzQkYsT0FBTyxFQUFFLFFBQVE7Y0FDakJLLEtBQUssRUFBRTtZQUNUO1VBQ0Y7UUFDRjtNQUNGO0lBQ0YsQ0FBQyxDQUNGO0lBQ0QsWUFBWSxFQUFFLENBQ1o7TUFDRUwsT0FBTyxFQUFFLGdDQUFnQztNQUN6Q0ksVUFBVSxFQUFFO0lBQ2QsQ0FBQztJQUFFO0lBQ0gsWUFBWSxDQUNiO0lBQ0RFLE9BQU8sRUFDTCxpSkFBaUo7SUFDbkpDLFFBQVEsRUFBRSxRQUFRO0lBQ2xCQyxRQUFRLEVBQUU7TUFDUlIsT0FBTyxFQUFFLCtCQUErQjtNQUN4Q0ksVUFBVSxFQUFFO0lBQ2QsQ0FBQztJQUNELFlBQVU7TUFDUkosT0FBTyxFQUNMLDA3QkFBMDdCO01BQzU3QkUsTUFBTSxFQUFFO1FBQ05PLFdBQVcsRUFBRTtNQUNmO0lBQ0YsQ0FBQztJQUNELFdBQVMsb0JBQW9CO0lBQzdCQyxNQUFNLEVBQ0osNEZBQTRGO0lBQzlGQyxRQUFRLEVBQ04sMEVBQTBFO0lBQzVFRixXQUFXLEVBQUU7RUFDZixDQUFDO0VBQ0RiLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixVQUFVLENBQUNNLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQ0csTUFBTSxDQUFDQyxhQUFhLENBQUNELE1BQU0sQ0FBQ1QsVUFBVSxDQUFDUyxNQUFNLEdBQ2hGTixLQUFLLENBQUNDLFNBQVMsQ0FBQ0osVUFBVTtFQUM1QkcsS0FBSyxDQUFDQyxTQUFTLENBQUNlLElBQUksR0FBR2hCLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixVQUFVO0FBQ25EIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcbW9vbnNjcmlwdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBtb29uc2NyaXB0XG5tb29uc2NyaXB0LmRpc3BsYXlOYW1lID0gJ21vb25zY3JpcHQnXG5tb29uc2NyaXB0LmFsaWFzZXMgPSBbJ21vb24nXVxuZnVuY3Rpb24gbW9vbnNjcmlwdChQcmlzbSkge1xuICBQcmlzbS5sYW5ndWFnZXMubW9vbnNjcmlwdCA9IHtcbiAgICBjb21tZW50OiAvLS0uKi8sXG4gICAgc3RyaW5nOiBbXG4gICAgICB7XG4gICAgICAgIHBhdHRlcm46IC8nW14nXSonfFxcWyg9KilcXFtbXFxzXFxTXSo/XFxdXFwxXFxdLyxcbiAgICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBwYXR0ZXJuOiAvXCJbXlwiXSpcIi8sXG4gICAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgaW50ZXJwb2xhdGlvbjoge1xuICAgICAgICAgICAgcGF0dGVybjogLyNcXHtbXnt9XSpcXH0vLFxuICAgICAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgICAgIG1vb25zY3JpcHQ6IHtcbiAgICAgICAgICAgICAgICBwYXR0ZXJuOiAvKF4jXFx7KVtcXHNcXFNdKyg/PVxcfSkvLFxuICAgICAgICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgICAgICAgICAgaW5zaWRlOiBudWxsIC8vIHNlZSBiZW93XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICdpbnRlcnBvbGF0aW9uLXB1bmN0dWF0aW9uJzoge1xuICAgICAgICAgICAgICAgIHBhdHRlcm46IC8jXFx7fFxcfS8sXG4gICAgICAgICAgICAgICAgYWxpYXM6ICdwdW5jdHVhdGlvbidcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIF0sXG4gICAgJ2NsYXNzLW5hbWUnOiBbXG4gICAgICB7XG4gICAgICAgIHBhdHRlcm46IC8oXFxiKD86Y2xhc3N8ZXh0ZW5kcylbIFxcdF0rKVxcdysvLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICB9LCAvLyBjbGFzcy1saWtlIG5hbWVzIHN0YXJ0IHdpdGggYSBjYXBpdGFsIGxldHRlclxuICAgICAgL1xcYltBLVpdXFx3Ki9cbiAgICBdLFxuICAgIGtleXdvcmQ6XG4gICAgICAvXFxiKD86Y2xhc3N8Y29udGludWV8ZG98ZWxzZXxlbHNlaWZ8ZXhwb3J0fGV4dGVuZHN8Zm9yfGZyb218aWZ8aW1wb3J0fGlufGxvY2FsfG5pbHxyZXR1cm58c2VsZnxzdXBlcnxzd2l0Y2h8dGhlbnx1bmxlc3N8dXNpbmd8d2hlbnx3aGlsZXx3aXRoKVxcYi8sXG4gICAgdmFyaWFibGU6IC9AQD9cXHcqLyxcbiAgICBwcm9wZXJ0eToge1xuICAgICAgcGF0dGVybjogL1xcYig/IVxcZClcXHcrKD89Oil8KDopKD8hXFxkKVxcdysvLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgIH0sXG4gICAgZnVuY3Rpb246IHtcbiAgICAgIHBhdHRlcm46XG4gICAgICAgIC9cXGIoPzpfR3xfVkVSU0lPTnxhc3NlcnR8Y29sbGVjdGdhcmJhZ2V8Y29yb3V0aW5lXFwuKD86Y3JlYXRlfHJlc3VtZXxydW5uaW5nfHN0YXR1c3x3cmFwfHlpZWxkKXxkZWJ1Z1xcLig/OmRlYnVnfGdldGZlbnZ8Z2V0aG9va3xnZXRpbmZvfGdldGxvY2FsfGdldG1ldGF0YWJsZXxnZXRyZWdpc3RyeXxnZXR1cHZhbHVlfHNldGZlbnZ8c2V0aG9va3xzZXRsb2NhbHxzZXRtZXRhdGFibGV8c2V0dXB2YWx1ZXx0cmFjZWJhY2spfGRvZmlsZXxlcnJvcnxnZXRmZW52fGdldG1ldGF0YWJsZXxpb1xcLig/OmNsb3NlfGZsdXNofGlucHV0fGxpbmVzfG9wZW58b3V0cHV0fHBvcGVufHJlYWR8c3RkZXJyfHN0ZGlufHN0ZG91dHx0bXBmaWxlfHR5cGV8d3JpdGUpfGlwYWlyc3xsb2FkfGxvYWRmaWxlfGxvYWRzdHJpbmd8bWF0aFxcLig/OmFic3xhY29zfGFzaW58YXRhbnxhdGFuMnxjZWlsfGNvc3xjb3NofGRlZ3xleHB8Zmxvb3J8Zm1vZHxmcmV4cHxsZGV4cHxsb2d8bG9nMTB8bWF4fG1pbnxtb2RmfHBpfHBvd3xyYWR8cmFuZG9tfHJhbmRvbXNlZWR8c2lufHNpbmh8c3FydHx0YW58dGFuaCl8bW9kdWxlfG5leHR8b3NcXC4oPzpjbG9ja3xkYXRlfGRpZmZ0aW1lfGV4ZWN1dGV8ZXhpdHxnZXRlbnZ8cmVtb3ZlfHJlbmFtZXxzZXRsb2NhbGV8dGltZXx0bXBuYW1lKXxwYWNrYWdlXFwuKD86Y3BhdGh8bG9hZGVkfGxvYWRsaWJ8cGF0aHxwcmVsb2FkfHNlZWFsbCl8cGFpcnN8cGNhbGx8cHJpbnR8cmF3ZXF1YWx8cmF3Z2V0fHJhd3NldHxyZXF1aXJlfHNlbGVjdHxzZXRmZW52fHNldG1ldGF0YWJsZXxzdHJpbmdcXC4oPzpieXRlfGNoYXJ8ZHVtcHxmaW5kfGZvcm1hdHxnbWF0Y2h8Z3N1YnxsZW58bG93ZXJ8bWF0Y2h8cmVwfHJldmVyc2V8c3VifHVwcGVyKXx0YWJsZVxcLig/OmNvbmNhdHxpbnNlcnR8bWF4bnxyZW1vdmV8c29ydCl8dG9udW1iZXJ8dG9zdHJpbmd8dHlwZXx1bnBhY2t8eHBjYWxsKVxcYi8sXG4gICAgICBpbnNpZGU6IHtcbiAgICAgICAgcHVuY3R1YXRpb246IC9cXC4vXG4gICAgICB9XG4gICAgfSxcbiAgICBib29sZWFuOiAvXFxiKD86ZmFsc2V8dHJ1ZSlcXGIvLFxuICAgIG51bWJlcjpcbiAgICAgIC8oPzpcXEJcXC5cXGQrfFxcYlxcZCtcXC5cXGQrfFxcYlxcZCsoPz1bZUVdKSkoPzpbZUVdWy0rXT9cXGQrKT9cXGJ8XFxiKD86MHhbYS1mQS1GXFxkXSt8XFxkKykoPzpVP0xMKT9cXGIvLFxuICAgIG9wZXJhdG9yOlxuICAgICAgL1xcLnszfXxbLT1dPnx+PXwoPzpbLSsqLyU8PiE9XXxcXC5cXC4pPT98WzojXl18XFxiKD86YW5kfG9yKVxcYj0/fFxcYig/Om5vdClcXGIvLFxuICAgIHB1bmN0dWF0aW9uOiAvWy4sKClbXFxde31cXFxcXS9cbiAgfVxuICBQcmlzbS5sYW5ndWFnZXMubW9vbnNjcmlwdC5zdHJpbmdbMV0uaW5zaWRlLmludGVycG9sYXRpb24uaW5zaWRlLm1vb25zY3JpcHQuaW5zaWRlID1cbiAgICBQcmlzbS5sYW5ndWFnZXMubW9vbnNjcmlwdFxuICBQcmlzbS5sYW5ndWFnZXMubW9vbiA9IFByaXNtLmxhbmd1YWdlcy5tb29uc2NyaXB0XG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIm1vb25zY3JpcHQiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImxhbmd1YWdlcyIsImNvbW1lbnQiLCJzdHJpbmciLCJwYXR0ZXJuIiwiZ3JlZWR5IiwiaW5zaWRlIiwiaW50ZXJwb2xhdGlvbiIsImxvb2tiZWhpbmQiLCJhbGlhcyIsImtleXdvcmQiLCJ2YXJpYWJsZSIsInByb3BlcnR5IiwicHVuY3R1YXRpb24iLCJudW1iZXIiLCJvcGVyYXRvciIsIm1vb24iXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/moonscript.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/n1ql.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/n1ql.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = n1ql;\nn1ql.displayName = 'n1ql';\nn1ql.aliases = [];\nfunction n1ql(Prism) {\n  // https://docs.couchbase.com/server/current/n1ql/n1ql-language-reference/index.html\n  Prism.languages.n1ql = {\n    comment: {\n      pattern: /\\/\\*[\\s\\S]*?(?:$|\\*\\/)|--.*/,\n      greedy: true\n    },\n    string: {\n      pattern: /([\"'])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\]|\\1\\1)*\\1/,\n      greedy: true\n    },\n    identifier: {\n      pattern: /`(?:\\\\[\\s\\S]|[^\\\\`]|``)*`/,\n      greedy: true\n    },\n    parameter: /\\$[\\w.]+/,\n    // https://docs.couchbase.com/server/current/n1ql/n1ql-language-reference/reservedwords.html#n1ql-reserved-words\n    keyword: /\\b(?:ADVISE|ALL|ALTER|ANALYZE|AS|ASC|AT|BEGIN|BINARY|BOOLEAN|BREAK|BUCKET|BUILD|BY|CALL|CAST|CLUSTER|COLLATE|COLLECTION|COMMIT|COMMITTED|CONNECT|CONTINUE|CORRELATE|CORRELATED|COVER|CREATE|CURRENT|DATABASE|DATASET|DATASTORE|DECLARE|DECREMENT|DELETE|DERIVED|DESC|DESCRIBE|DISTINCT|DO|DROP|EACH|ELEMENT|EXCEPT|EXCLUDE|EXECUTE|EXPLAIN|FETCH|FILTER|FLATTEN|FLUSH|FOLLOWING|FOR|FORCE|FROM|FTS|FUNCTION|GOLANG|GRANT|GROUP|GROUPS|GSI|HASH|HAVING|IF|IGNORE|ILIKE|INCLUDE|INCREMENT|INDEX|INFER|INLINE|INNER|INSERT|INTERSECT|INTO|IS|ISOLATION|JAVASCRIPT|JOIN|KEY|KEYS|KEYSPACE|KNOWN|LANGUAGE|LAST|LEFT|LET|LETTING|LEVEL|LIMIT|LSM|MAP|MAPPING|MATCHED|MATERIALIZED|MERGE|MINUS|MISSING|NAMESPACE|NEST|NL|NO|NTH_VALUE|NULL|NULLS|NUMBER|OBJECT|OFFSET|ON|OPTION|OPTIONS|ORDER|OTHERS|OUTER|OVER|PARSE|PARTITION|PASSWORD|PATH|POOL|PRECEDING|PREPARE|PRIMARY|PRIVATE|PRIVILEGE|PROBE|PROCEDURE|PUBLIC|RANGE|RAW|REALM|REDUCE|RENAME|RESPECT|RETURN|RETURNING|REVOKE|RIGHT|ROLE|ROLLBACK|ROW|ROWS|SATISFIES|SAVEPOINT|SCHEMA|SCOPE|SELECT|SELF|SEMI|SET|SHOW|SOME|START|STATISTICS|STRING|SYSTEM|TIES|TO|TRAN|TRANSACTION|TRIGGER|TRUNCATE|UNBOUNDED|UNDER|UNION|UNIQUE|UNKNOWN|UNNEST|UNSET|UPDATE|UPSERT|USE|USER|USING|VALIDATE|VALUE|VALUES|VIA|VIEW|WHERE|WHILE|WINDOW|WITH|WORK|XOR)\\b/i,\n    \"function\": /\\b[a-z_]\\w*(?=\\s*\\()/i,\n    \"boolean\": /\\b(?:FALSE|TRUE)\\b/i,\n    number: /(?:\\b\\d+\\.|\\B\\.)\\d+e[+\\-]?\\d+\\b|\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+\\b/i,\n    operator: /[-+*\\/%]|!=|==?|\\|\\||<[>=]?|>=?|\\b(?:AND|ANY|ARRAY|BETWEEN|CASE|ELSE|END|EVERY|EXISTS|FIRST|IN|LIKE|NOT|OR|THEN|VALUED|WHEN|WITHIN)\\b/i,\n    punctuation: /[;[\\](),.{}:]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvbjFxbC5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLElBQUk7QUFDckJBLElBQUksQ0FBQ0MsV0FBVyxHQUFHLE1BQU07QUFDekJELElBQUksQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDakIsU0FBU0YsSUFBSUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ25CO0VBQ0FBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixJQUFJLEdBQUc7SUFDckJLLE9BQU8sRUFBRTtNQUNQQyxPQUFPLEVBQUUsNkJBQTZCO01BQ3RDQyxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0RDLE1BQU0sRUFBRTtNQUNORixPQUFPLEVBQUUsd0NBQXdDO01BQ2pEQyxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0RFLFVBQVUsRUFBRTtNQUNWSCxPQUFPLEVBQUUsMkJBQTJCO01BQ3BDQyxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0RHLFNBQVMsRUFBRSxVQUFVO0lBQ3JCO0lBQ0FDLE9BQU8sRUFDTCx1dUNBQXV1QztJQUN6dUMsWUFBVSx1QkFBdUI7SUFDakMsV0FBUyxxQkFBcUI7SUFDOUJDLE1BQU0sRUFBRSw0REFBNEQ7SUFDcEVDLFFBQVEsRUFDTix3SUFBd0k7SUFDMUlDLFdBQVcsRUFBRTtFQUNmLENBQUM7QUFDSCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXG4xcWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gbjFxbFxubjFxbC5kaXNwbGF5TmFtZSA9ICduMXFsJ1xubjFxbC5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIG4xcWwoUHJpc20pIHtcbiAgLy8gaHR0cHM6Ly9kb2NzLmNvdWNoYmFzZS5jb20vc2VydmVyL2N1cnJlbnQvbjFxbC9uMXFsLWxhbmd1YWdlLXJlZmVyZW5jZS9pbmRleC5odG1sXG4gIFByaXNtLmxhbmd1YWdlcy5uMXFsID0ge1xuICAgIGNvbW1lbnQ6IHtcbiAgICAgIHBhdHRlcm46IC9cXC9cXCpbXFxzXFxTXSo/KD86JHxcXCpcXC8pfC0tLiovLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICBzdHJpbmc6IHtcbiAgICAgIHBhdHRlcm46IC8oW1wiJ10pKD86XFxcXFtcXHNcXFNdfCg/IVxcMSlbXlxcXFxdfFxcMVxcMSkqXFwxLyxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgaWRlbnRpZmllcjoge1xuICAgICAgcGF0dGVybjogL2AoPzpcXFxcW1xcc1xcU118W15cXFxcYF18YGApKmAvLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICBwYXJhbWV0ZXI6IC9cXCRbXFx3Ll0rLyxcbiAgICAvLyBodHRwczovL2RvY3MuY291Y2hiYXNlLmNvbS9zZXJ2ZXIvY3VycmVudC9uMXFsL24xcWwtbGFuZ3VhZ2UtcmVmZXJlbmNlL3Jlc2VydmVkd29yZHMuaHRtbCNuMXFsLXJlc2VydmVkLXdvcmRzXG4gICAga2V5d29yZDpcbiAgICAgIC9cXGIoPzpBRFZJU0V8QUxMfEFMVEVSfEFOQUxZWkV8QVN8QVNDfEFUfEJFR0lOfEJJTkFSWXxCT09MRUFOfEJSRUFLfEJVQ0tFVHxCVUlMRHxCWXxDQUxMfENBU1R8Q0xVU1RFUnxDT0xMQVRFfENPTExFQ1RJT058Q09NTUlUfENPTU1JVFRFRHxDT05ORUNUfENPTlRJTlVFfENPUlJFTEFURXxDT1JSRUxBVEVEfENPVkVSfENSRUFURXxDVVJSRU5UfERBVEFCQVNFfERBVEFTRVR8REFUQVNUT1JFfERFQ0xBUkV8REVDUkVNRU5UfERFTEVURXxERVJJVkVEfERFU0N8REVTQ1JJQkV8RElTVElOQ1R8RE98RFJPUHxFQUNIfEVMRU1FTlR8RVhDRVBUfEVYQ0xVREV8RVhFQ1VURXxFWFBMQUlOfEZFVENIfEZJTFRFUnxGTEFUVEVOfEZMVVNIfEZPTExPV0lOR3xGT1J8Rk9SQ0V8RlJPTXxGVFN8RlVOQ1RJT058R09MQU5HfEdSQU5UfEdST1VQfEdST1VQU3xHU0l8SEFTSHxIQVZJTkd8SUZ8SUdOT1JFfElMSUtFfElOQ0xVREV8SU5DUkVNRU5UfElOREVYfElORkVSfElOTElORXxJTk5FUnxJTlNFUlR8SU5URVJTRUNUfElOVE98SVN8SVNPTEFUSU9OfEpBVkFTQ1JJUFR8Sk9JTnxLRVl8S0VZU3xLRVlTUEFDRXxLTk9XTnxMQU5HVUFHRXxMQVNUfExFRlR8TEVUfExFVFRJTkd8TEVWRUx8TElNSVR8TFNNfE1BUHxNQVBQSU5HfE1BVENIRUR8TUFURVJJQUxJWkVEfE1FUkdFfE1JTlVTfE1JU1NJTkd8TkFNRVNQQUNFfE5FU1R8Tkx8Tk98TlRIX1ZBTFVFfE5VTEx8TlVMTFN8TlVNQkVSfE9CSkVDVHxPRkZTRVR8T058T1BUSU9OfE9QVElPTlN8T1JERVJ8T1RIRVJTfE9VVEVSfE9WRVJ8UEFSU0V8UEFSVElUSU9OfFBBU1NXT1JEfFBBVEh8UE9PTHxQUkVDRURJTkd8UFJFUEFSRXxQUklNQVJZfFBSSVZBVEV8UFJJVklMRUdFfFBST0JFfFBST0NFRFVSRXxQVUJMSUN8UkFOR0V8UkFXfFJFQUxNfFJFRFVDRXxSRU5BTUV8UkVTUEVDVHxSRVRVUk58UkVUVVJOSU5HfFJFVk9LRXxSSUdIVHxST0xFfFJPTExCQUNLfFJPV3xST1dTfFNBVElTRklFU3xTQVZFUE9JTlR8U0NIRU1BfFNDT1BFfFNFTEVDVHxTRUxGfFNFTUl8U0VUfFNIT1d8U09NRXxTVEFSVHxTVEFUSVNUSUNTfFNUUklOR3xTWVNURU18VElFU3xUT3xUUkFOfFRSQU5TQUNUSU9OfFRSSUdHRVJ8VFJVTkNBVEV8VU5CT1VOREVEfFVOREVSfFVOSU9OfFVOSVFVRXxVTktOT1dOfFVOTkVTVHxVTlNFVHxVUERBVEV8VVBTRVJUfFVTRXxVU0VSfFVTSU5HfFZBTElEQVRFfFZBTFVFfFZBTFVFU3xWSUF8VklFV3xXSEVSRXxXSElMRXxXSU5ET1d8V0lUSHxXT1JLfFhPUilcXGIvaSxcbiAgICBmdW5jdGlvbjogL1xcYlthLXpfXVxcdyooPz1cXHMqXFwoKS9pLFxuICAgIGJvb2xlYW46IC9cXGIoPzpGQUxTRXxUUlVFKVxcYi9pLFxuICAgIG51bWJlcjogLyg/OlxcYlxcZCtcXC58XFxCXFwuKVxcZCtlWytcXC1dP1xcZCtcXGJ8XFxiXFxkKyg/OlxcLlxcZCopP3xcXEJcXC5cXGQrXFxiL2ksXG4gICAgb3BlcmF0b3I6XG4gICAgICAvWy0rKlxcLyVdfCE9fD09P3xcXHxcXHx8PFs+PV0/fD49P3xcXGIoPzpBTkR8QU5ZfEFSUkFZfEJFVFdFRU58Q0FTRXxFTFNFfEVORHxFVkVSWXxFWElTVFN8RklSU1R8SU58TElLRXxOT1R8T1J8VEhFTnxWQUxVRUR8V0hFTnxXSVRISU4pXFxiL2ksXG4gICAgcHVuY3R1YXRpb246IC9bO1tcXF0oKSwue306XS9cbiAgfVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJuMXFsIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJjb21tZW50IiwicGF0dGVybiIsImdyZWVkeSIsInN0cmluZyIsImlkZW50aWZpZXIiLCJwYXJhbWV0ZXIiLCJrZXl3b3JkIiwibnVtYmVyIiwib3BlcmF0b3IiLCJwdW5jdHVhdGlvbiJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/n1ql.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/n4js.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/n4js.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = n4js;\nn4js.displayName = 'n4js';\nn4js.aliases = ['n4jsd'];\nfunction n4js(Prism) {\n  Prism.languages.n4js = Prism.languages.extend('javascript', {\n    // Keywords from N4JS language spec: https://numberfour.github.io/n4js/spec/N4JSSpec.html\n    keyword: /\\b(?:Array|any|boolean|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|false|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|module|new|null|number|package|private|protected|public|return|set|static|string|super|switch|this|throw|true|try|typeof|var|void|while|with|yield)\\b/\n  });\n  Prism.languages.insertBefore('n4js', 'constant', {\n    // Annotations in N4JS spec: https://numberfour.github.io/n4js/spec/N4JSSpec.html#_annotations\n    annotation: {\n      pattern: /@+\\w+/,\n      alias: 'operator'\n    }\n  });\n  Prism.languages.n4jsd = Prism.languages.n4js;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvbjRqcy5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLElBQUk7QUFDckJBLElBQUksQ0FBQ0MsV0FBVyxHQUFHLE1BQU07QUFDekJELElBQUksQ0FBQ0UsT0FBTyxHQUFHLENBQUMsT0FBTyxDQUFDO0FBQ3hCLFNBQVNGLElBQUlBLENBQUNHLEtBQUssRUFBRTtFQUNuQkEsS0FBSyxDQUFDQyxTQUFTLENBQUNKLElBQUksR0FBR0csS0FBSyxDQUFDQyxTQUFTLENBQUNDLE1BQU0sQ0FBQyxZQUFZLEVBQUU7SUFDMUQ7SUFDQUMsT0FBTyxFQUNMO0VBQ0osQ0FBQyxDQUFDO0VBQ0ZILEtBQUssQ0FBQ0MsU0FBUyxDQUFDRyxZQUFZLENBQUMsTUFBTSxFQUFFLFVBQVUsRUFBRTtJQUMvQztJQUNBQyxVQUFVLEVBQUU7TUFDVkMsT0FBTyxFQUFFLE9BQU87TUFDaEJDLEtBQUssRUFBRTtJQUNUO0VBQ0YsQ0FBQyxDQUFDO0VBQ0ZQLEtBQUssQ0FBQ0MsU0FBUyxDQUFDTyxLQUFLLEdBQUdSLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixJQUFJO0FBQzlDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcbjRqcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBuNGpzXG5uNGpzLmRpc3BsYXlOYW1lID0gJ240anMnXG5uNGpzLmFsaWFzZXMgPSBbJ240anNkJ11cbmZ1bmN0aW9uIG40anMoUHJpc20pIHtcbiAgUHJpc20ubGFuZ3VhZ2VzLm40anMgPSBQcmlzbS5sYW5ndWFnZXMuZXh0ZW5kKCdqYXZhc2NyaXB0Jywge1xuICAgIC8vIEtleXdvcmRzIGZyb20gTjRKUyBsYW5ndWFnZSBzcGVjOiBodHRwczovL251bWJlcmZvdXIuZ2l0aHViLmlvL240anMvc3BlYy9ONEpTU3BlYy5odG1sXG4gICAga2V5d29yZDpcbiAgICAgIC9cXGIoPzpBcnJheXxhbnl8Ym9vbGVhbnxicmVha3xjYXNlfGNhdGNofGNsYXNzfGNvbnN0fGNvbnN0cnVjdG9yfGNvbnRpbnVlfGRlYnVnZ2VyfGRlY2xhcmV8ZGVmYXVsdHxkZWxldGV8ZG98ZWxzZXxlbnVtfGV4cG9ydHxleHRlbmRzfGZhbHNlfGZpbmFsbHl8Zm9yfGZyb218ZnVuY3Rpb258Z2V0fGlmfGltcGxlbWVudHN8aW1wb3J0fGlufGluc3RhbmNlb2Z8aW50ZXJmYWNlfGxldHxtb2R1bGV8bmV3fG51bGx8bnVtYmVyfHBhY2thZ2V8cHJpdmF0ZXxwcm90ZWN0ZWR8cHVibGljfHJldHVybnxzZXR8c3RhdGljfHN0cmluZ3xzdXBlcnxzd2l0Y2h8dGhpc3x0aHJvd3x0cnVlfHRyeXx0eXBlb2Z8dmFyfHZvaWR8d2hpbGV8d2l0aHx5aWVsZClcXGIvXG4gIH0pXG4gIFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ240anMnLCAnY29uc3RhbnQnLCB7XG4gICAgLy8gQW5ub3RhdGlvbnMgaW4gTjRKUyBzcGVjOiBodHRwczovL251bWJlcmZvdXIuZ2l0aHViLmlvL240anMvc3BlYy9ONEpTU3BlYy5odG1sI19hbm5vdGF0aW9uc1xuICAgIGFubm90YXRpb246IHtcbiAgICAgIHBhdHRlcm46IC9AK1xcdysvLFxuICAgICAgYWxpYXM6ICdvcGVyYXRvcidcbiAgICB9XG4gIH0pXG4gIFByaXNtLmxhbmd1YWdlcy5uNGpzZCA9IFByaXNtLmxhbmd1YWdlcy5uNGpzXG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIm40anMiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImxhbmd1YWdlcyIsImV4dGVuZCIsImtleXdvcmQiLCJpbnNlcnRCZWZvcmUiLCJhbm5vdGF0aW9uIiwicGF0dGVybiIsImFsaWFzIiwibjRqc2QiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/n4js.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/nand2tetris-hdl.js":
/*!********************************************************!*\
  !*** ./node_modules/refractor/lang/nand2tetris-hdl.js ***!
  \********************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = nand2tetrisHdl;\nnand2tetrisHdl.displayName = 'nand2tetrisHdl';\nnand2tetrisHdl.aliases = [];\nfunction nand2tetrisHdl(Prism) {\n  Prism.languages['nand2tetris-hdl'] = {\n    comment: /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    keyword: /\\b(?:BUILTIN|CHIP|CLOCKED|IN|OUT|PARTS)\\b/,\n    \"boolean\": /\\b(?:false|true)\\b/,\n    \"function\": /\\b[A-Za-z][A-Za-z0-9]*(?=\\()/,\n    number: /\\b\\d+\\b/,\n    operator: /=|\\.\\./,\n    punctuation: /[{}[\\];(),:]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvbmFuZDJ0ZXRyaXMtaGRsLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsY0FBYztBQUMvQkEsY0FBYyxDQUFDQyxXQUFXLEdBQUcsZ0JBQWdCO0FBQzdDRCxjQUFjLENBQUNFLE9BQU8sR0FBRyxFQUFFO0FBQzNCLFNBQVNGLGNBQWNBLENBQUNHLEtBQUssRUFBRTtFQUM3QkEsS0FBSyxDQUFDQyxTQUFTLENBQUMsaUJBQWlCLENBQUMsR0FBRztJQUNuQ0MsT0FBTyxFQUFFLCtCQUErQjtJQUN4Q0MsT0FBTyxFQUFFLDJDQUEyQztJQUNwRCxXQUFTLG9CQUFvQjtJQUM3QixZQUFVLDhCQUE4QjtJQUN4Q0MsTUFBTSxFQUFFLFNBQVM7SUFDakJDLFFBQVEsRUFBRSxRQUFRO0lBQ2xCQyxXQUFXLEVBQUU7RUFDZixDQUFDO0FBQ0giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxuYW5kMnRldHJpcy1oZGwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gbmFuZDJ0ZXRyaXNIZGxcbm5hbmQydGV0cmlzSGRsLmRpc3BsYXlOYW1lID0gJ25hbmQydGV0cmlzSGRsJ1xubmFuZDJ0ZXRyaXNIZGwuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBuYW5kMnRldHJpc0hkbChQcmlzbSkge1xuICBQcmlzbS5sYW5ndWFnZXNbJ25hbmQydGV0cmlzLWhkbCddID0ge1xuICAgIGNvbW1lbnQ6IC9cXC9cXC8uKnxcXC9cXCpbXFxzXFxTXSo/KD86XFwqXFwvfCQpLyxcbiAgICBrZXl3b3JkOiAvXFxiKD86QlVJTFRJTnxDSElQfENMT0NLRUR8SU58T1VUfFBBUlRTKVxcYi8sXG4gICAgYm9vbGVhbjogL1xcYig/OmZhbHNlfHRydWUpXFxiLyxcbiAgICBmdW5jdGlvbjogL1xcYltBLVphLXpdW0EtWmEtejAtOV0qKD89XFwoKS8sXG4gICAgbnVtYmVyOiAvXFxiXFxkK1xcYi8sXG4gICAgb3BlcmF0b3I6IC89fFxcLlxcLi8sXG4gICAgcHVuY3R1YXRpb246IC9be31bXFxdOygpLDpdL1xuICB9XG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIm5hbmQydGV0cmlzSGRsIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJjb21tZW50Iiwia2V5d29yZCIsIm51bWJlciIsIm9wZXJhdG9yIiwicHVuY3R1YXRpb24iXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/nand2tetris-hdl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/naniscript.js":
/*!***************************************************!*\
  !*** ./node_modules/refractor/lang/naniscript.js ***!
  \***************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = naniscript;\nnaniscript.displayName = 'naniscript';\nnaniscript.aliases = [];\nfunction naniscript(Prism) {\n  ;\n  (function (Prism) {\n    var expressionDef = /\\{[^\\r\\n\\[\\]{}]*\\}/;\n    var params = {\n      'quoted-string': {\n        pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n        alias: 'operator'\n      },\n      'command-param-id': {\n        pattern: /(\\s)\\w+:/,\n        lookbehind: true,\n        alias: 'property'\n      },\n      'command-param-value': [{\n        pattern: expressionDef,\n        alias: 'selector'\n      }, {\n        pattern: /([\\t ])\\S+/,\n        lookbehind: true,\n        greedy: true,\n        alias: 'operator'\n      }, {\n        pattern: /\\S(?:.*\\S)?/,\n        alias: 'operator'\n      }]\n    };\n    Prism.languages.naniscript = {\n      // ; ...\n      comment: {\n        pattern: /^([\\t ]*);.*/m,\n        lookbehind: true\n      },\n      // > ...\n      // Define is a control line starting with '>' followed by a word, a space and a text.\n      define: {\n        pattern: /^>.+/m,\n        alias: 'tag',\n        inside: {\n          value: {\n            pattern: /(^>\\w+[\\t ]+)(?!\\s)[^{}\\r\\n]+/,\n            lookbehind: true,\n            alias: 'operator'\n          },\n          key: {\n            pattern: /(^>)\\w+/,\n            lookbehind: true\n          }\n        }\n      },\n      // # ...\n      label: {\n        pattern: /^([\\t ]*)#[\\t ]*\\w+[\\t ]*$/m,\n        lookbehind: true,\n        alias: 'regex'\n      },\n      command: {\n        pattern: /^([\\t ]*)@\\w+(?=[\\t ]|$).*/m,\n        lookbehind: true,\n        alias: 'function',\n        inside: {\n          'command-name': /^@\\w+/,\n          expression: {\n            pattern: expressionDef,\n            greedy: true,\n            alias: 'selector'\n          },\n          'command-params': {\n            pattern: /\\s*\\S[\\s\\S]*/,\n            inside: params\n          }\n        }\n      },\n      // Generic is any line that doesn't start with operators: ;>#@\n      'generic-text': {\n        pattern: /(^[ \\t]*)[^#@>;\\s].*/m,\n        lookbehind: true,\n        alias: 'punctuation',\n        inside: {\n          // \\{ ... \\} ... \\[ ... \\] ... \\\"\n          'escaped-char': /\\\\[{}\\[\\]\"]/,\n          expression: {\n            pattern: expressionDef,\n            greedy: true,\n            alias: 'selector'\n          },\n          'inline-command': {\n            pattern: /\\[[\\t ]*\\w[^\\r\\n\\[\\]]*\\]/,\n            greedy: true,\n            alias: 'function',\n            inside: {\n              'command-params': {\n                pattern: /(^\\[[\\t ]*\\w+\\b)[\\s\\S]+(?=\\]$)/,\n                lookbehind: true,\n                inside: params\n              },\n              'command-param-name': {\n                pattern: /^(\\[[\\t ]*)\\w+/,\n                lookbehind: true,\n                alias: 'name'\n              },\n              'start-stop-char': /[\\[\\]]/\n            }\n          }\n        }\n      }\n    };\n    Prism.languages.nani = Prism.languages['naniscript'];\n    /** @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token */\n    /**\n     * This hook is used to validate generic-text tokens for balanced brackets.\n     * Mark token as bad-line when contains not balanced brackets: {},[]\n     */\n    Prism.hooks.add('after-tokenize', function (env) {\n      /** @type {(Token | string)[]} */\n      var tokens = env.tokens;\n      tokens.forEach(function (token) {\n        if (typeof token !== 'string' && token.type === 'generic-text') {\n          var content = getTextContent(token);\n          if (!isBracketsBalanced(content)) {\n            token.type = 'bad-line';\n            token.content = content;\n          }\n        }\n      });\n    });\n    /**\n     * @param {string} input\n     * @returns {boolean}\n     */\n    function isBracketsBalanced(input) {\n      var brackets = '[]{}';\n      var stack = [];\n      for (var i = 0; i < input.length; i++) {\n        var bracket = input[i];\n        var bracketsIndex = brackets.indexOf(bracket);\n        if (bracketsIndex !== -1) {\n          if (bracketsIndex % 2 === 0) {\n            stack.push(bracketsIndex + 1);\n          } else if (stack.pop() !== bracketsIndex) {\n            return false;\n          }\n        }\n      }\n      return stack.length === 0;\n    }\n    /**\n     * @param {string | Token | (string | Token)[]} token\n     * @returns {string}\n     */\n    function getTextContent(token) {\n      if (typeof token === 'string') {\n        return token;\n      } else if (Array.isArray(token)) {\n        return token.map(getTextContent).join('');\n      } else {\n        return getTextContent(token.content);\n      }\n    }\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvbmFuaXNjcmlwdC5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLFVBQVU7QUFDM0JBLFVBQVUsQ0FBQ0MsV0FBVyxHQUFHLFlBQVk7QUFDckNELFVBQVUsQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDdkIsU0FBU0YsVUFBVUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ3pCO0VBQUMsQ0FBQyxVQUFVQSxLQUFLLEVBQUU7SUFDakIsSUFBSUMsYUFBYSxHQUFHLG9CQUFvQjtJQUN4QyxJQUFJQyxNQUFNLEdBQUc7TUFDWCxlQUFlLEVBQUU7UUFDZkMsT0FBTyxFQUFFLG1CQUFtQjtRQUM1QkMsS0FBSyxFQUFFO01BQ1QsQ0FBQztNQUNELGtCQUFrQixFQUFFO1FBQ2xCRCxPQUFPLEVBQUUsVUFBVTtRQUNuQkUsVUFBVSxFQUFFLElBQUk7UUFDaEJELEtBQUssRUFBRTtNQUNULENBQUM7TUFDRCxxQkFBcUIsRUFBRSxDQUNyQjtRQUNFRCxPQUFPLEVBQUVGLGFBQWE7UUFDdEJHLEtBQUssRUFBRTtNQUNULENBQUMsRUFDRDtRQUNFRCxPQUFPLEVBQUUsWUFBWTtRQUNyQkUsVUFBVSxFQUFFLElBQUk7UUFDaEJDLE1BQU0sRUFBRSxJQUFJO1FBQ1pGLEtBQUssRUFBRTtNQUNULENBQUMsRUFDRDtRQUNFRCxPQUFPLEVBQUUsYUFBYTtRQUN0QkMsS0FBSyxFQUFFO01BQ1QsQ0FBQztJQUVMLENBQUM7SUFDREosS0FBSyxDQUFDTyxTQUFTLENBQUNWLFVBQVUsR0FBRztNQUMzQjtNQUNBVyxPQUFPLEVBQUU7UUFDUEwsT0FBTyxFQUFFLGVBQWU7UUFDeEJFLFVBQVUsRUFBRTtNQUNkLENBQUM7TUFDRDtNQUNBO01BQ0FJLE1BQU0sRUFBRTtRQUNOTixPQUFPLEVBQUUsT0FBTztRQUNoQkMsS0FBSyxFQUFFLEtBQUs7UUFDWk0sTUFBTSxFQUFFO1VBQ05DLEtBQUssRUFBRTtZQUNMUixPQUFPLEVBQUUsK0JBQStCO1lBQ3hDRSxVQUFVLEVBQUUsSUFBSTtZQUNoQkQsS0FBSyxFQUFFO1VBQ1QsQ0FBQztVQUNEUSxHQUFHLEVBQUU7WUFDSFQsT0FBTyxFQUFFLFNBQVM7WUFDbEJFLFVBQVUsRUFBRTtVQUNkO1FBQ0Y7TUFDRixDQUFDO01BQ0Q7TUFDQVEsS0FBSyxFQUFFO1FBQ0xWLE9BQU8sRUFBRSw2QkFBNkI7UUFDdENFLFVBQVUsRUFBRSxJQUFJO1FBQ2hCRCxLQUFLLEVBQUU7TUFDVCxDQUFDO01BQ0RVLE9BQU8sRUFBRTtRQUNQWCxPQUFPLEVBQUUsNkJBQTZCO1FBQ3RDRSxVQUFVLEVBQUUsSUFBSTtRQUNoQkQsS0FBSyxFQUFFLFVBQVU7UUFDakJNLE1BQU0sRUFBRTtVQUNOLGNBQWMsRUFBRSxPQUFPO1VBQ3ZCSyxVQUFVLEVBQUU7WUFDVlosT0FBTyxFQUFFRixhQUFhO1lBQ3RCSyxNQUFNLEVBQUUsSUFBSTtZQUNaRixLQUFLLEVBQUU7VUFDVCxDQUFDO1VBQ0QsZ0JBQWdCLEVBQUU7WUFDaEJELE9BQU8sRUFBRSxjQUFjO1lBQ3ZCTyxNQUFNLEVBQUVSO1VBQ1Y7UUFDRjtNQUNGLENBQUM7TUFDRDtNQUNBLGNBQWMsRUFBRTtRQUNkQyxPQUFPLEVBQUUsdUJBQXVCO1FBQ2hDRSxVQUFVLEVBQUUsSUFBSTtRQUNoQkQsS0FBSyxFQUFFLGFBQWE7UUFDcEJNLE1BQU0sRUFBRTtVQUNOO1VBQ0EsY0FBYyxFQUFFLGFBQWE7VUFDN0JLLFVBQVUsRUFBRTtZQUNWWixPQUFPLEVBQUVGLGFBQWE7WUFDdEJLLE1BQU0sRUFBRSxJQUFJO1lBQ1pGLEtBQUssRUFBRTtVQUNULENBQUM7VUFDRCxnQkFBZ0IsRUFBRTtZQUNoQkQsT0FBTyxFQUFFLDBCQUEwQjtZQUNuQ0csTUFBTSxFQUFFLElBQUk7WUFDWkYsS0FBSyxFQUFFLFVBQVU7WUFDakJNLE1BQU0sRUFBRTtjQUNOLGdCQUFnQixFQUFFO2dCQUNoQlAsT0FBTyxFQUFFLGdDQUFnQztnQkFDekNFLFVBQVUsRUFBRSxJQUFJO2dCQUNoQkssTUFBTSxFQUFFUjtjQUNWLENBQUM7Y0FDRCxvQkFBb0IsRUFBRTtnQkFDcEJDLE9BQU8sRUFBRSxnQkFBZ0I7Z0JBQ3pCRSxVQUFVLEVBQUUsSUFBSTtnQkFDaEJELEtBQUssRUFBRTtjQUNULENBQUM7Y0FDRCxpQkFBaUIsRUFBRTtZQUNyQjtVQUNGO1FBQ0Y7TUFDRjtJQUNGLENBQUM7SUFDREosS0FBSyxDQUFDTyxTQUFTLENBQUNTLElBQUksR0FBR2hCLEtBQUssQ0FBQ08sU0FBUyxDQUFDLFlBQVksQ0FBQztJQUNwRDtJQUNBO0FBQ0o7QUFDQTtBQUNBO0lBQ0lQLEtBQUssQ0FBQ2lCLEtBQUssQ0FBQ0MsR0FBRyxDQUFDLGdCQUFnQixFQUFFLFVBQVVDLEdBQUcsRUFBRTtNQUMvQztNQUNBLElBQUlDLE1BQU0sR0FBR0QsR0FBRyxDQUFDQyxNQUFNO01BQ3ZCQSxNQUFNLENBQUNDLE9BQU8sQ0FBQyxVQUFVQyxLQUFLLEVBQUU7UUFDOUIsSUFBSSxPQUFPQSxLQUFLLEtBQUssUUFBUSxJQUFJQSxLQUFLLENBQUNDLElBQUksS0FBSyxjQUFjLEVBQUU7VUFDOUQsSUFBSUMsT0FBTyxHQUFHQyxjQUFjLENBQUNILEtBQUssQ0FBQztVQUNuQyxJQUFJLENBQUNJLGtCQUFrQixDQUFDRixPQUFPLENBQUMsRUFBRTtZQUNoQ0YsS0FBSyxDQUFDQyxJQUFJLEdBQUcsVUFBVTtZQUN2QkQsS0FBSyxDQUFDRSxPQUFPLEdBQUdBLE9BQU87VUFDekI7UUFDRjtNQUNGLENBQUMsQ0FBQztJQUNKLENBQUMsQ0FBQztJQUNGO0FBQ0o7QUFDQTtBQUNBO0lBQ0ksU0FBU0Usa0JBQWtCQSxDQUFDQyxLQUFLLEVBQUU7TUFDakMsSUFBSUMsUUFBUSxHQUFHLE1BQU07TUFDckIsSUFBSUMsS0FBSyxHQUFHLEVBQUU7TUFDZCxLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR0gsS0FBSyxDQUFDSSxNQUFNLEVBQUVELENBQUMsRUFBRSxFQUFFO1FBQ3JDLElBQUlFLE9BQU8sR0FBR0wsS0FBSyxDQUFDRyxDQUFDLENBQUM7UUFDdEIsSUFBSUcsYUFBYSxHQUFHTCxRQUFRLENBQUNNLE9BQU8sQ0FBQ0YsT0FBTyxDQUFDO1FBQzdDLElBQUlDLGFBQWEsS0FBSyxDQUFDLENBQUMsRUFBRTtVQUN4QixJQUFJQSxhQUFhLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUMzQkosS0FBSyxDQUFDTSxJQUFJLENBQUNGLGFBQWEsR0FBRyxDQUFDLENBQUM7VUFDL0IsQ0FBQyxNQUFNLElBQUlKLEtBQUssQ0FBQ08sR0FBRyxDQUFDLENBQUMsS0FBS0gsYUFBYSxFQUFFO1lBQ3hDLE9BQU8sS0FBSztVQUNkO1FBQ0Y7TUFDRjtNQUNBLE9BQU9KLEtBQUssQ0FBQ0UsTUFBTSxLQUFLLENBQUM7SUFDM0I7SUFDQTtBQUNKO0FBQ0E7QUFDQTtJQUNJLFNBQVNOLGNBQWNBLENBQUNILEtBQUssRUFBRTtNQUM3QixJQUFJLE9BQU9BLEtBQUssS0FBSyxRQUFRLEVBQUU7UUFDN0IsT0FBT0EsS0FBSztNQUNkLENBQUMsTUFBTSxJQUFJZSxLQUFLLENBQUNDLE9BQU8sQ0FBQ2hCLEtBQUssQ0FBQyxFQUFFO1FBQy9CLE9BQU9BLEtBQUssQ0FBQ2lCLEdBQUcsQ0FBQ2QsY0FBYyxDQUFDLENBQUNlLElBQUksQ0FBQyxFQUFFLENBQUM7TUFDM0MsQ0FBQyxNQUFNO1FBQ0wsT0FBT2YsY0FBYyxDQUFDSCxLQUFLLENBQUNFLE9BQU8sQ0FBQztNQUN0QztJQUNGO0VBQ0YsQ0FBQyxFQUFFeEIsS0FBSyxDQUFDO0FBQ1giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxuYW5pc2NyaXB0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5hbmlzY3JpcHRcbm5hbmlzY3JpcHQuZGlzcGxheU5hbWUgPSAnbmFuaXNjcmlwdCdcbm5hbmlzY3JpcHQuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBuYW5pc2NyaXB0KFByaXNtKSB7XG4gIDsoZnVuY3Rpb24gKFByaXNtKSB7XG4gICAgdmFyIGV4cHJlc3Npb25EZWYgPSAvXFx7W15cXHJcXG5cXFtcXF17fV0qXFx9L1xuICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICAncXVvdGVkLXN0cmluZyc6IHtcbiAgICAgICAgcGF0dGVybjogL1wiKD86W15cIlxcXFxdfFxcXFwuKSpcIi8sXG4gICAgICAgIGFsaWFzOiAnb3BlcmF0b3InXG4gICAgICB9LFxuICAgICAgJ2NvbW1hbmQtcGFyYW0taWQnOiB7XG4gICAgICAgIHBhdHRlcm46IC8oXFxzKVxcdys6LyxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgYWxpYXM6ICdwcm9wZXJ0eSdcbiAgICAgIH0sXG4gICAgICAnY29tbWFuZC1wYXJhbS12YWx1ZSc6IFtcbiAgICAgICAge1xuICAgICAgICAgIHBhdHRlcm46IGV4cHJlc3Npb25EZWYsXG4gICAgICAgICAgYWxpYXM6ICdzZWxlY3RvcidcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHBhdHRlcm46IC8oW1xcdCBdKVxcUysvLFxuICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgICAgIGFsaWFzOiAnb3BlcmF0b3InXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwYXR0ZXJuOiAvXFxTKD86LipcXFMpPy8sXG4gICAgICAgICAgYWxpYXM6ICdvcGVyYXRvcidcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH1cbiAgICBQcmlzbS5sYW5ndWFnZXMubmFuaXNjcmlwdCA9IHtcbiAgICAgIC8vIDsgLi4uXG4gICAgICBjb21tZW50OiB7XG4gICAgICAgIHBhdHRlcm46IC9eKFtcXHQgXSopOy4qL20sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH0sXG4gICAgICAvLyA+IC4uLlxuICAgICAgLy8gRGVmaW5lIGlzIGEgY29udHJvbCBsaW5lIHN0YXJ0aW5nIHdpdGggJz4nIGZvbGxvd2VkIGJ5IGEgd29yZCwgYSBzcGFjZSBhbmQgYSB0ZXh0LlxuICAgICAgZGVmaW5lOiB7XG4gICAgICAgIHBhdHRlcm46IC9ePi4rL20sXG4gICAgICAgIGFsaWFzOiAndGFnJyxcbiAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgIHBhdHRlcm46IC8oXj5cXHcrW1xcdCBdKykoPyFcXHMpW157fVxcclxcbl0rLyxcbiAgICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgICAgICBhbGlhczogJ29wZXJhdG9yJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAga2V5OiB7XG4gICAgICAgICAgICBwYXR0ZXJuOiAvKF4+KVxcdysvLFxuICAgICAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vICMgLi4uXG4gICAgICBsYWJlbDoge1xuICAgICAgICBwYXR0ZXJuOiAvXihbXFx0IF0qKSNbXFx0IF0qXFx3K1tcXHQgXSokL20sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGFsaWFzOiAncmVnZXgnXG4gICAgICB9LFxuICAgICAgY29tbWFuZDoge1xuICAgICAgICBwYXR0ZXJuOiAvXihbXFx0IF0qKUBcXHcrKD89W1xcdCBdfCQpLiovbSxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgYWxpYXM6ICdmdW5jdGlvbicsXG4gICAgICAgIGluc2lkZToge1xuICAgICAgICAgICdjb21tYW5kLW5hbWUnOiAvXkBcXHcrLyxcbiAgICAgICAgICBleHByZXNzaW9uOiB7XG4gICAgICAgICAgICBwYXR0ZXJuOiBleHByZXNzaW9uRGVmLFxuICAgICAgICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgICAgICAgYWxpYXM6ICdzZWxlY3RvcidcbiAgICAgICAgICB9LFxuICAgICAgICAgICdjb21tYW5kLXBhcmFtcyc6IHtcbiAgICAgICAgICAgIHBhdHRlcm46IC9cXHMqXFxTW1xcc1xcU10qLyxcbiAgICAgICAgICAgIGluc2lkZTogcGFyYW1zXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gR2VuZXJpYyBpcyBhbnkgbGluZSB0aGF0IGRvZXNuJ3Qgc3RhcnQgd2l0aCBvcGVyYXRvcnM6IDs+I0BcbiAgICAgICdnZW5lcmljLXRleHQnOiB7XG4gICAgICAgIHBhdHRlcm46IC8oXlsgXFx0XSopW14jQD47XFxzXS4qL20sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGFsaWFzOiAncHVuY3R1YXRpb24nLFxuICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICAvLyBcXHsgLi4uIFxcfSAuLi4gXFxbIC4uLiBcXF0gLi4uIFxcXCJcbiAgICAgICAgICAnZXNjYXBlZC1jaGFyJzogL1xcXFxbe31cXFtcXF1cIl0vLFxuICAgICAgICAgIGV4cHJlc3Npb246IHtcbiAgICAgICAgICAgIHBhdHRlcm46IGV4cHJlc3Npb25EZWYsXG4gICAgICAgICAgICBncmVlZHk6IHRydWUsXG4gICAgICAgICAgICBhbGlhczogJ3NlbGVjdG9yJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgJ2lubGluZS1jb21tYW5kJzoge1xuICAgICAgICAgICAgcGF0dGVybjogL1xcW1tcXHQgXSpcXHdbXlxcclxcblxcW1xcXV0qXFxdLyxcbiAgICAgICAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgICAgICAgIGFsaWFzOiAnZnVuY3Rpb24nLFxuICAgICAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgICAgICdjb21tYW5kLXBhcmFtcyc6IHtcbiAgICAgICAgICAgICAgICBwYXR0ZXJuOiAvKF5cXFtbXFx0IF0qXFx3K1xcYilbXFxzXFxTXSsoPz1cXF0kKS8sXG4gICAgICAgICAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBpbnNpZGU6IHBhcmFtc1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAnY29tbWFuZC1wYXJhbS1uYW1lJzoge1xuICAgICAgICAgICAgICAgIHBhdHRlcm46IC9eKFxcW1tcXHQgXSopXFx3Ky8sXG4gICAgICAgICAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBhbGlhczogJ25hbWUnXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICdzdGFydC1zdG9wLWNoYXInOiAvW1xcW1xcXV0vXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIFByaXNtLmxhbmd1YWdlcy5uYW5pID0gUHJpc20ubGFuZ3VhZ2VzWyduYW5pc2NyaXB0J11cbiAgICAvKiogQHR5cGVkZWYge0luc3RhbmNlVHlwZTxpbXBvcnQoXCIuL3ByaXNtLWNvcmVcIilbXCJUb2tlblwiXT59IFRva2VuICovXG4gICAgLyoqXG4gICAgICogVGhpcyBob29rIGlzIHVzZWQgdG8gdmFsaWRhdGUgZ2VuZXJpYy10ZXh0IHRva2VucyBmb3IgYmFsYW5jZWQgYnJhY2tldHMuXG4gICAgICogTWFyayB0b2tlbiBhcyBiYWQtbGluZSB3aGVuIGNvbnRhaW5zIG5vdCBiYWxhbmNlZCBicmFja2V0czoge30sW11cbiAgICAgKi9cbiAgICBQcmlzbS5ob29rcy5hZGQoJ2FmdGVyLXRva2VuaXplJywgZnVuY3Rpb24gKGVudikge1xuICAgICAgLyoqIEB0eXBlIHsoVG9rZW4gfCBzdHJpbmcpW119ICovXG4gICAgICB2YXIgdG9rZW5zID0gZW52LnRva2Vuc1xuICAgICAgdG9rZW5zLmZvckVhY2goZnVuY3Rpb24gKHRva2VuKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdG9rZW4gIT09ICdzdHJpbmcnICYmIHRva2VuLnR5cGUgPT09ICdnZW5lcmljLXRleHQnKSB7XG4gICAgICAgICAgdmFyIGNvbnRlbnQgPSBnZXRUZXh0Q29udGVudCh0b2tlbilcbiAgICAgICAgICBpZiAoIWlzQnJhY2tldHNCYWxhbmNlZChjb250ZW50KSkge1xuICAgICAgICAgICAgdG9rZW4udHlwZSA9ICdiYWQtbGluZSdcbiAgICAgICAgICAgIHRva2VuLmNvbnRlbnQgPSBjb250ZW50XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0pXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlucHV0XG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNCcmFja2V0c0JhbGFuY2VkKGlucHV0KSB7XG4gICAgICB2YXIgYnJhY2tldHMgPSAnW117fSdcbiAgICAgIHZhciBzdGFjayA9IFtdXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBicmFja2V0ID0gaW5wdXRbaV1cbiAgICAgICAgdmFyIGJyYWNrZXRzSW5kZXggPSBicmFja2V0cy5pbmRleE9mKGJyYWNrZXQpXG4gICAgICAgIGlmIChicmFja2V0c0luZGV4ICE9PSAtMSkge1xuICAgICAgICAgIGlmIChicmFja2V0c0luZGV4ICUgMiA9PT0gMCkge1xuICAgICAgICAgICAgc3RhY2sucHVzaChicmFja2V0c0luZGV4ICsgMSlcbiAgICAgICAgICB9IGVsc2UgaWYgKHN0YWNrLnBvcCgpICE9PSBicmFja2V0c0luZGV4KSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBzdGFjay5sZW5ndGggPT09IDBcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmcgfCBUb2tlbiB8IChzdHJpbmcgfCBUb2tlbilbXX0gdG9rZW5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFRleHRDb250ZW50KHRva2VuKSB7XG4gICAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdG9rZW5cbiAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh0b2tlbikpIHtcbiAgICAgICAgcmV0dXJuIHRva2VuLm1hcChnZXRUZXh0Q29udGVudCkuam9pbignJylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBnZXRUZXh0Q29udGVudCh0b2tlbi5jb250ZW50KVxuICAgICAgfVxuICAgIH1cbiAgfSkoUHJpc20pXG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIm5hbmlzY3JpcHQiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImV4cHJlc3Npb25EZWYiLCJwYXJhbXMiLCJwYXR0ZXJuIiwiYWxpYXMiLCJsb29rYmVoaW5kIiwiZ3JlZWR5IiwibGFuZ3VhZ2VzIiwiY29tbWVudCIsImRlZmluZSIsImluc2lkZSIsInZhbHVlIiwia2V5IiwibGFiZWwiLCJjb21tYW5kIiwiZXhwcmVzc2lvbiIsIm5hbmkiLCJob29rcyIsImFkZCIsImVudiIsInRva2VucyIsImZvckVhY2giLCJ0b2tlbiIsInR5cGUiLCJjb250ZW50IiwiZ2V0VGV4dENvbnRlbnQiLCJpc0JyYWNrZXRzQmFsYW5jZWQiLCJpbnB1dCIsImJyYWNrZXRzIiwic3RhY2siLCJpIiwibGVuZ3RoIiwiYnJhY2tldCIsImJyYWNrZXRzSW5kZXgiLCJpbmRleE9mIiwicHVzaCIsInBvcCIsIkFycmF5IiwiaXNBcnJheSIsIm1hcCIsImpvaW4iXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/naniscript.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/nasm.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/nasm.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = nasm;\nnasm.displayName = 'nasm';\nnasm.aliases = [];\nfunction nasm(Prism) {\n  Prism.languages.nasm = {\n    comment: /;.*$/m,\n    string: /([\"'`])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    label: {\n      pattern: /(^\\s*)[A-Za-z._?$][\\w.?$@~#]*:/m,\n      lookbehind: true,\n      alias: 'function'\n    },\n    keyword: [/\\[?BITS (?:16|32|64)\\]?/, {\n      pattern: /(^\\s*)section\\s*[a-z.]+:?/im,\n      lookbehind: true\n    }, /(?:extern|global)[^;\\r\\n]*/i, /(?:CPU|DEFAULT|FLOAT).*$/m],\n    register: {\n      pattern: /\\b(?:st\\d|[xyz]mm\\d\\d?|[cdt]r\\d|r\\d\\d?[bwd]?|[er]?[abcd]x|[abcd][hl]|[er]?(?:bp|di|si|sp)|[cdefgs]s)\\b/i,\n      alias: 'variable'\n    },\n    number: /(?:\\b|(?=\\$))(?:0[hx](?:\\.[\\da-f]+|[\\da-f]+(?:\\.[\\da-f]+)?)(?:p[+-]?\\d+)?|\\d[\\da-f]+[hx]|\\$\\d[\\da-f]*|0[oq][0-7]+|[0-7]+[oq]|0[by][01]+|[01]+[by]|0[dt]\\d+|(?:\\d+(?:\\.\\d+)?|\\.\\d+)(?:\\.?e[+-]?\\d+)?[dt]?)\\b/i,\n    operator: /[\\[\\]*+\\-\\/%<>=&|$!]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvbmFzbS5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLElBQUk7QUFDckJBLElBQUksQ0FBQ0MsV0FBVyxHQUFHLE1BQU07QUFDekJELElBQUksQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDakIsU0FBU0YsSUFBSUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ25CQSxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osSUFBSSxHQUFHO0lBQ3JCSyxPQUFPLEVBQUUsT0FBTztJQUNoQkMsTUFBTSxFQUFFLG1DQUFtQztJQUMzQ0MsS0FBSyxFQUFFO01BQ0xDLE9BQU8sRUFBRSxpQ0FBaUM7TUFDMUNDLFVBQVUsRUFBRSxJQUFJO01BQ2hCQyxLQUFLLEVBQUU7SUFDVCxDQUFDO0lBQ0RDLE9BQU8sRUFBRSxDQUNQLHlCQUF5QixFQUN6QjtNQUNFSCxPQUFPLEVBQUUsNkJBQTZCO01BQ3RDQyxVQUFVLEVBQUU7SUFDZCxDQUFDLEVBQ0QsNkJBQTZCLEVBQzdCLDJCQUEyQixDQUM1QjtJQUNERyxRQUFRLEVBQUU7TUFDUkosT0FBTyxFQUNMLHlHQUF5RztNQUMzR0UsS0FBSyxFQUFFO0lBQ1QsQ0FBQztJQUNERyxNQUFNLEVBQ0osOE1BQThNO0lBQ2hOQyxRQUFRLEVBQUU7RUFDWixDQUFDO0FBQ0giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxuYXNtLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5hc21cbm5hc20uZGlzcGxheU5hbWUgPSAnbmFzbSdcbm5hc20uYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBuYXNtKFByaXNtKSB7XG4gIFByaXNtLmxhbmd1YWdlcy5uYXNtID0ge1xuICAgIGNvbW1lbnQ6IC87LiokL20sXG4gICAgc3RyaW5nOiAvKFtcIidgXSkoPzpcXFxcLnwoPyFcXDEpW15cXFxcXFxyXFxuXSkqXFwxLyxcbiAgICBsYWJlbDoge1xuICAgICAgcGF0dGVybjogLyheXFxzKilbQS1aYS16Ll8/JF1bXFx3Lj8kQH4jXSo6L20sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgYWxpYXM6ICdmdW5jdGlvbidcbiAgICB9LFxuICAgIGtleXdvcmQ6IFtcbiAgICAgIC9cXFs/QklUUyAoPzoxNnwzMnw2NClcXF0/LyxcbiAgICAgIHtcbiAgICAgICAgcGF0dGVybjogLyheXFxzKilzZWN0aW9uXFxzKlthLXouXSs6Py9pbSxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIC8oPzpleHRlcm58Z2xvYmFsKVteO1xcclxcbl0qL2ksXG4gICAgICAvKD86Q1BVfERFRkFVTFR8RkxPQVQpLiokL21cbiAgICBdLFxuICAgIHJlZ2lzdGVyOiB7XG4gICAgICBwYXR0ZXJuOlxuICAgICAgICAvXFxiKD86c3RcXGR8W3h5el1tbVxcZFxcZD98W2NkdF1yXFxkfHJcXGRcXGQ/W2J3ZF0/fFtlcl0/W2FiY2RdeHxbYWJjZF1baGxdfFtlcl0/KD86YnB8ZGl8c2l8c3ApfFtjZGVmZ3NdcylcXGIvaSxcbiAgICAgIGFsaWFzOiAndmFyaWFibGUnXG4gICAgfSxcbiAgICBudW1iZXI6XG4gICAgICAvKD86XFxifCg/PVxcJCkpKD86MFtoeF0oPzpcXC5bXFxkYS1mXSt8W1xcZGEtZl0rKD86XFwuW1xcZGEtZl0rKT8pKD86cFsrLV0/XFxkKyk/fFxcZFtcXGRhLWZdK1toeF18XFwkXFxkW1xcZGEtZl0qfDBbb3FdWzAtN10rfFswLTddK1tvcV18MFtieV1bMDFdK3xbMDFdK1tieV18MFtkdF1cXGQrfCg/OlxcZCsoPzpcXC5cXGQrKT98XFwuXFxkKykoPzpcXC4/ZVsrLV0/XFxkKyk/W2R0XT8pXFxiL2ksXG4gICAgb3BlcmF0b3I6IC9bXFxbXFxdKitcXC1cXC8lPD49JnwkIV0vXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwibmFzbSIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwiY29tbWVudCIsInN0cmluZyIsImxhYmVsIiwicGF0dGVybiIsImxvb2tiZWhpbmQiLCJhbGlhcyIsImtleXdvcmQiLCJyZWdpc3RlciIsIm51bWJlciIsIm9wZXJhdG9yIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/nasm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/neon.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/neon.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = neon;\nneon.displayName = 'neon';\nneon.aliases = [];\nfunction neon(Prism) {\n  Prism.languages.neon = {\n    comment: {\n      pattern: /#.*/,\n      greedy: true\n    },\n    datetime: {\n      pattern: /(^|[[{(=:,\\s])\\d\\d\\d\\d-\\d\\d?-\\d\\d?(?:(?:[Tt]| +)\\d\\d?:\\d\\d:\\d\\d(?:\\.\\d*)? *(?:Z|[-+]\\d\\d?(?::?\\d\\d)?)?)?(?=$|[\\]}),\\s])/,\n      lookbehind: true,\n      alias: 'number'\n    },\n    key: {\n      pattern: /(^|[[{(,\\s])[^,:=[\\]{}()'\"\\s]+(?=\\s*:(?:$|[\\]}),\\s])|\\s*=)/,\n      lookbehind: true,\n      alias: 'atrule'\n    },\n    number: {\n      pattern: /(^|[[{(=:,\\s])[+-]?(?:0x[\\da-fA-F]+|0o[0-7]+|0b[01]+|(?:\\d+(?:\\.\\d*)?|\\.?\\d+)(?:[eE][+-]?\\d+)?)(?=$|[\\]}),:=\\s])/,\n      lookbehind: true\n    },\n    \"boolean\": {\n      pattern: /(^|[[{(=:,\\s])(?:false|no|true|yes)(?=$|[\\]}),:=\\s])/i,\n      lookbehind: true\n    },\n    \"null\": {\n      pattern: /(^|[[{(=:,\\s])(?:null)(?=$|[\\]}),:=\\s])/i,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    string: {\n      pattern: /(^|[[{(=:,\\s])(?:('''|\"\"\")\\r?\\n(?:(?:[^\\r\\n]|\\r?\\n(?![\\t ]*\\2))*\\r?\\n)?[\\t ]*\\2|'[^'\\r\\n]*'|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")/,\n      lookbehind: true,\n      greedy: true\n    },\n    literal: {\n      pattern: /(^|[[{(=:,\\s])(?:[^#\"',:=[\\]{}()\\s`-]|[:-][^\"',=[\\]{}()\\s])(?:[^,:=\\]})(\\s]|:(?![\\s,\\]})]|$)|[ \\t]+[^#,:=\\]})(\\s])*/,\n      lookbehind: true,\n      alias: 'string'\n    },\n    punctuation: /[,:=[\\]{}()-]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvbmVvbi5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLElBQUk7QUFDckJBLElBQUksQ0FBQ0MsV0FBVyxHQUFHLE1BQU07QUFDekJELElBQUksQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDakIsU0FBU0YsSUFBSUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ25CQSxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osSUFBSSxHQUFHO0lBQ3JCSyxPQUFPLEVBQUU7TUFDUEMsT0FBTyxFQUFFLEtBQUs7TUFDZEMsTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUNEQyxRQUFRLEVBQUU7TUFDUkYsT0FBTyxFQUNMLHlIQUF5SDtNQUMzSEcsVUFBVSxFQUFFLElBQUk7TUFDaEJDLEtBQUssRUFBRTtJQUNULENBQUM7SUFDREMsR0FBRyxFQUFFO01BQ0hMLE9BQU8sRUFBRSw0REFBNEQ7TUFDckVHLFVBQVUsRUFBRSxJQUFJO01BQ2hCQyxLQUFLLEVBQUU7SUFDVCxDQUFDO0lBQ0RFLE1BQU0sRUFBRTtNQUNOTixPQUFPLEVBQ0wsa0hBQWtIO01BQ3BIRyxVQUFVLEVBQUU7SUFDZCxDQUFDO0lBQ0QsV0FBUztNQUNQSCxPQUFPLEVBQUUsdURBQXVEO01BQ2hFRyxVQUFVLEVBQUU7SUFDZCxDQUFDO0lBQ0QsUUFBTTtNQUNKSCxPQUFPLEVBQUUsMENBQTBDO01BQ25ERyxVQUFVLEVBQUUsSUFBSTtNQUNoQkMsS0FBSyxFQUFFO0lBQ1QsQ0FBQztJQUNERyxNQUFNLEVBQUU7TUFDTlAsT0FBTyxFQUNMLG9IQUFvSDtNQUN0SEcsVUFBVSxFQUFFLElBQUk7TUFDaEJGLE1BQU0sRUFBRTtJQUNWLENBQUM7SUFDRE8sT0FBTyxFQUFFO01BQ1BSLE9BQU8sRUFDTCxxSEFBcUg7TUFDdkhHLFVBQVUsRUFBRSxJQUFJO01BQ2hCQyxLQUFLLEVBQUU7SUFDVCxDQUFDO0lBQ0RLLFdBQVcsRUFBRTtFQUNmLENBQUM7QUFDSCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXG5lb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gbmVvblxubmVvbi5kaXNwbGF5TmFtZSA9ICduZW9uJ1xubmVvbi5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIG5lb24oUHJpc20pIHtcbiAgUHJpc20ubGFuZ3VhZ2VzLm5lb24gPSB7XG4gICAgY29tbWVudDoge1xuICAgICAgcGF0dGVybjogLyMuKi8sXG4gICAgICBncmVlZHk6IHRydWVcbiAgICB9LFxuICAgIGRhdGV0aW1lOiB7XG4gICAgICBwYXR0ZXJuOlxuICAgICAgICAvKF58W1t7KD06LFxcc10pXFxkXFxkXFxkXFxkLVxcZFxcZD8tXFxkXFxkPyg/Oig/OltUdF18ICspXFxkXFxkPzpcXGRcXGQ6XFxkXFxkKD86XFwuXFxkKik/ICooPzpafFstK11cXGRcXGQ/KD86Oj9cXGRcXGQpPyk/KT8oPz0kfFtcXF19KSxcXHNdKS8sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgYWxpYXM6ICdudW1iZXInXG4gICAgfSxcbiAgICBrZXk6IHtcbiAgICAgIHBhdHRlcm46IC8oXnxbW3soLFxcc10pW14sOj1bXFxde30oKSdcIlxcc10rKD89XFxzKjooPzokfFtcXF19KSxcXHNdKXxcXHMqPSkvLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGFsaWFzOiAnYXRydWxlJ1xuICAgIH0sXG4gICAgbnVtYmVyOiB7XG4gICAgICBwYXR0ZXJuOlxuICAgICAgICAvKF58W1t7KD06LFxcc10pWystXT8oPzoweFtcXGRhLWZBLUZdK3wwb1swLTddK3wwYlswMV0rfCg/OlxcZCsoPzpcXC5cXGQqKT98XFwuP1xcZCspKD86W2VFXVsrLV0/XFxkKyk/KSg/PSR8W1xcXX0pLDo9XFxzXSkvLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgIH0sXG4gICAgYm9vbGVhbjoge1xuICAgICAgcGF0dGVybjogLyhefFtbeyg9OixcXHNdKSg/OmZhbHNlfG5vfHRydWV8eWVzKSg/PSR8W1xcXX0pLDo9XFxzXSkvaSxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICB9LFxuICAgIG51bGw6IHtcbiAgICAgIHBhdHRlcm46IC8oXnxbW3soPTosXFxzXSkoPzpudWxsKSg/PSR8W1xcXX0pLDo9XFxzXSkvaSxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBhbGlhczogJ2tleXdvcmQnXG4gICAgfSxcbiAgICBzdHJpbmc6IHtcbiAgICAgIHBhdHRlcm46XG4gICAgICAgIC8oXnxbW3soPTosXFxzXSkoPzooJycnfFwiXCJcIilcXHI/XFxuKD86KD86W15cXHJcXG5dfFxccj9cXG4oPyFbXFx0IF0qXFwyKSkqXFxyP1xcbik/W1xcdCBdKlxcMnwnW14nXFxyXFxuXSonfFwiKD86XFxcXC58W15cXFxcXCJcXHJcXG5dKSpcIikvLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgbGl0ZXJhbDoge1xuICAgICAgcGF0dGVybjpcbiAgICAgICAgLyhefFtbeyg9OixcXHNdKSg/OlteI1wiJyw6PVtcXF17fSgpXFxzYC1dfFs6LV1bXlwiJyw9W1xcXXt9KClcXHNdKSg/OlteLDo9XFxdfSkoXFxzXXw6KD8hW1xccyxcXF19KV18JCl8WyBcXHRdK1teIyw6PVxcXX0pKFxcc10pKi8sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgYWxpYXM6ICdzdHJpbmcnXG4gICAgfSxcbiAgICBwdW5jdHVhdGlvbjogL1ssOj1bXFxde30oKS1dL1xuICB9XG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIm5lb24iLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImxhbmd1YWdlcyIsImNvbW1lbnQiLCJwYXR0ZXJuIiwiZ3JlZWR5IiwiZGF0ZXRpbWUiLCJsb29rYmVoaW5kIiwiYWxpYXMiLCJrZXkiLCJudW1iZXIiLCJzdHJpbmciLCJsaXRlcmFsIiwicHVuY3R1YXRpb24iXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/neon.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/nevod.js":
/*!**********************************************!*\
  !*** ./node_modules/refractor/lang/nevod.js ***!
  \**********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = nevod;\nnevod.displayName = 'nevod';\nnevod.aliases = [];\nfunction nevod(Prism) {\n  Prism.languages.nevod = {\n    comment: /\\/\\/.*|(?:\\/\\*[\\s\\S]*?(?:\\*\\/|$))/,\n    string: {\n      pattern: /(?:\"(?:\"\"|[^\"])*\"(?!\")|'(?:''|[^'])*'(?!'))!?\\*?/,\n      greedy: true,\n      inside: {\n        'string-attrs': /!$|!\\*$|\\*$/\n      }\n    },\n    namespace: {\n      pattern: /(@namespace\\s+)[a-zA-Z0-9\\-.]+(?=\\s*\\{)/,\n      lookbehind: true\n    },\n    pattern: {\n      pattern: /(@pattern\\s+)?#?[a-zA-Z0-9\\-.]+(?:\\s*\\(\\s*(?:~\\s*)?[a-zA-Z0-9\\-.]+\\s*(?:,\\s*(?:~\\s*)?[a-zA-Z0-9\\-.]*)*\\))?(?=\\s*=)/,\n      lookbehind: true,\n      inside: {\n        'pattern-name': {\n          pattern: /^#?[a-zA-Z0-9\\-.]+/,\n          alias: 'class-name'\n        },\n        fields: {\n          pattern: /\\(.*\\)/,\n          inside: {\n            'field-name': {\n              pattern: /[a-zA-Z0-9\\-.]+/,\n              alias: 'variable'\n            },\n            punctuation: /[,()]/,\n            operator: {\n              pattern: /~/,\n              alias: 'field-hidden-mark'\n            }\n          }\n        }\n      }\n    },\n    search: {\n      pattern: /(@search\\s+|#)[a-zA-Z0-9\\-.]+(?:\\.\\*)?(?=\\s*;)/,\n      alias: 'function',\n      lookbehind: true\n    },\n    keyword: /@(?:having|inside|namespace|outside|pattern|require|search|where)\\b/,\n    'standard-pattern': {\n      pattern: /\\b(?:Alpha|AlphaNum|Any|Blank|End|LineBreak|Num|NumAlpha|Punct|Space|Start|Symbol|Word|WordBreak)\\b(?:\\([a-zA-Z0-9\\-.,\\s+]*\\))?/,\n      inside: {\n        'standard-pattern-name': {\n          pattern: /^[a-zA-Z0-9\\-.]+/,\n          alias: 'builtin'\n        },\n        quantifier: {\n          pattern: /\\b\\d+(?:\\s*\\+|\\s*-\\s*\\d+)?(?!\\w)/,\n          alias: 'number'\n        },\n        'standard-pattern-attr': {\n          pattern: /[a-zA-Z0-9\\-.]+/,\n          alias: 'builtin'\n        },\n        punctuation: /[,()]/\n      }\n    },\n    quantifier: {\n      pattern: /\\b\\d+(?:\\s*\\+|\\s*-\\s*\\d+)?(?!\\w)/,\n      alias: 'number'\n    },\n    operator: [{\n      pattern: /=/,\n      alias: 'pattern-def'\n    }, {\n      pattern: /&/,\n      alias: 'conjunction'\n    }, {\n      pattern: /~/,\n      alias: 'exception'\n    }, {\n      pattern: /\\?/,\n      alias: 'optionality'\n    }, {\n      pattern: /[[\\]]/,\n      alias: 'repetition'\n    }, {\n      pattern: /[{}]/,\n      alias: 'variation'\n    }, {\n      pattern: /[+_]/,\n      alias: 'sequence'\n    }, {\n      pattern: /\\.{2,3}/,\n      alias: 'span'\n    }],\n    'field-capture': [{\n      pattern: /([a-zA-Z0-9\\-.]+\\s*\\()\\s*[a-zA-Z0-9\\-.]+\\s*:\\s*[a-zA-Z0-9\\-.]+(?:\\s*,\\s*[a-zA-Z0-9\\-.]+\\s*:\\s*[a-zA-Z0-9\\-.]+)*(?=\\s*\\))/,\n      lookbehind: true,\n      inside: {\n        'field-name': {\n          pattern: /[a-zA-Z0-9\\-.]+/,\n          alias: 'variable'\n        },\n        colon: /:/\n      }\n    }, {\n      pattern: /[a-zA-Z0-9\\-.]+\\s*:/,\n      inside: {\n        'field-name': {\n          pattern: /[a-zA-Z0-9\\-.]+/,\n          alias: 'variable'\n        },\n        colon: /:/\n      }\n    }],\n    punctuation: /[:;,()]/,\n    name: /[a-zA-Z0-9\\-.]+/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/nevod.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/nginx.js":
/*!**********************************************!*\
  !*** ./node_modules/refractor/lang/nginx.js ***!
  \**********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = nginx;\nnginx.displayName = 'nginx';\nnginx.aliases = [];\nfunction nginx(Prism) {\n  ;\n  (function (Prism) {\n    var variable = /\\$(?:\\w[a-z\\d]*(?:_[^\\x00-\\x1F\\s\"'\\\\()$]*)?|\\{[^}\\s\"'\\\\]+\\})/i;\n    Prism.languages.nginx = {\n      comment: {\n        pattern: /(^|[\\s{};])#.*/,\n        lookbehind: true,\n        greedy: true\n      },\n      directive: {\n        pattern: /(^|\\s)\\w(?:[^;{}\"'\\\\\\s]|\\\\.|\"(?:[^\"\\\\]|\\\\.)*\"|'(?:[^'\\\\]|\\\\.)*'|\\s+(?:#.*(?!.)|(?![#\\s])))*?(?=\\s*[;{])/,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          string: {\n            pattern: /((?:^|[^\\\\])(?:\\\\\\\\)*)(?:\"(?:[^\"\\\\]|\\\\.)*\"|'(?:[^'\\\\]|\\\\.)*')/,\n            lookbehind: true,\n            greedy: true,\n            inside: {\n              escape: {\n                pattern: /\\\\[\"'\\\\nrt]/,\n                alias: 'entity'\n              },\n              variable: variable\n            }\n          },\n          comment: {\n            pattern: /(\\s)#.*/,\n            lookbehind: true,\n            greedy: true\n          },\n          keyword: {\n            pattern: /^\\S+/,\n            greedy: true\n          },\n          // other patterns\n          \"boolean\": {\n            pattern: /(\\s)(?:off|on)(?!\\S)/,\n            lookbehind: true\n          },\n          number: {\n            pattern: /(\\s)\\d+[a-z]*(?!\\S)/i,\n            lookbehind: true\n          },\n          variable: variable\n        }\n      },\n      punctuation: /[{};]/\n    };\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvbmdpbnguanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxLQUFLO0FBQ3RCQSxLQUFLLENBQUNDLFdBQVcsR0FBRyxPQUFPO0FBQzNCRCxLQUFLLENBQUNFLE9BQU8sR0FBRyxFQUFFO0FBQ2xCLFNBQVNGLEtBQUtBLENBQUNHLEtBQUssRUFBRTtFQUNwQjtFQUFDLENBQUMsVUFBVUEsS0FBSyxFQUFFO0lBQ2pCLElBQUlDLFFBQVEsR0FDViwrREFBK0Q7SUFDakVELEtBQUssQ0FBQ0UsU0FBUyxDQUFDTCxLQUFLLEdBQUc7TUFDdEJNLE9BQU8sRUFBRTtRQUNQQyxPQUFPLEVBQUUsZ0JBQWdCO1FBQ3pCQyxVQUFVLEVBQUUsSUFBSTtRQUNoQkMsTUFBTSxFQUFFO01BQ1YsQ0FBQztNQUNEQyxTQUFTLEVBQUU7UUFDVEgsT0FBTyxFQUNMLHlHQUF5RztRQUMzR0MsVUFBVSxFQUFFLElBQUk7UUFDaEJDLE1BQU0sRUFBRSxJQUFJO1FBQ1pFLE1BQU0sRUFBRTtVQUNOQyxNQUFNLEVBQUU7WUFDTkwsT0FBTyxFQUNMLCtEQUErRDtZQUNqRUMsVUFBVSxFQUFFLElBQUk7WUFDaEJDLE1BQU0sRUFBRSxJQUFJO1lBQ1pFLE1BQU0sRUFBRTtjQUNORSxNQUFNLEVBQUU7Z0JBQ05OLE9BQU8sRUFBRSxhQUFhO2dCQUN0Qk8sS0FBSyxFQUFFO2NBQ1QsQ0FBQztjQUNEVixRQUFRLEVBQUVBO1lBQ1o7VUFDRixDQUFDO1VBQ0RFLE9BQU8sRUFBRTtZQUNQQyxPQUFPLEVBQUUsU0FBUztZQUNsQkMsVUFBVSxFQUFFLElBQUk7WUFDaEJDLE1BQU0sRUFBRTtVQUNWLENBQUM7VUFDRE0sT0FBTyxFQUFFO1lBQ1BSLE9BQU8sRUFBRSxNQUFNO1lBQ2ZFLE1BQU0sRUFBRTtVQUNWLENBQUM7VUFDRDtVQUNBLFdBQVM7WUFDUEYsT0FBTyxFQUFFLHNCQUFzQjtZQUMvQkMsVUFBVSxFQUFFO1VBQ2QsQ0FBQztVQUNEUSxNQUFNLEVBQUU7WUFDTlQsT0FBTyxFQUFFLHNCQUFzQjtZQUMvQkMsVUFBVSxFQUFFO1VBQ2QsQ0FBQztVQUNESixRQUFRLEVBQUVBO1FBQ1o7TUFDRixDQUFDO01BQ0RhLFdBQVcsRUFBRTtJQUNmLENBQUM7RUFDSCxDQUFDLEVBQUVkLEtBQUssQ0FBQztBQUNYIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcbmdpbnguanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gbmdpbnhcbm5naW54LmRpc3BsYXlOYW1lID0gJ25naW54J1xubmdpbnguYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBuZ2lueChQcmlzbSkge1xuICA7KGZ1bmN0aW9uIChQcmlzbSkge1xuICAgIHZhciB2YXJpYWJsZSA9XG4gICAgICAvXFwkKD86XFx3W2EtelxcZF0qKD86X1teXFx4MDAtXFx4MUZcXHNcIidcXFxcKCkkXSopP3xcXHtbXn1cXHNcIidcXFxcXStcXH0pL2lcbiAgICBQcmlzbS5sYW5ndWFnZXMubmdpbnggPSB7XG4gICAgICBjb21tZW50OiB7XG4gICAgICAgIHBhdHRlcm46IC8oXnxbXFxze307XSkjLiovLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICBncmVlZHk6IHRydWVcbiAgICAgIH0sXG4gICAgICBkaXJlY3RpdmU6IHtcbiAgICAgICAgcGF0dGVybjpcbiAgICAgICAgICAvKF58XFxzKVxcdyg/OlteO3t9XCInXFxcXFxcc118XFxcXC58XCIoPzpbXlwiXFxcXF18XFxcXC4pKlwifCcoPzpbXidcXFxcXXxcXFxcLikqJ3xcXHMrKD86Iy4qKD8hLil8KD8hWyNcXHNdKSkpKj8oPz1cXHMqWzt7XSkvLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICBncmVlZHk6IHRydWUsXG4gICAgICAgIGluc2lkZToge1xuICAgICAgICAgIHN0cmluZzoge1xuICAgICAgICAgICAgcGF0dGVybjpcbiAgICAgICAgICAgICAgLygoPzpefFteXFxcXF0pKD86XFxcXFxcXFwpKikoPzpcIig/OlteXCJcXFxcXXxcXFxcLikqXCJ8Jyg/OlteJ1xcXFxdfFxcXFwuKSonKS8sXG4gICAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgICAgIGVzY2FwZToge1xuICAgICAgICAgICAgICAgIHBhdHRlcm46IC9cXFxcW1wiJ1xcXFxucnRdLyxcbiAgICAgICAgICAgICAgICBhbGlhczogJ2VudGl0eSdcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgdmFyaWFibGU6IHZhcmlhYmxlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBjb21tZW50OiB7XG4gICAgICAgICAgICBwYXR0ZXJuOiAvKFxccykjLiovLFxuICAgICAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgICAgIGdyZWVkeTogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAga2V5d29yZDoge1xuICAgICAgICAgICAgcGF0dGVybjogL15cXFMrLyxcbiAgICAgICAgICAgIGdyZWVkeTogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgLy8gb3RoZXIgcGF0dGVybnNcbiAgICAgICAgICBib29sZWFuOiB7XG4gICAgICAgICAgICBwYXR0ZXJuOiAvKFxccykoPzpvZmZ8b24pKD8hXFxTKS8sXG4gICAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICAgICAgfSxcbiAgICAgICAgICBudW1iZXI6IHtcbiAgICAgICAgICAgIHBhdHRlcm46IC8oXFxzKVxcZCtbYS16XSooPyFcXFMpL2ksXG4gICAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICAgICAgfSxcbiAgICAgICAgICB2YXJpYWJsZTogdmFyaWFibGVcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHB1bmN0dWF0aW9uOiAvW3t9O10vXG4gICAgfVxuICB9KShQcmlzbSlcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwibmdpbngiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsInZhcmlhYmxlIiwibGFuZ3VhZ2VzIiwiY29tbWVudCIsInBhdHRlcm4iLCJsb29rYmVoaW5kIiwiZ3JlZWR5IiwiZGlyZWN0aXZlIiwiaW5zaWRlIiwic3RyaW5nIiwiZXNjYXBlIiwiYWxpYXMiLCJrZXl3b3JkIiwibnVtYmVyIiwicHVuY3R1YXRpb24iXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/nginx.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/nim.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/nim.js ***!
  \********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = nim;\nnim.displayName = 'nim';\nnim.aliases = [];\nfunction nim(Prism) {\n  Prism.languages.nim = {\n    comment: {\n      pattern: /#.*/,\n      greedy: true\n    },\n    string: {\n      // Double-quoted strings can be prefixed by an identifier (Generalized raw string literals)\n      pattern: /(?:\\b(?!\\d)(?:\\w|\\\\x[89a-fA-F][0-9a-fA-F])+)?(?:\"\"\"[\\s\\S]*?\"\"\"(?!\")|\"(?:\\\\[\\s\\S]|\"\"|[^\"\\\\])*\")/,\n      greedy: true\n    },\n    \"char\": {\n      // Character literals are handled specifically to prevent issues with numeric type suffixes\n      pattern: /'(?:\\\\(?:\\d+|x[\\da-fA-F]{0,2}|.)|[^'])'/,\n      greedy: true\n    },\n    \"function\": {\n      pattern: /(?:(?!\\d)(?:\\w|\\\\x[89a-fA-F][0-9a-fA-F])+|`[^`\\r\\n]+`)\\*?(?:\\[[^\\]]+\\])?(?=\\s*\\()/,\n      greedy: true,\n      inside: {\n        operator: /\\*$/\n      }\n    },\n    // We don't want to highlight operators (and anything really) inside backticks\n    identifier: {\n      pattern: /`[^`\\r\\n]+`/,\n      greedy: true,\n      inside: {\n        punctuation: /`/\n      }\n    },\n    // The negative look ahead prevents wrong highlighting of the .. operator\n    number: /\\b(?:0[xXoObB][\\da-fA-F_]+|\\d[\\d_]*(?:(?!\\.\\.)\\.[\\d_]*)?(?:[eE][+-]?\\d[\\d_]*)?)(?:'?[iuf]\\d*)?/,\n    keyword: /\\b(?:addr|as|asm|atomic|bind|block|break|case|cast|concept|const|continue|converter|defer|discard|distinct|do|elif|else|end|enum|except|export|finally|for|from|func|generic|if|import|include|interface|iterator|let|macro|method|mixin|nil|object|out|proc|ptr|raise|ref|return|static|template|try|tuple|type|using|var|when|while|with|without|yield)\\b/,\n    operator: {\n      // Look behind and look ahead prevent wrong highlighting of punctuations [. .] {. .} (. .)\n      // but allow the slice operator .. to take precedence over them\n      // One can define his own operators in Nim so all combination of operators might be an operator.\n      pattern: /(^|[({\\[](?=\\.\\.)|(?![({\\[]\\.).)(?:(?:[=+\\-*\\/<>@$~&%|!?^:\\\\]|\\.\\.|\\.(?![)}\\]]))+|\\b(?:and|div|in|is|isnot|mod|not|notin|of|or|shl|shr|xor)\\b)/m,\n      lookbehind: true\n    },\n    punctuation: /[({\\[]\\.|\\.[)}\\]]|[`(){}\\[\\],:]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvbmltLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsR0FBRztBQUNwQkEsR0FBRyxDQUFDQyxXQUFXLEdBQUcsS0FBSztBQUN2QkQsR0FBRyxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNoQixTQUFTRixHQUFHQSxDQUFDRyxLQUFLLEVBQUU7RUFDbEJBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixHQUFHLEdBQUc7SUFDcEJLLE9BQU8sRUFBRTtNQUNQQyxPQUFPLEVBQUUsS0FBSztNQUNkQyxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0RDLE1BQU0sRUFBRTtNQUNOO01BQ0FGLE9BQU8sRUFDTCxnR0FBZ0c7TUFDbEdDLE1BQU0sRUFBRTtJQUNWLENBQUM7SUFDRCxRQUFNO01BQ0o7TUFDQUQsT0FBTyxFQUFFLHlDQUF5QztNQUNsREMsTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUNELFlBQVU7TUFDUkQsT0FBTyxFQUNMLG1GQUFtRjtNQUNyRkMsTUFBTSxFQUFFLElBQUk7TUFDWkUsTUFBTSxFQUFFO1FBQ05DLFFBQVEsRUFBRTtNQUNaO0lBQ0YsQ0FBQztJQUNEO0lBQ0FDLFVBQVUsRUFBRTtNQUNWTCxPQUFPLEVBQUUsYUFBYTtNQUN0QkMsTUFBTSxFQUFFLElBQUk7TUFDWkUsTUFBTSxFQUFFO1FBQ05HLFdBQVcsRUFBRTtNQUNmO0lBQ0YsQ0FBQztJQUNEO0lBQ0FDLE1BQU0sRUFDSixnR0FBZ0c7SUFDbEdDLE9BQU8sRUFDTCw2VkFBNlY7SUFDL1ZKLFFBQVEsRUFBRTtNQUNSO01BQ0E7TUFDQTtNQUNBSixPQUFPLEVBQ0wsaUpBQWlKO01BQ25KUyxVQUFVLEVBQUU7SUFDZCxDQUFDO0lBQ0RILFdBQVcsRUFBRTtFQUNmLENBQUM7QUFDSCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXG5pbS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBuaW1cbm5pbS5kaXNwbGF5TmFtZSA9ICduaW0nXG5uaW0uYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBuaW0oUHJpc20pIHtcbiAgUHJpc20ubGFuZ3VhZ2VzLm5pbSA9IHtcbiAgICBjb21tZW50OiB7XG4gICAgICBwYXR0ZXJuOiAvIy4qLyxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgc3RyaW5nOiB7XG4gICAgICAvLyBEb3VibGUtcXVvdGVkIHN0cmluZ3MgY2FuIGJlIHByZWZpeGVkIGJ5IGFuIGlkZW50aWZpZXIgKEdlbmVyYWxpemVkIHJhdyBzdHJpbmcgbGl0ZXJhbHMpXG4gICAgICBwYXR0ZXJuOlxuICAgICAgICAvKD86XFxiKD8hXFxkKSg/Olxcd3xcXFxceFs4OWEtZkEtRl1bMC05YS1mQS1GXSkrKT8oPzpcIlwiXCJbXFxzXFxTXSo/XCJcIlwiKD8hXCIpfFwiKD86XFxcXFtcXHNcXFNdfFwiXCJ8W15cIlxcXFxdKSpcIikvLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICBjaGFyOiB7XG4gICAgICAvLyBDaGFyYWN0ZXIgbGl0ZXJhbHMgYXJlIGhhbmRsZWQgc3BlY2lmaWNhbGx5IHRvIHByZXZlbnQgaXNzdWVzIHdpdGggbnVtZXJpYyB0eXBlIHN1ZmZpeGVzXG4gICAgICBwYXR0ZXJuOiAvJyg/OlxcXFwoPzpcXGQrfHhbXFxkYS1mQS1GXXswLDJ9fC4pfFteJ10pJy8sXG4gICAgICBncmVlZHk6IHRydWVcbiAgICB9LFxuICAgIGZ1bmN0aW9uOiB7XG4gICAgICBwYXR0ZXJuOlxuICAgICAgICAvKD86KD8hXFxkKSg/Olxcd3xcXFxceFs4OWEtZkEtRl1bMC05YS1mQS1GXSkrfGBbXmBcXHJcXG5dK2ApXFwqPyg/OlxcW1teXFxdXStcXF0pPyg/PVxccypcXCgpLyxcbiAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgIGluc2lkZToge1xuICAgICAgICBvcGVyYXRvcjogL1xcKiQvXG4gICAgICB9XG4gICAgfSxcbiAgICAvLyBXZSBkb24ndCB3YW50IHRvIGhpZ2hsaWdodCBvcGVyYXRvcnMgKGFuZCBhbnl0aGluZyByZWFsbHkpIGluc2lkZSBiYWNrdGlja3NcbiAgICBpZGVudGlmaWVyOiB7XG4gICAgICBwYXR0ZXJuOiAvYFteYFxcclxcbl0rYC8sXG4gICAgICBncmVlZHk6IHRydWUsXG4gICAgICBpbnNpZGU6IHtcbiAgICAgICAgcHVuY3R1YXRpb246IC9gL1xuICAgICAgfVxuICAgIH0sXG4gICAgLy8gVGhlIG5lZ2F0aXZlIGxvb2sgYWhlYWQgcHJldmVudHMgd3JvbmcgaGlnaGxpZ2h0aW5nIG9mIHRoZSAuLiBvcGVyYXRvclxuICAgIG51bWJlcjpcbiAgICAgIC9cXGIoPzowW3hYb09iQl1bXFxkYS1mQS1GX10rfFxcZFtcXGRfXSooPzooPyFcXC5cXC4pXFwuW1xcZF9dKik/KD86W2VFXVsrLV0/XFxkW1xcZF9dKik/KSg/Oic/W2l1Zl1cXGQqKT8vLFxuICAgIGtleXdvcmQ6XG4gICAgICAvXFxiKD86YWRkcnxhc3xhc218YXRvbWljfGJpbmR8YmxvY2t8YnJlYWt8Y2FzZXxjYXN0fGNvbmNlcHR8Y29uc3R8Y29udGludWV8Y29udmVydGVyfGRlZmVyfGRpc2NhcmR8ZGlzdGluY3R8ZG98ZWxpZnxlbHNlfGVuZHxlbnVtfGV4Y2VwdHxleHBvcnR8ZmluYWxseXxmb3J8ZnJvbXxmdW5jfGdlbmVyaWN8aWZ8aW1wb3J0fGluY2x1ZGV8aW50ZXJmYWNlfGl0ZXJhdG9yfGxldHxtYWNyb3xtZXRob2R8bWl4aW58bmlsfG9iamVjdHxvdXR8cHJvY3xwdHJ8cmFpc2V8cmVmfHJldHVybnxzdGF0aWN8dGVtcGxhdGV8dHJ5fHR1cGxlfHR5cGV8dXNpbmd8dmFyfHdoZW58d2hpbGV8d2l0aHx3aXRob3V0fHlpZWxkKVxcYi8sXG4gICAgb3BlcmF0b3I6IHtcbiAgICAgIC8vIExvb2sgYmVoaW5kIGFuZCBsb29rIGFoZWFkIHByZXZlbnQgd3JvbmcgaGlnaGxpZ2h0aW5nIG9mIHB1bmN0dWF0aW9ucyBbLiAuXSB7LiAufSAoLiAuKVxuICAgICAgLy8gYnV0IGFsbG93IHRoZSBzbGljZSBvcGVyYXRvciAuLiB0byB0YWtlIHByZWNlZGVuY2Ugb3ZlciB0aGVtXG4gICAgICAvLyBPbmUgY2FuIGRlZmluZSBoaXMgb3duIG9wZXJhdG9ycyBpbiBOaW0gc28gYWxsIGNvbWJpbmF0aW9uIG9mIG9wZXJhdG9ycyBtaWdodCBiZSBhbiBvcGVyYXRvci5cbiAgICAgIHBhdHRlcm46XG4gICAgICAgIC8oXnxbKHtcXFtdKD89XFwuXFwuKXwoPyFbKHtcXFtdXFwuKS4pKD86KD86Wz0rXFwtKlxcLzw+QCR+JiV8IT9eOlxcXFxdfFxcLlxcLnxcXC4oPyFbKX1cXF1dKSkrfFxcYig/OmFuZHxkaXZ8aW58aXN8aXNub3R8bW9kfG5vdHxub3RpbnxvZnxvcnxzaGx8c2hyfHhvcilcXGIpL20sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgfSxcbiAgICBwdW5jdHVhdGlvbjogL1soe1xcW11cXC58XFwuWyl9XFxdXXxbYCgpe31cXFtcXF0sOl0vXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwibmltIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJjb21tZW50IiwicGF0dGVybiIsImdyZWVkeSIsInN0cmluZyIsImluc2lkZSIsIm9wZXJhdG9yIiwiaWRlbnRpZmllciIsInB1bmN0dWF0aW9uIiwibnVtYmVyIiwia2V5d29yZCIsImxvb2tiZWhpbmQiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/nim.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/nix.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/nix.js ***!
  \********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = nix;\nnix.displayName = 'nix';\nnix.aliases = [];\nfunction nix(Prism) {\n  Prism.languages.nix = {\n    comment: {\n      pattern: /\\/\\*[\\s\\S]*?\\*\\/|#.*/,\n      greedy: true\n    },\n    string: {\n      pattern: /\"(?:[^\"\\\\]|\\\\[\\s\\S])*\"|''(?:(?!'')[\\s\\S]|''(?:'|\\\\|\\$\\{))*''/,\n      greedy: true,\n      inside: {\n        interpolation: {\n          // The lookbehind ensures the ${} is not preceded by \\ or ''\n          pattern: /(^|(?:^|(?!'').)[^\\\\])\\$\\{(?:[^{}]|\\{[^}]*\\})*\\}/,\n          lookbehind: true,\n          inside: null // see below\n        }\n      }\n    },\n\n    url: [/\\b(?:[a-z]{3,7}:\\/\\/)[\\w\\-+%~\\/.:#=?&]+/, {\n      pattern: /([^\\/])(?:[\\w\\-+%~.:#=?&]*(?!\\/\\/)[\\w\\-+%~\\/.:#=?&])?(?!\\/\\/)\\/[\\w\\-+%~\\/.:#=?&]*/,\n      lookbehind: true\n    }],\n    antiquotation: {\n      pattern: /\\$(?=\\{)/,\n      alias: 'important'\n    },\n    number: /\\b\\d+\\b/,\n    keyword: /\\b(?:assert|builtins|else|if|in|inherit|let|null|or|then|with)\\b/,\n    \"function\": /\\b(?:abort|add|all|any|attrNames|attrValues|baseNameOf|compareVersions|concatLists|currentSystem|deepSeq|derivation|dirOf|div|elem(?:At)?|fetch(?:Tarball|url)|filter(?:Source)?|fromJSON|genList|getAttr|getEnv|hasAttr|hashString|head|import|intersectAttrs|is(?:Attrs|Bool|Function|Int|List|Null|String)|length|lessThan|listToAttrs|map|mul|parseDrvName|pathExists|read(?:Dir|File)|removeAttrs|replaceStrings|seq|sort|stringLength|sub(?:string)?|tail|throw|to(?:File|JSON|Path|String|XML)|trace|typeOf)\\b|\\bfoldl'\\B/,\n    \"boolean\": /\\b(?:false|true)\\b/,\n    operator: /[=!<>]=?|\\+\\+?|\\|\\||&&|\\/\\/|->?|[?@]/,\n    punctuation: /[{}()[\\].,:;]/\n  };\n  Prism.languages.nix.string.inside.interpolation.inside = Prism.languages.nix;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvbml4LmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsR0FBRztBQUNwQkEsR0FBRyxDQUFDQyxXQUFXLEdBQUcsS0FBSztBQUN2QkQsR0FBRyxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNoQixTQUFTRixHQUFHQSxDQUFDRyxLQUFLLEVBQUU7RUFDbEJBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixHQUFHLEdBQUc7SUFDcEJLLE9BQU8sRUFBRTtNQUNQQyxPQUFPLEVBQUUsc0JBQXNCO01BQy9CQyxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0RDLE1BQU0sRUFBRTtNQUNORixPQUFPLEVBQUUsOERBQThEO01BQ3ZFQyxNQUFNLEVBQUUsSUFBSTtNQUNaRSxNQUFNLEVBQUU7UUFDTkMsYUFBYSxFQUFFO1VBQ2I7VUFDQUosT0FBTyxFQUFFLGtEQUFrRDtVQUMzREssVUFBVSxFQUFFLElBQUk7VUFDaEJGLE1BQU0sRUFBRSxJQUFJLENBQUM7UUFDZjtNQUNGO0lBQ0YsQ0FBQzs7SUFDREcsR0FBRyxFQUFFLENBQ0gseUNBQXlDLEVBQ3pDO01BQ0VOLE9BQU8sRUFDTCxtRkFBbUY7TUFDckZLLFVBQVUsRUFBRTtJQUNkLENBQUMsQ0FDRjtJQUNERSxhQUFhLEVBQUU7TUFDYlAsT0FBTyxFQUFFLFVBQVU7TUFDbkJRLEtBQUssRUFBRTtJQUNULENBQUM7SUFDREMsTUFBTSxFQUFFLFNBQVM7SUFDakJDLE9BQU8sRUFBRSxrRUFBa0U7SUFDM0UsWUFDRSxrZ0JBQWtnQjtJQUNwZ0IsV0FBUyxvQkFBb0I7SUFDN0JDLFFBQVEsRUFBRSxzQ0FBc0M7SUFDaERDLFdBQVcsRUFBRTtFQUNmLENBQUM7RUFDRGYsS0FBSyxDQUFDQyxTQUFTLENBQUNKLEdBQUcsQ0FBQ1EsTUFBTSxDQUFDQyxNQUFNLENBQUNDLGFBQWEsQ0FBQ0QsTUFBTSxHQUFHTixLQUFLLENBQUNDLFNBQVMsQ0FBQ0osR0FBRztBQUM5RSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXG5peC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBuaXhcbm5peC5kaXNwbGF5TmFtZSA9ICduaXgnXG5uaXguYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBuaXgoUHJpc20pIHtcbiAgUHJpc20ubGFuZ3VhZ2VzLm5peCA9IHtcbiAgICBjb21tZW50OiB7XG4gICAgICBwYXR0ZXJuOiAvXFwvXFwqW1xcc1xcU10qP1xcKlxcL3wjLiovLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICBzdHJpbmc6IHtcbiAgICAgIHBhdHRlcm46IC9cIig/OlteXCJcXFxcXXxcXFxcW1xcc1xcU10pKlwifCcnKD86KD8hJycpW1xcc1xcU118JycoPzonfFxcXFx8XFwkXFx7KSkqJycvLFxuICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgIGludGVycG9sYXRpb246IHtcbiAgICAgICAgICAvLyBUaGUgbG9va2JlaGluZCBlbnN1cmVzIHRoZSAke30gaXMgbm90IHByZWNlZGVkIGJ5IFxcIG9yICcnXG4gICAgICAgICAgcGF0dGVybjogLyhefCg/Ol58KD8hJycpLilbXlxcXFxdKVxcJFxceyg/Oltee31dfFxce1tefV0qXFx9KSpcXH0vLFxuICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgICAgaW5zaWRlOiBudWxsIC8vIHNlZSBiZWxvd1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICB1cmw6IFtcbiAgICAgIC9cXGIoPzpbYS16XXszLDd9OlxcL1xcLylbXFx3XFwtKyV+XFwvLjojPT8mXSsvLFxuICAgICAge1xuICAgICAgICBwYXR0ZXJuOlxuICAgICAgICAgIC8oW15cXC9dKSg/OltcXHdcXC0rJX4uOiM9PyZdKig/IVxcL1xcLylbXFx3XFwtKyV+XFwvLjojPT8mXSk/KD8hXFwvXFwvKVxcL1tcXHdcXC0rJX5cXC8uOiM9PyZdKi8sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH1cbiAgICBdLFxuICAgIGFudGlxdW90YXRpb246IHtcbiAgICAgIHBhdHRlcm46IC9cXCQoPz1cXHspLyxcbiAgICAgIGFsaWFzOiAnaW1wb3J0YW50J1xuICAgIH0sXG4gICAgbnVtYmVyOiAvXFxiXFxkK1xcYi8sXG4gICAga2V5d29yZDogL1xcYig/OmFzc2VydHxidWlsdGluc3xlbHNlfGlmfGlufGluaGVyaXR8bGV0fG51bGx8b3J8dGhlbnx3aXRoKVxcYi8sXG4gICAgZnVuY3Rpb246XG4gICAgICAvXFxiKD86YWJvcnR8YWRkfGFsbHxhbnl8YXR0ck5hbWVzfGF0dHJWYWx1ZXN8YmFzZU5hbWVPZnxjb21wYXJlVmVyc2lvbnN8Y29uY2F0TGlzdHN8Y3VycmVudFN5c3RlbXxkZWVwU2VxfGRlcml2YXRpb258ZGlyT2Z8ZGl2fGVsZW0oPzpBdCk/fGZldGNoKD86VGFyYmFsbHx1cmwpfGZpbHRlcig/OlNvdXJjZSk/fGZyb21KU09OfGdlbkxpc3R8Z2V0QXR0cnxnZXRFbnZ8aGFzQXR0cnxoYXNoU3RyaW5nfGhlYWR8aW1wb3J0fGludGVyc2VjdEF0dHJzfGlzKD86QXR0cnN8Qm9vbHxGdW5jdGlvbnxJbnR8TGlzdHxOdWxsfFN0cmluZyl8bGVuZ3RofGxlc3NUaGFufGxpc3RUb0F0dHJzfG1hcHxtdWx8cGFyc2VEcnZOYW1lfHBhdGhFeGlzdHN8cmVhZCg/OkRpcnxGaWxlKXxyZW1vdmVBdHRyc3xyZXBsYWNlU3RyaW5nc3xzZXF8c29ydHxzdHJpbmdMZW5ndGh8c3ViKD86c3RyaW5nKT98dGFpbHx0aHJvd3x0byg/OkZpbGV8SlNPTnxQYXRofFN0cmluZ3xYTUwpfHRyYWNlfHR5cGVPZilcXGJ8XFxiZm9sZGwnXFxCLyxcbiAgICBib29sZWFuOiAvXFxiKD86ZmFsc2V8dHJ1ZSlcXGIvLFxuICAgIG9wZXJhdG9yOiAvWz0hPD5dPT98XFwrXFwrP3xcXHxcXHx8JiZ8XFwvXFwvfC0+P3xbP0BdLyxcbiAgICBwdW5jdHVhdGlvbjogL1t7fSgpW1xcXS4sOjtdL1xuICB9XG4gIFByaXNtLmxhbmd1YWdlcy5uaXguc3RyaW5nLmluc2lkZS5pbnRlcnBvbGF0aW9uLmluc2lkZSA9IFByaXNtLmxhbmd1YWdlcy5uaXhcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwibml4IiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJjb21tZW50IiwicGF0dGVybiIsImdyZWVkeSIsInN0cmluZyIsImluc2lkZSIsImludGVycG9sYXRpb24iLCJsb29rYmVoaW5kIiwidXJsIiwiYW50aXF1b3RhdGlvbiIsImFsaWFzIiwibnVtYmVyIiwia2V5d29yZCIsIm9wZXJhdG9yIiwicHVuY3R1YXRpb24iXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/nix.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/nsis.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/nsis.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = nsis;\nnsis.displayName = 'nsis';\nnsis.aliases = [];\nfunction nsis(Prism) {\n  /**\n   * Original by Jan T. Sott (http://github.com/idleberg)\n   *\n   * Includes all commands and plug-ins shipped with NSIS 3.08\n   */\n  Prism.languages.nsis = {\n    comment: {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|[#;].*)/,\n      lookbehind: true,\n      greedy: true\n    },\n    string: {\n      pattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true\n    },\n    keyword: {\n      pattern: /(^[\\t ]*)(?:Abort|Add(?:BrandingImage|Size)|AdvSplash|Allow(?:RootDirInstall|SkipFiles)|AutoCloseWindow|BG(?:Font|Gradient|Image)|Banner|BrandingText|BringToFront|CRCCheck|Call(?:InstDLL)?|Caption|ChangeUI|CheckBitmap|ClearErrors|CompletedText|ComponentText|CopyFiles|Create(?:Directory|Font|ShortCut)|Delete(?:INISec|INIStr|RegKey|RegValue)?|Detail(?:Print|sButtonText)|Dialer|Dir(?:Text|Var|Verify)|EnableWindow|Enum(?:RegKey|RegValue)|Exch|Exec(?:Shell(?:Wait)?|Wait)?|ExpandEnvStrings|File(?:BufSize|Close|ErrorText|Open|Read|ReadByte|ReadUTF16LE|ReadWord|Seek|Write|WriteByte|WriteUTF16LE|WriteWord)?|Find(?:Close|First|Next|Window)|FlushINI|Get(?:CurInstType|CurrentAddress|DLLVersion(?:Local)?|DlgItem|ErrorLevel|FileTime(?:Local)?|FullPathName|Function(?:Address|End)?|InstDirError|LabelAddress|TempFileName)|Goto|HideWindow|Icon|If(?:Abort|Errors|FileExists|RebootFlag|Silent)|InitPluginsDir|InstProgressFlags|Inst(?:Type(?:GetText|SetText)?)|Install(?:ButtonText|Colors|Dir(?:RegKey)?)|Int(?:64|Ptr)?CmpU?|Int(?:64)?Fmt|Int(?:Ptr)?Op|IsWindow|Lang(?:DLL|String)|License(?:BkColor|Data|ForceSelection|LangString|Text)|LoadLanguageFile|LockWindow|Log(?:Set|Text)|Manifest(?:DPIAware|SupportedOS)|Math|MessageBox|MiscButtonText|NSISdl|Name|Nop|OutFile|PE(?:DllCharacteristics|SubsysVer)|Page(?:Callbacks)?|Pop|Push|Quit|RMDir|Read(?:EnvStr|INIStr|RegDWORD|RegStr)|Reboot|RegDLL|Rename|RequestExecutionLevel|ReserveFile|Return|SearchPath|Section(?:End|GetFlags|GetInstTypes|GetSize|GetText|Group|In|SetFlags|SetInstTypes|SetSize|SetText)?|SendMessage|Set(?:AutoClose|BrandingImage|Compress|Compressor(?:DictSize)?|CtlColors|CurInstType|DatablockOptimize|DateSave|Details(?:Print|View)|ErrorLevel|Errors|FileAttributes|Font|OutPath|Overwrite|PluginUnload|RebootFlag|RegView|ShellVarContext|Silent)|Show(?:InstDetails|UninstDetails|Window)|Silent(?:Install|UnInstall)|Sleep|SpaceTexts|Splash|StartMenu|Str(?:CmpS?|Cpy|Len)|SubCaption|System|UnRegDLL|Unicode|UninstPage|Uninstall(?:ButtonText|Caption|Icon|SubCaption|Text)|UserInfo|VI(?:AddVersionKey|FileVersion|ProductVersion)|VPatch|Var|WindowIcon|Write(?:INIStr|Reg(?:Bin|DWORD|ExpandStr|MultiStr|None|Str)|Uninstaller)|XPStyle|ns(?:Dialogs|Exec))\\b/m,\n      lookbehind: true\n    },\n    property: /\\b(?:ARCHIVE|FILE_(?:ATTRIBUTE_ARCHIVE|ATTRIBUTE_NORMAL|ATTRIBUTE_OFFLINE|ATTRIBUTE_READONLY|ATTRIBUTE_SYSTEM|ATTRIBUTE_TEMPORARY)|HK(?:(?:CR|CU|LM)(?:32|64)?|DD|PD|U)|HKEY_(?:CLASSES_ROOT|CURRENT_CONFIG|CURRENT_USER|DYN_DATA|LOCAL_MACHINE|PERFORMANCE_DATA|USERS)|ID(?:ABORT|CANCEL|IGNORE|NO|OK|RETRY|YES)|MB_(?:ABORTRETRYIGNORE|DEFBUTTON1|DEFBUTTON2|DEFBUTTON3|DEFBUTTON4|ICONEXCLAMATION|ICONINFORMATION|ICONQUESTION|ICONSTOP|OK|OKCANCEL|RETRYCANCEL|RIGHT|RTLREADING|SETFOREGROUND|TOPMOST|USERICON|YESNO)|NORMAL|OFFLINE|READONLY|SHCTX|SHELL_CONTEXT|SYSTEM|TEMPORARY|admin|all|auto|both|colored|false|force|hide|highest|lastused|leave|listonly|none|normal|notset|off|on|open|print|show|silent|silentlog|smooth|textonly|true|user)\\b/,\n    constant: /\\$\\{[!\\w\\.:\\^-]+\\}|\\$\\([!\\w\\.:\\^-]+\\)/,\n    variable: /\\$\\w[\\w\\.]*/,\n    number: /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,\n    operator: /--?|\\+\\+?|<=?|>=?|==?=?|&&?|\\|\\|?|[?*\\/~^%]/,\n    punctuation: /[{}[\\];(),.:]/,\n    important: {\n      pattern: /(^[\\t ]*)!(?:addincludedir|addplugindir|appendfile|cd|define|delfile|echo|else|endif|error|execute|finalize|getdllversion|gettlbversion|if|ifdef|ifmacrodef|ifmacrondef|ifndef|include|insertmacro|macro|macroend|makensis|packhdr|pragma|searchparse|searchreplace|system|tempfile|undef|verbose|warning)\\b/im,\n      lookbehind: true\n    }\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvbnNpcy5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLElBQUk7QUFDckJBLElBQUksQ0FBQ0MsV0FBVyxHQUFHLE1BQU07QUFDekJELElBQUksQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDakIsU0FBU0YsSUFBSUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ25CO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRUEsS0FBSyxDQUFDQyxTQUFTLENBQUNKLElBQUksR0FBRztJQUNyQkssT0FBTyxFQUFFO01BQ1BDLE9BQU8sRUFBRSxzQ0FBc0M7TUFDL0NDLFVBQVUsRUFBRSxJQUFJO01BQ2hCQyxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0RDLE1BQU0sRUFBRTtNQUNOSCxPQUFPLEVBQUUsaUNBQWlDO01BQzFDRSxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0RFLE9BQU8sRUFBRTtNQUNQSixPQUFPLEVBQ0wsaXFFQUFpcUU7TUFDbnFFQyxVQUFVLEVBQUU7SUFDZCxDQUFDO0lBQ0RJLFFBQVEsRUFDTiw2dEJBQTZ0QjtJQUMvdEJDLFFBQVEsRUFBRSx1Q0FBdUM7SUFDakRDLFFBQVEsRUFBRSxhQUFhO0lBQ3ZCQyxNQUFNLEVBQUUsNkRBQTZEO0lBQ3JFQyxRQUFRLEVBQUUsNkNBQTZDO0lBQ3ZEQyxXQUFXLEVBQUUsZUFBZTtJQUM1QkMsU0FBUyxFQUFFO01BQ1RYLE9BQU8sRUFDTCxnVEFBZ1Q7TUFDbFRDLFVBQVUsRUFBRTtJQUNkO0VBQ0YsQ0FBQztBQUNIIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcbnNpcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBuc2lzXG5uc2lzLmRpc3BsYXlOYW1lID0gJ25zaXMnXG5uc2lzLmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24gbnNpcyhQcmlzbSkge1xuICAvKipcbiAgICogT3JpZ2luYWwgYnkgSmFuIFQuIFNvdHQgKGh0dHA6Ly9naXRodWIuY29tL2lkbGViZXJnKVxuICAgKlxuICAgKiBJbmNsdWRlcyBhbGwgY29tbWFuZHMgYW5kIHBsdWctaW5zIHNoaXBwZWQgd2l0aCBOU0lTIDMuMDhcbiAgICovXG4gIFByaXNtLmxhbmd1YWdlcy5uc2lzID0ge1xuICAgIGNvbW1lbnQ6IHtcbiAgICAgIHBhdHRlcm46IC8oXnxbXlxcXFxdKSg/OlxcL1xcKltcXHNcXFNdKj9cXCpcXC98WyM7XS4qKS8sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICBzdHJpbmc6IHtcbiAgICAgIHBhdHRlcm46IC8oXCJ8JykoPzpcXFxcLnwoPyFcXDEpW15cXFxcXFxyXFxuXSkqXFwxLyxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAga2V5d29yZDoge1xuICAgICAgcGF0dGVybjpcbiAgICAgICAgLyheW1xcdCBdKikoPzpBYm9ydHxBZGQoPzpCcmFuZGluZ0ltYWdlfFNpemUpfEFkdlNwbGFzaHxBbGxvdyg/OlJvb3REaXJJbnN0YWxsfFNraXBGaWxlcyl8QXV0b0Nsb3NlV2luZG93fEJHKD86Rm9udHxHcmFkaWVudHxJbWFnZSl8QmFubmVyfEJyYW5kaW5nVGV4dHxCcmluZ1RvRnJvbnR8Q1JDQ2hlY2t8Q2FsbCg/Okluc3RETEwpP3xDYXB0aW9ufENoYW5nZVVJfENoZWNrQml0bWFwfENsZWFyRXJyb3JzfENvbXBsZXRlZFRleHR8Q29tcG9uZW50VGV4dHxDb3B5RmlsZXN8Q3JlYXRlKD86RGlyZWN0b3J5fEZvbnR8U2hvcnRDdXQpfERlbGV0ZSg/OklOSVNlY3xJTklTdHJ8UmVnS2V5fFJlZ1ZhbHVlKT98RGV0YWlsKD86UHJpbnR8c0J1dHRvblRleHQpfERpYWxlcnxEaXIoPzpUZXh0fFZhcnxWZXJpZnkpfEVuYWJsZVdpbmRvd3xFbnVtKD86UmVnS2V5fFJlZ1ZhbHVlKXxFeGNofEV4ZWMoPzpTaGVsbCg/OldhaXQpP3xXYWl0KT98RXhwYW5kRW52U3RyaW5nc3xGaWxlKD86QnVmU2l6ZXxDbG9zZXxFcnJvclRleHR8T3BlbnxSZWFkfFJlYWRCeXRlfFJlYWRVVEYxNkxFfFJlYWRXb3JkfFNlZWt8V3JpdGV8V3JpdGVCeXRlfFdyaXRlVVRGMTZMRXxXcml0ZVdvcmQpP3xGaW5kKD86Q2xvc2V8Rmlyc3R8TmV4dHxXaW5kb3cpfEZsdXNoSU5JfEdldCg/OkN1ckluc3RUeXBlfEN1cnJlbnRBZGRyZXNzfERMTFZlcnNpb24oPzpMb2NhbCk/fERsZ0l0ZW18RXJyb3JMZXZlbHxGaWxlVGltZSg/OkxvY2FsKT98RnVsbFBhdGhOYW1lfEZ1bmN0aW9uKD86QWRkcmVzc3xFbmQpP3xJbnN0RGlyRXJyb3J8TGFiZWxBZGRyZXNzfFRlbXBGaWxlTmFtZSl8R290b3xIaWRlV2luZG93fEljb258SWYoPzpBYm9ydHxFcnJvcnN8RmlsZUV4aXN0c3xSZWJvb3RGbGFnfFNpbGVudCl8SW5pdFBsdWdpbnNEaXJ8SW5zdFByb2dyZXNzRmxhZ3N8SW5zdCg/OlR5cGUoPzpHZXRUZXh0fFNldFRleHQpPyl8SW5zdGFsbCg/OkJ1dHRvblRleHR8Q29sb3JzfERpcig/OlJlZ0tleSk/KXxJbnQoPzo2NHxQdHIpP0NtcFU/fEludCg/OjY0KT9GbXR8SW50KD86UHRyKT9PcHxJc1dpbmRvd3xMYW5nKD86RExMfFN0cmluZyl8TGljZW5zZSg/OkJrQ29sb3J8RGF0YXxGb3JjZVNlbGVjdGlvbnxMYW5nU3RyaW5nfFRleHQpfExvYWRMYW5ndWFnZUZpbGV8TG9ja1dpbmRvd3xMb2coPzpTZXR8VGV4dCl8TWFuaWZlc3QoPzpEUElBd2FyZXxTdXBwb3J0ZWRPUyl8TWF0aHxNZXNzYWdlQm94fE1pc2NCdXR0b25UZXh0fE5TSVNkbHxOYW1lfE5vcHxPdXRGaWxlfFBFKD86RGxsQ2hhcmFjdGVyaXN0aWNzfFN1YnN5c1Zlcil8UGFnZSg/OkNhbGxiYWNrcyk/fFBvcHxQdXNofFF1aXR8Uk1EaXJ8UmVhZCg/OkVudlN0cnxJTklTdHJ8UmVnRFdPUkR8UmVnU3RyKXxSZWJvb3R8UmVnRExMfFJlbmFtZXxSZXF1ZXN0RXhlY3V0aW9uTGV2ZWx8UmVzZXJ2ZUZpbGV8UmV0dXJufFNlYXJjaFBhdGh8U2VjdGlvbig/OkVuZHxHZXRGbGFnc3xHZXRJbnN0VHlwZXN8R2V0U2l6ZXxHZXRUZXh0fEdyb3VwfElufFNldEZsYWdzfFNldEluc3RUeXBlc3xTZXRTaXplfFNldFRleHQpP3xTZW5kTWVzc2FnZXxTZXQoPzpBdXRvQ2xvc2V8QnJhbmRpbmdJbWFnZXxDb21wcmVzc3xDb21wcmVzc29yKD86RGljdFNpemUpP3xDdGxDb2xvcnN8Q3VySW5zdFR5cGV8RGF0YWJsb2NrT3B0aW1pemV8RGF0ZVNhdmV8RGV0YWlscyg/OlByaW50fFZpZXcpfEVycm9yTGV2ZWx8RXJyb3JzfEZpbGVBdHRyaWJ1dGVzfEZvbnR8T3V0UGF0aHxPdmVyd3JpdGV8UGx1Z2luVW5sb2FkfFJlYm9vdEZsYWd8UmVnVmlld3xTaGVsbFZhckNvbnRleHR8U2lsZW50KXxTaG93KD86SW5zdERldGFpbHN8VW5pbnN0RGV0YWlsc3xXaW5kb3cpfFNpbGVudCg/Okluc3RhbGx8VW5JbnN0YWxsKXxTbGVlcHxTcGFjZVRleHRzfFNwbGFzaHxTdGFydE1lbnV8U3RyKD86Q21wUz98Q3B5fExlbil8U3ViQ2FwdGlvbnxTeXN0ZW18VW5SZWdETEx8VW5pY29kZXxVbmluc3RQYWdlfFVuaW5zdGFsbCg/OkJ1dHRvblRleHR8Q2FwdGlvbnxJY29ufFN1YkNhcHRpb258VGV4dCl8VXNlckluZm98VkkoPzpBZGRWZXJzaW9uS2V5fEZpbGVWZXJzaW9ufFByb2R1Y3RWZXJzaW9uKXxWUGF0Y2h8VmFyfFdpbmRvd0ljb258V3JpdGUoPzpJTklTdHJ8UmVnKD86QmlufERXT1JEfEV4cGFuZFN0cnxNdWx0aVN0cnxOb25lfFN0cil8VW5pbnN0YWxsZXIpfFhQU3R5bGV8bnMoPzpEaWFsb2dzfEV4ZWMpKVxcYi9tLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgIH0sXG4gICAgcHJvcGVydHk6XG4gICAgICAvXFxiKD86QVJDSElWRXxGSUxFXyg/OkFUVFJJQlVURV9BUkNISVZFfEFUVFJJQlVURV9OT1JNQUx8QVRUUklCVVRFX09GRkxJTkV8QVRUUklCVVRFX1JFQURPTkxZfEFUVFJJQlVURV9TWVNURU18QVRUUklCVVRFX1RFTVBPUkFSWSl8SEsoPzooPzpDUnxDVXxMTSkoPzozMnw2NCk/fEREfFBEfFUpfEhLRVlfKD86Q0xBU1NFU19ST09UfENVUlJFTlRfQ09ORklHfENVUlJFTlRfVVNFUnxEWU5fREFUQXxMT0NBTF9NQUNISU5FfFBFUkZPUk1BTkNFX0RBVEF8VVNFUlMpfElEKD86QUJPUlR8Q0FOQ0VMfElHTk9SRXxOT3xPS3xSRVRSWXxZRVMpfE1CXyg/OkFCT1JUUkVUUllJR05PUkV8REVGQlVUVE9OMXxERUZCVVRUT04yfERFRkJVVFRPTjN8REVGQlVUVE9ONHxJQ09ORVhDTEFNQVRJT058SUNPTklORk9STUFUSU9OfElDT05RVUVTVElPTnxJQ09OU1RPUHxPS3xPS0NBTkNFTHxSRVRSWUNBTkNFTHxSSUdIVHxSVExSRUFESU5HfFNFVEZPUkVHUk9VTkR8VE9QTU9TVHxVU0VSSUNPTnxZRVNOTyl8Tk9STUFMfE9GRkxJTkV8UkVBRE9OTFl8U0hDVFh8U0hFTExfQ09OVEVYVHxTWVNURU18VEVNUE9SQVJZfGFkbWlufGFsbHxhdXRvfGJvdGh8Y29sb3JlZHxmYWxzZXxmb3JjZXxoaWRlfGhpZ2hlc3R8bGFzdHVzZWR8bGVhdmV8bGlzdG9ubHl8bm9uZXxub3JtYWx8bm90c2V0fG9mZnxvbnxvcGVufHByaW50fHNob3d8c2lsZW50fHNpbGVudGxvZ3xzbW9vdGh8dGV4dG9ubHl8dHJ1ZXx1c2VyKVxcYi8sXG4gICAgY29uc3RhbnQ6IC9cXCRcXHtbIVxcd1xcLjpcXF4tXStcXH18XFwkXFwoWyFcXHdcXC46XFxeLV0rXFwpLyxcbiAgICB2YXJpYWJsZTogL1xcJFxcd1tcXHdcXC5dKi8sXG4gICAgbnVtYmVyOiAvXFxiMHhbXFxkQS1GYS1mXStcXGJ8KD86XFxiXFxkKyg/OlxcLlxcZCopP3xcXEJcXC5cXGQrKSg/OltFZV0tP1xcZCspPy8sXG4gICAgb3BlcmF0b3I6IC8tLT98XFwrXFwrP3w8PT98Pj0/fD09Pz0/fCYmP3xcXHxcXHw/fFs/KlxcL35eJV0vLFxuICAgIHB1bmN0dWF0aW9uOiAvW3t9W1xcXTsoKSwuOl0vLFxuICAgIGltcG9ydGFudDoge1xuICAgICAgcGF0dGVybjpcbiAgICAgICAgLyheW1xcdCBdKikhKD86YWRkaW5jbHVkZWRpcnxhZGRwbHVnaW5kaXJ8YXBwZW5kZmlsZXxjZHxkZWZpbmV8ZGVsZmlsZXxlY2hvfGVsc2V8ZW5kaWZ8ZXJyb3J8ZXhlY3V0ZXxmaW5hbGl6ZXxnZXRkbGx2ZXJzaW9ufGdldHRsYnZlcnNpb258aWZ8aWZkZWZ8aWZtYWNyb2RlZnxpZm1hY3JvbmRlZnxpZm5kZWZ8aW5jbHVkZXxpbnNlcnRtYWNyb3xtYWNyb3xtYWNyb2VuZHxtYWtlbnNpc3xwYWNraGRyfHByYWdtYXxzZWFyY2hwYXJzZXxzZWFyY2hyZXBsYWNlfHN5c3RlbXx0ZW1wZmlsZXx1bmRlZnx2ZXJib3NlfHdhcm5pbmcpXFxiL2ltLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgIH1cbiAgfVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJuc2lzIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJjb21tZW50IiwicGF0dGVybiIsImxvb2tiZWhpbmQiLCJncmVlZHkiLCJzdHJpbmciLCJrZXl3b3JkIiwicHJvcGVydHkiLCJjb25zdGFudCIsInZhcmlhYmxlIiwibnVtYmVyIiwib3BlcmF0b3IiLCJwdW5jdHVhdGlvbiIsImltcG9ydGFudCJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/nsis.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/objectivec.js":
/*!***************************************************!*\
  !*** ./node_modules/refractor/lang/objectivec.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar refractorC = __webpack_require__(/*! ./c.js */ \"(ssr)/./node_modules/refractor/lang/c.js\");\nmodule.exports = objectivec;\nobjectivec.displayName = 'objectivec';\nobjectivec.aliases = ['objc'];\nfunction objectivec(Prism) {\n  Prism.register(refractorC);\n  Prism.languages.objectivec = Prism.languages.extend('c', {\n    string: {\n      pattern: /@?\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n      greedy: true\n    },\n    keyword: /\\b(?:asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|in|inline|int|long|register|return|self|short|signed|sizeof|static|struct|super|switch|typedef|typeof|union|unsigned|void|volatile|while)\\b|(?:@interface|@end|@implementation|@protocol|@class|@public|@protected|@private|@property|@try|@catch|@finally|@throw|@synthesize|@dynamic|@selector)\\b/,\n    operator: /-[->]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|\\|?|[~^%?*\\/@]/\n  });\n  delete Prism.languages.objectivec['class-name'];\n  Prism.languages.objc = Prism.languages.objectivec;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvb2JqZWN0aXZlYy5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFDWixJQUFJQSxVQUFVLEdBQUdDLG1CQUFPLENBQUMsd0RBQVEsQ0FBQztBQUNsQ0MsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLFVBQVU7QUFDM0JBLFVBQVUsQ0FBQ0MsV0FBVyxHQUFHLFlBQVk7QUFDckNELFVBQVUsQ0FBQ0UsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDO0FBQzdCLFNBQVNGLFVBQVVBLENBQUNHLEtBQUssRUFBRTtFQUN6QkEsS0FBSyxDQUFDQyxRQUFRLENBQUNSLFVBQVUsQ0FBQztFQUMxQk8sS0FBSyxDQUFDRSxTQUFTLENBQUNMLFVBQVUsR0FBR0csS0FBSyxDQUFDRSxTQUFTLENBQUNDLE1BQU0sQ0FBQyxHQUFHLEVBQUU7SUFDdkRDLE1BQU0sRUFBRTtNQUNOQyxPQUFPLEVBQUUsdUNBQXVDO01BQ2hEQyxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0RDLE9BQU8sRUFDTCx1WUFBdVk7SUFDellDLFFBQVEsRUFBRTtFQUNaLENBQUMsQ0FBQztFQUNGLE9BQU9SLEtBQUssQ0FBQ0UsU0FBUyxDQUFDTCxVQUFVLENBQUMsWUFBWSxDQUFDO0VBQy9DRyxLQUFLLENBQUNFLFNBQVMsQ0FBQ08sSUFBSSxHQUFHVCxLQUFLLENBQUNFLFNBQVMsQ0FBQ0wsVUFBVTtBQUNuRCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXG9iamVjdGl2ZWMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG52YXIgcmVmcmFjdG9yQyA9IHJlcXVpcmUoJy4vYy5qcycpXG5tb2R1bGUuZXhwb3J0cyA9IG9iamVjdGl2ZWNcbm9iamVjdGl2ZWMuZGlzcGxheU5hbWUgPSAnb2JqZWN0aXZlYydcbm9iamVjdGl2ZWMuYWxpYXNlcyA9IFsnb2JqYyddXG5mdW5jdGlvbiBvYmplY3RpdmVjKFByaXNtKSB7XG4gIFByaXNtLnJlZ2lzdGVyKHJlZnJhY3RvckMpXG4gIFByaXNtLmxhbmd1YWdlcy5vYmplY3RpdmVjID0gUHJpc20ubGFuZ3VhZ2VzLmV4dGVuZCgnYycsIHtcbiAgICBzdHJpbmc6IHtcbiAgICAgIHBhdHRlcm46IC9AP1wiKD86XFxcXCg/OlxcclxcbnxbXFxzXFxTXSl8W15cIlxcXFxcXHJcXG5dKSpcIi8sXG4gICAgICBncmVlZHk6IHRydWVcbiAgICB9LFxuICAgIGtleXdvcmQ6XG4gICAgICAvXFxiKD86YXNtfGF1dG98YnJlYWt8Y2FzZXxjaGFyfGNvbnN0fGNvbnRpbnVlfGRlZmF1bHR8ZG98ZG91YmxlfGVsc2V8ZW51bXxleHRlcm58ZmxvYXR8Zm9yfGdvdG98aWZ8aW58aW5saW5lfGludHxsb25nfHJlZ2lzdGVyfHJldHVybnxzZWxmfHNob3J0fHNpZ25lZHxzaXplb2Z8c3RhdGljfHN0cnVjdHxzdXBlcnxzd2l0Y2h8dHlwZWRlZnx0eXBlb2Z8dW5pb258dW5zaWduZWR8dm9pZHx2b2xhdGlsZXx3aGlsZSlcXGJ8KD86QGludGVyZmFjZXxAZW5kfEBpbXBsZW1lbnRhdGlvbnxAcHJvdG9jb2x8QGNsYXNzfEBwdWJsaWN8QHByb3RlY3RlZHxAcHJpdmF0ZXxAcHJvcGVydHl8QHRyeXxAY2F0Y2h8QGZpbmFsbHl8QHRocm93fEBzeW50aGVzaXplfEBkeW5hbWljfEBzZWxlY3RvcilcXGIvLFxuICAgIG9wZXJhdG9yOiAvLVstPl0/fFxcK1xcKz98IT0/fDw8Pz0/fD4+Pz0/fD09P3wmJj98XFx8XFx8P3xbfl4lPypcXC9AXS9cbiAgfSlcbiAgZGVsZXRlIFByaXNtLmxhbmd1YWdlcy5vYmplY3RpdmVjWydjbGFzcy1uYW1lJ11cbiAgUHJpc20ubGFuZ3VhZ2VzLm9iamMgPSBQcmlzbS5sYW5ndWFnZXMub2JqZWN0aXZlY1xufVxuIl0sIm5hbWVzIjpbInJlZnJhY3RvckMiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsIm9iamVjdGl2ZWMiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsInJlZ2lzdGVyIiwibGFuZ3VhZ2VzIiwiZXh0ZW5kIiwic3RyaW5nIiwicGF0dGVybiIsImdyZWVkeSIsImtleXdvcmQiLCJvcGVyYXRvciIsIm9iamMiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/objectivec.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/ocaml.js":
/*!**********************************************!*\
  !*** ./node_modules/refractor/lang/ocaml.js ***!
  \**********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = ocaml;\nocaml.displayName = 'ocaml';\nocaml.aliases = [];\nfunction ocaml(Prism) {\n  // https://ocaml.org/manual/lex.html\n  Prism.languages.ocaml = {\n    comment: {\n      pattern: /\\(\\*[\\s\\S]*?\\*\\)/,\n      greedy: true\n    },\n    \"char\": {\n      pattern: /'(?:[^\\\\\\r\\n']|\\\\(?:.|[ox]?[0-9a-f]{1,3}))'/i,\n      greedy: true\n    },\n    string: [{\n      pattern: /\"(?:\\\\(?:[\\s\\S]|\\r\\n)|[^\\\\\\r\\n\"])*\"/,\n      greedy: true\n    }, {\n      pattern: /\\{([a-z_]*)\\|[\\s\\S]*?\\|\\1\\}/,\n      greedy: true\n    }],\n    number: [\n    // binary and octal\n    /\\b(?:0b[01][01_]*|0o[0-7][0-7_]*)\\b/i,\n    // hexadecimal\n    /\\b0x[a-f0-9][a-f0-9_]*(?:\\.[a-f0-9_]*)?(?:p[+-]?\\d[\\d_]*)?(?!\\w)/i,\n    // decimal\n    /\\b\\d[\\d_]*(?:\\.[\\d_]*)?(?:e[+-]?\\d[\\d_]*)?(?!\\w)/i],\n    directive: {\n      pattern: /\\B#\\w+/,\n      alias: 'property'\n    },\n    label: {\n      pattern: /\\B~\\w+/,\n      alias: 'property'\n    },\n    'type-variable': {\n      pattern: /\\B'\\w+/,\n      alias: 'function'\n    },\n    variant: {\n      pattern: /`\\w+/,\n      alias: 'symbol'\n    },\n    // For the list of keywords and operators,\n    // see: http://caml.inria.fr/pub/docs/manual-ocaml/lex.html#sec84\n    keyword: /\\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|nonrec|object|of|open|private|rec|sig|struct|then|to|try|type|val|value|virtual|when|where|while|with)\\b/,\n    \"boolean\": /\\b(?:false|true)\\b/,\n    'operator-like-punctuation': {\n      pattern: /\\[[<>|]|[>|]\\]|\\{<|>\\}/,\n      alias: 'punctuation'\n    },\n    // Custom operators are allowed\n    operator: /\\.[.~]|:[=>]|[=<>@^|&+\\-*\\/$%!?~][!$%&*+\\-.\\/:<=>?@^|~]*|\\b(?:and|asr|land|lor|lsl|lsr|lxor|mod|or)\\b/,\n    punctuation: /;;|::|[(){}\\[\\].,:;#]|\\b_\\b/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvb2NhbWwuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxLQUFLO0FBQ3RCQSxLQUFLLENBQUNDLFdBQVcsR0FBRyxPQUFPO0FBQzNCRCxLQUFLLENBQUNFLE9BQU8sR0FBRyxFQUFFO0FBQ2xCLFNBQVNGLEtBQUtBLENBQUNHLEtBQUssRUFBRTtFQUNwQjtFQUNBQSxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osS0FBSyxHQUFHO0lBQ3RCSyxPQUFPLEVBQUU7TUFDUEMsT0FBTyxFQUFFLGtCQUFrQjtNQUMzQkMsTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUNELFFBQU07TUFDSkQsT0FBTyxFQUFFLDhDQUE4QztNQUN2REMsTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUNEQyxNQUFNLEVBQUUsQ0FDTjtNQUNFRixPQUFPLEVBQUUscUNBQXFDO01BQzlDQyxNQUFNLEVBQUU7SUFDVixDQUFDLEVBQ0Q7TUFDRUQsT0FBTyxFQUFFLDZCQUE2QjtNQUN0Q0MsTUFBTSxFQUFFO0lBQ1YsQ0FBQyxDQUNGO0lBQ0RFLE1BQU0sRUFBRTtJQUNOO0lBQ0Esc0NBQXNDO0lBQUU7SUFDeEMsbUVBQW1FO0lBQUU7SUFDckUsbURBQW1ELENBQ3BEO0lBQ0RDLFNBQVMsRUFBRTtNQUNUSixPQUFPLEVBQUUsUUFBUTtNQUNqQkssS0FBSyxFQUFFO0lBQ1QsQ0FBQztJQUNEQyxLQUFLLEVBQUU7TUFDTE4sT0FBTyxFQUFFLFFBQVE7TUFDakJLLEtBQUssRUFBRTtJQUNULENBQUM7SUFDRCxlQUFlLEVBQUU7TUFDZkwsT0FBTyxFQUFFLFFBQVE7TUFDakJLLEtBQUssRUFBRTtJQUNULENBQUM7SUFDREUsT0FBTyxFQUFFO01BQ1BQLE9BQU8sRUFBRSxNQUFNO01BQ2ZLLEtBQUssRUFBRTtJQUNULENBQUM7SUFDRDtJQUNBO0lBQ0FHLE9BQU8sRUFDTCwrUkFBK1I7SUFDalMsV0FBUyxvQkFBb0I7SUFDN0IsMkJBQTJCLEVBQUU7TUFDM0JSLE9BQU8sRUFBRSx3QkFBd0I7TUFDakNLLEtBQUssRUFBRTtJQUNULENBQUM7SUFDRDtJQUNBSSxRQUFRLEVBQ04sdUdBQXVHO0lBQ3pHQyxXQUFXLEVBQUU7RUFDZixDQUFDO0FBQ0giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxvY2FtbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBvY2FtbFxub2NhbWwuZGlzcGxheU5hbWUgPSAnb2NhbWwnXG5vY2FtbC5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIG9jYW1sKFByaXNtKSB7XG4gIC8vIGh0dHBzOi8vb2NhbWwub3JnL21hbnVhbC9sZXguaHRtbFxuICBQcmlzbS5sYW5ndWFnZXMub2NhbWwgPSB7XG4gICAgY29tbWVudDoge1xuICAgICAgcGF0dGVybjogL1xcKFxcKltcXHNcXFNdKj9cXCpcXCkvLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICBjaGFyOiB7XG4gICAgICBwYXR0ZXJuOiAvJyg/OlteXFxcXFxcclxcbiddfFxcXFwoPzoufFtveF0/WzAtOWEtZl17MSwzfSkpJy9pLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICBzdHJpbmc6IFtcbiAgICAgIHtcbiAgICAgICAgcGF0dGVybjogL1wiKD86XFxcXCg/OltcXHNcXFNdfFxcclxcbil8W15cXFxcXFxyXFxuXCJdKSpcIi8sXG4gICAgICAgIGdyZWVkeTogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgcGF0dGVybjogL1xceyhbYS16X10qKVxcfFtcXHNcXFNdKj9cXHxcXDFcXH0vLFxuICAgICAgICBncmVlZHk6IHRydWVcbiAgICAgIH1cbiAgICBdLFxuICAgIG51bWJlcjogW1xuICAgICAgLy8gYmluYXJ5IGFuZCBvY3RhbFxuICAgICAgL1xcYig/OjBiWzAxXVswMV9dKnwwb1swLTddWzAtN19dKilcXGIvaSwgLy8gaGV4YWRlY2ltYWxcbiAgICAgIC9cXGIweFthLWYwLTldW2EtZjAtOV9dKig/OlxcLlthLWYwLTlfXSopPyg/OnBbKy1dP1xcZFtcXGRfXSopPyg/IVxcdykvaSwgLy8gZGVjaW1hbFxuICAgICAgL1xcYlxcZFtcXGRfXSooPzpcXC5bXFxkX10qKT8oPzplWystXT9cXGRbXFxkX10qKT8oPyFcXHcpL2lcbiAgICBdLFxuICAgIGRpcmVjdGl2ZToge1xuICAgICAgcGF0dGVybjogL1xcQiNcXHcrLyxcbiAgICAgIGFsaWFzOiAncHJvcGVydHknXG4gICAgfSxcbiAgICBsYWJlbDoge1xuICAgICAgcGF0dGVybjogL1xcQn5cXHcrLyxcbiAgICAgIGFsaWFzOiAncHJvcGVydHknXG4gICAgfSxcbiAgICAndHlwZS12YXJpYWJsZSc6IHtcbiAgICAgIHBhdHRlcm46IC9cXEInXFx3Ky8sXG4gICAgICBhbGlhczogJ2Z1bmN0aW9uJ1xuICAgIH0sXG4gICAgdmFyaWFudDoge1xuICAgICAgcGF0dGVybjogL2BcXHcrLyxcbiAgICAgIGFsaWFzOiAnc3ltYm9sJ1xuICAgIH0sXG4gICAgLy8gRm9yIHRoZSBsaXN0IG9mIGtleXdvcmRzIGFuZCBvcGVyYXRvcnMsXG4gICAgLy8gc2VlOiBodHRwOi8vY2FtbC5pbnJpYS5mci9wdWIvZG9jcy9tYW51YWwtb2NhbWwvbGV4Lmh0bWwjc2VjODRcbiAgICBrZXl3b3JkOlxuICAgICAgL1xcYig/OmFzfGFzc2VydHxiZWdpbnxjbGFzc3xjb25zdHJhaW50fGRvfGRvbmV8ZG93bnRvfGVsc2V8ZW5kfGV4Y2VwdGlvbnxleHRlcm5hbHxmb3J8ZnVufGZ1bmN0aW9ufGZ1bmN0b3J8aWZ8aW58aW5jbHVkZXxpbmhlcml0fGluaXRpYWxpemVyfGxhenl8bGV0fG1hdGNofG1ldGhvZHxtb2R1bGV8bXV0YWJsZXxuZXd8bm9ucmVjfG9iamVjdHxvZnxvcGVufHByaXZhdGV8cmVjfHNpZ3xzdHJ1Y3R8dGhlbnx0b3x0cnl8dHlwZXx2YWx8dmFsdWV8dmlydHVhbHx3aGVufHdoZXJlfHdoaWxlfHdpdGgpXFxiLyxcbiAgICBib29sZWFuOiAvXFxiKD86ZmFsc2V8dHJ1ZSlcXGIvLFxuICAgICdvcGVyYXRvci1saWtlLXB1bmN0dWF0aW9uJzoge1xuICAgICAgcGF0dGVybjogL1xcW1s8PnxdfFs+fF1cXF18XFx7PHw+XFx9LyxcbiAgICAgIGFsaWFzOiAncHVuY3R1YXRpb24nXG4gICAgfSxcbiAgICAvLyBDdXN0b20gb3BlcmF0b3JzIGFyZSBhbGxvd2VkXG4gICAgb3BlcmF0b3I6XG4gICAgICAvXFwuWy5+XXw6Wz0+XXxbPTw+QF58JitcXC0qXFwvJCUhP35dWyEkJSYqK1xcLS5cXC86PD0+P0BefH5dKnxcXGIoPzphbmR8YXNyfGxhbmR8bG9yfGxzbHxsc3J8bHhvcnxtb2R8b3IpXFxiLyxcbiAgICBwdW5jdHVhdGlvbjogLzs7fDo6fFsoKXt9XFxbXFxdLiw6OyNdfFxcYl9cXGIvXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwib2NhbWwiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImxhbmd1YWdlcyIsImNvbW1lbnQiLCJwYXR0ZXJuIiwiZ3JlZWR5Iiwic3RyaW5nIiwibnVtYmVyIiwiZGlyZWN0aXZlIiwiYWxpYXMiLCJsYWJlbCIsInZhcmlhbnQiLCJrZXl3b3JkIiwib3BlcmF0b3IiLCJwdW5jdHVhdGlvbiJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/ocaml.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/opencl.js":
/*!***********************************************!*\
  !*** ./node_modules/refractor/lang/opencl.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar refractorC = __webpack_require__(/*! ./c.js */ \"(ssr)/./node_modules/refractor/lang/c.js\");\nmodule.exports = opencl;\nopencl.displayName = 'opencl';\nopencl.aliases = [];\nfunction opencl(Prism) {\n  Prism.register(refractorC);\n  (function (Prism) {\n    /* OpenCL kernel language */\n    Prism.languages.opencl = Prism.languages.extend('c', {\n      // Extracted from the official specs (2.0) and http://streamcomputing.eu/downloads/?opencl.lang (opencl-keywords, opencl-types) and http://sourceforge.net/tracker/?func=detail&aid=2957794&group_id=95717&atid=612384 (Words2, partly Words3)\n      keyword: /\\b(?:(?:__)?(?:constant|global|kernel|local|private|read_only|read_write|write_only)|__attribute__|auto|(?:bool|u?(?:char|int|long|short)|half|quad)(?:2|3|4|8|16)?|break|case|complex|const|continue|(?:double|float)(?:16(?:x(?:1|2|4|8|16))?|1x(?:1|2|4|8|16)|2(?:x(?:1|2|4|8|16))?|3|4(?:x(?:1|2|4|8|16))?|8(?:x(?:1|2|4|8|16))?)?|default|do|else|enum|extern|for|goto|if|imaginary|inline|packed|pipe|register|restrict|return|signed|sizeof|static|struct|switch|typedef|uniform|union|unsigned|void|volatile|while)\\b/,\n      // Extracted from http://streamcomputing.eu/downloads/?opencl.lang (opencl-const)\n      // Math Constants: https://www.khronos.org/registry/OpenCL/sdk/2.1/docs/man/xhtml/mathConstants.html\n      // Macros and Limits: https://www.khronos.org/registry/OpenCL/sdk/2.1/docs/man/xhtml/macroLimits.html\n      number: /(?:\\b0x(?:[\\da-f]+(?:\\.[\\da-f]*)?|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)[fuhl]{0,4}/i,\n      \"boolean\": /\\b(?:false|true)\\b/,\n      'constant-opencl-kernel': {\n        pattern: /\\b(?:CHAR_(?:BIT|MAX|MIN)|CLK_(?:ADDRESS_(?:CLAMP(?:_TO_EDGE)?|NONE|REPEAT)|FILTER_(?:LINEAR|NEAREST)|(?:GLOBAL|LOCAL)_MEM_FENCE|NORMALIZED_COORDS_(?:FALSE|TRUE))|CL_(?:BGRA|(?:HALF_)?FLOAT|INTENSITY|LUMINANCE|A?R?G?B?[Ax]?|(?:(?:UN)?SIGNED|[US]NORM)_(?:INT(?:8|16|32))|UNORM_(?:INT_101010|SHORT_(?:555|565)))|(?:DBL|FLT|HALF)_(?:DIG|EPSILON|(?:MAX|MIN)(?:(?:_10)?_EXP)?|MANT_DIG)|FLT_RADIX|HUGE_VALF?|(?:INT|LONG|SCHAR|SHRT)_(?:MAX|MIN)|INFINITY|MAXFLOAT|M_(?:[12]_PI|2_SQRTPI|E|LN(?:2|10)|LOG(?:2|10)E?|PI(?:_[24])?|SQRT(?:1_2|2))(?:_F|_H)?|NAN|(?:UCHAR|UINT|ULONG|USHRT)_MAX)\\b/,\n        alias: 'constant'\n      }\n    });\n    Prism.languages.insertBefore('opencl', 'class-name', {\n      // https://www.khronos.org/registry/OpenCL/sdk/2.1/docs/man/xhtml/scalarDataTypes.html\n      // https://www.khronos.org/registry/OpenCL/sdk/2.1/docs/man/xhtml/otherDataTypes.html\n      'builtin-type': {\n        pattern: /\\b(?:_cl_(?:command_queue|context|device_id|event|kernel|mem|platform_id|program|sampler)|cl_(?:image_format|mem_fence_flags)|clk_event_t|event_t|image(?:1d_(?:array_|buffer_)?t|2d_(?:array_(?:depth_|msaa_depth_|msaa_)?|depth_|msaa_depth_|msaa_)?t|3d_t)|intptr_t|ndrange_t|ptrdiff_t|queue_t|reserve_id_t|sampler_t|size_t|uintptr_t)\\b/,\n        alias: 'keyword'\n      }\n    });\n    var attributes = {\n      // Extracted from http://streamcomputing.eu/downloads/?opencl_host.lang (opencl-types and opencl-host)\n      'type-opencl-host': {\n        pattern: /\\b(?:cl_(?:GLenum|GLint|GLuin|addressing_mode|bitfield|bool|buffer_create_type|build_status|channel_(?:order|type)|(?:u?(?:char|int|long|short)|double|float)(?:2|3|4|8|16)?|command_(?:queue(?:_info|_properties)?|type)|context(?:_info|_properties)?|device_(?:exec_capabilities|fp_config|id|info|local_mem_type|mem_cache_type|type)|(?:event|sampler)(?:_info)?|filter_mode|half|image_info|kernel(?:_info|_work_group_info)?|map_flags|mem(?:_flags|_info|_object_type)?|platform_(?:id|info)|profiling_info|program(?:_build_info|_info)?))\\b/,\n        alias: 'keyword'\n      },\n      'boolean-opencl-host': {\n        pattern: /\\bCL_(?:FALSE|TRUE)\\b/,\n        alias: 'boolean'\n      },\n      // Extracted from cl.h (2.0) and http://streamcomputing.eu/downloads/?opencl_host.lang (opencl-const)\n      'constant-opencl-host': {\n        pattern: /\\bCL_(?:A|ABGR|ADDRESS_(?:CLAMP(?:_TO_EDGE)?|MIRRORED_REPEAT|NONE|REPEAT)|ARGB|BGRA|BLOCKING|BUFFER_CREATE_TYPE_REGION|BUILD_(?:ERROR|IN_PROGRESS|NONE|PROGRAM_FAILURE|SUCCESS)|COMMAND_(?:ACQUIRE_GL_OBJECTS|BARRIER|COPY_(?:BUFFER(?:_RECT|_TO_IMAGE)?|IMAGE(?:_TO_BUFFER)?)|FILL_(?:BUFFER|IMAGE)|MAP(?:_BUFFER|_IMAGE)|MARKER|MIGRATE(?:_SVM)?_MEM_OBJECTS|NATIVE_KERNEL|NDRANGE_KERNEL|READ_(?:BUFFER(?:_RECT)?|IMAGE)|RELEASE_GL_OBJECTS|SVM_(?:FREE|MAP|MEMCPY|MEMFILL|UNMAP)|TASK|UNMAP_MEM_OBJECT|USER|WRITE_(?:BUFFER(?:_RECT)?|IMAGE))|COMPILER_NOT_AVAILABLE|COMPILE_PROGRAM_FAILURE|COMPLETE|CONTEXT_(?:DEVICES|INTEROP_USER_SYNC|NUM_DEVICES|PLATFORM|PROPERTIES|REFERENCE_COUNT)|DEPTH(?:_STENCIL)?|DEVICE_(?:ADDRESS_BITS|AFFINITY_DOMAIN_(?:L[1-4]_CACHE|NEXT_PARTITIONABLE|NUMA)|AVAILABLE|BUILT_IN_KERNELS|COMPILER_AVAILABLE|DOUBLE_FP_CONFIG|ENDIAN_LITTLE|ERROR_CORRECTION_SUPPORT|EXECUTION_CAPABILITIES|EXTENSIONS|GLOBAL_(?:MEM_(?:CACHELINE_SIZE|CACHE_SIZE|CACHE_TYPE|SIZE)|VARIABLE_PREFERRED_TOTAL_SIZE)|HOST_UNIFIED_MEMORY|IL_VERSION|IMAGE(?:2D_MAX_(?:HEIGHT|WIDTH)|3D_MAX_(?:DEPTH|HEIGHT|WIDTH)|_BASE_ADDRESS_ALIGNMENT|_MAX_ARRAY_SIZE|_MAX_BUFFER_SIZE|_PITCH_ALIGNMENT|_SUPPORT)|LINKER_AVAILABLE|LOCAL_MEM_SIZE|LOCAL_MEM_TYPE|MAX_(?:CLOCK_FREQUENCY|COMPUTE_UNITS|CONSTANT_ARGS|CONSTANT_BUFFER_SIZE|GLOBAL_VARIABLE_SIZE|MEM_ALLOC_SIZE|NUM_SUB_GROUPS|ON_DEVICE_(?:EVENTS|QUEUES)|PARAMETER_SIZE|PIPE_ARGS|READ_IMAGE_ARGS|READ_WRITE_IMAGE_ARGS|SAMPLERS|WORK_GROUP_SIZE|WORK_ITEM_DIMENSIONS|WORK_ITEM_SIZES|WRITE_IMAGE_ARGS)|MEM_BASE_ADDR_ALIGN|MIN_DATA_TYPE_ALIGN_SIZE|NAME|NATIVE_VECTOR_WIDTH_(?:CHAR|DOUBLE|FLOAT|HALF|INT|LONG|SHORT)|NOT_(?:AVAILABLE|FOUND)|OPENCL_C_VERSION|PARENT_DEVICE|PARTITION_(?:AFFINITY_DOMAIN|BY_AFFINITY_DOMAIN|BY_COUNTS|BY_COUNTS_LIST_END|EQUALLY|FAILED|MAX_SUB_DEVICES|PROPERTIES|TYPE)|PIPE_MAX_(?:ACTIVE_RESERVATIONS|PACKET_SIZE)|PLATFORM|PREFERRED_(?:GLOBAL_ATOMIC_ALIGNMENT|INTEROP_USER_SYNC|LOCAL_ATOMIC_ALIGNMENT|PLATFORM_ATOMIC_ALIGNMENT|VECTOR_WIDTH_(?:CHAR|DOUBLE|FLOAT|HALF|INT|LONG|SHORT))|PRINTF_BUFFER_SIZE|PROFILE|PROFILING_TIMER_RESOLUTION|QUEUE_(?:ON_(?:DEVICE_(?:MAX_SIZE|PREFERRED_SIZE|PROPERTIES)|HOST_PROPERTIES)|PROPERTIES)|REFERENCE_COUNT|SINGLE_FP_CONFIG|SUB_GROUP_INDEPENDENT_FORWARD_PROGRESS|SVM_(?:ATOMICS|CAPABILITIES|COARSE_GRAIN_BUFFER|FINE_GRAIN_BUFFER|FINE_GRAIN_SYSTEM)|TYPE(?:_ACCELERATOR|_ALL|_CPU|_CUSTOM|_DEFAULT|_GPU)?|VENDOR(?:_ID)?|VERSION)|DRIVER_VERSION|EVENT_(?:COMMAND_(?:EXECUTION_STATUS|QUEUE|TYPE)|CONTEXT|REFERENCE_COUNT)|EXEC_(?:KERNEL|NATIVE_KERNEL|STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST)|FILTER_(?:LINEAR|NEAREST)|FLOAT|FP_(?:CORRECTLY_ROUNDED_DIVIDE_SQRT|DENORM|FMA|INF_NAN|ROUND_TO_INF|ROUND_TO_NEAREST|ROUND_TO_ZERO|SOFT_FLOAT)|GLOBAL|HALF_FLOAT|IMAGE_(?:ARRAY_SIZE|BUFFER|DEPTH|ELEMENT_SIZE|FORMAT|FORMAT_MISMATCH|FORMAT_NOT_SUPPORTED|HEIGHT|NUM_MIP_LEVELS|NUM_SAMPLES|ROW_PITCH|SLICE_PITCH|WIDTH)|INTENSITY|INVALID_(?:ARG_INDEX|ARG_SIZE|ARG_VALUE|BINARY|BUFFER_SIZE|BUILD_OPTIONS|COMMAND_QUEUE|COMPILER_OPTIONS|CONTEXT|DEVICE|DEVICE_PARTITION_COUNT|DEVICE_QUEUE|DEVICE_TYPE|EVENT|EVENT_WAIT_LIST|GLOBAL_OFFSET|GLOBAL_WORK_SIZE|GL_OBJECT|HOST_PTR|IMAGE_DESCRIPTOR|IMAGE_FORMAT_DESCRIPTOR|IMAGE_SIZE|KERNEL|KERNEL_ARGS|KERNEL_DEFINITION|KERNEL_NAME|LINKER_OPTIONS|MEM_OBJECT|MIP_LEVEL|OPERATION|PIPE_SIZE|PLATFORM|PROGRAM|PROGRAM_EXECUTABLE|PROPERTY|QUEUE_PROPERTIES|SAMPLER|VALUE|WORK_DIMENSION|WORK_GROUP_SIZE|WORK_ITEM_SIZE)|KERNEL_(?:ARG_(?:ACCESS_(?:NONE|QUALIFIER|READ_ONLY|READ_WRITE|WRITE_ONLY)|ADDRESS_(?:CONSTANT|GLOBAL|LOCAL|PRIVATE|QUALIFIER)|INFO_NOT_AVAILABLE|NAME|TYPE_(?:CONST|NAME|NONE|PIPE|QUALIFIER|RESTRICT|VOLATILE))|ATTRIBUTES|COMPILE_NUM_SUB_GROUPS|COMPILE_WORK_GROUP_SIZE|CONTEXT|EXEC_INFO_SVM_FINE_GRAIN_SYSTEM|EXEC_INFO_SVM_PTRS|FUNCTION_NAME|GLOBAL_WORK_SIZE|LOCAL_MEM_SIZE|LOCAL_SIZE_FOR_SUB_GROUP_COUNT|MAX_NUM_SUB_GROUPS|MAX_SUB_GROUP_SIZE_FOR_NDRANGE|NUM_ARGS|PREFERRED_WORK_GROUP_SIZE_MULTIPLE|PRIVATE_MEM_SIZE|PROGRAM|REFERENCE_COUNT|SUB_GROUP_COUNT_FOR_NDRANGE|WORK_GROUP_SIZE)|LINKER_NOT_AVAILABLE|LINK_PROGRAM_FAILURE|LOCAL|LUMINANCE|MAP_(?:FAILURE|READ|WRITE|WRITE_INVALIDATE_REGION)|MEM_(?:ALLOC_HOST_PTR|ASSOCIATED_MEMOBJECT|CONTEXT|COPY_HOST_PTR|COPY_OVERLAP|FLAGS|HOST_NO_ACCESS|HOST_PTR|HOST_READ_ONLY|HOST_WRITE_ONLY|KERNEL_READ_AND_WRITE|MAP_COUNT|OBJECT_(?:ALLOCATION_FAILURE|BUFFER|IMAGE1D|IMAGE1D_ARRAY|IMAGE1D_BUFFER|IMAGE2D|IMAGE2D_ARRAY|IMAGE3D|PIPE)|OFFSET|READ_ONLY|READ_WRITE|REFERENCE_COUNT|SIZE|SVM_ATOMICS|SVM_FINE_GRAIN_BUFFER|TYPE|USES_SVM_POINTER|USE_HOST_PTR|WRITE_ONLY)|MIGRATE_MEM_OBJECT_(?:CONTENT_UNDEFINED|HOST)|MISALIGNED_SUB_BUFFER_OFFSET|NONE|NON_BLOCKING|OUT_OF_(?:HOST_MEMORY|RESOURCES)|PIPE_(?:MAX_PACKETS|PACKET_SIZE)|PLATFORM_(?:EXTENSIONS|HOST_TIMER_RESOLUTION|NAME|PROFILE|VENDOR|VERSION)|PROFILING_(?:COMMAND_(?:COMPLETE|END|QUEUED|START|SUBMIT)|INFO_NOT_AVAILABLE)|PROGRAM_(?:BINARIES|BINARY_SIZES|BINARY_TYPE(?:_COMPILED_OBJECT|_EXECUTABLE|_LIBRARY|_NONE)?|BUILD_(?:GLOBAL_VARIABLE_TOTAL_SIZE|LOG|OPTIONS|STATUS)|CONTEXT|DEVICES|IL|KERNEL_NAMES|NUM_DEVICES|NUM_KERNELS|REFERENCE_COUNT|SOURCE)|QUEUED|QUEUE_(?:CONTEXT|DEVICE|DEVICE_DEFAULT|ON_DEVICE|ON_DEVICE_DEFAULT|OUT_OF_ORDER_EXEC_MODE_ENABLE|PROFILING_ENABLE|PROPERTIES|REFERENCE_COUNT|SIZE)|R|RA|READ_(?:ONLY|WRITE)_CACHE|RG|RGB|RGBA|RGBx|RGx|RUNNING|Rx|SAMPLER_(?:ADDRESSING_MODE|CONTEXT|FILTER_MODE|LOD_MAX|LOD_MIN|MIP_FILTER_MODE|NORMALIZED_COORDS|REFERENCE_COUNT)|(?:UN)?SIGNED_INT(?:8|16|32)|SNORM_INT(?:8|16)|SUBMITTED|SUCCESS|UNORM_INT(?:8|16|24|_101010|_101010_2)|UNORM_SHORT_(?:555|565)|VERSION_(?:1_0|1_1|1_2|2_0|2_1)|sBGRA|sRGB|sRGBA|sRGBx)\\b/,\n        alias: 'constant'\n      },\n      // Extracted from cl.h (2.0) and http://streamcomputing.eu/downloads/?opencl_host.lang (opencl-host)\n      'function-opencl-host': {\n        pattern: /\\bcl(?:BuildProgram|CloneKernel|CompileProgram|Create(?:Buffer|CommandQueue(?:WithProperties)?|Context|ContextFromType|Image|Image2D|Image3D|Kernel|KernelsInProgram|Pipe|ProgramWith(?:Binary|BuiltInKernels|IL|Source)|Sampler|SamplerWithProperties|SubBuffer|SubDevices|UserEvent)|Enqueue(?:(?:Barrier|Marker)(?:WithWaitList)?|Copy(?:Buffer(?:Rect|ToImage)?|Image(?:ToBuffer)?)|(?:Fill|Map)(?:Buffer|Image)|MigrateMemObjects|NDRangeKernel|NativeKernel|(?:Read|Write)(?:Buffer(?:Rect)?|Image)|SVM(?:Free|Map|MemFill|Memcpy|MigrateMem|Unmap)|Task|UnmapMemObject|WaitForEvents)|Finish|Flush|Get(?:CommandQueueInfo|ContextInfo|Device(?:AndHostTimer|IDs|Info)|Event(?:Profiling)?Info|ExtensionFunctionAddress(?:ForPlatform)?|HostTimer|ImageInfo|Kernel(?:ArgInfo|Info|SubGroupInfo|WorkGroupInfo)|MemObjectInfo|PipeInfo|Platform(?:IDs|Info)|Program(?:Build)?Info|SamplerInfo|SupportedImageFormats)|LinkProgram|(?:Release|Retain)(?:CommandQueue|Context|Device|Event|Kernel|MemObject|Program|Sampler)|SVM(?:Alloc|Free)|Set(?:CommandQueueProperty|DefaultDeviceCommandQueue|EventCallback|Kernel|Kernel(?:Arg(?:SVMPointer)?|ExecInfo)|MemObjectDestructorCallback|UserEventStatus)|Unload(?:Platform)?Compiler|WaitForEvents)\\b/,\n        alias: 'function'\n      }\n    };\n    /* OpenCL host API */\n    Prism.languages.insertBefore('c', 'keyword', attributes); // C++ includes everything from the OpenCL C host API plus the classes defined in cl2.h\n    if (Prism.languages.cpp) {\n      // Extracted from doxygen class list http://github.khronos.org/OpenCL-CLHPP/annotated.html\n      attributes['type-opencl-host-cpp'] = {\n        pattern: /\\b(?:Buffer|BufferGL|BufferRenderGL|CommandQueue|Context|Device|DeviceCommandQueue|EnqueueArgs|Event|Image|Image1D|Image1DArray|Image1DBuffer|Image2D|Image2DArray|Image2DGL|Image3D|Image3DGL|ImageFormat|ImageGL|Kernel|KernelFunctor|LocalSpaceArg|Memory|NDRange|Pipe|Platform|Program|SVMAllocator|SVMTraitAtomic|SVMTraitCoarse|SVMTraitFine|SVMTraitReadOnly|SVMTraitReadWrite|SVMTraitWriteOnly|Sampler|UserEvent)\\b/,\n        alias: 'keyword'\n      };\n      Prism.languages.insertBefore('cpp', 'keyword', attributes);\n    }\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/opencl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/openqasm.js":
/*!*************************************************!*\
  !*** ./node_modules/refractor/lang/openqasm.js ***!
  \*************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = openqasm;\nopenqasm.displayName = 'openqasm';\nopenqasm.aliases = ['qasm'];\nfunction openqasm(Prism) {\n  // https://qiskit.github.io/openqasm/grammar/index.html\n  Prism.languages.openqasm = {\n    comment: /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*/,\n    string: {\n      pattern: /\"[^\"\\r\\n\\t]*\"|'[^'\\r\\n\\t]*'/,\n      greedy: true\n    },\n    keyword: /\\b(?:CX|OPENQASM|U|barrier|boxas|boxto|break|const|continue|ctrl|def|defcal|defcalgrammar|delay|else|end|for|gate|gphase|if|in|include|inv|kernel|lengthof|let|measure|pow|reset|return|rotary|stretchinf|while)\\b|#pragma\\b/,\n    'class-name': /\\b(?:angle|bit|bool|creg|fixed|float|int|length|qreg|qubit|stretch|uint)\\b/,\n    \"function\": /\\b(?:cos|exp|ln|popcount|rotl|rotr|sin|sqrt|tan)\\b(?=\\s*\\()/,\n    constant: /\\b(?:euler|pi|tau)\\b|π|𝜏|ℇ/,\n    number: {\n      pattern: /(^|[^.\\w$])(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?(?:dt|ns|us|µs|ms|s)?/i,\n      lookbehind: true\n    },\n    operator: /->|>>=?|<<=?|&&|\\|\\||\\+\\+|--|[!=<>&|~^+\\-*/%]=?|@/,\n    punctuation: /[(){}\\[\\];,:.]/\n  };\n  Prism.languages.qasm = Prism.languages.openqasm;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvb3BlbnFhc20uanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxRQUFRO0FBQ3pCQSxRQUFRLENBQUNDLFdBQVcsR0FBRyxVQUFVO0FBQ2pDRCxRQUFRLENBQUNFLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQztBQUMzQixTQUFTRixRQUFRQSxDQUFDRyxLQUFLLEVBQUU7RUFDdkI7RUFDQUEsS0FBSyxDQUFDQyxTQUFTLENBQUNKLFFBQVEsR0FBRztJQUN6QkssT0FBTyxFQUFFLHlCQUF5QjtJQUNsQ0MsTUFBTSxFQUFFO01BQ05DLE9BQU8sRUFBRSw2QkFBNkI7TUFDdENDLE1BQU0sRUFBRTtJQUNWLENBQUM7SUFDREMsT0FBTyxFQUNMLDhOQUE4TjtJQUNoTyxZQUFZLEVBQ1YsNEVBQTRFO0lBQzlFLFlBQVUsNkRBQTZEO0lBQ3ZFQyxRQUFRLEVBQUUsNkJBQTZCO0lBQ3ZDQyxNQUFNLEVBQUU7TUFDTkosT0FBTyxFQUNMLHdFQUF3RTtNQUMxRUssVUFBVSxFQUFFO0lBQ2QsQ0FBQztJQUNEQyxRQUFRLEVBQUUsbURBQW1EO0lBQzdEQyxXQUFXLEVBQUU7RUFDZixDQUFDO0VBQ0RYLEtBQUssQ0FBQ0MsU0FBUyxDQUFDVyxJQUFJLEdBQUdaLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixRQUFRO0FBQ2pEIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcb3BlbnFhc20uanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gb3BlbnFhc21cbm9wZW5xYXNtLmRpc3BsYXlOYW1lID0gJ29wZW5xYXNtJ1xub3BlbnFhc20uYWxpYXNlcyA9IFsncWFzbSddXG5mdW5jdGlvbiBvcGVucWFzbShQcmlzbSkge1xuICAvLyBodHRwczovL3Fpc2tpdC5naXRodWIuaW8vb3BlbnFhc20vZ3JhbW1hci9pbmRleC5odG1sXG4gIFByaXNtLmxhbmd1YWdlcy5vcGVucWFzbSA9IHtcbiAgICBjb21tZW50OiAvXFwvXFwqW1xcc1xcU10qP1xcKlxcL3xcXC9cXC8uKi8sXG4gICAgc3RyaW5nOiB7XG4gICAgICBwYXR0ZXJuOiAvXCJbXlwiXFxyXFxuXFx0XSpcInwnW14nXFxyXFxuXFx0XSonLyxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAga2V5d29yZDpcbiAgICAgIC9cXGIoPzpDWHxPUEVOUUFTTXxVfGJhcnJpZXJ8Ym94YXN8Ym94dG98YnJlYWt8Y29uc3R8Y29udGludWV8Y3RybHxkZWZ8ZGVmY2FsfGRlZmNhbGdyYW1tYXJ8ZGVsYXl8ZWxzZXxlbmR8Zm9yfGdhdGV8Z3BoYXNlfGlmfGlufGluY2x1ZGV8aW52fGtlcm5lbHxsZW5ndGhvZnxsZXR8bWVhc3VyZXxwb3d8cmVzZXR8cmV0dXJufHJvdGFyeXxzdHJldGNoaW5mfHdoaWxlKVxcYnwjcHJhZ21hXFxiLyxcbiAgICAnY2xhc3MtbmFtZSc6XG4gICAgICAvXFxiKD86YW5nbGV8Yml0fGJvb2x8Y3JlZ3xmaXhlZHxmbG9hdHxpbnR8bGVuZ3RofHFyZWd8cXViaXR8c3RyZXRjaHx1aW50KVxcYi8sXG4gICAgZnVuY3Rpb246IC9cXGIoPzpjb3N8ZXhwfGxufHBvcGNvdW50fHJvdGx8cm90cnxzaW58c3FydHx0YW4pXFxiKD89XFxzKlxcKCkvLFxuICAgIGNvbnN0YW50OiAvXFxiKD86ZXVsZXJ8cGl8dGF1KVxcYnzPgHzwnZyPfOKEhy8sXG4gICAgbnVtYmVyOiB7XG4gICAgICBwYXR0ZXJuOlxuICAgICAgICAvKF58W14uXFx3JF0pKD86XFxkKyg/OlxcLlxcZCopP3xcXC5cXGQrKSg/OmVbKy1dP1xcZCspPyg/OmR0fG5zfHVzfMK1c3xtc3xzKT8vaSxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICB9LFxuICAgIG9wZXJhdG9yOiAvLT58Pj49P3w8PD0/fCYmfFxcfFxcfHxcXCtcXCt8LS18WyE9PD4mfH5eK1xcLSovJV09P3xALyxcbiAgICBwdW5jdHVhdGlvbjogL1soKXt9XFxbXFxdOyw6Ll0vXG4gIH1cbiAgUHJpc20ubGFuZ3VhZ2VzLnFhc20gPSBQcmlzbS5sYW5ndWFnZXMub3BlbnFhc21cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwib3BlbnFhc20iLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImxhbmd1YWdlcyIsImNvbW1lbnQiLCJzdHJpbmciLCJwYXR0ZXJuIiwiZ3JlZWR5Iiwia2V5d29yZCIsImNvbnN0YW50IiwibnVtYmVyIiwibG9va2JlaGluZCIsIm9wZXJhdG9yIiwicHVuY3R1YXRpb24iLCJxYXNtIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/openqasm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/oz.js":
/*!*******************************************!*\
  !*** ./node_modules/refractor/lang/oz.js ***!
  \*******************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = oz;\noz.displayName = 'oz';\noz.aliases = [];\nfunction oz(Prism) {\n  Prism.languages.oz = {\n    comment: {\n      pattern: /\\/\\*[\\s\\S]*?\\*\\/|%.*/,\n      greedy: true\n    },\n    string: {\n      pattern: /\"(?:[^\"\\\\]|\\\\[\\s\\S])*\"/,\n      greedy: true\n    },\n    atom: {\n      pattern: /'(?:[^'\\\\]|\\\\[\\s\\S])*'/,\n      greedy: true,\n      alias: 'builtin'\n    },\n    keyword: /\\$|\\[\\]|\\b(?:_|at|attr|case|catch|choice|class|cond|declare|define|dis|else(?:case|if)?|end|export|fail|false|feat|finally|from|fun|functor|if|import|in|local|lock|meth|nil|not|of|or|prepare|proc|prop|raise|require|self|skip|then|thread|true|try|unit)\\b/,\n    \"function\": [/\\b[a-z][A-Za-z\\d]*(?=\\()/, {\n      pattern: /(\\{)[A-Z][A-Za-z\\d]*\\b/,\n      lookbehind: true\n    }],\n    number: /\\b(?:0[bx][\\da-f]+|\\d+(?:\\.\\d*)?(?:e~?\\d+)?)\\b|&(?:[^\\\\]|\\\\(?:\\d{3}|.))/i,\n    variable: /`(?:[^`\\\\]|\\\\.)+`/,\n    'attr-name': /\\b\\w+(?=[ \\t]*:(?![:=]))/,\n    operator: /:(?:=|::?)|<[-:=]?|=(?:=|<?:?)|>=?:?|\\\\=:?|!!?|[|#+\\-*\\/,~^@]|\\b(?:andthen|div|mod|orelse)\\b/,\n    punctuation: /[\\[\\](){}.:;?]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvb3ouanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxFQUFFO0FBQ25CQSxFQUFFLENBQUNDLFdBQVcsR0FBRyxJQUFJO0FBQ3JCRCxFQUFFLENBQUNFLE9BQU8sR0FBRyxFQUFFO0FBQ2YsU0FBU0YsRUFBRUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ2pCQSxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osRUFBRSxHQUFHO0lBQ25CSyxPQUFPLEVBQUU7TUFDUEMsT0FBTyxFQUFFLHNCQUFzQjtNQUMvQkMsTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUNEQyxNQUFNLEVBQUU7TUFDTkYsT0FBTyxFQUFFLHdCQUF3QjtNQUNqQ0MsTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUNERSxJQUFJLEVBQUU7TUFDSkgsT0FBTyxFQUFFLHdCQUF3QjtNQUNqQ0MsTUFBTSxFQUFFLElBQUk7TUFDWkcsS0FBSyxFQUFFO0lBQ1QsQ0FBQztJQUNEQyxPQUFPLEVBQ0wsK1BBQStQO0lBQ2pRLFlBQVUsQ0FDUiwwQkFBMEIsRUFDMUI7TUFDRUwsT0FBTyxFQUFFLHdCQUF3QjtNQUNqQ00sVUFBVSxFQUFFO0lBQ2QsQ0FBQyxDQUNGO0lBQ0RDLE1BQU0sRUFDSiwwRUFBMEU7SUFDNUVDLFFBQVEsRUFBRSxtQkFBbUI7SUFDN0IsV0FBVyxFQUFFLDBCQUEwQjtJQUN2Q0MsUUFBUSxFQUNOLDhGQUE4RjtJQUNoR0MsV0FBVyxFQUFFO0VBQ2YsQ0FBQztBQUNIIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcb3ouanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gb3pcbm96LmRpc3BsYXlOYW1lID0gJ296J1xub3ouYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBveihQcmlzbSkge1xuICBQcmlzbS5sYW5ndWFnZXMub3ogPSB7XG4gICAgY29tbWVudDoge1xuICAgICAgcGF0dGVybjogL1xcL1xcKltcXHNcXFNdKj9cXCpcXC98JS4qLyxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgc3RyaW5nOiB7XG4gICAgICBwYXR0ZXJuOiAvXCIoPzpbXlwiXFxcXF18XFxcXFtcXHNcXFNdKSpcIi8sXG4gICAgICBncmVlZHk6IHRydWVcbiAgICB9LFxuICAgIGF0b206IHtcbiAgICAgIHBhdHRlcm46IC8nKD86W14nXFxcXF18XFxcXFtcXHNcXFNdKSonLyxcbiAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgIGFsaWFzOiAnYnVpbHRpbidcbiAgICB9LFxuICAgIGtleXdvcmQ6XG4gICAgICAvXFwkfFxcW1xcXXxcXGIoPzpffGF0fGF0dHJ8Y2FzZXxjYXRjaHxjaG9pY2V8Y2xhc3N8Y29uZHxkZWNsYXJlfGRlZmluZXxkaXN8ZWxzZSg/OmNhc2V8aWYpP3xlbmR8ZXhwb3J0fGZhaWx8ZmFsc2V8ZmVhdHxmaW5hbGx5fGZyb218ZnVufGZ1bmN0b3J8aWZ8aW1wb3J0fGlufGxvY2FsfGxvY2t8bWV0aHxuaWx8bm90fG9mfG9yfHByZXBhcmV8cHJvY3xwcm9wfHJhaXNlfHJlcXVpcmV8c2VsZnxza2lwfHRoZW58dGhyZWFkfHRydWV8dHJ5fHVuaXQpXFxiLyxcbiAgICBmdW5jdGlvbjogW1xuICAgICAgL1xcYlthLXpdW0EtWmEtelxcZF0qKD89XFwoKS8sXG4gICAgICB7XG4gICAgICAgIHBhdHRlcm46IC8oXFx7KVtBLVpdW0EtWmEtelxcZF0qXFxiLyxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgfVxuICAgIF0sXG4gICAgbnVtYmVyOlxuICAgICAgL1xcYig/OjBbYnhdW1xcZGEtZl0rfFxcZCsoPzpcXC5cXGQqKT8oPzplfj9cXGQrKT8pXFxifCYoPzpbXlxcXFxdfFxcXFwoPzpcXGR7M318LikpL2ksXG4gICAgdmFyaWFibGU6IC9gKD86W15gXFxcXF18XFxcXC4pK2AvLFxuICAgICdhdHRyLW5hbWUnOiAvXFxiXFx3Kyg/PVsgXFx0XSo6KD8hWzo9XSkpLyxcbiAgICBvcGVyYXRvcjpcbiAgICAgIC86KD86PXw6Oj8pfDxbLTo9XT98PSg/Oj18PD86Pyl8Pj0/Oj98XFxcXD06P3whIT98W3wjK1xcLSpcXC8sfl5AXXxcXGIoPzphbmR0aGVufGRpdnxtb2R8b3JlbHNlKVxcYi8sXG4gICAgcHVuY3R1YXRpb246IC9bXFxbXFxdKCl7fS46Oz9dL1xuICB9XG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIm96IiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJjb21tZW50IiwicGF0dGVybiIsImdyZWVkeSIsInN0cmluZyIsImF0b20iLCJhbGlhcyIsImtleXdvcmQiLCJsb29rYmVoaW5kIiwibnVtYmVyIiwidmFyaWFibGUiLCJvcGVyYXRvciIsInB1bmN0dWF0aW9uIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/oz.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/parigp.js":
/*!***********************************************!*\
  !*** ./node_modules/refractor/lang/parigp.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = parigp;\nparigp.displayName = 'parigp';\nparigp.aliases = [];\nfunction parigp(Prism) {\n  Prism.languages.parigp = {\n    comment: /\\/\\*[\\s\\S]*?\\*\\/|\\\\\\\\.*/,\n    string: {\n      pattern: /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"/,\n      greedy: true\n    },\n    // PARI/GP does not care about white spaces at all\n    // so let's process the keywords to build an appropriate regexp\n    // (e.g. \"b *r *e *a *k\", etc.)\n    keyword: function () {\n      var keywords = ['breakpoint', 'break', 'dbg_down', 'dbg_err', 'dbg_up', 'dbg_x', 'forcomposite', 'fordiv', 'forell', 'forpart', 'forprime', 'forstep', 'forsubgroup', 'forvec', 'for', 'iferr', 'if', 'local', 'my', 'next', 'return', 'until', 'while'];\n      keywords = keywords.map(function (keyword) {\n        return keyword.split('').join(' *');\n      }).join('|');\n      return RegExp('\\\\b(?:' + keywords + ')\\\\b');\n    }(),\n    \"function\": /\\b\\w(?:[\\w ]*\\w)?(?= *\\()/,\n    number: {\n      // The lookbehind and the negative lookahead prevent from breaking the .. operator\n      pattern: /((?:\\. *\\. *)?)(?:\\b\\d(?: *\\d)*(?: *(?!\\. *\\.)\\.(?: *\\d)*)?|\\. *\\d(?: *\\d)*)(?: *e *(?:[+-] *)?\\d(?: *\\d)*)?/i,\n      lookbehind: true\n    },\n    operator: /\\. *\\.|[*\\/!](?: *=)?|%(?: *=|(?: *#)?(?: *')*)?|\\+(?: *[+=])?|-(?: *[-=>])?|<(?: *>|(?: *<)?(?: *=)?)?|>(?: *>)?(?: *=)?|=(?: *=){0,2}|\\\\(?: *\\/)?(?: *=)?|&(?: *&)?|\\| *\\||['#~^]/,\n    punctuation: /[\\[\\]{}().,:;|]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvcGFyaWdwLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsTUFBTTtBQUN2QkEsTUFBTSxDQUFDQyxXQUFXLEdBQUcsUUFBUTtBQUM3QkQsTUFBTSxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNuQixTQUFTRixNQUFNQSxDQUFDRyxLQUFLLEVBQUU7RUFDckJBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixNQUFNLEdBQUc7SUFDdkJLLE9BQU8sRUFBRSx5QkFBeUI7SUFDbENDLE1BQU0sRUFBRTtNQUNOQyxPQUFPLEVBQUUsdUJBQXVCO01BQ2hDQyxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0Q7SUFDQTtJQUNBO0lBQ0FDLE9BQU8sRUFBRyxZQUFZO01BQ3BCLElBQUlDLFFBQVEsR0FBRyxDQUNiLFlBQVksRUFDWixPQUFPLEVBQ1AsVUFBVSxFQUNWLFNBQVMsRUFDVCxRQUFRLEVBQ1IsT0FBTyxFQUNQLGNBQWMsRUFDZCxRQUFRLEVBQ1IsUUFBUSxFQUNSLFNBQVMsRUFDVCxVQUFVLEVBQ1YsU0FBUyxFQUNULGFBQWEsRUFDYixRQUFRLEVBQ1IsS0FBSyxFQUNMLE9BQU8sRUFDUCxJQUFJLEVBQ0osT0FBTyxFQUNQLElBQUksRUFDSixNQUFNLEVBQ04sUUFBUSxFQUNSLE9BQU8sRUFDUCxPQUFPLENBQ1I7TUFDREEsUUFBUSxHQUFHQSxRQUFRLENBQ2hCQyxHQUFHLENBQUMsVUFBVUYsT0FBTyxFQUFFO1FBQ3RCLE9BQU9BLE9BQU8sQ0FBQ0csS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDO01BQ3JDLENBQUMsQ0FBQyxDQUNEQSxJQUFJLENBQUMsR0FBRyxDQUFDO01BQ1osT0FBT0MsTUFBTSxDQUFDLFFBQVEsR0FBR0osUUFBUSxHQUFHLE1BQU0sQ0FBQztJQUM3QyxDQUFDLENBQUUsQ0FBQztJQUNKLFlBQVUsMkJBQTJCO0lBQ3JDSyxNQUFNLEVBQUU7TUFDTjtNQUNBUixPQUFPLEVBQ0wsK0dBQStHO01BQ2pIUyxVQUFVLEVBQUU7SUFDZCxDQUFDO0lBQ0RDLFFBQVEsRUFDTixxTEFBcUw7SUFDdkxDLFdBQVcsRUFBRTtFQUNmLENBQUM7QUFDSCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXHBhcmlncC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBwYXJpZ3BcbnBhcmlncC5kaXNwbGF5TmFtZSA9ICdwYXJpZ3AnXG5wYXJpZ3AuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBwYXJpZ3AoUHJpc20pIHtcbiAgUHJpc20ubGFuZ3VhZ2VzLnBhcmlncCA9IHtcbiAgICBjb21tZW50OiAvXFwvXFwqW1xcc1xcU10qP1xcKlxcL3xcXFxcXFxcXC4qLyxcbiAgICBzdHJpbmc6IHtcbiAgICAgIHBhdHRlcm46IC9cIig/OlteXCJcXFxcXFxyXFxuXXxcXFxcLikqXCIvLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICAvLyBQQVJJL0dQIGRvZXMgbm90IGNhcmUgYWJvdXQgd2hpdGUgc3BhY2VzIGF0IGFsbFxuICAgIC8vIHNvIGxldCdzIHByb2Nlc3MgdGhlIGtleXdvcmRzIHRvIGJ1aWxkIGFuIGFwcHJvcHJpYXRlIHJlZ2V4cFxuICAgIC8vIChlLmcuIFwiYiAqciAqZSAqYSAqa1wiLCBldGMuKVxuICAgIGtleXdvcmQ6IChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIga2V5d29yZHMgPSBbXG4gICAgICAgICdicmVha3BvaW50JyxcbiAgICAgICAgJ2JyZWFrJyxcbiAgICAgICAgJ2RiZ19kb3duJyxcbiAgICAgICAgJ2RiZ19lcnInLFxuICAgICAgICAnZGJnX3VwJyxcbiAgICAgICAgJ2RiZ194JyxcbiAgICAgICAgJ2ZvcmNvbXBvc2l0ZScsXG4gICAgICAgICdmb3JkaXYnLFxuICAgICAgICAnZm9yZWxsJyxcbiAgICAgICAgJ2ZvcnBhcnQnLFxuICAgICAgICAnZm9ycHJpbWUnLFxuICAgICAgICAnZm9yc3RlcCcsXG4gICAgICAgICdmb3JzdWJncm91cCcsXG4gICAgICAgICdmb3J2ZWMnLFxuICAgICAgICAnZm9yJyxcbiAgICAgICAgJ2lmZXJyJyxcbiAgICAgICAgJ2lmJyxcbiAgICAgICAgJ2xvY2FsJyxcbiAgICAgICAgJ215JyxcbiAgICAgICAgJ25leHQnLFxuICAgICAgICAncmV0dXJuJyxcbiAgICAgICAgJ3VudGlsJyxcbiAgICAgICAgJ3doaWxlJ1xuICAgICAgXVxuICAgICAga2V5d29yZHMgPSBrZXl3b3Jkc1xuICAgICAgICAubWFwKGZ1bmN0aW9uIChrZXl3b3JkKSB7XG4gICAgICAgICAgcmV0dXJuIGtleXdvcmQuc3BsaXQoJycpLmpvaW4oJyAqJylcbiAgICAgICAgfSlcbiAgICAgICAgLmpvaW4oJ3wnKVxuICAgICAgcmV0dXJuIFJlZ0V4cCgnXFxcXGIoPzonICsga2V5d29yZHMgKyAnKVxcXFxiJylcbiAgICB9KSgpLFxuICAgIGZ1bmN0aW9uOiAvXFxiXFx3KD86W1xcdyBdKlxcdyk/KD89ICpcXCgpLyxcbiAgICBudW1iZXI6IHtcbiAgICAgIC8vIFRoZSBsb29rYmVoaW5kIGFuZCB0aGUgbmVnYXRpdmUgbG9va2FoZWFkIHByZXZlbnQgZnJvbSBicmVha2luZyB0aGUgLi4gb3BlcmF0b3JcbiAgICAgIHBhdHRlcm46XG4gICAgICAgIC8oKD86XFwuICpcXC4gKik/KSg/OlxcYlxcZCg/OiAqXFxkKSooPzogKig/IVxcLiAqXFwuKVxcLig/OiAqXFxkKSopP3xcXC4gKlxcZCg/OiAqXFxkKSopKD86ICplICooPzpbKy1dICopP1xcZCg/OiAqXFxkKSopPy9pLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgIH0sXG4gICAgb3BlcmF0b3I6XG4gICAgICAvXFwuICpcXC58WypcXC8hXSg/OiAqPSk/fCUoPzogKj18KD86ICojKT8oPzogKicpKik/fFxcKyg/OiAqWys9XSk/fC0oPzogKlstPT5dKT98PCg/OiAqPnwoPzogKjwpPyg/OiAqPSk/KT98Pig/OiAqPik/KD86ICo9KT98PSg/OiAqPSl7MCwyfXxcXFxcKD86ICpcXC8pPyg/OiAqPSk/fCYoPzogKiYpP3xcXHwgKlxcfHxbJyN+Xl0vLFxuICAgIHB1bmN0dWF0aW9uOiAvW1xcW1xcXXt9KCkuLDo7fF0vXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicGFyaWdwIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJjb21tZW50Iiwic3RyaW5nIiwicGF0dGVybiIsImdyZWVkeSIsImtleXdvcmQiLCJrZXl3b3JkcyIsIm1hcCIsInNwbGl0Iiwiam9pbiIsIlJlZ0V4cCIsIm51bWJlciIsImxvb2tiZWhpbmQiLCJvcGVyYXRvciIsInB1bmN0dWF0aW9uIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/parigp.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/parser.js":
/*!***********************************************!*\
  !*** ./node_modules/refractor/lang/parser.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = parser;\nparser.displayName = 'parser';\nparser.aliases = [];\nfunction parser(Prism) {\n  ;\n  (function (Prism) {\n    var parser = Prism.languages.parser = Prism.languages.extend('markup', {\n      keyword: {\n        pattern: /(^|[^^])(?:\\^(?:case|eval|for|if|switch|throw)\\b|@(?:BASE|CLASS|GET(?:_DEFAULT)?|OPTIONS|SET_DEFAULT|USE)\\b)/,\n        lookbehind: true\n      },\n      variable: {\n        pattern: /(^|[^^])\\B\\$(?:\\w+|(?=[.{]))(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\.|:+/\n        }\n      },\n      \"function\": {\n        pattern: /(^|[^^])\\B[@^]\\w+(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,\n        lookbehind: true,\n        inside: {\n          keyword: {\n            pattern: /(^@)(?:GET_|SET_)/,\n            lookbehind: true\n          },\n          punctuation: /\\.|:+/\n        }\n      },\n      escape: {\n        pattern: /\\^(?:[$^;@()\\[\\]{}\"':]|#[a-f\\d]*)/i,\n        alias: 'builtin'\n      },\n      punctuation: /[\\[\\](){};]/\n    });\n    parser = Prism.languages.insertBefore('parser', 'keyword', {\n      'parser-comment': {\n        pattern: /(\\s)#.*/,\n        lookbehind: true,\n        alias: 'comment'\n      },\n      expression: {\n        // Allow for 3 levels of depth\n        pattern: /(^|[^^])\\((?:[^()]|\\((?:[^()]|\\((?:[^()])*\\))*\\))*\\)/,\n        greedy: true,\n        lookbehind: true,\n        inside: {\n          string: {\n            pattern: /(^|[^^])([\"'])(?:(?!\\2)[^^]|\\^[\\s\\S])*\\2/,\n            lookbehind: true\n          },\n          keyword: parser.keyword,\n          variable: parser.variable,\n          \"function\": parser[\"function\"],\n          \"boolean\": /\\b(?:false|true)\\b/,\n          number: /\\b(?:0x[a-f\\d]+|\\d+(?:\\.\\d*)?(?:e[+-]?\\d+)?)\\b/i,\n          escape: parser.escape,\n          operator: /[~+*\\/\\\\%]|!(?:\\|\\|?|=)?|&&?|\\|\\|?|==|<[<=]?|>[>=]?|-[fd]?|\\b(?:def|eq|ge|gt|in|is|le|lt|ne)\\b/,\n          punctuation: parser.punctuation\n        }\n      }\n    });\n    Prism.languages.insertBefore('inside', 'punctuation', {\n      expression: parser.expression,\n      keyword: parser.keyword,\n      variable: parser.variable,\n      \"function\": parser[\"function\"],\n      escape: parser.escape,\n      'parser-punctuation': {\n        pattern: parser.punctuation,\n        alias: 'punctuation'\n      }\n    }, parser['tag'].inside['attr-value']);\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvcGFyc2VyLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsTUFBTTtBQUN2QkEsTUFBTSxDQUFDQyxXQUFXLEdBQUcsUUFBUTtBQUM3QkQsTUFBTSxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNuQixTQUFTRixNQUFNQSxDQUFDRyxLQUFLLEVBQUU7RUFDckI7RUFBQyxDQUFDLFVBQVVBLEtBQUssRUFBRTtJQUNqQixJQUFJSCxNQUFNLEdBQUlHLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixNQUFNLEdBQUdHLEtBQUssQ0FBQ0MsU0FBUyxDQUFDQyxNQUFNLENBQUMsUUFBUSxFQUFFO01BQ3RFQyxPQUFPLEVBQUU7UUFDUEMsT0FBTyxFQUNMLDhHQUE4RztRQUNoSEMsVUFBVSxFQUFFO01BQ2QsQ0FBQztNQUNEQyxRQUFRLEVBQUU7UUFDUkYsT0FBTyxFQUFFLDJEQUEyRDtRQUNwRUMsVUFBVSxFQUFFLElBQUk7UUFDaEJFLE1BQU0sRUFBRTtVQUNOQyxXQUFXLEVBQUU7UUFDZjtNQUNGLENBQUM7TUFDRCxZQUFVO1FBQ1JKLE9BQU8sRUFBRSxnREFBZ0Q7UUFDekRDLFVBQVUsRUFBRSxJQUFJO1FBQ2hCRSxNQUFNLEVBQUU7VUFDTkosT0FBTyxFQUFFO1lBQ1BDLE9BQU8sRUFBRSxtQkFBbUI7WUFDNUJDLFVBQVUsRUFBRTtVQUNkLENBQUM7VUFDREcsV0FBVyxFQUFFO1FBQ2Y7TUFDRixDQUFDO01BQ0RDLE1BQU0sRUFBRTtRQUNOTCxPQUFPLEVBQUUsb0NBQW9DO1FBQzdDTSxLQUFLLEVBQUU7TUFDVCxDQUFDO01BQ0RGLFdBQVcsRUFBRTtJQUNmLENBQUMsQ0FBRTtJQUNIWCxNQUFNLEdBQUdHLEtBQUssQ0FBQ0MsU0FBUyxDQUFDVSxZQUFZLENBQUMsUUFBUSxFQUFFLFNBQVMsRUFBRTtNQUN6RCxnQkFBZ0IsRUFBRTtRQUNoQlAsT0FBTyxFQUFFLFNBQVM7UUFDbEJDLFVBQVUsRUFBRSxJQUFJO1FBQ2hCSyxLQUFLLEVBQUU7TUFDVCxDQUFDO01BQ0RFLFVBQVUsRUFBRTtRQUNWO1FBQ0FSLE9BQU8sRUFBRSxzREFBc0Q7UUFDL0RTLE1BQU0sRUFBRSxJQUFJO1FBQ1pSLFVBQVUsRUFBRSxJQUFJO1FBQ2hCRSxNQUFNLEVBQUU7VUFDTk8sTUFBTSxFQUFFO1lBQ05WLE9BQU8sRUFBRSwwQ0FBMEM7WUFDbkRDLFVBQVUsRUFBRTtVQUNkLENBQUM7VUFDREYsT0FBTyxFQUFFTixNQUFNLENBQUNNLE9BQU87VUFDdkJHLFFBQVEsRUFBRVQsTUFBTSxDQUFDUyxRQUFRO1VBQ3pCLFlBQVVULE1BQU0sWUFBUztVQUN6QixXQUFTLG9CQUFvQjtVQUM3QmtCLE1BQU0sRUFBRSxpREFBaUQ7VUFDekROLE1BQU0sRUFBRVosTUFBTSxDQUFDWSxNQUFNO1VBQ3JCTyxRQUFRLEVBQ04sZ0dBQWdHO1VBQ2xHUixXQUFXLEVBQUVYLE1BQU0sQ0FBQ1c7UUFDdEI7TUFDRjtJQUNGLENBQUMsQ0FBQztJQUNGUixLQUFLLENBQUNDLFNBQVMsQ0FBQ1UsWUFBWSxDQUMxQixRQUFRLEVBQ1IsYUFBYSxFQUNiO01BQ0VDLFVBQVUsRUFBRWYsTUFBTSxDQUFDZSxVQUFVO01BQzdCVCxPQUFPLEVBQUVOLE1BQU0sQ0FBQ00sT0FBTztNQUN2QkcsUUFBUSxFQUFFVCxNQUFNLENBQUNTLFFBQVE7TUFDekIsWUFBVVQsTUFBTSxZQUFTO01BQ3pCWSxNQUFNLEVBQUVaLE1BQU0sQ0FBQ1ksTUFBTTtNQUNyQixvQkFBb0IsRUFBRTtRQUNwQkwsT0FBTyxFQUFFUCxNQUFNLENBQUNXLFdBQVc7UUFDM0JFLEtBQUssRUFBRTtNQUNUO0lBQ0YsQ0FBQyxFQUNEYixNQUFNLENBQUMsS0FBSyxDQUFDLENBQUNVLE1BQU0sQ0FBQyxZQUFZLENBQ25DLENBQUM7RUFDSCxDQUFDLEVBQUVQLEtBQUssQ0FBQztBQUNYIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xccGFyc2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcnNlclxucGFyc2VyLmRpc3BsYXlOYW1lID0gJ3BhcnNlcidcbnBhcnNlci5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIHBhcnNlcihQcmlzbSkge1xuICA7KGZ1bmN0aW9uIChQcmlzbSkge1xuICAgIHZhciBwYXJzZXIgPSAoUHJpc20ubGFuZ3VhZ2VzLnBhcnNlciA9IFByaXNtLmxhbmd1YWdlcy5leHRlbmQoJ21hcmt1cCcsIHtcbiAgICAgIGtleXdvcmQ6IHtcbiAgICAgICAgcGF0dGVybjpcbiAgICAgICAgICAvKF58W15eXSkoPzpcXF4oPzpjYXNlfGV2YWx8Zm9yfGlmfHN3aXRjaHx0aHJvdylcXGJ8QCg/OkJBU0V8Q0xBU1N8R0VUKD86X0RFRkFVTFQpP3xPUFRJT05TfFNFVF9ERUZBVUxUfFVTRSlcXGIpLyxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHZhcmlhYmxlOiB7XG4gICAgICAgIHBhdHRlcm46IC8oXnxbXl5dKVxcQlxcJCg/Olxcdyt8KD89Wy57XSkpKD86KD86XFwufDo6PylcXHcrKSooPzpcXC58Ojo/KT8vLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICBwdW5jdHVhdGlvbjogL1xcLnw6Ky9cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGZ1bmN0aW9uOiB7XG4gICAgICAgIHBhdHRlcm46IC8oXnxbXl5dKVxcQltAXl1cXHcrKD86KD86XFwufDo6PylcXHcrKSooPzpcXC58Ojo/KT8vLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICBrZXl3b3JkOiB7XG4gICAgICAgICAgICBwYXR0ZXJuOiAvKF5AKSg/OkdFVF98U0VUXykvLFxuICAgICAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgcHVuY3R1YXRpb246IC9cXC58OisvXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBlc2NhcGU6IHtcbiAgICAgICAgcGF0dGVybjogL1xcXig/OlskXjtAKClcXFtcXF17fVwiJzpdfCNbYS1mXFxkXSopL2ksXG4gICAgICAgIGFsaWFzOiAnYnVpbHRpbidcbiAgICAgIH0sXG4gICAgICBwdW5jdHVhdGlvbjogL1tcXFtcXF0oKXt9O10vXG4gICAgfSkpXG4gICAgcGFyc2VyID0gUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgncGFyc2VyJywgJ2tleXdvcmQnLCB7XG4gICAgICAncGFyc2VyLWNvbW1lbnQnOiB7XG4gICAgICAgIHBhdHRlcm46IC8oXFxzKSMuKi8sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGFsaWFzOiAnY29tbWVudCdcbiAgICAgIH0sXG4gICAgICBleHByZXNzaW9uOiB7XG4gICAgICAgIC8vIEFsbG93IGZvciAzIGxldmVscyBvZiBkZXB0aFxuICAgICAgICBwYXR0ZXJuOiAvKF58W15eXSlcXCgoPzpbXigpXXxcXCgoPzpbXigpXXxcXCgoPzpbXigpXSkqXFwpKSpcXCkpKlxcKS8sXG4gICAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgc3RyaW5nOiB7XG4gICAgICAgICAgICBwYXR0ZXJuOiAvKF58W15eXSkoW1wiJ10pKD86KD8hXFwyKVteXl18XFxeW1xcc1xcU10pKlxcMi8sXG4gICAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICAgICAgfSxcbiAgICAgICAgICBrZXl3b3JkOiBwYXJzZXIua2V5d29yZCxcbiAgICAgICAgICB2YXJpYWJsZTogcGFyc2VyLnZhcmlhYmxlLFxuICAgICAgICAgIGZ1bmN0aW9uOiBwYXJzZXIuZnVuY3Rpb24sXG4gICAgICAgICAgYm9vbGVhbjogL1xcYig/OmZhbHNlfHRydWUpXFxiLyxcbiAgICAgICAgICBudW1iZXI6IC9cXGIoPzoweFthLWZcXGRdK3xcXGQrKD86XFwuXFxkKik/KD86ZVsrLV0/XFxkKyk/KVxcYi9pLFxuICAgICAgICAgIGVzY2FwZTogcGFyc2VyLmVzY2FwZSxcbiAgICAgICAgICBvcGVyYXRvcjpcbiAgICAgICAgICAgIC9bfisqXFwvXFxcXCVdfCEoPzpcXHxcXHw/fD0pP3wmJj98XFx8XFx8P3w9PXw8Wzw9XT98Pls+PV0/fC1bZmRdP3xcXGIoPzpkZWZ8ZXF8Z2V8Z3R8aW58aXN8bGV8bHR8bmUpXFxiLyxcbiAgICAgICAgICBwdW5jdHVhdGlvbjogcGFyc2VyLnB1bmN0dWF0aW9uXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuICAgIFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoXG4gICAgICAnaW5zaWRlJyxcbiAgICAgICdwdW5jdHVhdGlvbicsXG4gICAgICB7XG4gICAgICAgIGV4cHJlc3Npb246IHBhcnNlci5leHByZXNzaW9uLFxuICAgICAgICBrZXl3b3JkOiBwYXJzZXIua2V5d29yZCxcbiAgICAgICAgdmFyaWFibGU6IHBhcnNlci52YXJpYWJsZSxcbiAgICAgICAgZnVuY3Rpb246IHBhcnNlci5mdW5jdGlvbixcbiAgICAgICAgZXNjYXBlOiBwYXJzZXIuZXNjYXBlLFxuICAgICAgICAncGFyc2VyLXB1bmN0dWF0aW9uJzoge1xuICAgICAgICAgIHBhdHRlcm46IHBhcnNlci5wdW5jdHVhdGlvbixcbiAgICAgICAgICBhbGlhczogJ3B1bmN0dWF0aW9uJ1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcGFyc2VyWyd0YWcnXS5pbnNpZGVbJ2F0dHItdmFsdWUnXVxuICAgIClcbiAgfSkoUHJpc20pXG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInBhcnNlciIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwiZXh0ZW5kIiwia2V5d29yZCIsInBhdHRlcm4iLCJsb29rYmVoaW5kIiwidmFyaWFibGUiLCJpbnNpZGUiLCJwdW5jdHVhdGlvbiIsImVzY2FwZSIsImFsaWFzIiwiaW5zZXJ0QmVmb3JlIiwiZXhwcmVzc2lvbiIsImdyZWVkeSIsInN0cmluZyIsIm51bWJlciIsIm9wZXJhdG9yIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/parser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/pascal.js":
/*!***********************************************!*\
  !*** ./node_modules/refractor/lang/pascal.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = pascal;\npascal.displayName = 'pascal';\npascal.aliases = ['objectpascal'];\nfunction pascal(Prism) {\n  // Based on Free Pascal\n  /* TODO\n  Support inline asm ?\n  */\n  Prism.languages.pascal = {\n    directive: {\n      pattern: /\\{\\$[\\s\\S]*?\\}/,\n      greedy: true,\n      alias: ['marco', 'property']\n    },\n    comment: {\n      pattern: /\\(\\*[\\s\\S]*?\\*\\)|\\{[\\s\\S]*?\\}|\\/\\/.*/,\n      greedy: true\n    },\n    string: {\n      pattern: /(?:'(?:''|[^'\\r\\n])*'(?!')|#[&$%]?[a-f\\d]+)+|\\^[a-z]/i,\n      greedy: true\n    },\n    asm: {\n      pattern: /(\\basm\\b)[\\s\\S]+?(?=\\bend\\s*[;[])/i,\n      lookbehind: true,\n      greedy: true,\n      inside: null // see below\n    },\n\n    keyword: [{\n      // Turbo Pascal\n      pattern: /(^|[^&])\\b(?:absolute|array|asm|begin|case|const|constructor|destructor|do|downto|else|end|file|for|function|goto|if|implementation|inherited|inline|interface|label|nil|object|of|operator|packed|procedure|program|record|reintroduce|repeat|self|set|string|then|to|type|unit|until|uses|var|while|with)\\b/i,\n      lookbehind: true\n    }, {\n      // Free Pascal\n      pattern: /(^|[^&])\\b(?:dispose|exit|false|new|true)\\b/i,\n      lookbehind: true\n    }, {\n      // Object Pascal\n      pattern: /(^|[^&])\\b(?:class|dispinterface|except|exports|finalization|finally|initialization|inline|library|on|out|packed|property|raise|resourcestring|threadvar|try)\\b/i,\n      lookbehind: true\n    }, {\n      // Modifiers\n      pattern: /(^|[^&])\\b(?:absolute|abstract|alias|assembler|bitpacked|break|cdecl|continue|cppdecl|cvar|default|deprecated|dynamic|enumerator|experimental|export|external|far|far16|forward|generic|helper|implements|index|interrupt|iochecks|local|message|name|near|nodefault|noreturn|nostackframe|oldfpccall|otherwise|overload|override|pascal|platform|private|protected|public|published|read|register|reintroduce|result|safecall|saveregisters|softfloat|specialize|static|stdcall|stored|strict|unaligned|unimplemented|varargs|virtual|write)\\b/i,\n      lookbehind: true\n    }],\n    number: [\n    // Hexadecimal, octal and binary\n    /(?:[&%]\\d+|\\$[a-f\\d]+)/i,\n    // Decimal\n    /\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?/i],\n    operator: [/\\.\\.|\\*\\*|:=|<[<=>]?|>[>=]?|[+\\-*\\/]=?|[@^=]/, {\n      pattern: /(^|[^&])\\b(?:and|as|div|exclude|in|include|is|mod|not|or|shl|shr|xor)\\b/,\n      lookbehind: true\n    }],\n    punctuation: /\\(\\.|\\.\\)|[()\\[\\]:;,.]/\n  };\n  Prism.languages.pascal.asm.inside = Prism.languages.extend('pascal', {\n    asm: undefined,\n    keyword: undefined,\n    operator: undefined\n  });\n  Prism.languages.objectpascal = Prism.languages.pascal;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvcGFzY2FsLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsTUFBTTtBQUN2QkEsTUFBTSxDQUFDQyxXQUFXLEdBQUcsUUFBUTtBQUM3QkQsTUFBTSxDQUFDRSxPQUFPLEdBQUcsQ0FBQyxjQUFjLENBQUM7QUFDakMsU0FBU0YsTUFBTUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ3JCO0VBQ0E7QUFDRjtBQUNBO0VBQ0VBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixNQUFNLEdBQUc7SUFDdkJLLFNBQVMsRUFBRTtNQUNUQyxPQUFPLEVBQUUsZ0JBQWdCO01BQ3pCQyxNQUFNLEVBQUUsSUFBSTtNQUNaQyxLQUFLLEVBQUUsQ0FBQyxPQUFPLEVBQUUsVUFBVTtJQUM3QixDQUFDO0lBQ0RDLE9BQU8sRUFBRTtNQUNQSCxPQUFPLEVBQUUsc0NBQXNDO01BQy9DQyxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0RHLE1BQU0sRUFBRTtNQUNOSixPQUFPLEVBQUUsdURBQXVEO01BQ2hFQyxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0RJLEdBQUcsRUFBRTtNQUNITCxPQUFPLEVBQUUsb0NBQW9DO01BQzdDTSxVQUFVLEVBQUUsSUFBSTtNQUNoQkwsTUFBTSxFQUFFLElBQUk7TUFDWk0sTUFBTSxFQUFFLElBQUksQ0FBQztJQUNmLENBQUM7O0lBQ0RDLE9BQU8sRUFBRSxDQUNQO01BQ0U7TUFDQVIsT0FBTyxFQUNMLGdUQUFnVDtNQUNsVE0sVUFBVSxFQUFFO0lBQ2QsQ0FBQyxFQUNEO01BQ0U7TUFDQU4sT0FBTyxFQUFFLDhDQUE4QztNQUN2RE0sVUFBVSxFQUFFO0lBQ2QsQ0FBQyxFQUNEO01BQ0U7TUFDQU4sT0FBTyxFQUNMLGtLQUFrSztNQUNwS00sVUFBVSxFQUFFO0lBQ2QsQ0FBQyxFQUNEO01BQ0U7TUFDQU4sT0FBTyxFQUNMLGtoQkFBa2hCO01BQ3BoQk0sVUFBVSxFQUFFO0lBQ2QsQ0FBQyxDQUNGO0lBQ0RHLE1BQU0sRUFBRTtJQUNOO0lBQ0EseUJBQXlCO0lBQUU7SUFDM0IsZ0NBQWdDLENBQ2pDO0lBQ0RDLFFBQVEsRUFBRSxDQUNSLDhDQUE4QyxFQUM5QztNQUNFVixPQUFPLEVBQ0wseUVBQXlFO01BQzNFTSxVQUFVLEVBQUU7SUFDZCxDQUFDLENBQ0Y7SUFDREssV0FBVyxFQUFFO0VBQ2YsQ0FBQztFQUNEZCxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osTUFBTSxDQUFDVyxHQUFHLENBQUNFLE1BQU0sR0FBR1YsS0FBSyxDQUFDQyxTQUFTLENBQUNjLE1BQU0sQ0FBQyxRQUFRLEVBQUU7SUFDbkVQLEdBQUcsRUFBRVEsU0FBUztJQUNkTCxPQUFPLEVBQUVLLFNBQVM7SUFDbEJILFFBQVEsRUFBRUc7RUFDWixDQUFDLENBQUM7RUFDRmhCLEtBQUssQ0FBQ0MsU0FBUyxDQUFDZ0IsWUFBWSxHQUFHakIsS0FBSyxDQUFDQyxTQUFTLENBQUNKLE1BQU07QUFDdkQiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxwYXNjYWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gcGFzY2FsXG5wYXNjYWwuZGlzcGxheU5hbWUgPSAncGFzY2FsJ1xucGFzY2FsLmFsaWFzZXMgPSBbJ29iamVjdHBhc2NhbCddXG5mdW5jdGlvbiBwYXNjYWwoUHJpc20pIHtcbiAgLy8gQmFzZWQgb24gRnJlZSBQYXNjYWxcbiAgLyogVE9ET1xuU3VwcG9ydCBpbmxpbmUgYXNtID9cbiovXG4gIFByaXNtLmxhbmd1YWdlcy5wYXNjYWwgPSB7XG4gICAgZGlyZWN0aXZlOiB7XG4gICAgICBwYXR0ZXJuOiAvXFx7XFwkW1xcc1xcU10qP1xcfS8sXG4gICAgICBncmVlZHk6IHRydWUsXG4gICAgICBhbGlhczogWydtYXJjbycsICdwcm9wZXJ0eSddXG4gICAgfSxcbiAgICBjb21tZW50OiB7XG4gICAgICBwYXR0ZXJuOiAvXFwoXFwqW1xcc1xcU10qP1xcKlxcKXxcXHtbXFxzXFxTXSo/XFx9fFxcL1xcLy4qLyxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgc3RyaW5nOiB7XG4gICAgICBwYXR0ZXJuOiAvKD86Jyg/OicnfFteJ1xcclxcbl0pKicoPyEnKXwjWyYkJV0/W2EtZlxcZF0rKSt8XFxeW2Etel0vaSxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgYXNtOiB7XG4gICAgICBwYXR0ZXJuOiAvKFxcYmFzbVxcYilbXFxzXFxTXSs/KD89XFxiZW5kXFxzKls7W10pL2ksXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgaW5zaWRlOiBudWxsIC8vIHNlZSBiZWxvd1xuICAgIH0sXG4gICAga2V5d29yZDogW1xuICAgICAge1xuICAgICAgICAvLyBUdXJibyBQYXNjYWxcbiAgICAgICAgcGF0dGVybjpcbiAgICAgICAgICAvKF58W14mXSlcXGIoPzphYnNvbHV0ZXxhcnJheXxhc218YmVnaW58Y2FzZXxjb25zdHxjb25zdHJ1Y3RvcnxkZXN0cnVjdG9yfGRvfGRvd250b3xlbHNlfGVuZHxmaWxlfGZvcnxmdW5jdGlvbnxnb3RvfGlmfGltcGxlbWVudGF0aW9ufGluaGVyaXRlZHxpbmxpbmV8aW50ZXJmYWNlfGxhYmVsfG5pbHxvYmplY3R8b2Z8b3BlcmF0b3J8cGFja2VkfHByb2NlZHVyZXxwcm9ncmFtfHJlY29yZHxyZWludHJvZHVjZXxyZXBlYXR8c2VsZnxzZXR8c3RyaW5nfHRoZW58dG98dHlwZXx1bml0fHVudGlsfHVzZXN8dmFyfHdoaWxlfHdpdGgpXFxiL2ksXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIC8vIEZyZWUgUGFzY2FsXG4gICAgICAgIHBhdHRlcm46IC8oXnxbXiZdKVxcYig/OmRpc3Bvc2V8ZXhpdHxmYWxzZXxuZXd8dHJ1ZSlcXGIvaSxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgLy8gT2JqZWN0IFBhc2NhbFxuICAgICAgICBwYXR0ZXJuOlxuICAgICAgICAgIC8oXnxbXiZdKVxcYig/OmNsYXNzfGRpc3BpbnRlcmZhY2V8ZXhjZXB0fGV4cG9ydHN8ZmluYWxpemF0aW9ufGZpbmFsbHl8aW5pdGlhbGl6YXRpb258aW5saW5lfGxpYnJhcnl8b258b3V0fHBhY2tlZHxwcm9wZXJ0eXxyYWlzZXxyZXNvdXJjZXN0cmluZ3x0aHJlYWR2YXJ8dHJ5KVxcYi9pLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICAvLyBNb2RpZmllcnNcbiAgICAgICAgcGF0dGVybjpcbiAgICAgICAgICAvKF58W14mXSlcXGIoPzphYnNvbHV0ZXxhYnN0cmFjdHxhbGlhc3xhc3NlbWJsZXJ8Yml0cGFja2VkfGJyZWFrfGNkZWNsfGNvbnRpbnVlfGNwcGRlY2x8Y3ZhcnxkZWZhdWx0fGRlcHJlY2F0ZWR8ZHluYW1pY3xlbnVtZXJhdG9yfGV4cGVyaW1lbnRhbHxleHBvcnR8ZXh0ZXJuYWx8ZmFyfGZhcjE2fGZvcndhcmR8Z2VuZXJpY3xoZWxwZXJ8aW1wbGVtZW50c3xpbmRleHxpbnRlcnJ1cHR8aW9jaGVja3N8bG9jYWx8bWVzc2FnZXxuYW1lfG5lYXJ8bm9kZWZhdWx0fG5vcmV0dXJufG5vc3RhY2tmcmFtZXxvbGRmcGNjYWxsfG90aGVyd2lzZXxvdmVybG9hZHxvdmVycmlkZXxwYXNjYWx8cGxhdGZvcm18cHJpdmF0ZXxwcm90ZWN0ZWR8cHVibGljfHB1Ymxpc2hlZHxyZWFkfHJlZ2lzdGVyfHJlaW50cm9kdWNlfHJlc3VsdHxzYWZlY2FsbHxzYXZlcmVnaXN0ZXJzfHNvZnRmbG9hdHxzcGVjaWFsaXplfHN0YXRpY3xzdGRjYWxsfHN0b3JlZHxzdHJpY3R8dW5hbGlnbmVkfHVuaW1wbGVtZW50ZWR8dmFyYXJnc3x2aXJ0dWFsfHdyaXRlKVxcYi9pLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICB9XG4gICAgXSxcbiAgICBudW1iZXI6IFtcbiAgICAgIC8vIEhleGFkZWNpbWFsLCBvY3RhbCBhbmQgYmluYXJ5XG4gICAgICAvKD86WyYlXVxcZCt8XFwkW2EtZlxcZF0rKS9pLCAvLyBEZWNpbWFsXG4gICAgICAvXFxiXFxkKyg/OlxcLlxcZCspPyg/OmVbKy1dP1xcZCspPy9pXG4gICAgXSxcbiAgICBvcGVyYXRvcjogW1xuICAgICAgL1xcLlxcLnxcXCpcXCp8Oj18PFs8PT5dP3w+Wz49XT98WytcXC0qXFwvXT0/fFtAXj1dLyxcbiAgICAgIHtcbiAgICAgICAgcGF0dGVybjpcbiAgICAgICAgICAvKF58W14mXSlcXGIoPzphbmR8YXN8ZGl2fGV4Y2x1ZGV8aW58aW5jbHVkZXxpc3xtb2R8bm90fG9yfHNobHxzaHJ8eG9yKVxcYi8sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH1cbiAgICBdLFxuICAgIHB1bmN0dWF0aW9uOiAvXFwoXFwufFxcLlxcKXxbKClcXFtcXF06OywuXS9cbiAgfVxuICBQcmlzbS5sYW5ndWFnZXMucGFzY2FsLmFzbS5pbnNpZGUgPSBQcmlzbS5sYW5ndWFnZXMuZXh0ZW5kKCdwYXNjYWwnLCB7XG4gICAgYXNtOiB1bmRlZmluZWQsXG4gICAga2V5d29yZDogdW5kZWZpbmVkLFxuICAgIG9wZXJhdG9yOiB1bmRlZmluZWRcbiAgfSlcbiAgUHJpc20ubGFuZ3VhZ2VzLm9iamVjdHBhc2NhbCA9IFByaXNtLmxhbmd1YWdlcy5wYXNjYWxcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicGFzY2FsIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJkaXJlY3RpdmUiLCJwYXR0ZXJuIiwiZ3JlZWR5IiwiYWxpYXMiLCJjb21tZW50Iiwic3RyaW5nIiwiYXNtIiwibG9va2JlaGluZCIsImluc2lkZSIsImtleXdvcmQiLCJudW1iZXIiLCJvcGVyYXRvciIsInB1bmN0dWF0aW9uIiwiZXh0ZW5kIiwidW5kZWZpbmVkIiwib2JqZWN0cGFzY2FsIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/pascal.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/pascaligo.js":
/*!**************************************************!*\
  !*** ./node_modules/refractor/lang/pascaligo.js ***!
  \**************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = pascaligo;\npascaligo.displayName = 'pascaligo';\npascaligo.aliases = [];\nfunction pascaligo(Prism) {\n  ;\n  (function (Prism) {\n    // Pascaligo is a layer 2 smart contract language for the tezos blockchain\n    var braces = /\\((?:[^()]|\\((?:[^()]|\\([^()]*\\))*\\))*\\)/.source;\n    var type = /(?:\\b\\w+(?:<braces>)?|<braces>)/.source.replace(/<braces>/g, function () {\n      return braces;\n    });\n    var pascaligo = Prism.languages.pascaligo = {\n      comment: /\\(\\*[\\s\\S]+?\\*\\)|\\/\\/.*/,\n      string: {\n        pattern: /([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|\\^[a-z]/i,\n        greedy: true\n      },\n      'class-name': [{\n        pattern: RegExp(/(\\btype\\s+\\w+\\s+is\\s+)<type>/.source.replace(/<type>/g, function () {\n          return type;\n        }), 'i'),\n        lookbehind: true,\n        inside: null // see below\n      }, {\n        pattern: RegExp(/<type>(?=\\s+is\\b)/.source.replace(/<type>/g, function () {\n          return type;\n        }), 'i'),\n        inside: null // see below\n      }, {\n        pattern: RegExp(/(:\\s*)<type>/.source.replace(/<type>/g, function () {\n          return type;\n        })),\n        lookbehind: true,\n        inside: null // see below\n      }],\n\n      keyword: {\n        pattern: /(^|[^&])\\b(?:begin|block|case|const|else|end|fail|for|from|function|if|is|nil|of|remove|return|skip|then|type|var|while|with)\\b/i,\n        lookbehind: true\n      },\n      \"boolean\": {\n        pattern: /(^|[^&])\\b(?:False|True)\\b/i,\n        lookbehind: true\n      },\n      builtin: {\n        pattern: /(^|[^&])\\b(?:bool|int|list|map|nat|record|string|unit)\\b/i,\n        lookbehind: true\n      },\n      \"function\": /\\b\\w+(?=\\s*\\()/,\n      number: [\n      // Hexadecimal, octal and binary\n      /%[01]+|&[0-7]+|\\$[a-f\\d]+/i,\n      // Decimal\n      /\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?(?:mtz|n)?/i],\n      operator: /->|=\\/=|\\.\\.|\\*\\*|:=|<[<=>]?|>[>=]?|[+\\-*\\/]=?|[@^=|]|\\b(?:and|mod|or)\\b/,\n      punctuation: /\\(\\.|\\.\\)|[()\\[\\]:;,.{}]/\n    };\n    var classNameInside = ['comment', 'keyword', 'builtin', 'operator', 'punctuation'].reduce(function (accum, key) {\n      accum[key] = pascaligo[key];\n      return accum;\n    }, {});\n    pascaligo['class-name'].forEach(function (p) {\n      p.inside = classNameInside;\n    });\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvcGFzY2FsaWdvLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsU0FBUztBQUMxQkEsU0FBUyxDQUFDQyxXQUFXLEdBQUcsV0FBVztBQUNuQ0QsU0FBUyxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUN0QixTQUFTRixTQUFTQSxDQUFDRyxLQUFLLEVBQUU7RUFDeEI7RUFBQyxDQUFDLFVBQVVBLEtBQUssRUFBRTtJQUNqQjtJQUNBLElBQUlDLE1BQU0sR0FBRywwQ0FBMEMsQ0FBQ0MsTUFBTTtJQUM5RCxJQUFJQyxJQUFJLEdBQUcsaUNBQWlDLENBQUNELE1BQU0sQ0FBQ0UsT0FBTyxDQUN6RCxXQUFXLEVBQ1gsWUFBWTtNQUNWLE9BQU9ILE1BQU07SUFDZixDQUNGLENBQUM7SUFDRCxJQUFJSixTQUFTLEdBQUlHLEtBQUssQ0FBQ0ssU0FBUyxDQUFDUixTQUFTLEdBQUc7TUFDM0NTLE9BQU8sRUFBRSx5QkFBeUI7TUFDbENDLE1BQU0sRUFBRTtRQUNOQyxPQUFPLEVBQUUsNkNBQTZDO1FBQ3REQyxNQUFNLEVBQUU7TUFDVixDQUFDO01BQ0QsWUFBWSxFQUFFLENBQ1o7UUFDRUQsT0FBTyxFQUFFRSxNQUFNLENBQ2IsOEJBQThCLENBQUNSLE1BQU0sQ0FBQ0UsT0FBTyxDQUMzQyxTQUFTLEVBQ1QsWUFBWTtVQUNWLE9BQU9ELElBQUk7UUFDYixDQUNGLENBQUMsRUFDRCxHQUNGLENBQUM7UUFDRFEsVUFBVSxFQUFFLElBQUk7UUFDaEJDLE1BQU0sRUFBRSxJQUFJLENBQUM7TUFDZixDQUFDLEVBQ0Q7UUFDRUosT0FBTyxFQUFFRSxNQUFNLENBQ2IsbUJBQW1CLENBQUNSLE1BQU0sQ0FBQ0UsT0FBTyxDQUFDLFNBQVMsRUFBRSxZQUFZO1VBQ3hELE9BQU9ELElBQUk7UUFDYixDQUFDLENBQUMsRUFDRixHQUNGLENBQUM7UUFDRFMsTUFBTSxFQUFFLElBQUksQ0FBQztNQUNmLENBQUMsRUFDRDtRQUNFSixPQUFPLEVBQUVFLE1BQU0sQ0FDYixjQUFjLENBQUNSLE1BQU0sQ0FBQ0UsT0FBTyxDQUFDLFNBQVMsRUFBRSxZQUFZO1VBQ25ELE9BQU9ELElBQUk7UUFDYixDQUFDLENBQ0gsQ0FBQztRQUNEUSxVQUFVLEVBQUUsSUFBSTtRQUNoQkMsTUFBTSxFQUFFLElBQUksQ0FBQztNQUNmLENBQUMsQ0FDRjs7TUFDREMsT0FBTyxFQUFFO1FBQ1BMLE9BQU8sRUFDTCxrSUFBa0k7UUFDcElHLFVBQVUsRUFBRTtNQUNkLENBQUM7TUFDRCxXQUFTO1FBQ1BILE9BQU8sRUFBRSw2QkFBNkI7UUFDdENHLFVBQVUsRUFBRTtNQUNkLENBQUM7TUFDREcsT0FBTyxFQUFFO1FBQ1BOLE9BQU8sRUFBRSwyREFBMkQ7UUFDcEVHLFVBQVUsRUFBRTtNQUNkLENBQUM7TUFDRCxZQUFVLGdCQUFnQjtNQUMxQkksTUFBTSxFQUFFO01BQ047TUFDQSw0QkFBNEI7TUFBRTtNQUM5QiwwQ0FBMEMsQ0FDM0M7TUFDREMsUUFBUSxFQUNOLDBFQUEwRTtNQUM1RUMsV0FBVyxFQUFFO0lBQ2YsQ0FBRTtJQUNGLElBQUlDLGVBQWUsR0FBRyxDQUNwQixTQUFTLEVBQ1QsU0FBUyxFQUNULFNBQVMsRUFDVCxVQUFVLEVBQ1YsYUFBYSxDQUNkLENBQUNDLE1BQU0sQ0FBQyxVQUFVQyxLQUFLLEVBQUVDLEdBQUcsRUFBRTtNQUM3QkQsS0FBSyxDQUFDQyxHQUFHLENBQUMsR0FBR3hCLFNBQVMsQ0FBQ3dCLEdBQUcsQ0FBQztNQUMzQixPQUFPRCxLQUFLO0lBQ2QsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ052QixTQUFTLENBQUMsWUFBWSxDQUFDLENBQUN5QixPQUFPLENBQUMsVUFBVUMsQ0FBQyxFQUFFO01BQzNDQSxDQUFDLENBQUNYLE1BQU0sR0FBR00sZUFBZTtJQUM1QixDQUFDLENBQUM7RUFDSixDQUFDLEVBQUVsQixLQUFLLENBQUM7QUFDWCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXHBhc2NhbGlnby5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBwYXNjYWxpZ29cbnBhc2NhbGlnby5kaXNwbGF5TmFtZSA9ICdwYXNjYWxpZ28nXG5wYXNjYWxpZ28uYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBwYXNjYWxpZ28oUHJpc20pIHtcbiAgOyhmdW5jdGlvbiAoUHJpc20pIHtcbiAgICAvLyBQYXNjYWxpZ28gaXMgYSBsYXllciAyIHNtYXJ0IGNvbnRyYWN0IGxhbmd1YWdlIGZvciB0aGUgdGV6b3MgYmxvY2tjaGFpblxuICAgIHZhciBicmFjZXMgPSAvXFwoKD86W14oKV18XFwoKD86W14oKV18XFwoW14oKV0qXFwpKSpcXCkpKlxcKS8uc291cmNlXG4gICAgdmFyIHR5cGUgPSAvKD86XFxiXFx3Kyg/OjxicmFjZXM+KT98PGJyYWNlcz4pLy5zb3VyY2UucmVwbGFjZShcbiAgICAgIC88YnJhY2VzPi9nLFxuICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gYnJhY2VzXG4gICAgICB9XG4gICAgKVxuICAgIHZhciBwYXNjYWxpZ28gPSAoUHJpc20ubGFuZ3VhZ2VzLnBhc2NhbGlnbyA9IHtcbiAgICAgIGNvbW1lbnQ6IC9cXChcXCpbXFxzXFxTXSs/XFwqXFwpfFxcL1xcLy4qLyxcbiAgICAgIHN0cmluZzoge1xuICAgICAgICBwYXR0ZXJuOiAvKFtcIidgXSkoPzpcXFxcW1xcc1xcU118KD8hXFwxKVteXFxcXF0pKlxcMXxcXF5bYS16XS9pLFxuICAgICAgICBncmVlZHk6IHRydWVcbiAgICAgIH0sXG4gICAgICAnY2xhc3MtbmFtZSc6IFtcbiAgICAgICAge1xuICAgICAgICAgIHBhdHRlcm46IFJlZ0V4cChcbiAgICAgICAgICAgIC8oXFxidHlwZVxccytcXHcrXFxzK2lzXFxzKyk8dHlwZT4vLnNvdXJjZS5yZXBsYWNlKFxuICAgICAgICAgICAgICAvPHR5cGU+L2csXG4gICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHlwZVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgJ2knXG4gICAgICAgICAgKSxcbiAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAgIGluc2lkZTogbnVsbCAvLyBzZWUgYmVsb3dcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHBhdHRlcm46IFJlZ0V4cChcbiAgICAgICAgICAgIC88dHlwZT4oPz1cXHMraXNcXGIpLy5zb3VyY2UucmVwbGFjZSgvPHR5cGU+L2csIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHR5cGVcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgJ2knXG4gICAgICAgICAgKSxcbiAgICAgICAgICBpbnNpZGU6IG51bGwgLy8gc2VlIGJlbG93XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwYXR0ZXJuOiBSZWdFeHAoXG4gICAgICAgICAgICAvKDpcXHMqKTx0eXBlPi8uc291cmNlLnJlcGxhY2UoLzx0eXBlPi9nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0eXBlXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICksXG4gICAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgICBpbnNpZGU6IG51bGwgLy8gc2VlIGJlbG93XG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBrZXl3b3JkOiB7XG4gICAgICAgIHBhdHRlcm46XG4gICAgICAgICAgLyhefFteJl0pXFxiKD86YmVnaW58YmxvY2t8Y2FzZXxjb25zdHxlbHNlfGVuZHxmYWlsfGZvcnxmcm9tfGZ1bmN0aW9ufGlmfGlzfG5pbHxvZnxyZW1vdmV8cmV0dXJufHNraXB8dGhlbnx0eXBlfHZhcnx3aGlsZXx3aXRoKVxcYi9pLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICB9LFxuICAgICAgYm9vbGVhbjoge1xuICAgICAgICBwYXR0ZXJuOiAvKF58W14mXSlcXGIoPzpGYWxzZXxUcnVlKVxcYi9pLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICB9LFxuICAgICAgYnVpbHRpbjoge1xuICAgICAgICBwYXR0ZXJuOiAvKF58W14mXSlcXGIoPzpib29sfGludHxsaXN0fG1hcHxuYXR8cmVjb3JkfHN0cmluZ3x1bml0KVxcYi9pLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICB9LFxuICAgICAgZnVuY3Rpb246IC9cXGJcXHcrKD89XFxzKlxcKCkvLFxuICAgICAgbnVtYmVyOiBbXG4gICAgICAgIC8vIEhleGFkZWNpbWFsLCBvY3RhbCBhbmQgYmluYXJ5XG4gICAgICAgIC8lWzAxXSt8JlswLTddK3xcXCRbYS1mXFxkXSsvaSwgLy8gRGVjaW1hbFxuICAgICAgICAvXFxiXFxkKyg/OlxcLlxcZCspPyg/OmVbKy1dP1xcZCspPyg/Om10enxuKT8vaVxuICAgICAgXSxcbiAgICAgIG9wZXJhdG9yOlxuICAgICAgICAvLT58PVxcLz18XFwuXFwufFxcKlxcKnw6PXw8Wzw9Pl0/fD5bPj1dP3xbK1xcLSpcXC9dPT98W0BePXxdfFxcYig/OmFuZHxtb2R8b3IpXFxiLyxcbiAgICAgIHB1bmN0dWF0aW9uOiAvXFwoXFwufFxcLlxcKXxbKClcXFtcXF06Oywue31dL1xuICAgIH0pXG4gICAgdmFyIGNsYXNzTmFtZUluc2lkZSA9IFtcbiAgICAgICdjb21tZW50JyxcbiAgICAgICdrZXl3b3JkJyxcbiAgICAgICdidWlsdGluJyxcbiAgICAgICdvcGVyYXRvcicsXG4gICAgICAncHVuY3R1YXRpb24nXG4gICAgXS5yZWR1Y2UoZnVuY3Rpb24gKGFjY3VtLCBrZXkpIHtcbiAgICAgIGFjY3VtW2tleV0gPSBwYXNjYWxpZ29ba2V5XVxuICAgICAgcmV0dXJuIGFjY3VtXG4gICAgfSwge30pXG4gICAgcGFzY2FsaWdvWydjbGFzcy1uYW1lJ10uZm9yRWFjaChmdW5jdGlvbiAocCkge1xuICAgICAgcC5pbnNpZGUgPSBjbGFzc05hbWVJbnNpZGVcbiAgICB9KVxuICB9KShQcmlzbSlcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicGFzY2FsaWdvIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJicmFjZXMiLCJzb3VyY2UiLCJ0eXBlIiwicmVwbGFjZSIsImxhbmd1YWdlcyIsImNvbW1lbnQiLCJzdHJpbmciLCJwYXR0ZXJuIiwiZ3JlZWR5IiwiUmVnRXhwIiwibG9va2JlaGluZCIsImluc2lkZSIsImtleXdvcmQiLCJidWlsdGluIiwibnVtYmVyIiwib3BlcmF0b3IiLCJwdW5jdHVhdGlvbiIsImNsYXNzTmFtZUluc2lkZSIsInJlZHVjZSIsImFjY3VtIiwia2V5IiwiZm9yRWFjaCIsInAiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/pascaligo.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/pcaxis.js":
/*!***********************************************!*\
  !*** ./node_modules/refractor/lang/pcaxis.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = pcaxis;\npcaxis.displayName = 'pcaxis';\npcaxis.aliases = ['px'];\nfunction pcaxis(Prism) {\n  Prism.languages.pcaxis = {\n    string: /\"[^\"]*\"/,\n    keyword: {\n      pattern: /((?:^|;)\\s*)[-A-Z\\d]+(?:\\s*\\[[-\\w]+\\])?(?:\\s*\\(\"[^\"]*\"(?:,\\s*\"[^\"]*\")*\\))?(?=\\s*=)/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        keyword: /^[-A-Z\\d]+/,\n        language: {\n          pattern: /^(\\s*)\\[[-\\w]+\\]/,\n          lookbehind: true,\n          inside: {\n            punctuation: /^\\[|\\]$/,\n            property: /[-\\w]+/\n          }\n        },\n        'sub-key': {\n          pattern: /^(\\s*)\\S[\\s\\S]*/,\n          lookbehind: true,\n          inside: {\n            parameter: {\n              pattern: /\"[^\"]*\"/,\n              alias: 'property'\n            },\n            punctuation: /^\\(|\\)$|,/\n          }\n        }\n      }\n    },\n    operator: /=/,\n    tlist: {\n      pattern: /TLIST\\s*\\(\\s*\\w+(?:(?:\\s*,\\s*\"[^\"]*\")+|\\s*,\\s*\"[^\"]*\"-\"[^\"]*\")?\\s*\\)/,\n      greedy: true,\n      inside: {\n        \"function\": /^TLIST/,\n        property: {\n          pattern: /^(\\s*\\(\\s*)\\w+/,\n          lookbehind: true\n        },\n        string: /\"[^\"]*\"/,\n        punctuation: /[(),]/,\n        operator: /-/\n      }\n    },\n    punctuation: /[;,]/,\n    number: {\n      pattern: /(^|\\s)\\d+(?:\\.\\d+)?(?!\\S)/,\n      lookbehind: true\n    },\n    \"boolean\": /NO|YES/\n  };\n  Prism.languages.px = Prism.languages.pcaxis;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvcGNheGlzLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsTUFBTTtBQUN2QkEsTUFBTSxDQUFDQyxXQUFXLEdBQUcsUUFBUTtBQUM3QkQsTUFBTSxDQUFDRSxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUM7QUFDdkIsU0FBU0YsTUFBTUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ3JCQSxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osTUFBTSxHQUFHO0lBQ3ZCSyxNQUFNLEVBQUUsU0FBUztJQUNqQkMsT0FBTyxFQUFFO01BQ1BDLE9BQU8sRUFDTCxvRkFBb0Y7TUFDdEZDLFVBQVUsRUFBRSxJQUFJO01BQ2hCQyxNQUFNLEVBQUUsSUFBSTtNQUNaQyxNQUFNLEVBQUU7UUFDTkosT0FBTyxFQUFFLFlBQVk7UUFDckJLLFFBQVEsRUFBRTtVQUNSSixPQUFPLEVBQUUsa0JBQWtCO1VBQzNCQyxVQUFVLEVBQUUsSUFBSTtVQUNoQkUsTUFBTSxFQUFFO1lBQ05FLFdBQVcsRUFBRSxTQUFTO1lBQ3RCQyxRQUFRLEVBQUU7VUFDWjtRQUNGLENBQUM7UUFDRCxTQUFTLEVBQUU7VUFDVE4sT0FBTyxFQUFFLGlCQUFpQjtVQUMxQkMsVUFBVSxFQUFFLElBQUk7VUFDaEJFLE1BQU0sRUFBRTtZQUNOSSxTQUFTLEVBQUU7Y0FDVFAsT0FBTyxFQUFFLFNBQVM7Y0FDbEJRLEtBQUssRUFBRTtZQUNULENBQUM7WUFDREgsV0FBVyxFQUFFO1VBQ2Y7UUFDRjtNQUNGO0lBQ0YsQ0FBQztJQUNESSxRQUFRLEVBQUUsR0FBRztJQUNiQyxLQUFLLEVBQUU7TUFDTFYsT0FBTyxFQUNMLHNFQUFzRTtNQUN4RUUsTUFBTSxFQUFFLElBQUk7TUFDWkMsTUFBTSxFQUFFO1FBQ04sWUFBVSxRQUFRO1FBQ2xCRyxRQUFRLEVBQUU7VUFDUk4sT0FBTyxFQUFFLGdCQUFnQjtVQUN6QkMsVUFBVSxFQUFFO1FBQ2QsQ0FBQztRQUNESCxNQUFNLEVBQUUsU0FBUztRQUNqQk8sV0FBVyxFQUFFLE9BQU87UUFDcEJJLFFBQVEsRUFBRTtNQUNaO0lBQ0YsQ0FBQztJQUNESixXQUFXLEVBQUUsTUFBTTtJQUNuQk0sTUFBTSxFQUFFO01BQ05YLE9BQU8sRUFBRSwyQkFBMkI7TUFDcENDLFVBQVUsRUFBRTtJQUNkLENBQUM7SUFDRCxXQUFTO0VBQ1gsQ0FBQztFQUNETCxLQUFLLENBQUNDLFNBQVMsQ0FBQ2UsRUFBRSxHQUFHaEIsS0FBSyxDQUFDQyxTQUFTLENBQUNKLE1BQU07QUFDN0MiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxwY2F4aXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gcGNheGlzXG5wY2F4aXMuZGlzcGxheU5hbWUgPSAncGNheGlzJ1xucGNheGlzLmFsaWFzZXMgPSBbJ3B4J11cbmZ1bmN0aW9uIHBjYXhpcyhQcmlzbSkge1xuICBQcmlzbS5sYW5ndWFnZXMucGNheGlzID0ge1xuICAgIHN0cmluZzogL1wiW15cIl0qXCIvLFxuICAgIGtleXdvcmQ6IHtcbiAgICAgIHBhdHRlcm46XG4gICAgICAgIC8oKD86Xnw7KVxccyopWy1BLVpcXGRdKyg/OlxccypcXFtbLVxcd10rXFxdKT8oPzpcXHMqXFwoXCJbXlwiXSpcIig/OixcXHMqXCJbXlwiXSpcIikqXFwpKT8oPz1cXHMqPSkvLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgIGluc2lkZToge1xuICAgICAgICBrZXl3b3JkOiAvXlstQS1aXFxkXSsvLFxuICAgICAgICBsYW5ndWFnZToge1xuICAgICAgICAgIHBhdHRlcm46IC9eKFxccyopXFxbWy1cXHddK1xcXS8sXG4gICAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICAgIHB1bmN0dWF0aW9uOiAvXlxcW3xcXF0kLyxcbiAgICAgICAgICAgIHByb3BlcnR5OiAvWy1cXHddKy9cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICdzdWIta2V5Jzoge1xuICAgICAgICAgIHBhdHRlcm46IC9eKFxccyopXFxTW1xcc1xcU10qLyxcbiAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAgIGluc2lkZToge1xuICAgICAgICAgICAgcGFyYW1ldGVyOiB7XG4gICAgICAgICAgICAgIHBhdHRlcm46IC9cIlteXCJdKlwiLyxcbiAgICAgICAgICAgICAgYWxpYXM6ICdwcm9wZXJ0eSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwdW5jdHVhdGlvbjogL15cXCh8XFwpJHwsL1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgb3BlcmF0b3I6IC89LyxcbiAgICB0bGlzdDoge1xuICAgICAgcGF0dGVybjpcbiAgICAgICAgL1RMSVNUXFxzKlxcKFxccypcXHcrKD86KD86XFxzKixcXHMqXCJbXlwiXSpcIikrfFxccyosXFxzKlwiW15cIl0qXCItXCJbXlwiXSpcIik/XFxzKlxcKS8sXG4gICAgICBncmVlZHk6IHRydWUsXG4gICAgICBpbnNpZGU6IHtcbiAgICAgICAgZnVuY3Rpb246IC9eVExJU1QvLFxuICAgICAgICBwcm9wZXJ0eToge1xuICAgICAgICAgIHBhdHRlcm46IC9eKFxccypcXChcXHMqKVxcdysvLFxuICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgc3RyaW5nOiAvXCJbXlwiXSpcIi8sXG4gICAgICAgIHB1bmN0dWF0aW9uOiAvWygpLF0vLFxuICAgICAgICBvcGVyYXRvcjogLy0vXG4gICAgICB9XG4gICAgfSxcbiAgICBwdW5jdHVhdGlvbjogL1s7LF0vLFxuICAgIG51bWJlcjoge1xuICAgICAgcGF0dGVybjogLyhefFxccylcXGQrKD86XFwuXFxkKyk/KD8hXFxTKS8sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgfSxcbiAgICBib29sZWFuOiAvTk98WUVTL1xuICB9XG4gIFByaXNtLmxhbmd1YWdlcy5weCA9IFByaXNtLmxhbmd1YWdlcy5wY2F4aXNcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicGNheGlzIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJzdHJpbmciLCJrZXl3b3JkIiwicGF0dGVybiIsImxvb2tiZWhpbmQiLCJncmVlZHkiLCJpbnNpZGUiLCJsYW5ndWFnZSIsInB1bmN0dWF0aW9uIiwicHJvcGVydHkiLCJwYXJhbWV0ZXIiLCJhbGlhcyIsIm9wZXJhdG9yIiwidGxpc3QiLCJudW1iZXIiLCJweCJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/pcaxis.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/peoplecode.js":
/*!***************************************************!*\
  !*** ./node_modules/refractor/lang/peoplecode.js ***!
  \***************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = peoplecode;\npeoplecode.displayName = 'peoplecode';\npeoplecode.aliases = ['pcode'];\nfunction peoplecode(Prism) {\n  Prism.languages.peoplecode = {\n    comment: RegExp([\n    // C-style multiline comments\n    /\\/\\*[\\s\\S]*?\\*\\//.source,\n    // REM comments\n    /\\bREM[^;]*;/.source,\n    // Nested <* *> comments\n    /<\\*(?:[^<*]|\\*(?!>)|<(?!\\*)|<\\*(?:(?!\\*>)[\\s\\S])*\\*>)*\\*>/.source,\n    // /+ +/ comments\n    /\\/\\+[\\s\\S]*?\\+\\//.source].join('|')),\n    string: {\n      pattern: /'(?:''|[^'\\r\\n])*'(?!')|\"(?:\"\"|[^\"\\r\\n])*\"(?!\")/,\n      greedy: true\n    },\n    variable: /%\\w+/,\n    'function-definition': {\n      pattern: /((?:^|[^\\w-])(?:function|method)\\s+)\\w+/i,\n      lookbehind: true,\n      alias: 'function'\n    },\n    'class-name': {\n      pattern: /((?:^|[^-\\w])(?:as|catch|class|component|create|extends|global|implements|instance|local|of|property|returns)\\s+)\\w+(?::\\w+)*/i,\n      lookbehind: true,\n      inside: {\n        punctuation: /:/\n      }\n    },\n    keyword: /\\b(?:abstract|alias|as|catch|class|component|constant|create|declare|else|end-(?:class|evaluate|for|function|get|if|method|set|try|while)|evaluate|extends|for|function|get|global|if|implements|import|instance|library|local|method|null|of|out|peopleCode|private|program|property|protected|readonly|ref|repeat|returns?|set|step|then|throw|to|try|until|value|when(?:-other)?|while)\\b/i,\n    'operator-keyword': {\n      pattern: /\\b(?:and|not|or)\\b/i,\n      alias: 'operator'\n    },\n    \"function\": /[_a-z]\\w*(?=\\s*\\()/i,\n    \"boolean\": /\\b(?:false|true)\\b/i,\n    number: /\\b\\d+(?:\\.\\d+)?\\b/,\n    operator: /<>|[<>]=?|!=|\\*\\*|[-+*/|=@]/,\n    punctuation: /[:.;,()[\\]]/\n  };\n  Prism.languages.pcode = Prism.languages.peoplecode;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvcGVvcGxlY29kZS5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLFVBQVU7QUFDM0JBLFVBQVUsQ0FBQ0MsV0FBVyxHQUFHLFlBQVk7QUFDckNELFVBQVUsQ0FBQ0UsT0FBTyxHQUFHLENBQUMsT0FBTyxDQUFDO0FBQzlCLFNBQVNGLFVBQVVBLENBQUNHLEtBQUssRUFBRTtFQUN6QkEsS0FBSyxDQUFDQyxTQUFTLENBQUNKLFVBQVUsR0FBRztJQUMzQkssT0FBTyxFQUFFQyxNQUFNLENBQ2I7SUFDRTtJQUNBLGtCQUFrQixDQUFDQyxNQUFNO0lBQUU7SUFDM0IsYUFBYSxDQUFDQSxNQUFNO0lBQUU7SUFDdEIsMkRBQTJELENBQUNBLE1BQU07SUFBRTtJQUNwRSxrQkFBa0IsQ0FBQ0EsTUFBTSxDQUMxQixDQUFDQyxJQUFJLENBQUMsR0FBRyxDQUNaLENBQUM7SUFDREMsTUFBTSxFQUFFO01BQ05DLE9BQU8sRUFBRSxpREFBaUQ7TUFDMURDLE1BQU0sRUFBRTtJQUNWLENBQUM7SUFDREMsUUFBUSxFQUFFLE1BQU07SUFDaEIscUJBQXFCLEVBQUU7TUFDckJGLE9BQU8sRUFBRSwwQ0FBMEM7TUFDbkRHLFVBQVUsRUFBRSxJQUFJO01BQ2hCQyxLQUFLLEVBQUU7SUFDVCxDQUFDO0lBQ0QsWUFBWSxFQUFFO01BQ1pKLE9BQU8sRUFDTCxnSUFBZ0k7TUFDbElHLFVBQVUsRUFBRSxJQUFJO01BQ2hCRSxNQUFNLEVBQUU7UUFDTkMsV0FBVyxFQUFFO01BQ2Y7SUFDRixDQUFDO0lBQ0RDLE9BQU8sRUFDTCwrWEFBK1g7SUFDalksa0JBQWtCLEVBQUU7TUFDbEJQLE9BQU8sRUFBRSxxQkFBcUI7TUFDOUJJLEtBQUssRUFBRTtJQUNULENBQUM7SUFDRCxZQUFVLHFCQUFxQjtJQUMvQixXQUFTLHFCQUFxQjtJQUM5QkksTUFBTSxFQUFFLG1CQUFtQjtJQUMzQkMsUUFBUSxFQUFFLDZCQUE2QjtJQUN2Q0gsV0FBVyxFQUFFO0VBQ2YsQ0FBQztFQUNEYixLQUFLLENBQUNDLFNBQVMsQ0FBQ2dCLEtBQUssR0FBR2pCLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixVQUFVO0FBQ3BEIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xccGVvcGxlY29kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBwZW9wbGVjb2RlXG5wZW9wbGVjb2RlLmRpc3BsYXlOYW1lID0gJ3Blb3BsZWNvZGUnXG5wZW9wbGVjb2RlLmFsaWFzZXMgPSBbJ3Bjb2RlJ11cbmZ1bmN0aW9uIHBlb3BsZWNvZGUoUHJpc20pIHtcbiAgUHJpc20ubGFuZ3VhZ2VzLnBlb3BsZWNvZGUgPSB7XG4gICAgY29tbWVudDogUmVnRXhwKFxuICAgICAgW1xuICAgICAgICAvLyBDLXN0eWxlIG11bHRpbGluZSBjb21tZW50c1xuICAgICAgICAvXFwvXFwqW1xcc1xcU10qP1xcKlxcLy8uc291cmNlLCAvLyBSRU0gY29tbWVudHNcbiAgICAgICAgL1xcYlJFTVteO10qOy8uc291cmNlLCAvLyBOZXN0ZWQgPCogKj4gY29tbWVudHNcbiAgICAgICAgLzxcXCooPzpbXjwqXXxcXCooPyE+KXw8KD8hXFwqKXw8XFwqKD86KD8hXFwqPilbXFxzXFxTXSkqXFwqPikqXFwqPi8uc291cmNlLCAvLyAvKyArLyBjb21tZW50c1xuICAgICAgICAvXFwvXFwrW1xcc1xcU10qP1xcK1xcLy8uc291cmNlXG4gICAgICBdLmpvaW4oJ3wnKVxuICAgICksXG4gICAgc3RyaW5nOiB7XG4gICAgICBwYXR0ZXJuOiAvJyg/OicnfFteJ1xcclxcbl0pKicoPyEnKXxcIig/OlwiXCJ8W15cIlxcclxcbl0pKlwiKD8hXCIpLyxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgdmFyaWFibGU6IC8lXFx3Ky8sXG4gICAgJ2Z1bmN0aW9uLWRlZmluaXRpb24nOiB7XG4gICAgICBwYXR0ZXJuOiAvKCg/Ol58W15cXHctXSkoPzpmdW5jdGlvbnxtZXRob2QpXFxzKylcXHcrL2ksXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgYWxpYXM6ICdmdW5jdGlvbidcbiAgICB9LFxuICAgICdjbGFzcy1uYW1lJzoge1xuICAgICAgcGF0dGVybjpcbiAgICAgICAgLygoPzpefFteLVxcd10pKD86YXN8Y2F0Y2h8Y2xhc3N8Y29tcG9uZW50fGNyZWF0ZXxleHRlbmRzfGdsb2JhbHxpbXBsZW1lbnRzfGluc3RhbmNlfGxvY2FsfG9mfHByb3BlcnR5fHJldHVybnMpXFxzKylcXHcrKD86OlxcdyspKi9pLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGluc2lkZToge1xuICAgICAgICBwdW5jdHVhdGlvbjogLzovXG4gICAgICB9XG4gICAgfSxcbiAgICBrZXl3b3JkOlxuICAgICAgL1xcYig/OmFic3RyYWN0fGFsaWFzfGFzfGNhdGNofGNsYXNzfGNvbXBvbmVudHxjb25zdGFudHxjcmVhdGV8ZGVjbGFyZXxlbHNlfGVuZC0oPzpjbGFzc3xldmFsdWF0ZXxmb3J8ZnVuY3Rpb258Z2V0fGlmfG1ldGhvZHxzZXR8dHJ5fHdoaWxlKXxldmFsdWF0ZXxleHRlbmRzfGZvcnxmdW5jdGlvbnxnZXR8Z2xvYmFsfGlmfGltcGxlbWVudHN8aW1wb3J0fGluc3RhbmNlfGxpYnJhcnl8bG9jYWx8bWV0aG9kfG51bGx8b2Z8b3V0fHBlb3BsZUNvZGV8cHJpdmF0ZXxwcm9ncmFtfHByb3BlcnR5fHByb3RlY3RlZHxyZWFkb25seXxyZWZ8cmVwZWF0fHJldHVybnM/fHNldHxzdGVwfHRoZW58dGhyb3d8dG98dHJ5fHVudGlsfHZhbHVlfHdoZW4oPzotb3RoZXIpP3x3aGlsZSlcXGIvaSxcbiAgICAnb3BlcmF0b3Ita2V5d29yZCc6IHtcbiAgICAgIHBhdHRlcm46IC9cXGIoPzphbmR8bm90fG9yKVxcYi9pLFxuICAgICAgYWxpYXM6ICdvcGVyYXRvcidcbiAgICB9LFxuICAgIGZ1bmN0aW9uOiAvW19hLXpdXFx3Kig/PVxccypcXCgpL2ksXG4gICAgYm9vbGVhbjogL1xcYig/OmZhbHNlfHRydWUpXFxiL2ksXG4gICAgbnVtYmVyOiAvXFxiXFxkKyg/OlxcLlxcZCspP1xcYi8sXG4gICAgb3BlcmF0b3I6IC88PnxbPD5dPT98IT18XFwqXFwqfFstKyovfD1AXS8sXG4gICAgcHVuY3R1YXRpb246IC9bOi47LCgpW1xcXV0vXG4gIH1cbiAgUHJpc20ubGFuZ3VhZ2VzLnBjb2RlID0gUHJpc20ubGFuZ3VhZ2VzLnBlb3BsZWNvZGVcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicGVvcGxlY29kZSIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwiY29tbWVudCIsIlJlZ0V4cCIsInNvdXJjZSIsImpvaW4iLCJzdHJpbmciLCJwYXR0ZXJuIiwiZ3JlZWR5IiwidmFyaWFibGUiLCJsb29rYmVoaW5kIiwiYWxpYXMiLCJpbnNpZGUiLCJwdW5jdHVhdGlvbiIsImtleXdvcmQiLCJudW1iZXIiLCJvcGVyYXRvciIsInBjb2RlIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/peoplecode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/perl.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/perl.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = perl;\nperl.displayName = 'perl';\nperl.aliases = [];\nfunction perl(Prism) {\n  ;\n  (function (Prism) {\n    var brackets = /(?:\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)|\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}|\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\]|<(?:[^<>\\\\]|\\\\[\\s\\S])*>)/.source;\n    Prism.languages.perl = {\n      comment: [{\n        // POD\n        pattern: /(^\\s*)=\\w[\\s\\S]*?=cut.*/m,\n        lookbehind: true,\n        greedy: true\n      }, {\n        pattern: /(^|[^\\\\$])#.*/,\n        lookbehind: true,\n        greedy: true\n      }],\n      // TODO Could be nice to handle Heredoc too.\n      string: [{\n        pattern: RegExp(/\\b(?:q|qq|qw|qx)(?![a-zA-Z0-9])\\s*/.source + '(?:' + [\n        // q/.../\n        /([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source,\n        // q a...a\n        // eslint-disable-next-line regexp/strict\n        /([a-zA-Z0-9])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2/.source,\n        // q(...)\n        // q{...}\n        // q[...]\n        // q<...>\n        brackets].join('|') + ')'),\n        greedy: true\n      },\n      // \"...\", `...`\n      {\n        pattern: /(\"|`)(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n        greedy: true\n      },\n      // '...'\n      // FIXME Multi-line single-quoted strings are not supported as they would break variables containing '\n      {\n        pattern: /'(?:[^'\\\\\\r\\n]|\\\\.)*'/,\n        greedy: true\n      }],\n      regex: [{\n        pattern: RegExp(/\\b(?:m|qr)(?![a-zA-Z0-9])\\s*/.source + '(?:' + [\n        // m/.../\n        /([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source,\n        // m a...a\n        // eslint-disable-next-line regexp/strict\n        /([a-zA-Z0-9])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2/.source,\n        // m(...)\n        // m{...}\n        // m[...]\n        // m<...>\n        brackets].join('|') + ')' + /[msixpodualngc]*/.source),\n        greedy: true\n      },\n      // The lookbehinds prevent -s from breaking\n      {\n        pattern: RegExp(/(^|[^-])\\b(?:s|tr|y)(?![a-zA-Z0-9])\\s*/.source + '(?:' + [\n        // s/.../.../\n        // eslint-disable-next-line regexp/strict\n        /([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2/.source,\n        // s a...a...a\n        // eslint-disable-next-line regexp/strict\n        /([a-zA-Z0-9])(?:(?!\\3)[^\\\\]|\\\\[\\s\\S])*\\3(?:(?!\\3)[^\\\\]|\\\\[\\s\\S])*\\3/.source,\n        // s(...)(...)\n        // s{...}{...}\n        // s[...][...]\n        // s<...><...>\n        // s(...)[...]\n        brackets + /\\s*/.source + brackets].join('|') + ')' + /[msixpodualngcer]*/.source),\n        lookbehind: true,\n        greedy: true\n      },\n      // /.../\n      // The look-ahead tries to prevent two divisions on\n      // the same line from being highlighted as regex.\n      // This does not support multi-line regex.\n      {\n        pattern: /\\/(?:[^\\/\\\\\\r\\n]|\\\\.)*\\/[msixpodualngc]*(?=\\s*(?:$|[\\r\\n,.;})&|\\-+*~<>!?^]|(?:and|cmp|eq|ge|gt|le|lt|ne|not|or|x|xor)\\b))/,\n        greedy: true\n      }],\n      // FIXME Not sure about the handling of ::, ', and #\n      variable: [\n      // ${^POSTMATCH}\n      /[&*$@%]\\{\\^[A-Z]+\\}/,\n      // $^V\n      /[&*$@%]\\^[A-Z_]/,\n      // ${...}\n      /[&*$@%]#?(?=\\{)/,\n      // $foo\n      /[&*$@%]#?(?:(?:::)*'?(?!\\d)[\\w$]+(?![\\w$]))+(?:::)*/,\n      // $1\n      /[&*$@%]\\d+/,\n      // $_, @_, %!\n      // The negative lookahead prevents from breaking the %= operator\n      /(?!%=)[$@%][!\"#$%&'()*+,\\-.\\/:;<=>?@[\\\\\\]^_`{|}~]/],\n      filehandle: {\n        // <>, <FOO>, _\n        pattern: /<(?![<=])\\S*?>|\\b_\\b/,\n        alias: 'symbol'\n      },\n      'v-string': {\n        // v1.2, 1.2.3\n        pattern: /v\\d+(?:\\.\\d+)*|\\d+(?:\\.\\d+){2,}/,\n        alias: 'string'\n      },\n      \"function\": {\n        pattern: /(\\bsub[ \\t]+)\\w+/,\n        lookbehind: true\n      },\n      keyword: /\\b(?:any|break|continue|default|delete|die|do|else|elsif|eval|for|foreach|given|goto|if|last|local|my|next|our|package|print|redo|require|return|say|state|sub|switch|undef|unless|until|use|when|while)\\b/,\n      number: /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0b[01](?:_?[01])*|(?:(?:\\d(?:_?\\d)*)?\\.)?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)\\b/,\n      operator: /-[rwxoRWXOezsfdlpSbctugkTBMAC]\\b|\\+[+=]?|-[-=>]?|\\*\\*?=?|\\/\\/?=?|=[=~>]?|~[~=]?|\\|\\|?=?|&&?=?|<(?:=>?|<=?)?|>>?=?|![~=]?|[%^]=?|\\.(?:=|\\.\\.?)?|[\\\\?]|\\bx(?:=|\\b)|\\b(?:and|cmp|eq|ge|gt|le|lt|ne|not|or|xor)\\b/,\n      punctuation: /[{}[\\];(),:]/\n    };\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/perl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/php-extras.js":
/*!***************************************************!*\
  !*** ./node_modules/refractor/lang/php-extras.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar refractorPhp = __webpack_require__(/*! ./php.js */ \"(ssr)/./node_modules/refractor/lang/php.js\");\nmodule.exports = phpExtras;\nphpExtras.displayName = 'phpExtras';\nphpExtras.aliases = [];\nfunction phpExtras(Prism) {\n  Prism.register(refractorPhp);\n  Prism.languages.insertBefore('php', 'variable', {\n    \"this\": {\n      pattern: /\\$this\\b/,\n      alias: 'keyword'\n    },\n    global: /\\$(?:GLOBALS|HTTP_RAW_POST_DATA|_(?:COOKIE|ENV|FILES|GET|POST|REQUEST|SERVER|SESSION)|argc|argv|http_response_header|php_errormsg)\\b/,\n    scope: {\n      pattern: /\\b[\\w\\\\]+::/,\n      inside: {\n        keyword: /\\b(?:parent|self|static)\\b/,\n        punctuation: /::|\\\\/\n      }\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvcGhwLWV4dHJhcy5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFDWixJQUFJQSxZQUFZLEdBQUdDLG1CQUFPLENBQUMsNERBQVUsQ0FBQztBQUN0Q0MsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLFNBQVM7QUFDMUJBLFNBQVMsQ0FBQ0MsV0FBVyxHQUFHLFdBQVc7QUFDbkNELFNBQVMsQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDdEIsU0FBU0YsU0FBU0EsQ0FBQ0csS0FBSyxFQUFFO0VBQ3hCQSxLQUFLLENBQUNDLFFBQVEsQ0FBQ1IsWUFBWSxDQUFDO0VBQzVCTyxLQUFLLENBQUNFLFNBQVMsQ0FBQ0MsWUFBWSxDQUFDLEtBQUssRUFBRSxVQUFVLEVBQUU7SUFDOUMsUUFBTTtNQUNKQyxPQUFPLEVBQUUsVUFBVTtNQUNuQkMsS0FBSyxFQUFFO0lBQ1QsQ0FBQztJQUNEQyxNQUFNLEVBQ0osc0lBQXNJO0lBQ3hJQyxLQUFLLEVBQUU7TUFDTEgsT0FBTyxFQUFFLGFBQWE7TUFDdEJJLE1BQU0sRUFBRTtRQUNOQyxPQUFPLEVBQUUsNEJBQTRCO1FBQ3JDQyxXQUFXLEVBQUU7TUFDZjtJQUNGO0VBQ0YsQ0FBQyxDQUFDO0FBQ0oiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxwaHAtZXh0cmFzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xudmFyIHJlZnJhY3RvclBocCA9IHJlcXVpcmUoJy4vcGhwLmpzJylcbm1vZHVsZS5leHBvcnRzID0gcGhwRXh0cmFzXG5waHBFeHRyYXMuZGlzcGxheU5hbWUgPSAncGhwRXh0cmFzJ1xucGhwRXh0cmFzLmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24gcGhwRXh0cmFzKFByaXNtKSB7XG4gIFByaXNtLnJlZ2lzdGVyKHJlZnJhY3RvclBocClcbiAgUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgncGhwJywgJ3ZhcmlhYmxlJywge1xuICAgIHRoaXM6IHtcbiAgICAgIHBhdHRlcm46IC9cXCR0aGlzXFxiLyxcbiAgICAgIGFsaWFzOiAna2V5d29yZCdcbiAgICB9LFxuICAgIGdsb2JhbDpcbiAgICAgIC9cXCQoPzpHTE9CQUxTfEhUVFBfUkFXX1BPU1RfREFUQXxfKD86Q09PS0lFfEVOVnxGSUxFU3xHRVR8UE9TVHxSRVFVRVNUfFNFUlZFUnxTRVNTSU9OKXxhcmdjfGFyZ3Z8aHR0cF9yZXNwb25zZV9oZWFkZXJ8cGhwX2Vycm9ybXNnKVxcYi8sXG4gICAgc2NvcGU6IHtcbiAgICAgIHBhdHRlcm46IC9cXGJbXFx3XFxcXF0rOjovLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgIGtleXdvcmQ6IC9cXGIoPzpwYXJlbnR8c2VsZnxzdGF0aWMpXFxiLyxcbiAgICAgICAgcHVuY3R1YXRpb246IC86OnxcXFxcL1xuICAgICAgfVxuICAgIH1cbiAgfSlcbn1cbiJdLCJuYW1lcyI6WyJyZWZyYWN0b3JQaHAiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsInBocEV4dHJhcyIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwicmVnaXN0ZXIiLCJsYW5ndWFnZXMiLCJpbnNlcnRCZWZvcmUiLCJwYXR0ZXJuIiwiYWxpYXMiLCJnbG9iYWwiLCJzY29wZSIsImluc2lkZSIsImtleXdvcmQiLCJwdW5jdHVhdGlvbiJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/php-extras.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/php.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/php.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar refractorMarkupTemplating = __webpack_require__(/*! ./markup-templating.js */ \"(ssr)/./node_modules/refractor/lang/markup-templating.js\");\nmodule.exports = php;\nphp.displayName = 'php';\nphp.aliases = [];\nfunction php(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  /**\n   * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n   * Modified by Miles Johnson: http://milesj.me\n   * Rewritten by Tom Pavelec\n   *\n   * Supports PHP 5.3 - 8.0\n   */;\n  (function (Prism) {\n    var comment = /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*|#(?!\\[).*/;\n    var constant = [{\n      pattern: /\\b(?:false|true)\\b/i,\n      alias: 'boolean'\n    }, {\n      pattern: /(::\\s*)\\b[a-z_]\\w*\\b(?!\\s*\\()/i,\n      greedy: true,\n      lookbehind: true\n    }, {\n      pattern: /(\\b(?:case|const)\\s+)\\b[a-z_]\\w*(?=\\s*[;=])/i,\n      greedy: true,\n      lookbehind: true\n    }, /\\b(?:null)\\b/i, /\\b[A-Z_][A-Z0-9_]*\\b(?!\\s*\\()/];\n    var number = /\\b0b[01]+(?:_[01]+)*\\b|\\b0o[0-7]+(?:_[0-7]+)*\\b|\\b0x[\\da-f]+(?:_[\\da-f]+)*\\b|(?:\\b\\d+(?:_\\d+)*\\.?(?:\\d+(?:_\\d+)*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i;\n    var operator = /<?=>|\\?\\?=?|\\.{3}|\\??->|[!=]=?=?|::|\\*\\*=?|--|\\+\\+|&&|\\|\\||<<|>>|[?~]|[/^|%*&<>.+-]=?/;\n    var punctuation = /[{}\\[\\](),:;]/;\n    Prism.languages.php = {\n      delimiter: {\n        pattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\n        alias: 'important'\n      },\n      comment: comment,\n      variable: /\\$+(?:\\w+\\b|(?=\\{))/,\n      \"package\": {\n        pattern: /(namespace\\s+|use\\s+(?:function\\s+)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      },\n      'class-name-definition': {\n        pattern: /(\\b(?:class|enum|interface|trait)\\s+)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n        lookbehind: true,\n        alias: 'class-name'\n      },\n      'function-definition': {\n        pattern: /(\\bfunction\\s+)[a-z_]\\w*(?=\\s*\\()/i,\n        lookbehind: true,\n        alias: 'function'\n      },\n      keyword: [{\n        pattern: /(\\(\\s*)\\b(?:array|bool|boolean|float|int|integer|object|string)\\b(?=\\s*\\))/i,\n        alias: 'type-casting',\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /([(,?]\\s*)\\b(?:array(?!\\s*\\()|bool|callable|(?:false|null)(?=\\s*\\|)|float|int|iterable|mixed|object|self|static|string)\\b(?=\\s*\\$)/i,\n        alias: 'type-hint',\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b(?:array(?!\\s*\\()|bool|callable|(?:false|null)(?=\\s*\\|)|float|int|iterable|mixed|object|self|static|string|void)\\b/i,\n        alias: 'return-type',\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /\\b(?:array(?!\\s*\\()|bool|float|int|iterable|mixed|object|string|void)\\b/i,\n        alias: 'type-declaration',\n        greedy: true\n      }, {\n        pattern: /(\\|\\s*)(?:false|null)\\b|\\b(?:false|null)(?=\\s*\\|)/i,\n        alias: 'type-declaration',\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /\\b(?:parent|self|static)(?=\\s*::)/i,\n        alias: 'static-context',\n        greedy: true\n      }, {\n        // yield from\n        pattern: /(\\byield\\s+)from\\b/i,\n        lookbehind: true\n      },\n      // `class` is always a keyword unlike other keywords\n      /\\bclass\\b/i, {\n        // https://www.php.net/manual/en/reserved.keywords.php\n        //\n        // keywords cannot be preceded by \"->\"\n        // the complex lookbehind means `(?<!(?:->|::)\\s*)`\n        pattern: /((?:^|[^\\s>:]|(?:^|[^-])>|(?:^|[^:]):)\\s*)\\b(?:abstract|and|array|as|break|callable|case|catch|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|enum|eval|exit|extends|final|finally|fn|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|match|namespace|new|or|parent|print|private|protected|public|require|require_once|return|self|static|switch|throw|trait|try|unset|use|var|while|xor|yield|__halt_compiler)\\b/i,\n        lookbehind: true\n      }],\n      'argument-name': {\n        pattern: /([(,]\\s+)\\b[a-z_]\\w*(?=\\s*:(?!:))/i,\n        lookbehind: true\n      },\n      'class-name': [{\n        pattern: /(\\b(?:extends|implements|instanceof|new(?!\\s+self|\\s+static))\\s+|\\bcatch\\s*\\()\\b[a-z_]\\w*(?!\\\\)\\b/i,\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /(\\|\\s*)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /\\b[a-z_]\\w*(?!\\\\)\\b(?=\\s*\\|)/i,\n        greedy: true\n      }, {\n        pattern: /(\\|\\s*)(?:\\\\?\\b[a-z_]\\w*)+\\b/i,\n        alias: 'class-name-fully-qualified',\n        greedy: true,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }, {\n        pattern: /(?:\\\\?\\b[a-z_]\\w*)+\\b(?=\\s*\\|)/i,\n        alias: 'class-name-fully-qualified',\n        greedy: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }, {\n        pattern: /(\\b(?:extends|implements|instanceof|new(?!\\s+self\\b|\\s+static\\b))\\s+|\\bcatch\\s*\\()(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n        alias: 'class-name-fully-qualified',\n        greedy: true,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }, {\n        pattern: /\\b[a-z_]\\w*(?=\\s*\\$)/i,\n        alias: 'type-declaration',\n        greedy: true\n      }, {\n        pattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,\n        alias: ['class-name-fully-qualified', 'type-declaration'],\n        greedy: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }, {\n        pattern: /\\b[a-z_]\\w*(?=\\s*::)/i,\n        alias: 'static-context',\n        greedy: true\n      }, {\n        pattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*::)/i,\n        alias: ['class-name-fully-qualified', 'static-context'],\n        greedy: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }, {\n        pattern: /([(,?]\\s*)[a-z_]\\w*(?=\\s*\\$)/i,\n        alias: 'type-hint',\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /([(,?]\\s*)(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,\n        alias: ['class-name-fully-qualified', 'type-hint'],\n        greedy: true,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }, {\n        pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n        alias: 'return-type',\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n        alias: ['class-name-fully-qualified', 'return-type'],\n        greedy: true,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }],\n      constant: constant,\n      \"function\": {\n        pattern: /(^|[^\\\\\\w])\\\\?[a-z_](?:[\\w\\\\]*\\w)?(?=\\s*\\()/i,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      },\n      property: {\n        pattern: /(->\\s*)\\w+/,\n        lookbehind: true\n      },\n      number: number,\n      operator: operator,\n      punctuation: punctuation\n    };\n    var string_interpolation = {\n      pattern: /\\{\\$(?:\\{(?:\\{[^{}]+\\}|[^{}]+)\\}|[^{}])+\\}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[[^\\r\\n\\[\\]]+\\]|->\\w+)?)/,\n      lookbehind: true,\n      inside: Prism.languages.php\n    };\n    var string = [{\n      pattern: /<<<'([^']+)'[\\r\\n](?:.*[\\r\\n])*?\\1;/,\n      alias: 'nowdoc-string',\n      greedy: true,\n      inside: {\n        delimiter: {\n          pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n          alias: 'symbol',\n          inside: {\n            punctuation: /^<<<'?|[';]$/\n          }\n        }\n      }\n    }, {\n      pattern: /<<<(?:\"([^\"]+)\"[\\r\\n](?:.*[\\r\\n])*?\\1;|([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?\\2;)/i,\n      alias: 'heredoc-string',\n      greedy: true,\n      inside: {\n        delimiter: {\n          pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n          alias: 'symbol',\n          inside: {\n            punctuation: /^<<<\"?|[\";]$/\n          }\n        },\n        interpolation: string_interpolation\n      }\n    }, {\n      pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n      alias: 'backtick-quoted-string',\n      greedy: true\n    }, {\n      pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n      alias: 'single-quoted-string',\n      greedy: true\n    }, {\n      pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n      alias: 'double-quoted-string',\n      greedy: true,\n      inside: {\n        interpolation: string_interpolation\n      }\n    }];\n    Prism.languages.insertBefore('php', 'variable', {\n      string: string,\n      attribute: {\n        pattern: /#\\[(?:[^\"'\\/#]|\\/(?![*/])|\\/\\/.*$|#(?!\\[).*$|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*')+\\](?=\\s*[a-z$#])/im,\n        greedy: true,\n        inside: {\n          'attribute-content': {\n            pattern: /^(#\\[)[\\s\\S]+(?=\\]$)/,\n            lookbehind: true,\n            // inside can appear subset of php\n            inside: {\n              comment: comment,\n              string: string,\n              'attribute-class-name': [{\n                pattern: /([^:]|^)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n                alias: 'class-name',\n                greedy: true,\n                lookbehind: true\n              }, {\n                pattern: /([^:]|^)(?:\\\\?\\b[a-z_]\\w*)+/i,\n                alias: ['class-name', 'class-name-fully-qualified'],\n                greedy: true,\n                lookbehind: true,\n                inside: {\n                  punctuation: /\\\\/\n                }\n              }],\n              constant: constant,\n              number: number,\n              operator: operator,\n              punctuation: punctuation\n            }\n          },\n          delimiter: {\n            pattern: /^#\\[|\\]$/,\n            alias: 'punctuation'\n          }\n        }\n      }\n    });\n    Prism.hooks.add('before-tokenize', function (env) {\n      if (!/<\\?/.test(env.code)) {\n        return;\n      }\n      var phpPattern = /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#(?!\\[))(?:[^?\\n\\r]|\\?(?!>))*(?=$|\\?>|[\\r\\n])|#\\[|\\/\\*(?:[^*]|\\*(?!\\/))*(?:\\*\\/|$))*?(?:\\?>|$)/g;\n      Prism.languages['markup-templating'].buildPlaceholders(env, 'php', phpPattern);\n    });\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'php');\n    });\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/php.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/phpdoc.js":
/*!***********************************************!*\
  !*** ./node_modules/refractor/lang/phpdoc.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar refractorPhp = __webpack_require__(/*! ./php.js */ \"(ssr)/./node_modules/refractor/lang/php.js\");\nvar refractorJavadoclike = __webpack_require__(/*! ./javadoclike.js */ \"(ssr)/./node_modules/refractor/lang/javadoclike.js\");\nmodule.exports = phpdoc;\nphpdoc.displayName = 'phpdoc';\nphpdoc.aliases = [];\nfunction phpdoc(Prism) {\n  Prism.register(refractorPhp);\n  Prism.register(refractorJavadoclike);\n  (function (Prism) {\n    var typeExpression = /(?:\\b[a-zA-Z]\\w*|[|\\\\[\\]])+/.source;\n    Prism.languages.phpdoc = Prism.languages.extend('javadoclike', {\n      parameter: {\n        pattern: RegExp('(@(?:global|param|property(?:-read|-write)?|var)\\\\s+(?:' + typeExpression + '\\\\s+)?)\\\\$\\\\w+'),\n        lookbehind: true\n      }\n    });\n    Prism.languages.insertBefore('phpdoc', 'keyword', {\n      'class-name': [{\n        pattern: RegExp('(@(?:global|package|param|property(?:-read|-write)?|return|subpackage|throws|var)\\\\s+)' + typeExpression),\n        lookbehind: true,\n        inside: {\n          keyword: /\\b(?:array|bool|boolean|callback|double|false|float|int|integer|mixed|null|object|resource|self|string|true|void)\\b/,\n          punctuation: /[|\\\\[\\]()]/\n        }\n      }]\n    });\n    Prism.languages.javadoclike.addSupport('php', Prism.languages.phpdoc);\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvcGhwZG9jLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUNaLElBQUlBLFlBQVksR0FBR0MsbUJBQU8sQ0FBQyw0REFBVSxDQUFDO0FBQ3RDLElBQUlDLG9CQUFvQixHQUFHRCxtQkFBTyxDQUFDLDRFQUFrQixDQUFDO0FBQ3RERSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsTUFBTTtBQUN2QkEsTUFBTSxDQUFDQyxXQUFXLEdBQUcsUUFBUTtBQUM3QkQsTUFBTSxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNuQixTQUFTRixNQUFNQSxDQUFDRyxLQUFLLEVBQUU7RUFDckJBLEtBQUssQ0FBQ0MsUUFBUSxDQUFDVCxZQUFZLENBQUM7RUFDNUJRLEtBQUssQ0FBQ0MsUUFBUSxDQUFDUCxvQkFBb0IsQ0FBQztFQUNuQyxDQUFDLFVBQVVNLEtBQUssRUFBRTtJQUNqQixJQUFJRSxjQUFjLEdBQUcsNkJBQTZCLENBQUNDLE1BQU07SUFDekRILEtBQUssQ0FBQ0ksU0FBUyxDQUFDUCxNQUFNLEdBQUdHLEtBQUssQ0FBQ0ksU0FBUyxDQUFDQyxNQUFNLENBQUMsYUFBYSxFQUFFO01BQzdEQyxTQUFTLEVBQUU7UUFDVEMsT0FBTyxFQUFFQyxNQUFNLENBQ2IseURBQXlELEdBQ3ZETixjQUFjLEdBQ2QsZ0JBQ0osQ0FBQztRQUNETyxVQUFVLEVBQUU7TUFDZDtJQUNGLENBQUMsQ0FBQztJQUNGVCxLQUFLLENBQUNJLFNBQVMsQ0FBQ00sWUFBWSxDQUFDLFFBQVEsRUFBRSxTQUFTLEVBQUU7TUFDaEQsWUFBWSxFQUFFLENBQ1o7UUFDRUgsT0FBTyxFQUFFQyxNQUFNLENBQ2Isd0ZBQXdGLEdBQ3RGTixjQUNKLENBQUM7UUFDRE8sVUFBVSxFQUFFLElBQUk7UUFDaEJFLE1BQU0sRUFBRTtVQUNOQyxPQUFPLEVBQ0wscUhBQXFIO1VBQ3ZIQyxXQUFXLEVBQUU7UUFDZjtNQUNGLENBQUM7SUFFTCxDQUFDLENBQUM7SUFDRmIsS0FBSyxDQUFDSSxTQUFTLENBQUNVLFdBQVcsQ0FBQ0MsVUFBVSxDQUFDLEtBQUssRUFBRWYsS0FBSyxDQUFDSSxTQUFTLENBQUNQLE1BQU0sQ0FBQztFQUN2RSxDQUFDLEVBQUVHLEtBQUssQ0FBQztBQUNYIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xccGhwZG9jLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xudmFyIHJlZnJhY3RvclBocCA9IHJlcXVpcmUoJy4vcGhwLmpzJylcbnZhciByZWZyYWN0b3JKYXZhZG9jbGlrZSA9IHJlcXVpcmUoJy4vamF2YWRvY2xpa2UuanMnKVxubW9kdWxlLmV4cG9ydHMgPSBwaHBkb2NcbnBocGRvYy5kaXNwbGF5TmFtZSA9ICdwaHBkb2MnXG5waHBkb2MuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBwaHBkb2MoUHJpc20pIHtcbiAgUHJpc20ucmVnaXN0ZXIocmVmcmFjdG9yUGhwKVxuICBQcmlzbS5yZWdpc3RlcihyZWZyYWN0b3JKYXZhZG9jbGlrZSlcbiAgOyhmdW5jdGlvbiAoUHJpc20pIHtcbiAgICB2YXIgdHlwZUV4cHJlc3Npb24gPSAvKD86XFxiW2EtekEtWl1cXHcqfFt8XFxcXFtcXF1dKSsvLnNvdXJjZVxuICAgIFByaXNtLmxhbmd1YWdlcy5waHBkb2MgPSBQcmlzbS5sYW5ndWFnZXMuZXh0ZW5kKCdqYXZhZG9jbGlrZScsIHtcbiAgICAgIHBhcmFtZXRlcjoge1xuICAgICAgICBwYXR0ZXJuOiBSZWdFeHAoXG4gICAgICAgICAgJyhAKD86Z2xvYmFsfHBhcmFtfHByb3BlcnR5KD86LXJlYWR8LXdyaXRlKT98dmFyKVxcXFxzKyg/OicgK1xuICAgICAgICAgICAgdHlwZUV4cHJlc3Npb24gK1xuICAgICAgICAgICAgJ1xcXFxzKyk/KVxcXFwkXFxcXHcrJ1xuICAgICAgICApLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICB9XG4gICAgfSlcbiAgICBQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdwaHBkb2MnLCAna2V5d29yZCcsIHtcbiAgICAgICdjbGFzcy1uYW1lJzogW1xuICAgICAgICB7XG4gICAgICAgICAgcGF0dGVybjogUmVnRXhwKFxuICAgICAgICAgICAgJyhAKD86Z2xvYmFsfHBhY2thZ2V8cGFyYW18cHJvcGVydHkoPzotcmVhZHwtd3JpdGUpP3xyZXR1cm58c3VicGFja2FnZXx0aHJvd3N8dmFyKVxcXFxzKyknICtcbiAgICAgICAgICAgICAgdHlwZUV4cHJlc3Npb25cbiAgICAgICAgICApLFxuICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgICBrZXl3b3JkOlxuICAgICAgICAgICAgICAvXFxiKD86YXJyYXl8Ym9vbHxib29sZWFufGNhbGxiYWNrfGRvdWJsZXxmYWxzZXxmbG9hdHxpbnR8aW50ZWdlcnxtaXhlZHxudWxsfG9iamVjdHxyZXNvdXJjZXxzZWxmfHN0cmluZ3x0cnVlfHZvaWQpXFxiLyxcbiAgICAgICAgICAgIHB1bmN0dWF0aW9uOiAvW3xcXFxcW1xcXSgpXS9cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9KVxuICAgIFByaXNtLmxhbmd1YWdlcy5qYXZhZG9jbGlrZS5hZGRTdXBwb3J0KCdwaHAnLCBQcmlzbS5sYW5ndWFnZXMucGhwZG9jKVxuICB9KShQcmlzbSlcbn1cbiJdLCJuYW1lcyI6WyJyZWZyYWN0b3JQaHAiLCJyZXF1aXJlIiwicmVmcmFjdG9ySmF2YWRvY2xpa2UiLCJtb2R1bGUiLCJleHBvcnRzIiwicGhwZG9jIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJyZWdpc3RlciIsInR5cGVFeHByZXNzaW9uIiwic291cmNlIiwibGFuZ3VhZ2VzIiwiZXh0ZW5kIiwicGFyYW1ldGVyIiwicGF0dGVybiIsIlJlZ0V4cCIsImxvb2tiZWhpbmQiLCJpbnNlcnRCZWZvcmUiLCJpbnNpZGUiLCJrZXl3b3JkIiwicHVuY3R1YXRpb24iLCJqYXZhZG9jbGlrZSIsImFkZFN1cHBvcnQiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/phpdoc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/plsql.js":
/*!**********************************************!*\
  !*** ./node_modules/refractor/lang/plsql.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar refractorSql = __webpack_require__(/*! ./sql.js */ \"(ssr)/./node_modules/refractor/lang/sql.js\");\nmodule.exports = plsql;\nplsql.displayName = 'plsql';\nplsql.aliases = [];\nfunction plsql(Prism) {\n  Prism.register(refractorSql);\n  Prism.languages.plsql = Prism.languages.extend('sql', {\n    comment: {\n      pattern: /\\/\\*[\\s\\S]*?\\*\\/|--.*/,\n      greedy: true\n    },\n    // https://docs.oracle.com/en/database/oracle/oracle-database/21/lnpls/plsql-reserved-words-keywords.html\n    keyword: /\\b(?:A|ACCESSIBLE|ADD|AGENT|AGGREGATE|ALL|ALTER|AND|ANY|ARRAY|AS|ASC|AT|ATTRIBUTE|AUTHID|AVG|BEGIN|BETWEEN|BFILE_BASE|BINARY|BLOB_BASE|BLOCK|BODY|BOTH|BOUND|BULK|BY|BYTE|C|CALL|CALLING|CASCADE|CASE|CHAR|CHARACTER|CHARSET|CHARSETFORM|CHARSETID|CHAR_BASE|CHECK|CLOB_BASE|CLONE|CLOSE|CLUSTER|CLUSTERS|COLAUTH|COLLECT|COLUMNS|COMMENT|COMMIT|COMMITTED|COMPILED|COMPRESS|CONNECT|CONSTANT|CONSTRUCTOR|CONTEXT|CONTINUE|CONVERT|COUNT|CRASH|CREATE|CREDENTIAL|CURRENT|CURSOR|CUSTOMDATUM|DANGLING|DATA|DATE|DATE_BASE|DAY|DECLARE|DEFAULT|DEFINE|DELETE|DESC|DETERMINISTIC|DIRECTORY|DISTINCT|DOUBLE|DROP|DURATION|ELEMENT|ELSE|ELSIF|EMPTY|END|ESCAPE|EXCEPT|EXCEPTION|EXCEPTIONS|EXCLUSIVE|EXECUTE|EXISTS|EXIT|EXTERNAL|FETCH|FINAL|FIRST|FIXED|FLOAT|FOR|FORALL|FORCE|FROM|FUNCTION|GENERAL|GOTO|GRANT|GROUP|HASH|HAVING|HEAP|HIDDEN|HOUR|IDENTIFIED|IF|IMMEDIATE|IMMUTABLE|IN|INCLUDING|INDEX|INDEXES|INDICATOR|INDICES|INFINITE|INSERT|INSTANTIABLE|INT|INTERFACE|INTERSECT|INTERVAL|INTO|INVALIDATE|IS|ISOLATION|JAVA|LANGUAGE|LARGE|LEADING|LENGTH|LEVEL|LIBRARY|LIKE|LIKE2|LIKE4|LIKEC|LIMIT|LIMITED|LOCAL|LOCK|LONG|LOOP|MAP|MAX|MAXLEN|MEMBER|MERGE|MIN|MINUS|MINUTE|MOD|MODE|MODIFY|MONTH|MULTISET|MUTABLE|NAME|NAN|NATIONAL|NATIVE|NCHAR|NEW|NOCOMPRESS|NOCOPY|NOT|NOWAIT|NULL|NUMBER_BASE|OBJECT|OCICOLL|OCIDATE|OCIDATETIME|OCIDURATION|OCIINTERVAL|OCILOBLOCATOR|OCINUMBER|OCIRAW|OCIREF|OCIREFCURSOR|OCIROWID|OCISTRING|OCITYPE|OF|OLD|ON|ONLY|OPAQUE|OPEN|OPERATOR|OPTION|OR|ORACLE|ORADATA|ORDER|ORGANIZATION|ORLANY|ORLVARY|OTHERS|OUT|OVERLAPS|OVERRIDING|PACKAGE|PARALLEL_ENABLE|PARAMETER|PARAMETERS|PARENT|PARTITION|PASCAL|PERSISTABLE|PIPE|PIPELINED|PLUGGABLE|POLYMORPHIC|PRAGMA|PRECISION|PRIOR|PRIVATE|PROCEDURE|PUBLIC|RAISE|RANGE|RAW|READ|RECORD|REF|REFERENCE|RELIES_ON|REM|REMAINDER|RENAME|RESOURCE|RESULT|RESULT_CACHE|RETURN|RETURNING|REVERSE|REVOKE|ROLLBACK|ROW|SAMPLE|SAVE|SAVEPOINT|SB1|SB2|SB4|SECOND|SEGMENT|SELECT|SELF|SEPARATE|SEQUENCE|SERIALIZABLE|SET|SHARE|SHORT|SIZE|SIZE_T|SOME|SPARSE|SQL|SQLCODE|SQLDATA|SQLNAME|SQLSTATE|STANDARD|START|STATIC|STDDEV|STORED|STRING|STRUCT|STYLE|SUBMULTISET|SUBPARTITION|SUBSTITUTABLE|SUBTYPE|SUM|SYNONYM|TABAUTH|TABLE|TDO|THE|THEN|TIME|TIMESTAMP|TIMEZONE_ABBR|TIMEZONE_HOUR|TIMEZONE_MINUTE|TIMEZONE_REGION|TO|TRAILING|TRANSACTION|TRANSACTIONAL|TRUSTED|TYPE|UB1|UB2|UB4|UNDER|UNION|UNIQUE|UNPLUG|UNSIGNED|UNTRUSTED|UPDATE|USE|USING|VALIST|VALUE|VALUES|VARIABLE|VARIANCE|VARRAY|VARYING|VIEW|VIEWS|VOID|WHEN|WHERE|WHILE|WITH|WORK|WRAPPED|WRITE|YEAR|ZONE)\\b/i,\n    // https://docs.oracle.com/en/database/oracle/oracle-database/21/lnpls/plsql-language-fundamentals.html#GUID-96A42F7C-7A71-4B90-8255-CA9C8BD9722E\n    operator: /:=?|=>|[<>^~!]=|\\.\\.|\\|\\||\\*\\*|[-+*/%<>=@]/\n  });\n  Prism.languages.insertBefore('plsql', 'operator', {\n    label: {\n      pattern: /<<\\s*\\w+\\s*>>/,\n      alias: 'symbol'\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvcGxzcWwuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBQ1osSUFBSUEsWUFBWSxHQUFHQyxtQkFBTyxDQUFDLDREQUFVLENBQUM7QUFDdENDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxLQUFLO0FBQ3RCQSxLQUFLLENBQUNDLFdBQVcsR0FBRyxPQUFPO0FBQzNCRCxLQUFLLENBQUNFLE9BQU8sR0FBRyxFQUFFO0FBQ2xCLFNBQVNGLEtBQUtBLENBQUNHLEtBQUssRUFBRTtFQUNwQkEsS0FBSyxDQUFDQyxRQUFRLENBQUNSLFlBQVksQ0FBQztFQUM1Qk8sS0FBSyxDQUFDRSxTQUFTLENBQUNMLEtBQUssR0FBR0csS0FBSyxDQUFDRSxTQUFTLENBQUNDLE1BQU0sQ0FBQyxLQUFLLEVBQUU7SUFDcERDLE9BQU8sRUFBRTtNQUNQQyxPQUFPLEVBQUUsdUJBQXVCO01BQ2hDQyxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0Q7SUFDQUMsT0FBTyxFQUNMLHM2RUFBczZFO0lBQ3g2RTtJQUNBQyxRQUFRLEVBQUU7RUFDWixDQUFDLENBQUM7RUFDRlIsS0FBSyxDQUFDRSxTQUFTLENBQUNPLFlBQVksQ0FBQyxPQUFPLEVBQUUsVUFBVSxFQUFFO0lBQ2hEQyxLQUFLLEVBQUU7TUFDTEwsT0FBTyxFQUFFLGVBQWU7TUFDeEJNLEtBQUssRUFBRTtJQUNUO0VBQ0YsQ0FBQyxDQUFDO0FBQ0oiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxwbHNxbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcbnZhciByZWZyYWN0b3JTcWwgPSByZXF1aXJlKCcuL3NxbC5qcycpXG5tb2R1bGUuZXhwb3J0cyA9IHBsc3FsXG5wbHNxbC5kaXNwbGF5TmFtZSA9ICdwbHNxbCdcbnBsc3FsLmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24gcGxzcWwoUHJpc20pIHtcbiAgUHJpc20ucmVnaXN0ZXIocmVmcmFjdG9yU3FsKVxuICBQcmlzbS5sYW5ndWFnZXMucGxzcWwgPSBQcmlzbS5sYW5ndWFnZXMuZXh0ZW5kKCdzcWwnLCB7XG4gICAgY29tbWVudDoge1xuICAgICAgcGF0dGVybjogL1xcL1xcKltcXHNcXFNdKj9cXCpcXC98LS0uKi8sXG4gICAgICBncmVlZHk6IHRydWVcbiAgICB9LFxuICAgIC8vIGh0dHBzOi8vZG9jcy5vcmFjbGUuY29tL2VuL2RhdGFiYXNlL29yYWNsZS9vcmFjbGUtZGF0YWJhc2UvMjEvbG5wbHMvcGxzcWwtcmVzZXJ2ZWQtd29yZHMta2V5d29yZHMuaHRtbFxuICAgIGtleXdvcmQ6XG4gICAgICAvXFxiKD86QXxBQ0NFU1NJQkxFfEFERHxBR0VOVHxBR0dSRUdBVEV8QUxMfEFMVEVSfEFORHxBTll8QVJSQVl8QVN8QVNDfEFUfEFUVFJJQlVURXxBVVRISUR8QVZHfEJFR0lOfEJFVFdFRU58QkZJTEVfQkFTRXxCSU5BUll8QkxPQl9CQVNFfEJMT0NLfEJPRFl8Qk9USHxCT1VORHxCVUxLfEJZfEJZVEV8Q3xDQUxMfENBTExJTkd8Q0FTQ0FERXxDQVNFfENIQVJ8Q0hBUkFDVEVSfENIQVJTRVR8Q0hBUlNFVEZPUk18Q0hBUlNFVElEfENIQVJfQkFTRXxDSEVDS3xDTE9CX0JBU0V8Q0xPTkV8Q0xPU0V8Q0xVU1RFUnxDTFVTVEVSU3xDT0xBVVRIfENPTExFQ1R8Q09MVU1OU3xDT01NRU5UfENPTU1JVHxDT01NSVRURUR8Q09NUElMRUR8Q09NUFJFU1N8Q09OTkVDVHxDT05TVEFOVHxDT05TVFJVQ1RPUnxDT05URVhUfENPTlRJTlVFfENPTlZFUlR8Q09VTlR8Q1JBU0h8Q1JFQVRFfENSRURFTlRJQUx8Q1VSUkVOVHxDVVJTT1J8Q1VTVE9NREFUVU18REFOR0xJTkd8REFUQXxEQVRFfERBVEVfQkFTRXxEQVl8REVDTEFSRXxERUZBVUxUfERFRklORXxERUxFVEV8REVTQ3xERVRFUk1JTklTVElDfERJUkVDVE9SWXxESVNUSU5DVHxET1VCTEV8RFJPUHxEVVJBVElPTnxFTEVNRU5UfEVMU0V8RUxTSUZ8RU1QVFl8RU5EfEVTQ0FQRXxFWENFUFR8RVhDRVBUSU9OfEVYQ0VQVElPTlN8RVhDTFVTSVZFfEVYRUNVVEV8RVhJU1RTfEVYSVR8RVhURVJOQUx8RkVUQ0h8RklOQUx8RklSU1R8RklYRUR8RkxPQVR8Rk9SfEZPUkFMTHxGT1JDRXxGUk9NfEZVTkNUSU9OfEdFTkVSQUx8R09UT3xHUkFOVHxHUk9VUHxIQVNIfEhBVklOR3xIRUFQfEhJRERFTnxIT1VSfElERU5USUZJRUR8SUZ8SU1NRURJQVRFfElNTVVUQUJMRXxJTnxJTkNMVURJTkd8SU5ERVh8SU5ERVhFU3xJTkRJQ0FUT1J8SU5ESUNFU3xJTkZJTklURXxJTlNFUlR8SU5TVEFOVElBQkxFfElOVHxJTlRFUkZBQ0V8SU5URVJTRUNUfElOVEVSVkFMfElOVE98SU5WQUxJREFURXxJU3xJU09MQVRJT058SkFWQXxMQU5HVUFHRXxMQVJHRXxMRUFESU5HfExFTkdUSHxMRVZFTHxMSUJSQVJZfExJS0V8TElLRTJ8TElLRTR8TElLRUN8TElNSVR8TElNSVRFRHxMT0NBTHxMT0NLfExPTkd8TE9PUHxNQVB8TUFYfE1BWExFTnxNRU1CRVJ8TUVSR0V8TUlOfE1JTlVTfE1JTlVURXxNT0R8TU9ERXxNT0RJRll8TU9OVEh8TVVMVElTRVR8TVVUQUJMRXxOQU1FfE5BTnxOQVRJT05BTHxOQVRJVkV8TkNIQVJ8TkVXfE5PQ09NUFJFU1N8Tk9DT1BZfE5PVHxOT1dBSVR8TlVMTHxOVU1CRVJfQkFTRXxPQkpFQ1R8T0NJQ09MTHxPQ0lEQVRFfE9DSURBVEVUSU1FfE9DSURVUkFUSU9OfE9DSUlOVEVSVkFMfE9DSUxPQkxPQ0FUT1J8T0NJTlVNQkVSfE9DSVJBV3xPQ0lSRUZ8T0NJUkVGQ1VSU09SfE9DSVJPV0lEfE9DSVNUUklOR3xPQ0lUWVBFfE9GfE9MRHxPTnxPTkxZfE9QQVFVRXxPUEVOfE9QRVJBVE9SfE9QVElPTnxPUnxPUkFDTEV8T1JBREFUQXxPUkRFUnxPUkdBTklaQVRJT058T1JMQU5ZfE9STFZBUll8T1RIRVJTfE9VVHxPVkVSTEFQU3xPVkVSUklESU5HfFBBQ0tBR0V8UEFSQUxMRUxfRU5BQkxFfFBBUkFNRVRFUnxQQVJBTUVURVJTfFBBUkVOVHxQQVJUSVRJT058UEFTQ0FMfFBFUlNJU1RBQkxFfFBJUEV8UElQRUxJTkVEfFBMVUdHQUJMRXxQT0xZTU9SUEhJQ3xQUkFHTUF8UFJFQ0lTSU9OfFBSSU9SfFBSSVZBVEV8UFJPQ0VEVVJFfFBVQkxJQ3xSQUlTRXxSQU5HRXxSQVd8UkVBRHxSRUNPUkR8UkVGfFJFRkVSRU5DRXxSRUxJRVNfT058UkVNfFJFTUFJTkRFUnxSRU5BTUV8UkVTT1VSQ0V8UkVTVUxUfFJFU1VMVF9DQUNIRXxSRVRVUk58UkVUVVJOSU5HfFJFVkVSU0V8UkVWT0tFfFJPTExCQUNLfFJPV3xTQU1QTEV8U0FWRXxTQVZFUE9JTlR8U0IxfFNCMnxTQjR8U0VDT05EfFNFR01FTlR8U0VMRUNUfFNFTEZ8U0VQQVJBVEV8U0VRVUVOQ0V8U0VSSUFMSVpBQkxFfFNFVHxTSEFSRXxTSE9SVHxTSVpFfFNJWkVfVHxTT01FfFNQQVJTRXxTUUx8U1FMQ09ERXxTUUxEQVRBfFNRTE5BTUV8U1FMU1RBVEV8U1RBTkRBUkR8U1RBUlR8U1RBVElDfFNURERFVnxTVE9SRUR8U1RSSU5HfFNUUlVDVHxTVFlMRXxTVUJNVUxUSVNFVHxTVUJQQVJUSVRJT058U1VCU1RJVFVUQUJMRXxTVUJUWVBFfFNVTXxTWU5PTllNfFRBQkFVVEh8VEFCTEV8VERPfFRIRXxUSEVOfFRJTUV8VElNRVNUQU1QfFRJTUVaT05FX0FCQlJ8VElNRVpPTkVfSE9VUnxUSU1FWk9ORV9NSU5VVEV8VElNRVpPTkVfUkVHSU9OfFRPfFRSQUlMSU5HfFRSQU5TQUNUSU9OfFRSQU5TQUNUSU9OQUx8VFJVU1RFRHxUWVBFfFVCMXxVQjJ8VUI0fFVOREVSfFVOSU9OfFVOSVFVRXxVTlBMVUd8VU5TSUdORUR8VU5UUlVTVEVEfFVQREFURXxVU0V8VVNJTkd8VkFMSVNUfFZBTFVFfFZBTFVFU3xWQVJJQUJMRXxWQVJJQU5DRXxWQVJSQVl8VkFSWUlOR3xWSUVXfFZJRVdTfFZPSUR8V0hFTnxXSEVSRXxXSElMRXxXSVRIfFdPUkt8V1JBUFBFRHxXUklURXxZRUFSfFpPTkUpXFxiL2ksXG4gICAgLy8gaHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vZW4vZGF0YWJhc2Uvb3JhY2xlL29yYWNsZS1kYXRhYmFzZS8yMS9sbnBscy9wbHNxbC1sYW5ndWFnZS1mdW5kYW1lbnRhbHMuaHRtbCNHVUlELTk2QTQyRjdDLTdBNzEtNEI5MC04MjU1LUNBOUM4QkQ5NzIyRVxuICAgIG9wZXJhdG9yOiAvOj0/fD0+fFs8Pl5+IV09fFxcLlxcLnxcXHxcXHx8XFwqXFwqfFstKyovJTw+PUBdL1xuICB9KVxuICBQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdwbHNxbCcsICdvcGVyYXRvcicsIHtcbiAgICBsYWJlbDoge1xuICAgICAgcGF0dGVybjogLzw8XFxzKlxcdytcXHMqPj4vLFxuICAgICAgYWxpYXM6ICdzeW1ib2wnXG4gICAgfVxuICB9KVxufVxuIl0sIm5hbWVzIjpbInJlZnJhY3RvclNxbCIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwicGxzcWwiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsInJlZ2lzdGVyIiwibGFuZ3VhZ2VzIiwiZXh0ZW5kIiwiY29tbWVudCIsInBhdHRlcm4iLCJncmVlZHkiLCJrZXl3b3JkIiwib3BlcmF0b3IiLCJpbnNlcnRCZWZvcmUiLCJsYWJlbCIsImFsaWFzIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/plsql.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/powerquery.js":
/*!***************************************************!*\
  !*** ./node_modules/refractor/lang/powerquery.js ***!
  \***************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = powerquery;\npowerquery.displayName = 'powerquery';\npowerquery.aliases = [];\nfunction powerquery(Prism) {\n  // https://docs.microsoft.com/en-us/powerquery-m/power-query-m-language-specification\n  Prism.languages.powerquery = {\n    comment: {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true,\n      greedy: true\n    },\n    'quoted-identifier': {\n      pattern: /#\"(?:[^\"\\r\\n]|\"\")*\"(?!\")/,\n      greedy: true\n    },\n    string: {\n      pattern: /(?:#!)?\"(?:[^\"\\r\\n]|\"\")*\"(?!\")/,\n      greedy: true\n    },\n    constant: [/\\bDay\\.(?:Friday|Monday|Saturday|Sunday|Thursday|Tuesday|Wednesday)\\b/, /\\bTraceLevel\\.(?:Critical|Error|Information|Verbose|Warning)\\b/, /\\bOccurrence\\.(?:All|First|Last)\\b/, /\\bOrder\\.(?:Ascending|Descending)\\b/, /\\bRoundingMode\\.(?:AwayFromZero|Down|ToEven|TowardZero|Up)\\b/, /\\bMissingField\\.(?:Error|Ignore|UseNull)\\b/, /\\bQuoteStyle\\.(?:Csv|None)\\b/, /\\bJoinKind\\.(?:FullOuter|Inner|LeftAnti|LeftOuter|RightAnti|RightOuter)\\b/, /\\bGroupKind\\.(?:Global|Local)\\b/, /\\bExtraValues\\.(?:Error|Ignore|List)\\b/, /\\bJoinAlgorithm\\.(?:Dynamic|LeftHash|LeftIndex|PairwiseHash|RightHash|RightIndex|SortMerge)\\b/, /\\bJoinSide\\.(?:Left|Right)\\b/, /\\bPrecision\\.(?:Decimal|Double)\\b/, /\\bRelativePosition\\.From(?:End|Start)\\b/, /\\bTextEncoding\\.(?:Ascii|BigEndianUnicode|Unicode|Utf16|Utf8|Windows)\\b/, /\\b(?:Any|Binary|Date|DateTime|DateTimeZone|Duration|Function|Int16|Int32|Int64|Int8|List|Logical|None|Number|Record|Table|Text|Time)\\.Type\\b/, /\\bnull\\b/],\n    \"boolean\": /\\b(?:false|true)\\b/,\n    keyword: /\\b(?:and|as|each|else|error|if|in|is|let|meta|not|nullable|optional|or|otherwise|section|shared|then|try|type)\\b|#(?:binary|date|datetime|datetimezone|duration|infinity|nan|sections|shared|table|time)\\b/,\n    \"function\": {\n      pattern: /(^|[^#\\w.])[a-z_][\\w.]*(?=\\s*\\()/i,\n      lookbehind: true\n    },\n    'data-type': {\n      pattern: /\\b(?:any|anynonnull|binary|date|datetime|datetimezone|duration|function|list|logical|none|number|record|table|text|time)\\b/,\n      alias: 'class-name'\n    },\n    number: {\n      pattern: /\\b0x[\\da-f]+\\b|(?:[+-]?(?:\\b\\d+\\.)?\\b\\d+|[+-]\\.\\d+|(^|[^.])\\B\\.\\d+)(?:e[+-]?\\d+)?\\b/i,\n      lookbehind: true\n    },\n    operator: /[-+*\\/&?@^]|<(?:=>?|>)?|>=?|=>?|\\.\\.\\.?/,\n    punctuation: /[,;\\[\\](){}]/\n  };\n  Prism.languages.pq = Prism.languages['powerquery'];\n  Prism.languages.mscript = Prism.languages['powerquery'];\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvcG93ZXJxdWVyeS5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLFVBQVU7QUFDM0JBLFVBQVUsQ0FBQ0MsV0FBVyxHQUFHLFlBQVk7QUFDckNELFVBQVUsQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDdkIsU0FBU0YsVUFBVUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ3pCO0VBQ0FBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixVQUFVLEdBQUc7SUFDM0JLLE9BQU8sRUFBRTtNQUNQQyxPQUFPLEVBQUUsc0NBQXNDO01BQy9DQyxVQUFVLEVBQUUsSUFBSTtNQUNoQkMsTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUNELG1CQUFtQixFQUFFO01BQ25CRixPQUFPLEVBQUUsMEJBQTBCO01BQ25DRSxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0RDLE1BQU0sRUFBRTtNQUNOSCxPQUFPLEVBQUUsZ0NBQWdDO01BQ3pDRSxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0RFLFFBQVEsRUFBRSxDQUNSLHVFQUF1RSxFQUN2RSxnRUFBZ0UsRUFDaEUsb0NBQW9DLEVBQ3BDLHFDQUFxQyxFQUNyQyw4REFBOEQsRUFDOUQsNENBQTRDLEVBQzVDLDhCQUE4QixFQUM5QiwyRUFBMkUsRUFDM0UsaUNBQWlDLEVBQ2pDLHdDQUF3QyxFQUN4QywrRkFBK0YsRUFDL0YsOEJBQThCLEVBQzlCLG1DQUFtQyxFQUNuQyx5Q0FBeUMsRUFDekMseUVBQXlFLEVBQ3pFLDhJQUE4SSxFQUM5SSxVQUFVLENBQ1g7SUFDRCxXQUFTLG9CQUFvQjtJQUM3QkMsT0FBTyxFQUNMLDRNQUE0TTtJQUM5TSxZQUFVO01BQ1JMLE9BQU8sRUFBRSxtQ0FBbUM7TUFDNUNDLFVBQVUsRUFBRTtJQUNkLENBQUM7SUFDRCxXQUFXLEVBQUU7TUFDWEQsT0FBTyxFQUNMLDRIQUE0SDtNQUM5SE0sS0FBSyxFQUFFO0lBQ1QsQ0FBQztJQUNEQyxNQUFNLEVBQUU7TUFDTlAsT0FBTyxFQUNMLHNGQUFzRjtNQUN4RkMsVUFBVSxFQUFFO0lBQ2QsQ0FBQztJQUNETyxRQUFRLEVBQUUseUNBQXlDO0lBQ25EQyxXQUFXLEVBQUU7RUFDZixDQUFDO0VBQ0RaLEtBQUssQ0FBQ0MsU0FBUyxDQUFDWSxFQUFFLEdBQUdiLEtBQUssQ0FBQ0MsU0FBUyxDQUFDLFlBQVksQ0FBQztFQUNsREQsS0FBSyxDQUFDQyxTQUFTLENBQUNhLE9BQU8sR0FBR2QsS0FBSyxDQUFDQyxTQUFTLENBQUMsWUFBWSxDQUFDO0FBQ3pEIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xccG93ZXJxdWVyeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBwb3dlcnF1ZXJ5XG5wb3dlcnF1ZXJ5LmRpc3BsYXlOYW1lID0gJ3Bvd2VycXVlcnknXG5wb3dlcnF1ZXJ5LmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24gcG93ZXJxdWVyeShQcmlzbSkge1xuICAvLyBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9wb3dlcnF1ZXJ5LW0vcG93ZXItcXVlcnktbS1sYW5ndWFnZS1zcGVjaWZpY2F0aW9uXG4gIFByaXNtLmxhbmd1YWdlcy5wb3dlcnF1ZXJ5ID0ge1xuICAgIGNvbW1lbnQ6IHtcbiAgICAgIHBhdHRlcm46IC8oXnxbXlxcXFxdKSg/OlxcL1xcKltcXHNcXFNdKj9cXCpcXC98XFwvXFwvLiopLyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBncmVlZHk6IHRydWVcbiAgICB9LFxuICAgICdxdW90ZWQtaWRlbnRpZmllcic6IHtcbiAgICAgIHBhdHRlcm46IC8jXCIoPzpbXlwiXFxyXFxuXXxcIlwiKSpcIig/IVwiKS8sXG4gICAgICBncmVlZHk6IHRydWVcbiAgICB9LFxuICAgIHN0cmluZzoge1xuICAgICAgcGF0dGVybjogLyg/OiMhKT9cIig/OlteXCJcXHJcXG5dfFwiXCIpKlwiKD8hXCIpLyxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgY29uc3RhbnQ6IFtcbiAgICAgIC9cXGJEYXlcXC4oPzpGcmlkYXl8TW9uZGF5fFNhdHVyZGF5fFN1bmRheXxUaHVyc2RheXxUdWVzZGF5fFdlZG5lc2RheSlcXGIvLFxuICAgICAgL1xcYlRyYWNlTGV2ZWxcXC4oPzpDcml0aWNhbHxFcnJvcnxJbmZvcm1hdGlvbnxWZXJib3NlfFdhcm5pbmcpXFxiLyxcbiAgICAgIC9cXGJPY2N1cnJlbmNlXFwuKD86QWxsfEZpcnN0fExhc3QpXFxiLyxcbiAgICAgIC9cXGJPcmRlclxcLig/OkFzY2VuZGluZ3xEZXNjZW5kaW5nKVxcYi8sXG4gICAgICAvXFxiUm91bmRpbmdNb2RlXFwuKD86QXdheUZyb21aZXJvfERvd258VG9FdmVufFRvd2FyZFplcm98VXApXFxiLyxcbiAgICAgIC9cXGJNaXNzaW5nRmllbGRcXC4oPzpFcnJvcnxJZ25vcmV8VXNlTnVsbClcXGIvLFxuICAgICAgL1xcYlF1b3RlU3R5bGVcXC4oPzpDc3Z8Tm9uZSlcXGIvLFxuICAgICAgL1xcYkpvaW5LaW5kXFwuKD86RnVsbE91dGVyfElubmVyfExlZnRBbnRpfExlZnRPdXRlcnxSaWdodEFudGl8UmlnaHRPdXRlcilcXGIvLFxuICAgICAgL1xcYkdyb3VwS2luZFxcLig/Okdsb2JhbHxMb2NhbClcXGIvLFxuICAgICAgL1xcYkV4dHJhVmFsdWVzXFwuKD86RXJyb3J8SWdub3JlfExpc3QpXFxiLyxcbiAgICAgIC9cXGJKb2luQWxnb3JpdGhtXFwuKD86RHluYW1pY3xMZWZ0SGFzaHxMZWZ0SW5kZXh8UGFpcndpc2VIYXNofFJpZ2h0SGFzaHxSaWdodEluZGV4fFNvcnRNZXJnZSlcXGIvLFxuICAgICAgL1xcYkpvaW5TaWRlXFwuKD86TGVmdHxSaWdodClcXGIvLFxuICAgICAgL1xcYlByZWNpc2lvblxcLig/OkRlY2ltYWx8RG91YmxlKVxcYi8sXG4gICAgICAvXFxiUmVsYXRpdmVQb3NpdGlvblxcLkZyb20oPzpFbmR8U3RhcnQpXFxiLyxcbiAgICAgIC9cXGJUZXh0RW5jb2RpbmdcXC4oPzpBc2NpaXxCaWdFbmRpYW5Vbmljb2RlfFVuaWNvZGV8VXRmMTZ8VXRmOHxXaW5kb3dzKVxcYi8sXG4gICAgICAvXFxiKD86QW55fEJpbmFyeXxEYXRlfERhdGVUaW1lfERhdGVUaW1lWm9uZXxEdXJhdGlvbnxGdW5jdGlvbnxJbnQxNnxJbnQzMnxJbnQ2NHxJbnQ4fExpc3R8TG9naWNhbHxOb25lfE51bWJlcnxSZWNvcmR8VGFibGV8VGV4dHxUaW1lKVxcLlR5cGVcXGIvLFxuICAgICAgL1xcYm51bGxcXGIvXG4gICAgXSxcbiAgICBib29sZWFuOiAvXFxiKD86ZmFsc2V8dHJ1ZSlcXGIvLFxuICAgIGtleXdvcmQ6XG4gICAgICAvXFxiKD86YW5kfGFzfGVhY2h8ZWxzZXxlcnJvcnxpZnxpbnxpc3xsZXR8bWV0YXxub3R8bnVsbGFibGV8b3B0aW9uYWx8b3J8b3RoZXJ3aXNlfHNlY3Rpb258c2hhcmVkfHRoZW58dHJ5fHR5cGUpXFxifCMoPzpiaW5hcnl8ZGF0ZXxkYXRldGltZXxkYXRldGltZXpvbmV8ZHVyYXRpb258aW5maW5pdHl8bmFufHNlY3Rpb25zfHNoYXJlZHx0YWJsZXx0aW1lKVxcYi8sXG4gICAgZnVuY3Rpb246IHtcbiAgICAgIHBhdHRlcm46IC8oXnxbXiNcXHcuXSlbYS16X11bXFx3Ll0qKD89XFxzKlxcKCkvaSxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICB9LFxuICAgICdkYXRhLXR5cGUnOiB7XG4gICAgICBwYXR0ZXJuOlxuICAgICAgICAvXFxiKD86YW55fGFueW5vbm51bGx8YmluYXJ5fGRhdGV8ZGF0ZXRpbWV8ZGF0ZXRpbWV6b25lfGR1cmF0aW9ufGZ1bmN0aW9ufGxpc3R8bG9naWNhbHxub25lfG51bWJlcnxyZWNvcmR8dGFibGV8dGV4dHx0aW1lKVxcYi8sXG4gICAgICBhbGlhczogJ2NsYXNzLW5hbWUnXG4gICAgfSxcbiAgICBudW1iZXI6IHtcbiAgICAgIHBhdHRlcm46XG4gICAgICAgIC9cXGIweFtcXGRhLWZdK1xcYnwoPzpbKy1dPyg/OlxcYlxcZCtcXC4pP1xcYlxcZCt8WystXVxcLlxcZCt8KF58W14uXSlcXEJcXC5cXGQrKSg/OmVbKy1dP1xcZCspP1xcYi9pLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgIH0sXG4gICAgb3BlcmF0b3I6IC9bLSsqXFwvJj9AXl18PCg/Oj0+P3w+KT98Pj0/fD0+P3xcXC5cXC5cXC4/LyxcbiAgICBwdW5jdHVhdGlvbjogL1ssO1xcW1xcXSgpe31dL1xuICB9XG4gIFByaXNtLmxhbmd1YWdlcy5wcSA9IFByaXNtLmxhbmd1YWdlc1sncG93ZXJxdWVyeSddXG4gIFByaXNtLmxhbmd1YWdlcy5tc2NyaXB0ID0gUHJpc20ubGFuZ3VhZ2VzWydwb3dlcnF1ZXJ5J11cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicG93ZXJxdWVyeSIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwiY29tbWVudCIsInBhdHRlcm4iLCJsb29rYmVoaW5kIiwiZ3JlZWR5Iiwic3RyaW5nIiwiY29uc3RhbnQiLCJrZXl3b3JkIiwiYWxpYXMiLCJudW1iZXIiLCJvcGVyYXRvciIsInB1bmN0dWF0aW9uIiwicHEiLCJtc2NyaXB0Il0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/powerquery.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/powershell.js":
/*!***************************************************!*\
  !*** ./node_modules/refractor/lang/powershell.js ***!
  \***************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = powershell;\npowershell.displayName = 'powershell';\npowershell.aliases = [];\nfunction powershell(Prism) {\n  ;\n  (function (Prism) {\n    var powershell = Prism.languages.powershell = {\n      comment: [{\n        pattern: /(^|[^`])<#[\\s\\S]*?#>/,\n        lookbehind: true\n      }, {\n        pattern: /(^|[^`])#.*/,\n        lookbehind: true\n      }],\n      string: [{\n        pattern: /\"(?:`[\\s\\S]|[^`\"])*\"/,\n        greedy: true,\n        inside: null // see below\n      }, {\n        pattern: /'(?:[^']|'')*'/,\n        greedy: true\n      }],\n      // Matches name spaces as well as casts, attribute decorators. Force starting with letter to avoid matching array indices\n      // Supports two levels of nested brackets (e.g. `[OutputType([System.Collections.Generic.List[int]])]`)\n      namespace: /\\[[a-z](?:\\[(?:\\[[^\\]]*\\]|[^\\[\\]])*\\]|[^\\[\\]])*\\]/i,\n      \"boolean\": /\\$(?:false|true)\\b/i,\n      variable: /\\$\\w+\\b/,\n      // Cmdlets and aliases. Aliases should come last, otherwise \"write\" gets preferred over \"write-host\" for example\n      // Get-Command | ?{ $_.ModuleName -match \"Microsoft.PowerShell.(Util|Core|Management)\" }\n      // Get-Alias | ?{ $_.ReferencedCommand.Module.Name -match \"Microsoft.PowerShell.(Util|Core|Management)\" }\n      \"function\": [/\\b(?:Add|Approve|Assert|Backup|Block|Checkpoint|Clear|Close|Compare|Complete|Compress|Confirm|Connect|Convert|ConvertFrom|ConvertTo|Copy|Debug|Deny|Disable|Disconnect|Dismount|Edit|Enable|Enter|Exit|Expand|Export|Find|ForEach|Format|Get|Grant|Group|Hide|Import|Initialize|Install|Invoke|Join|Limit|Lock|Measure|Merge|Move|New|Open|Optimize|Out|Ping|Pop|Protect|Publish|Push|Read|Receive|Redo|Register|Remove|Rename|Repair|Request|Reset|Resize|Resolve|Restart|Restore|Resume|Revoke|Save|Search|Select|Send|Set|Show|Skip|Sort|Split|Start|Step|Stop|Submit|Suspend|Switch|Sync|Tee|Test|Trace|Unblock|Undo|Uninstall|Unlock|Unprotect|Unpublish|Unregister|Update|Use|Wait|Watch|Where|Write)-[a-z]+\\b/i, /\\b(?:ac|cat|chdir|clc|cli|clp|clv|compare|copy|cp|cpi|cpp|cvpa|dbp|del|diff|dir|ebp|echo|epal|epcsv|epsn|erase|fc|fl|ft|fw|gal|gbp|gc|gci|gcs|gdr|gi|gl|gm|gp|gps|group|gsv|gu|gv|gwmi|iex|ii|ipal|ipcsv|ipsn|irm|iwmi|iwr|kill|lp|ls|measure|mi|mount|move|mp|mv|nal|ndr|ni|nv|ogv|popd|ps|pushd|pwd|rbp|rd|rdr|ren|ri|rm|rmdir|rni|rnp|rp|rv|rvpa|rwmi|sal|saps|sasv|sbp|sc|select|set|shcm|si|sl|sleep|sls|sort|sp|spps|spsv|start|sv|swmi|tee|trcm|type|write)\\b/i],\n      // per http://technet.microsoft.com/en-us/library/hh847744.aspx\n      keyword: /\\b(?:Begin|Break|Catch|Class|Continue|Data|Define|Do|DynamicParam|Else|ElseIf|End|Exit|Filter|Finally|For|ForEach|From|Function|If|InlineScript|Parallel|Param|Process|Return|Sequence|Switch|Throw|Trap|Try|Until|Using|Var|While|Workflow)\\b/i,\n      operator: {\n        pattern: /(^|\\W)(?:!|-(?:b?(?:and|x?or)|as|(?:Not)?(?:Contains|In|Like|Match)|eq|ge|gt|is(?:Not)?|Join|le|lt|ne|not|Replace|sh[lr])\\b|-[-=]?|\\+[+=]?|[*\\/%]=?)/i,\n        lookbehind: true\n      },\n      punctuation: /[|{}[\\];(),.]/\n    }; // Variable interpolation inside strings, and nested expressions\n    powershell.string[0].inside = {\n      \"function\": {\n        // Allow for one level of nesting\n        pattern: /(^|[^`])\\$\\((?:\\$\\([^\\r\\n()]*\\)|(?!\\$\\()[^\\r\\n)])*\\)/,\n        lookbehind: true,\n        inside: powershell\n      },\n      \"boolean\": powershell[\"boolean\"],\n      variable: powershell.variable\n    };\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvcG93ZXJzaGVsbC5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLFVBQVU7QUFDM0JBLFVBQVUsQ0FBQ0MsV0FBVyxHQUFHLFlBQVk7QUFDckNELFVBQVUsQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDdkIsU0FBU0YsVUFBVUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ3pCO0VBQUMsQ0FBQyxVQUFVQSxLQUFLLEVBQUU7SUFDakIsSUFBSUgsVUFBVSxHQUFJRyxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osVUFBVSxHQUFHO01BQzdDSyxPQUFPLEVBQUUsQ0FDUDtRQUNFQyxPQUFPLEVBQUUsc0JBQXNCO1FBQy9CQyxVQUFVLEVBQUU7TUFDZCxDQUFDLEVBQ0Q7UUFDRUQsT0FBTyxFQUFFLGFBQWE7UUFDdEJDLFVBQVUsRUFBRTtNQUNkLENBQUMsQ0FDRjtNQUNEQyxNQUFNLEVBQUUsQ0FDTjtRQUNFRixPQUFPLEVBQUUsc0JBQXNCO1FBQy9CRyxNQUFNLEVBQUUsSUFBSTtRQUNaQyxNQUFNLEVBQUUsSUFBSSxDQUFDO01BQ2YsQ0FBQyxFQUNEO1FBQ0VKLE9BQU8sRUFBRSxnQkFBZ0I7UUFDekJHLE1BQU0sRUFBRTtNQUNWLENBQUMsQ0FDRjtNQUNEO01BQ0E7TUFDQUUsU0FBUyxFQUFFLG9EQUFvRDtNQUMvRCxXQUFTLHFCQUFxQjtNQUM5QkMsUUFBUSxFQUFFLFNBQVM7TUFDbkI7TUFDQTtNQUNBO01BQ0EsWUFBVSxDQUNSLHVyQkFBdXJCLEVBQ3ZyQix1Y0FBdWMsQ0FDeGM7TUFDRDtNQUNBQyxPQUFPLEVBQ0wsaVBBQWlQO01BQ25QQyxRQUFRLEVBQUU7UUFDUlIsT0FBTyxFQUNMLHVKQUF1SjtRQUN6SkMsVUFBVSxFQUFFO01BQ2QsQ0FBQztNQUNEUSxXQUFXLEVBQUU7SUFDZixDQUFFLEVBQUM7SUFDSGYsVUFBVSxDQUFDUSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUNFLE1BQU0sR0FBRztNQUM1QixZQUFVO1FBQ1I7UUFDQUosT0FBTyxFQUFFLHNEQUFzRDtRQUMvREMsVUFBVSxFQUFFLElBQUk7UUFDaEJHLE1BQU0sRUFBRVY7TUFDVixDQUFDO01BQ0QsV0FBU0EsVUFBVSxXQUFRO01BQzNCWSxRQUFRLEVBQUVaLFVBQVUsQ0FBQ1k7SUFDdkIsQ0FBQztFQUNILENBQUMsRUFBRVQsS0FBSyxDQUFDO0FBQ1giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxwb3dlcnNoZWxsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBvd2Vyc2hlbGxcbnBvd2Vyc2hlbGwuZGlzcGxheU5hbWUgPSAncG93ZXJzaGVsbCdcbnBvd2Vyc2hlbGwuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBwb3dlcnNoZWxsKFByaXNtKSB7XG4gIDsoZnVuY3Rpb24gKFByaXNtKSB7XG4gICAgdmFyIHBvd2Vyc2hlbGwgPSAoUHJpc20ubGFuZ3VhZ2VzLnBvd2Vyc2hlbGwgPSB7XG4gICAgICBjb21tZW50OiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwYXR0ZXJuOiAvKF58W15gXSk8I1tcXHNcXFNdKj8jPi8sXG4gICAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcGF0dGVybjogLyhefFteYF0pIy4qLyxcbiAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBzdHJpbmc6IFtcbiAgICAgICAge1xuICAgICAgICAgIHBhdHRlcm46IC9cIig/OmBbXFxzXFxTXXxbXmBcIl0pKlwiLyxcbiAgICAgICAgICBncmVlZHk6IHRydWUsXG4gICAgICAgICAgaW5zaWRlOiBudWxsIC8vIHNlZSBiZWxvd1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcGF0dGVybjogLycoPzpbXiddfCcnKSonLyxcbiAgICAgICAgICBncmVlZHk6IHRydWVcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIC8vIE1hdGNoZXMgbmFtZSBzcGFjZXMgYXMgd2VsbCBhcyBjYXN0cywgYXR0cmlidXRlIGRlY29yYXRvcnMuIEZvcmNlIHN0YXJ0aW5nIHdpdGggbGV0dGVyIHRvIGF2b2lkIG1hdGNoaW5nIGFycmF5IGluZGljZXNcbiAgICAgIC8vIFN1cHBvcnRzIHR3byBsZXZlbHMgb2YgbmVzdGVkIGJyYWNrZXRzIChlLmcuIGBbT3V0cHV0VHlwZShbU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMuTGlzdFtpbnRdXSldYClcbiAgICAgIG5hbWVzcGFjZTogL1xcW1thLXpdKD86XFxbKD86XFxbW15cXF1dKlxcXXxbXlxcW1xcXV0pKlxcXXxbXlxcW1xcXV0pKlxcXS9pLFxuICAgICAgYm9vbGVhbjogL1xcJCg/OmZhbHNlfHRydWUpXFxiL2ksXG4gICAgICB2YXJpYWJsZTogL1xcJFxcdytcXGIvLFxuICAgICAgLy8gQ21kbGV0cyBhbmQgYWxpYXNlcy4gQWxpYXNlcyBzaG91bGQgY29tZSBsYXN0LCBvdGhlcndpc2UgXCJ3cml0ZVwiIGdldHMgcHJlZmVycmVkIG92ZXIgXCJ3cml0ZS1ob3N0XCIgZm9yIGV4YW1wbGVcbiAgICAgIC8vIEdldC1Db21tYW5kIHwgP3sgJF8uTW9kdWxlTmFtZSAtbWF0Y2ggXCJNaWNyb3NvZnQuUG93ZXJTaGVsbC4oVXRpbHxDb3JlfE1hbmFnZW1lbnQpXCIgfVxuICAgICAgLy8gR2V0LUFsaWFzIHwgP3sgJF8uUmVmZXJlbmNlZENvbW1hbmQuTW9kdWxlLk5hbWUgLW1hdGNoIFwiTWljcm9zb2Z0LlBvd2VyU2hlbGwuKFV0aWx8Q29yZXxNYW5hZ2VtZW50KVwiIH1cbiAgICAgIGZ1bmN0aW9uOiBbXG4gICAgICAgIC9cXGIoPzpBZGR8QXBwcm92ZXxBc3NlcnR8QmFja3VwfEJsb2NrfENoZWNrcG9pbnR8Q2xlYXJ8Q2xvc2V8Q29tcGFyZXxDb21wbGV0ZXxDb21wcmVzc3xDb25maXJtfENvbm5lY3R8Q29udmVydHxDb252ZXJ0RnJvbXxDb252ZXJ0VG98Q29weXxEZWJ1Z3xEZW55fERpc2FibGV8RGlzY29ubmVjdHxEaXNtb3VudHxFZGl0fEVuYWJsZXxFbnRlcnxFeGl0fEV4cGFuZHxFeHBvcnR8RmluZHxGb3JFYWNofEZvcm1hdHxHZXR8R3JhbnR8R3JvdXB8SGlkZXxJbXBvcnR8SW5pdGlhbGl6ZXxJbnN0YWxsfEludm9rZXxKb2lufExpbWl0fExvY2t8TWVhc3VyZXxNZXJnZXxNb3ZlfE5ld3xPcGVufE9wdGltaXplfE91dHxQaW5nfFBvcHxQcm90ZWN0fFB1Ymxpc2h8UHVzaHxSZWFkfFJlY2VpdmV8UmVkb3xSZWdpc3RlcnxSZW1vdmV8UmVuYW1lfFJlcGFpcnxSZXF1ZXN0fFJlc2V0fFJlc2l6ZXxSZXNvbHZlfFJlc3RhcnR8UmVzdG9yZXxSZXN1bWV8UmV2b2tlfFNhdmV8U2VhcmNofFNlbGVjdHxTZW5kfFNldHxTaG93fFNraXB8U29ydHxTcGxpdHxTdGFydHxTdGVwfFN0b3B8U3VibWl0fFN1c3BlbmR8U3dpdGNofFN5bmN8VGVlfFRlc3R8VHJhY2V8VW5ibG9ja3xVbmRvfFVuaW5zdGFsbHxVbmxvY2t8VW5wcm90ZWN0fFVucHVibGlzaHxVbnJlZ2lzdGVyfFVwZGF0ZXxVc2V8V2FpdHxXYXRjaHxXaGVyZXxXcml0ZSktW2Etel0rXFxiL2ksXG4gICAgICAgIC9cXGIoPzphY3xjYXR8Y2hkaXJ8Y2xjfGNsaXxjbHB8Y2x2fGNvbXBhcmV8Y29weXxjcHxjcGl8Y3BwfGN2cGF8ZGJwfGRlbHxkaWZmfGRpcnxlYnB8ZWNob3xlcGFsfGVwY3N2fGVwc258ZXJhc2V8ZmN8Zmx8ZnR8Znd8Z2FsfGdicHxnY3xnY2l8Z2NzfGdkcnxnaXxnbHxnbXxncHxncHN8Z3JvdXB8Z3N2fGd1fGd2fGd3bWl8aWV4fGlpfGlwYWx8aXBjc3Z8aXBzbnxpcm18aXdtaXxpd3J8a2lsbHxscHxsc3xtZWFzdXJlfG1pfG1vdW50fG1vdmV8bXB8bXZ8bmFsfG5kcnxuaXxudnxvZ3Z8cG9wZHxwc3xwdXNoZHxwd2R8cmJwfHJkfHJkcnxyZW58cml8cm18cm1kaXJ8cm5pfHJucHxycHxydnxydnBhfHJ3bWl8c2FsfHNhcHN8c2FzdnxzYnB8c2N8c2VsZWN0fHNldHxzaGNtfHNpfHNsfHNsZWVwfHNsc3xzb3J0fHNwfHNwcHN8c3BzdnxzdGFydHxzdnxzd21pfHRlZXx0cmNtfHR5cGV8d3JpdGUpXFxiL2lcbiAgICAgIF0sXG4gICAgICAvLyBwZXIgaHR0cDovL3RlY2huZXQubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2hoODQ3NzQ0LmFzcHhcbiAgICAgIGtleXdvcmQ6XG4gICAgICAgIC9cXGIoPzpCZWdpbnxCcmVha3xDYXRjaHxDbGFzc3xDb250aW51ZXxEYXRhfERlZmluZXxEb3xEeW5hbWljUGFyYW18RWxzZXxFbHNlSWZ8RW5kfEV4aXR8RmlsdGVyfEZpbmFsbHl8Rm9yfEZvckVhY2h8RnJvbXxGdW5jdGlvbnxJZnxJbmxpbmVTY3JpcHR8UGFyYWxsZWx8UGFyYW18UHJvY2Vzc3xSZXR1cm58U2VxdWVuY2V8U3dpdGNofFRocm93fFRyYXB8VHJ5fFVudGlsfFVzaW5nfFZhcnxXaGlsZXxXb3JrZmxvdylcXGIvaSxcbiAgICAgIG9wZXJhdG9yOiB7XG4gICAgICAgIHBhdHRlcm46XG4gICAgICAgICAgLyhefFxcVykoPzohfC0oPzpiPyg/OmFuZHx4P29yKXxhc3woPzpOb3QpPyg/OkNvbnRhaW5zfElufExpa2V8TWF0Y2gpfGVxfGdlfGd0fGlzKD86Tm90KT98Sm9pbnxsZXxsdHxuZXxub3R8UmVwbGFjZXxzaFtscl0pXFxifC1bLT1dP3xcXCtbKz1dP3xbKlxcLyVdPT8pL2ksXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH0sXG4gICAgICBwdW5jdHVhdGlvbjogL1t8e31bXFxdOygpLC5dL1xuICAgIH0pIC8vIFZhcmlhYmxlIGludGVycG9sYXRpb24gaW5zaWRlIHN0cmluZ3MsIGFuZCBuZXN0ZWQgZXhwcmVzc2lvbnNcbiAgICBwb3dlcnNoZWxsLnN0cmluZ1swXS5pbnNpZGUgPSB7XG4gICAgICBmdW5jdGlvbjoge1xuICAgICAgICAvLyBBbGxvdyBmb3Igb25lIGxldmVsIG9mIG5lc3RpbmdcbiAgICAgICAgcGF0dGVybjogLyhefFteYF0pXFwkXFwoKD86XFwkXFwoW15cXHJcXG4oKV0qXFwpfCg/IVxcJFxcKClbXlxcclxcbildKSpcXCkvLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICBpbnNpZGU6IHBvd2Vyc2hlbGxcbiAgICAgIH0sXG4gICAgICBib29sZWFuOiBwb3dlcnNoZWxsLmJvb2xlYW4sXG4gICAgICB2YXJpYWJsZTogcG93ZXJzaGVsbC52YXJpYWJsZVxuICAgIH1cbiAgfSkoUHJpc20pXG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInBvd2Vyc2hlbGwiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImxhbmd1YWdlcyIsImNvbW1lbnQiLCJwYXR0ZXJuIiwibG9va2JlaGluZCIsInN0cmluZyIsImdyZWVkeSIsImluc2lkZSIsIm5hbWVzcGFjZSIsInZhcmlhYmxlIiwia2V5d29yZCIsIm9wZXJhdG9yIiwicHVuY3R1YXRpb24iXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/powershell.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/processing.js":
/*!***************************************************!*\
  !*** ./node_modules/refractor/lang/processing.js ***!
  \***************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = processing;\nprocessing.displayName = 'processing';\nprocessing.aliases = [];\nfunction processing(Prism) {\n  Prism.languages.processing = Prism.languages.extend('clike', {\n    keyword: /\\b(?:break|case|catch|class|continue|default|else|extends|final|for|if|implements|import|new|null|private|public|return|static|super|switch|this|try|void|while)\\b/,\n    // Spaces are allowed between function name and parenthesis\n    \"function\": /\\b\\w+(?=\\s*\\()/,\n    operator: /<[<=]?|>[>=]?|&&?|\\|\\|?|[%?]|[!=+\\-*\\/]=?/\n  });\n  Prism.languages.insertBefore('processing', 'number', {\n    // Special case: XML is a type\n    constant: /\\b(?!XML\\b)[A-Z][A-Z\\d_]+\\b/,\n    type: {\n      pattern: /\\b(?:boolean|byte|char|color|double|float|int|[A-Z]\\w*)\\b/,\n      alias: 'class-name'\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvcHJvY2Vzc2luZy5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLFVBQVU7QUFDM0JBLFVBQVUsQ0FBQ0MsV0FBVyxHQUFHLFlBQVk7QUFDckNELFVBQVUsQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDdkIsU0FBU0YsVUFBVUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ3pCQSxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osVUFBVSxHQUFHRyxLQUFLLENBQUNDLFNBQVMsQ0FBQ0MsTUFBTSxDQUFDLE9BQU8sRUFBRTtJQUMzREMsT0FBTyxFQUNMLG9LQUFvSztJQUN0SztJQUNBLFlBQVUsZ0JBQWdCO0lBQzFCQyxRQUFRLEVBQUU7RUFDWixDQUFDLENBQUM7RUFDRkosS0FBSyxDQUFDQyxTQUFTLENBQUNJLFlBQVksQ0FBQyxZQUFZLEVBQUUsUUFBUSxFQUFFO0lBQ25EO0lBQ0FDLFFBQVEsRUFBRSw2QkFBNkI7SUFDdkNDLElBQUksRUFBRTtNQUNKQyxPQUFPLEVBQUUsMkRBQTJEO01BQ3BFQyxLQUFLLEVBQUU7SUFDVDtFQUNGLENBQUMsQ0FBQztBQUNKIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xccHJvY2Vzc2luZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBwcm9jZXNzaW5nXG5wcm9jZXNzaW5nLmRpc3BsYXlOYW1lID0gJ3Byb2Nlc3NpbmcnXG5wcm9jZXNzaW5nLmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24gcHJvY2Vzc2luZyhQcmlzbSkge1xuICBQcmlzbS5sYW5ndWFnZXMucHJvY2Vzc2luZyA9IFByaXNtLmxhbmd1YWdlcy5leHRlbmQoJ2NsaWtlJywge1xuICAgIGtleXdvcmQ6XG4gICAgICAvXFxiKD86YnJlYWt8Y2FzZXxjYXRjaHxjbGFzc3xjb250aW51ZXxkZWZhdWx0fGVsc2V8ZXh0ZW5kc3xmaW5hbHxmb3J8aWZ8aW1wbGVtZW50c3xpbXBvcnR8bmV3fG51bGx8cHJpdmF0ZXxwdWJsaWN8cmV0dXJufHN0YXRpY3xzdXBlcnxzd2l0Y2h8dGhpc3x0cnl8dm9pZHx3aGlsZSlcXGIvLFxuICAgIC8vIFNwYWNlcyBhcmUgYWxsb3dlZCBiZXR3ZWVuIGZ1bmN0aW9uIG5hbWUgYW5kIHBhcmVudGhlc2lzXG4gICAgZnVuY3Rpb246IC9cXGJcXHcrKD89XFxzKlxcKCkvLFxuICAgIG9wZXJhdG9yOiAvPFs8PV0/fD5bPj1dP3wmJj98XFx8XFx8P3xbJT9dfFshPStcXC0qXFwvXT0/L1xuICB9KVxuICBQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdwcm9jZXNzaW5nJywgJ251bWJlcicsIHtcbiAgICAvLyBTcGVjaWFsIGNhc2U6IFhNTCBpcyBhIHR5cGVcbiAgICBjb25zdGFudDogL1xcYig/IVhNTFxcYilbQS1aXVtBLVpcXGRfXStcXGIvLFxuICAgIHR5cGU6IHtcbiAgICAgIHBhdHRlcm46IC9cXGIoPzpib29sZWFufGJ5dGV8Y2hhcnxjb2xvcnxkb3VibGV8ZmxvYXR8aW50fFtBLVpdXFx3KilcXGIvLFxuICAgICAgYWxpYXM6ICdjbGFzcy1uYW1lJ1xuICAgIH1cbiAgfSlcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicHJvY2Vzc2luZyIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwiZXh0ZW5kIiwia2V5d29yZCIsIm9wZXJhdG9yIiwiaW5zZXJ0QmVmb3JlIiwiY29uc3RhbnQiLCJ0eXBlIiwicGF0dGVybiIsImFsaWFzIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/processing.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/prolog.js":
/*!***********************************************!*\
  !*** ./node_modules/refractor/lang/prolog.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = prolog;\nprolog.displayName = 'prolog';\nprolog.aliases = [];\nfunction prolog(Prism) {\n  Prism.languages.prolog = {\n    // Syntax depends on the implementation\n    comment: {\n      pattern: /\\/\\*[\\s\\S]*?\\*\\/|%.*/,\n      greedy: true\n    },\n    // Depending on the implementation, strings may allow escaped newlines and quote-escape\n    string: {\n      pattern: /([\"'])(?:\\1\\1|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1(?!\\1)/,\n      greedy: true\n    },\n    builtin: /\\b(?:fx|fy|xf[xy]?|yfx?)\\b/,\n    // FIXME: Should we list all null-ary predicates (not followed by a parenthesis) like halt, trace, etc.?\n    \"function\": /\\b[a-z]\\w*(?:(?=\\()|\\/\\d+)/,\n    number: /\\b\\d+(?:\\.\\d*)?/,\n    // Custom operators are allowed\n    operator: /[:\\\\=><\\-?*@\\/;+^|!$.]+|\\b(?:is|mod|not|xor)\\b/,\n    punctuation: /[(){}\\[\\],]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvcHJvbG9nLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsTUFBTTtBQUN2QkEsTUFBTSxDQUFDQyxXQUFXLEdBQUcsUUFBUTtBQUM3QkQsTUFBTSxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNuQixTQUFTRixNQUFNQSxDQUFDRyxLQUFLLEVBQUU7RUFDckJBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixNQUFNLEdBQUc7SUFDdkI7SUFDQUssT0FBTyxFQUFFO01BQ1BDLE9BQU8sRUFBRSxzQkFBc0I7TUFDL0JDLE1BQU0sRUFBRTtJQUNWLENBQUM7SUFDRDtJQUNBQyxNQUFNLEVBQUU7TUFDTkYsT0FBTyxFQUFFLDJEQUEyRDtNQUNwRUMsTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUNERSxPQUFPLEVBQUUsNEJBQTRCO0lBQ3JDO0lBQ0EsWUFBVSw0QkFBNEI7SUFDdENDLE1BQU0sRUFBRSxpQkFBaUI7SUFDekI7SUFDQUMsUUFBUSxFQUFFLGdEQUFnRDtJQUMxREMsV0FBVyxFQUFFO0VBQ2YsQ0FBQztBQUNIIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xccHJvbG9nLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IHByb2xvZ1xucHJvbG9nLmRpc3BsYXlOYW1lID0gJ3Byb2xvZydcbnByb2xvZy5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIHByb2xvZyhQcmlzbSkge1xuICBQcmlzbS5sYW5ndWFnZXMucHJvbG9nID0ge1xuICAgIC8vIFN5bnRheCBkZXBlbmRzIG9uIHRoZSBpbXBsZW1lbnRhdGlvblxuICAgIGNvbW1lbnQ6IHtcbiAgICAgIHBhdHRlcm46IC9cXC9cXCpbXFxzXFxTXSo/XFwqXFwvfCUuKi8sXG4gICAgICBncmVlZHk6IHRydWVcbiAgICB9LFxuICAgIC8vIERlcGVuZGluZyBvbiB0aGUgaW1wbGVtZW50YXRpb24sIHN0cmluZ3MgbWF5IGFsbG93IGVzY2FwZWQgbmV3bGluZXMgYW5kIHF1b3RlLWVzY2FwZVxuICAgIHN0cmluZzoge1xuICAgICAgcGF0dGVybjogLyhbXCInXSkoPzpcXDFcXDF8XFxcXCg/OlxcclxcbnxbXFxzXFxTXSl8KD8hXFwxKVteXFxcXFxcclxcbl0pKlxcMSg/IVxcMSkvLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICBidWlsdGluOiAvXFxiKD86Znh8Znl8eGZbeHldP3x5Zng/KVxcYi8sXG4gICAgLy8gRklYTUU6IFNob3VsZCB3ZSBsaXN0IGFsbCBudWxsLWFyeSBwcmVkaWNhdGVzIChub3QgZm9sbG93ZWQgYnkgYSBwYXJlbnRoZXNpcykgbGlrZSBoYWx0LCB0cmFjZSwgZXRjLj9cbiAgICBmdW5jdGlvbjogL1xcYlthLXpdXFx3Kig/Oig/PVxcKCl8XFwvXFxkKykvLFxuICAgIG51bWJlcjogL1xcYlxcZCsoPzpcXC5cXGQqKT8vLFxuICAgIC8vIEN1c3RvbSBvcGVyYXRvcnMgYXJlIGFsbG93ZWRcbiAgICBvcGVyYXRvcjogL1s6XFxcXD0+PFxcLT8qQFxcLzsrXnwhJC5dK3xcXGIoPzppc3xtb2R8bm90fHhvcilcXGIvLFxuICAgIHB1bmN0dWF0aW9uOiAvWygpe31cXFtcXF0sXS9cbiAgfVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJwcm9sb2ciLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImxhbmd1YWdlcyIsImNvbW1lbnQiLCJwYXR0ZXJuIiwiZ3JlZWR5Iiwic3RyaW5nIiwiYnVpbHRpbiIsIm51bWJlciIsIm9wZXJhdG9yIiwicHVuY3R1YXRpb24iXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/prolog.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/promql.js":
/*!***********************************************!*\
  !*** ./node_modules/refractor/lang/promql.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = promql;\npromql.displayName = 'promql';\npromql.aliases = [];\nfunction promql(Prism) {\n  // Thanks to: https://github.com/prometheus-community/monaco-promql/blob/master/src/promql/promql.ts\n  // As well as: https://kausal.co/blog/slate-prism-add-new-syntax-promql/\n  ;\n  (function (Prism) {\n    // PromQL Aggregation Operators\n    // (https://prometheus.io/docs/prometheus/latest/querying/operators/#aggregation-operators)\n    var aggregations = ['sum', 'min', 'max', 'avg', 'group', 'stddev', 'stdvar', 'count', 'count_values', 'bottomk', 'topk', 'quantile']; // PromQL vector matching + the by and without clauses\n    // (https://prometheus.io/docs/prometheus/latest/querying/operators/#vector-matching)\n    var vectorMatching = ['on', 'ignoring', 'group_right', 'group_left', 'by', 'without']; // PromQL offset modifier\n    // (https://prometheus.io/docs/prometheus/latest/querying/basics/#offset-modifier)\n    var offsetModifier = ['offset'];\n    var keywords = aggregations.concat(vectorMatching, offsetModifier);\n    Prism.languages.promql = {\n      comment: {\n        pattern: /(^[ \\t]*)#.*/m,\n        lookbehind: true\n      },\n      'vector-match': {\n        // Match the comma-separated label lists inside vector matching:\n        pattern: new RegExp('((?:' + vectorMatching.join('|') + ')\\\\s*)\\\\([^)]*\\\\)'),\n        lookbehind: true,\n        inside: {\n          'label-key': {\n            pattern: /\\b[^,]+\\b/,\n            alias: 'attr-name'\n          },\n          punctuation: /[(),]/\n        }\n      },\n      'context-labels': {\n        pattern: /\\{[^{}]*\\}/,\n        inside: {\n          'label-key': {\n            pattern: /\\b[a-z_]\\w*(?=\\s*(?:=|![=~]))/,\n            alias: 'attr-name'\n          },\n          'label-value': {\n            pattern: /([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n            greedy: true,\n            alias: 'attr-value'\n          },\n          punctuation: /\\{|\\}|=~?|![=~]|,/\n        }\n      },\n      'context-range': [{\n        pattern: /\\[[\\w\\s:]+\\]/,\n        // [1m]\n        inside: {\n          punctuation: /\\[|\\]|:/,\n          'range-duration': {\n            pattern: /\\b(?:\\d+(?:[smhdwy]|ms))+\\b/i,\n            alias: 'number'\n          }\n        }\n      }, {\n        pattern: /(\\boffset\\s+)\\w+/,\n        // offset 1m\n        lookbehind: true,\n        inside: {\n          'range-duration': {\n            pattern: /\\b(?:\\d+(?:[smhdwy]|ms))+\\b/i,\n            alias: 'number'\n          }\n        }\n      }],\n      keyword: new RegExp('\\\\b(?:' + keywords.join('|') + ')\\\\b', 'i'),\n      \"function\": /\\b[a-z_]\\w*(?=\\s*\\()/i,\n      number: /[-+]?(?:(?:\\b\\d+(?:\\.\\d+)?|\\B\\.\\d+)(?:e[-+]?\\d+)?\\b|\\b(?:0x[0-9a-f]+|nan|inf)\\b)/i,\n      operator: /[\\^*/%+-]|==|!=|<=|<|>=|>|\\b(?:and|or|unless)\\b/i,\n      punctuation: /[{};()`,.[\\]]/\n    };\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvcHJvbXFsLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsTUFBTTtBQUN2QkEsTUFBTSxDQUFDQyxXQUFXLEdBQUcsUUFBUTtBQUM3QkQsTUFBTSxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNuQixTQUFTRixNQUFNQSxDQUFDRyxLQUFLLEVBQUU7RUFDckI7RUFDQTtFQUNBO0VBQUMsQ0FBQyxVQUFVQSxLQUFLLEVBQUU7SUFDakI7SUFDQTtJQUNBLElBQUlDLFlBQVksR0FBRyxDQUNqQixLQUFLLEVBQ0wsS0FBSyxFQUNMLEtBQUssRUFDTCxLQUFLLEVBQ0wsT0FBTyxFQUNQLFFBQVEsRUFDUixRQUFRLEVBQ1IsT0FBTyxFQUNQLGNBQWMsRUFDZCxTQUFTLEVBQ1QsTUFBTSxFQUNOLFVBQVUsQ0FDWCxFQUFDO0lBQ0Y7SUFDQSxJQUFJQyxjQUFjLEdBQUcsQ0FDbkIsSUFBSSxFQUNKLFVBQVUsRUFDVixhQUFhLEVBQ2IsWUFBWSxFQUNaLElBQUksRUFDSixTQUFTLENBQ1YsRUFBQztJQUNGO0lBQ0EsSUFBSUMsY0FBYyxHQUFHLENBQUMsUUFBUSxDQUFDO0lBQy9CLElBQUlDLFFBQVEsR0FBR0gsWUFBWSxDQUFDSSxNQUFNLENBQUNILGNBQWMsRUFBRUMsY0FBYyxDQUFDO0lBQ2xFSCxLQUFLLENBQUNNLFNBQVMsQ0FBQ1QsTUFBTSxHQUFHO01BQ3ZCVSxPQUFPLEVBQUU7UUFDUEMsT0FBTyxFQUFFLGVBQWU7UUFDeEJDLFVBQVUsRUFBRTtNQUNkLENBQUM7TUFDRCxjQUFjLEVBQUU7UUFDZDtRQUNBRCxPQUFPLEVBQUUsSUFBSUUsTUFBTSxDQUNqQixNQUFNLEdBQUdSLGNBQWMsQ0FBQ1MsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLG1CQUN0QyxDQUFDO1FBQ0RGLFVBQVUsRUFBRSxJQUFJO1FBQ2hCRyxNQUFNLEVBQUU7VUFDTixXQUFXLEVBQUU7WUFDWEosT0FBTyxFQUFFLFdBQVc7WUFDcEJLLEtBQUssRUFBRTtVQUNULENBQUM7VUFDREMsV0FBVyxFQUFFO1FBQ2Y7TUFDRixDQUFDO01BQ0QsZ0JBQWdCLEVBQUU7UUFDaEJOLE9BQU8sRUFBRSxZQUFZO1FBQ3JCSSxNQUFNLEVBQUU7VUFDTixXQUFXLEVBQUU7WUFDWEosT0FBTyxFQUFFLCtCQUErQjtZQUN4Q0ssS0FBSyxFQUFFO1VBQ1QsQ0FBQztVQUNELGFBQWEsRUFBRTtZQUNiTCxPQUFPLEVBQUUsb0NBQW9DO1lBQzdDTyxNQUFNLEVBQUUsSUFBSTtZQUNaRixLQUFLLEVBQUU7VUFDVCxDQUFDO1VBQ0RDLFdBQVcsRUFBRTtRQUNmO01BQ0YsQ0FBQztNQUNELGVBQWUsRUFBRSxDQUNmO1FBQ0VOLE9BQU8sRUFBRSxjQUFjO1FBQ3ZCO1FBQ0FJLE1BQU0sRUFBRTtVQUNORSxXQUFXLEVBQUUsU0FBUztVQUN0QixnQkFBZ0IsRUFBRTtZQUNoQk4sT0FBTyxFQUFFLDhCQUE4QjtZQUN2Q0ssS0FBSyxFQUFFO1VBQ1Q7UUFDRjtNQUNGLENBQUMsRUFDRDtRQUNFTCxPQUFPLEVBQUUsa0JBQWtCO1FBQzNCO1FBQ0FDLFVBQVUsRUFBRSxJQUFJO1FBQ2hCRyxNQUFNLEVBQUU7VUFDTixnQkFBZ0IsRUFBRTtZQUNoQkosT0FBTyxFQUFFLDhCQUE4QjtZQUN2Q0ssS0FBSyxFQUFFO1VBQ1Q7UUFDRjtNQUNGLENBQUMsQ0FDRjtNQUNERyxPQUFPLEVBQUUsSUFBSU4sTUFBTSxDQUFDLFFBQVEsR0FBR04sUUFBUSxDQUFDTyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxFQUFFLEdBQUcsQ0FBQztNQUNoRSxZQUFVLHVCQUF1QjtNQUNqQ00sTUFBTSxFQUNKLG1GQUFtRjtNQUNyRkMsUUFBUSxFQUFFLGtEQUFrRDtNQUM1REosV0FBVyxFQUFFO0lBQ2YsQ0FBQztFQUNILENBQUMsRUFBRWQsS0FBSyxDQUFDO0FBQ1giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxwcm9tcWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gcHJvbXFsXG5wcm9tcWwuZGlzcGxheU5hbWUgPSAncHJvbXFsJ1xucHJvbXFsLmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24gcHJvbXFsKFByaXNtKSB7XG4gIC8vIFRoYW5rcyB0bzogaHR0cHM6Ly9naXRodWIuY29tL3Byb21ldGhldXMtY29tbXVuaXR5L21vbmFjby1wcm9tcWwvYmxvYi9tYXN0ZXIvc3JjL3Byb21xbC9wcm9tcWwudHNcbiAgLy8gQXMgd2VsbCBhczogaHR0cHM6Ly9rYXVzYWwuY28vYmxvZy9zbGF0ZS1wcmlzbS1hZGQtbmV3LXN5bnRheC1wcm9tcWwvXG4gIDsoZnVuY3Rpb24gKFByaXNtKSB7XG4gICAgLy8gUHJvbVFMIEFnZ3JlZ2F0aW9uIE9wZXJhdG9yc1xuICAgIC8vIChodHRwczovL3Byb21ldGhldXMuaW8vZG9jcy9wcm9tZXRoZXVzL2xhdGVzdC9xdWVyeWluZy9vcGVyYXRvcnMvI2FnZ3JlZ2F0aW9uLW9wZXJhdG9ycylcbiAgICB2YXIgYWdncmVnYXRpb25zID0gW1xuICAgICAgJ3N1bScsXG4gICAgICAnbWluJyxcbiAgICAgICdtYXgnLFxuICAgICAgJ2F2ZycsXG4gICAgICAnZ3JvdXAnLFxuICAgICAgJ3N0ZGRldicsXG4gICAgICAnc3RkdmFyJyxcbiAgICAgICdjb3VudCcsXG4gICAgICAnY291bnRfdmFsdWVzJyxcbiAgICAgICdib3R0b21rJyxcbiAgICAgICd0b3BrJyxcbiAgICAgICdxdWFudGlsZSdcbiAgICBdIC8vIFByb21RTCB2ZWN0b3IgbWF0Y2hpbmcgKyB0aGUgYnkgYW5kIHdpdGhvdXQgY2xhdXNlc1xuICAgIC8vIChodHRwczovL3Byb21ldGhldXMuaW8vZG9jcy9wcm9tZXRoZXVzL2xhdGVzdC9xdWVyeWluZy9vcGVyYXRvcnMvI3ZlY3Rvci1tYXRjaGluZylcbiAgICB2YXIgdmVjdG9yTWF0Y2hpbmcgPSBbXG4gICAgICAnb24nLFxuICAgICAgJ2lnbm9yaW5nJyxcbiAgICAgICdncm91cF9yaWdodCcsXG4gICAgICAnZ3JvdXBfbGVmdCcsXG4gICAgICAnYnknLFxuICAgICAgJ3dpdGhvdXQnXG4gICAgXSAvLyBQcm9tUUwgb2Zmc2V0IG1vZGlmaWVyXG4gICAgLy8gKGh0dHBzOi8vcHJvbWV0aGV1cy5pby9kb2NzL3Byb21ldGhldXMvbGF0ZXN0L3F1ZXJ5aW5nL2Jhc2ljcy8jb2Zmc2V0LW1vZGlmaWVyKVxuICAgIHZhciBvZmZzZXRNb2RpZmllciA9IFsnb2Zmc2V0J11cbiAgICB2YXIga2V5d29yZHMgPSBhZ2dyZWdhdGlvbnMuY29uY2F0KHZlY3Rvck1hdGNoaW5nLCBvZmZzZXRNb2RpZmllcilcbiAgICBQcmlzbS5sYW5ndWFnZXMucHJvbXFsID0ge1xuICAgICAgY29tbWVudDoge1xuICAgICAgICBwYXR0ZXJuOiAvKF5bIFxcdF0qKSMuKi9tLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICB9LFxuICAgICAgJ3ZlY3Rvci1tYXRjaCc6IHtcbiAgICAgICAgLy8gTWF0Y2ggdGhlIGNvbW1hLXNlcGFyYXRlZCBsYWJlbCBsaXN0cyBpbnNpZGUgdmVjdG9yIG1hdGNoaW5nOlxuICAgICAgICBwYXR0ZXJuOiBuZXcgUmVnRXhwKFxuICAgICAgICAgICcoKD86JyArIHZlY3Rvck1hdGNoaW5nLmpvaW4oJ3wnKSArICcpXFxcXHMqKVxcXFwoW14pXSpcXFxcKSdcbiAgICAgICAgKSxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgJ2xhYmVsLWtleSc6IHtcbiAgICAgICAgICAgIHBhdHRlcm46IC9cXGJbXixdK1xcYi8sXG4gICAgICAgICAgICBhbGlhczogJ2F0dHItbmFtZSdcbiAgICAgICAgICB9LFxuICAgICAgICAgIHB1bmN0dWF0aW9uOiAvWygpLF0vXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAnY29udGV4dC1sYWJlbHMnOiB7XG4gICAgICAgIHBhdHRlcm46IC9cXHtbXnt9XSpcXH0vLFxuICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICAnbGFiZWwta2V5Jzoge1xuICAgICAgICAgICAgcGF0dGVybjogL1xcYlthLXpfXVxcdyooPz1cXHMqKD86PXwhWz1+XSkpLyxcbiAgICAgICAgICAgIGFsaWFzOiAnYXR0ci1uYW1lJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgJ2xhYmVsLXZhbHVlJzoge1xuICAgICAgICAgICAgcGF0dGVybjogLyhbXCInYF0pKD86XFxcXFtcXHNcXFNdfCg/IVxcMSlbXlxcXFxdKSpcXDEvLFxuICAgICAgICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgICAgICAgYWxpYXM6ICdhdHRyLXZhbHVlJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcHVuY3R1YXRpb246IC9cXHt8XFx9fD1+P3whWz1+XXwsL1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgJ2NvbnRleHQtcmFuZ2UnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwYXR0ZXJuOiAvXFxbW1xcd1xcczpdK1xcXS8sXG4gICAgICAgICAgLy8gWzFtXVxuICAgICAgICAgIGluc2lkZToge1xuICAgICAgICAgICAgcHVuY3R1YXRpb246IC9cXFt8XFxdfDovLFxuICAgICAgICAgICAgJ3JhbmdlLWR1cmF0aW9uJzoge1xuICAgICAgICAgICAgICBwYXR0ZXJuOiAvXFxiKD86XFxkKyg/OltzbWhkd3ldfG1zKSkrXFxiL2ksXG4gICAgICAgICAgICAgIGFsaWFzOiAnbnVtYmVyJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHBhdHRlcm46IC8oXFxib2Zmc2V0XFxzKylcXHcrLyxcbiAgICAgICAgICAvLyBvZmZzZXQgMW1cbiAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAgIGluc2lkZToge1xuICAgICAgICAgICAgJ3JhbmdlLWR1cmF0aW9uJzoge1xuICAgICAgICAgICAgICBwYXR0ZXJuOiAvXFxiKD86XFxkKyg/OltzbWhkd3ldfG1zKSkrXFxiL2ksXG4gICAgICAgICAgICAgIGFsaWFzOiAnbnVtYmVyJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIGtleXdvcmQ6IG5ldyBSZWdFeHAoJ1xcXFxiKD86JyArIGtleXdvcmRzLmpvaW4oJ3wnKSArICcpXFxcXGInLCAnaScpLFxuICAgICAgZnVuY3Rpb246IC9cXGJbYS16X11cXHcqKD89XFxzKlxcKCkvaSxcbiAgICAgIG51bWJlcjpcbiAgICAgICAgL1stK10/KD86KD86XFxiXFxkKyg/OlxcLlxcZCspP3xcXEJcXC5cXGQrKSg/OmVbLStdP1xcZCspP1xcYnxcXGIoPzoweFswLTlhLWZdK3xuYW58aW5mKVxcYikvaSxcbiAgICAgIG9wZXJhdG9yOiAvW1xcXiovJSstXXw9PXwhPXw8PXw8fD49fD58XFxiKD86YW5kfG9yfHVubGVzcylcXGIvaSxcbiAgICAgIHB1bmN0dWF0aW9uOiAvW3t9OygpYCwuW1xcXV0vXG4gICAgfVxuICB9KShQcmlzbSlcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicHJvbXFsIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJhZ2dyZWdhdGlvbnMiLCJ2ZWN0b3JNYXRjaGluZyIsIm9mZnNldE1vZGlmaWVyIiwia2V5d29yZHMiLCJjb25jYXQiLCJsYW5ndWFnZXMiLCJjb21tZW50IiwicGF0dGVybiIsImxvb2tiZWhpbmQiLCJSZWdFeHAiLCJqb2luIiwiaW5zaWRlIiwiYWxpYXMiLCJwdW5jdHVhdGlvbiIsImdyZWVkeSIsImtleXdvcmQiLCJudW1iZXIiLCJvcGVyYXRvciJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/promql.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/properties.js":
/*!***************************************************!*\
  !*** ./node_modules/refractor/lang/properties.js ***!
  \***************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = properties;\nproperties.displayName = 'properties';\nproperties.aliases = [];\nfunction properties(Prism) {\n  Prism.languages.properties = {\n    comment: /^[ \\t]*[#!].*$/m,\n    'attr-value': {\n      pattern: /(^[ \\t]*(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\s:=])+(?: *[=:] *(?! )| ))(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])+/m,\n      lookbehind: true\n    },\n    'attr-name': /^[ \\t]*(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\s:=])+(?= *[=:]| )/m,\n    punctuation: /[=:]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvcHJvcGVydGllcy5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLFVBQVU7QUFDM0JBLFVBQVUsQ0FBQ0MsV0FBVyxHQUFHLFlBQVk7QUFDckNELFVBQVUsQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDdkIsU0FBU0YsVUFBVUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ3pCQSxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osVUFBVSxHQUFHO0lBQzNCSyxPQUFPLEVBQUUsaUJBQWlCO0lBQzFCLFlBQVksRUFBRTtNQUNaQyxPQUFPLEVBQ0wsK0ZBQStGO01BQ2pHQyxVQUFVLEVBQUU7SUFDZCxDQUFDO0lBQ0QsV0FBVyxFQUFFLHNEQUFzRDtJQUNuRUMsV0FBVyxFQUFFO0VBQ2YsQ0FBQztBQUNIIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xccHJvcGVydGllcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBwcm9wZXJ0aWVzXG5wcm9wZXJ0aWVzLmRpc3BsYXlOYW1lID0gJ3Byb3BlcnRpZXMnXG5wcm9wZXJ0aWVzLmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24gcHJvcGVydGllcyhQcmlzbSkge1xuICBQcmlzbS5sYW5ndWFnZXMucHJvcGVydGllcyA9IHtcbiAgICBjb21tZW50OiAvXlsgXFx0XSpbIyFdLiokL20sXG4gICAgJ2F0dHItdmFsdWUnOiB7XG4gICAgICBwYXR0ZXJuOlxuICAgICAgICAvKF5bIFxcdF0qKD86XFxcXCg/OlxcclxcbnxbXFxzXFxTXSl8W15cXFxcXFxzOj1dKSsoPzogKls9Ol0gKig/ISApfCApKSg/OlxcXFwoPzpcXHJcXG58W1xcc1xcU10pfFteXFxcXFxcclxcbl0pKy9tLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgIH0sXG4gICAgJ2F0dHItbmFtZSc6IC9eWyBcXHRdKig/OlxcXFwoPzpcXHJcXG58W1xcc1xcU10pfFteXFxcXFxcczo9XSkrKD89ICpbPTpdfCApL20sXG4gICAgcHVuY3R1YXRpb246IC9bPTpdL1xuICB9XG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInByb3BlcnRpZXMiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImxhbmd1YWdlcyIsImNvbW1lbnQiLCJwYXR0ZXJuIiwibG9va2JlaGluZCIsInB1bmN0dWF0aW9uIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/properties.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/protobuf.js":
/*!*************************************************!*\
  !*** ./node_modules/refractor/lang/protobuf.js ***!
  \*************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = protobuf;\nprotobuf.displayName = 'protobuf';\nprotobuf.aliases = [];\nfunction protobuf(Prism) {\n  ;\n  (function (Prism) {\n    var builtinTypes = /\\b(?:bool|bytes|double|s?fixed(?:32|64)|float|[su]?int(?:32|64)|string)\\b/;\n    Prism.languages.protobuf = Prism.languages.extend('clike', {\n      'class-name': [{\n        pattern: /(\\b(?:enum|extend|message|service)\\s+)[A-Za-z_]\\w*(?=\\s*\\{)/,\n        lookbehind: true\n      }, {\n        pattern: /(\\b(?:rpc\\s+\\w+|returns)\\s*\\(\\s*(?:stream\\s+)?)\\.?[A-Za-z_]\\w*(?:\\.[A-Za-z_]\\w*)*(?=\\s*\\))/,\n        lookbehind: true\n      }],\n      keyword: /\\b(?:enum|extend|extensions|import|message|oneof|option|optional|package|public|repeated|required|reserved|returns|rpc(?=\\s+\\w)|service|stream|syntax|to)\\b(?!\\s*=\\s*\\d)/,\n      \"function\": /\\b[a-z_]\\w*(?=\\s*\\()/i\n    });\n    Prism.languages.insertBefore('protobuf', 'operator', {\n      map: {\n        pattern: /\\bmap<\\s*[\\w.]+\\s*,\\s*[\\w.]+\\s*>(?=\\s+[a-z_]\\w*\\s*[=;])/i,\n        alias: 'class-name',\n        inside: {\n          punctuation: /[<>.,]/,\n          builtin: builtinTypes\n        }\n      },\n      builtin: builtinTypes,\n      'positional-class-name': {\n        pattern: /(?:\\b|\\B\\.)[a-z_]\\w*(?:\\.[a-z_]\\w*)*(?=\\s+[a-z_]\\w*\\s*[=;])/i,\n        alias: 'class-name',\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      annotation: {\n        pattern: /(\\[\\s*)[a-z_]\\w*(?=\\s*=)/i,\n        lookbehind: true\n      }\n    });\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvcHJvdG9idWYuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxRQUFRO0FBQ3pCQSxRQUFRLENBQUNDLFdBQVcsR0FBRyxVQUFVO0FBQ2pDRCxRQUFRLENBQUNFLE9BQU8sR0FBRyxFQUFFO0FBQ3JCLFNBQVNGLFFBQVFBLENBQUNHLEtBQUssRUFBRTtFQUN2QjtFQUFDLENBQUMsVUFBVUEsS0FBSyxFQUFFO0lBQ2pCLElBQUlDLFlBQVksR0FDZCwyRUFBMkU7SUFDN0VELEtBQUssQ0FBQ0UsU0FBUyxDQUFDTCxRQUFRLEdBQUdHLEtBQUssQ0FBQ0UsU0FBUyxDQUFDQyxNQUFNLENBQUMsT0FBTyxFQUFFO01BQ3pELFlBQVksRUFBRSxDQUNaO1FBQ0VDLE9BQU8sRUFDTCw2REFBNkQ7UUFDL0RDLFVBQVUsRUFBRTtNQUNkLENBQUMsRUFDRDtRQUNFRCxPQUFPLEVBQ0wsNEZBQTRGO1FBQzlGQyxVQUFVLEVBQUU7TUFDZCxDQUFDLENBQ0Y7TUFDREMsT0FBTyxFQUNMLDBLQUEwSztNQUM1SyxZQUFVO0lBQ1osQ0FBQyxDQUFDO0lBQ0ZOLEtBQUssQ0FBQ0UsU0FBUyxDQUFDSyxZQUFZLENBQUMsVUFBVSxFQUFFLFVBQVUsRUFBRTtNQUNuREMsR0FBRyxFQUFFO1FBQ0hKLE9BQU8sRUFBRSwwREFBMEQ7UUFDbkVLLEtBQUssRUFBRSxZQUFZO1FBQ25CQyxNQUFNLEVBQUU7VUFDTkMsV0FBVyxFQUFFLFFBQVE7VUFDckJDLE9BQU8sRUFBRVg7UUFDWDtNQUNGLENBQUM7TUFDRFcsT0FBTyxFQUFFWCxZQUFZO01BQ3JCLHVCQUF1QixFQUFFO1FBQ3ZCRyxPQUFPLEVBQUUsOERBQThEO1FBQ3ZFSyxLQUFLLEVBQUUsWUFBWTtRQUNuQkMsTUFBTSxFQUFFO1VBQ05DLFdBQVcsRUFBRTtRQUNmO01BQ0YsQ0FBQztNQUNERSxVQUFVLEVBQUU7UUFDVlQsT0FBTyxFQUFFLDJCQUEyQjtRQUNwQ0MsVUFBVSxFQUFFO01BQ2Q7SUFDRixDQUFDLENBQUM7RUFDSixDQUFDLEVBQUVMLEtBQUssQ0FBQztBQUNYIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xccHJvdG9idWYuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gcHJvdG9idWZcbnByb3RvYnVmLmRpc3BsYXlOYW1lID0gJ3Byb3RvYnVmJ1xucHJvdG9idWYuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBwcm90b2J1ZihQcmlzbSkge1xuICA7KGZ1bmN0aW9uIChQcmlzbSkge1xuICAgIHZhciBidWlsdGluVHlwZXMgPVxuICAgICAgL1xcYig/OmJvb2x8Ynl0ZXN8ZG91YmxlfHM/Zml4ZWQoPzozMnw2NCl8ZmxvYXR8W3N1XT9pbnQoPzozMnw2NCl8c3RyaW5nKVxcYi9cbiAgICBQcmlzbS5sYW5ndWFnZXMucHJvdG9idWYgPSBQcmlzbS5sYW5ndWFnZXMuZXh0ZW5kKCdjbGlrZScsIHtcbiAgICAgICdjbGFzcy1uYW1lJzogW1xuICAgICAgICB7XG4gICAgICAgICAgcGF0dGVybjpcbiAgICAgICAgICAgIC8oXFxiKD86ZW51bXxleHRlbmR8bWVzc2FnZXxzZXJ2aWNlKVxccyspW0EtWmEtel9dXFx3Kig/PVxccypcXHspLyxcbiAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwYXR0ZXJuOlxuICAgICAgICAgICAgLyhcXGIoPzpycGNcXHMrXFx3K3xyZXR1cm5zKVxccypcXChcXHMqKD86c3RyZWFtXFxzKyk/KVxcLj9bQS1aYS16X11cXHcqKD86XFwuW0EtWmEtel9dXFx3KikqKD89XFxzKlxcKSkvLFxuICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIGtleXdvcmQ6XG4gICAgICAgIC9cXGIoPzplbnVtfGV4dGVuZHxleHRlbnNpb25zfGltcG9ydHxtZXNzYWdlfG9uZW9mfG9wdGlvbnxvcHRpb25hbHxwYWNrYWdlfHB1YmxpY3xyZXBlYXRlZHxyZXF1aXJlZHxyZXNlcnZlZHxyZXR1cm5zfHJwYyg/PVxccytcXHcpfHNlcnZpY2V8c3RyZWFtfHN5bnRheHx0bylcXGIoPyFcXHMqPVxccypcXGQpLyxcbiAgICAgIGZ1bmN0aW9uOiAvXFxiW2Etel9dXFx3Kig/PVxccypcXCgpL2lcbiAgICB9KVxuICAgIFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ3Byb3RvYnVmJywgJ29wZXJhdG9yJywge1xuICAgICAgbWFwOiB7XG4gICAgICAgIHBhdHRlcm46IC9cXGJtYXA8XFxzKltcXHcuXStcXHMqLFxccypbXFx3Ll0rXFxzKj4oPz1cXHMrW2Etel9dXFx3KlxccypbPTtdKS9pLFxuICAgICAgICBhbGlhczogJ2NsYXNzLW5hbWUnLFxuICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICBwdW5jdHVhdGlvbjogL1s8Pi4sXS8sXG4gICAgICAgICAgYnVpbHRpbjogYnVpbHRpblR5cGVzXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBidWlsdGluOiBidWlsdGluVHlwZXMsXG4gICAgICAncG9zaXRpb25hbC1jbGFzcy1uYW1lJzoge1xuICAgICAgICBwYXR0ZXJuOiAvKD86XFxifFxcQlxcLilbYS16X11cXHcqKD86XFwuW2Etel9dXFx3KikqKD89XFxzK1thLXpfXVxcdypcXHMqWz07XSkvaSxcbiAgICAgICAgYWxpYXM6ICdjbGFzcy1uYW1lJyxcbiAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgcHVuY3R1YXRpb246IC9cXC4vXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBhbm5vdGF0aW9uOiB7XG4gICAgICAgIHBhdHRlcm46IC8oXFxbXFxzKilbYS16X11cXHcqKD89XFxzKj0pL2ksXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH1cbiAgICB9KVxuICB9KShQcmlzbSlcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicHJvdG9idWYiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImJ1aWx0aW5UeXBlcyIsImxhbmd1YWdlcyIsImV4dGVuZCIsInBhdHRlcm4iLCJsb29rYmVoaW5kIiwia2V5d29yZCIsImluc2VydEJlZm9yZSIsIm1hcCIsImFsaWFzIiwiaW5zaWRlIiwicHVuY3R1YXRpb24iLCJidWlsdGluIiwiYW5ub3RhdGlvbiJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/protobuf.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/psl.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/psl.js ***!
  \********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = psl;\npsl.displayName = 'psl';\npsl.aliases = [];\nfunction psl(Prism) {\n  Prism.languages.psl = {\n    comment: {\n      pattern: /#.*/,\n      greedy: true\n    },\n    string: {\n      pattern: /\"(?:\\\\.|[^\\\\\"])*\"/,\n      greedy: true,\n      inside: {\n        symbol: /\\\\[ntrbA-Z\"\\\\]/\n      }\n    },\n    'heredoc-string': {\n      pattern: /<<<([a-zA-Z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?\\1\\b/,\n      alias: 'string',\n      greedy: true\n    },\n    keyword: /\\b(?:__multi|__single|case|default|do|else|elsif|exit|export|for|foreach|function|if|last|line|local|next|requires|return|switch|until|while|word)\\b/,\n    constant: /\\b(?:ALARM|CHART_ADD_GRAPH|CHART_DELETE_GRAPH|CHART_DESTROY|CHART_LOAD|CHART_PRINT|EOF|OFFLINE|OK|PSL_PROF_LOG|R_CHECK_HORIZ|R_CHECK_VERT|R_CLICKER|R_COLUMN|R_FRAME|R_ICON|R_LABEL|R_LABEL_CENTER|R_LIST_MULTIPLE|R_LIST_MULTIPLE_ND|R_LIST_SINGLE|R_LIST_SINGLE_ND|R_MENU|R_POPUP|R_POPUP_SCROLLED|R_RADIO_HORIZ|R_RADIO_VERT|R_ROW|R_SCALE_HORIZ|R_SCALE_VERT|R_SEP_HORIZ|R_SEP_VERT|R_SPINNER|R_TEXT_FIELD|R_TEXT_FIELD_LABEL|R_TOGGLE|TRIM_LEADING|TRIM_LEADING_AND_TRAILING|TRIM_REDUNDANT|TRIM_TRAILING|VOID|WARN)\\b/,\n    \"boolean\": /\\b(?:FALSE|False|NO|No|TRUE|True|YES|Yes|false|no|true|yes)\\b/,\n    variable: /\\b(?:PslDebug|errno|exit_status)\\b/,\n    builtin: {\n      pattern: /\\b(?:PslExecute|PslFunctionCall|PslFunctionExists|PslSetOptions|_snmp_debug|acos|add_diary|annotate|annotate_get|ascii_to_ebcdic|asctime|asin|atan|atexit|batch_set|blackout|cat|ceil|chan_exists|change_state|close|code_cvt|cond_signal|cond_wait|console_type|convert_base|convert_date|convert_locale_date|cos|cosh|create|date|dcget_text|destroy|destroy_lock|dget_text|difference|dump_hist|ebcdic_to_ascii|encrypt|event_archive|event_catalog_get|event_check|event_query|event_range_manage|event_range_query|event_report|event_schedule|event_trigger|event_trigger2|execute|exists|exp|fabs|file|floor|fmod|fopen|fseek|ftell|full_discovery|get|get_chan_info|get_ranges|get_text|get_vars|getenv|gethostinfo|getpid|getpname|grep|history|history_get_retention|in_transition|index|int|internal|intersection|is_var|isnumber|join|kill|length|lines|lock|lock_info|log|log10|loge|matchline|msg_check|msg_get_format|msg_get_severity|msg_printf|msg_sprintf|ntharg|nthargf|nthline|nthlinef|num_bytes|num_consoles|pconfig|popen|poplines|pow|print|printf|proc_exists|process|random|read|readln|refresh_parameters|remote_check|remote_close|remote_event_query|remote_event_trigger|remote_file_send|remote_open|remove|replace|rindex|sec_check_priv|sec_store_get|sec_store_set|set|set_alarm_ranges|set_locale|share|sin|sinh|sleep|snmp_agent_config|snmp_agent_start|snmp_agent_stop|snmp_close|snmp_config|snmp_get|snmp_get_next|snmp_h_get|snmp_h_get_next|snmp_h_set|snmp_open|snmp_set|snmp_trap_ignore|snmp_trap_listen|snmp_trap_raise_std_trap|snmp_trap_receive|snmp_trap_register_im|snmp_trap_send|snmp_walk|sopen|sort|splitline|sprintf|sqrt|srandom|str_repeat|strcasecmp|subset|substr|system|tail|tan|tanh|text_domain|time|tmpnam|tolower|toupper|trace_psl_process|trim|union|unique|unlock|unset|va_arg|va_start|write)\\b/,\n      alias: 'builtin-function'\n    },\n    'foreach-variable': {\n      pattern: /(\\bforeach\\s+(?:(?:\\w+\\b|\"(?:\\\\.|[^\\\\\"])*\")\\s+){0,2})[_a-zA-Z]\\w*(?=\\s*\\()/,\n      lookbehind: true,\n      greedy: true\n    },\n    \"function\": /\\b[_a-z]\\w*\\b(?=\\s*\\()/i,\n    number: /\\b(?:0x[0-9a-f]+|\\d+(?:\\.\\d+)?)\\b/i,\n    operator: /--|\\+\\+|&&=?|\\|\\|=?|<<=?|>>=?|[=!]~|[-+*/%&|^!=<>]=?|\\.|[:?]/,\n    punctuation: /[(){}\\[\\];,]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvcHNsLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsR0FBRztBQUNwQkEsR0FBRyxDQUFDQyxXQUFXLEdBQUcsS0FBSztBQUN2QkQsR0FBRyxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNoQixTQUFTRixHQUFHQSxDQUFDRyxLQUFLLEVBQUU7RUFDbEJBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixHQUFHLEdBQUc7SUFDcEJLLE9BQU8sRUFBRTtNQUNQQyxPQUFPLEVBQUUsS0FBSztNQUNkQyxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0RDLE1BQU0sRUFBRTtNQUNORixPQUFPLEVBQUUsbUJBQW1CO01BQzVCQyxNQUFNLEVBQUUsSUFBSTtNQUNaRSxNQUFNLEVBQUU7UUFDTkMsTUFBTSxFQUFFO01BQ1Y7SUFDRixDQUFDO0lBQ0QsZ0JBQWdCLEVBQUU7TUFDaEJKLE9BQU8sRUFBRSwyQ0FBMkM7TUFDcERLLEtBQUssRUFBRSxRQUFRO01BQ2ZKLE1BQU0sRUFBRTtJQUNWLENBQUM7SUFDREssT0FBTyxFQUNMLHNKQUFzSjtJQUN4SkMsUUFBUSxFQUNOLDZmQUE2ZjtJQUMvZixXQUFTLCtEQUErRDtJQUN4RUMsUUFBUSxFQUFFLG9DQUFvQztJQUM5Q0MsT0FBTyxFQUFFO01BQ1BULE9BQU8sRUFDTCx1d0RBQXV3RDtNQUN6d0RLLEtBQUssRUFBRTtJQUNULENBQUM7SUFDRCxrQkFBa0IsRUFBRTtNQUNsQkwsT0FBTyxFQUNMLDRFQUE0RTtNQUM5RVUsVUFBVSxFQUFFLElBQUk7TUFDaEJULE1BQU0sRUFBRTtJQUNWLENBQUM7SUFDRCxZQUFVLHlCQUF5QjtJQUNuQ1UsTUFBTSxFQUFFLG9DQUFvQztJQUM1Q0MsUUFBUSxFQUFFLDhEQUE4RDtJQUN4RUMsV0FBVyxFQUFFO0VBQ2YsQ0FBQztBQUNIIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xccHNsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBzbFxucHNsLmRpc3BsYXlOYW1lID0gJ3BzbCdcbnBzbC5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIHBzbChQcmlzbSkge1xuICBQcmlzbS5sYW5ndWFnZXMucHNsID0ge1xuICAgIGNvbW1lbnQ6IHtcbiAgICAgIHBhdHRlcm46IC8jLiovLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICBzdHJpbmc6IHtcbiAgICAgIHBhdHRlcm46IC9cIig/OlxcXFwufFteXFxcXFwiXSkqXCIvLFxuICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgIHN5bWJvbDogL1xcXFxbbnRyYkEtWlwiXFxcXF0vXG4gICAgICB9XG4gICAgfSxcbiAgICAnaGVyZWRvYy1zdHJpbmcnOiB7XG4gICAgICBwYXR0ZXJuOiAvPDw8KFthLXpBLVpfXVxcdyopW1xcclxcbl0oPzouKltcXHJcXG5dKSo/XFwxXFxiLyxcbiAgICAgIGFsaWFzOiAnc3RyaW5nJyxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAga2V5d29yZDpcbiAgICAgIC9cXGIoPzpfX211bHRpfF9fc2luZ2xlfGNhc2V8ZGVmYXVsdHxkb3xlbHNlfGVsc2lmfGV4aXR8ZXhwb3J0fGZvcnxmb3JlYWNofGZ1bmN0aW9ufGlmfGxhc3R8bGluZXxsb2NhbHxuZXh0fHJlcXVpcmVzfHJldHVybnxzd2l0Y2h8dW50aWx8d2hpbGV8d29yZClcXGIvLFxuICAgIGNvbnN0YW50OlxuICAgICAgL1xcYig/OkFMQVJNfENIQVJUX0FERF9HUkFQSHxDSEFSVF9ERUxFVEVfR1JBUEh8Q0hBUlRfREVTVFJPWXxDSEFSVF9MT0FEfENIQVJUX1BSSU5UfEVPRnxPRkZMSU5FfE9LfFBTTF9QUk9GX0xPR3xSX0NIRUNLX0hPUklafFJfQ0hFQ0tfVkVSVHxSX0NMSUNLRVJ8Ul9DT0xVTU58Ul9GUkFNRXxSX0lDT058Ul9MQUJFTHxSX0xBQkVMX0NFTlRFUnxSX0xJU1RfTVVMVElQTEV8Ul9MSVNUX01VTFRJUExFX05EfFJfTElTVF9TSU5HTEV8Ul9MSVNUX1NJTkdMRV9ORHxSX01FTlV8Ul9QT1BVUHxSX1BPUFVQX1NDUk9MTEVEfFJfUkFESU9fSE9SSVp8Ul9SQURJT19WRVJUfFJfUk9XfFJfU0NBTEVfSE9SSVp8Ul9TQ0FMRV9WRVJUfFJfU0VQX0hPUklafFJfU0VQX1ZFUlR8Ul9TUElOTkVSfFJfVEVYVF9GSUVMRHxSX1RFWFRfRklFTERfTEFCRUx8Ul9UT0dHTEV8VFJJTV9MRUFESU5HfFRSSU1fTEVBRElOR19BTkRfVFJBSUxJTkd8VFJJTV9SRURVTkRBTlR8VFJJTV9UUkFJTElOR3xWT0lEfFdBUk4pXFxiLyxcbiAgICBib29sZWFuOiAvXFxiKD86RkFMU0V8RmFsc2V8Tk98Tm98VFJVRXxUcnVlfFlFU3xZZXN8ZmFsc2V8bm98dHJ1ZXx5ZXMpXFxiLyxcbiAgICB2YXJpYWJsZTogL1xcYig/OlBzbERlYnVnfGVycm5vfGV4aXRfc3RhdHVzKVxcYi8sXG4gICAgYnVpbHRpbjoge1xuICAgICAgcGF0dGVybjpcbiAgICAgICAgL1xcYig/OlBzbEV4ZWN1dGV8UHNsRnVuY3Rpb25DYWxsfFBzbEZ1bmN0aW9uRXhpc3RzfFBzbFNldE9wdGlvbnN8X3NubXBfZGVidWd8YWNvc3xhZGRfZGlhcnl8YW5ub3RhdGV8YW5ub3RhdGVfZ2V0fGFzY2lpX3RvX2ViY2RpY3xhc2N0aW1lfGFzaW58YXRhbnxhdGV4aXR8YmF0Y2hfc2V0fGJsYWNrb3V0fGNhdHxjZWlsfGNoYW5fZXhpc3RzfGNoYW5nZV9zdGF0ZXxjbG9zZXxjb2RlX2N2dHxjb25kX3NpZ25hbHxjb25kX3dhaXR8Y29uc29sZV90eXBlfGNvbnZlcnRfYmFzZXxjb252ZXJ0X2RhdGV8Y29udmVydF9sb2NhbGVfZGF0ZXxjb3N8Y29zaHxjcmVhdGV8ZGF0ZXxkY2dldF90ZXh0fGRlc3Ryb3l8ZGVzdHJveV9sb2NrfGRnZXRfdGV4dHxkaWZmZXJlbmNlfGR1bXBfaGlzdHxlYmNkaWNfdG9fYXNjaWl8ZW5jcnlwdHxldmVudF9hcmNoaXZlfGV2ZW50X2NhdGFsb2dfZ2V0fGV2ZW50X2NoZWNrfGV2ZW50X3F1ZXJ5fGV2ZW50X3JhbmdlX21hbmFnZXxldmVudF9yYW5nZV9xdWVyeXxldmVudF9yZXBvcnR8ZXZlbnRfc2NoZWR1bGV8ZXZlbnRfdHJpZ2dlcnxldmVudF90cmlnZ2VyMnxleGVjdXRlfGV4aXN0c3xleHB8ZmFic3xmaWxlfGZsb29yfGZtb2R8Zm9wZW58ZnNlZWt8ZnRlbGx8ZnVsbF9kaXNjb3Zlcnl8Z2V0fGdldF9jaGFuX2luZm98Z2V0X3Jhbmdlc3xnZXRfdGV4dHxnZXRfdmFyc3xnZXRlbnZ8Z2V0aG9zdGluZm98Z2V0cGlkfGdldHBuYW1lfGdyZXB8aGlzdG9yeXxoaXN0b3J5X2dldF9yZXRlbnRpb258aW5fdHJhbnNpdGlvbnxpbmRleHxpbnR8aW50ZXJuYWx8aW50ZXJzZWN0aW9ufGlzX3Zhcnxpc251bWJlcnxqb2lufGtpbGx8bGVuZ3RofGxpbmVzfGxvY2t8bG9ja19pbmZvfGxvZ3xsb2cxMHxsb2dlfG1hdGNobGluZXxtc2dfY2hlY2t8bXNnX2dldF9mb3JtYXR8bXNnX2dldF9zZXZlcml0eXxtc2dfcHJpbnRmfG1zZ19zcHJpbnRmfG50aGFyZ3xudGhhcmdmfG50aGxpbmV8bnRobGluZWZ8bnVtX2J5dGVzfG51bV9jb25zb2xlc3xwY29uZmlnfHBvcGVufHBvcGxpbmVzfHBvd3xwcmludHxwcmludGZ8cHJvY19leGlzdHN8cHJvY2Vzc3xyYW5kb218cmVhZHxyZWFkbG58cmVmcmVzaF9wYXJhbWV0ZXJzfHJlbW90ZV9jaGVja3xyZW1vdGVfY2xvc2V8cmVtb3RlX2V2ZW50X3F1ZXJ5fHJlbW90ZV9ldmVudF90cmlnZ2VyfHJlbW90ZV9maWxlX3NlbmR8cmVtb3RlX29wZW58cmVtb3ZlfHJlcGxhY2V8cmluZGV4fHNlY19jaGVja19wcml2fHNlY19zdG9yZV9nZXR8c2VjX3N0b3JlX3NldHxzZXR8c2V0X2FsYXJtX3Jhbmdlc3xzZXRfbG9jYWxlfHNoYXJlfHNpbnxzaW5ofHNsZWVwfHNubXBfYWdlbnRfY29uZmlnfHNubXBfYWdlbnRfc3RhcnR8c25tcF9hZ2VudF9zdG9wfHNubXBfY2xvc2V8c25tcF9jb25maWd8c25tcF9nZXR8c25tcF9nZXRfbmV4dHxzbm1wX2hfZ2V0fHNubXBfaF9nZXRfbmV4dHxzbm1wX2hfc2V0fHNubXBfb3Blbnxzbm1wX3NldHxzbm1wX3RyYXBfaWdub3JlfHNubXBfdHJhcF9saXN0ZW58c25tcF90cmFwX3JhaXNlX3N0ZF90cmFwfHNubXBfdHJhcF9yZWNlaXZlfHNubXBfdHJhcF9yZWdpc3Rlcl9pbXxzbm1wX3RyYXBfc2VuZHxzbm1wX3dhbGt8c29wZW58c29ydHxzcGxpdGxpbmV8c3ByaW50ZnxzcXJ0fHNyYW5kb218c3RyX3JlcGVhdHxzdHJjYXNlY21wfHN1YnNldHxzdWJzdHJ8c3lzdGVtfHRhaWx8dGFufHRhbmh8dGV4dF9kb21haW58dGltZXx0bXBuYW18dG9sb3dlcnx0b3VwcGVyfHRyYWNlX3BzbF9wcm9jZXNzfHRyaW18dW5pb258dW5pcXVlfHVubG9ja3x1bnNldHx2YV9hcmd8dmFfc3RhcnR8d3JpdGUpXFxiLyxcbiAgICAgIGFsaWFzOiAnYnVpbHRpbi1mdW5jdGlvbidcbiAgICB9LFxuICAgICdmb3JlYWNoLXZhcmlhYmxlJzoge1xuICAgICAgcGF0dGVybjpcbiAgICAgICAgLyhcXGJmb3JlYWNoXFxzKyg/Oig/OlxcdytcXGJ8XCIoPzpcXFxcLnxbXlxcXFxcIl0pKlwiKVxccyspezAsMn0pW19hLXpBLVpdXFx3Kig/PVxccypcXCgpLyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBncmVlZHk6IHRydWVcbiAgICB9LFxuICAgIGZ1bmN0aW9uOiAvXFxiW19hLXpdXFx3KlxcYig/PVxccypcXCgpL2ksXG4gICAgbnVtYmVyOiAvXFxiKD86MHhbMC05YS1mXSt8XFxkKyg/OlxcLlxcZCspPylcXGIvaSxcbiAgICBvcGVyYXRvcjogLy0tfFxcK1xcK3wmJj0/fFxcfFxcfD0/fDw8PT98Pj49P3xbPSFdfnxbLSsqLyUmfF4hPTw+XT0/fFxcLnxbOj9dLyxcbiAgICBwdW5jdHVhdGlvbjogL1soKXt9XFxbXFxdOyxdL1xuICB9XG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInBzbCIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwiY29tbWVudCIsInBhdHRlcm4iLCJncmVlZHkiLCJzdHJpbmciLCJpbnNpZGUiLCJzeW1ib2wiLCJhbGlhcyIsImtleXdvcmQiLCJjb25zdGFudCIsInZhcmlhYmxlIiwiYnVpbHRpbiIsImxvb2tiZWhpbmQiLCJudW1iZXIiLCJvcGVyYXRvciIsInB1bmN0dWF0aW9uIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/psl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/pug.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/pug.js ***!
  \********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = pug;\npug.displayName = 'pug';\npug.aliases = [];\nfunction pug(Prism) {\n  ;\n  (function (Prism) {\n    // TODO:\n    // - Add CSS highlighting inside <style> tags\n    // - Add support for multi-line code blocks\n    // - Add support for interpolation #{} and !{}\n    // - Add support for tag interpolation #[]\n    // - Add explicit support for plain text using |\n    // - Add support for markup embedded in plain text\n    Prism.languages.pug = {\n      // Multiline stuff should appear before the rest\n      // This handles both single-line and multi-line comments\n      comment: {\n        pattern: /(^([\\t ]*))\\/\\/.*(?:(?:\\r?\\n|\\r)\\2[\\t ].+)*/m,\n        lookbehind: true\n      },\n      // All the tag-related part is in lookbehind\n      // so that it can be highlighted by the \"tag\" pattern\n      'multiline-script': {\n        pattern: /(^([\\t ]*)script\\b.*\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/m,\n        lookbehind: true,\n        inside: Prism.languages.javascript\n      },\n      // See at the end of the file for known filters\n      filter: {\n        pattern: /(^([\\t ]*)):.+(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/m,\n        lookbehind: true,\n        inside: {\n          'filter-name': {\n            pattern: /^:[\\w-]+/,\n            alias: 'variable'\n          },\n          text: /\\S[\\s\\S]*/\n        }\n      },\n      'multiline-plain-text': {\n        pattern: /(^([\\t ]*)[\\w\\-#.]+\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/m,\n        lookbehind: true\n      },\n      markup: {\n        pattern: /(^[\\t ]*)<.+/m,\n        lookbehind: true,\n        inside: Prism.languages.markup\n      },\n      doctype: {\n        pattern: /((?:^|\\n)[\\t ]*)doctype(?: .+)?/,\n        lookbehind: true\n      },\n      // This handle all conditional and loop keywords\n      'flow-control': {\n        pattern: /(^[\\t ]*)(?:case|default|each|else|if|unless|when|while)\\b(?: .+)?/m,\n        lookbehind: true,\n        inside: {\n          each: {\n            pattern: /^each .+? in\\b/,\n            inside: {\n              keyword: /\\b(?:each|in)\\b/,\n              punctuation: /,/\n            }\n          },\n          branch: {\n            pattern: /^(?:case|default|else|if|unless|when|while)\\b/,\n            alias: 'keyword'\n          },\n          rest: Prism.languages.javascript\n        }\n      },\n      keyword: {\n        pattern: /(^[\\t ]*)(?:append|block|extends|include|prepend)\\b.+/m,\n        lookbehind: true\n      },\n      mixin: [\n      // Declaration\n      {\n        pattern: /(^[\\t ]*)mixin .+/m,\n        lookbehind: true,\n        inside: {\n          keyword: /^mixin/,\n          \"function\": /\\w+(?=\\s*\\(|\\s*$)/,\n          punctuation: /[(),.]/\n        }\n      },\n      // Usage\n      {\n        pattern: /(^[\\t ]*)\\+.+/m,\n        lookbehind: true,\n        inside: {\n          name: {\n            pattern: /^\\+\\w+/,\n            alias: 'function'\n          },\n          rest: Prism.languages.javascript\n        }\n      }],\n      script: {\n        pattern: /(^[\\t ]*script(?:(?:&[^(]+)?\\([^)]+\\))*[\\t ]).+/m,\n        lookbehind: true,\n        inside: Prism.languages.javascript\n      },\n      'plain-text': {\n        pattern: /(^[\\t ]*(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?[\\t ]).+/m,\n        lookbehind: true\n      },\n      tag: {\n        pattern: /(^[\\t ]*)(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?:?/m,\n        lookbehind: true,\n        inside: {\n          attributes: [{\n            pattern: /&[^(]+\\([^)]+\\)/,\n            inside: Prism.languages.javascript\n          }, {\n            pattern: /\\([^)]+\\)/,\n            inside: {\n              'attr-value': {\n                pattern: /(=\\s*(?!\\s))(?:\\{[^}]*\\}|[^,)\\r\\n]+)/,\n                lookbehind: true,\n                inside: Prism.languages.javascript\n              },\n              'attr-name': /[\\w-]+(?=\\s*!?=|\\s*[,)])/,\n              punctuation: /[!=(),]+/\n            }\n          }],\n          punctuation: /:/,\n          'attr-id': /#[\\w\\-]+/,\n          'attr-class': /\\.[\\w\\-]+/\n        }\n      },\n      code: [{\n        pattern: /(^[\\t ]*(?:-|!?=)).+/m,\n        lookbehind: true,\n        inside: Prism.languages.javascript\n      }],\n      punctuation: /[.\\-!=|]+/\n    };\n    var filter_pattern = /(^([\\t ]*)):<filter_name>(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/.source; // Non exhaustive list of available filters and associated languages\n    var filters = [{\n      filter: 'atpl',\n      language: 'twig'\n    }, {\n      filter: 'coffee',\n      language: 'coffeescript'\n    }, 'ejs', 'handlebars', 'less', 'livescript', 'markdown', {\n      filter: 'sass',\n      language: 'scss'\n    }, 'stylus'];\n    var all_filters = {};\n    for (var i = 0, l = filters.length; i < l; i++) {\n      var filter = filters[i];\n      filter = typeof filter === 'string' ? {\n        filter: filter,\n        language: filter\n      } : filter;\n      if (Prism.languages[filter.language]) {\n        all_filters['filter-' + filter.filter] = {\n          pattern: RegExp(filter_pattern.replace('<filter_name>', function () {\n            return filter.filter;\n          }), 'm'),\n          lookbehind: true,\n          inside: {\n            'filter-name': {\n              pattern: /^:[\\w-]+/,\n              alias: 'variable'\n            },\n            text: {\n              pattern: /\\S[\\s\\S]*/,\n              alias: [filter.language, 'language-' + filter.language],\n              inside: Prism.languages[filter.language]\n            }\n          }\n        };\n      }\n    }\n    Prism.languages.insertBefore('pug', 'filter', all_filters);\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/pug.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/puppet.js":
/*!***********************************************!*\
  !*** ./node_modules/refractor/lang/puppet.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = puppet;\npuppet.displayName = 'puppet';\npuppet.aliases = [];\nfunction puppet(Prism) {\n  ;\n  (function (Prism) {\n    Prism.languages.puppet = {\n      heredoc: [\n      // Matches the content of a quoted heredoc string (subject to interpolation)\n      {\n        pattern: /(@\\(\"([^\"\\r\\n\\/):]+)\"(?:\\/[nrts$uL]*)?\\).*(?:\\r?\\n|\\r))(?:.*(?:\\r?\\n|\\r(?!\\n)))*?[ \\t]*(?:\\|[ \\t]*)?(?:-[ \\t]*)?\\2/,\n        lookbehind: true,\n        alias: 'string',\n        inside: {\n          // Matches the end tag\n          punctuation: /(?=\\S).*\\S(?= *$)/ // See interpolation below\n        }\n      },\n      // Matches the content of an unquoted heredoc string (no interpolation)\n      {\n        pattern: /(@\\(([^\"\\r\\n\\/):]+)(?:\\/[nrts$uL]*)?\\).*(?:\\r?\\n|\\r))(?:.*(?:\\r?\\n|\\r(?!\\n)))*?[ \\t]*(?:\\|[ \\t]*)?(?:-[ \\t]*)?\\2/,\n        lookbehind: true,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          // Matches the end tag\n          punctuation: /(?=\\S).*\\S(?= *$)/\n        }\n      },\n      // Matches the start tag of heredoc strings\n      {\n        pattern: /@\\(\"?(?:[^\"\\r\\n\\/):]+)\"?(?:\\/[nrts$uL]*)?\\)/,\n        alias: 'string',\n        inside: {\n          punctuation: {\n            pattern: /(\\().+?(?=\\))/,\n            lookbehind: true\n          }\n        }\n      }],\n      'multiline-comment': {\n        pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n        lookbehind: true,\n        greedy: true,\n        alias: 'comment'\n      },\n      regex: {\n        // Must be prefixed with the keyword \"node\" or a non-word char\n        pattern: /((?:\\bnode\\s+|[~=\\(\\[\\{,]\\s*|[=+]>\\s*|^\\s*))\\/(?:[^\\/\\\\]|\\\\[\\s\\S])+\\/(?:[imx]+\\b|\\B)/,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          // Extended regexes must have the x flag. They can contain single-line comments.\n          'extended-regex': {\n            pattern: /^\\/(?:[^\\/\\\\]|\\\\[\\s\\S])+\\/[im]*x[im]*$/,\n            inside: {\n              comment: /#.*/\n            }\n          }\n        }\n      },\n      comment: {\n        pattern: /(^|[^\\\\])#.*/,\n        lookbehind: true,\n        greedy: true\n      },\n      string: {\n        // Allow for one nested level of double quotes inside interpolation\n        pattern: /([\"'])(?:\\$\\{(?:[^'\"}]|([\"'])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2)+\\}|\\$(?!\\{)|(?!\\1)[^\\\\$]|\\\\[\\s\\S])*\\1/,\n        greedy: true,\n        inside: {\n          'double-quoted': {\n            pattern: /^\"[\\s\\S]*\"$/,\n            inside: {\n              // See interpolation below\n            }\n          }\n        }\n      },\n      variable: {\n        pattern: /\\$(?:::)?\\w+(?:::\\w+)*/,\n        inside: {\n          punctuation: /::/\n        }\n      },\n      'attr-name': /(?:\\b\\w+|\\*)(?=\\s*=>)/,\n      \"function\": [{\n        pattern: /(\\.)(?!\\d)\\w+/,\n        lookbehind: true\n      }, /\\b(?:contain|debug|err|fail|include|info|notice|realize|require|tag|warning)\\b|\\b(?!\\d)\\w+(?=\\()/],\n      number: /\\b(?:0x[a-f\\d]+|\\d+(?:\\.\\d+)?(?:e-?\\d+)?)\\b/i,\n      \"boolean\": /\\b(?:false|true)\\b/,\n      // Includes words reserved for future use\n      keyword: /\\b(?:application|attr|case|class|consumes|default|define|else|elsif|function|if|import|inherits|node|private|produces|type|undef|unless)\\b/,\n      datatype: {\n        pattern: /\\b(?:Any|Array|Boolean|Callable|Catalogentry|Class|Collection|Data|Default|Enum|Float|Hash|Integer|NotUndef|Numeric|Optional|Pattern|Regexp|Resource|Runtime|Scalar|String|Struct|Tuple|Type|Undef|Variant)\\b/,\n        alias: 'symbol'\n      },\n      operator: /=[=~>]?|![=~]?|<(?:<\\|?|[=~|-])?|>[>=]?|->?|~>|\\|>?>?|[*\\/%+?]|\\b(?:and|in|or)\\b/,\n      punctuation: /[\\[\\]{}().,;]|:+/\n    };\n    var interpolation = [{\n      // Allow for one nested level of braces inside interpolation\n      pattern: /(^|[^\\\\])\\$\\{(?:[^'\"{}]|\\{[^}]*\\}|([\"'])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2)+\\}/,\n      lookbehind: true,\n      inside: {\n        'short-variable': {\n          // Negative look-ahead prevent wrong highlighting of functions\n          pattern: /(^\\$\\{)(?!\\w+\\()(?:::)?\\w+(?:::\\w+)*/,\n          lookbehind: true,\n          alias: 'variable',\n          inside: {\n            punctuation: /::/\n          }\n        },\n        delimiter: {\n          pattern: /^\\$/,\n          alias: 'variable'\n        },\n        rest: Prism.languages.puppet\n      }\n    }, {\n      pattern: /(^|[^\\\\])\\$(?:::)?\\w+(?:::\\w+)*/,\n      lookbehind: true,\n      alias: 'variable',\n      inside: {\n        punctuation: /::/\n      }\n    }];\n    Prism.languages.puppet['heredoc'][0].inside.interpolation = interpolation;\n    Prism.languages.puppet['string'].inside['double-quoted'].inside.interpolation = interpolation;\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/puppet.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/pure.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/pure.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = pure;\npure.displayName = 'pure';\npure.aliases = [];\nfunction pure(Prism) {\n  ;\n  (function (Prism) {\n    // https://agraef.github.io/pure-docs/pure.html#lexical-matters\n    Prism.languages.pure = {\n      comment: [{\n        pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n        lookbehind: true\n      }, {\n        pattern: /(^|[^\\\\:])\\/\\/.*/,\n        lookbehind: true\n      }, /#!.+/],\n      'inline-lang': {\n        pattern: /%<[\\s\\S]+?%>/,\n        greedy: true,\n        inside: {\n          lang: {\n            pattern: /(^%< *)-\\*-.+?-\\*-/,\n            lookbehind: true,\n            alias: 'comment'\n          },\n          delimiter: {\n            pattern: /^%<.*|%>$/,\n            alias: 'punctuation'\n          }\n        }\n      },\n      string: {\n        pattern: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n        greedy: true\n      },\n      number: {\n        // The look-behind prevents wrong highlighting of the .. operator\n        pattern: /((?:\\.\\.)?)(?:\\b(?:inf|nan)\\b|\\b0x[\\da-f]+|(?:\\b(?:0b)?\\d+(?:\\.\\d+)?|\\B\\.\\d+)(?:e[+-]?\\d+)?L?)/i,\n        lookbehind: true\n      },\n      keyword: /\\b(?:NULL|ans|break|bt|case|catch|cd|clear|const|def|del|dump|else|end|exit|extern|false|force|help|if|infix[lr]?|interface|let|ls|mem|namespace|nonfix|of|otherwise|outfix|override|postfix|prefix|private|public|pwd|quit|run|save|show|stats|then|throw|trace|true|type|underride|using|when|with)\\b/,\n      \"function\": /\\b(?:abs|add_(?:addr|constdef|(?:fundef|interface|macdef|typedef)(?:_at)?|vardef)|all|any|applp?|arity|bigintp?|blob(?:_crc|_size|p)?|boolp?|byte_c?string(?:_pointer)?|byte_(?:matrix|pointer)|calloc|cat|catmap|ceil|char[ps]?|check_ptrtag|chr|clear_sentry|clearsym|closurep?|cmatrixp?|cols?|colcat(?:map)?|colmap|colrev|colvector(?:p|seq)?|complex(?:_float_(?:matrix|pointer)|_matrix(?:_view)?|_pointer|p)?|conj|cookedp?|cst|cstring(?:_(?:dup|list|vector))?|curry3?|cyclen?|del_(?:constdef|fundef|interface|macdef|typedef|vardef)|delete|diag(?:mat)?|dim|dmatrixp?|do|double(?:_matrix(?:_view)?|_pointer|p)?|dowith3?|drop|dropwhile|eval(?:cmd)?|exactp|filter|fix|fixity|flip|float(?:_matrix|_pointer)|floor|fold[lr]1?|frac|free|funp?|functionp?|gcd|get(?:_(?:byte|constdef|double|float|fundef|int(?:64)?|interface(?:_typedef)?|long|macdef|pointer|ptrtag|sentry|short|string|typedef|vardef))?|globsym|hash|head|id|im|imatrixp?|index|inexactp|infp|init|insert|int(?:_matrix(?:_view)?|_pointer|p)?|int64_(?:matrix|pointer)|integerp?|iteraten?|iterwhile|join|keys?|lambdap?|last(?:err(?:pos)?)?|lcd|list[2p]?|listmap|make_ptrtag|malloc|map|matcat|matrixp?|max|member|min|nanp|nargs|nmatrixp?|null|numberp?|ord|pack(?:ed)?|pointer(?:_cast|_tag|_type|p)?|pow|pred|ptrtag|put(?:_(?:byte|double|float|int(?:64)?|long|pointer|short|string))?|rationalp?|re|realp?|realloc|recordp?|redim|reduce(?:_with)?|refp?|repeatn?|reverse|rlistp?|round|rows?|rowcat(?:map)?|rowmap|rowrev|rowvector(?:p|seq)?|same|scan[lr]1?|sentry|sgn|short_(?:matrix|pointer)|slice|smatrixp?|sort|split|str|strcat|stream|stride|string(?:_(?:dup|list|vector)|p)?|subdiag(?:mat)?|submat|subseq2?|substr|succ|supdiag(?:mat)?|symbolp?|tail|take|takewhile|thunkp?|transpose|trunc|tuplep?|typep|ubyte|uint(?:64)?|ulong|uncurry3?|unref|unzip3?|update|ushort|vals?|varp?|vector(?:p|seq)?|void|zip3?|zipwith3?)\\b/,\n      special: {\n        pattern: /\\b__[a-z]+__\\b/i,\n        alias: 'builtin'\n      },\n      // Any combination of operator chars can be an operator\n      // eslint-disable-next-line no-misleading-character-class\n      operator: /(?:[!\"#$%&'*+,\\-.\\/:<=>?@\\\\^`|~\\u00a1-\\u00bf\\u00d7-\\u00f7\\u20d0-\\u2bff]|\\b_+\\b)+|\\b(?:and|div|mod|not|or)\\b/,\n      // FIXME: How can we prevent | and , to be highlighted as operator when they are used alone?\n      punctuation: /[(){}\\[\\];,|]/\n    };\n    var inlineLanguages = ['c', {\n      lang: 'c++',\n      alias: 'cpp'\n    }, 'fortran'];\n    var inlineLanguageRe = /%< *-\\*- *<lang>\\d* *-\\*-[\\s\\S]+?%>/.source;\n    inlineLanguages.forEach(function (lang) {\n      var alias = lang;\n      if (typeof lang !== 'string') {\n        alias = lang.alias;\n        lang = lang.lang;\n      }\n      if (Prism.languages[alias]) {\n        var o = {};\n        o['inline-lang-' + alias] = {\n          pattern: RegExp(inlineLanguageRe.replace('<lang>', lang.replace(/([.+*?\\/\\\\(){}\\[\\]])/g, '\\\\$1')), 'i'),\n          inside: Prism.util.clone(Prism.languages.pure['inline-lang'].inside)\n        };\n        o['inline-lang-' + alias].inside.rest = Prism.util.clone(Prism.languages[alias]);\n        Prism.languages.insertBefore('pure', 'inline-lang', o);\n      }\n    }); // C is the default inline language\n    if (Prism.languages.c) {\n      Prism.languages.pure['inline-lang'].inside.rest = Prism.util.clone(Prism.languages.c);\n    }\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/pure.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/purebasic.js":
/*!**************************************************!*\
  !*** ./node_modules/refractor/lang/purebasic.js ***!
  \**************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = purebasic;\npurebasic.displayName = 'purebasic';\npurebasic.aliases = [];\nfunction purebasic(Prism) {\n  /*\n  Original Code by Bas Groothedde\n  !!MANY THANKS!! I never would have made this, regex and me will never be best friends ;)\n  ==> https://codepen.io/ImagineProgramming/details/JYydBy/\n  slightly changed to pass all tests\n  */\n  // PureBasic support, steal stuff from ansi-c\n  Prism.languages.purebasic = Prism.languages.extend('clike', {\n    comment: /;.*/,\n    keyword: /\\b(?:align|and|as|break|calldebugger|case|compilercase|compilerdefault|compilerelse|compilerelseif|compilerendif|compilerendselect|compilererror|compilerif|compilerselect|continue|data|datasection|debug|debuglevel|declare|declarec|declarecdll|declaredll|declaremodule|default|define|dim|disableasm|disabledebugger|disableexplicit|else|elseif|enableasm|enabledebugger|enableexplicit|end|enddatasection|enddeclaremodule|endenumeration|endif|endimport|endinterface|endmacro|endmodule|endprocedure|endselect|endstructure|endstructureunion|endwith|enumeration|extends|fakereturn|for|foreach|forever|global|gosub|goto|if|import|importc|includebinary|includefile|includepath|interface|macro|module|newlist|newmap|next|not|or|procedure|procedurec|procedurecdll|proceduredll|procedurereturn|protected|prototype|prototypec|read|redim|repeat|restore|return|runtime|select|shared|static|step|structure|structureunion|swap|threaded|to|until|wend|while|with|xincludefile|xor)\\b/i,\n    \"function\": /\\b\\w+(?:\\.\\w+)?\\s*(?=\\()/,\n    number: /(?:\\$[\\da-f]+|\\b-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)(?:e[+-]?\\d+)?)\\b/i,\n    operator: /(?:@\\*?|\\?|\\*)\\w+|-[>-]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|?\\||[~^%?*/@]/\n  });\n  Prism.languages.insertBefore('purebasic', 'keyword', {\n    tag: /#\\w+\\$?/,\n    asm: {\n      pattern: /(^[\\t ]*)!.*/m,\n      lookbehind: true,\n      alias: 'tag',\n      inside: {\n        comment: /;.*/,\n        string: {\n          pattern: /([\"'`])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n          greedy: true\n        },\n        // Anonymous label references, i.e.: jmp @b\n        'label-reference-anonymous': {\n          pattern: /(!\\s*j[a-z]+\\s+)@[fb]/i,\n          lookbehind: true,\n          alias: 'fasm-label'\n        },\n        // Named label reference, i.e.: jne label1\n        'label-reference-addressed': {\n          pattern: /(!\\s*j[a-z]+\\s+)[A-Z._?$@][\\w.?$@~#]*/i,\n          lookbehind: true,\n          alias: 'fasm-label'\n        },\n        keyword: [/\\b(?:extern|global)\\b[^;\\r\\n]*/i, /\\b(?:CPU|DEFAULT|FLOAT)\\b.*/],\n        \"function\": {\n          pattern: /^([\\t ]*!\\s*)[\\da-z]+(?=\\s|$)/im,\n          lookbehind: true\n        },\n        'function-inline': {\n          pattern: /(:\\s*)[\\da-z]+(?=\\s)/i,\n          lookbehind: true,\n          alias: 'function'\n        },\n        label: {\n          pattern: /^([\\t ]*!\\s*)[A-Za-z._?$@][\\w.?$@~#]*(?=:)/m,\n          lookbehind: true,\n          alias: 'fasm-label'\n        },\n        register: /\\b(?:st\\d|[xyz]mm\\d\\d?|[cdt]r\\d|r\\d\\d?[bwd]?|[er]?[abcd]x|[abcd][hl]|[er]?(?:bp|di|si|sp)|[cdefgs]s|mm\\d+)\\b/i,\n        number: /(?:\\b|-|(?=\\$))(?:0[hx](?:[\\da-f]*\\.)?[\\da-f]+(?:p[+-]?\\d+)?|\\d[\\da-f]+[hx]|\\$\\d[\\da-f]*|0[oq][0-7]+|[0-7]+[oq]|0[by][01]+|[01]+[by]|0[dt]\\d+|(?:\\d+(?:\\.\\d+)?|\\.\\d+)(?:\\.?e[+-]?\\d+)?[dt]?)\\b/i,\n        operator: /[\\[\\]*+\\-/%<>=&|$!,.:]/\n      }\n    }\n  });\n  delete Prism.languages.purebasic['class-name'];\n  delete Prism.languages.purebasic['boolean'];\n  Prism.languages.pbfasm = Prism.languages['purebasic'];\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvcHVyZWJhc2ljLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsU0FBUztBQUMxQkEsU0FBUyxDQUFDQyxXQUFXLEdBQUcsV0FBVztBQUNuQ0QsU0FBUyxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUN0QixTQUFTRixTQUFTQSxDQUFDRyxLQUFLLEVBQUU7RUFDeEI7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0U7RUFDQUEsS0FBSyxDQUFDQyxTQUFTLENBQUNKLFNBQVMsR0FBR0csS0FBSyxDQUFDQyxTQUFTLENBQUNDLE1BQU0sQ0FBQyxPQUFPLEVBQUU7SUFDMURDLE9BQU8sRUFBRSxLQUFLO0lBQ2RDLE9BQU8sRUFDTCxzOEJBQXM4QjtJQUN4OEIsWUFBVSwwQkFBMEI7SUFDcENDLE1BQU0sRUFBRSw2REFBNkQ7SUFDckVDLFFBQVEsRUFDTjtFQUNKLENBQUMsQ0FBQztFQUNGTixLQUFLLENBQUNDLFNBQVMsQ0FBQ00sWUFBWSxDQUFDLFdBQVcsRUFBRSxTQUFTLEVBQUU7SUFDbkRDLEdBQUcsRUFBRSxTQUFTO0lBQ2RDLEdBQUcsRUFBRTtNQUNIQyxPQUFPLEVBQUUsZUFBZTtNQUN4QkMsVUFBVSxFQUFFLElBQUk7TUFDaEJDLEtBQUssRUFBRSxLQUFLO01BQ1pDLE1BQU0sRUFBRTtRQUNOVixPQUFPLEVBQUUsS0FBSztRQUNkVyxNQUFNLEVBQUU7VUFDTkosT0FBTyxFQUFFLG1DQUFtQztVQUM1Q0ssTUFBTSxFQUFFO1FBQ1YsQ0FBQztRQUNEO1FBQ0EsMkJBQTJCLEVBQUU7VUFDM0JMLE9BQU8sRUFBRSx3QkFBd0I7VUFDakNDLFVBQVUsRUFBRSxJQUFJO1VBQ2hCQyxLQUFLLEVBQUU7UUFDVCxDQUFDO1FBQ0Q7UUFDQSwyQkFBMkIsRUFBRTtVQUMzQkYsT0FBTyxFQUFFLHdDQUF3QztVQUNqREMsVUFBVSxFQUFFLElBQUk7VUFDaEJDLEtBQUssRUFBRTtRQUNULENBQUM7UUFDRFIsT0FBTyxFQUFFLENBQ1AsaUNBQWlDLEVBQ2pDLDZCQUE2QixDQUM5QjtRQUNELFlBQVU7VUFDUk0sT0FBTyxFQUFFLGlDQUFpQztVQUMxQ0MsVUFBVSxFQUFFO1FBQ2QsQ0FBQztRQUNELGlCQUFpQixFQUFFO1VBQ2pCRCxPQUFPLEVBQUUsdUJBQXVCO1VBQ2hDQyxVQUFVLEVBQUUsSUFBSTtVQUNoQkMsS0FBSyxFQUFFO1FBQ1QsQ0FBQztRQUNESSxLQUFLLEVBQUU7VUFDTE4sT0FBTyxFQUFFLDZDQUE2QztVQUN0REMsVUFBVSxFQUFFLElBQUk7VUFDaEJDLEtBQUssRUFBRTtRQUNULENBQUM7UUFDREssUUFBUSxFQUNOLCtHQUErRztRQUNqSFosTUFBTSxFQUNKLGlNQUFpTTtRQUNuTUMsUUFBUSxFQUFFO01BQ1o7SUFDRjtFQUNGLENBQUMsQ0FBQztFQUNGLE9BQU9OLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixTQUFTLENBQUMsWUFBWSxDQUFDO0VBQzlDLE9BQU9HLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixTQUFTLENBQUMsU0FBUyxDQUFDO0VBQzNDRyxLQUFLLENBQUNDLFNBQVMsQ0FBQ2lCLE1BQU0sR0FBR2xCLEtBQUssQ0FBQ0MsU0FBUyxDQUFDLFdBQVcsQ0FBQztBQUN2RCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXHB1cmViYXNpYy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBwdXJlYmFzaWNcbnB1cmViYXNpYy5kaXNwbGF5TmFtZSA9ICdwdXJlYmFzaWMnXG5wdXJlYmFzaWMuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBwdXJlYmFzaWMoUHJpc20pIHtcbiAgLypcbk9yaWdpbmFsIENvZGUgYnkgQmFzIEdyb290aGVkZGVcbiEhTUFOWSBUSEFOS1MhISBJIG5ldmVyIHdvdWxkIGhhdmUgbWFkZSB0aGlzLCByZWdleCBhbmQgbWUgd2lsbCBuZXZlciBiZSBiZXN0IGZyaWVuZHMgOylcbj09PiBodHRwczovL2NvZGVwZW4uaW8vSW1hZ2luZVByb2dyYW1taW5nL2RldGFpbHMvSll5ZEJ5L1xuc2xpZ2h0bHkgY2hhbmdlZCB0byBwYXNzIGFsbCB0ZXN0c1xuKi9cbiAgLy8gUHVyZUJhc2ljIHN1cHBvcnQsIHN0ZWFsIHN0dWZmIGZyb20gYW5zaS1jXG4gIFByaXNtLmxhbmd1YWdlcy5wdXJlYmFzaWMgPSBQcmlzbS5sYW5ndWFnZXMuZXh0ZW5kKCdjbGlrZScsIHtcbiAgICBjb21tZW50OiAvOy4qLyxcbiAgICBrZXl3b3JkOlxuICAgICAgL1xcYig/OmFsaWdufGFuZHxhc3xicmVha3xjYWxsZGVidWdnZXJ8Y2FzZXxjb21waWxlcmNhc2V8Y29tcGlsZXJkZWZhdWx0fGNvbXBpbGVyZWxzZXxjb21waWxlcmVsc2VpZnxjb21waWxlcmVuZGlmfGNvbXBpbGVyZW5kc2VsZWN0fGNvbXBpbGVyZXJyb3J8Y29tcGlsZXJpZnxjb21waWxlcnNlbGVjdHxjb250aW51ZXxkYXRhfGRhdGFzZWN0aW9ufGRlYnVnfGRlYnVnbGV2ZWx8ZGVjbGFyZXxkZWNsYXJlY3xkZWNsYXJlY2RsbHxkZWNsYXJlZGxsfGRlY2xhcmVtb2R1bGV8ZGVmYXVsdHxkZWZpbmV8ZGltfGRpc2FibGVhc218ZGlzYWJsZWRlYnVnZ2VyfGRpc2FibGVleHBsaWNpdHxlbHNlfGVsc2VpZnxlbmFibGVhc218ZW5hYmxlZGVidWdnZXJ8ZW5hYmxlZXhwbGljaXR8ZW5kfGVuZGRhdGFzZWN0aW9ufGVuZGRlY2xhcmVtb2R1bGV8ZW5kZW51bWVyYXRpb258ZW5kaWZ8ZW5kaW1wb3J0fGVuZGludGVyZmFjZXxlbmRtYWNyb3xlbmRtb2R1bGV8ZW5kcHJvY2VkdXJlfGVuZHNlbGVjdHxlbmRzdHJ1Y3R1cmV8ZW5kc3RydWN0dXJldW5pb258ZW5kd2l0aHxlbnVtZXJhdGlvbnxleHRlbmRzfGZha2VyZXR1cm58Zm9yfGZvcmVhY2h8Zm9yZXZlcnxnbG9iYWx8Z29zdWJ8Z290b3xpZnxpbXBvcnR8aW1wb3J0Y3xpbmNsdWRlYmluYXJ5fGluY2x1ZGVmaWxlfGluY2x1ZGVwYXRofGludGVyZmFjZXxtYWNyb3xtb2R1bGV8bmV3bGlzdHxuZXdtYXB8bmV4dHxub3R8b3J8cHJvY2VkdXJlfHByb2NlZHVyZWN8cHJvY2VkdXJlY2RsbHxwcm9jZWR1cmVkbGx8cHJvY2VkdXJlcmV0dXJufHByb3RlY3RlZHxwcm90b3R5cGV8cHJvdG90eXBlY3xyZWFkfHJlZGltfHJlcGVhdHxyZXN0b3JlfHJldHVybnxydW50aW1lfHNlbGVjdHxzaGFyZWR8c3RhdGljfHN0ZXB8c3RydWN0dXJlfHN0cnVjdHVyZXVuaW9ufHN3YXB8dGhyZWFkZWR8dG98dW50aWx8d2VuZHx3aGlsZXx3aXRofHhpbmNsdWRlZmlsZXx4b3IpXFxiL2ksXG4gICAgZnVuY3Rpb246IC9cXGJcXHcrKD86XFwuXFx3Kyk/XFxzKig/PVxcKCkvLFxuICAgIG51bWJlcjogLyg/OlxcJFtcXGRhLWZdK3xcXGItPyg/OlxcZCsoPzpcXC5cXGQrKT98XFwuXFxkKykoPzplWystXT9cXGQrKT8pXFxiL2ksXG4gICAgb3BlcmF0b3I6XG4gICAgICAvKD86QFxcKj98XFw/fFxcKilcXHcrfC1bPi1dP3xcXCtcXCs/fCE9P3w8PD89P3w+Pj89P3w9PT98JiY/fFxcfD9cXHx8W35eJT8qL0BdL1xuICB9KVxuICBQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdwdXJlYmFzaWMnLCAna2V5d29yZCcsIHtcbiAgICB0YWc6IC8jXFx3K1xcJD8vLFxuICAgIGFzbToge1xuICAgICAgcGF0dGVybjogLyheW1xcdCBdKikhLiovbSxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBhbGlhczogJ3RhZycsXG4gICAgICBpbnNpZGU6IHtcbiAgICAgICAgY29tbWVudDogLzsuKi8sXG4gICAgICAgIHN0cmluZzoge1xuICAgICAgICAgIHBhdHRlcm46IC8oW1wiJ2BdKSg/OlxcXFwufCg/IVxcMSlbXlxcXFxcXHJcXG5dKSpcXDEvLFxuICAgICAgICAgIGdyZWVkeTogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICAvLyBBbm9ueW1vdXMgbGFiZWwgcmVmZXJlbmNlcywgaS5lLjogam1wIEBiXG4gICAgICAgICdsYWJlbC1yZWZlcmVuY2UtYW5vbnltb3VzJzoge1xuICAgICAgICAgIHBhdHRlcm46IC8oIVxccypqW2Etel0rXFxzKylAW2ZiXS9pLFxuICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgICAgYWxpYXM6ICdmYXNtLWxhYmVsJ1xuICAgICAgICB9LFxuICAgICAgICAvLyBOYW1lZCBsYWJlbCByZWZlcmVuY2UsIGkuZS46IGpuZSBsYWJlbDFcbiAgICAgICAgJ2xhYmVsLXJlZmVyZW5jZS1hZGRyZXNzZWQnOiB7XG4gICAgICAgICAgcGF0dGVybjogLyghXFxzKmpbYS16XStcXHMrKVtBLVouXz8kQF1bXFx3Lj8kQH4jXSovaSxcbiAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAgIGFsaWFzOiAnZmFzbS1sYWJlbCdcbiAgICAgICAgfSxcbiAgICAgICAga2V5d29yZDogW1xuICAgICAgICAgIC9cXGIoPzpleHRlcm58Z2xvYmFsKVxcYlteO1xcclxcbl0qL2ksXG4gICAgICAgICAgL1xcYig/OkNQVXxERUZBVUxUfEZMT0FUKVxcYi4qL1xuICAgICAgICBdLFxuICAgICAgICBmdW5jdGlvbjoge1xuICAgICAgICAgIHBhdHRlcm46IC9eKFtcXHQgXSohXFxzKilbXFxkYS16XSsoPz1cXHN8JCkvaW0sXG4gICAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICAnZnVuY3Rpb24taW5saW5lJzoge1xuICAgICAgICAgIHBhdHRlcm46IC8oOlxccyopW1xcZGEtel0rKD89XFxzKS9pLFxuICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgICAgYWxpYXM6ICdmdW5jdGlvbidcbiAgICAgICAgfSxcbiAgICAgICAgbGFiZWw6IHtcbiAgICAgICAgICBwYXR0ZXJuOiAvXihbXFx0IF0qIVxccyopW0EtWmEtei5fPyRAXVtcXHcuPyRAfiNdKig/PTopL20sXG4gICAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgICBhbGlhczogJ2Zhc20tbGFiZWwnXG4gICAgICAgIH0sXG4gICAgICAgIHJlZ2lzdGVyOlxuICAgICAgICAgIC9cXGIoPzpzdFxcZHxbeHl6XW1tXFxkXFxkP3xbY2R0XXJcXGR8clxcZFxcZD9bYndkXT98W2VyXT9bYWJjZF14fFthYmNkXVtobF18W2VyXT8oPzpicHxkaXxzaXxzcCl8W2NkZWZnc11zfG1tXFxkKylcXGIvaSxcbiAgICAgICAgbnVtYmVyOlxuICAgICAgICAgIC8oPzpcXGJ8LXwoPz1cXCQpKSg/OjBbaHhdKD86W1xcZGEtZl0qXFwuKT9bXFxkYS1mXSsoPzpwWystXT9cXGQrKT98XFxkW1xcZGEtZl0rW2h4XXxcXCRcXGRbXFxkYS1mXSp8MFtvcV1bMC03XSt8WzAtN10rW29xXXwwW2J5XVswMV0rfFswMV0rW2J5XXwwW2R0XVxcZCt8KD86XFxkKyg/OlxcLlxcZCspP3xcXC5cXGQrKSg/OlxcLj9lWystXT9cXGQrKT9bZHRdPylcXGIvaSxcbiAgICAgICAgb3BlcmF0b3I6IC9bXFxbXFxdKitcXC0vJTw+PSZ8JCEsLjpdL1xuICAgICAgfVxuICAgIH1cbiAgfSlcbiAgZGVsZXRlIFByaXNtLmxhbmd1YWdlcy5wdXJlYmFzaWNbJ2NsYXNzLW5hbWUnXVxuICBkZWxldGUgUHJpc20ubGFuZ3VhZ2VzLnB1cmViYXNpY1snYm9vbGVhbiddXG4gIFByaXNtLmxhbmd1YWdlcy5wYmZhc20gPSBQcmlzbS5sYW5ndWFnZXNbJ3B1cmViYXNpYyddXG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInB1cmViYXNpYyIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwiZXh0ZW5kIiwiY29tbWVudCIsImtleXdvcmQiLCJudW1iZXIiLCJvcGVyYXRvciIsImluc2VydEJlZm9yZSIsInRhZyIsImFzbSIsInBhdHRlcm4iLCJsb29rYmVoaW5kIiwiYWxpYXMiLCJpbnNpZGUiLCJzdHJpbmciLCJncmVlZHkiLCJsYWJlbCIsInJlZ2lzdGVyIiwicGJmYXNtIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/purebasic.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/purescript.js":
/*!***************************************************!*\
  !*** ./node_modules/refractor/lang/purescript.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar refractorHaskell = __webpack_require__(/*! ./haskell.js */ \"(ssr)/./node_modules/refractor/lang/haskell.js\");\nmodule.exports = purescript;\npurescript.displayName = 'purescript';\npurescript.aliases = ['purs'];\nfunction purescript(Prism) {\n  Prism.register(refractorHaskell);\n  Prism.languages.purescript = Prism.languages.extend('haskell', {\n    keyword: /\\b(?:ado|case|class|data|derive|do|else|forall|if|in|infixl|infixr|instance|let|module|newtype|of|primitive|then|type|where)\\b|∀/,\n    'import-statement': {\n      // The imported or hidden names are not included in this import\n      // statement. This is because we want to highlight those exactly like\n      // we do for the names in the program.\n      pattern: /(^[\\t ]*)import\\s+[A-Z][\\w']*(?:\\.[A-Z][\\w']*)*(?:\\s+as\\s+[A-Z][\\w']*(?:\\.[A-Z][\\w']*)*)?(?:\\s+hiding\\b)?/m,\n      lookbehind: true,\n      inside: {\n        keyword: /\\b(?:as|hiding|import)\\b/,\n        punctuation: /\\./\n      }\n    },\n    // These are builtin functions only. Constructors are highlighted later as a constant.\n    builtin: /\\b(?:absurd|add|ap|append|apply|between|bind|bottom|clamp|compare|comparing|compose|conj|const|degree|discard|disj|div|eq|flap|flip|gcd|identity|ifM|join|lcm|liftA1|liftM1|map|max|mempty|min|mod|mul|negate|not|notEq|one|otherwise|recip|show|sub|top|unit|unless|unlessM|void|when|whenM|zero)\\b/,\n    operator: [\n    // Infix operators\n    Prism.languages.haskell.operator[0],\n    // ASCII operators\n    Prism.languages.haskell.operator[2],\n    // All UTF16 Unicode operator symbols\n    // This regex is equivalent to /(?=[\\x80-\\uFFFF])[\\p{gc=Math_Symbol}\\p{gc=Currency_Symbol}\\p{Modifier_Symbol}\\p{Other_Symbol}]/u\n    // See https://github.com/PrismJS/prism/issues/3006 for more details.\n    /[\\xa2-\\xa6\\xa8\\xa9\\xac\\xae-\\xb1\\xb4\\xb8\\xd7\\xf7\\u02c2-\\u02c5\\u02d2-\\u02df\\u02e5-\\u02eb\\u02ed\\u02ef-\\u02ff\\u0375\\u0384\\u0385\\u03f6\\u0482\\u058d-\\u058f\\u0606-\\u0608\\u060b\\u060e\\u060f\\u06de\\u06e9\\u06fd\\u06fe\\u07f6\\u07fe\\u07ff\\u09f2\\u09f3\\u09fa\\u09fb\\u0af1\\u0b70\\u0bf3-\\u0bfa\\u0c7f\\u0d4f\\u0d79\\u0e3f\\u0f01-\\u0f03\\u0f13\\u0f15-\\u0f17\\u0f1a-\\u0f1f\\u0f34\\u0f36\\u0f38\\u0fbe-\\u0fc5\\u0fc7-\\u0fcc\\u0fce\\u0fcf\\u0fd5-\\u0fd8\\u109e\\u109f\\u1390-\\u1399\\u166d\\u17db\\u1940\\u19de-\\u19ff\\u1b61-\\u1b6a\\u1b74-\\u1b7c\\u1fbd\\u1fbf-\\u1fc1\\u1fcd-\\u1fcf\\u1fdd-\\u1fdf\\u1fed-\\u1fef\\u1ffd\\u1ffe\\u2044\\u2052\\u207a-\\u207c\\u208a-\\u208c\\u20a0-\\u20bf\\u2100\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116-\\u2118\\u211e-\\u2123\\u2125\\u2127\\u2129\\u212e\\u213a\\u213b\\u2140-\\u2144\\u214a-\\u214d\\u214f\\u218a\\u218b\\u2190-\\u2307\\u230c-\\u2328\\u232b-\\u2426\\u2440-\\u244a\\u249c-\\u24e9\\u2500-\\u2767\\u2794-\\u27c4\\u27c7-\\u27e5\\u27f0-\\u2982\\u2999-\\u29d7\\u29dc-\\u29fb\\u29fe-\\u2b73\\u2b76-\\u2b95\\u2b97-\\u2bff\\u2ce5-\\u2cea\\u2e50\\u2e51\\u2e80-\\u2e99\\u2e9b-\\u2ef3\\u2f00-\\u2fd5\\u2ff0-\\u2ffb\\u3004\\u3012\\u3013\\u3020\\u3036\\u3037\\u303e\\u303f\\u309b\\u309c\\u3190\\u3191\\u3196-\\u319f\\u31c0-\\u31e3\\u3200-\\u321e\\u322a-\\u3247\\u3250\\u3260-\\u327f\\u328a-\\u32b0\\u32c0-\\u33ff\\u4dc0-\\u4dff\\ua490-\\ua4c6\\ua700-\\ua716\\ua720\\ua721\\ua789\\ua78a\\ua828-\\ua82b\\ua836-\\ua839\\uaa77-\\uaa79\\uab5b\\uab6a\\uab6b\\ufb29\\ufbb2-\\ufbc1\\ufdfc\\ufdfd\\ufe62\\ufe64-\\ufe66\\ufe69\\uff04\\uff0b\\uff1c-\\uff1e\\uff3e\\uff40\\uff5c\\uff5e\\uffe0-\\uffe6\\uffe8-\\uffee\\ufffc\\ufffd]/]\n  });\n  Prism.languages.purs = Prism.languages.purescript;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvcHVyZXNjcmlwdC5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFDWixJQUFJQSxnQkFBZ0IsR0FBR0MsbUJBQU8sQ0FBQyxvRUFBYyxDQUFDO0FBQzlDQyxNQUFNLENBQUNDLE9BQU8sR0FBR0MsVUFBVTtBQUMzQkEsVUFBVSxDQUFDQyxXQUFXLEdBQUcsWUFBWTtBQUNyQ0QsVUFBVSxDQUFDRSxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUM7QUFDN0IsU0FBU0YsVUFBVUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ3pCQSxLQUFLLENBQUNDLFFBQVEsQ0FBQ1IsZ0JBQWdCLENBQUM7RUFDaENPLEtBQUssQ0FBQ0UsU0FBUyxDQUFDTCxVQUFVLEdBQUdHLEtBQUssQ0FBQ0UsU0FBUyxDQUFDQyxNQUFNLENBQUMsU0FBUyxFQUFFO0lBQzdEQyxPQUFPLEVBQ0wsa0lBQWtJO0lBQ3BJLGtCQUFrQixFQUFFO01BQ2xCO01BQ0E7TUFDQTtNQUNBQyxPQUFPLEVBQ0wsNEdBQTRHO01BQzlHQyxVQUFVLEVBQUUsSUFBSTtNQUNoQkMsTUFBTSxFQUFFO1FBQ05ILE9BQU8sRUFBRSwwQkFBMEI7UUFDbkNJLFdBQVcsRUFBRTtNQUNmO0lBQ0YsQ0FBQztJQUNEO0lBQ0FDLE9BQU8sRUFDTCxzU0FBc1M7SUFDeFNDLFFBQVEsRUFBRTtJQUNSO0lBQ0FWLEtBQUssQ0FBQ0UsU0FBUyxDQUFDUyxPQUFPLENBQUNELFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFBRTtJQUNyQ1YsS0FBSyxDQUFDRSxTQUFTLENBQUNTLE9BQU8sQ0FBQ0QsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUFFO0lBQ3JDO0lBQ0E7SUFDQSw4NkNBQTg2QztFQUVsN0MsQ0FBQyxDQUFDO0VBQ0ZWLEtBQUssQ0FBQ0UsU0FBUyxDQUFDVSxJQUFJLEdBQUdaLEtBQUssQ0FBQ0UsU0FBUyxDQUFDTCxVQUFVO0FBQ25EIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xccHVyZXNjcmlwdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcbnZhciByZWZyYWN0b3JIYXNrZWxsID0gcmVxdWlyZSgnLi9oYXNrZWxsLmpzJylcbm1vZHVsZS5leHBvcnRzID0gcHVyZXNjcmlwdFxucHVyZXNjcmlwdC5kaXNwbGF5TmFtZSA9ICdwdXJlc2NyaXB0J1xucHVyZXNjcmlwdC5hbGlhc2VzID0gWydwdXJzJ11cbmZ1bmN0aW9uIHB1cmVzY3JpcHQoUHJpc20pIHtcbiAgUHJpc20ucmVnaXN0ZXIocmVmcmFjdG9ySGFza2VsbClcbiAgUHJpc20ubGFuZ3VhZ2VzLnB1cmVzY3JpcHQgPSBQcmlzbS5sYW5ndWFnZXMuZXh0ZW5kKCdoYXNrZWxsJywge1xuICAgIGtleXdvcmQ6XG4gICAgICAvXFxiKD86YWRvfGNhc2V8Y2xhc3N8ZGF0YXxkZXJpdmV8ZG98ZWxzZXxmb3JhbGx8aWZ8aW58aW5maXhsfGluZml4cnxpbnN0YW5jZXxsZXR8bW9kdWxlfG5ld3R5cGV8b2Z8cHJpbWl0aXZlfHRoZW58dHlwZXx3aGVyZSlcXGJ84oiALyxcbiAgICAnaW1wb3J0LXN0YXRlbWVudCc6IHtcbiAgICAgIC8vIFRoZSBpbXBvcnRlZCBvciBoaWRkZW4gbmFtZXMgYXJlIG5vdCBpbmNsdWRlZCBpbiB0aGlzIGltcG9ydFxuICAgICAgLy8gc3RhdGVtZW50LiBUaGlzIGlzIGJlY2F1c2Ugd2Ugd2FudCB0byBoaWdobGlnaHQgdGhvc2UgZXhhY3RseSBsaWtlXG4gICAgICAvLyB3ZSBkbyBmb3IgdGhlIG5hbWVzIGluIHRoZSBwcm9ncmFtLlxuICAgICAgcGF0dGVybjpcbiAgICAgICAgLyheW1xcdCBdKilpbXBvcnRcXHMrW0EtWl1bXFx3J10qKD86XFwuW0EtWl1bXFx3J10qKSooPzpcXHMrYXNcXHMrW0EtWl1bXFx3J10qKD86XFwuW0EtWl1bXFx3J10qKSopPyg/OlxccytoaWRpbmdcXGIpPy9tLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGluc2lkZToge1xuICAgICAgICBrZXl3b3JkOiAvXFxiKD86YXN8aGlkaW5nfGltcG9ydClcXGIvLFxuICAgICAgICBwdW5jdHVhdGlvbjogL1xcLi9cbiAgICAgIH1cbiAgICB9LFxuICAgIC8vIFRoZXNlIGFyZSBidWlsdGluIGZ1bmN0aW9ucyBvbmx5LiBDb25zdHJ1Y3RvcnMgYXJlIGhpZ2hsaWdodGVkIGxhdGVyIGFzIGEgY29uc3RhbnQuXG4gICAgYnVpbHRpbjpcbiAgICAgIC9cXGIoPzphYnN1cmR8YWRkfGFwfGFwcGVuZHxhcHBseXxiZXR3ZWVufGJpbmR8Ym90dG9tfGNsYW1wfGNvbXBhcmV8Y29tcGFyaW5nfGNvbXBvc2V8Y29uanxjb25zdHxkZWdyZWV8ZGlzY2FyZHxkaXNqfGRpdnxlcXxmbGFwfGZsaXB8Z2NkfGlkZW50aXR5fGlmTXxqb2lufGxjbXxsaWZ0QTF8bGlmdE0xfG1hcHxtYXh8bWVtcHR5fG1pbnxtb2R8bXVsfG5lZ2F0ZXxub3R8bm90RXF8b25lfG90aGVyd2lzZXxyZWNpcHxzaG93fHN1Ynx0b3B8dW5pdHx1bmxlc3N8dW5sZXNzTXx2b2lkfHdoZW58d2hlbk18emVybylcXGIvLFxuICAgIG9wZXJhdG9yOiBbXG4gICAgICAvLyBJbmZpeCBvcGVyYXRvcnNcbiAgICAgIFByaXNtLmxhbmd1YWdlcy5oYXNrZWxsLm9wZXJhdG9yWzBdLCAvLyBBU0NJSSBvcGVyYXRvcnNcbiAgICAgIFByaXNtLmxhbmd1YWdlcy5oYXNrZWxsLm9wZXJhdG9yWzJdLCAvLyBBbGwgVVRGMTYgVW5pY29kZSBvcGVyYXRvciBzeW1ib2xzXG4gICAgICAvLyBUaGlzIHJlZ2V4IGlzIGVxdWl2YWxlbnQgdG8gLyg/PVtcXHg4MC1cXHVGRkZGXSlbXFxwe2djPU1hdGhfU3ltYm9sfVxccHtnYz1DdXJyZW5jeV9TeW1ib2x9XFxwe01vZGlmaWVyX1N5bWJvbH1cXHB7T3RoZXJfU3ltYm9sfV0vdVxuICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9QcmlzbUpTL3ByaXNtL2lzc3Vlcy8zMDA2IGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAvW1xceGEyLVxceGE2XFx4YThcXHhhOVxceGFjXFx4YWUtXFx4YjFcXHhiNFxceGI4XFx4ZDdcXHhmN1xcdTAyYzItXFx1MDJjNVxcdTAyZDItXFx1MDJkZlxcdTAyZTUtXFx1MDJlYlxcdTAyZWRcXHUwMmVmLVxcdTAyZmZcXHUwMzc1XFx1MDM4NFxcdTAzODVcXHUwM2Y2XFx1MDQ4MlxcdTA1OGQtXFx1MDU4ZlxcdTA2MDYtXFx1MDYwOFxcdTA2MGJcXHUwNjBlXFx1MDYwZlxcdTA2ZGVcXHUwNmU5XFx1MDZmZFxcdTA2ZmVcXHUwN2Y2XFx1MDdmZVxcdTA3ZmZcXHUwOWYyXFx1MDlmM1xcdTA5ZmFcXHUwOWZiXFx1MGFmMVxcdTBiNzBcXHUwYmYzLVxcdTBiZmFcXHUwYzdmXFx1MGQ0ZlxcdTBkNzlcXHUwZTNmXFx1MGYwMS1cXHUwZjAzXFx1MGYxM1xcdTBmMTUtXFx1MGYxN1xcdTBmMWEtXFx1MGYxZlxcdTBmMzRcXHUwZjM2XFx1MGYzOFxcdTBmYmUtXFx1MGZjNVxcdTBmYzctXFx1MGZjY1xcdTBmY2VcXHUwZmNmXFx1MGZkNS1cXHUwZmQ4XFx1MTA5ZVxcdTEwOWZcXHUxMzkwLVxcdTEzOTlcXHUxNjZkXFx1MTdkYlxcdTE5NDBcXHUxOWRlLVxcdTE5ZmZcXHUxYjYxLVxcdTFiNmFcXHUxYjc0LVxcdTFiN2NcXHUxZmJkXFx1MWZiZi1cXHUxZmMxXFx1MWZjZC1cXHUxZmNmXFx1MWZkZC1cXHUxZmRmXFx1MWZlZC1cXHUxZmVmXFx1MWZmZFxcdTFmZmVcXHUyMDQ0XFx1MjA1MlxcdTIwN2EtXFx1MjA3Y1xcdTIwOGEtXFx1MjA4Y1xcdTIwYTAtXFx1MjBiZlxcdTIxMDBcXHUyMTAxXFx1MjEwMy1cXHUyMTA2XFx1MjEwOFxcdTIxMDlcXHUyMTE0XFx1MjExNi1cXHUyMTE4XFx1MjExZS1cXHUyMTIzXFx1MjEyNVxcdTIxMjdcXHUyMTI5XFx1MjEyZVxcdTIxM2FcXHUyMTNiXFx1MjE0MC1cXHUyMTQ0XFx1MjE0YS1cXHUyMTRkXFx1MjE0ZlxcdTIxOGFcXHUyMThiXFx1MjE5MC1cXHUyMzA3XFx1MjMwYy1cXHUyMzI4XFx1MjMyYi1cXHUyNDI2XFx1MjQ0MC1cXHUyNDRhXFx1MjQ5Yy1cXHUyNGU5XFx1MjUwMC1cXHUyNzY3XFx1Mjc5NC1cXHUyN2M0XFx1MjdjNy1cXHUyN2U1XFx1MjdmMC1cXHUyOTgyXFx1Mjk5OS1cXHUyOWQ3XFx1MjlkYy1cXHUyOWZiXFx1MjlmZS1cXHUyYjczXFx1MmI3Ni1cXHUyYjk1XFx1MmI5Ny1cXHUyYmZmXFx1MmNlNS1cXHUyY2VhXFx1MmU1MFxcdTJlNTFcXHUyZTgwLVxcdTJlOTlcXHUyZTliLVxcdTJlZjNcXHUyZjAwLVxcdTJmZDVcXHUyZmYwLVxcdTJmZmJcXHUzMDA0XFx1MzAxMlxcdTMwMTNcXHUzMDIwXFx1MzAzNlxcdTMwMzdcXHUzMDNlXFx1MzAzZlxcdTMwOWJcXHUzMDljXFx1MzE5MFxcdTMxOTFcXHUzMTk2LVxcdTMxOWZcXHUzMWMwLVxcdTMxZTNcXHUzMjAwLVxcdTMyMWVcXHUzMjJhLVxcdTMyNDdcXHUzMjUwXFx1MzI2MC1cXHUzMjdmXFx1MzI4YS1cXHUzMmIwXFx1MzJjMC1cXHUzM2ZmXFx1NGRjMC1cXHU0ZGZmXFx1YTQ5MC1cXHVhNGM2XFx1YTcwMC1cXHVhNzE2XFx1YTcyMFxcdWE3MjFcXHVhNzg5XFx1YTc4YVxcdWE4MjgtXFx1YTgyYlxcdWE4MzYtXFx1YTgzOVxcdWFhNzctXFx1YWE3OVxcdWFiNWJcXHVhYjZhXFx1YWI2YlxcdWZiMjlcXHVmYmIyLVxcdWZiYzFcXHVmZGZjXFx1ZmRmZFxcdWZlNjJcXHVmZTY0LVxcdWZlNjZcXHVmZTY5XFx1ZmYwNFxcdWZmMGJcXHVmZjFjLVxcdWZmMWVcXHVmZjNlXFx1ZmY0MFxcdWZmNWNcXHVmZjVlXFx1ZmZlMC1cXHVmZmU2XFx1ZmZlOC1cXHVmZmVlXFx1ZmZmY1xcdWZmZmRdL1xuICAgIF1cbiAgfSlcbiAgUHJpc20ubGFuZ3VhZ2VzLnB1cnMgPSBQcmlzbS5sYW5ndWFnZXMucHVyZXNjcmlwdFxufVxuIl0sIm5hbWVzIjpbInJlZnJhY3Rvckhhc2tlbGwiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsInB1cmVzY3JpcHQiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsInJlZ2lzdGVyIiwibGFuZ3VhZ2VzIiwiZXh0ZW5kIiwia2V5d29yZCIsInBhdHRlcm4iLCJsb29rYmVoaW5kIiwiaW5zaWRlIiwicHVuY3R1YXRpb24iLCJidWlsdGluIiwib3BlcmF0b3IiLCJoYXNrZWxsIiwicHVycyJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/purescript.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/python.js":
/*!***********************************************!*\
  !*** ./node_modules/refractor/lang/python.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = python;\npython.displayName = 'python';\npython.aliases = ['py'];\nfunction python(Prism) {\n  Prism.languages.python = {\n    comment: {\n      pattern: /(^|[^\\\\])#.*/,\n      lookbehind: true,\n      greedy: true\n    },\n    'string-interpolation': {\n      pattern: /(?:f|fr|rf)(?:(\"\"\"|''')[\\s\\S]*?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2)/i,\n      greedy: true,\n      inside: {\n        interpolation: {\n          // \"{\" <expression> <optional \"!s\", \"!r\", or \"!a\"> <optional \":\" format specifier> \"}\"\n          pattern: /((?:^|[^{])(?:\\{\\{)*)\\{(?!\\{)(?:[^{}]|\\{(?!\\{)(?:[^{}]|\\{(?!\\{)(?:[^{}])+\\})+\\})+\\}/,\n          lookbehind: true,\n          inside: {\n            'format-spec': {\n              pattern: /(:)[^:(){}]+(?=\\}$)/,\n              lookbehind: true\n            },\n            'conversion-option': {\n              pattern: /![sra](?=[:}]$)/,\n              alias: 'punctuation'\n            },\n            rest: null\n          }\n        },\n        string: /[\\s\\S]+/\n      }\n    },\n    'triple-quoted-string': {\n      pattern: /(?:[rub]|br|rb)?(\"\"\"|''')[\\s\\S]*?\\1/i,\n      greedy: true,\n      alias: 'string'\n    },\n    string: {\n      pattern: /(?:[rub]|br|rb)?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/i,\n      greedy: true\n    },\n    \"function\": {\n      pattern: /((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/g,\n      lookbehind: true\n    },\n    'class-name': {\n      pattern: /(\\bclass\\s+)\\w+/i,\n      lookbehind: true\n    },\n    decorator: {\n      pattern: /(^[\\t ]*)@\\w+(?:\\.\\w+)*/m,\n      lookbehind: true,\n      alias: ['annotation', 'punctuation'],\n      inside: {\n        punctuation: /\\./\n      }\n    },\n    keyword: /\\b(?:_(?=\\s*:)|and|as|assert|async|await|break|case|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|match|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\\b/,\n    builtin: /\\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\\b/,\n    \"boolean\": /\\b(?:False|None|True)\\b/,\n    number: /\\b0(?:b(?:_?[01])+|o(?:_?[0-7])+|x(?:_?[a-f0-9])+)\\b|(?:\\b\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\B\\.\\d+(?:_\\d+)*)(?:e[+-]?\\d+(?:_\\d+)*)?j?(?!\\w)/i,\n    operator: /[-+%=]=?|!=|:=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,\n    punctuation: /[{}[\\];(),.:]/\n  };\n  Prism.languages.python['string-interpolation'].inside['interpolation'].inside.rest = Prism.languages.python;\n  Prism.languages.py = Prism.languages.python;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvcHl0aG9uLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsTUFBTTtBQUN2QkEsTUFBTSxDQUFDQyxXQUFXLEdBQUcsUUFBUTtBQUM3QkQsTUFBTSxDQUFDRSxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUM7QUFDdkIsU0FBU0YsTUFBTUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ3JCQSxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osTUFBTSxHQUFHO0lBQ3ZCSyxPQUFPLEVBQUU7TUFDUEMsT0FBTyxFQUFFLGNBQWM7TUFDdkJDLFVBQVUsRUFBRSxJQUFJO01BQ2hCQyxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0Qsc0JBQXNCLEVBQUU7TUFDdEJGLE9BQU8sRUFDTCxxRUFBcUU7TUFDdkVFLE1BQU0sRUFBRSxJQUFJO01BQ1pDLE1BQU0sRUFBRTtRQUNOQyxhQUFhLEVBQUU7VUFDYjtVQUNBSixPQUFPLEVBQ0wscUZBQXFGO1VBQ3ZGQyxVQUFVLEVBQUUsSUFBSTtVQUNoQkUsTUFBTSxFQUFFO1lBQ04sYUFBYSxFQUFFO2NBQ2JILE9BQU8sRUFBRSxxQkFBcUI7Y0FDOUJDLFVBQVUsRUFBRTtZQUNkLENBQUM7WUFDRCxtQkFBbUIsRUFBRTtjQUNuQkQsT0FBTyxFQUFFLGlCQUFpQjtjQUMxQkssS0FBSyxFQUFFO1lBQ1QsQ0FBQztZQUNEQyxJQUFJLEVBQUU7VUFDUjtRQUNGLENBQUM7UUFDREMsTUFBTSxFQUFFO01BQ1Y7SUFDRixDQUFDO0lBQ0Qsc0JBQXNCLEVBQUU7TUFDdEJQLE9BQU8sRUFBRSxzQ0FBc0M7TUFDL0NFLE1BQU0sRUFBRSxJQUFJO01BQ1pHLEtBQUssRUFBRTtJQUNULENBQUM7SUFDREUsTUFBTSxFQUFFO01BQ05QLE9BQU8sRUFBRSxrREFBa0Q7TUFDM0RFLE1BQU0sRUFBRTtJQUNWLENBQUM7SUFDRCxZQUFVO01BQ1JGLE9BQU8sRUFBRSwyQ0FBMkM7TUFDcERDLFVBQVUsRUFBRTtJQUNkLENBQUM7SUFDRCxZQUFZLEVBQUU7TUFDWkQsT0FBTyxFQUFFLGtCQUFrQjtNQUMzQkMsVUFBVSxFQUFFO0lBQ2QsQ0FBQztJQUNETyxTQUFTLEVBQUU7TUFDVFIsT0FBTyxFQUFFLDBCQUEwQjtNQUNuQ0MsVUFBVSxFQUFFLElBQUk7TUFDaEJJLEtBQUssRUFBRSxDQUFDLFlBQVksRUFBRSxhQUFhLENBQUM7TUFDcENGLE1BQU0sRUFBRTtRQUNOTSxXQUFXLEVBQUU7TUFDZjtJQUNGLENBQUM7SUFDREMsT0FBTyxFQUNMLHVOQUF1TjtJQUN6TkMsT0FBTyxFQUNMLHFoQkFBcWhCO0lBQ3ZoQixXQUFTLHlCQUF5QjtJQUNsQ0MsTUFBTSxFQUNKLGtKQUFrSjtJQUNwSkMsUUFBUSxFQUFFLHNEQUFzRDtJQUNoRUosV0FBVyxFQUFFO0VBQ2YsQ0FBQztFQUNEWixLQUFLLENBQUNDLFNBQVMsQ0FBQ0osTUFBTSxDQUFDLHNCQUFzQixDQUFDLENBQUNTLE1BQU0sQ0FDbkQsZUFBZSxDQUNoQixDQUFDQSxNQUFNLENBQUNHLElBQUksR0FBR1QsS0FBSyxDQUFDQyxTQUFTLENBQUNKLE1BQU07RUFDdENHLEtBQUssQ0FBQ0MsU0FBUyxDQUFDZ0IsRUFBRSxHQUFHakIsS0FBSyxDQUFDQyxTQUFTLENBQUNKLE1BQU07QUFDN0MiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxweXRob24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gcHl0aG9uXG5weXRob24uZGlzcGxheU5hbWUgPSAncHl0aG9uJ1xucHl0aG9uLmFsaWFzZXMgPSBbJ3B5J11cbmZ1bmN0aW9uIHB5dGhvbihQcmlzbSkge1xuICBQcmlzbS5sYW5ndWFnZXMucHl0aG9uID0ge1xuICAgIGNvbW1lbnQ6IHtcbiAgICAgIHBhdHRlcm46IC8oXnxbXlxcXFxdKSMuKi8sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICAnc3RyaW5nLWludGVycG9sYXRpb24nOiB7XG4gICAgICBwYXR0ZXJuOlxuICAgICAgICAvKD86ZnxmcnxyZikoPzooXCJcIlwifCcnJylbXFxzXFxTXSo/XFwxfChcInwnKSg/OlxcXFwufCg/IVxcMilbXlxcXFxcXHJcXG5dKSpcXDIpL2ksXG4gICAgICBncmVlZHk6IHRydWUsXG4gICAgICBpbnNpZGU6IHtcbiAgICAgICAgaW50ZXJwb2xhdGlvbjoge1xuICAgICAgICAgIC8vIFwie1wiIDxleHByZXNzaW9uPiA8b3B0aW9uYWwgXCIhc1wiLCBcIiFyXCIsIG9yIFwiIWFcIj4gPG9wdGlvbmFsIFwiOlwiIGZvcm1hdCBzcGVjaWZpZXI+IFwifVwiXG4gICAgICAgICAgcGF0dGVybjpcbiAgICAgICAgICAgIC8oKD86XnxbXntdKSg/Olxce1xceykqKVxceyg/IVxceykoPzpbXnt9XXxcXHsoPyFcXHspKD86W157fV18XFx7KD8hXFx7KSg/Oltee31dKStcXH0pK1xcfSkrXFx9LyxcbiAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAgIGluc2lkZToge1xuICAgICAgICAgICAgJ2Zvcm1hdC1zcGVjJzoge1xuICAgICAgICAgICAgICBwYXR0ZXJuOiAvKDopW146KCl7fV0rKD89XFx9JCkvLFxuICAgICAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ2NvbnZlcnNpb24tb3B0aW9uJzoge1xuICAgICAgICAgICAgICBwYXR0ZXJuOiAvIVtzcmFdKD89Wzp9XSQpLyxcbiAgICAgICAgICAgICAgYWxpYXM6ICdwdW5jdHVhdGlvbidcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXN0OiBudWxsXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzdHJpbmc6IC9bXFxzXFxTXSsvXG4gICAgICB9XG4gICAgfSxcbiAgICAndHJpcGxlLXF1b3RlZC1zdHJpbmcnOiB7XG4gICAgICBwYXR0ZXJuOiAvKD86W3J1Yl18YnJ8cmIpPyhcIlwiXCJ8JycnKVtcXHNcXFNdKj9cXDEvaSxcbiAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgIGFsaWFzOiAnc3RyaW5nJ1xuICAgIH0sXG4gICAgc3RyaW5nOiB7XG4gICAgICBwYXR0ZXJuOiAvKD86W3J1Yl18YnJ8cmIpPyhcInwnKSg/OlxcXFwufCg/IVxcMSlbXlxcXFxcXHJcXG5dKSpcXDEvaSxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgZnVuY3Rpb246IHtcbiAgICAgIHBhdHRlcm46IC8oKD86XnxcXHMpZGVmWyBcXHRdKylbYS16QS1aX11cXHcqKD89XFxzKlxcKCkvZyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICB9LFxuICAgICdjbGFzcy1uYW1lJzoge1xuICAgICAgcGF0dGVybjogLyhcXGJjbGFzc1xccyspXFx3Ky9pLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgIH0sXG4gICAgZGVjb3JhdG9yOiB7XG4gICAgICBwYXR0ZXJuOiAvKF5bXFx0IF0qKUBcXHcrKD86XFwuXFx3KykqL20sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgYWxpYXM6IFsnYW5ub3RhdGlvbicsICdwdW5jdHVhdGlvbiddLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgIHB1bmN0dWF0aW9uOiAvXFwuL1xuICAgICAgfVxuICAgIH0sXG4gICAga2V5d29yZDpcbiAgICAgIC9cXGIoPzpfKD89XFxzKjopfGFuZHxhc3xhc3NlcnR8YXN5bmN8YXdhaXR8YnJlYWt8Y2FzZXxjbGFzc3xjb250aW51ZXxkZWZ8ZGVsfGVsaWZ8ZWxzZXxleGNlcHR8ZXhlY3xmaW5hbGx5fGZvcnxmcm9tfGdsb2JhbHxpZnxpbXBvcnR8aW58aXN8bGFtYmRhfG1hdGNofG5vbmxvY2FsfG5vdHxvcnxwYXNzfHByaW50fHJhaXNlfHJldHVybnx0cnl8d2hpbGV8d2l0aHx5aWVsZClcXGIvLFxuICAgIGJ1aWx0aW46XG4gICAgICAvXFxiKD86X19pbXBvcnRfX3xhYnN8YWxsfGFueXxhcHBseXxhc2NpaXxiYXNlc3RyaW5nfGJpbnxib29sfGJ1ZmZlcnxieXRlYXJyYXl8Ynl0ZXN8Y2FsbGFibGV8Y2hyfGNsYXNzbWV0aG9kfGNtcHxjb2VyY2V8Y29tcGlsZXxjb21wbGV4fGRlbGF0dHJ8ZGljdHxkaXJ8ZGl2bW9kfGVudW1lcmF0ZXxldmFsfGV4ZWNmaWxlfGZpbGV8ZmlsdGVyfGZsb2F0fGZvcm1hdHxmcm96ZW5zZXR8Z2V0YXR0cnxnbG9iYWxzfGhhc2F0dHJ8aGFzaHxoZWxwfGhleHxpZHxpbnB1dHxpbnR8aW50ZXJufGlzaW5zdGFuY2V8aXNzdWJjbGFzc3xpdGVyfGxlbnxsaXN0fGxvY2Fsc3xsb25nfG1hcHxtYXh8bWVtb3J5dmlld3xtaW58bmV4dHxvYmplY3R8b2N0fG9wZW58b3JkfHBvd3xwcm9wZXJ0eXxyYW5nZXxyYXdfaW5wdXR8cmVkdWNlfHJlbG9hZHxyZXByfHJldmVyc2VkfHJvdW5kfHNldHxzZXRhdHRyfHNsaWNlfHNvcnRlZHxzdGF0aWNtZXRob2R8c3RyfHN1bXxzdXBlcnx0dXBsZXx0eXBlfHVuaWNocnx1bmljb2RlfHZhcnN8eHJhbmdlfHppcClcXGIvLFxuICAgIGJvb2xlYW46IC9cXGIoPzpGYWxzZXxOb25lfFRydWUpXFxiLyxcbiAgICBudW1iZXI6XG4gICAgICAvXFxiMCg/OmIoPzpfP1swMV0pK3xvKD86Xz9bMC03XSkrfHgoPzpfP1thLWYwLTldKSspXFxifCg/OlxcYlxcZCsoPzpfXFxkKykqKD86XFwuKD86XFxkKyg/Ol9cXGQrKSopPyk/fFxcQlxcLlxcZCsoPzpfXFxkKykqKSg/OmVbKy1dP1xcZCsoPzpfXFxkKykqKT9qPyg/IVxcdykvaSxcbiAgICBvcGVyYXRvcjogL1stKyU9XT0/fCE9fDo9fFxcKlxcKj89P3xcXC9cXC8/PT98PFs8PT5dP3w+Wz0+XT98WyZ8Xn5dLyxcbiAgICBwdW5jdHVhdGlvbjogL1t7fVtcXF07KCksLjpdL1xuICB9XG4gIFByaXNtLmxhbmd1YWdlcy5weXRob25bJ3N0cmluZy1pbnRlcnBvbGF0aW9uJ10uaW5zaWRlW1xuICAgICdpbnRlcnBvbGF0aW9uJ1xuICBdLmluc2lkZS5yZXN0ID0gUHJpc20ubGFuZ3VhZ2VzLnB5dGhvblxuICBQcmlzbS5sYW5ndWFnZXMucHkgPSBQcmlzbS5sYW5ndWFnZXMucHl0aG9uXG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInB5dGhvbiIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwiY29tbWVudCIsInBhdHRlcm4iLCJsb29rYmVoaW5kIiwiZ3JlZWR5IiwiaW5zaWRlIiwiaW50ZXJwb2xhdGlvbiIsImFsaWFzIiwicmVzdCIsInN0cmluZyIsImRlY29yYXRvciIsInB1bmN0dWF0aW9uIiwia2V5d29yZCIsImJ1aWx0aW4iLCJudW1iZXIiLCJvcGVyYXRvciIsInB5Il0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/python.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/q.js":
/*!******************************************!*\
  !*** ./node_modules/refractor/lang/q.js ***!
  \******************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = q;\nq.displayName = 'q';\nq.aliases = [];\nfunction q(Prism) {\n  Prism.languages.q = {\n    string: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n    comment: [\n    // From http://code.kx.com/wiki/Reference/Slash:\n    // When / is following a space (or a right parenthesis, bracket, or brace), it is ignored with the rest of the line.\n    {\n      pattern: /([\\t )\\]}])\\/.*/,\n      lookbehind: true,\n      greedy: true\n    },\n    // From http://code.kx.com/wiki/Reference/Slash:\n    // A line which has / as its first character and contains at least one other non-whitespace character is a whole-line comment and is ignored entirely.\n    // A / on a line by itself begins a multiline comment which is terminated by the next \\ on a line by itself.\n    // If a / is not matched by a \\, the multiline comment is unterminated and continues to end of file.\n    // The / and \\ must be the first char on the line, but may be followed by any amount of whitespace.\n    {\n      pattern: /(^|\\r?\\n|\\r)\\/[\\t ]*(?:(?:\\r?\\n|\\r)(?:.*(?:\\r?\\n|\\r(?!\\n)))*?(?:\\\\(?=[\\t ]*(?:\\r?\\n|\\r))|$)|\\S.*)/,\n      lookbehind: true,\n      greedy: true\n    },\n    // From http://code.kx.com/wiki/Reference/Slash:\n    // A \\ on a line by itself with no preceding matching / will comment to end of file.\n    {\n      pattern: /^\\\\[\\t ]*(?:\\r?\\n|\\r)[\\s\\S]+/m,\n      greedy: true\n    }, {\n      pattern: /^#!.+/m,\n      greedy: true\n    }],\n    symbol: /`(?::\\S+|[\\w.]*)/,\n    datetime: {\n      pattern: /0N[mdzuvt]|0W[dtz]|\\d{4}\\.\\d\\d(?:m|\\.\\d\\d(?:T(?:\\d\\d(?::\\d\\d(?::\\d\\d(?:[.:]\\d\\d\\d)?)?)?)?)?[dz]?)|\\d\\d:\\d\\d(?::\\d\\d(?:[.:]\\d\\d\\d)?)?[uvt]?/,\n      alias: 'number'\n    },\n    // The negative look-ahead prevents bad highlighting\n    // of verbs 0: and 1:\n    number: /\\b(?![01]:)(?:0N[hje]?|0W[hj]?|0[wn]|0x[\\da-fA-F]+|\\d+(?:\\.\\d*)?(?:e[+-]?\\d+)?[hjfeb]?)/,\n    keyword: /\\\\\\w+\\b|\\b(?:abs|acos|aj0?|all|and|any|asc|asin|asof|atan|attr|avgs?|binr?|by|ceiling|cols|cor|cos|count|cov|cross|csv|cut|delete|deltas|desc|dev|differ|distinct|div|do|dsave|ej|enlist|eval|except|exec|exit|exp|fby|fills|first|fkeys|flip|floor|from|get|getenv|group|gtime|hclose|hcount|hdel|hopen|hsym|iasc|identity|idesc|if|ij|in|insert|inter|inv|keys?|last|like|list|ljf?|load|log|lower|lsq|ltime|ltrim|mavg|maxs?|mcount|md5|mdev|med|meta|mins?|mmax|mmin|mmu|mod|msum|neg|next|not|null|or|over|parse|peach|pj|plist|prds?|prev|prior|rand|rank|ratios|raze|read0|read1|reciprocal|reval|reverse|rload|rotate|rsave|rtrim|save|scan|scov|sdev|select|set|setenv|show|signum|sin|sqrt|ssr?|string|sublist|sums?|sv|svar|system|tables|tan|til|trim|txf|type|uj|ungroup|union|update|upper|upsert|value|var|views?|vs|wavg|where|while|within|wj1?|wsum|ww|xasc|xbar|xcols?|xdesc|xexp|xgroup|xkey|xlog|xprev|xrank)\\b/,\n    adverb: {\n      pattern: /['\\/\\\\]:?|\\beach\\b/,\n      alias: 'function'\n    },\n    verb: {\n      pattern: /(?:\\B\\.\\B|\\b[01]:|<[=>]?|>=?|[:+\\-*%,!?~=|$&#@^]):?|\\b_\\b:?/,\n      alias: 'operator'\n    },\n    punctuation: /[(){}\\[\\];.]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvcS5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLENBQUM7QUFDbEJBLENBQUMsQ0FBQ0MsV0FBVyxHQUFHLEdBQUc7QUFDbkJELENBQUMsQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDZCxTQUFTRixDQUFDQSxDQUFDRyxLQUFLLEVBQUU7RUFDaEJBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixDQUFDLEdBQUc7SUFDbEJLLE1BQU0sRUFBRSx1QkFBdUI7SUFDL0JDLE9BQU8sRUFBRTtJQUNQO0lBQ0E7SUFDQTtNQUNFQyxPQUFPLEVBQUUsaUJBQWlCO01BQzFCQyxVQUFVLEVBQUUsSUFBSTtNQUNoQkMsTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUFFO0lBQ0g7SUFDQTtJQUNBO0lBQ0E7SUFDQTtNQUNFRixPQUFPLEVBQ0wsbUdBQW1HO01BQ3JHQyxVQUFVLEVBQUUsSUFBSTtNQUNoQkMsTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUFFO0lBQ0g7SUFDQTtNQUNFRixPQUFPLEVBQUUsK0JBQStCO01BQ3hDRSxNQUFNLEVBQUU7SUFDVixDQUFDLEVBQ0Q7TUFDRUYsT0FBTyxFQUFFLFFBQVE7TUFDakJFLE1BQU0sRUFBRTtJQUNWLENBQUMsQ0FDRjtJQUNEQyxNQUFNLEVBQUUsa0JBQWtCO0lBQzFCQyxRQUFRLEVBQUU7TUFDUkosT0FBTyxFQUNMLDRJQUE0STtNQUM5SUssS0FBSyxFQUFFO0lBQ1QsQ0FBQztJQUNEO0lBQ0E7SUFDQUMsTUFBTSxFQUNKLHlGQUF5RjtJQUMzRkMsT0FBTyxFQUNMLHM0QkFBczRCO0lBQ3g0QkMsTUFBTSxFQUFFO01BQ05SLE9BQU8sRUFBRSxvQkFBb0I7TUFDN0JLLEtBQUssRUFBRTtJQUNULENBQUM7SUFDREksSUFBSSxFQUFFO01BQ0pULE9BQU8sRUFBRSw2REFBNkQ7TUFDdEVLLEtBQUssRUFBRTtJQUNULENBQUM7SUFDREssV0FBVyxFQUFFO0VBQ2YsQ0FBQztBQUNIIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xccS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBxXG5xLmRpc3BsYXlOYW1lID0gJ3EnXG5xLmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24gcShQcmlzbSkge1xuICBQcmlzbS5sYW5ndWFnZXMucSA9IHtcbiAgICBzdHJpbmc6IC9cIig/OlxcXFwufFteXCJcXFxcXFxyXFxuXSkqXCIvLFxuICAgIGNvbW1lbnQ6IFtcbiAgICAgIC8vIEZyb20gaHR0cDovL2NvZGUua3guY29tL3dpa2kvUmVmZXJlbmNlL1NsYXNoOlxuICAgICAgLy8gV2hlbiAvIGlzIGZvbGxvd2luZyBhIHNwYWNlIChvciBhIHJpZ2h0IHBhcmVudGhlc2lzLCBicmFja2V0LCBvciBicmFjZSksIGl0IGlzIGlnbm9yZWQgd2l0aCB0aGUgcmVzdCBvZiB0aGUgbGluZS5cbiAgICAgIHtcbiAgICAgICAgcGF0dGVybjogLyhbXFx0IClcXF19XSlcXC8uKi8sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGdyZWVkeTogdHJ1ZVxuICAgICAgfSwgLy8gRnJvbSBodHRwOi8vY29kZS5reC5jb20vd2lraS9SZWZlcmVuY2UvU2xhc2g6XG4gICAgICAvLyBBIGxpbmUgd2hpY2ggaGFzIC8gYXMgaXRzIGZpcnN0IGNoYXJhY3RlciBhbmQgY29udGFpbnMgYXQgbGVhc3Qgb25lIG90aGVyIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlciBpcyBhIHdob2xlLWxpbmUgY29tbWVudCBhbmQgaXMgaWdub3JlZCBlbnRpcmVseS5cbiAgICAgIC8vIEEgLyBvbiBhIGxpbmUgYnkgaXRzZWxmIGJlZ2lucyBhIG11bHRpbGluZSBjb21tZW50IHdoaWNoIGlzIHRlcm1pbmF0ZWQgYnkgdGhlIG5leHQgXFwgb24gYSBsaW5lIGJ5IGl0c2VsZi5cbiAgICAgIC8vIElmIGEgLyBpcyBub3QgbWF0Y2hlZCBieSBhIFxcLCB0aGUgbXVsdGlsaW5lIGNvbW1lbnQgaXMgdW50ZXJtaW5hdGVkIGFuZCBjb250aW51ZXMgdG8gZW5kIG9mIGZpbGUuXG4gICAgICAvLyBUaGUgLyBhbmQgXFwgbXVzdCBiZSB0aGUgZmlyc3QgY2hhciBvbiB0aGUgbGluZSwgYnV0IG1heSBiZSBmb2xsb3dlZCBieSBhbnkgYW1vdW50IG9mIHdoaXRlc3BhY2UuXG4gICAgICB7XG4gICAgICAgIHBhdHRlcm46XG4gICAgICAgICAgLyhefFxccj9cXG58XFxyKVxcL1tcXHQgXSooPzooPzpcXHI/XFxufFxccikoPzouKig/Olxccj9cXG58XFxyKD8hXFxuKSkpKj8oPzpcXFxcKD89W1xcdCBdKig/Olxccj9cXG58XFxyKSl8JCl8XFxTLiopLyxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgICB9LCAvLyBGcm9tIGh0dHA6Ly9jb2RlLmt4LmNvbS93aWtpL1JlZmVyZW5jZS9TbGFzaDpcbiAgICAgIC8vIEEgXFwgb24gYSBsaW5lIGJ5IGl0c2VsZiB3aXRoIG5vIHByZWNlZGluZyBtYXRjaGluZyAvIHdpbGwgY29tbWVudCB0byBlbmQgb2YgZmlsZS5cbiAgICAgIHtcbiAgICAgICAgcGF0dGVybjogL15cXFxcW1xcdCBdKig/Olxccj9cXG58XFxyKVtcXHNcXFNdKy9tLFxuICAgICAgICBncmVlZHk6IHRydWVcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHBhdHRlcm46IC9eIyEuKy9tLFxuICAgICAgICBncmVlZHk6IHRydWVcbiAgICAgIH1cbiAgICBdLFxuICAgIHN5bWJvbDogL2AoPzo6XFxTK3xbXFx3Ll0qKS8sXG4gICAgZGF0ZXRpbWU6IHtcbiAgICAgIHBhdHRlcm46XG4gICAgICAgIC8wTlttZHp1dnRdfDBXW2R0el18XFxkezR9XFwuXFxkXFxkKD86bXxcXC5cXGRcXGQoPzpUKD86XFxkXFxkKD86OlxcZFxcZCg/OjpcXGRcXGQoPzpbLjpdXFxkXFxkXFxkKT8pPyk/KT8pP1tkel0/KXxcXGRcXGQ6XFxkXFxkKD86OlxcZFxcZCg/OlsuOl1cXGRcXGRcXGQpPyk/W3V2dF0/LyxcbiAgICAgIGFsaWFzOiAnbnVtYmVyJ1xuICAgIH0sXG4gICAgLy8gVGhlIG5lZ2F0aXZlIGxvb2stYWhlYWQgcHJldmVudHMgYmFkIGhpZ2hsaWdodGluZ1xuICAgIC8vIG9mIHZlcmJzIDA6IGFuZCAxOlxuICAgIG51bWJlcjpcbiAgICAgIC9cXGIoPyFbMDFdOikoPzowTltoamVdP3wwV1toal0/fDBbd25dfDB4W1xcZGEtZkEtRl0rfFxcZCsoPzpcXC5cXGQqKT8oPzplWystXT9cXGQrKT9baGpmZWJdPykvLFxuICAgIGtleXdvcmQ6XG4gICAgICAvXFxcXFxcdytcXGJ8XFxiKD86YWJzfGFjb3N8YWowP3xhbGx8YW5kfGFueXxhc2N8YXNpbnxhc29mfGF0YW58YXR0cnxhdmdzP3xiaW5yP3xieXxjZWlsaW5nfGNvbHN8Y29yfGNvc3xjb3VudHxjb3Z8Y3Jvc3N8Y3N2fGN1dHxkZWxldGV8ZGVsdGFzfGRlc2N8ZGV2fGRpZmZlcnxkaXN0aW5jdHxkaXZ8ZG98ZHNhdmV8ZWp8ZW5saXN0fGV2YWx8ZXhjZXB0fGV4ZWN8ZXhpdHxleHB8ZmJ5fGZpbGxzfGZpcnN0fGZrZXlzfGZsaXB8Zmxvb3J8ZnJvbXxnZXR8Z2V0ZW52fGdyb3VwfGd0aW1lfGhjbG9zZXxoY291bnR8aGRlbHxob3Blbnxoc3ltfGlhc2N8aWRlbnRpdHl8aWRlc2N8aWZ8aWp8aW58aW5zZXJ0fGludGVyfGludnxrZXlzP3xsYXN0fGxpa2V8bGlzdHxsamY/fGxvYWR8bG9nfGxvd2VyfGxzcXxsdGltZXxsdHJpbXxtYXZnfG1heHM/fG1jb3VudHxtZDV8bWRldnxtZWR8bWV0YXxtaW5zP3xtbWF4fG1taW58bW11fG1vZHxtc3VtfG5lZ3xuZXh0fG5vdHxudWxsfG9yfG92ZXJ8cGFyc2V8cGVhY2h8cGp8cGxpc3R8cHJkcz98cHJldnxwcmlvcnxyYW5kfHJhbmt8cmF0aW9zfHJhemV8cmVhZDB8cmVhZDF8cmVjaXByb2NhbHxyZXZhbHxyZXZlcnNlfHJsb2FkfHJvdGF0ZXxyc2F2ZXxydHJpbXxzYXZlfHNjYW58c2NvdnxzZGV2fHNlbGVjdHxzZXR8c2V0ZW52fHNob3d8c2lnbnVtfHNpbnxzcXJ0fHNzcj98c3RyaW5nfHN1Ymxpc3R8c3Vtcz98c3Z8c3ZhcnxzeXN0ZW18dGFibGVzfHRhbnx0aWx8dHJpbXx0eGZ8dHlwZXx1anx1bmdyb3VwfHVuaW9ufHVwZGF0ZXx1cHBlcnx1cHNlcnR8dmFsdWV8dmFyfHZpZXdzP3x2c3x3YXZnfHdoZXJlfHdoaWxlfHdpdGhpbnx3ajE/fHdzdW18d3d8eGFzY3x4YmFyfHhjb2xzP3x4ZGVzY3x4ZXhwfHhncm91cHx4a2V5fHhsb2d8eHByZXZ8eHJhbmspXFxiLyxcbiAgICBhZHZlcmI6IHtcbiAgICAgIHBhdHRlcm46IC9bJ1xcL1xcXFxdOj98XFxiZWFjaFxcYi8sXG4gICAgICBhbGlhczogJ2Z1bmN0aW9uJ1xuICAgIH0sXG4gICAgdmVyYjoge1xuICAgICAgcGF0dGVybjogLyg/OlxcQlxcLlxcQnxcXGJbMDFdOnw8Wz0+XT98Pj0/fFs6K1xcLSolLCE/fj18JCYjQF5dKTo/fFxcYl9cXGI6Py8sXG4gICAgICBhbGlhczogJ29wZXJhdG9yJ1xuICAgIH0sXG4gICAgcHVuY3R1YXRpb246IC9bKCl7fVxcW1xcXTsuXS9cbiAgfVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJxIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJzdHJpbmciLCJjb21tZW50IiwicGF0dGVybiIsImxvb2tiZWhpbmQiLCJncmVlZHkiLCJzeW1ib2wiLCJkYXRldGltZSIsImFsaWFzIiwibnVtYmVyIiwia2V5d29yZCIsImFkdmVyYiIsInZlcmIiLCJwdW5jdHVhdGlvbiJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/q.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/qml.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/qml.js ***!
  \********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = qml;\nqml.displayName = 'qml';\nqml.aliases = [];\nfunction qml(Prism) {\n  ;\n  (function (Prism) {\n    var jsString = /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"|'(?:\\\\.|[^\\\\'\\r\\n])*'/.source;\n    var jsComment = /\\/\\/.*(?!.)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\//.source;\n    var jsExpr = /(?:[^\\\\()[\\]{}\"'/]|<string>|\\/(?![*/])|<comment>|\\(<expr>*\\)|\\[<expr>*\\]|\\{<expr>*\\}|\\\\[\\s\\S])/.source.replace(/<string>/g, function () {\n      return jsString;\n    }).replace(/<comment>/g, function () {\n      return jsComment;\n    }); // the pattern will blow up, so only a few iterations\n    for (var i = 0; i < 2; i++) {\n      jsExpr = jsExpr.replace(/<expr>/g, function () {\n        return jsExpr;\n      });\n    }\n    jsExpr = jsExpr.replace(/<expr>/g, '[^\\\\s\\\\S]');\n    Prism.languages.qml = {\n      comment: {\n        pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,\n        greedy: true\n      },\n      'javascript-function': {\n        pattern: RegExp(/((?:^|;)[ \\t]*)function\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*\\(<js>*\\)\\s*\\{<js>*\\}/.source.replace(/<js>/g, function () {\n          return jsExpr;\n        }), 'm'),\n        lookbehind: true,\n        greedy: true,\n        alias: 'language-javascript',\n        inside: Prism.languages.javascript\n      },\n      'class-name': {\n        pattern: /((?:^|[:;])[ \\t]*)(?!\\d)\\w+(?=[ \\t]*\\{|[ \\t]+on\\b)/m,\n        lookbehind: true\n      },\n      property: [{\n        pattern: /((?:^|[;{])[ \\t]*)(?!\\d)\\w+(?:\\.\\w+)*(?=[ \\t]*:)/m,\n        lookbehind: true\n      }, {\n        pattern: /((?:^|[;{])[ \\t]*)property[ \\t]+(?!\\d)\\w+(?:\\.\\w+)*[ \\t]+(?!\\d)\\w+(?:\\.\\w+)*(?=[ \\t]*:)/m,\n        lookbehind: true,\n        inside: {\n          keyword: /^property/,\n          property: /\\w+(?:\\.\\w+)*/\n        }\n      }],\n      'javascript-expression': {\n        pattern: RegExp(/(:[ \\t]*)(?![\\s;}[])(?:(?!$|[;}])<js>)+/.source.replace(/<js>/g, function () {\n          return jsExpr;\n        }), 'm'),\n        lookbehind: true,\n        greedy: true,\n        alias: 'language-javascript',\n        inside: Prism.languages.javascript\n      },\n      string: {\n        pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n        greedy: true\n      },\n      keyword: /\\b(?:as|import|on)\\b/,\n      punctuation: /[{}[\\]:;,]/\n    };\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvcW1sLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsR0FBRztBQUNwQkEsR0FBRyxDQUFDQyxXQUFXLEdBQUcsS0FBSztBQUN2QkQsR0FBRyxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNoQixTQUFTRixHQUFHQSxDQUFDRyxLQUFLLEVBQUU7RUFDbEI7RUFBQyxDQUFDLFVBQVVBLEtBQUssRUFBRTtJQUNqQixJQUFJQyxRQUFRLEdBQUcsNkNBQTZDLENBQUNDLE1BQU07SUFDbkUsSUFBSUMsU0FBUyxHQUFHLHdDQUF3QyxDQUFDRCxNQUFNO0lBQy9ELElBQUlFLE1BQU0sR0FDUixnR0FBZ0csQ0FBQ0YsTUFBTSxDQUNwR0csT0FBTyxDQUFDLFdBQVcsRUFBRSxZQUFZO01BQ2hDLE9BQU9KLFFBQVE7SUFDakIsQ0FBQyxDQUFDLENBQ0RJLE9BQU8sQ0FBQyxZQUFZLEVBQUUsWUFBWTtNQUNqQyxPQUFPRixTQUFTO0lBQ2xCLENBQUMsQ0FBQyxFQUFDO0lBQ1AsS0FBSyxJQUFJRyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEVBQUUsRUFBRTtNQUMxQkYsTUFBTSxHQUFHQSxNQUFNLENBQUNDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsWUFBWTtRQUM3QyxPQUFPRCxNQUFNO01BQ2YsQ0FBQyxDQUFDO0lBQ0o7SUFDQUEsTUFBTSxHQUFHQSxNQUFNLENBQUNDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDO0lBQy9DTCxLQUFLLENBQUNPLFNBQVMsQ0FBQ1YsR0FBRyxHQUFHO01BQ3BCVyxPQUFPLEVBQUU7UUFDUEMsT0FBTyxFQUFFLHlCQUF5QjtRQUNsQ0MsTUFBTSxFQUFFO01BQ1YsQ0FBQztNQUNELHFCQUFxQixFQUFFO1FBQ3JCRCxPQUFPLEVBQUVFLE1BQU0sQ0FDYiwwR0FBMEcsQ0FBQ1QsTUFBTSxDQUFDRyxPQUFPLENBQ3ZILE9BQU8sRUFDUCxZQUFZO1VBQ1YsT0FBT0QsTUFBTTtRQUNmLENBQ0YsQ0FBQyxFQUNELEdBQ0YsQ0FBQztRQUNEUSxVQUFVLEVBQUUsSUFBSTtRQUNoQkYsTUFBTSxFQUFFLElBQUk7UUFDWkcsS0FBSyxFQUFFLHFCQUFxQjtRQUM1QkMsTUFBTSxFQUFFZCxLQUFLLENBQUNPLFNBQVMsQ0FBQ1E7TUFDMUIsQ0FBQztNQUNELFlBQVksRUFBRTtRQUNaTixPQUFPLEVBQUUscURBQXFEO1FBQzlERyxVQUFVLEVBQUU7TUFDZCxDQUFDO01BQ0RJLFFBQVEsRUFBRSxDQUNSO1FBQ0VQLE9BQU8sRUFBRSxtREFBbUQ7UUFDNURHLFVBQVUsRUFBRTtNQUNkLENBQUMsRUFDRDtRQUNFSCxPQUFPLEVBQ0wsMEZBQTBGO1FBQzVGRyxVQUFVLEVBQUUsSUFBSTtRQUNoQkUsTUFBTSxFQUFFO1VBQ05HLE9BQU8sRUFBRSxXQUFXO1VBQ3BCRCxRQUFRLEVBQUU7UUFDWjtNQUNGLENBQUMsQ0FDRjtNQUNELHVCQUF1QixFQUFFO1FBQ3ZCUCxPQUFPLEVBQUVFLE1BQU0sQ0FDYix5Q0FBeUMsQ0FBQ1QsTUFBTSxDQUFDRyxPQUFPLENBQ3RELE9BQU8sRUFDUCxZQUFZO1VBQ1YsT0FBT0QsTUFBTTtRQUNmLENBQ0YsQ0FBQyxFQUNELEdBQ0YsQ0FBQztRQUNEUSxVQUFVLEVBQUUsSUFBSTtRQUNoQkYsTUFBTSxFQUFFLElBQUk7UUFDWkcsS0FBSyxFQUFFLHFCQUFxQjtRQUM1QkMsTUFBTSxFQUFFZCxLQUFLLENBQUNPLFNBQVMsQ0FBQ1E7TUFDMUIsQ0FBQztNQUNERyxNQUFNLEVBQUU7UUFDTlQsT0FBTyxFQUFFLHVCQUF1QjtRQUNoQ0MsTUFBTSxFQUFFO01BQ1YsQ0FBQztNQUNETyxPQUFPLEVBQUUsc0JBQXNCO01BQy9CRSxXQUFXLEVBQUU7SUFDZixDQUFDO0VBQ0gsQ0FBQyxFQUFFbkIsS0FBSyxDQUFDO0FBQ1giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxxbWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gcW1sXG5xbWwuZGlzcGxheU5hbWUgPSAncW1sJ1xucW1sLmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24gcW1sKFByaXNtKSB7XG4gIDsoZnVuY3Rpb24gKFByaXNtKSB7XG4gICAgdmFyIGpzU3RyaW5nID0gL1wiKD86XFxcXC58W15cXFxcXCJcXHJcXG5dKSpcInwnKD86XFxcXC58W15cXFxcJ1xcclxcbl0pKicvLnNvdXJjZVxuICAgIHZhciBqc0NvbW1lbnQgPSAvXFwvXFwvLiooPyEuKXxcXC9cXCooPzpbXipdfFxcKig/IVxcLykpKlxcKlxcLy8uc291cmNlXG4gICAgdmFyIGpzRXhwciA9XG4gICAgICAvKD86W15cXFxcKClbXFxde31cIicvXXw8c3RyaW5nPnxcXC8oPyFbKi9dKXw8Y29tbWVudD58XFwoPGV4cHI+KlxcKXxcXFs8ZXhwcj4qXFxdfFxcezxleHByPipcXH18XFxcXFtcXHNcXFNdKS8uc291cmNlXG4gICAgICAgIC5yZXBsYWNlKC88c3RyaW5nPi9nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIGpzU3RyaW5nXG4gICAgICAgIH0pXG4gICAgICAgIC5yZXBsYWNlKC88Y29tbWVudD4vZywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBqc0NvbW1lbnRcbiAgICAgICAgfSkgLy8gdGhlIHBhdHRlcm4gd2lsbCBibG93IHVwLCBzbyBvbmx5IGEgZmV3IGl0ZXJhdGlvbnNcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI7IGkrKykge1xuICAgICAganNFeHByID0ganNFeHByLnJlcGxhY2UoLzxleHByPi9nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBqc0V4cHJcbiAgICAgIH0pXG4gICAgfVxuICAgIGpzRXhwciA9IGpzRXhwci5yZXBsYWNlKC88ZXhwcj4vZywgJ1teXFxcXHNcXFxcU10nKVxuICAgIFByaXNtLmxhbmd1YWdlcy5xbWwgPSB7XG4gICAgICBjb21tZW50OiB7XG4gICAgICAgIHBhdHRlcm46IC9cXC9cXC8uKnxcXC9cXCpbXFxzXFxTXSo/XFwqXFwvLyxcbiAgICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgICB9LFxuICAgICAgJ2phdmFzY3JpcHQtZnVuY3Rpb24nOiB7XG4gICAgICAgIHBhdHRlcm46IFJlZ0V4cChcbiAgICAgICAgICAvKCg/Ol58OylbIFxcdF0qKWZ1bmN0aW9uXFxzKyg/IVxccylbXyRhLXpBLVpcXHhBMC1cXHVGRkZGXSg/Oig/IVxccylbJFxcd1xceEEwLVxcdUZGRkZdKSpcXHMqXFwoPGpzPipcXClcXHMqXFx7PGpzPipcXH0vLnNvdXJjZS5yZXBsYWNlKFxuICAgICAgICAgICAgLzxqcz4vZyxcbiAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGpzRXhwclxuICAgICAgICAgICAgfVxuICAgICAgICAgICksXG4gICAgICAgICAgJ20nXG4gICAgICAgICksXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgICAgYWxpYXM6ICdsYW5ndWFnZS1qYXZhc2NyaXB0JyxcbiAgICAgICAgaW5zaWRlOiBQcmlzbS5sYW5ndWFnZXMuamF2YXNjcmlwdFxuICAgICAgfSxcbiAgICAgICdjbGFzcy1uYW1lJzoge1xuICAgICAgICBwYXR0ZXJuOiAvKCg/Ol58Wzo7XSlbIFxcdF0qKSg/IVxcZClcXHcrKD89WyBcXHRdKlxce3xbIFxcdF0rb25cXGIpL20sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH0sXG4gICAgICBwcm9wZXJ0eTogW1xuICAgICAgICB7XG4gICAgICAgICAgcGF0dGVybjogLygoPzpefFs7e10pWyBcXHRdKikoPyFcXGQpXFx3Kyg/OlxcLlxcdyspKig/PVsgXFx0XSo6KS9tLFxuICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHBhdHRlcm46XG4gICAgICAgICAgICAvKCg/Ol58Wzt7XSlbIFxcdF0qKXByb3BlcnR5WyBcXHRdKyg/IVxcZClcXHcrKD86XFwuXFx3KykqWyBcXHRdKyg/IVxcZClcXHcrKD86XFwuXFx3KykqKD89WyBcXHRdKjopL20sXG4gICAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICAgIGtleXdvcmQ6IC9ecHJvcGVydHkvLFxuICAgICAgICAgICAgcHJvcGVydHk6IC9cXHcrKD86XFwuXFx3KykqL1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgICdqYXZhc2NyaXB0LWV4cHJlc3Npb24nOiB7XG4gICAgICAgIHBhdHRlcm46IFJlZ0V4cChcbiAgICAgICAgICAvKDpbIFxcdF0qKSg/IVtcXHM7fVtdKSg/Oig/ISR8Wzt9XSk8anM+KSsvLnNvdXJjZS5yZXBsYWNlKFxuICAgICAgICAgICAgLzxqcz4vZyxcbiAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGpzRXhwclxuICAgICAgICAgICAgfVxuICAgICAgICAgICksXG4gICAgICAgICAgJ20nXG4gICAgICAgICksXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgICAgYWxpYXM6ICdsYW5ndWFnZS1qYXZhc2NyaXB0JyxcbiAgICAgICAgaW5zaWRlOiBQcmlzbS5sYW5ndWFnZXMuamF2YXNjcmlwdFxuICAgICAgfSxcbiAgICAgIHN0cmluZzoge1xuICAgICAgICBwYXR0ZXJuOiAvXCIoPzpcXFxcLnxbXlxcXFxcIlxcclxcbl0pKlwiLyxcbiAgICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgICB9LFxuICAgICAga2V5d29yZDogL1xcYig/OmFzfGltcG9ydHxvbilcXGIvLFxuICAgICAgcHVuY3R1YXRpb246IC9be31bXFxdOjssXS9cbiAgICB9XG4gIH0pKFByaXNtKVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJxbWwiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImpzU3RyaW5nIiwic291cmNlIiwianNDb21tZW50IiwianNFeHByIiwicmVwbGFjZSIsImkiLCJsYW5ndWFnZXMiLCJjb21tZW50IiwicGF0dGVybiIsImdyZWVkeSIsIlJlZ0V4cCIsImxvb2tiZWhpbmQiLCJhbGlhcyIsImluc2lkZSIsImphdmFzY3JpcHQiLCJwcm9wZXJ0eSIsImtleXdvcmQiLCJzdHJpbmciLCJwdW5jdHVhdGlvbiJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/qml.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/qore.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/qore.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = qore;\nqore.displayName = 'qore';\nqore.aliases = [];\nfunction qore(Prism) {\n  Prism.languages.qore = Prism.languages.extend('clike', {\n    comment: {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:\\/\\/|#).*)/,\n      lookbehind: true\n    },\n    // Overridden to allow unescaped multi-line strings\n    string: {\n      pattern: /(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n      greedy: true\n    },\n    keyword: /\\b(?:abstract|any|assert|binary|bool|boolean|break|byte|case|catch|char|class|code|const|continue|data|default|do|double|else|enum|extends|final|finally|float|for|goto|hash|if|implements|import|inherits|instanceof|int|interface|long|my|native|new|nothing|null|object|our|own|private|reference|rethrow|return|short|soft(?:bool|date|float|int|list|number|string)|static|strictfp|string|sub|super|switch|synchronized|this|throw|throws|transient|try|void|volatile|while)\\b/,\n    \"boolean\": /\\b(?:false|true)\\b/i,\n    \"function\": /\\$?\\b(?!\\d)\\w+(?=\\()/,\n    number: /\\b(?:0b[01]+|0x(?:[\\da-f]*\\.)?[\\da-fp\\-]+|(?:\\d+(?:\\.\\d+)?|\\.\\d+)(?:e\\d+)?[df]|(?:\\d+(?:\\.\\d+)?|\\.\\d+))\\b/i,\n    operator: {\n      pattern: /(^|[^.])(?:\\+[+=]?|-[-=]?|[!=](?:==?|~)?|>>?=?|<(?:=>?|<=?)?|&[&=]?|\\|[|=]?|[*\\/%^]=?|[~?])/,\n      lookbehind: true\n    },\n    variable: /\\$(?!\\d)\\w+\\b/\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvcW9yZS5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLElBQUk7QUFDckJBLElBQUksQ0FBQ0MsV0FBVyxHQUFHLE1BQU07QUFDekJELElBQUksQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDakIsU0FBU0YsSUFBSUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ25CQSxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osSUFBSSxHQUFHRyxLQUFLLENBQUNDLFNBQVMsQ0FBQ0MsTUFBTSxDQUFDLE9BQU8sRUFBRTtJQUNyREMsT0FBTyxFQUFFO01BQ1BDLE9BQU8sRUFBRSw0Q0FBNEM7TUFDckRDLFVBQVUsRUFBRTtJQUNkLENBQUM7SUFDRDtJQUNBQyxNQUFNLEVBQUU7TUFDTkYsT0FBTyxFQUFFLGtDQUFrQztNQUMzQ0csTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUNEQyxPQUFPLEVBQ0wsc2RBQXNkO0lBQ3hkLFdBQVMscUJBQXFCO0lBQzlCLFlBQVUsc0JBQXNCO0lBQ2hDQyxNQUFNLEVBQ0osNEdBQTRHO0lBQzlHQyxRQUFRLEVBQUU7TUFDUk4sT0FBTyxFQUNMLDZGQUE2RjtNQUMvRkMsVUFBVSxFQUFFO0lBQ2QsQ0FBQztJQUNETSxRQUFRLEVBQUU7RUFDWixDQUFDLENBQUM7QUFDSiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXHFvcmUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gcW9yZVxucW9yZS5kaXNwbGF5TmFtZSA9ICdxb3JlJ1xucW9yZS5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIHFvcmUoUHJpc20pIHtcbiAgUHJpc20ubGFuZ3VhZ2VzLnFvcmUgPSBQcmlzbS5sYW5ndWFnZXMuZXh0ZW5kKCdjbGlrZScsIHtcbiAgICBjb21tZW50OiB7XG4gICAgICBwYXR0ZXJuOiAvKF58W15cXFxcXSkoPzpcXC9cXCpbXFxzXFxTXSo/XFwqXFwvfCg/OlxcL1xcL3wjKS4qKS8sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgfSxcbiAgICAvLyBPdmVycmlkZGVuIHRvIGFsbG93IHVuZXNjYXBlZCBtdWx0aS1saW5lIHN0cmluZ3NcbiAgICBzdHJpbmc6IHtcbiAgICAgIHBhdHRlcm46IC8oXCJ8JykoPzpcXFxcW1xcc1xcU118KD8hXFwxKVteXFxcXF0pKlxcMS8sXG4gICAgICBncmVlZHk6IHRydWVcbiAgICB9LFxuICAgIGtleXdvcmQ6XG4gICAgICAvXFxiKD86YWJzdHJhY3R8YW55fGFzc2VydHxiaW5hcnl8Ym9vbHxib29sZWFufGJyZWFrfGJ5dGV8Y2FzZXxjYXRjaHxjaGFyfGNsYXNzfGNvZGV8Y29uc3R8Y29udGludWV8ZGF0YXxkZWZhdWx0fGRvfGRvdWJsZXxlbHNlfGVudW18ZXh0ZW5kc3xmaW5hbHxmaW5hbGx5fGZsb2F0fGZvcnxnb3RvfGhhc2h8aWZ8aW1wbGVtZW50c3xpbXBvcnR8aW5oZXJpdHN8aW5zdGFuY2VvZnxpbnR8aW50ZXJmYWNlfGxvbmd8bXl8bmF0aXZlfG5ld3xub3RoaW5nfG51bGx8b2JqZWN0fG91cnxvd258cHJpdmF0ZXxyZWZlcmVuY2V8cmV0aHJvd3xyZXR1cm58c2hvcnR8c29mdCg/OmJvb2x8ZGF0ZXxmbG9hdHxpbnR8bGlzdHxudW1iZXJ8c3RyaW5nKXxzdGF0aWN8c3RyaWN0ZnB8c3RyaW5nfHN1YnxzdXBlcnxzd2l0Y2h8c3luY2hyb25pemVkfHRoaXN8dGhyb3d8dGhyb3dzfHRyYW5zaWVudHx0cnl8dm9pZHx2b2xhdGlsZXx3aGlsZSlcXGIvLFxuICAgIGJvb2xlYW46IC9cXGIoPzpmYWxzZXx0cnVlKVxcYi9pLFxuICAgIGZ1bmN0aW9uOiAvXFwkP1xcYig/IVxcZClcXHcrKD89XFwoKS8sXG4gICAgbnVtYmVyOlxuICAgICAgL1xcYig/OjBiWzAxXSt8MHgoPzpbXFxkYS1mXSpcXC4pP1tcXGRhLWZwXFwtXSt8KD86XFxkKyg/OlxcLlxcZCspP3xcXC5cXGQrKSg/OmVcXGQrKT9bZGZdfCg/OlxcZCsoPzpcXC5cXGQrKT98XFwuXFxkKykpXFxiL2ksXG4gICAgb3BlcmF0b3I6IHtcbiAgICAgIHBhdHRlcm46XG4gICAgICAgIC8oXnxbXi5dKSg/OlxcK1srPV0/fC1bLT1dP3xbIT1dKD86PT0/fH4pP3w+Pj89P3w8KD86PT4/fDw9Pyk/fCZbJj1dP3xcXHxbfD1dP3xbKlxcLyVeXT0/fFt+P10pLyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICB9LFxuICAgIHZhcmlhYmxlOiAvXFwkKD8hXFxkKVxcdytcXGIvXG4gIH0pXG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInFvcmUiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImxhbmd1YWdlcyIsImV4dGVuZCIsImNvbW1lbnQiLCJwYXR0ZXJuIiwibG9va2JlaGluZCIsInN0cmluZyIsImdyZWVkeSIsImtleXdvcmQiLCJudW1iZXIiLCJvcGVyYXRvciIsInZhcmlhYmxlIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/qore.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/qsharp.js":
/*!***********************************************!*\
  !*** ./node_modules/refractor/lang/qsharp.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = qsharp;\nqsharp.displayName = 'qsharp';\nqsharp.aliases = ['qs'];\nfunction qsharp(Prism) {\n  ;\n  (function (Prism) {\n    /**\n     * Replaces all placeholders \"<<n>>\" of given pattern with the n-th replacement (zero based).\n     *\n     * Note: This is a simple text based replacement. Be careful when using backreferences!\n     *\n     * @param {string} pattern the given pattern.\n     * @param {string[]} replacements a list of replacement which can be inserted into the given pattern.\n     * @returns {string} the pattern with all placeholders replaced with their corresponding replacements.\n     * @example replace(/a<<0>>a/.source, [/b+/.source]) === /a(?:b+)a/.source\n     */\n    function replace(pattern, replacements) {\n      return pattern.replace(/<<(\\d+)>>/g, function (m, index) {\n        return '(?:' + replacements[+index] + ')';\n      });\n    }\n    /**\n     * @param {string} pattern\n     * @param {string[]} replacements\n     * @param {string} [flags]\n     * @returns {RegExp}\n     */\n    function re(pattern, replacements, flags) {\n      return RegExp(replace(pattern, replacements), flags || '');\n    }\n    /**\n     * Creates a nested pattern where all occurrences of the string `<<self>>` are replaced with the pattern itself.\n     *\n     * @param {string} pattern\n     * @param {number} depthLog2\n     * @returns {string}\n     */\n    function nested(pattern, depthLog2) {\n      for (var i = 0; i < depthLog2; i++) {\n        pattern = pattern.replace(/<<self>>/g, function () {\n          return '(?:' + pattern + ')';\n        });\n      }\n      return pattern.replace(/<<self>>/g, '[^\\\\s\\\\S]');\n    } // https://docs.microsoft.com/en-us/azure/quantum/user-guide/language/typesystem/\n    // https://github.com/microsoft/qsharp-language/tree/main/Specifications/Language/5_Grammar\n    var keywordKinds = {\n      // keywords which represent a return or variable type\n      type: 'Adj BigInt Bool Ctl Double false Int One Pauli PauliI PauliX PauliY PauliZ Qubit Range Result String true Unit Zero',\n      // all other keywords\n      other: 'Adjoint adjoint apply as auto body borrow borrowing Controlled controlled distribute elif else fail fixup for function if in internal intrinsic invert is let mutable namespace new newtype open operation repeat return self set until use using while within'\n    }; // keywords\n    function keywordsToPattern(words) {\n      return '\\\\b(?:' + words.trim().replace(/ /g, '|') + ')\\\\b';\n    }\n    var keywords = RegExp(keywordsToPattern(keywordKinds.type + ' ' + keywordKinds.other)); // types\n    var identifier = /\\b[A-Za-z_]\\w*\\b/.source;\n    var qualifiedName = replace(/<<0>>(?:\\s*\\.\\s*<<0>>)*/.source, [identifier]);\n    var typeInside = {\n      keyword: keywords,\n      punctuation: /[<>()?,.:[\\]]/\n    }; // strings\n    var regularString = /\"(?:\\\\.|[^\\\\\"])*\"/.source;\n    Prism.languages.qsharp = Prism.languages.extend('clike', {\n      comment: /\\/\\/.*/,\n      string: [{\n        pattern: re(/(^|[^$\\\\])<<0>>/.source, [regularString]),\n        lookbehind: true,\n        greedy: true\n      }],\n      'class-name': [{\n        // open Microsoft.Quantum.Canon;\n        // open Microsoft.Quantum.Canon as CN;\n        pattern: re(/(\\b(?:as|open)\\s+)<<0>>(?=\\s*(?:;|as\\b))/.source, [qualifiedName]),\n        lookbehind: true,\n        inside: typeInside\n      }, {\n        // namespace Quantum.App1;\n        pattern: re(/(\\bnamespace\\s+)<<0>>(?=\\s*\\{)/.source, [qualifiedName]),\n        lookbehind: true,\n        inside: typeInside\n      }],\n      keyword: keywords,\n      number: /(?:\\b0(?:x[\\da-f]+|b[01]+|o[0-7]+)|(?:\\B\\.\\d+|\\b\\d+(?:\\.\\d*)?)(?:e[-+]?\\d+)?)l?\\b/i,\n      operator: /\\band=|\\bor=|\\band\\b|\\bnot\\b|\\bor\\b|<[-=]|[-=]>|>>>=?|<<<=?|\\^\\^\\^=?|\\|\\|\\|=?|&&&=?|w\\/=?|~~~|[*\\/+\\-^=!%]=?/,\n      punctuation: /::|[{}[\\];(),.:]/\n    });\n    Prism.languages.insertBefore('qsharp', 'number', {\n      range: {\n        pattern: /\\.\\./,\n        alias: 'operator'\n      }\n    }); // single line\n    var interpolationExpr = nested(replace(/\\{(?:[^\"{}]|<<0>>|<<self>>)*\\}/.source, [regularString]), 2);\n    Prism.languages.insertBefore('qsharp', 'string', {\n      'interpolation-string': {\n        pattern: re(/\\$\"(?:\\\\.|<<0>>|[^\\\\\"{])*\"/.source, [interpolationExpr]),\n        greedy: true,\n        inside: {\n          interpolation: {\n            pattern: re(/((?:^|[^\\\\])(?:\\\\\\\\)*)<<0>>/.source, [interpolationExpr]),\n            lookbehind: true,\n            inside: {\n              punctuation: /^\\{|\\}$/,\n              expression: {\n                pattern: /[\\s\\S]+/,\n                alias: 'language-qsharp',\n                inside: Prism.languages.qsharp\n              }\n            }\n          },\n          string: /[\\s\\S]+/\n        }\n      }\n    });\n  })(Prism);\n  Prism.languages.qs = Prism.languages.qsharp;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/qsharp.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/r.js":
/*!******************************************!*\
  !*** ./node_modules/refractor/lang/r.js ***!
  \******************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = r;\nr.displayName = 'r';\nr.aliases = [];\nfunction r(Prism) {\n  Prism.languages.r = {\n    comment: /#.*/,\n    string: {\n      pattern: /(['\"])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true\n    },\n    'percent-operator': {\n      // Includes user-defined operators\n      // and %%, %*%, %/%, %in%, %o%, %x%\n      pattern: /%[^%\\s]*%/,\n      alias: 'operator'\n    },\n    \"boolean\": /\\b(?:FALSE|TRUE)\\b/,\n    ellipsis: /\\.\\.(?:\\.|\\d+)/,\n    number: [/\\b(?:Inf|NaN)\\b/, /(?:\\b0x[\\dA-Fa-f]+(?:\\.\\d*)?|\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[EePp][+-]?\\d+)?[iL]?/],\n    keyword: /\\b(?:NA|NA_character_|NA_complex_|NA_integer_|NA_real_|NULL|break|else|for|function|if|in|next|repeat|while)\\b/,\n    operator: /->?>?|<(?:=|<?-)?|[>=!]=?|::?|&&?|\\|\\|?|[+*\\/^$@~]/,\n    punctuation: /[(){}\\[\\],;]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvci5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLENBQUM7QUFDbEJBLENBQUMsQ0FBQ0MsV0FBVyxHQUFHLEdBQUc7QUFDbkJELENBQUMsQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDZCxTQUFTRixDQUFDQSxDQUFDRyxLQUFLLEVBQUU7RUFDaEJBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixDQUFDLEdBQUc7SUFDbEJLLE9BQU8sRUFBRSxLQUFLO0lBQ2RDLE1BQU0sRUFBRTtNQUNOQyxPQUFPLEVBQUUsa0NBQWtDO01BQzNDQyxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0Qsa0JBQWtCLEVBQUU7TUFDbEI7TUFDQTtNQUNBRCxPQUFPLEVBQUUsV0FBVztNQUNwQkUsS0FBSyxFQUFFO0lBQ1QsQ0FBQztJQUNELFdBQVMsb0JBQW9CO0lBQzdCQyxRQUFRLEVBQUUsZ0JBQWdCO0lBQzFCQyxNQUFNLEVBQUUsQ0FDTixpQkFBaUIsRUFDakIsK0VBQStFLENBQ2hGO0lBQ0RDLE9BQU8sRUFDTCxnSEFBZ0g7SUFDbEhDLFFBQVEsRUFBRSxvREFBb0Q7SUFDOURDLFdBQVcsRUFBRTtFQUNmLENBQUM7QUFDSCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXHIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gclxuci5kaXNwbGF5TmFtZSA9ICdyJ1xuci5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIHIoUHJpc20pIHtcbiAgUHJpc20ubGFuZ3VhZ2VzLnIgPSB7XG4gICAgY29tbWVudDogLyMuKi8sXG4gICAgc3RyaW5nOiB7XG4gICAgICBwYXR0ZXJuOiAvKFsnXCJdKSg/OlxcXFwufCg/IVxcMSlbXlxcXFxcXHJcXG5dKSpcXDEvLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICAncGVyY2VudC1vcGVyYXRvcic6IHtcbiAgICAgIC8vIEluY2x1ZGVzIHVzZXItZGVmaW5lZCBvcGVyYXRvcnNcbiAgICAgIC8vIGFuZCAlJSwgJSolLCAlLyUsICVpbiUsICVvJSwgJXglXG4gICAgICBwYXR0ZXJuOiAvJVteJVxcc10qJS8sXG4gICAgICBhbGlhczogJ29wZXJhdG9yJ1xuICAgIH0sXG4gICAgYm9vbGVhbjogL1xcYig/OkZBTFNFfFRSVUUpXFxiLyxcbiAgICBlbGxpcHNpczogL1xcLlxcLig/OlxcLnxcXGQrKS8sXG4gICAgbnVtYmVyOiBbXG4gICAgICAvXFxiKD86SW5mfE5hTilcXGIvLFxuICAgICAgLyg/OlxcYjB4W1xcZEEtRmEtZl0rKD86XFwuXFxkKik/fFxcYlxcZCsoPzpcXC5cXGQqKT98XFxCXFwuXFxkKykoPzpbRWVQcF1bKy1dP1xcZCspP1tpTF0/L1xuICAgIF0sXG4gICAga2V5d29yZDpcbiAgICAgIC9cXGIoPzpOQXxOQV9jaGFyYWN0ZXJffE5BX2NvbXBsZXhffE5BX2ludGVnZXJffE5BX3JlYWxffE5VTEx8YnJlYWt8ZWxzZXxmb3J8ZnVuY3Rpb258aWZ8aW58bmV4dHxyZXBlYXR8d2hpbGUpXFxiLyxcbiAgICBvcGVyYXRvcjogLy0+Pz4/fDwoPzo9fDw/LSk/fFs+PSFdPT98Ojo/fCYmP3xcXHxcXHw/fFsrKlxcL14kQH5dLyxcbiAgICBwdW5jdHVhdGlvbjogL1soKXt9XFxbXFxdLDtdL1xuICB9XG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInIiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImxhbmd1YWdlcyIsImNvbW1lbnQiLCJzdHJpbmciLCJwYXR0ZXJuIiwiZ3JlZWR5IiwiYWxpYXMiLCJlbGxpcHNpcyIsIm51bWJlciIsImtleXdvcmQiLCJvcGVyYXRvciIsInB1bmN0dWF0aW9uIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/r.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/racket.js":
/*!***********************************************!*\
  !*** ./node_modules/refractor/lang/racket.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar refractorScheme = __webpack_require__(/*! ./scheme.js */ \"(ssr)/./node_modules/refractor/lang/scheme.js\");\nmodule.exports = racket;\nracket.displayName = 'racket';\nracket.aliases = ['rkt'];\nfunction racket(Prism) {\n  Prism.register(refractorScheme);\n  Prism.languages.racket = Prism.languages.extend('scheme', {\n    'lambda-parameter': {\n      // the racket lambda syntax is a lot more complex, so we won't even attempt to capture it.\n      // this will just prevent false positives of the `function` pattern\n      pattern: /([(\\[]lambda\\s+[(\\[])[^()\\[\\]'\\s]+/,\n      lookbehind: true\n    }\n  });\n  Prism.languages.insertBefore('racket', 'string', {\n    lang: {\n      pattern: /^#lang.+/m,\n      greedy: true,\n      alias: 'keyword'\n    }\n  });\n  Prism.languages.rkt = Prism.languages.racket;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvcmFja2V0LmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUNaLElBQUlBLGVBQWUsR0FBR0MsbUJBQU8sQ0FBQyxrRUFBYSxDQUFDO0FBQzVDQyxNQUFNLENBQUNDLE9BQU8sR0FBR0MsTUFBTTtBQUN2QkEsTUFBTSxDQUFDQyxXQUFXLEdBQUcsUUFBUTtBQUM3QkQsTUFBTSxDQUFDRSxPQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUM7QUFDeEIsU0FBU0YsTUFBTUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ3JCQSxLQUFLLENBQUNDLFFBQVEsQ0FBQ1IsZUFBZSxDQUFDO0VBQy9CTyxLQUFLLENBQUNFLFNBQVMsQ0FBQ0wsTUFBTSxHQUFHRyxLQUFLLENBQUNFLFNBQVMsQ0FBQ0MsTUFBTSxDQUFDLFFBQVEsRUFBRTtJQUN4RCxrQkFBa0IsRUFBRTtNQUNsQjtNQUNBO01BQ0FDLE9BQU8sRUFBRSxvQ0FBb0M7TUFDN0NDLFVBQVUsRUFBRTtJQUNkO0VBQ0YsQ0FBQyxDQUFDO0VBQ0ZMLEtBQUssQ0FBQ0UsU0FBUyxDQUFDSSxZQUFZLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRTtJQUMvQ0MsSUFBSSxFQUFFO01BQ0pILE9BQU8sRUFBRSxXQUFXO01BQ3BCSSxNQUFNLEVBQUUsSUFBSTtNQUNaQyxLQUFLLEVBQUU7SUFDVDtFQUNGLENBQUMsQ0FBQztFQUNGVCxLQUFLLENBQUNFLFNBQVMsQ0FBQ1EsR0FBRyxHQUFHVixLQUFLLENBQUNFLFNBQVMsQ0FBQ0wsTUFBTTtBQUM5QyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXHJhY2tldC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcbnZhciByZWZyYWN0b3JTY2hlbWUgPSByZXF1aXJlKCcuL3NjaGVtZS5qcycpXG5tb2R1bGUuZXhwb3J0cyA9IHJhY2tldFxucmFja2V0LmRpc3BsYXlOYW1lID0gJ3JhY2tldCdcbnJhY2tldC5hbGlhc2VzID0gWydya3QnXVxuZnVuY3Rpb24gcmFja2V0KFByaXNtKSB7XG4gIFByaXNtLnJlZ2lzdGVyKHJlZnJhY3RvclNjaGVtZSlcbiAgUHJpc20ubGFuZ3VhZ2VzLnJhY2tldCA9IFByaXNtLmxhbmd1YWdlcy5leHRlbmQoJ3NjaGVtZScsIHtcbiAgICAnbGFtYmRhLXBhcmFtZXRlcic6IHtcbiAgICAgIC8vIHRoZSByYWNrZXQgbGFtYmRhIHN5bnRheCBpcyBhIGxvdCBtb3JlIGNvbXBsZXgsIHNvIHdlIHdvbid0IGV2ZW4gYXR0ZW1wdCB0byBjYXB0dXJlIGl0LlxuICAgICAgLy8gdGhpcyB3aWxsIGp1c3QgcHJldmVudCBmYWxzZSBwb3NpdGl2ZXMgb2YgdGhlIGBmdW5jdGlvbmAgcGF0dGVyblxuICAgICAgcGF0dGVybjogLyhbKFxcW11sYW1iZGFcXHMrWyhcXFtdKVteKClcXFtcXF0nXFxzXSsvLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgIH1cbiAgfSlcbiAgUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgncmFja2V0JywgJ3N0cmluZycsIHtcbiAgICBsYW5nOiB7XG4gICAgICBwYXR0ZXJuOiAvXiNsYW5nLisvbSxcbiAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgIGFsaWFzOiAna2V5d29yZCdcbiAgICB9XG4gIH0pXG4gIFByaXNtLmxhbmd1YWdlcy5ya3QgPSBQcmlzbS5sYW5ndWFnZXMucmFja2V0XG59XG4iXSwibmFtZXMiOlsicmVmcmFjdG9yU2NoZW1lIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJyYWNrZXQiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsInJlZ2lzdGVyIiwibGFuZ3VhZ2VzIiwiZXh0ZW5kIiwicGF0dGVybiIsImxvb2tiZWhpbmQiLCJpbnNlcnRCZWZvcmUiLCJsYW5nIiwiZ3JlZWR5IiwiYWxpYXMiLCJya3QiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/racket.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/reason.js":
/*!***********************************************!*\
  !*** ./node_modules/refractor/lang/reason.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = reason;\nreason.displayName = 'reason';\nreason.aliases = [];\nfunction reason(Prism) {\n  Prism.languages.reason = Prism.languages.extend('clike', {\n    string: {\n      pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,\n      greedy: true\n    },\n    // 'class-name' must be matched *after* 'constructor' defined below\n    'class-name': /\\b[A-Z]\\w*/,\n    keyword: /\\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\\b/,\n    operator: /\\.{3}|:[:=]|\\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\\-*\\/]\\.?|\\b(?:asr|land|lor|lsl|lsr|lxor|mod)\\b/\n  });\n  Prism.languages.insertBefore('reason', 'class-name', {\n    \"char\": {\n      pattern: /'(?:\\\\x[\\da-f]{2}|\\\\o[0-3][0-7][0-7]|\\\\\\d{3}|\\\\.|[^'\\\\\\r\\n])'/,\n      greedy: true\n    },\n    // Negative look-ahead prevents from matching things like String.capitalize\n    constructor: /\\b[A-Z]\\w*\\b(?!\\s*\\.)/,\n    label: {\n      pattern: /\\b[a-z]\\w*(?=::)/,\n      alias: 'symbol'\n    }\n  }); // We can't match functions property, so let's not even try.\n  delete Prism.languages.reason[\"function\"];\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvcmVhc29uLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsTUFBTTtBQUN2QkEsTUFBTSxDQUFDQyxXQUFXLEdBQUcsUUFBUTtBQUM3QkQsTUFBTSxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNuQixTQUFTRixNQUFNQSxDQUFDRyxLQUFLLEVBQUU7RUFDckJBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixNQUFNLEdBQUdHLEtBQUssQ0FBQ0MsU0FBUyxDQUFDQyxNQUFNLENBQUMsT0FBTyxFQUFFO0lBQ3ZEQyxNQUFNLEVBQUU7TUFDTkMsT0FBTyxFQUFFLHFDQUFxQztNQUM5Q0MsTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUNEO0lBQ0EsWUFBWSxFQUFFLFlBQVk7SUFDMUJDLE9BQU8sRUFDTCwyUkFBMlI7SUFDN1JDLFFBQVEsRUFDTjtFQUNKLENBQUMsQ0FBQztFQUNGUCxLQUFLLENBQUNDLFNBQVMsQ0FBQ08sWUFBWSxDQUFDLFFBQVEsRUFBRSxZQUFZLEVBQUU7SUFDbkQsUUFBTTtNQUNKSixPQUFPLEVBQUUsK0RBQStEO01BQ3hFQyxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0Q7SUFDQUksV0FBVyxFQUFFLHVCQUF1QjtJQUNwQ0MsS0FBSyxFQUFFO01BQ0xOLE9BQU8sRUFBRSxrQkFBa0I7TUFDM0JPLEtBQUssRUFBRTtJQUNUO0VBQ0YsQ0FBQyxDQUFDLEVBQUM7RUFDSCxPQUFPWCxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osTUFBTSxZQUFTO0FBQ3hDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xccmVhc29uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlYXNvblxucmVhc29uLmRpc3BsYXlOYW1lID0gJ3JlYXNvbidcbnJlYXNvbi5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIHJlYXNvbihQcmlzbSkge1xuICBQcmlzbS5sYW5ndWFnZXMucmVhc29uID0gUHJpc20ubGFuZ3VhZ2VzLmV4dGVuZCgnY2xpa2UnLCB7XG4gICAgc3RyaW5nOiB7XG4gICAgICBwYXR0ZXJuOiAvXCIoPzpcXFxcKD86XFxyXFxufFtcXHNcXFNdKXxbXlxcXFxcXHJcXG5cIl0pKlwiLyxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgLy8gJ2NsYXNzLW5hbWUnIG11c3QgYmUgbWF0Y2hlZCAqYWZ0ZXIqICdjb25zdHJ1Y3RvcicgZGVmaW5lZCBiZWxvd1xuICAgICdjbGFzcy1uYW1lJzogL1xcYltBLVpdXFx3Ki8sXG4gICAga2V5d29yZDpcbiAgICAgIC9cXGIoPzphbmR8YXN8YXNzZXJ0fGJlZ2lufGNsYXNzfGNvbnN0cmFpbnR8ZG98ZG9uZXxkb3dudG98ZWxzZXxlbmR8ZXhjZXB0aW9ufGV4dGVybmFsfGZvcnxmdW58ZnVuY3Rpb258ZnVuY3RvcnxpZnxpbnxpbmNsdWRlfGluaGVyaXR8aW5pdGlhbGl6ZXJ8bGF6eXxsZXR8bWV0aG9kfG1vZHVsZXxtdXRhYmxlfG5ld3xub25yZWN8b2JqZWN0fG9mfG9wZW58b3J8cHJpdmF0ZXxyZWN8c2lnfHN0cnVjdHxzd2l0Y2h8dGhlbnx0b3x0cnl8dHlwZXx2YWx8dmlydHVhbHx3aGVufHdoaWxlfHdpdGgpXFxiLyxcbiAgICBvcGVyYXRvcjpcbiAgICAgIC9cXC57M318Ols6PV18XFx8PnwtPnw9KD86PT0/fD4pP3w8PT98Pj0/fFt8Xj8nIyF+YF18WytcXC0qXFwvXVxcLj98XFxiKD86YXNyfGxhbmR8bG9yfGxzbHxsc3J8bHhvcnxtb2QpXFxiL1xuICB9KVxuICBQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdyZWFzb24nLCAnY2xhc3MtbmFtZScsIHtcbiAgICBjaGFyOiB7XG4gICAgICBwYXR0ZXJuOiAvJyg/OlxcXFx4W1xcZGEtZl17Mn18XFxcXG9bMC0zXVswLTddWzAtN118XFxcXFxcZHszfXxcXFxcLnxbXidcXFxcXFxyXFxuXSknLyxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgLy8gTmVnYXRpdmUgbG9vay1haGVhZCBwcmV2ZW50cyBmcm9tIG1hdGNoaW5nIHRoaW5ncyBsaWtlIFN0cmluZy5jYXBpdGFsaXplXG4gICAgY29uc3RydWN0b3I6IC9cXGJbQS1aXVxcdypcXGIoPyFcXHMqXFwuKS8sXG4gICAgbGFiZWw6IHtcbiAgICAgIHBhdHRlcm46IC9cXGJbYS16XVxcdyooPz06OikvLFxuICAgICAgYWxpYXM6ICdzeW1ib2wnXG4gICAgfVxuICB9KSAvLyBXZSBjYW4ndCBtYXRjaCBmdW5jdGlvbnMgcHJvcGVydHksIHNvIGxldCdzIG5vdCBldmVuIHRyeS5cbiAgZGVsZXRlIFByaXNtLmxhbmd1YWdlcy5yZWFzb24uZnVuY3Rpb25cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicmVhc29uIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJleHRlbmQiLCJzdHJpbmciLCJwYXR0ZXJuIiwiZ3JlZWR5Iiwia2V5d29yZCIsIm9wZXJhdG9yIiwiaW5zZXJ0QmVmb3JlIiwiY29uc3RydWN0b3IiLCJsYWJlbCIsImFsaWFzIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/reason.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/regex.js":
/*!**********************************************!*\
  !*** ./node_modules/refractor/lang/regex.js ***!
  \**********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = regex;\nregex.displayName = 'regex';\nregex.aliases = [];\nfunction regex(Prism) {\n  ;\n  (function (Prism) {\n    var specialEscape = {\n      pattern: /\\\\[\\\\(){}[\\]^$+*?|.]/,\n      alias: 'escape'\n    };\n    var escape = /\\\\(?:x[\\da-fA-F]{2}|u[\\da-fA-F]{4}|u\\{[\\da-fA-F]+\\}|0[0-7]{0,2}|[123][0-7]{2}|c[a-zA-Z]|.)/;\n    var charSet = {\n      pattern: /\\.|\\\\[wsd]|\\\\p\\{[^{}]+\\}/i,\n      alias: 'class-name'\n    };\n    var charSetWithoutDot = {\n      pattern: /\\\\[wsd]|\\\\p\\{[^{}]+\\}/i,\n      alias: 'class-name'\n    };\n    var rangeChar = '(?:[^\\\\\\\\-]|' + escape.source + ')';\n    var range = RegExp(rangeChar + '-' + rangeChar); // the name of a capturing group\n    var groupName = {\n      pattern: /(<|')[^<>']+(?=[>']$)/,\n      lookbehind: true,\n      alias: 'variable'\n    };\n    Prism.languages.regex = {\n      'char-class': {\n        pattern: /((?:^|[^\\\\])(?:\\\\\\\\)*)\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*\\]/,\n        lookbehind: true,\n        inside: {\n          'char-class-negation': {\n            pattern: /(^\\[)\\^/,\n            lookbehind: true,\n            alias: 'operator'\n          },\n          'char-class-punctuation': {\n            pattern: /^\\[|\\]$/,\n            alias: 'punctuation'\n          },\n          range: {\n            pattern: range,\n            inside: {\n              escape: escape,\n              'range-punctuation': {\n                pattern: /-/,\n                alias: 'operator'\n              }\n            }\n          },\n          'special-escape': specialEscape,\n          'char-set': charSetWithoutDot,\n          escape: escape\n        }\n      },\n      'special-escape': specialEscape,\n      'char-set': charSet,\n      backreference: [{\n        // a backreference which is not an octal escape\n        pattern: /\\\\(?![123][0-7]{2})[1-9]/,\n        alias: 'keyword'\n      }, {\n        pattern: /\\\\k<[^<>']+>/,\n        alias: 'keyword',\n        inside: {\n          'group-name': groupName\n        }\n      }],\n      anchor: {\n        pattern: /[$^]|\\\\[ABbGZz]/,\n        alias: 'function'\n      },\n      escape: escape,\n      group: [{\n        // https://docs.oracle.com/javase/10/docs/api/java/util/regex/Pattern.html\n        // https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference?view=netframework-4.7.2#grouping-constructs\n        // (), (?<name>), (?'name'), (?>), (?:), (?=), (?!), (?<=), (?<!), (?is-m), (?i-m:)\n        pattern: /\\((?:\\?(?:<[^<>']+>|'[^<>']+'|[>:]|<?[=!]|[idmnsuxU]+(?:-[idmnsuxU]+)?:?))?/,\n        alias: 'punctuation',\n        inside: {\n          'group-name': groupName\n        }\n      }, {\n        pattern: /\\)/,\n        alias: 'punctuation'\n      }],\n      quantifier: {\n        pattern: /(?:[+*?]|\\{\\d+(?:,\\d*)?\\})[?+]?/,\n        alias: 'number'\n      },\n      alternation: {\n        pattern: /\\|/,\n        alias: 'keyword'\n      }\n    };\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvcmVnZXguanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxLQUFLO0FBQ3RCQSxLQUFLLENBQUNDLFdBQVcsR0FBRyxPQUFPO0FBQzNCRCxLQUFLLENBQUNFLE9BQU8sR0FBRyxFQUFFO0FBQ2xCLFNBQVNGLEtBQUtBLENBQUNHLEtBQUssRUFBRTtFQUNwQjtFQUFDLENBQUMsVUFBVUEsS0FBSyxFQUFFO0lBQ2pCLElBQUlDLGFBQWEsR0FBRztNQUNsQkMsT0FBTyxFQUFFLHNCQUFzQjtNQUMvQkMsS0FBSyxFQUFFO0lBQ1QsQ0FBQztJQUNELElBQUlDLE1BQU0sR0FDUiw0RkFBNEY7SUFDOUYsSUFBSUMsT0FBTyxHQUFHO01BQ1pILE9BQU8sRUFBRSwyQkFBMkI7TUFDcENDLEtBQUssRUFBRTtJQUNULENBQUM7SUFDRCxJQUFJRyxpQkFBaUIsR0FBRztNQUN0QkosT0FBTyxFQUFFLHdCQUF3QjtNQUNqQ0MsS0FBSyxFQUFFO0lBQ1QsQ0FBQztJQUNELElBQUlJLFNBQVMsR0FBRyxjQUFjLEdBQUdILE1BQU0sQ0FBQ0ksTUFBTSxHQUFHLEdBQUc7SUFDcEQsSUFBSUMsS0FBSyxHQUFHQyxNQUFNLENBQUNILFNBQVMsR0FBRyxHQUFHLEdBQUdBLFNBQVMsQ0FBQyxFQUFDO0lBQ2hELElBQUlJLFNBQVMsR0FBRztNQUNkVCxPQUFPLEVBQUUsdUJBQXVCO01BQ2hDVSxVQUFVLEVBQUUsSUFBSTtNQUNoQlQsS0FBSyxFQUFFO0lBQ1QsQ0FBQztJQUNESCxLQUFLLENBQUNhLFNBQVMsQ0FBQ2hCLEtBQUssR0FBRztNQUN0QixZQUFZLEVBQUU7UUFDWkssT0FBTyxFQUFFLGlEQUFpRDtRQUMxRFUsVUFBVSxFQUFFLElBQUk7UUFDaEJFLE1BQU0sRUFBRTtVQUNOLHFCQUFxQixFQUFFO1lBQ3JCWixPQUFPLEVBQUUsU0FBUztZQUNsQlUsVUFBVSxFQUFFLElBQUk7WUFDaEJULEtBQUssRUFBRTtVQUNULENBQUM7VUFDRCx3QkFBd0IsRUFBRTtZQUN4QkQsT0FBTyxFQUFFLFNBQVM7WUFDbEJDLEtBQUssRUFBRTtVQUNULENBQUM7VUFDRE0sS0FBSyxFQUFFO1lBQ0xQLE9BQU8sRUFBRU8sS0FBSztZQUNkSyxNQUFNLEVBQUU7Y0FDTlYsTUFBTSxFQUFFQSxNQUFNO2NBQ2QsbUJBQW1CLEVBQUU7Z0JBQ25CRixPQUFPLEVBQUUsR0FBRztnQkFDWkMsS0FBSyxFQUFFO2NBQ1Q7WUFDRjtVQUNGLENBQUM7VUFDRCxnQkFBZ0IsRUFBRUYsYUFBYTtVQUMvQixVQUFVLEVBQUVLLGlCQUFpQjtVQUM3QkYsTUFBTSxFQUFFQTtRQUNWO01BQ0YsQ0FBQztNQUNELGdCQUFnQixFQUFFSCxhQUFhO01BQy9CLFVBQVUsRUFBRUksT0FBTztNQUNuQlUsYUFBYSxFQUFFLENBQ2I7UUFDRTtRQUNBYixPQUFPLEVBQUUsMEJBQTBCO1FBQ25DQyxLQUFLLEVBQUU7TUFDVCxDQUFDLEVBQ0Q7UUFDRUQsT0FBTyxFQUFFLGNBQWM7UUFDdkJDLEtBQUssRUFBRSxTQUFTO1FBQ2hCVyxNQUFNLEVBQUU7VUFDTixZQUFZLEVBQUVIO1FBQ2hCO01BQ0YsQ0FBQyxDQUNGO01BQ0RLLE1BQU0sRUFBRTtRQUNOZCxPQUFPLEVBQUUsaUJBQWlCO1FBQzFCQyxLQUFLLEVBQUU7TUFDVCxDQUFDO01BQ0RDLE1BQU0sRUFBRUEsTUFBTTtNQUNkYSxLQUFLLEVBQUUsQ0FDTDtRQUNFO1FBQ0E7UUFDQTtRQUNBZixPQUFPLEVBQ0wsNkVBQTZFO1FBQy9FQyxLQUFLLEVBQUUsYUFBYTtRQUNwQlcsTUFBTSxFQUFFO1VBQ04sWUFBWSxFQUFFSDtRQUNoQjtNQUNGLENBQUMsRUFDRDtRQUNFVCxPQUFPLEVBQUUsSUFBSTtRQUNiQyxLQUFLLEVBQUU7TUFDVCxDQUFDLENBQ0Y7TUFDRGUsVUFBVSxFQUFFO1FBQ1ZoQixPQUFPLEVBQUUsaUNBQWlDO1FBQzFDQyxLQUFLLEVBQUU7TUFDVCxDQUFDO01BQ0RnQixXQUFXLEVBQUU7UUFDWGpCLE9BQU8sRUFBRSxJQUFJO1FBQ2JDLEtBQUssRUFBRTtNQUNUO0lBQ0YsQ0FBQztFQUNILENBQUMsRUFBRUgsS0FBSyxDQUFDO0FBQ1giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxyZWdleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSByZWdleFxucmVnZXguZGlzcGxheU5hbWUgPSAncmVnZXgnXG5yZWdleC5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIHJlZ2V4KFByaXNtKSB7XG4gIDsoZnVuY3Rpb24gKFByaXNtKSB7XG4gICAgdmFyIHNwZWNpYWxFc2NhcGUgPSB7XG4gICAgICBwYXR0ZXJuOiAvXFxcXFtcXFxcKCl7fVtcXF1eJCsqP3wuXS8sXG4gICAgICBhbGlhczogJ2VzY2FwZSdcbiAgICB9XG4gICAgdmFyIGVzY2FwZSA9XG4gICAgICAvXFxcXCg/OnhbXFxkYS1mQS1GXXsyfXx1W1xcZGEtZkEtRl17NH18dVxce1tcXGRhLWZBLUZdK1xcfXwwWzAtN117MCwyfXxbMTIzXVswLTddezJ9fGNbYS16QS1aXXwuKS9cbiAgICB2YXIgY2hhclNldCA9IHtcbiAgICAgIHBhdHRlcm46IC9cXC58XFxcXFt3c2RdfFxcXFxwXFx7W157fV0rXFx9L2ksXG4gICAgICBhbGlhczogJ2NsYXNzLW5hbWUnXG4gICAgfVxuICAgIHZhciBjaGFyU2V0V2l0aG91dERvdCA9IHtcbiAgICAgIHBhdHRlcm46IC9cXFxcW3dzZF18XFxcXHBcXHtbXnt9XStcXH0vaSxcbiAgICAgIGFsaWFzOiAnY2xhc3MtbmFtZSdcbiAgICB9XG4gICAgdmFyIHJhbmdlQ2hhciA9ICcoPzpbXlxcXFxcXFxcLV18JyArIGVzY2FwZS5zb3VyY2UgKyAnKSdcbiAgICB2YXIgcmFuZ2UgPSBSZWdFeHAocmFuZ2VDaGFyICsgJy0nICsgcmFuZ2VDaGFyKSAvLyB0aGUgbmFtZSBvZiBhIGNhcHR1cmluZyBncm91cFxuICAgIHZhciBncm91cE5hbWUgPSB7XG4gICAgICBwYXR0ZXJuOiAvKDx8JylbXjw+J10rKD89Wz4nXSQpLyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBhbGlhczogJ3ZhcmlhYmxlJ1xuICAgIH1cbiAgICBQcmlzbS5sYW5ndWFnZXMucmVnZXggPSB7XG4gICAgICAnY2hhci1jbGFzcyc6IHtcbiAgICAgICAgcGF0dGVybjogLygoPzpefFteXFxcXF0pKD86XFxcXFxcXFwpKilcXFsoPzpbXlxcXFxcXF1dfFxcXFxbXFxzXFxTXSkqXFxdLyxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgJ2NoYXItY2xhc3MtbmVnYXRpb24nOiB7XG4gICAgICAgICAgICBwYXR0ZXJuOiAvKF5cXFspXFxeLyxcbiAgICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgICAgICBhbGlhczogJ29wZXJhdG9yJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgJ2NoYXItY2xhc3MtcHVuY3R1YXRpb24nOiB7XG4gICAgICAgICAgICBwYXR0ZXJuOiAvXlxcW3xcXF0kLyxcbiAgICAgICAgICAgIGFsaWFzOiAncHVuY3R1YXRpb24nXG4gICAgICAgICAgfSxcbiAgICAgICAgICByYW5nZToge1xuICAgICAgICAgICAgcGF0dGVybjogcmFuZ2UsXG4gICAgICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICAgICAgZXNjYXBlOiBlc2NhcGUsXG4gICAgICAgICAgICAgICdyYW5nZS1wdW5jdHVhdGlvbic6IHtcbiAgICAgICAgICAgICAgICBwYXR0ZXJuOiAvLS8sXG4gICAgICAgICAgICAgICAgYWxpYXM6ICdvcGVyYXRvcidcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgJ3NwZWNpYWwtZXNjYXBlJzogc3BlY2lhbEVzY2FwZSxcbiAgICAgICAgICAnY2hhci1zZXQnOiBjaGFyU2V0V2l0aG91dERvdCxcbiAgICAgICAgICBlc2NhcGU6IGVzY2FwZVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgJ3NwZWNpYWwtZXNjYXBlJzogc3BlY2lhbEVzY2FwZSxcbiAgICAgICdjaGFyLXNldCc6IGNoYXJTZXQsXG4gICAgICBiYWNrcmVmZXJlbmNlOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAvLyBhIGJhY2tyZWZlcmVuY2Ugd2hpY2ggaXMgbm90IGFuIG9jdGFsIGVzY2FwZVxuICAgICAgICAgIHBhdHRlcm46IC9cXFxcKD8hWzEyM11bMC03XXsyfSlbMS05XS8sXG4gICAgICAgICAgYWxpYXM6ICdrZXl3b3JkJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcGF0dGVybjogL1xcXFxrPFtePD4nXSs+LyxcbiAgICAgICAgICBhbGlhczogJ2tleXdvcmQnLFxuICAgICAgICAgIGluc2lkZToge1xuICAgICAgICAgICAgJ2dyb3VwLW5hbWUnOiBncm91cE5hbWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBhbmNob3I6IHtcbiAgICAgICAgcGF0dGVybjogL1skXl18XFxcXFtBQmJHWnpdLyxcbiAgICAgICAgYWxpYXM6ICdmdW5jdGlvbidcbiAgICAgIH0sXG4gICAgICBlc2NhcGU6IGVzY2FwZSxcbiAgICAgIGdyb3VwOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAvLyBodHRwczovL2RvY3Mub3JhY2xlLmNvbS9qYXZhc2UvMTAvZG9jcy9hcGkvamF2YS91dGlsL3JlZ2V4L1BhdHRlcm4uaHRtbFxuICAgICAgICAgIC8vIGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL2RvdG5ldC9zdGFuZGFyZC9iYXNlLXR5cGVzL3JlZ3VsYXItZXhwcmVzc2lvbi1sYW5ndWFnZS1xdWljay1yZWZlcmVuY2U/dmlldz1uZXRmcmFtZXdvcmstNC43LjIjZ3JvdXBpbmctY29uc3RydWN0c1xuICAgICAgICAgIC8vICgpLCAoPzxuYW1lPiksICg/J25hbWUnKSwgKD8+KSwgKD86KSwgKD89KSwgKD8hKSwgKD88PSksICg/PCEpLCAoP2lzLW0pLCAoP2ktbTopXG4gICAgICAgICAgcGF0dGVybjpcbiAgICAgICAgICAgIC9cXCgoPzpcXD8oPzo8W148PiddKz58J1tePD4nXSsnfFs+Ol18PD9bPSFdfFtpZG1uc3V4VV0rKD86LVtpZG1uc3V4VV0rKT86PykpPy8sXG4gICAgICAgICAgYWxpYXM6ICdwdW5jdHVhdGlvbicsXG4gICAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgICAnZ3JvdXAtbmFtZSc6IGdyb3VwTmFtZVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHBhdHRlcm46IC9cXCkvLFxuICAgICAgICAgIGFsaWFzOiAncHVuY3R1YXRpb24nXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBxdWFudGlmaWVyOiB7XG4gICAgICAgIHBhdHRlcm46IC8oPzpbKyo/XXxcXHtcXGQrKD86LFxcZCopP1xcfSlbPytdPy8sXG4gICAgICAgIGFsaWFzOiAnbnVtYmVyJ1xuICAgICAgfSxcbiAgICAgIGFsdGVybmF0aW9uOiB7XG4gICAgICAgIHBhdHRlcm46IC9cXHwvLFxuICAgICAgICBhbGlhczogJ2tleXdvcmQnXG4gICAgICB9XG4gICAgfVxuICB9KShQcmlzbSlcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicmVnZXgiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsInNwZWNpYWxFc2NhcGUiLCJwYXR0ZXJuIiwiYWxpYXMiLCJlc2NhcGUiLCJjaGFyU2V0IiwiY2hhclNldFdpdGhvdXREb3QiLCJyYW5nZUNoYXIiLCJzb3VyY2UiLCJyYW5nZSIsIlJlZ0V4cCIsImdyb3VwTmFtZSIsImxvb2tiZWhpbmQiLCJsYW5ndWFnZXMiLCJpbnNpZGUiLCJiYWNrcmVmZXJlbmNlIiwiYW5jaG9yIiwiZ3JvdXAiLCJxdWFudGlmaWVyIiwiYWx0ZXJuYXRpb24iXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/regex.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/rego.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/rego.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = rego;\nrego.displayName = 'rego';\nrego.aliases = [];\nfunction rego(Prism) {\n  // https://www.openpolicyagent.org/docs/latest/policy-reference/\n  Prism.languages.rego = {\n    comment: /#.*/,\n    property: {\n      pattern: /(^|[^\\\\.])(?:\"(?:\\\\.|[^\\\\\"\\r\\n])*\"|`[^`]*`|\\b[a-z_]\\w*\\b)(?=\\s*:(?!=))/i,\n      lookbehind: true,\n      greedy: true\n    },\n    string: {\n      pattern: /(^|[^\\\\])\"(?:\\\\.|[^\\\\\"\\r\\n])*\"|`[^`]*`/,\n      lookbehind: true,\n      greedy: true\n    },\n    keyword: /\\b(?:as|default|else|import|not|null|package|set(?=\\s*\\()|some|with)\\b/,\n    \"boolean\": /\\b(?:false|true)\\b/,\n    \"function\": {\n      pattern: /\\b[a-z_]\\w*\\b(?:\\s*\\.\\s*\\b[a-z_]\\w*\\b)*(?=\\s*\\()/i,\n      inside: {\n        namespace: /\\b\\w+\\b(?=\\s*\\.)/,\n        punctuation: /\\./\n      }\n    },\n    number: /-?\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n    operator: /[-+*/%|&]|[<>:=]=?|!=|\\b_\\b/,\n    punctuation: /[,;.\\[\\]{}()]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvcmVnby5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLElBQUk7QUFDckJBLElBQUksQ0FBQ0MsV0FBVyxHQUFHLE1BQU07QUFDekJELElBQUksQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDakIsU0FBU0YsSUFBSUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ25CO0VBQ0FBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixJQUFJLEdBQUc7SUFDckJLLE9BQU8sRUFBRSxLQUFLO0lBQ2RDLFFBQVEsRUFBRTtNQUNSQyxPQUFPLEVBQ0wseUVBQXlFO01BQzNFQyxVQUFVLEVBQUUsSUFBSTtNQUNoQkMsTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUNEQyxNQUFNLEVBQUU7TUFDTkgsT0FBTyxFQUFFLHdDQUF3QztNQUNqREMsVUFBVSxFQUFFLElBQUk7TUFDaEJDLE1BQU0sRUFBRTtJQUNWLENBQUM7SUFDREUsT0FBTyxFQUNMLHdFQUF3RTtJQUMxRSxXQUFTLG9CQUFvQjtJQUM3QixZQUFVO01BQ1JKLE9BQU8sRUFBRSxtREFBbUQ7TUFDNURLLE1BQU0sRUFBRTtRQUNOQyxTQUFTLEVBQUUsa0JBQWtCO1FBQzdCQyxXQUFXLEVBQUU7TUFDZjtJQUNGLENBQUM7SUFDREMsTUFBTSxFQUFFLG9DQUFvQztJQUM1Q0MsUUFBUSxFQUFFLDZCQUE2QjtJQUN2Q0YsV0FBVyxFQUFFO0VBQ2YsQ0FBQztBQUNIIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xccmVnby5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSByZWdvXG5yZWdvLmRpc3BsYXlOYW1lID0gJ3JlZ28nXG5yZWdvLmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24gcmVnbyhQcmlzbSkge1xuICAvLyBodHRwczovL3d3dy5vcGVucG9saWN5YWdlbnQub3JnL2RvY3MvbGF0ZXN0L3BvbGljeS1yZWZlcmVuY2UvXG4gIFByaXNtLmxhbmd1YWdlcy5yZWdvID0ge1xuICAgIGNvbW1lbnQ6IC8jLiovLFxuICAgIHByb3BlcnR5OiB7XG4gICAgICBwYXR0ZXJuOlxuICAgICAgICAvKF58W15cXFxcLl0pKD86XCIoPzpcXFxcLnxbXlxcXFxcIlxcclxcbl0pKlwifGBbXmBdKmB8XFxiW2Etel9dXFx3KlxcYikoPz1cXHMqOig/IT0pKS9pLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgc3RyaW5nOiB7XG4gICAgICBwYXR0ZXJuOiAvKF58W15cXFxcXSlcIig/OlxcXFwufFteXFxcXFwiXFxyXFxuXSkqXCJ8YFteYF0qYC8sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICBrZXl3b3JkOlxuICAgICAgL1xcYig/OmFzfGRlZmF1bHR8ZWxzZXxpbXBvcnR8bm90fG51bGx8cGFja2FnZXxzZXQoPz1cXHMqXFwoKXxzb21lfHdpdGgpXFxiLyxcbiAgICBib29sZWFuOiAvXFxiKD86ZmFsc2V8dHJ1ZSlcXGIvLFxuICAgIGZ1bmN0aW9uOiB7XG4gICAgICBwYXR0ZXJuOiAvXFxiW2Etel9dXFx3KlxcYig/OlxccypcXC5cXHMqXFxiW2Etel9dXFx3KlxcYikqKD89XFxzKlxcKCkvaSxcbiAgICAgIGluc2lkZToge1xuICAgICAgICBuYW1lc3BhY2U6IC9cXGJcXHcrXFxiKD89XFxzKlxcLikvLFxuICAgICAgICBwdW5jdHVhdGlvbjogL1xcLi9cbiAgICAgIH1cbiAgICB9LFxuICAgIG51bWJlcjogLy0/XFxiXFxkKyg/OlxcLlxcZCspPyg/OmVbKy1dP1xcZCspP1xcYi9pLFxuICAgIG9wZXJhdG9yOiAvWy0rKi8lfCZdfFs8Pjo9XT0/fCE9fFxcYl9cXGIvLFxuICAgIHB1bmN0dWF0aW9uOiAvWyw7LlxcW1xcXXt9KCldL1xuICB9XG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInJlZ28iLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImxhbmd1YWdlcyIsImNvbW1lbnQiLCJwcm9wZXJ0eSIsInBhdHRlcm4iLCJsb29rYmVoaW5kIiwiZ3JlZWR5Iiwic3RyaW5nIiwia2V5d29yZCIsImluc2lkZSIsIm5hbWVzcGFjZSIsInB1bmN0dWF0aW9uIiwibnVtYmVyIiwib3BlcmF0b3IiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/rego.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/renpy.js":
/*!**********************************************!*\
  !*** ./node_modules/refractor/lang/renpy.js ***!
  \**********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = renpy;\nrenpy.displayName = 'renpy';\nrenpy.aliases = ['rpy'];\nfunction renpy(Prism) {\n  Prism.languages.renpy = {\n    comment: {\n      pattern: /(^|[^\\\\])#.+/,\n      lookbehind: true\n    },\n    string: {\n      pattern: /(\"\"\"|''')[\\s\\S]+?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\])*\\2|(?:^#?(?:(?:[0-9a-fA-F]){3}|[0-9a-fA-F]{6})$)/m,\n      greedy: true\n    },\n    \"function\": /\\b[a-z_]\\w*(?=\\()/i,\n    property: /\\b(?:Update|UpdateVersion|action|activate_sound|adv_nvl_transition|after_load_transition|align|alpha|alt|anchor|antialias|area|auto|background|bar_invert|bar_resizing|bar_vertical|black_color|bold|bottom_bar|bottom_gutter|bottom_margin|bottom_padding|box_reverse|box_wrap|can_update|caret|child|color|crop|default_afm_enable|default_afm_time|default_fullscreen|default_text_cps|developer|directory_name|drag_handle|drag_joined|drag_name|drag_raise|draggable|dragged|drop_shadow|drop_shadow_color|droppable|dropped|easein|easeout|edgescroll|end_game_transition|end_splash_transition|enter_replay_transition|enter_sound|enter_transition|enter_yesno_transition|executable_name|exit_replay_transition|exit_sound|exit_transition|exit_yesno_transition|fadein|fadeout|first_indent|first_spacing|fit_first|focus|focus_mask|font|foreground|game_main_transition|get_installed_packages|google_play_key|google_play_salt|ground|has_music|has_sound|has_voice|height|help|hinting|hover|hover_background|hover_color|hover_sound|hovered|hyperlink_functions|idle|idle_color|image_style|include_update|insensitive|insensitive_background|insensitive_color|inside|intra_transition|italic|justify|kerning|keyboard_focus|language|layer_clipping|layers|layout|left_bar|left_gutter|left_margin|left_padding|length|line_leading|line_overlap_split|line_spacing|linear|main_game_transition|main_menu_music|maximum|min_width|minimum|minwidth|modal|mouse|mousewheel|name|narrator_menu|newline_indent|nvl_adv_transition|offset|order_reverse|outlines|overlay_functions|pos|position|prefix|radius|range|rest_indent|right_bar|right_gutter|right_margin|right_padding|rotate|rotate_pad|ruby_style|sample_sound|save_directory|say_attribute_transition|screen_height|screen_width|scrollbars|selected_hover|selected_hover_color|selected_idle|selected_idle_color|selected_insensitive|show_side_image|show_two_window|side_spacing|side_xpos|side_ypos|size|size_group|slow_cps|slow_cps_multiplier|spacing|strikethrough|subpixel|text_align|text_style|text_xpos|text_y_fudge|text_ypos|thumb|thumb_offset|thumb_shadow|thumbnail_height|thumbnail_width|time|top_bar|top_gutter|top_margin|top_padding|translations|underline|unscrollable|update|value|version|version_name|version_tuple|vertical|width|window_hide_transition|window_icon|window_left_padding|window_show_transition|window_title|windows_icon|xadjustment|xalign|xanchor|xanchoraround|xaround|xcenter|xfill|xinitial|xmargin|xmaximum|xminimum|xoffset|xofsset|xpadding|xpos|xsize|xzoom|yadjustment|yalign|yanchor|yanchoraround|yaround|ycenter|yfill|yinitial|ymargin|ymaximum|yminimum|yoffset|ypadding|ypos|ysize|ysizexysize|yzoom|zoom|zorder)\\b/,\n    tag: /\\b(?:bar|block|button|buttoscreenn|drag|draggroup|fixed|frame|grid|[hv]box|hotbar|hotspot|image|imagebutton|imagemap|input|key|label|menu|mm_menu_frame|mousearea|nvl|parallel|screen|self|side|tag|text|textbutton|timer|vbar|viewport|window)\\b|\\$/,\n    keyword: /\\b(?:None|add|adjustment|alignaround|allow|angle|animation|around|as|assert|behind|box_layout|break|build|cache|call|center|changed|child_size|choice|circles|class|clear|clicked|clipping|clockwise|config|contains|continue|corner1|corner2|counterclockwise|def|default|define|del|delay|disabled|disabled_text|dissolve|elif|else|event|except|exclude|exec|expression|fade|finally|for|from|function|global|gm_root|has|hide|id|if|import|in|init|is|jump|knot|lambda|left|less_rounded|mm_root|movie|music|null|on|onlayer|pass|pause|persistent|play|print|python|queue|raise|random|renpy|repeat|return|right|rounded_window|scene|scope|set|show|slow|slow_abortable|slow_done|sound|stop|store|style|style_group|substitute|suffix|theme|transform|transform_anchor|transpose|try|ui|unhovered|updater|use|voice|while|widget|widget_hover|widget_selected|widget_text|yield)\\b/,\n    \"boolean\": /\\b(?:[Ff]alse|[Tt]rue)\\b/,\n    number: /(?:\\b(?:0[bo])?(?:(?:\\d|0x[\\da-f])[\\da-f]*(?:\\.\\d*)?)|\\B\\.\\d+)(?:e[+-]?\\d+)?j?/i,\n    operator: /[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]|\\b(?:and|at|not|or|with)\\b/,\n    punctuation: /[{}[\\];(),.:]/\n  };\n  Prism.languages.rpy = Prism.languages.renpy;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvcmVucHkuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxLQUFLO0FBQ3RCQSxLQUFLLENBQUNDLFdBQVcsR0FBRyxPQUFPO0FBQzNCRCxLQUFLLENBQUNFLE9BQU8sR0FBRyxDQUFDLEtBQUssQ0FBQztBQUN2QixTQUFTRixLQUFLQSxDQUFDRyxLQUFLLEVBQUU7RUFDcEJBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixLQUFLLEdBQUc7SUFDdEJLLE9BQU8sRUFBRTtNQUNQQyxPQUFPLEVBQUUsY0FBYztNQUN2QkMsVUFBVSxFQUFFO0lBQ2QsQ0FBQztJQUNEQyxNQUFNLEVBQUU7TUFDTkYsT0FBTyxFQUNMLGdHQUFnRztNQUNsR0csTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUNELFlBQVUsb0JBQW9CO0lBQzlCQyxRQUFRLEVBQ04sOGxGQUE4bEY7SUFDaG1GQyxHQUFHLEVBQUUsc1BBQXNQO0lBQzNQQyxPQUFPLEVBQ0wsMjFCQUEyMUI7SUFDNzFCLFdBQVMsMEJBQTBCO0lBQ25DQyxNQUFNLEVBQ0osaUZBQWlGO0lBQ25GQyxRQUFRLEVBQ04sOEVBQThFO0lBQ2hGQyxXQUFXLEVBQUU7RUFDZixDQUFDO0VBQ0RaLEtBQUssQ0FBQ0MsU0FBUyxDQUFDWSxHQUFHLEdBQUdiLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixLQUFLO0FBQzdDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xccmVucHkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gcmVucHlcbnJlbnB5LmRpc3BsYXlOYW1lID0gJ3JlbnB5J1xucmVucHkuYWxpYXNlcyA9IFsncnB5J11cbmZ1bmN0aW9uIHJlbnB5KFByaXNtKSB7XG4gIFByaXNtLmxhbmd1YWdlcy5yZW5weSA9IHtcbiAgICBjb21tZW50OiB7XG4gICAgICBwYXR0ZXJuOiAvKF58W15cXFxcXSkjLisvLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgIH0sXG4gICAgc3RyaW5nOiB7XG4gICAgICBwYXR0ZXJuOlxuICAgICAgICAvKFwiXCJcInwnJycpW1xcc1xcU10rP1xcMXwoXCJ8JykoPzpcXFxcLnwoPyFcXDIpW15cXFxcXSkqXFwyfCg/Ol4jPyg/Oig/OlswLTlhLWZBLUZdKXszfXxbMC05YS1mQS1GXXs2fSkkKS9tLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICBmdW5jdGlvbjogL1xcYlthLXpfXVxcdyooPz1cXCgpL2ksXG4gICAgcHJvcGVydHk6XG4gICAgICAvXFxiKD86VXBkYXRlfFVwZGF0ZVZlcnNpb258YWN0aW9ufGFjdGl2YXRlX3NvdW5kfGFkdl9udmxfdHJhbnNpdGlvbnxhZnRlcl9sb2FkX3RyYW5zaXRpb258YWxpZ258YWxwaGF8YWx0fGFuY2hvcnxhbnRpYWxpYXN8YXJlYXxhdXRvfGJhY2tncm91bmR8YmFyX2ludmVydHxiYXJfcmVzaXppbmd8YmFyX3ZlcnRpY2FsfGJsYWNrX2NvbG9yfGJvbGR8Ym90dG9tX2Jhcnxib3R0b21fZ3V0dGVyfGJvdHRvbV9tYXJnaW58Ym90dG9tX3BhZGRpbmd8Ym94X3JldmVyc2V8Ym94X3dyYXB8Y2FuX3VwZGF0ZXxjYXJldHxjaGlsZHxjb2xvcnxjcm9wfGRlZmF1bHRfYWZtX2VuYWJsZXxkZWZhdWx0X2FmbV90aW1lfGRlZmF1bHRfZnVsbHNjcmVlbnxkZWZhdWx0X3RleHRfY3BzfGRldmVsb3BlcnxkaXJlY3RvcnlfbmFtZXxkcmFnX2hhbmRsZXxkcmFnX2pvaW5lZHxkcmFnX25hbWV8ZHJhZ19yYWlzZXxkcmFnZ2FibGV8ZHJhZ2dlZHxkcm9wX3NoYWRvd3xkcm9wX3NoYWRvd19jb2xvcnxkcm9wcGFibGV8ZHJvcHBlZHxlYXNlaW58ZWFzZW91dHxlZGdlc2Nyb2xsfGVuZF9nYW1lX3RyYW5zaXRpb258ZW5kX3NwbGFzaF90cmFuc2l0aW9ufGVudGVyX3JlcGxheV90cmFuc2l0aW9ufGVudGVyX3NvdW5kfGVudGVyX3RyYW5zaXRpb258ZW50ZXJfeWVzbm9fdHJhbnNpdGlvbnxleGVjdXRhYmxlX25hbWV8ZXhpdF9yZXBsYXlfdHJhbnNpdGlvbnxleGl0X3NvdW5kfGV4aXRfdHJhbnNpdGlvbnxleGl0X3llc25vX3RyYW5zaXRpb258ZmFkZWlufGZhZGVvdXR8Zmlyc3RfaW5kZW50fGZpcnN0X3NwYWNpbmd8Zml0X2ZpcnN0fGZvY3VzfGZvY3VzX21hc2t8Zm9udHxmb3JlZ3JvdW5kfGdhbWVfbWFpbl90cmFuc2l0aW9ufGdldF9pbnN0YWxsZWRfcGFja2FnZXN8Z29vZ2xlX3BsYXlfa2V5fGdvb2dsZV9wbGF5X3NhbHR8Z3JvdW5kfGhhc19tdXNpY3xoYXNfc291bmR8aGFzX3ZvaWNlfGhlaWdodHxoZWxwfGhpbnRpbmd8aG92ZXJ8aG92ZXJfYmFja2dyb3VuZHxob3Zlcl9jb2xvcnxob3Zlcl9zb3VuZHxob3ZlcmVkfGh5cGVybGlua19mdW5jdGlvbnN8aWRsZXxpZGxlX2NvbG9yfGltYWdlX3N0eWxlfGluY2x1ZGVfdXBkYXRlfGluc2Vuc2l0aXZlfGluc2Vuc2l0aXZlX2JhY2tncm91bmR8aW5zZW5zaXRpdmVfY29sb3J8aW5zaWRlfGludHJhX3RyYW5zaXRpb258aXRhbGljfGp1c3RpZnl8a2VybmluZ3xrZXlib2FyZF9mb2N1c3xsYW5ndWFnZXxsYXllcl9jbGlwcGluZ3xsYXllcnN8bGF5b3V0fGxlZnRfYmFyfGxlZnRfZ3V0dGVyfGxlZnRfbWFyZ2lufGxlZnRfcGFkZGluZ3xsZW5ndGh8bGluZV9sZWFkaW5nfGxpbmVfb3ZlcmxhcF9zcGxpdHxsaW5lX3NwYWNpbmd8bGluZWFyfG1haW5fZ2FtZV90cmFuc2l0aW9ufG1haW5fbWVudV9tdXNpY3xtYXhpbXVtfG1pbl93aWR0aHxtaW5pbXVtfG1pbndpZHRofG1vZGFsfG1vdXNlfG1vdXNld2hlZWx8bmFtZXxuYXJyYXRvcl9tZW51fG5ld2xpbmVfaW5kZW50fG52bF9hZHZfdHJhbnNpdGlvbnxvZmZzZXR8b3JkZXJfcmV2ZXJzZXxvdXRsaW5lc3xvdmVybGF5X2Z1bmN0aW9uc3xwb3N8cG9zaXRpb258cHJlZml4fHJhZGl1c3xyYW5nZXxyZXN0X2luZGVudHxyaWdodF9iYXJ8cmlnaHRfZ3V0dGVyfHJpZ2h0X21hcmdpbnxyaWdodF9wYWRkaW5nfHJvdGF0ZXxyb3RhdGVfcGFkfHJ1Ynlfc3R5bGV8c2FtcGxlX3NvdW5kfHNhdmVfZGlyZWN0b3J5fHNheV9hdHRyaWJ1dGVfdHJhbnNpdGlvbnxzY3JlZW5faGVpZ2h0fHNjcmVlbl93aWR0aHxzY3JvbGxiYXJzfHNlbGVjdGVkX2hvdmVyfHNlbGVjdGVkX2hvdmVyX2NvbG9yfHNlbGVjdGVkX2lkbGV8c2VsZWN0ZWRfaWRsZV9jb2xvcnxzZWxlY3RlZF9pbnNlbnNpdGl2ZXxzaG93X3NpZGVfaW1hZ2V8c2hvd190d29fd2luZG93fHNpZGVfc3BhY2luZ3xzaWRlX3hwb3N8c2lkZV95cG9zfHNpemV8c2l6ZV9ncm91cHxzbG93X2Nwc3xzbG93X2Nwc19tdWx0aXBsaWVyfHNwYWNpbmd8c3RyaWtldGhyb3VnaHxzdWJwaXhlbHx0ZXh0X2FsaWdufHRleHRfc3R5bGV8dGV4dF94cG9zfHRleHRfeV9mdWRnZXx0ZXh0X3lwb3N8dGh1bWJ8dGh1bWJfb2Zmc2V0fHRodW1iX3NoYWRvd3x0aHVtYm5haWxfaGVpZ2h0fHRodW1ibmFpbF93aWR0aHx0aW1lfHRvcF9iYXJ8dG9wX2d1dHRlcnx0b3BfbWFyZ2lufHRvcF9wYWRkaW5nfHRyYW5zbGF0aW9uc3x1bmRlcmxpbmV8dW5zY3JvbGxhYmxlfHVwZGF0ZXx2YWx1ZXx2ZXJzaW9ufHZlcnNpb25fbmFtZXx2ZXJzaW9uX3R1cGxlfHZlcnRpY2FsfHdpZHRofHdpbmRvd19oaWRlX3RyYW5zaXRpb258d2luZG93X2ljb258d2luZG93X2xlZnRfcGFkZGluZ3x3aW5kb3dfc2hvd190cmFuc2l0aW9ufHdpbmRvd190aXRsZXx3aW5kb3dzX2ljb258eGFkanVzdG1lbnR8eGFsaWdufHhhbmNob3J8eGFuY2hvcmFyb3VuZHx4YXJvdW5kfHhjZW50ZXJ8eGZpbGx8eGluaXRpYWx8eG1hcmdpbnx4bWF4aW11bXx4bWluaW11bXx4b2Zmc2V0fHhvZnNzZXR8eHBhZGRpbmd8eHBvc3x4c2l6ZXx4em9vbXx5YWRqdXN0bWVudHx5YWxpZ258eWFuY2hvcnx5YW5jaG9yYXJvdW5kfHlhcm91bmR8eWNlbnRlcnx5ZmlsbHx5aW5pdGlhbHx5bWFyZ2lufHltYXhpbXVtfHltaW5pbXVtfHlvZmZzZXR8eXBhZGRpbmd8eXBvc3x5c2l6ZXx5c2l6ZXh5c2l6ZXx5em9vbXx6b29tfHpvcmRlcilcXGIvLFxuICAgIHRhZzogL1xcYig/OmJhcnxibG9ja3xidXR0b258YnV0dG9zY3JlZW5ufGRyYWd8ZHJhZ2dyb3VwfGZpeGVkfGZyYW1lfGdyaWR8W2h2XWJveHxob3RiYXJ8aG90c3BvdHxpbWFnZXxpbWFnZWJ1dHRvbnxpbWFnZW1hcHxpbnB1dHxrZXl8bGFiZWx8bWVudXxtbV9tZW51X2ZyYW1lfG1vdXNlYXJlYXxudmx8cGFyYWxsZWx8c2NyZWVufHNlbGZ8c2lkZXx0YWd8dGV4dHx0ZXh0YnV0dG9ufHRpbWVyfHZiYXJ8dmlld3BvcnR8d2luZG93KVxcYnxcXCQvLFxuICAgIGtleXdvcmQ6XG4gICAgICAvXFxiKD86Tm9uZXxhZGR8YWRqdXN0bWVudHxhbGlnbmFyb3VuZHxhbGxvd3xhbmdsZXxhbmltYXRpb258YXJvdW5kfGFzfGFzc2VydHxiZWhpbmR8Ym94X2xheW91dHxicmVha3xidWlsZHxjYWNoZXxjYWxsfGNlbnRlcnxjaGFuZ2VkfGNoaWxkX3NpemV8Y2hvaWNlfGNpcmNsZXN8Y2xhc3N8Y2xlYXJ8Y2xpY2tlZHxjbGlwcGluZ3xjbG9ja3dpc2V8Y29uZmlnfGNvbnRhaW5zfGNvbnRpbnVlfGNvcm5lcjF8Y29ybmVyMnxjb3VudGVyY2xvY2t3aXNlfGRlZnxkZWZhdWx0fGRlZmluZXxkZWx8ZGVsYXl8ZGlzYWJsZWR8ZGlzYWJsZWRfdGV4dHxkaXNzb2x2ZXxlbGlmfGVsc2V8ZXZlbnR8ZXhjZXB0fGV4Y2x1ZGV8ZXhlY3xleHByZXNzaW9ufGZhZGV8ZmluYWxseXxmb3J8ZnJvbXxmdW5jdGlvbnxnbG9iYWx8Z21fcm9vdHxoYXN8aGlkZXxpZHxpZnxpbXBvcnR8aW58aW5pdHxpc3xqdW1wfGtub3R8bGFtYmRhfGxlZnR8bGVzc19yb3VuZGVkfG1tX3Jvb3R8bW92aWV8bXVzaWN8bnVsbHxvbnxvbmxheWVyfHBhc3N8cGF1c2V8cGVyc2lzdGVudHxwbGF5fHByaW50fHB5dGhvbnxxdWV1ZXxyYWlzZXxyYW5kb218cmVucHl8cmVwZWF0fHJldHVybnxyaWdodHxyb3VuZGVkX3dpbmRvd3xzY2VuZXxzY29wZXxzZXR8c2hvd3xzbG93fHNsb3dfYWJvcnRhYmxlfHNsb3dfZG9uZXxzb3VuZHxzdG9wfHN0b3JlfHN0eWxlfHN0eWxlX2dyb3VwfHN1YnN0aXR1dGV8c3VmZml4fHRoZW1lfHRyYW5zZm9ybXx0cmFuc2Zvcm1fYW5jaG9yfHRyYW5zcG9zZXx0cnl8dWl8dW5ob3ZlcmVkfHVwZGF0ZXJ8dXNlfHZvaWNlfHdoaWxlfHdpZGdldHx3aWRnZXRfaG92ZXJ8d2lkZ2V0X3NlbGVjdGVkfHdpZGdldF90ZXh0fHlpZWxkKVxcYi8sXG4gICAgYm9vbGVhbjogL1xcYig/OltGZl1hbHNlfFtUdF1ydWUpXFxiLyxcbiAgICBudW1iZXI6XG4gICAgICAvKD86XFxiKD86MFtib10pPyg/Oig/OlxcZHwweFtcXGRhLWZdKVtcXGRhLWZdKig/OlxcLlxcZCopPyl8XFxCXFwuXFxkKykoPzplWystXT9cXGQrKT9qPy9pLFxuICAgIG9wZXJhdG9yOlxuICAgICAgL1stKyU9XT0/fCE9fFxcKlxcKj89P3xcXC9cXC8/PT98PFs8PT5dP3w+Wz0+XT98WyZ8Xn5dfFxcYig/OmFuZHxhdHxub3R8b3J8d2l0aClcXGIvLFxuICAgIHB1bmN0dWF0aW9uOiAvW3t9W1xcXTsoKSwuOl0vXG4gIH1cbiAgUHJpc20ubGFuZ3VhZ2VzLnJweSA9IFByaXNtLmxhbmd1YWdlcy5yZW5weVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJyZW5weSIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwiY29tbWVudCIsInBhdHRlcm4iLCJsb29rYmVoaW5kIiwic3RyaW5nIiwiZ3JlZWR5IiwicHJvcGVydHkiLCJ0YWciLCJrZXl3b3JkIiwibnVtYmVyIiwib3BlcmF0b3IiLCJwdW5jdHVhdGlvbiIsInJweSJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/renpy.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/rest.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/rest.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = rest;\nrest.displayName = 'rest';\nrest.aliases = [];\nfunction rest(Prism) {\n  Prism.languages.rest = {\n    table: [{\n      pattern: /(^[\\t ]*)(?:\\+[=-]+)+\\+(?:\\r?\\n|\\r)(?:\\1[+|].+[+|](?:\\r?\\n|\\r))+\\1(?:\\+[=-]+)+\\+/m,\n      lookbehind: true,\n      inside: {\n        punctuation: /\\||(?:\\+[=-]+)+\\+/\n      }\n    }, {\n      pattern: /(^[\\t ]*)=+ [ =]*=(?:(?:\\r?\\n|\\r)\\1.+)+(?:\\r?\\n|\\r)\\1=+ [ =]*=(?=(?:\\r?\\n|\\r){2}|\\s*$)/m,\n      lookbehind: true,\n      inside: {\n        punctuation: /[=-]+/\n      }\n    }],\n    // Directive-like patterns\n    'substitution-def': {\n      pattern: /(^[\\t ]*\\.\\. )\\|(?:[^|\\s](?:[^|]*[^|\\s])?)\\| [^:]+::/m,\n      lookbehind: true,\n      inside: {\n        substitution: {\n          pattern: /^\\|(?:[^|\\s]|[^|\\s][^|]*[^|\\s])\\|/,\n          alias: 'attr-value',\n          inside: {\n            punctuation: /^\\||\\|$/\n          }\n        },\n        directive: {\n          pattern: /( )(?! )[^:]+::/,\n          lookbehind: true,\n          alias: 'function',\n          inside: {\n            punctuation: /::$/\n          }\n        }\n      }\n    },\n    'link-target': [{\n      pattern: /(^[\\t ]*\\.\\. )\\[[^\\]]+\\]/m,\n      lookbehind: true,\n      alias: 'string',\n      inside: {\n        punctuation: /^\\[|\\]$/\n      }\n    }, {\n      pattern: /(^[\\t ]*\\.\\. )_(?:`[^`]+`|(?:[^:\\\\]|\\\\.)+):/m,\n      lookbehind: true,\n      alias: 'string',\n      inside: {\n        punctuation: /^_|:$/\n      }\n    }],\n    directive: {\n      pattern: /(^[\\t ]*\\.\\. )[^:]+::/m,\n      lookbehind: true,\n      alias: 'function',\n      inside: {\n        punctuation: /::$/\n      }\n    },\n    comment: {\n      // The two alternatives try to prevent highlighting of blank comments\n      pattern: /(^[\\t ]*\\.\\.)(?:(?: .+)?(?:(?:\\r?\\n|\\r).+)+| .+)(?=(?:\\r?\\n|\\r){2}|$)/m,\n      lookbehind: true\n    },\n    title: [\n    // Overlined and underlined\n    {\n      pattern: /^(([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~])\\2+)(?:\\r?\\n|\\r).+(?:\\r?\\n|\\r)\\1$/m,\n      inside: {\n        punctuation: /^[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~]+|[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~]+$/,\n        important: /.+/\n      }\n    },\n    // Underlined only\n    {\n      pattern: /(^|(?:\\r?\\n|\\r){2}).+(?:\\r?\\n|\\r)([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~])\\2+(?=\\r?\\n|\\r|$)/,\n      lookbehind: true,\n      inside: {\n        punctuation: /[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~]+$/,\n        important: /.+/\n      }\n    }],\n    hr: {\n      pattern: /((?:\\r?\\n|\\r){2})([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~])\\2{3,}(?=(?:\\r?\\n|\\r){2})/,\n      lookbehind: true,\n      alias: 'punctuation'\n    },\n    field: {\n      pattern: /(^[\\t ]*):[^:\\r\\n]+:(?= )/m,\n      lookbehind: true,\n      alias: 'attr-name'\n    },\n    'command-line-option': {\n      pattern: /(^[\\t ]*)(?:[+-][a-z\\d]|(?:--|\\/)[a-z\\d-]+)(?:[ =](?:[a-z][\\w-]*|<[^<>]+>))?(?:, (?:[+-][a-z\\d]|(?:--|\\/)[a-z\\d-]+)(?:[ =](?:[a-z][\\w-]*|<[^<>]+>))?)*(?=(?:\\r?\\n|\\r)? {2,}\\S)/im,\n      lookbehind: true,\n      alias: 'symbol'\n    },\n    'literal-block': {\n      pattern: /::(?:\\r?\\n|\\r){2}([ \\t]+)(?![ \\t]).+(?:(?:\\r?\\n|\\r)\\1.+)*/,\n      inside: {\n        'literal-block-punctuation': {\n          pattern: /^::/,\n          alias: 'punctuation'\n        }\n      }\n    },\n    'quoted-literal-block': {\n      pattern: /::(?:\\r?\\n|\\r){2}([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~]).*(?:(?:\\r?\\n|\\r)\\1.*)*/,\n      inside: {\n        'literal-block-punctuation': {\n          pattern: /^(?:::|([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~])\\1*)/m,\n          alias: 'punctuation'\n        }\n      }\n    },\n    'list-bullet': {\n      pattern: /(^[\\t ]*)(?:[*+\\-•‣⁃]|\\(?(?:\\d+|[a-z]|[ivxdclm]+)\\)|(?:\\d+|[a-z]|[ivxdclm]+)\\.)(?= )/im,\n      lookbehind: true,\n      alias: 'punctuation'\n    },\n    'doctest-block': {\n      pattern: /(^[\\t ]*)>>> .+(?:(?:\\r?\\n|\\r).+)*/m,\n      lookbehind: true,\n      inside: {\n        punctuation: /^>>>/\n      }\n    },\n    inline: [{\n      pattern: /(^|[\\s\\-:\\/'\"<(\\[{])(?::[^:]+:`.*?`|`.*?`:[^:]+:|(\\*\\*?|``?|\\|)(?!\\s)(?:(?!\\2).)*\\S\\2(?=[\\s\\-.,:;!?\\\\\\/'\")\\]}]|$))/m,\n      lookbehind: true,\n      inside: {\n        bold: {\n          pattern: /(^\\*\\*).+(?=\\*\\*$)/,\n          lookbehind: true\n        },\n        italic: {\n          pattern: /(^\\*).+(?=\\*$)/,\n          lookbehind: true\n        },\n        'inline-literal': {\n          pattern: /(^``).+(?=``$)/,\n          lookbehind: true,\n          alias: 'symbol'\n        },\n        role: {\n          pattern: /^:[^:]+:|:[^:]+:$/,\n          alias: 'function',\n          inside: {\n            punctuation: /^:|:$/\n          }\n        },\n        'interpreted-text': {\n          pattern: /(^`).+(?=`$)/,\n          lookbehind: true,\n          alias: 'attr-value'\n        },\n        substitution: {\n          pattern: /(^\\|).+(?=\\|$)/,\n          lookbehind: true,\n          alias: 'attr-value'\n        },\n        punctuation: /\\*\\*?|``?|\\|/\n      }\n    }],\n    link: [{\n      pattern: /\\[[^\\[\\]]+\\]_(?=[\\s\\-.,:;!?\\\\\\/'\")\\]}]|$)/,\n      alias: 'string',\n      inside: {\n        punctuation: /^\\[|\\]_$/\n      }\n    }, {\n      pattern: /(?:\\b[a-z\\d]+(?:[_.:+][a-z\\d]+)*_?_|`[^`]+`_?_|_`[^`]+`)(?=[\\s\\-.,:;!?\\\\\\/'\")\\]}]|$)/i,\n      alias: 'string',\n      inside: {\n        punctuation: /^_?`|`$|`?_?_$/\n      }\n    }],\n    // Line block start,\n    // quote attribution,\n    // explicit markup start,\n    // and anonymous hyperlink target shortcut (__)\n    punctuation: {\n      pattern: /(^[\\t ]*)(?:\\|(?= |$)|(?:---?|—|\\.\\.|__)(?= )|\\.\\.$)/m,\n      lookbehind: true\n    }\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/rest.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/rip.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/rip.js ***!
  \********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = rip;\nrip.displayName = 'rip';\nrip.aliases = [];\nfunction rip(Prism) {\n  Prism.languages.rip = {\n    comment: {\n      pattern: /#.*/,\n      greedy: true\n    },\n    \"char\": {\n      pattern: /\\B`[^\\s`'\",.:;#\\/\\\\()<>\\[\\]{}]\\b/,\n      greedy: true\n    },\n    string: {\n      pattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true\n    },\n    regex: {\n      pattern: /(^|[^/])\\/(?!\\/)(?:\\[[^\\n\\r\\]]*\\]|\\\\.|[^/\\\\\\r\\n\\[])+\\/(?=\\s*(?:$|[\\r\\n,.;})]))/,\n      lookbehind: true,\n      greedy: true\n    },\n    keyword: /(?:=>|->)|\\b(?:case|catch|class|else|exit|finally|if|raise|return|switch|try)\\b/,\n    builtin: /@|\\bSystem\\b/,\n    \"boolean\": /\\b(?:false|true)\\b/,\n    date: /\\b\\d{4}-\\d{2}-\\d{2}\\b/,\n    time: /\\b\\d{2}:\\d{2}:\\d{2}\\b/,\n    datetime: /\\b\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\b/,\n    symbol: /:[^\\d\\s`'\",.:;#\\/\\\\()<>\\[\\]{}][^\\s`'\",.:;#\\/\\\\()<>\\[\\]{}]*/,\n    number: /[+-]?\\b(?:\\d+\\.\\d+|\\d+)\\b/,\n    punctuation: /(?:\\.{2,3})|[`,.:;=\\/\\\\()<>\\[\\]{}]/,\n    reference: /[^\\d\\s`'\",.:;#\\/\\\\()<>\\[\\]{}][^\\s`'\",.:;#\\/\\\\()<>\\[\\]{}]*/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvcmlwLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsR0FBRztBQUNwQkEsR0FBRyxDQUFDQyxXQUFXLEdBQUcsS0FBSztBQUN2QkQsR0FBRyxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNoQixTQUFTRixHQUFHQSxDQUFDRyxLQUFLLEVBQUU7RUFDbEJBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixHQUFHLEdBQUc7SUFDcEJLLE9BQU8sRUFBRTtNQUNQQyxPQUFPLEVBQUUsS0FBSztNQUNkQyxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0QsUUFBTTtNQUNKRCxPQUFPLEVBQUUsa0NBQWtDO01BQzNDQyxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0RDLE1BQU0sRUFBRTtNQUNORixPQUFPLEVBQUUsaUNBQWlDO01BQzFDQyxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0RFLEtBQUssRUFBRTtNQUNMSCxPQUFPLEVBQ0wsZ0ZBQWdGO01BQ2xGSSxVQUFVLEVBQUUsSUFBSTtNQUNoQkgsTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUNESSxPQUFPLEVBQ0wsaUZBQWlGO0lBQ25GQyxPQUFPLEVBQUUsY0FBYztJQUN2QixXQUFTLG9CQUFvQjtJQUM3QkMsSUFBSSxFQUFFLHVCQUF1QjtJQUM3QkMsSUFBSSxFQUFFLHVCQUF1QjtJQUM3QkMsUUFBUSxFQUFFLHlDQUF5QztJQUNuREMsTUFBTSxFQUFFLDREQUE0RDtJQUNwRUMsTUFBTSxFQUFFLDJCQUEyQjtJQUNuQ0MsV0FBVyxFQUFFLG9DQUFvQztJQUNqREMsU0FBUyxFQUFFO0VBQ2IsQ0FBQztBQUNIIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xccmlwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJpcFxucmlwLmRpc3BsYXlOYW1lID0gJ3JpcCdcbnJpcC5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIHJpcChQcmlzbSkge1xuICBQcmlzbS5sYW5ndWFnZXMucmlwID0ge1xuICAgIGNvbW1lbnQ6IHtcbiAgICAgIHBhdHRlcm46IC8jLiovLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICBjaGFyOiB7XG4gICAgICBwYXR0ZXJuOiAvXFxCYFteXFxzYCdcIiwuOjsjXFwvXFxcXCgpPD5cXFtcXF17fV1cXGIvLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICBzdHJpbmc6IHtcbiAgICAgIHBhdHRlcm46IC8oXCJ8JykoPzpcXFxcLnwoPyFcXDEpW15cXFxcXFxyXFxuXSkqXFwxLyxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgcmVnZXg6IHtcbiAgICAgIHBhdHRlcm46XG4gICAgICAgIC8oXnxbXi9dKVxcLyg/IVxcLykoPzpcXFtbXlxcblxcclxcXV0qXFxdfFxcXFwufFteL1xcXFxcXHJcXG5cXFtdKStcXC8oPz1cXHMqKD86JHxbXFxyXFxuLC47fSldKSkvLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAga2V5d29yZDpcbiAgICAgIC8oPzo9PnwtPil8XFxiKD86Y2FzZXxjYXRjaHxjbGFzc3xlbHNlfGV4aXR8ZmluYWxseXxpZnxyYWlzZXxyZXR1cm58c3dpdGNofHRyeSlcXGIvLFxuICAgIGJ1aWx0aW46IC9AfFxcYlN5c3RlbVxcYi8sXG4gICAgYm9vbGVhbjogL1xcYig/OmZhbHNlfHRydWUpXFxiLyxcbiAgICBkYXRlOiAvXFxiXFxkezR9LVxcZHsyfS1cXGR7Mn1cXGIvLFxuICAgIHRpbWU6IC9cXGJcXGR7Mn06XFxkezJ9OlxcZHsyfVxcYi8sXG4gICAgZGF0ZXRpbWU6IC9cXGJcXGR7NH0tXFxkezJ9LVxcZHsyfVRcXGR7Mn06XFxkezJ9OlxcZHsyfVxcYi8sXG4gICAgc3ltYm9sOiAvOlteXFxkXFxzYCdcIiwuOjsjXFwvXFxcXCgpPD5cXFtcXF17fV1bXlxcc2AnXCIsLjo7I1xcL1xcXFwoKTw+XFxbXFxde31dKi8sXG4gICAgbnVtYmVyOiAvWystXT9cXGIoPzpcXGQrXFwuXFxkK3xcXGQrKVxcYi8sXG4gICAgcHVuY3R1YXRpb246IC8oPzpcXC57MiwzfSl8W2AsLjo7PVxcL1xcXFwoKTw+XFxbXFxde31dLyxcbiAgICByZWZlcmVuY2U6IC9bXlxcZFxcc2AnXCIsLjo7I1xcL1xcXFwoKTw+XFxbXFxde31dW15cXHNgJ1wiLC46OyNcXC9cXFxcKCk8PlxcW1xcXXt9XSovXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicmlwIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJjb21tZW50IiwicGF0dGVybiIsImdyZWVkeSIsInN0cmluZyIsInJlZ2V4IiwibG9va2JlaGluZCIsImtleXdvcmQiLCJidWlsdGluIiwiZGF0ZSIsInRpbWUiLCJkYXRldGltZSIsInN5bWJvbCIsIm51bWJlciIsInB1bmN0dWF0aW9uIiwicmVmZXJlbmNlIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/rip.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/roboconf.js":
/*!*************************************************!*\
  !*** ./node_modules/refractor/lang/roboconf.js ***!
  \*************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = roboconf;\nroboconf.displayName = 'roboconf';\nroboconf.aliases = [];\nfunction roboconf(Prism) {\n  Prism.languages.roboconf = {\n    comment: /#.*/,\n    keyword: {\n      pattern: /(^|\\s)(?:(?:external|import)\\b|(?:facet|instance of)(?=[ \\t]+[\\w-]+[ \\t]*\\{))/,\n      lookbehind: true\n    },\n    component: {\n      pattern: /[\\w-]+(?=[ \\t]*\\{)/,\n      alias: 'variable'\n    },\n    property: /[\\w.-]+(?=[ \\t]*:)/,\n    value: {\n      pattern: /(=[ \\t]*(?![ \\t]))[^,;]+/,\n      lookbehind: true,\n      alias: 'attr-value'\n    },\n    optional: {\n      pattern: /\\(optional\\)/,\n      alias: 'builtin'\n    },\n    wildcard: {\n      pattern: /(\\.)\\*/,\n      lookbehind: true,\n      alias: 'operator'\n    },\n    punctuation: /[{},.;:=]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvcm9ib2NvbmYuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxRQUFRO0FBQ3pCQSxRQUFRLENBQUNDLFdBQVcsR0FBRyxVQUFVO0FBQ2pDRCxRQUFRLENBQUNFLE9BQU8sR0FBRyxFQUFFO0FBQ3JCLFNBQVNGLFFBQVFBLENBQUNHLEtBQUssRUFBRTtFQUN2QkEsS0FBSyxDQUFDQyxTQUFTLENBQUNKLFFBQVEsR0FBRztJQUN6QkssT0FBTyxFQUFFLEtBQUs7SUFDZEMsT0FBTyxFQUFFO01BQ1BDLE9BQU8sRUFDTCwrRUFBK0U7TUFDakZDLFVBQVUsRUFBRTtJQUNkLENBQUM7SUFDREMsU0FBUyxFQUFFO01BQ1RGLE9BQU8sRUFBRSxvQkFBb0I7TUFDN0JHLEtBQUssRUFBRTtJQUNULENBQUM7SUFDREMsUUFBUSxFQUFFLG9CQUFvQjtJQUM5QkMsS0FBSyxFQUFFO01BQ0xMLE9BQU8sRUFBRSwwQkFBMEI7TUFDbkNDLFVBQVUsRUFBRSxJQUFJO01BQ2hCRSxLQUFLLEVBQUU7SUFDVCxDQUFDO0lBQ0RHLFFBQVEsRUFBRTtNQUNSTixPQUFPLEVBQUUsY0FBYztNQUN2QkcsS0FBSyxFQUFFO0lBQ1QsQ0FBQztJQUNESSxRQUFRLEVBQUU7TUFDUlAsT0FBTyxFQUFFLFFBQVE7TUFDakJDLFVBQVUsRUFBRSxJQUFJO01BQ2hCRSxLQUFLLEVBQUU7SUFDVCxDQUFDO0lBQ0RLLFdBQVcsRUFBRTtFQUNmLENBQUM7QUFDSCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXHJvYm9jb25mLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJvYm9jb25mXG5yb2JvY29uZi5kaXNwbGF5TmFtZSA9ICdyb2JvY29uZidcbnJvYm9jb25mLmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24gcm9ib2NvbmYoUHJpc20pIHtcbiAgUHJpc20ubGFuZ3VhZ2VzLnJvYm9jb25mID0ge1xuICAgIGNvbW1lbnQ6IC8jLiovLFxuICAgIGtleXdvcmQ6IHtcbiAgICAgIHBhdHRlcm46XG4gICAgICAgIC8oXnxcXHMpKD86KD86ZXh0ZXJuYWx8aW1wb3J0KVxcYnwoPzpmYWNldHxpbnN0YW5jZSBvZikoPz1bIFxcdF0rW1xcdy1dK1sgXFx0XSpcXHspKS8sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgfSxcbiAgICBjb21wb25lbnQ6IHtcbiAgICAgIHBhdHRlcm46IC9bXFx3LV0rKD89WyBcXHRdKlxceykvLFxuICAgICAgYWxpYXM6ICd2YXJpYWJsZSdcbiAgICB9LFxuICAgIHByb3BlcnR5OiAvW1xcdy4tXSsoPz1bIFxcdF0qOikvLFxuICAgIHZhbHVlOiB7XG4gICAgICBwYXR0ZXJuOiAvKD1bIFxcdF0qKD8hWyBcXHRdKSlbXiw7XSsvLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGFsaWFzOiAnYXR0ci12YWx1ZSdcbiAgICB9LFxuICAgIG9wdGlvbmFsOiB7XG4gICAgICBwYXR0ZXJuOiAvXFwob3B0aW9uYWxcXCkvLFxuICAgICAgYWxpYXM6ICdidWlsdGluJ1xuICAgIH0sXG4gICAgd2lsZGNhcmQ6IHtcbiAgICAgIHBhdHRlcm46IC8oXFwuKVxcKi8sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgYWxpYXM6ICdvcGVyYXRvcidcbiAgICB9LFxuICAgIHB1bmN0dWF0aW9uOiAvW3t9LC47Oj1dL1xuICB9XG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInJvYm9jb25mIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJjb21tZW50Iiwia2V5d29yZCIsInBhdHRlcm4iLCJsb29rYmVoaW5kIiwiY29tcG9uZW50IiwiYWxpYXMiLCJwcm9wZXJ0eSIsInZhbHVlIiwib3B0aW9uYWwiLCJ3aWxkY2FyZCIsInB1bmN0dWF0aW9uIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/roboconf.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/robotframework.js":
/*!*******************************************************!*\
  !*** ./node_modules/refractor/lang/robotframework.js ***!
  \*******************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = robotframework;\nrobotframework.displayName = 'robotframework';\nrobotframework.aliases = [];\nfunction robotframework(Prism) {\n  ;\n  (function (Prism) {\n    var comment = {\n      pattern: /(^[ \\t]*| {2}|\\t)#.*/m,\n      lookbehind: true,\n      greedy: true\n    };\n    var variable = {\n      pattern: /((?:^|[^\\\\])(?:\\\\{2})*)[$@&%]\\{(?:[^{}\\r\\n]|\\{[^{}\\r\\n]*\\})*\\}/,\n      lookbehind: true,\n      inside: {\n        punctuation: /^[$@&%]\\{|\\}$/\n      }\n    };\n    function createSection(name, inside) {\n      var extendecInside = {};\n      extendecInside['section-header'] = {\n        pattern: /^ ?\\*{3}.+?\\*{3}/,\n        alias: 'keyword'\n      }; // copy inside tokens\n      for (var token in inside) {\n        extendecInside[token] = inside[token];\n      }\n      extendecInside['tag'] = {\n        pattern: /([\\r\\n](?: {2}|\\t)[ \\t]*)\\[[-\\w]+\\]/,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\[|\\]/\n        }\n      };\n      extendecInside['variable'] = variable;\n      extendecInside['comment'] = comment;\n      return {\n        pattern: RegExp(/^ ?\\*{3}[ \\t]*<name>[ \\t]*\\*{3}(?:.|[\\r\\n](?!\\*{3}))*/.source.replace(/<name>/g, function () {\n          return name;\n        }), 'im'),\n        alias: 'section',\n        inside: extendecInside\n      };\n    }\n    var docTag = {\n      pattern: /(\\[Documentation\\](?: {2}|\\t)[ \\t]*)(?![ \\t]|#)(?:.|(?:\\r\\n?|\\n)[ \\t]*\\.{3})+/,\n      lookbehind: true,\n      alias: 'string'\n    };\n    var testNameLike = {\n      pattern: /([\\r\\n] ?)(?!#)(?:\\S(?:[ \\t]\\S)*)+/,\n      lookbehind: true,\n      alias: 'function',\n      inside: {\n        variable: variable\n      }\n    };\n    var testPropertyLike = {\n      pattern: /([\\r\\n](?: {2}|\\t)[ \\t]*)(?!\\[|\\.{3}|#)(?:\\S(?:[ \\t]\\S)*)+/,\n      lookbehind: true,\n      inside: {\n        variable: variable\n      }\n    };\n    Prism.languages['robotframework'] = {\n      settings: createSection('Settings', {\n        documentation: {\n          pattern: /([\\r\\n] ?Documentation(?: {2}|\\t)[ \\t]*)(?![ \\t]|#)(?:.|(?:\\r\\n?|\\n)[ \\t]*\\.{3})+/,\n          lookbehind: true,\n          alias: 'string'\n        },\n        property: {\n          pattern: /([\\r\\n] ?)(?!\\.{3}|#)(?:\\S(?:[ \\t]\\S)*)+/,\n          lookbehind: true\n        }\n      }),\n      variables: createSection('Variables'),\n      'test-cases': createSection('Test Cases', {\n        'test-name': testNameLike,\n        documentation: docTag,\n        property: testPropertyLike\n      }),\n      keywords: createSection('Keywords', {\n        'keyword-name': testNameLike,\n        documentation: docTag,\n        property: testPropertyLike\n      }),\n      tasks: createSection('Tasks', {\n        'task-name': testNameLike,\n        documentation: docTag,\n        property: testPropertyLike\n      }),\n      comment: comment\n    };\n    Prism.languages.robot = Prism.languages['robotframework'];\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvcm9ib3RmcmFtZXdvcmsuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxjQUFjO0FBQy9CQSxjQUFjLENBQUNDLFdBQVcsR0FBRyxnQkFBZ0I7QUFDN0NELGNBQWMsQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDM0IsU0FBU0YsY0FBY0EsQ0FBQ0csS0FBSyxFQUFFO0VBQzdCO0VBQUMsQ0FBQyxVQUFVQSxLQUFLLEVBQUU7SUFDakIsSUFBSUMsT0FBTyxHQUFHO01BQ1pDLE9BQU8sRUFBRSx1QkFBdUI7TUFDaENDLFVBQVUsRUFBRSxJQUFJO01BQ2hCQyxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0QsSUFBSUMsUUFBUSxHQUFHO01BQ2JILE9BQU8sRUFBRSxnRUFBZ0U7TUFDekVDLFVBQVUsRUFBRSxJQUFJO01BQ2hCRyxNQUFNLEVBQUU7UUFDTkMsV0FBVyxFQUFFO01BQ2Y7SUFDRixDQUFDO0lBQ0QsU0FBU0MsYUFBYUEsQ0FBQ0MsSUFBSSxFQUFFSCxNQUFNLEVBQUU7TUFDbkMsSUFBSUksY0FBYyxHQUFHLENBQUMsQ0FBQztNQUN2QkEsY0FBYyxDQUFDLGdCQUFnQixDQUFDLEdBQUc7UUFDakNSLE9BQU8sRUFBRSxrQkFBa0I7UUFDM0JTLEtBQUssRUFBRTtNQUNULENBQUMsRUFBQztNQUNGLEtBQUssSUFBSUMsS0FBSyxJQUFJTixNQUFNLEVBQUU7UUFDeEJJLGNBQWMsQ0FBQ0UsS0FBSyxDQUFDLEdBQUdOLE1BQU0sQ0FBQ00sS0FBSyxDQUFDO01BQ3ZDO01BQ0FGLGNBQWMsQ0FBQyxLQUFLLENBQUMsR0FBRztRQUN0QlIsT0FBTyxFQUFFLHFDQUFxQztRQUM5Q0MsVUFBVSxFQUFFLElBQUk7UUFDaEJHLE1BQU0sRUFBRTtVQUNOQyxXQUFXLEVBQUU7UUFDZjtNQUNGLENBQUM7TUFDREcsY0FBYyxDQUFDLFVBQVUsQ0FBQyxHQUFHTCxRQUFRO01BQ3JDSyxjQUFjLENBQUMsU0FBUyxDQUFDLEdBQUdULE9BQU87TUFDbkMsT0FBTztRQUNMQyxPQUFPLEVBQUVXLE1BQU0sQ0FDYix1REFBdUQsQ0FBQ0MsTUFBTSxDQUFDQyxPQUFPLENBQ3BFLFNBQVMsRUFDVCxZQUFZO1VBQ1YsT0FBT04sSUFBSTtRQUNiLENBQ0YsQ0FBQyxFQUNELElBQ0YsQ0FBQztRQUNERSxLQUFLLEVBQUUsU0FBUztRQUNoQkwsTUFBTSxFQUFFSTtNQUNWLENBQUM7SUFDSDtJQUNBLElBQUlNLE1BQU0sR0FBRztNQUNYZCxPQUFPLEVBQ0wsK0VBQStFO01BQ2pGQyxVQUFVLEVBQUUsSUFBSTtNQUNoQlEsS0FBSyxFQUFFO0lBQ1QsQ0FBQztJQUNELElBQUlNLFlBQVksR0FBRztNQUNqQmYsT0FBTyxFQUFFLG9DQUFvQztNQUM3Q0MsVUFBVSxFQUFFLElBQUk7TUFDaEJRLEtBQUssRUFBRSxVQUFVO01BQ2pCTCxNQUFNLEVBQUU7UUFDTkQsUUFBUSxFQUFFQTtNQUNaO0lBQ0YsQ0FBQztJQUNELElBQUlhLGdCQUFnQixHQUFHO01BQ3JCaEIsT0FBTyxFQUFFLDREQUE0RDtNQUNyRUMsVUFBVSxFQUFFLElBQUk7TUFDaEJHLE1BQU0sRUFBRTtRQUNORCxRQUFRLEVBQUVBO01BQ1o7SUFDRixDQUFDO0lBQ0RMLEtBQUssQ0FBQ21CLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHO01BQ2xDQyxRQUFRLEVBQUVaLGFBQWEsQ0FBQyxVQUFVLEVBQUU7UUFDbENhLGFBQWEsRUFBRTtVQUNibkIsT0FBTyxFQUNMLG1GQUFtRjtVQUNyRkMsVUFBVSxFQUFFLElBQUk7VUFDaEJRLEtBQUssRUFBRTtRQUNULENBQUM7UUFDRFcsUUFBUSxFQUFFO1VBQ1JwQixPQUFPLEVBQUUsMENBQTBDO1VBQ25EQyxVQUFVLEVBQUU7UUFDZDtNQUNGLENBQUMsQ0FBQztNQUNGb0IsU0FBUyxFQUFFZixhQUFhLENBQUMsV0FBVyxDQUFDO01BQ3JDLFlBQVksRUFBRUEsYUFBYSxDQUFDLFlBQVksRUFBRTtRQUN4QyxXQUFXLEVBQUVTLFlBQVk7UUFDekJJLGFBQWEsRUFBRUwsTUFBTTtRQUNyQk0sUUFBUSxFQUFFSjtNQUNaLENBQUMsQ0FBQztNQUNGTSxRQUFRLEVBQUVoQixhQUFhLENBQUMsVUFBVSxFQUFFO1FBQ2xDLGNBQWMsRUFBRVMsWUFBWTtRQUM1QkksYUFBYSxFQUFFTCxNQUFNO1FBQ3JCTSxRQUFRLEVBQUVKO01BQ1osQ0FBQyxDQUFDO01BQ0ZPLEtBQUssRUFBRWpCLGFBQWEsQ0FBQyxPQUFPLEVBQUU7UUFDNUIsV0FBVyxFQUFFUyxZQUFZO1FBQ3pCSSxhQUFhLEVBQUVMLE1BQU07UUFDckJNLFFBQVEsRUFBRUo7TUFDWixDQUFDLENBQUM7TUFDRmpCLE9BQU8sRUFBRUE7SUFDWCxDQUFDO0lBQ0RELEtBQUssQ0FBQ21CLFNBQVMsQ0FBQ08sS0FBSyxHQUFHMUIsS0FBSyxDQUFDbUIsU0FBUyxDQUFDLGdCQUFnQixDQUFDO0VBQzNELENBQUMsRUFBRW5CLEtBQUssQ0FBQztBQUNYIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xccm9ib3RmcmFtZXdvcmsuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gcm9ib3RmcmFtZXdvcmtcbnJvYm90ZnJhbWV3b3JrLmRpc3BsYXlOYW1lID0gJ3JvYm90ZnJhbWV3b3JrJ1xucm9ib3RmcmFtZXdvcmsuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiByb2JvdGZyYW1ld29yayhQcmlzbSkge1xuICA7KGZ1bmN0aW9uIChQcmlzbSkge1xuICAgIHZhciBjb21tZW50ID0ge1xuICAgICAgcGF0dGVybjogLyheWyBcXHRdKnwgezJ9fFxcdCkjLiovbSxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBncmVlZHk6IHRydWVcbiAgICB9XG4gICAgdmFyIHZhcmlhYmxlID0ge1xuICAgICAgcGF0dGVybjogLygoPzpefFteXFxcXF0pKD86XFxcXHsyfSkqKVskQCYlXVxceyg/Oltee31cXHJcXG5dfFxce1tee31cXHJcXG5dKlxcfSkqXFx9LyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBpbnNpZGU6IHtcbiAgICAgICAgcHVuY3R1YXRpb246IC9eWyRAJiVdXFx7fFxcfSQvXG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNyZWF0ZVNlY3Rpb24obmFtZSwgaW5zaWRlKSB7XG4gICAgICB2YXIgZXh0ZW5kZWNJbnNpZGUgPSB7fVxuICAgICAgZXh0ZW5kZWNJbnNpZGVbJ3NlY3Rpb24taGVhZGVyJ10gPSB7XG4gICAgICAgIHBhdHRlcm46IC9eID9cXCp7M30uKz9cXCp7M30vLFxuICAgICAgICBhbGlhczogJ2tleXdvcmQnXG4gICAgICB9IC8vIGNvcHkgaW5zaWRlIHRva2Vuc1xuICAgICAgZm9yICh2YXIgdG9rZW4gaW4gaW5zaWRlKSB7XG4gICAgICAgIGV4dGVuZGVjSW5zaWRlW3Rva2VuXSA9IGluc2lkZVt0b2tlbl1cbiAgICAgIH1cbiAgICAgIGV4dGVuZGVjSW5zaWRlWyd0YWcnXSA9IHtcbiAgICAgICAgcGF0dGVybjogLyhbXFxyXFxuXSg/OiB7Mn18XFx0KVsgXFx0XSopXFxbWy1cXHddK1xcXS8sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGluc2lkZToge1xuICAgICAgICAgIHB1bmN0dWF0aW9uOiAvXFxbfFxcXS9cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZXh0ZW5kZWNJbnNpZGVbJ3ZhcmlhYmxlJ10gPSB2YXJpYWJsZVxuICAgICAgZXh0ZW5kZWNJbnNpZGVbJ2NvbW1lbnQnXSA9IGNvbW1lbnRcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhdHRlcm46IFJlZ0V4cChcbiAgICAgICAgICAvXiA/XFwqezN9WyBcXHRdKjxuYW1lPlsgXFx0XSpcXCp7M30oPzoufFtcXHJcXG5dKD8hXFwqezN9KSkqLy5zb3VyY2UucmVwbGFjZShcbiAgICAgICAgICAgIC88bmFtZT4vZyxcbiAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG5hbWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICApLFxuICAgICAgICAgICdpbSdcbiAgICAgICAgKSxcbiAgICAgICAgYWxpYXM6ICdzZWN0aW9uJyxcbiAgICAgICAgaW5zaWRlOiBleHRlbmRlY0luc2lkZVxuICAgICAgfVxuICAgIH1cbiAgICB2YXIgZG9jVGFnID0ge1xuICAgICAgcGF0dGVybjpcbiAgICAgICAgLyhcXFtEb2N1bWVudGF0aW9uXFxdKD86IHsyfXxcXHQpWyBcXHRdKikoPyFbIFxcdF18IykoPzoufCg/Olxcclxcbj98XFxuKVsgXFx0XSpcXC57M30pKy8sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgYWxpYXM6ICdzdHJpbmcnXG4gICAgfVxuICAgIHZhciB0ZXN0TmFtZUxpa2UgPSB7XG4gICAgICBwYXR0ZXJuOiAvKFtcXHJcXG5dID8pKD8hIykoPzpcXFMoPzpbIFxcdF1cXFMpKikrLyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBhbGlhczogJ2Z1bmN0aW9uJyxcbiAgICAgIGluc2lkZToge1xuICAgICAgICB2YXJpYWJsZTogdmFyaWFibGVcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIHRlc3RQcm9wZXJ0eUxpa2UgPSB7XG4gICAgICBwYXR0ZXJuOiAvKFtcXHJcXG5dKD86IHsyfXxcXHQpWyBcXHRdKikoPyFcXFt8XFwuezN9fCMpKD86XFxTKD86WyBcXHRdXFxTKSopKy8sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgIHZhcmlhYmxlOiB2YXJpYWJsZVxuICAgICAgfVxuICAgIH1cbiAgICBQcmlzbS5sYW5ndWFnZXNbJ3JvYm90ZnJhbWV3b3JrJ10gPSB7XG4gICAgICBzZXR0aW5nczogY3JlYXRlU2VjdGlvbignU2V0dGluZ3MnLCB7XG4gICAgICAgIGRvY3VtZW50YXRpb246IHtcbiAgICAgICAgICBwYXR0ZXJuOlxuICAgICAgICAgICAgLyhbXFxyXFxuXSA/RG9jdW1lbnRhdGlvbig/OiB7Mn18XFx0KVsgXFx0XSopKD8hWyBcXHRdfCMpKD86LnwoPzpcXHJcXG4/fFxcbilbIFxcdF0qXFwuezN9KSsvLFxuICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgICAgYWxpYXM6ICdzdHJpbmcnXG4gICAgICAgIH0sXG4gICAgICAgIHByb3BlcnR5OiB7XG4gICAgICAgICAgcGF0dGVybjogLyhbXFxyXFxuXSA/KSg/IVxcLnszfXwjKSg/OlxcUyg/OlsgXFx0XVxcUykqKSsvLFxuICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgICAgfVxuICAgICAgfSksXG4gICAgICB2YXJpYWJsZXM6IGNyZWF0ZVNlY3Rpb24oJ1ZhcmlhYmxlcycpLFxuICAgICAgJ3Rlc3QtY2FzZXMnOiBjcmVhdGVTZWN0aW9uKCdUZXN0IENhc2VzJywge1xuICAgICAgICAndGVzdC1uYW1lJzogdGVzdE5hbWVMaWtlLFxuICAgICAgICBkb2N1bWVudGF0aW9uOiBkb2NUYWcsXG4gICAgICAgIHByb3BlcnR5OiB0ZXN0UHJvcGVydHlMaWtlXG4gICAgICB9KSxcbiAgICAgIGtleXdvcmRzOiBjcmVhdGVTZWN0aW9uKCdLZXl3b3JkcycsIHtcbiAgICAgICAgJ2tleXdvcmQtbmFtZSc6IHRlc3ROYW1lTGlrZSxcbiAgICAgICAgZG9jdW1lbnRhdGlvbjogZG9jVGFnLFxuICAgICAgICBwcm9wZXJ0eTogdGVzdFByb3BlcnR5TGlrZVxuICAgICAgfSksXG4gICAgICB0YXNrczogY3JlYXRlU2VjdGlvbignVGFza3MnLCB7XG4gICAgICAgICd0YXNrLW5hbWUnOiB0ZXN0TmFtZUxpa2UsXG4gICAgICAgIGRvY3VtZW50YXRpb246IGRvY1RhZyxcbiAgICAgICAgcHJvcGVydHk6IHRlc3RQcm9wZXJ0eUxpa2VcbiAgICAgIH0pLFxuICAgICAgY29tbWVudDogY29tbWVudFxuICAgIH1cbiAgICBQcmlzbS5sYW5ndWFnZXMucm9ib3QgPSBQcmlzbS5sYW5ndWFnZXNbJ3JvYm90ZnJhbWV3b3JrJ11cbiAgfSkoUHJpc20pXG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInJvYm90ZnJhbWV3b3JrIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJjb21tZW50IiwicGF0dGVybiIsImxvb2tiZWhpbmQiLCJncmVlZHkiLCJ2YXJpYWJsZSIsImluc2lkZSIsInB1bmN0dWF0aW9uIiwiY3JlYXRlU2VjdGlvbiIsIm5hbWUiLCJleHRlbmRlY0luc2lkZSIsImFsaWFzIiwidG9rZW4iLCJSZWdFeHAiLCJzb3VyY2UiLCJyZXBsYWNlIiwiZG9jVGFnIiwidGVzdE5hbWVMaWtlIiwidGVzdFByb3BlcnR5TGlrZSIsImxhbmd1YWdlcyIsInNldHRpbmdzIiwiZG9jdW1lbnRhdGlvbiIsInByb3BlcnR5IiwidmFyaWFibGVzIiwia2V5d29yZHMiLCJ0YXNrcyIsInJvYm90Il0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/robotframework.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/ruby.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/ruby.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = ruby;\nruby.displayName = 'ruby';\nruby.aliases = ['rb'];\nfunction ruby(Prism) {\n  /**\n   * Original by Samuel Flores\n   *\n   * Adds the following new token classes:\n   *     constant, builtin, variable, symbol, regex\n   */\n  ;\n  (function (Prism) {\n    Prism.languages.ruby = Prism.languages.extend('clike', {\n      comment: {\n        pattern: /#.*|^=begin\\s[\\s\\S]*?^=end/m,\n        greedy: true\n      },\n      'class-name': {\n        pattern: /(\\b(?:class|module)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+|\\b[A-Z_]\\w*(?=\\s*\\.\\s*new\\b)/,\n        lookbehind: true,\n        inside: {\n          punctuation: /[.\\\\]/\n        }\n      },\n      keyword: /\\b(?:BEGIN|END|alias|and|begin|break|case|class|def|define_method|defined|do|each|else|elsif|end|ensure|extend|for|if|in|include|module|new|next|nil|not|or|prepend|private|protected|public|raise|redo|require|rescue|retry|return|self|super|then|throw|undef|unless|until|when|while|yield)\\b/,\n      operator: /\\.{2,3}|&\\.|===|<?=>|[!=]?~|(?:&&|\\|\\||<<|>>|\\*\\*|[+\\-*/%<>!^&|=])=?|[?:]/,\n      punctuation: /[(){}[\\].,;]/\n    });\n    Prism.languages.insertBefore('ruby', 'operator', {\n      'double-colon': {\n        pattern: /::/,\n        alias: 'punctuation'\n      }\n    });\n    var interpolation = {\n      pattern: /((?:^|[^\\\\])(?:\\\\{2})*)#\\{(?:[^{}]|\\{[^{}]*\\})*\\}/,\n      lookbehind: true,\n      inside: {\n        content: {\n          pattern: /^(#\\{)[\\s\\S]+(?=\\}$)/,\n          lookbehind: true,\n          inside: Prism.languages.ruby\n        },\n        delimiter: {\n          pattern: /^#\\{|\\}$/,\n          alias: 'punctuation'\n        }\n      }\n    };\n    delete Prism.languages.ruby[\"function\"];\n    var percentExpression = '(?:' + [/([^a-zA-Z0-9\\s{(\\[<=])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source, /\\((?:[^()\\\\]|\\\\[\\s\\S]|\\((?:[^()\\\\]|\\\\[\\s\\S])*\\))*\\)/.source, /\\{(?:[^{}\\\\]|\\\\[\\s\\S]|\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\})*\\}/.source, /\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S]|\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\])*\\]/.source, /<(?:[^<>\\\\]|\\\\[\\s\\S]|<(?:[^<>\\\\]|\\\\[\\s\\S])*>)*>/.source].join('|') + ')';\n    var symbolName = /(?:\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|(?:\\b[a-zA-Z_]\\w*|[^\\s\\0-\\x7F]+)[?!]?|\\$.)/.source;\n    Prism.languages.insertBefore('ruby', 'keyword', {\n      'regex-literal': [{\n        pattern: RegExp(/%r/.source + percentExpression + /[egimnosux]{0,6}/.source),\n        greedy: true,\n        inside: {\n          interpolation: interpolation,\n          regex: /[\\s\\S]+/\n        }\n      }, {\n        pattern: /(^|[^/])\\/(?!\\/)(?:\\[[^\\r\\n\\]]+\\]|\\\\.|[^[/\\\\\\r\\n])+\\/[egimnosux]{0,6}(?=\\s*(?:$|[\\r\\n,.;})#]))/,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          interpolation: interpolation,\n          regex: /[\\s\\S]+/\n        }\n      }],\n      variable: /[@$]+[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n      symbol: [{\n        pattern: RegExp(/(^|[^:]):/.source + symbolName),\n        lookbehind: true,\n        greedy: true\n      }, {\n        pattern: RegExp(/([\\r\\n{(,][ \\t]*)/.source + symbolName + /(?=:(?!:))/.source),\n        lookbehind: true,\n        greedy: true\n      }],\n      'method-definition': {\n        pattern: /(\\bdef\\s+)\\w+(?:\\s*\\.\\s*\\w+)?/,\n        lookbehind: true,\n        inside: {\n          \"function\": /\\b\\w+$/,\n          keyword: /^self\\b/,\n          'class-name': /^\\w+/,\n          punctuation: /\\./\n        }\n      }\n    });\n    Prism.languages.insertBefore('ruby', 'string', {\n      'string-literal': [{\n        pattern: RegExp(/%[qQiIwWs]?/.source + percentExpression),\n        greedy: true,\n        inside: {\n          interpolation: interpolation,\n          string: /[\\s\\S]+/\n        }\n      }, {\n        pattern: /(\"|')(?:#\\{[^}]+\\}|#(?!\\{)|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\#\\r\\n])*\\1/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation,\n          string: /[\\s\\S]+/\n        }\n      }, {\n        pattern: /<<[-~]?([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?[\\t ]*\\1/i,\n        alias: 'heredoc-string',\n        greedy: true,\n        inside: {\n          delimiter: {\n            pattern: /^<<[-~]?[a-z_]\\w*|\\b[a-z_]\\w*$/i,\n            inside: {\n              symbol: /\\b\\w+/,\n              punctuation: /^<<[-~]?/\n            }\n          },\n          interpolation: interpolation,\n          string: /[\\s\\S]+/\n        }\n      }, {\n        pattern: /<<[-~]?'([a-z_]\\w*)'[\\r\\n](?:.*[\\r\\n])*?[\\t ]*\\1/i,\n        alias: 'heredoc-string',\n        greedy: true,\n        inside: {\n          delimiter: {\n            pattern: /^<<[-~]?'[a-z_]\\w*'|\\b[a-z_]\\w*$/i,\n            inside: {\n              symbol: /\\b\\w+/,\n              punctuation: /^<<[-~]?'|'$/\n            }\n          },\n          string: /[\\s\\S]+/\n        }\n      }],\n      'command-literal': [{\n        pattern: RegExp(/%x/.source + percentExpression),\n        greedy: true,\n        inside: {\n          interpolation: interpolation,\n          command: {\n            pattern: /[\\s\\S]+/,\n            alias: 'string'\n          }\n        }\n      }, {\n        pattern: /`(?:#\\{[^}]+\\}|#(?!\\{)|\\\\(?:\\r\\n|[\\s\\S])|[^\\\\`#\\r\\n])*`/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation,\n          command: {\n            pattern: /[\\s\\S]+/,\n            alias: 'string'\n          }\n        }\n      }]\n    });\n    delete Prism.languages.ruby.string;\n    Prism.languages.insertBefore('ruby', 'number', {\n      builtin: /\\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Fixnum|Float|Hash|IO|Integer|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|Stat|String|Struct|Symbol|TMS|Thread|ThreadGroup|Time|TrueClass)\\b/,\n      constant: /\\b[A-Z][A-Z0-9_]*(?:[?!]|\\b)/\n    });\n    Prism.languages.rb = Prism.languages.ruby;\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/ruby.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/rust.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/rust.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = rust;\nrust.displayName = 'rust';\nrust.aliases = [];\nfunction rust(Prism) {\n  ;\n  (function (Prism) {\n    var multilineComment = /\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|<self>)*\\*\\//.source;\n    for (var i = 0; i < 2; i++) {\n      // support 4 levels of nested comments\n      multilineComment = multilineComment.replace(/<self>/g, function () {\n        return multilineComment;\n      });\n    }\n    multilineComment = multilineComment.replace(/<self>/g, function () {\n      return /[^\\s\\S]/.source;\n    });\n    Prism.languages.rust = {\n      comment: [{\n        pattern: RegExp(/(^|[^\\\\])/.source + multilineComment),\n        lookbehind: true,\n        greedy: true\n      }, {\n        pattern: /(^|[^\\\\:])\\/\\/.*/,\n        lookbehind: true,\n        greedy: true\n      }],\n      string: {\n        pattern: /b?\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|b?r(#*)\"(?:[^\"]|\"(?!\\1))*\"\\1/,\n        greedy: true\n      },\n      \"char\": {\n        pattern: /b?'(?:\\\\(?:x[0-7][\\da-fA-F]|u\\{(?:[\\da-fA-F]_*){1,6}\\}|.)|[^\\\\\\r\\n\\t'])'/,\n        greedy: true\n      },\n      attribute: {\n        pattern: /#!?\\[(?:[^\\[\\]\"]|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")*\\]/,\n        greedy: true,\n        alias: 'attr-name',\n        inside: {\n          string: null // see below\n        }\n      },\n\n      // Closure params should not be confused with bitwise OR |\n      'closure-params': {\n        pattern: /([=(,:]\\s*|\\bmove\\s*)\\|[^|]*\\||\\|[^|]*\\|(?=\\s*(?:\\{|->))/,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          'closure-punctuation': {\n            pattern: /^\\||\\|$/,\n            alias: 'punctuation'\n          },\n          rest: null // see below\n        }\n      },\n\n      'lifetime-annotation': {\n        pattern: /'\\w+/,\n        alias: 'symbol'\n      },\n      'fragment-specifier': {\n        pattern: /(\\$\\w+:)[a-z]+/,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      variable: /\\$\\w+/,\n      'function-definition': {\n        pattern: /(\\bfn\\s+)\\w+/,\n        lookbehind: true,\n        alias: 'function'\n      },\n      'type-definition': {\n        pattern: /(\\b(?:enum|struct|trait|type|union)\\s+)\\w+/,\n        lookbehind: true,\n        alias: 'class-name'\n      },\n      'module-declaration': [{\n        pattern: /(\\b(?:crate|mod)\\s+)[a-z][a-z_\\d]*/,\n        lookbehind: true,\n        alias: 'namespace'\n      }, {\n        pattern: /(\\b(?:crate|self|super)\\s*)::\\s*[a-z][a-z_\\d]*\\b(?:\\s*::(?:\\s*[a-z][a-z_\\d]*\\s*::)*)?/,\n        lookbehind: true,\n        alias: 'namespace',\n        inside: {\n          punctuation: /::/\n        }\n      }],\n      keyword: [\n      // https://github.com/rust-lang/reference/blob/master/src/keywords.md\n      /\\b(?:Self|abstract|as|async|await|become|box|break|const|continue|crate|do|dyn|else|enum|extern|final|fn|for|if|impl|in|let|loop|macro|match|mod|move|mut|override|priv|pub|ref|return|self|static|struct|super|trait|try|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\\b/,\n      // primitives and str\n      // https://doc.rust-lang.org/stable/rust-by-example/primitives.html\n      /\\b(?:bool|char|f(?:32|64)|[ui](?:8|16|32|64|128|size)|str)\\b/],\n      // functions can technically start with an upper-case letter, but this will introduce a lot of false positives\n      // and Rust's naming conventions recommend snake_case anyway.\n      // https://doc.rust-lang.org/1.0.0/style/style/naming/README.html\n      \"function\": /\\b[a-z_]\\w*(?=\\s*(?:::\\s*<|\\())/,\n      macro: {\n        pattern: /\\b\\w+!/,\n        alias: 'property'\n      },\n      constant: /\\b[A-Z_][A-Z_\\d]+\\b/,\n      'class-name': /\\b[A-Z]\\w*\\b/,\n      namespace: {\n        pattern: /(?:\\b[a-z][a-z_\\d]*\\s*::\\s*)*\\b[a-z][a-z_\\d]*\\s*::(?!\\s*<)/,\n        inside: {\n          punctuation: /::/\n        }\n      },\n      // Hex, oct, bin, dec numbers with visual separators and type suffix\n      number: /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0o[0-7](?:_?[0-7])*|0b[01](?:_?[01])*|(?:(?:\\d(?:_?\\d)*)?\\.)?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)(?:_?(?:f32|f64|[iu](?:8|16|32|64|size)?))?\\b/,\n      \"boolean\": /\\b(?:false|true)\\b/,\n      punctuation: /->|\\.\\.=|\\.{1,3}|::|[{}[\\];(),:]/,\n      operator: /[-+*\\/%!^]=?|=[=>]?|&[&=]?|\\|[|=]?|<<?=?|>>?=?|[@?]/\n    };\n    Prism.languages.rust['closure-params'].inside.rest = Prism.languages.rust;\n    Prism.languages.rust['attribute'].inside['string'] = Prism.languages.rust['string'];\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/rust.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/sas.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/sas.js ***!
  \********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = sas;\nsas.displayName = 'sas';\nsas.aliases = [];\nfunction sas(Prism) {\n  ;\n  (function (Prism) {\n    var stringPattern = /(?:\"(?:\"\"|[^\"])*\"(?!\")|'(?:''|[^'])*'(?!'))/.source;\n    var number = /\\b(?:\\d[\\da-f]*x|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/i;\n    var numericConstant = {\n      pattern: RegExp(stringPattern + '[bx]'),\n      alias: 'number'\n    };\n    var macroVariable = {\n      pattern: /&[a-z_]\\w*/i\n    };\n    var macroKeyword = {\n      pattern: /((?:^|\\s|=|\\())%(?:ABORT|BY|CMS|COPY|DISPLAY|DO|ELSE|END|EVAL|GLOBAL|GO|GOTO|IF|INC|INCLUDE|INDEX|INPUT|KTRIM|LENGTH|LET|LIST|LOCAL|PUT|QKTRIM|QSCAN|QSUBSTR|QSYSFUNC|QUPCASE|RETURN|RUN|SCAN|SUBSTR|SUPERQ|SYMDEL|SYMEXIST|SYMGLOBL|SYMLOCAL|SYSCALL|SYSEVALF|SYSEXEC|SYSFUNC|SYSGET|SYSRPUT|THEN|TO|TSO|UNQUOTE|UNTIL|UPCASE|WHILE|WINDOW)\\b/i,\n      lookbehind: true,\n      alias: 'keyword'\n    };\n    var step = {\n      pattern: /(^|\\s)(?:proc\\s+\\w+|data(?!=)|quit|run)\\b/i,\n      alias: 'keyword',\n      lookbehind: true\n    };\n    var comment = [/\\/\\*[\\s\\S]*?\\*\\//, {\n      pattern: /(^[ \\t]*|;\\s*)\\*[^;]*;/m,\n      lookbehind: true\n    }];\n    var string = {\n      pattern: RegExp(stringPattern),\n      greedy: true\n    };\n    var punctuation = /[$%@.(){}\\[\\];,\\\\]/;\n    var func = {\n      pattern: /%?\\b\\w+(?=\\()/,\n      alias: 'keyword'\n    };\n    var args = {\n      \"function\": func,\n      'arg-value': {\n        pattern: /(=\\s*)[A-Z\\.]+/i,\n        lookbehind: true\n      },\n      operator: /=/,\n      'macro-variable': macroVariable,\n      arg: {\n        pattern: /[A-Z]+/i,\n        alias: 'keyword'\n      },\n      number: number,\n      'numeric-constant': numericConstant,\n      punctuation: punctuation,\n      string: string\n    };\n    var format = {\n      pattern: /\\b(?:format|put)\\b=?[\\w'$.]+/i,\n      inside: {\n        keyword: /^(?:format|put)(?==)/i,\n        equals: /=/,\n        format: {\n          pattern: /(?:\\w|\\$\\d)+\\.\\d?/,\n          alias: 'number'\n        }\n      }\n    };\n    var altformat = {\n      pattern: /\\b(?:format|put)\\s+[\\w']+(?:\\s+[$.\\w]+)+(?=;)/i,\n      inside: {\n        keyword: /^(?:format|put)/i,\n        format: {\n          pattern: /[\\w$]+\\.\\d?/,\n          alias: 'number'\n        }\n      }\n    };\n    var globalStatements = {\n      pattern: /((?:^|\\s)=?)(?:catname|checkpoint execute_always|dm|endsas|filename|footnote|%include|libname|%list|lock|missing|options|page|resetline|%run|sasfile|skip|sysecho|title\\d?)\\b/i,\n      lookbehind: true,\n      alias: 'keyword'\n    };\n    var submitStatement = {\n      pattern: /(^|\\s)(?:submit(?:\\s+(?:load|norun|parseonly))?|endsubmit)\\b/i,\n      lookbehind: true,\n      alias: 'keyword'\n    };\n    var actionSets = /aStore|accessControl|aggregation|audio|autotune|bayesianNetClassifier|bioMedImage|boolRule|builtins|cardinality|cdm|clustering|conditionalRandomFields|configuration|copula|countreg|dataDiscovery|dataPreprocess|dataSciencePilot|dataStep|decisionTree|deduplication|deepLearn|deepNeural|deepRnn|ds2|ecm|entityRes|espCluster|explainModel|factmac|fastKnn|fcmpact|fedSql|freqTab|gVarCluster|gam|gleam|graphSemiSupLearn|hiddenMarkovModel|hyperGroup|ica|image|iml|kernalPca|langModel|ldaTopic|loadStreams|mbc|mixed|mlTools|modelPublishing|network|neuralNet|nmf|nonParametricBayes|nonlinear|optNetwork|optimization|panel|pca|percentile|phreg|pls|qkb|qlim|quantreg|recommend|regression|reinforcementLearn|robustPca|ruleMining|sampling|sandwich|sccasl|search(?:Analytics)?|sentimentAnalysis|sequence|session(?:Prop)?|severity|simSystem|simple|smartData|sparkEmbeddedProcess|sparseML|spatialreg|spc|stabilityMonitoring|svDataDescription|svm|table|text(?:Filters|Frequency|Mining|Parse|Rule(?:Develop|Score)|Topic|Util)|timeData|transpose|tsInfo|tsReconcile|uniTimeSeries|varReduce/.source;\n    var casActions = {\n      pattern: RegExp(/(^|\\s)(?:action\\s+)?(?:<act>)\\.[a-z]+\\b[^;]+/.source.replace(/<act>/g, function () {\n        return actionSets;\n      }), 'i'),\n      lookbehind: true,\n      inside: {\n        keyword: RegExp(/(?:<act>)\\.[a-z]+\\b/.source.replace(/<act>/g, function () {\n          return actionSets;\n        }), 'i'),\n        action: {\n          pattern: /(?:action)/i,\n          alias: 'keyword'\n        },\n        comment: comment,\n        \"function\": func,\n        'arg-value': args['arg-value'],\n        operator: args.operator,\n        argument: args.arg,\n        number: number,\n        'numeric-constant': numericConstant,\n        punctuation: punctuation,\n        string: string\n      }\n    };\n    var keywords = {\n      pattern: /((?:^|\\s)=?)(?:after|analysis|and|array|barchart|barwidth|begingraph|by|call|cas|cbarline|cfill|class(?:lev)?|close|column|computed?|contains|continue|data(?==)|define|delete|describe|document|do\\s+over|do|dol|drop|dul|else|end(?:comp|source)?|entryTitle|eval(?:uate)?|exec(?:ute)?|exit|file(?:name)?|fill(?:attrs)?|flist|fnc|function(?:list)?|global|goto|group(?:by)?|headline|headskip|histogram|if|infile|keep|keylabel|keyword|label|layout|leave|legendlabel|length|libname|loadactionset|merge|midpoints|_?null_|name|noobs|nowd|ods|options|or|otherwise|out(?:put)?|over(?:lay)?|plot|print|put|raise|ranexp|rannor|rbreak|retain|return|select|session|sessref|set|source|statgraph|sum|summarize|table|temp|terminate|then\\s+do|then|title\\d?|to|var|when|where|xaxisopts|y2axisopts|yaxisopts)\\b/i,\n      lookbehind: true\n    };\n    Prism.languages.sas = {\n      datalines: {\n        pattern: /^([ \\t]*)(?:cards|(?:data)?lines);[\\s\\S]+?^[ \\t]*;/im,\n        lookbehind: true,\n        alias: 'string',\n        inside: {\n          keyword: {\n            pattern: /^(?:cards|(?:data)?lines)/i\n          },\n          punctuation: /;/\n        }\n      },\n      'proc-sql': {\n        pattern: /(^proc\\s+(?:fed)?sql(?:\\s+[\\w|=]+)?;)[\\s\\S]+?(?=^(?:proc\\s+\\w+|data|quit|run);|(?![\\s\\S]))/im,\n        lookbehind: true,\n        inside: {\n          sql: {\n            pattern: RegExp(/^[ \\t]*(?:select|alter\\s+table|(?:create|describe|drop)\\s+(?:index|table(?:\\s+constraints)?|view)|create\\s+unique\\s+index|insert\\s+into|update)(?:<str>|[^;\"'])+;/.source.replace(/<str>/g, function () {\n              return stringPattern;\n            }), 'im'),\n            alias: 'language-sql',\n            inside: Prism.languages.sql\n          },\n          'global-statements': globalStatements,\n          'sql-statements': {\n            pattern: /(^|\\s)(?:disconnect\\s+from|begin|commit|exec(?:ute)?|reset|rollback|validate)\\b/i,\n            lookbehind: true,\n            alias: 'keyword'\n          },\n          number: number,\n          'numeric-constant': numericConstant,\n          punctuation: punctuation,\n          string: string\n        }\n      },\n      'proc-groovy': {\n        pattern: /(^proc\\s+groovy(?:\\s+[\\w|=]+)?;)[\\s\\S]+?(?=^(?:proc\\s+\\w+|data|quit|run);|(?![\\s\\S]))/im,\n        lookbehind: true,\n        inside: {\n          comment: comment,\n          groovy: {\n            pattern: RegExp(/(^[ \\t]*submit(?:\\s+(?:load|norun|parseonly))?)(?:<str>|[^\"'])+?(?=endsubmit;)/.source.replace(/<str>/g, function () {\n              return stringPattern;\n            }), 'im'),\n            lookbehind: true,\n            alias: 'language-groovy',\n            inside: Prism.languages.groovy\n          },\n          keyword: keywords,\n          'submit-statement': submitStatement,\n          'global-statements': globalStatements,\n          number: number,\n          'numeric-constant': numericConstant,\n          punctuation: punctuation,\n          string: string\n        }\n      },\n      'proc-lua': {\n        pattern: /(^proc\\s+lua(?:\\s+[\\w|=]+)?;)[\\s\\S]+?(?=^(?:proc\\s+\\w+|data|quit|run);|(?![\\s\\S]))/im,\n        lookbehind: true,\n        inside: {\n          comment: comment,\n          lua: {\n            pattern: RegExp(/(^[ \\t]*submit(?:\\s+(?:load|norun|parseonly))?)(?:<str>|[^\"'])+?(?=endsubmit;)/.source.replace(/<str>/g, function () {\n              return stringPattern;\n            }), 'im'),\n            lookbehind: true,\n            alias: 'language-lua',\n            inside: Prism.languages.lua\n          },\n          keyword: keywords,\n          'submit-statement': submitStatement,\n          'global-statements': globalStatements,\n          number: number,\n          'numeric-constant': numericConstant,\n          punctuation: punctuation,\n          string: string\n        }\n      },\n      'proc-cas': {\n        pattern: /(^proc\\s+cas(?:\\s+[\\w|=]+)?;)[\\s\\S]+?(?=^(?:proc\\s+\\w+|quit|data);|(?![\\s\\S]))/im,\n        lookbehind: true,\n        inside: {\n          comment: comment,\n          'statement-var': {\n            pattern: /((?:^|\\s)=?)saveresult\\s[^;]+/im,\n            lookbehind: true,\n            inside: {\n              statement: {\n                pattern: /^saveresult\\s+\\S+/i,\n                inside: {\n                  keyword: /^(?:saveresult)/i\n                }\n              },\n              rest: args\n            }\n          },\n          'cas-actions': casActions,\n          statement: {\n            pattern: /((?:^|\\s)=?)(?:default|(?:un)?set|on|output|upload)[^;]+/im,\n            lookbehind: true,\n            inside: args\n          },\n          step: step,\n          keyword: keywords,\n          \"function\": func,\n          format: format,\n          altformat: altformat,\n          'global-statements': globalStatements,\n          number: number,\n          'numeric-constant': numericConstant,\n          punctuation: punctuation,\n          string: string\n        }\n      },\n      'proc-args': {\n        pattern: RegExp(/(^proc\\s+\\w+\\s+)(?!\\s)(?:[^;\"']|<str>)+;/.source.replace(/<str>/g, function () {\n          return stringPattern;\n        }), 'im'),\n        lookbehind: true,\n        inside: args\n      },\n      /*Special keywords within macros*/\n      'macro-keyword': macroKeyword,\n      'macro-variable': macroVariable,\n      'macro-string-functions': {\n        pattern: /((?:^|\\s|=))%(?:BQUOTE|NRBQUOTE|NRQUOTE|NRSTR|QUOTE|STR)\\(.*?(?:[^%]\\))/i,\n        lookbehind: true,\n        inside: {\n          \"function\": {\n            pattern: /%(?:BQUOTE|NRBQUOTE|NRQUOTE|NRSTR|QUOTE|STR)/i,\n            alias: 'keyword'\n          },\n          'macro-keyword': macroKeyword,\n          'macro-variable': macroVariable,\n          'escaped-char': {\n            pattern: /%['\"()<>=¬^~;,#]/\n          },\n          punctuation: punctuation\n        }\n      },\n      'macro-declaration': {\n        pattern: /^%macro[^;]+(?=;)/im,\n        inside: {\n          keyword: /%macro/i\n        }\n      },\n      'macro-end': {\n        pattern: /^%mend[^;]+(?=;)/im,\n        inside: {\n          keyword: /%mend/i\n        }\n      },\n      /*%_zscore(headcir, _lhc, _mhc, _shc, headcz, headcpct, _Fheadcz); */\n      macro: {\n        pattern: /%_\\w+(?=\\()/,\n        alias: 'keyword'\n      },\n      input: {\n        pattern: /\\binput\\s[-\\w\\s/*.$&]+;/i,\n        inside: {\n          input: {\n            alias: 'keyword',\n            pattern: /^input/i\n          },\n          comment: comment,\n          number: number,\n          'numeric-constant': numericConstant\n        }\n      },\n      'options-args': {\n        pattern: /(^options)[-'\"|/\\\\<>*+=:()\\w\\s]*(?=;)/im,\n        lookbehind: true,\n        inside: args\n      },\n      'cas-actions': casActions,\n      comment: comment,\n      \"function\": func,\n      format: format,\n      altformat: altformat,\n      'numeric-constant': numericConstant,\n      datetime: {\n        // '1jan2013'd, '9:25:19pm't, '18jan2003:9:27:05am'dt\n        pattern: RegExp(stringPattern + '(?:dt?|t)'),\n        alias: 'number'\n      },\n      string: string,\n      step: step,\n      keyword: keywords,\n      // In SAS Studio syntax highlighting, these operators are styled like keywords\n      'operator-keyword': {\n        pattern: /\\b(?:eq|ge|gt|in|le|lt|ne|not)\\b/i,\n        alias: 'operator'\n      },\n      // Decimal (1.2e23), hexadecimal (0c1x)\n      number: number,\n      operator: /\\*\\*?|\\|\\|?|!!?|¦¦?|<[>=]?|>[<=]?|[-+\\/=&]|[~¬^]=?/,\n      punctuation: punctuation\n    };\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/sas.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/sass.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/sass.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = sass;\nsass.displayName = 'sass';\nsass.aliases = [];\nfunction sass(Prism) {\n  ;\n  (function (Prism) {\n    Prism.languages.sass = Prism.languages.extend('css', {\n      // Sass comments don't need to be closed, only indented\n      comment: {\n        pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t].+)*/m,\n        lookbehind: true,\n        greedy: true\n      }\n    });\n    Prism.languages.insertBefore('sass', 'atrule', {\n      // We want to consume the whole line\n      'atrule-line': {\n        // Includes support for = and + shortcuts\n        pattern: /^(?:[ \\t]*)[@+=].+/m,\n        greedy: true,\n        inside: {\n          atrule: /(?:@[\\w-]+|[+=])/\n        }\n      }\n    });\n    delete Prism.languages.sass.atrule;\n    var variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/;\n    var operator = [/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|not|or)\\b/, {\n      pattern: /(\\s)-(?=\\s)/,\n      lookbehind: true\n    }];\n    Prism.languages.insertBefore('sass', 'property', {\n      // We want to consume the whole line\n      'variable-line': {\n        pattern: /^[ \\t]*\\$.+/m,\n        greedy: true,\n        inside: {\n          punctuation: /:/,\n          variable: variable,\n          operator: operator\n        }\n      },\n      // We want to consume the whole line\n      'property-line': {\n        pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s].*)/m,\n        greedy: true,\n        inside: {\n          property: [/[^:\\s]+(?=\\s*:)/, {\n            pattern: /(:)[^:\\s]+/,\n            lookbehind: true\n          }],\n          punctuation: /:/,\n          variable: variable,\n          operator: operator,\n          important: Prism.languages.sass.important\n        }\n      }\n    });\n    delete Prism.languages.sass.property;\n    delete Prism.languages.sass.important; // Now that whole lines for other patterns are consumed,\n    // what's left should be selectors\n    Prism.languages.insertBefore('sass', 'punctuation', {\n      selector: {\n        pattern: /^([ \\t]*)\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*)*/m,\n        lookbehind: true,\n        greedy: true\n      }\n    });\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvc2Fzcy5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLElBQUk7QUFDckJBLElBQUksQ0FBQ0MsV0FBVyxHQUFHLE1BQU07QUFDekJELElBQUksQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDakIsU0FBU0YsSUFBSUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ25CO0VBQUMsQ0FBQyxVQUFVQSxLQUFLLEVBQUU7SUFDakJBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixJQUFJLEdBQUdHLEtBQUssQ0FBQ0MsU0FBUyxDQUFDQyxNQUFNLENBQUMsS0FBSyxFQUFFO01BQ25EO01BQ0FDLE9BQU8sRUFBRTtRQUNQQyxPQUFPLEVBQUUsK0NBQStDO1FBQ3hEQyxVQUFVLEVBQUUsSUFBSTtRQUNoQkMsTUFBTSxFQUFFO01BQ1Y7SUFDRixDQUFDLENBQUM7SUFDRk4sS0FBSyxDQUFDQyxTQUFTLENBQUNNLFlBQVksQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFO01BQzdDO01BQ0EsYUFBYSxFQUFFO1FBQ2I7UUFDQUgsT0FBTyxFQUFFLHFCQUFxQjtRQUM5QkUsTUFBTSxFQUFFLElBQUk7UUFDWkUsTUFBTSxFQUFFO1VBQ05DLE1BQU0sRUFBRTtRQUNWO01BQ0Y7SUFDRixDQUFDLENBQUM7SUFDRixPQUFPVCxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osSUFBSSxDQUFDWSxNQUFNO0lBQ2xDLElBQUlDLFFBQVEsR0FBRyx3QkFBd0I7SUFDdkMsSUFBSUMsUUFBUSxHQUFHLENBQ2IsMENBQTBDLEVBQzFDO01BQ0VQLE9BQU8sRUFBRSxhQUFhO01BQ3RCQyxVQUFVLEVBQUU7SUFDZCxDQUFDLENBQ0Y7SUFDREwsS0FBSyxDQUFDQyxTQUFTLENBQUNNLFlBQVksQ0FBQyxNQUFNLEVBQUUsVUFBVSxFQUFFO01BQy9DO01BQ0EsZUFBZSxFQUFFO1FBQ2ZILE9BQU8sRUFBRSxjQUFjO1FBQ3ZCRSxNQUFNLEVBQUUsSUFBSTtRQUNaRSxNQUFNLEVBQUU7VUFDTkksV0FBVyxFQUFFLEdBQUc7VUFDaEJGLFFBQVEsRUFBRUEsUUFBUTtVQUNsQkMsUUFBUSxFQUFFQTtRQUNaO01BQ0YsQ0FBQztNQUNEO01BQ0EsZUFBZSxFQUFFO1FBQ2ZQLE9BQU8sRUFBRSxvQ0FBb0M7UUFDN0NFLE1BQU0sRUFBRSxJQUFJO1FBQ1pFLE1BQU0sRUFBRTtVQUNOSyxRQUFRLEVBQUUsQ0FDUixpQkFBaUIsRUFDakI7WUFDRVQsT0FBTyxFQUFFLFlBQVk7WUFDckJDLFVBQVUsRUFBRTtVQUNkLENBQUMsQ0FDRjtVQUNETyxXQUFXLEVBQUUsR0FBRztVQUNoQkYsUUFBUSxFQUFFQSxRQUFRO1VBQ2xCQyxRQUFRLEVBQUVBLFFBQVE7VUFDbEJHLFNBQVMsRUFBRWQsS0FBSyxDQUFDQyxTQUFTLENBQUNKLElBQUksQ0FBQ2lCO1FBQ2xDO01BQ0Y7SUFDRixDQUFDLENBQUM7SUFDRixPQUFPZCxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osSUFBSSxDQUFDZ0IsUUFBUTtJQUNwQyxPQUFPYixLQUFLLENBQUNDLFNBQVMsQ0FBQ0osSUFBSSxDQUFDaUIsU0FBUyxFQUFDO0lBQ3RDO0lBQ0FkLEtBQUssQ0FBQ0MsU0FBUyxDQUFDTSxZQUFZLENBQUMsTUFBTSxFQUFFLGFBQWEsRUFBRTtNQUNsRFEsUUFBUSxFQUFFO1FBQ1JYLE9BQU8sRUFDTCx3SEFBd0g7UUFDMUhDLFVBQVUsRUFBRSxJQUFJO1FBQ2hCQyxNQUFNLEVBQUU7TUFDVjtJQUNGLENBQUMsQ0FBQztFQUNKLENBQUMsRUFBRU4sS0FBSyxDQUFDO0FBQ1giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxzYXNzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IHNhc3NcbnNhc3MuZGlzcGxheU5hbWUgPSAnc2FzcydcbnNhc3MuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBzYXNzKFByaXNtKSB7XG4gIDsoZnVuY3Rpb24gKFByaXNtKSB7XG4gICAgUHJpc20ubGFuZ3VhZ2VzLnNhc3MgPSBQcmlzbS5sYW5ndWFnZXMuZXh0ZW5kKCdjc3MnLCB7XG4gICAgICAvLyBTYXNzIGNvbW1lbnRzIGRvbid0IG5lZWQgdG8gYmUgY2xvc2VkLCBvbmx5IGluZGVudGVkXG4gICAgICBjb21tZW50OiB7XG4gICAgICAgIHBhdHRlcm46IC9eKFsgXFx0XSopXFwvW1xcLypdLiooPzooPzpcXHI/XFxufFxccilcXDFbIFxcdF0uKykqL20sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGdyZWVkeTogdHJ1ZVxuICAgICAgfVxuICAgIH0pXG4gICAgUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgnc2FzcycsICdhdHJ1bGUnLCB7XG4gICAgICAvLyBXZSB3YW50IHRvIGNvbnN1bWUgdGhlIHdob2xlIGxpbmVcbiAgICAgICdhdHJ1bGUtbGluZSc6IHtcbiAgICAgICAgLy8gSW5jbHVkZXMgc3VwcG9ydCBmb3IgPSBhbmQgKyBzaG9ydGN1dHNcbiAgICAgICAgcGF0dGVybjogL14oPzpbIFxcdF0qKVtAKz1dLisvbSxcbiAgICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICBhdHJ1bGU6IC8oPzpAW1xcdy1dK3xbKz1dKS9cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gICAgZGVsZXRlIFByaXNtLmxhbmd1YWdlcy5zYXNzLmF0cnVsZVxuICAgIHZhciB2YXJpYWJsZSA9IC9cXCRbLVxcd10rfCNcXHtcXCRbLVxcd10rXFx9L1xuICAgIHZhciBvcGVyYXRvciA9IFtcbiAgICAgIC9bKypcXC8lXXxbPSFdPXw8PT98Pj0/fFxcYig/OmFuZHxub3R8b3IpXFxiLyxcbiAgICAgIHtcbiAgICAgICAgcGF0dGVybjogLyhcXHMpLSg/PVxccykvLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICB9XG4gICAgXVxuICAgIFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ3Nhc3MnLCAncHJvcGVydHknLCB7XG4gICAgICAvLyBXZSB3YW50IHRvIGNvbnN1bWUgdGhlIHdob2xlIGxpbmVcbiAgICAgICd2YXJpYWJsZS1saW5lJzoge1xuICAgICAgICBwYXR0ZXJuOiAvXlsgXFx0XSpcXCQuKy9tLFxuICAgICAgICBncmVlZHk6IHRydWUsXG4gICAgICAgIGluc2lkZToge1xuICAgICAgICAgIHB1bmN0dWF0aW9uOiAvOi8sXG4gICAgICAgICAgdmFyaWFibGU6IHZhcmlhYmxlLFxuICAgICAgICAgIG9wZXJhdG9yOiBvcGVyYXRvclxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gV2Ugd2FudCB0byBjb25zdW1lIHRoZSB3aG9sZSBsaW5lXG4gICAgICAncHJvcGVydHktbGluZSc6IHtcbiAgICAgICAgcGF0dGVybjogL15bIFxcdF0qKD86W146XFxzXSsgKjouKnw6W146XFxzXS4qKS9tLFxuICAgICAgICBncmVlZHk6IHRydWUsXG4gICAgICAgIGluc2lkZToge1xuICAgICAgICAgIHByb3BlcnR5OiBbXG4gICAgICAgICAgICAvW146XFxzXSsoPz1cXHMqOikvLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBwYXR0ZXJuOiAvKDopW146XFxzXSsvLFxuICAgICAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXSxcbiAgICAgICAgICBwdW5jdHVhdGlvbjogLzovLFxuICAgICAgICAgIHZhcmlhYmxlOiB2YXJpYWJsZSxcbiAgICAgICAgICBvcGVyYXRvcjogb3BlcmF0b3IsXG4gICAgICAgICAgaW1wb3J0YW50OiBQcmlzbS5sYW5ndWFnZXMuc2Fzcy5pbXBvcnRhbnRcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gICAgZGVsZXRlIFByaXNtLmxhbmd1YWdlcy5zYXNzLnByb3BlcnR5XG4gICAgZGVsZXRlIFByaXNtLmxhbmd1YWdlcy5zYXNzLmltcG9ydGFudCAvLyBOb3cgdGhhdCB3aG9sZSBsaW5lcyBmb3Igb3RoZXIgcGF0dGVybnMgYXJlIGNvbnN1bWVkLFxuICAgIC8vIHdoYXQncyBsZWZ0IHNob3VsZCBiZSBzZWxlY3RvcnNcbiAgICBQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdzYXNzJywgJ3B1bmN0dWF0aW9uJywge1xuICAgICAgc2VsZWN0b3I6IHtcbiAgICAgICAgcGF0dGVybjpcbiAgICAgICAgICAvXihbIFxcdF0qKVxcUyg/OixbXixcXHJcXG5dK3xbXixcXHJcXG5dKikoPzosW14sXFxyXFxuXSspKig/OiwoPzpcXHI/XFxufFxccilcXDFbIFxcdF0rXFxTKD86LFteLFxcclxcbl0rfFteLFxcclxcbl0qKSg/OixbXixcXHJcXG5dKykqKSovbSxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgICB9XG4gICAgfSlcbiAgfSkoUHJpc20pXG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInNhc3MiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImxhbmd1YWdlcyIsImV4dGVuZCIsImNvbW1lbnQiLCJwYXR0ZXJuIiwibG9va2JlaGluZCIsImdyZWVkeSIsImluc2VydEJlZm9yZSIsImluc2lkZSIsImF0cnVsZSIsInZhcmlhYmxlIiwib3BlcmF0b3IiLCJwdW5jdHVhdGlvbiIsInByb3BlcnR5IiwiaW1wb3J0YW50Iiwic2VsZWN0b3IiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/sass.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/scala.js":
/*!**********************************************!*\
  !*** ./node_modules/refractor/lang/scala.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar refractorJava = __webpack_require__(/*! ./java.js */ \"(ssr)/./node_modules/refractor/lang/java.js\");\nmodule.exports = scala;\nscala.displayName = 'scala';\nscala.aliases = [];\nfunction scala(Prism) {\n  Prism.register(refractorJava);\n  Prism.languages.scala = Prism.languages.extend('java', {\n    'triple-quoted-string': {\n      pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n      greedy: true,\n      alias: 'string'\n    },\n    string: {\n      pattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true\n    },\n    keyword: /<-|=>|\\b(?:abstract|case|catch|class|def|do|else|extends|final|finally|for|forSome|if|implicit|import|lazy|match|new|null|object|override|package|private|protected|return|sealed|self|super|this|throw|trait|try|type|val|var|while|with|yield)\\b/,\n    number: /\\b0x(?:[\\da-f]*\\.)?[\\da-f]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e\\d+)?[dfl]?/i,\n    builtin: /\\b(?:Any|AnyRef|AnyVal|Boolean|Byte|Char|Double|Float|Int|Long|Nothing|Short|String|Unit)\\b/,\n    symbol: /'[^\\d\\s\\\\]\\w*/\n  });\n  Prism.languages.insertBefore('scala', 'triple-quoted-string', {\n    'string-interpolation': {\n      pattern: /\\b[a-z]\\w*(?:\"\"\"(?:[^$]|\\$(?:[^{]|\\{(?:[^{}]|\\{[^{}]*\\})*\\}))*?\"\"\"|\"(?:[^$\"\\r\\n]|\\$(?:[^{]|\\{(?:[^{}]|\\{[^{}]*\\})*\\}))*\")/i,\n      greedy: true,\n      inside: {\n        id: {\n          pattern: /^\\w+/,\n          greedy: true,\n          alias: 'function'\n        },\n        escape: {\n          pattern: /\\\\\\$\"|\\$[$\"]/,\n          greedy: true,\n          alias: 'symbol'\n        },\n        interpolation: {\n          pattern: /\\$(?:\\w+|\\{(?:[^{}]|\\{[^{}]*\\})*\\})/,\n          greedy: true,\n          inside: {\n            punctuation: /^\\$\\{?|\\}$/,\n            expression: {\n              pattern: /[\\s\\S]+/,\n              inside: Prism.languages.scala\n            }\n          }\n        },\n        string: /[\\s\\S]+/\n      }\n    }\n  });\n  delete Prism.languages.scala['class-name'];\n  delete Prism.languages.scala['function'];\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvc2NhbGEuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBQ1osSUFBSUEsYUFBYSxHQUFHQyxtQkFBTyxDQUFDLDhEQUFXLENBQUM7QUFDeENDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxLQUFLO0FBQ3RCQSxLQUFLLENBQUNDLFdBQVcsR0FBRyxPQUFPO0FBQzNCRCxLQUFLLENBQUNFLE9BQU8sR0FBRyxFQUFFO0FBQ2xCLFNBQVNGLEtBQUtBLENBQUNHLEtBQUssRUFBRTtFQUNwQkEsS0FBSyxDQUFDQyxRQUFRLENBQUNSLGFBQWEsQ0FBQztFQUM3Qk8sS0FBSyxDQUFDRSxTQUFTLENBQUNMLEtBQUssR0FBR0csS0FBSyxDQUFDRSxTQUFTLENBQUNDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7SUFDckQsc0JBQXNCLEVBQUU7TUFDdEJDLE9BQU8sRUFBRSxnQkFBZ0I7TUFDekJDLE1BQU0sRUFBRSxJQUFJO01BQ1pDLEtBQUssRUFBRTtJQUNULENBQUM7SUFDREMsTUFBTSxFQUFFO01BQ05ILE9BQU8sRUFBRSxpQ0FBaUM7TUFDMUNDLE1BQU0sRUFBRTtJQUNWLENBQUM7SUFDREcsT0FBTyxFQUNMLG9QQUFvUDtJQUN0UEMsTUFBTSxFQUNKLHlFQUF5RTtJQUMzRUMsT0FBTyxFQUNMLDZGQUE2RjtJQUMvRkMsTUFBTSxFQUFFO0VBQ1YsQ0FBQyxDQUFDO0VBQ0ZYLEtBQUssQ0FBQ0UsU0FBUyxDQUFDVSxZQUFZLENBQUMsT0FBTyxFQUFFLHNCQUFzQixFQUFFO0lBQzVELHNCQUFzQixFQUFFO01BQ3RCUixPQUFPLEVBQ0wsNEhBQTRIO01BQzlIQyxNQUFNLEVBQUUsSUFBSTtNQUNaUSxNQUFNLEVBQUU7UUFDTkMsRUFBRSxFQUFFO1VBQ0ZWLE9BQU8sRUFBRSxNQUFNO1VBQ2ZDLE1BQU0sRUFBRSxJQUFJO1VBQ1pDLEtBQUssRUFBRTtRQUNULENBQUM7UUFDRFMsTUFBTSxFQUFFO1VBQ05YLE9BQU8sRUFBRSxjQUFjO1VBQ3ZCQyxNQUFNLEVBQUUsSUFBSTtVQUNaQyxLQUFLLEVBQUU7UUFDVCxDQUFDO1FBQ0RVLGFBQWEsRUFBRTtVQUNiWixPQUFPLEVBQUUscUNBQXFDO1VBQzlDQyxNQUFNLEVBQUUsSUFBSTtVQUNaUSxNQUFNLEVBQUU7WUFDTkksV0FBVyxFQUFFLFlBQVk7WUFDekJDLFVBQVUsRUFBRTtjQUNWZCxPQUFPLEVBQUUsU0FBUztjQUNsQlMsTUFBTSxFQUFFYixLQUFLLENBQUNFLFNBQVMsQ0FBQ0w7WUFDMUI7VUFDRjtRQUNGLENBQUM7UUFDRFUsTUFBTSxFQUFFO01BQ1Y7SUFDRjtFQUNGLENBQUMsQ0FBQztFQUNGLE9BQU9QLEtBQUssQ0FBQ0UsU0FBUyxDQUFDTCxLQUFLLENBQUMsWUFBWSxDQUFDO0VBQzFDLE9BQU9HLEtBQUssQ0FBQ0UsU0FBUyxDQUFDTCxLQUFLLENBQUMsVUFBVSxDQUFDO0FBQzFDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcc2NhbGEuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG52YXIgcmVmcmFjdG9ySmF2YSA9IHJlcXVpcmUoJy4vamF2YS5qcycpXG5tb2R1bGUuZXhwb3J0cyA9IHNjYWxhXG5zY2FsYS5kaXNwbGF5TmFtZSA9ICdzY2FsYSdcbnNjYWxhLmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24gc2NhbGEoUHJpc20pIHtcbiAgUHJpc20ucmVnaXN0ZXIocmVmcmFjdG9ySmF2YSlcbiAgUHJpc20ubGFuZ3VhZ2VzLnNjYWxhID0gUHJpc20ubGFuZ3VhZ2VzLmV4dGVuZCgnamF2YScsIHtcbiAgICAndHJpcGxlLXF1b3RlZC1zdHJpbmcnOiB7XG4gICAgICBwYXR0ZXJuOiAvXCJcIlwiW1xcc1xcU10qP1wiXCJcIi8sXG4gICAgICBncmVlZHk6IHRydWUsXG4gICAgICBhbGlhczogJ3N0cmluZydcbiAgICB9LFxuICAgIHN0cmluZzoge1xuICAgICAgcGF0dGVybjogLyhcInwnKSg/OlxcXFwufCg/IVxcMSlbXlxcXFxcXHJcXG5dKSpcXDEvLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICBrZXl3b3JkOlxuICAgICAgLzwtfD0+fFxcYig/OmFic3RyYWN0fGNhc2V8Y2F0Y2h8Y2xhc3N8ZGVmfGRvfGVsc2V8ZXh0ZW5kc3xmaW5hbHxmaW5hbGx5fGZvcnxmb3JTb21lfGlmfGltcGxpY2l0fGltcG9ydHxsYXp5fG1hdGNofG5ld3xudWxsfG9iamVjdHxvdmVycmlkZXxwYWNrYWdlfHByaXZhdGV8cHJvdGVjdGVkfHJldHVybnxzZWFsZWR8c2VsZnxzdXBlcnx0aGlzfHRocm93fHRyYWl0fHRyeXx0eXBlfHZhbHx2YXJ8d2hpbGV8d2l0aHx5aWVsZClcXGIvLFxuICAgIG51bWJlcjpcbiAgICAgIC9cXGIweCg/OltcXGRhLWZdKlxcLik/W1xcZGEtZl0rfCg/OlxcYlxcZCsoPzpcXC5cXGQqKT98XFxCXFwuXFxkKykoPzplXFxkKyk/W2RmbF0/L2ksXG4gICAgYnVpbHRpbjpcbiAgICAgIC9cXGIoPzpBbnl8QW55UmVmfEFueVZhbHxCb29sZWFufEJ5dGV8Q2hhcnxEb3VibGV8RmxvYXR8SW50fExvbmd8Tm90aGluZ3xTaG9ydHxTdHJpbmd8VW5pdClcXGIvLFxuICAgIHN5bWJvbDogLydbXlxcZFxcc1xcXFxdXFx3Ki9cbiAgfSlcbiAgUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgnc2NhbGEnLCAndHJpcGxlLXF1b3RlZC1zdHJpbmcnLCB7XG4gICAgJ3N0cmluZy1pbnRlcnBvbGF0aW9uJzoge1xuICAgICAgcGF0dGVybjpcbiAgICAgICAgL1xcYlthLXpdXFx3Kig/OlwiXCJcIig/OlteJF18XFwkKD86W157XXxcXHsoPzpbXnt9XXxcXHtbXnt9XSpcXH0pKlxcfSkpKj9cIlwiXCJ8XCIoPzpbXiRcIlxcclxcbl18XFwkKD86W157XXxcXHsoPzpbXnt9XXxcXHtbXnt9XSpcXH0pKlxcfSkpKlwiKS9pLFxuICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgIGlkOiB7XG4gICAgICAgICAgcGF0dGVybjogL15cXHcrLyxcbiAgICAgICAgICBncmVlZHk6IHRydWUsXG4gICAgICAgICAgYWxpYXM6ICdmdW5jdGlvbidcbiAgICAgICAgfSxcbiAgICAgICAgZXNjYXBlOiB7XG4gICAgICAgICAgcGF0dGVybjogL1xcXFxcXCRcInxcXCRbJFwiXS8sXG4gICAgICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgICAgIGFsaWFzOiAnc3ltYm9sJ1xuICAgICAgICB9LFxuICAgICAgICBpbnRlcnBvbGF0aW9uOiB7XG4gICAgICAgICAgcGF0dGVybjogL1xcJCg/Olxcdyt8XFx7KD86W157fV18XFx7W157fV0qXFx9KSpcXH0pLyxcbiAgICAgICAgICBncmVlZHk6IHRydWUsXG4gICAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgICBwdW5jdHVhdGlvbjogL15cXCRcXHs/fFxcfSQvLFxuICAgICAgICAgICAgZXhwcmVzc2lvbjoge1xuICAgICAgICAgICAgICBwYXR0ZXJuOiAvW1xcc1xcU10rLyxcbiAgICAgICAgICAgICAgaW5zaWRlOiBQcmlzbS5sYW5ndWFnZXMuc2NhbGFcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHN0cmluZzogL1tcXHNcXFNdKy9cbiAgICAgIH1cbiAgICB9XG4gIH0pXG4gIGRlbGV0ZSBQcmlzbS5sYW5ndWFnZXMuc2NhbGFbJ2NsYXNzLW5hbWUnXVxuICBkZWxldGUgUHJpc20ubGFuZ3VhZ2VzLnNjYWxhWydmdW5jdGlvbiddXG59XG4iXSwibmFtZXMiOlsicmVmcmFjdG9ySmF2YSIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwic2NhbGEiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsInJlZ2lzdGVyIiwibGFuZ3VhZ2VzIiwiZXh0ZW5kIiwicGF0dGVybiIsImdyZWVkeSIsImFsaWFzIiwic3RyaW5nIiwia2V5d29yZCIsIm51bWJlciIsImJ1aWx0aW4iLCJzeW1ib2wiLCJpbnNlcnRCZWZvcmUiLCJpbnNpZGUiLCJpZCIsImVzY2FwZSIsImludGVycG9sYXRpb24iLCJwdW5jdHVhdGlvbiIsImV4cHJlc3Npb24iXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/scala.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/scheme.js":
/*!***********************************************!*\
  !*** ./node_modules/refractor/lang/scheme.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = scheme;\nscheme.displayName = 'scheme';\nscheme.aliases = [];\nfunction scheme(Prism) {\n  ;\n  (function (Prism) {\n    Prism.languages.scheme = {\n      // this supports \"normal\" single-line comments:\n      //   ; comment\n      // and (potentially nested) multiline comments:\n      //   #| comment #| nested |# still comment |#\n      // (only 1 level of nesting is supported)\n      comment: /;.*|#;\\s*(?:\\((?:[^()]|\\([^()]*\\))*\\)|\\[(?:[^\\[\\]]|\\[[^\\[\\]]*\\])*\\])|#\\|(?:[^#|]|#(?!\\|)|\\|(?!#)|#\\|(?:[^#|]|#(?!\\|)|\\|(?!#))*\\|#)*\\|#/,\n      string: {\n        pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n        greedy: true\n      },\n      symbol: {\n        pattern: /'[^()\\[\\]#'\\s]+/,\n        greedy: true\n      },\n      \"char\": {\n        pattern: /#\\\\(?:[ux][a-fA-F\\d]+\\b|[-a-zA-Z]+\\b|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|\\S)/,\n        greedy: true\n      },\n      'lambda-parameter': [\n      // https://www.cs.cmu.edu/Groups/AI/html/r4rs/r4rs_6.html#SEC30\n      {\n        pattern: /((?:^|[^'`#])[(\\[]lambda\\s+)(?:[^|()\\[\\]'\\s]+|\\|(?:[^\\\\|]|\\\\.)*\\|)/,\n        lookbehind: true\n      }, {\n        pattern: /((?:^|[^'`#])[(\\[]lambda\\s+[(\\[])[^()\\[\\]']+/,\n        lookbehind: true\n      }],\n      keyword: {\n        pattern: /((?:^|[^'`#])[(\\[])(?:begin|case(?:-lambda)?|cond(?:-expand)?|define(?:-library|-macro|-record-type|-syntax|-values)?|defmacro|delay(?:-force)?|do|else|except|export|guard|if|import|include(?:-ci|-library-declarations)?|lambda|let(?:rec)?(?:-syntax|-values|\\*)?|let\\*-values|only|parameterize|prefix|(?:quasi-?)?quote|rename|set!|syntax-(?:case|rules)|unless|unquote(?:-splicing)?|when)(?=[()\\[\\]\\s]|$)/,\n        lookbehind: true\n      },\n      builtin: {\n        // all functions of the base library of R7RS plus some of built-ins of R5Rs\n        pattern: /((?:^|[^'`#])[(\\[])(?:abs|and|append|apply|assoc|ass[qv]|binary-port\\?|boolean=?\\?|bytevector(?:-append|-copy|-copy!|-length|-u8-ref|-u8-set!|\\?)?|caar|cadr|call-with-(?:current-continuation|port|values)|call\\/cc|car|cdar|cddr|cdr|ceiling|char(?:->integer|-ready\\?|\\?|<\\?|<=\\?|=\\?|>\\?|>=\\?)|close-(?:input-port|output-port|port)|complex\\?|cons|current-(?:error|input|output)-port|denominator|dynamic-wind|eof-object\\??|eq\\?|equal\\?|eqv\\?|error|error-object(?:-irritants|-message|\\?)|eval|even\\?|exact(?:-integer-sqrt|-integer\\?|\\?)?|expt|features|file-error\\?|floor(?:-quotient|-remainder|\\/)?|flush-output-port|for-each|gcd|get-output-(?:bytevector|string)|inexact\\??|input-port(?:-open\\?|\\?)|integer(?:->char|\\?)|lcm|length|list(?:->string|->vector|-copy|-ref|-set!|-tail|\\?)?|make-(?:bytevector|list|parameter|string|vector)|map|max|member|memq|memv|min|modulo|negative\\?|newline|not|null\\?|number(?:->string|\\?)|numerator|odd\\?|open-(?:input|output)-(?:bytevector|string)|or|output-port(?:-open\\?|\\?)|pair\\?|peek-char|peek-u8|port\\?|positive\\?|procedure\\?|quotient|raise|raise-continuable|rational\\?|rationalize|read-(?:bytevector|bytevector!|char|error\\?|line|string|u8)|real\\?|remainder|reverse|round|set-c[ad]r!|square|string(?:->list|->number|->symbol|->utf8|->vector|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\\?|<\\?|<=\\?|=\\?|>\\?|>=\\?)?|substring|symbol(?:->string|\\?|=\\?)|syntax-error|textual-port\\?|truncate(?:-quotient|-remainder|\\/)?|u8-ready\\?|utf8->string|values|vector(?:->list|->string|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\\?)?|with-exception-handler|write-(?:bytevector|char|string|u8)|zero\\?)(?=[()\\[\\]\\s]|$)/,\n        lookbehind: true\n      },\n      operator: {\n        pattern: /((?:^|[^'`#])[(\\[])(?:[-+*%/]|[<>]=?|=>?)(?=[()\\[\\]\\s]|$)/,\n        lookbehind: true\n      },\n      number: {\n        // The number pattern from [the R7RS spec](https://small.r7rs.org/attachment/r7rs.pdf).\n        //\n        // <number>      := <num 2>|<num 8>|<num 10>|<num 16>\n        // <num R>       := <prefix R><complex R>\n        // <complex R>   := <real R>(?:@<real R>|<imaginary R>)?|<imaginary R>\n        // <imaginary R> := [+-](?:<ureal R>|(?:inf|nan)\\.0)?i\n        // <real R>      := [+-]?<ureal R>|[+-](?:inf|nan)\\.0\n        // <ureal R>     := <uint R>(?:\\/<uint R>)?\n        //                | <decimal R>\n        //\n        // <decimal 10>  := (?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?\n        // <uint R>      := <digit R>+\n        // <prefix R>    := <radix R>(?:#[ei])?|(?:#[ei])?<radix R>\n        // <radix 2>     := #b\n        // <radix 8>     := #o\n        // <radix 10>    := (?:#d)?\n        // <radix 16>    := #x\n        // <digit 2>     := [01]\n        // <digit 8>     := [0-7]\n        // <digit 10>    := \\d\n        // <digit 16>    := [0-9a-f]\n        //\n        // The problem with this grammar is that the resulting regex is way to complex, so we simplify by grouping all\n        // non-decimal bases together. This results in a decimal (dec) and combined binary, octal, and hexadecimal (box)\n        // pattern:\n        pattern: RegExp(SortedBNF({\n          '<ureal dec>': /\\d+(?:\\/\\d+)|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[esfdl][+-]?\\d+)?/.source,\n          '<real dec>': /[+-]?<ureal dec>|[+-](?:inf|nan)\\.0/.source,\n          '<imaginary dec>': /[+-](?:<ureal dec>|(?:inf|nan)\\.0)?i/.source,\n          '<complex dec>': /<real dec>(?:@<real dec>|<imaginary dec>)?|<imaginary dec>/.source,\n          '<num dec>': /(?:#d(?:#[ei])?|#[ei](?:#d)?)?<complex dec>/.source,\n          '<ureal box>': /[0-9a-f]+(?:\\/[0-9a-f]+)?/.source,\n          '<real box>': /[+-]?<ureal box>|[+-](?:inf|nan)\\.0/.source,\n          '<imaginary box>': /[+-](?:<ureal box>|(?:inf|nan)\\.0)?i/.source,\n          '<complex box>': /<real box>(?:@<real box>|<imaginary box>)?|<imaginary box>/.source,\n          '<num box>': /#[box](?:#[ei])?|(?:#[ei])?#[box]<complex box>/.source,\n          '<number>': /(^|[()\\[\\]\\s])(?:<num dec>|<num box>)(?=[()\\[\\]\\s]|$)/.source\n        }), 'i'),\n        lookbehind: true\n      },\n      \"boolean\": {\n        pattern: /(^|[()\\[\\]\\s])#(?:[ft]|false|true)(?=[()\\[\\]\\s]|$)/,\n        lookbehind: true\n      },\n      \"function\": {\n        pattern: /((?:^|[^'`#])[(\\[])(?:[^|()\\[\\]'\\s]+|\\|(?:[^\\\\|]|\\\\.)*\\|)(?=[()\\[\\]\\s]|$)/,\n        lookbehind: true\n      },\n      identifier: {\n        pattern: /(^|[()\\[\\]\\s])\\|(?:[^\\\\|]|\\\\.)*\\|(?=[()\\[\\]\\s]|$)/,\n        lookbehind: true,\n        greedy: true\n      },\n      punctuation: /[()\\[\\]']/\n    };\n    /**\n     * Given a topologically sorted BNF grammar, this will return the RegExp source of last rule of the grammar.\n     *\n     * @param {Record<string, string>} grammar\n     * @returns {string}\n     */\n    function SortedBNF(grammar) {\n      for (var key in grammar) {\n        grammar[key] = grammar[key].replace(/<[\\w\\s]+>/g, function (key) {\n          return '(?:' + grammar[key].trim() + ')';\n        });\n      } // return the last item\n      return grammar[key];\n    }\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/scheme.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/scss.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/scss.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = scss;\nscss.displayName = 'scss';\nscss.aliases = [];\nfunction scss(Prism) {\n  Prism.languages.scss = Prism.languages.extend('css', {\n    comment: {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true\n    },\n    atrule: {\n      pattern: /@[\\w-](?:\\([^()]+\\)|[^()\\s]|\\s+(?!\\s))*?(?=\\s+[{;])/,\n      inside: {\n        rule: /@[\\w-]+/ // See rest below\n      }\n    },\n\n    // url, compassified\n    url: /(?:[-a-z]+-)?url(?=\\()/i,\n    // CSS selector regex is not appropriate for Sass\n    // since there can be lot more things (var, @ directive, nesting..)\n    // a selector must start at the end of a property or after a brace (end of other rules or nesting)\n    // it can contain some characters that aren't used for defining rules or end of selector, & (parent selector), or interpolated variable\n    // the end of a selector is found when there is no rules in it ( {} or {\\s}) or if there is a property (because an interpolated var\n    // can \"pass\" as a selector- e.g: proper#{$erty})\n    // this one was hard to do, so please be careful if you edit this one :)\n    selector: {\n      // Initial look-ahead is used to prevent matching of blank selectors\n      pattern: /(?=\\S)[^@;{}()]?(?:[^@;{}()\\s]|\\s+(?!\\s)|#\\{\\$[-\\w]+\\})+(?=\\s*\\{(?:\\}|\\s|[^}][^:{}]*[:{][^}]))/,\n      inside: {\n        parent: {\n          pattern: /&/,\n          alias: 'important'\n        },\n        placeholder: /%[-\\w]+/,\n        variable: /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n      }\n    },\n    property: {\n      pattern: /(?:[-\\w]|\\$[-\\w]|#\\{\\$[-\\w]+\\})+(?=\\s*:)/,\n      inside: {\n        variable: /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n      }\n    }\n  });\n  Prism.languages.insertBefore('scss', 'atrule', {\n    keyword: [/@(?:content|debug|each|else(?: if)?|extend|for|forward|function|if|import|include|mixin|return|use|warn|while)\\b/i, {\n      pattern: /( )(?:from|through)(?= )/,\n      lookbehind: true\n    }]\n  });\n  Prism.languages.insertBefore('scss', 'important', {\n    // var and interpolated vars\n    variable: /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n  });\n  Prism.languages.insertBefore('scss', 'function', {\n    'module-modifier': {\n      pattern: /\\b(?:as|hide|show|with)\\b/i,\n      alias: 'keyword'\n    },\n    placeholder: {\n      pattern: /%[-\\w]+/,\n      alias: 'selector'\n    },\n    statement: {\n      pattern: /\\B!(?:default|optional)\\b/i,\n      alias: 'keyword'\n    },\n    \"boolean\": /\\b(?:false|true)\\b/,\n    \"null\": {\n      pattern: /\\bnull\\b/,\n      alias: 'keyword'\n    },\n    operator: {\n      pattern: /(\\s)(?:[-+*\\/%]|[=!]=|<=?|>=?|and|not|or)(?=\\s)/,\n      lookbehind: true\n    }\n  });\n  Prism.languages.scss['atrule'].inside.rest = Prism.languages.scss;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvc2Nzcy5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLElBQUk7QUFDckJBLElBQUksQ0FBQ0MsV0FBVyxHQUFHLE1BQU07QUFDekJELElBQUksQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDakIsU0FBU0YsSUFBSUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ25CQSxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osSUFBSSxHQUFHRyxLQUFLLENBQUNDLFNBQVMsQ0FBQ0MsTUFBTSxDQUFDLEtBQUssRUFBRTtJQUNuREMsT0FBTyxFQUFFO01BQ1BDLE9BQU8sRUFBRSxzQ0FBc0M7TUFDL0NDLFVBQVUsRUFBRTtJQUNkLENBQUM7SUFDREMsTUFBTSxFQUFFO01BQ05GLE9BQU8sRUFBRSxxREFBcUQ7TUFDOURHLE1BQU0sRUFBRTtRQUNOQyxJQUFJLEVBQUUsU0FBUyxDQUFDO01BQ2xCO0lBQ0YsQ0FBQzs7SUFDRDtJQUNBQyxHQUFHLEVBQUUseUJBQXlCO0lBQzlCO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0FDLFFBQVEsRUFBRTtNQUNSO01BQ0FOLE9BQU8sRUFDTCxnR0FBZ0c7TUFDbEdHLE1BQU0sRUFBRTtRQUNOSSxNQUFNLEVBQUU7VUFDTlAsT0FBTyxFQUFFLEdBQUc7VUFDWlEsS0FBSyxFQUFFO1FBQ1QsQ0FBQztRQUNEQyxXQUFXLEVBQUUsU0FBUztRQUN0QkMsUUFBUSxFQUFFO01BQ1o7SUFDRixDQUFDO0lBQ0RDLFFBQVEsRUFBRTtNQUNSWCxPQUFPLEVBQUUsMENBQTBDO01BQ25ERyxNQUFNLEVBQUU7UUFDTk8sUUFBUSxFQUFFO01BQ1o7SUFDRjtFQUNGLENBQUMsQ0FBQztFQUNGZCxLQUFLLENBQUNDLFNBQVMsQ0FBQ2UsWUFBWSxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUU7SUFDN0NDLE9BQU8sRUFBRSxDQUNQLG1IQUFtSCxFQUNuSDtNQUNFYixPQUFPLEVBQUUsMEJBQTBCO01BQ25DQyxVQUFVLEVBQUU7SUFDZCxDQUFDO0VBRUwsQ0FBQyxDQUFDO0VBQ0ZMLEtBQUssQ0FBQ0MsU0FBUyxDQUFDZSxZQUFZLENBQUMsTUFBTSxFQUFFLFdBQVcsRUFBRTtJQUNoRDtJQUNBRixRQUFRLEVBQUU7RUFDWixDQUFDLENBQUM7RUFDRmQsS0FBSyxDQUFDQyxTQUFTLENBQUNlLFlBQVksQ0FBQyxNQUFNLEVBQUUsVUFBVSxFQUFFO0lBQy9DLGlCQUFpQixFQUFFO01BQ2pCWixPQUFPLEVBQUUsNEJBQTRCO01BQ3JDUSxLQUFLLEVBQUU7SUFDVCxDQUFDO0lBQ0RDLFdBQVcsRUFBRTtNQUNYVCxPQUFPLEVBQUUsU0FBUztNQUNsQlEsS0FBSyxFQUFFO0lBQ1QsQ0FBQztJQUNETSxTQUFTLEVBQUU7TUFDVGQsT0FBTyxFQUFFLDRCQUE0QjtNQUNyQ1EsS0FBSyxFQUFFO0lBQ1QsQ0FBQztJQUNELFdBQVMsb0JBQW9CO0lBQzdCLFFBQU07TUFDSlIsT0FBTyxFQUFFLFVBQVU7TUFDbkJRLEtBQUssRUFBRTtJQUNULENBQUM7SUFDRE8sUUFBUSxFQUFFO01BQ1JmLE9BQU8sRUFBRSxpREFBaUQ7TUFDMURDLFVBQVUsRUFBRTtJQUNkO0VBQ0YsQ0FBQyxDQUFDO0VBQ0ZMLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixJQUFJLENBQUMsUUFBUSxDQUFDLENBQUNVLE1BQU0sQ0FBQ2EsSUFBSSxHQUFHcEIsS0FBSyxDQUFDQyxTQUFTLENBQUNKLElBQUk7QUFDbkUiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxzY3NzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IHNjc3NcbnNjc3MuZGlzcGxheU5hbWUgPSAnc2NzcydcbnNjc3MuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBzY3NzKFByaXNtKSB7XG4gIFByaXNtLmxhbmd1YWdlcy5zY3NzID0gUHJpc20ubGFuZ3VhZ2VzLmV4dGVuZCgnY3NzJywge1xuICAgIGNvbW1lbnQ6IHtcbiAgICAgIHBhdHRlcm46IC8oXnxbXlxcXFxdKSg/OlxcL1xcKltcXHNcXFNdKj9cXCpcXC98XFwvXFwvLiopLyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICB9LFxuICAgIGF0cnVsZToge1xuICAgICAgcGF0dGVybjogL0BbXFx3LV0oPzpcXChbXigpXStcXCl8W14oKVxcc118XFxzKyg/IVxccykpKj8oPz1cXHMrW3s7XSkvLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgIHJ1bGU6IC9AW1xcdy1dKy8gLy8gU2VlIHJlc3QgYmVsb3dcbiAgICAgIH1cbiAgICB9LFxuICAgIC8vIHVybCwgY29tcGFzc2lmaWVkXG4gICAgdXJsOiAvKD86Wy1hLXpdKy0pP3VybCg/PVxcKCkvaSxcbiAgICAvLyBDU1Mgc2VsZWN0b3IgcmVnZXggaXMgbm90IGFwcHJvcHJpYXRlIGZvciBTYXNzXG4gICAgLy8gc2luY2UgdGhlcmUgY2FuIGJlIGxvdCBtb3JlIHRoaW5ncyAodmFyLCBAIGRpcmVjdGl2ZSwgbmVzdGluZy4uKVxuICAgIC8vIGEgc2VsZWN0b3IgbXVzdCBzdGFydCBhdCB0aGUgZW5kIG9mIGEgcHJvcGVydHkgb3IgYWZ0ZXIgYSBicmFjZSAoZW5kIG9mIG90aGVyIHJ1bGVzIG9yIG5lc3RpbmcpXG4gICAgLy8gaXQgY2FuIGNvbnRhaW4gc29tZSBjaGFyYWN0ZXJzIHRoYXQgYXJlbid0IHVzZWQgZm9yIGRlZmluaW5nIHJ1bGVzIG9yIGVuZCBvZiBzZWxlY3RvciwgJiAocGFyZW50IHNlbGVjdG9yKSwgb3IgaW50ZXJwb2xhdGVkIHZhcmlhYmxlXG4gICAgLy8gdGhlIGVuZCBvZiBhIHNlbGVjdG9yIGlzIGZvdW5kIHdoZW4gdGhlcmUgaXMgbm8gcnVsZXMgaW4gaXQgKCB7fSBvciB7XFxzfSkgb3IgaWYgdGhlcmUgaXMgYSBwcm9wZXJ0eSAoYmVjYXVzZSBhbiBpbnRlcnBvbGF0ZWQgdmFyXG4gICAgLy8gY2FuIFwicGFzc1wiIGFzIGEgc2VsZWN0b3ItIGUuZzogcHJvcGVyI3skZXJ0eX0pXG4gICAgLy8gdGhpcyBvbmUgd2FzIGhhcmQgdG8gZG8sIHNvIHBsZWFzZSBiZSBjYXJlZnVsIGlmIHlvdSBlZGl0IHRoaXMgb25lIDopXG4gICAgc2VsZWN0b3I6IHtcbiAgICAgIC8vIEluaXRpYWwgbG9vay1haGVhZCBpcyB1c2VkIHRvIHByZXZlbnQgbWF0Y2hpbmcgb2YgYmxhbmsgc2VsZWN0b3JzXG4gICAgICBwYXR0ZXJuOlxuICAgICAgICAvKD89XFxTKVteQDt7fSgpXT8oPzpbXkA7e30oKVxcc118XFxzKyg/IVxccyl8I1xce1xcJFstXFx3XStcXH0pKyg/PVxccypcXHsoPzpcXH18XFxzfFtefV1bXjp7fV0qWzp7XVtefV0pKS8sXG4gICAgICBpbnNpZGU6IHtcbiAgICAgICAgcGFyZW50OiB7XG4gICAgICAgICAgcGF0dGVybjogLyYvLFxuICAgICAgICAgIGFsaWFzOiAnaW1wb3J0YW50J1xuICAgICAgICB9LFxuICAgICAgICBwbGFjZWhvbGRlcjogLyVbLVxcd10rLyxcbiAgICAgICAgdmFyaWFibGU6IC9cXCRbLVxcd10rfCNcXHtcXCRbLVxcd10rXFx9L1xuICAgICAgfVxuICAgIH0sXG4gICAgcHJvcGVydHk6IHtcbiAgICAgIHBhdHRlcm46IC8oPzpbLVxcd118XFwkWy1cXHddfCNcXHtcXCRbLVxcd10rXFx9KSsoPz1cXHMqOikvLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgIHZhcmlhYmxlOiAvXFwkWy1cXHddK3wjXFx7XFwkWy1cXHddK1xcfS9cbiAgICAgIH1cbiAgICB9XG4gIH0pXG4gIFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ3Njc3MnLCAnYXRydWxlJywge1xuICAgIGtleXdvcmQ6IFtcbiAgICAgIC9AKD86Y29udGVudHxkZWJ1Z3xlYWNofGVsc2UoPzogaWYpP3xleHRlbmR8Zm9yfGZvcndhcmR8ZnVuY3Rpb258aWZ8aW1wb3J0fGluY2x1ZGV8bWl4aW58cmV0dXJufHVzZXx3YXJufHdoaWxlKVxcYi9pLFxuICAgICAge1xuICAgICAgICBwYXR0ZXJuOiAvKCApKD86ZnJvbXx0aHJvdWdoKSg/PSApLyxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgfVxuICAgIF1cbiAgfSlcbiAgUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgnc2NzcycsICdpbXBvcnRhbnQnLCB7XG4gICAgLy8gdmFyIGFuZCBpbnRlcnBvbGF0ZWQgdmFyc1xuICAgIHZhcmlhYmxlOiAvXFwkWy1cXHddK3wjXFx7XFwkWy1cXHddK1xcfS9cbiAgfSlcbiAgUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgnc2NzcycsICdmdW5jdGlvbicsIHtcbiAgICAnbW9kdWxlLW1vZGlmaWVyJzoge1xuICAgICAgcGF0dGVybjogL1xcYig/OmFzfGhpZGV8c2hvd3x3aXRoKVxcYi9pLFxuICAgICAgYWxpYXM6ICdrZXl3b3JkJ1xuICAgIH0sXG4gICAgcGxhY2Vob2xkZXI6IHtcbiAgICAgIHBhdHRlcm46IC8lWy1cXHddKy8sXG4gICAgICBhbGlhczogJ3NlbGVjdG9yJ1xuICAgIH0sXG4gICAgc3RhdGVtZW50OiB7XG4gICAgICBwYXR0ZXJuOiAvXFxCISg/OmRlZmF1bHR8b3B0aW9uYWwpXFxiL2ksXG4gICAgICBhbGlhczogJ2tleXdvcmQnXG4gICAgfSxcbiAgICBib29sZWFuOiAvXFxiKD86ZmFsc2V8dHJ1ZSlcXGIvLFxuICAgIG51bGw6IHtcbiAgICAgIHBhdHRlcm46IC9cXGJudWxsXFxiLyxcbiAgICAgIGFsaWFzOiAna2V5d29yZCdcbiAgICB9LFxuICAgIG9wZXJhdG9yOiB7XG4gICAgICBwYXR0ZXJuOiAvKFxccykoPzpbLSsqXFwvJV18Wz0hXT18PD0/fD49P3xhbmR8bm90fG9yKSg/PVxccykvLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgIH1cbiAgfSlcbiAgUHJpc20ubGFuZ3VhZ2VzLnNjc3NbJ2F0cnVsZSddLmluc2lkZS5yZXN0ID0gUHJpc20ubGFuZ3VhZ2VzLnNjc3Ncbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwic2NzcyIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwiZXh0ZW5kIiwiY29tbWVudCIsInBhdHRlcm4iLCJsb29rYmVoaW5kIiwiYXRydWxlIiwiaW5zaWRlIiwicnVsZSIsInVybCIsInNlbGVjdG9yIiwicGFyZW50IiwiYWxpYXMiLCJwbGFjZWhvbGRlciIsInZhcmlhYmxlIiwicHJvcGVydHkiLCJpbnNlcnRCZWZvcmUiLCJrZXl3b3JkIiwic3RhdGVtZW50Iiwib3BlcmF0b3IiLCJyZXN0Il0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/scss.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/shell-session.js":
/*!******************************************************!*\
  !*** ./node_modules/refractor/lang/shell-session.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar refractorBash = __webpack_require__(/*! ./bash.js */ \"(ssr)/./node_modules/refractor/lang/bash.js\");\nmodule.exports = shellSession;\nshellSession.displayName = 'shellSession';\nshellSession.aliases = [];\nfunction shellSession(Prism) {\n  Prism.register(refractorBash);\n  (function (Prism) {\n    // CAREFUL!\n    // The following patterns are concatenated, so the group referenced by a back reference is non-obvious!\n    var strings = [\n    // normal string\n    /\"(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|\\$(?!\\()|`[^`]+`|[^\"\\\\`$])*\"/.source, /'[^']*'/.source, /\\$'(?:[^'\\\\]|\\\\[\\s\\S])*'/.source,\n    // here doc\n    // 2 capturing groups\n    /<<-?\\s*([\"']?)(\\w+)\\1\\s[\\s\\S]*?[\\r\\n]\\2/.source].join('|');\n    Prism.languages['shell-session'] = {\n      command: {\n        pattern: RegExp(\n        // user info\n        /^/.source + '(?:' + (\n        // <user> \":\" ( <path> )?\n        /[^\\s@:$#%*!/\\\\]+@[^\\r\\n@:$#%*!/\\\\]+(?::[^\\0-\\x1F$#%*?\"<>:;|]+)?/.source + '|' +\n        // <path>\n        // Since the path pattern is quite general, we will require it to start with a special character to\n        // prevent false positives.\n        /[/~.][^\\0-\\x1F$#%*?\"<>@:;|]*/.source) + ')?' +\n        // shell symbol\n        /[$#%](?=\\s)/.source +\n        // bash command\n        /(?:[^\\\\\\r\\n \\t'\"<$]|[ \\t](?:(?!#)|#.*$)|\\\\(?:[^\\r]|\\r\\n?)|\\$(?!')|<(?!<)|<<str>>)+/.source.replace(/<<str>>/g, function () {\n          return strings;\n        }), 'm'),\n        greedy: true,\n        inside: {\n          info: {\n            // foo@bar:~/files$ exit\n            // foo@bar$ exit\n            // ~/files$ exit\n            pattern: /^[^#$%]+/,\n            alias: 'punctuation',\n            inside: {\n              user: /^[^\\s@:$#%*!/\\\\]+@[^\\r\\n@:$#%*!/\\\\]+/,\n              punctuation: /:/,\n              path: /[\\s\\S]+/\n            }\n          },\n          bash: {\n            pattern: /(^[$#%]\\s*)\\S[\\s\\S]*/,\n            lookbehind: true,\n            alias: 'language-bash',\n            inside: Prism.languages.bash\n          },\n          'shell-symbol': {\n            pattern: /^[$#%]/,\n            alias: 'important'\n          }\n        }\n      },\n      output: /.(?:.*(?:[\\r\\n]|.$))*/\n    };\n    Prism.languages['sh-session'] = Prism.languages['shellsession'] = Prism.languages['shell-session'];\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvc2hlbGwtc2Vzc2lvbi5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFDWixJQUFJQSxhQUFhLEdBQUdDLG1CQUFPLENBQUMsOERBQVcsQ0FBQztBQUN4Q0MsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLFlBQVk7QUFDN0JBLFlBQVksQ0FBQ0MsV0FBVyxHQUFHLGNBQWM7QUFDekNELFlBQVksQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDekIsU0FBU0YsWUFBWUEsQ0FBQ0csS0FBSyxFQUFFO0VBQzNCQSxLQUFLLENBQUNDLFFBQVEsQ0FBQ1IsYUFBYSxDQUFDO0VBQzVCLENBQUMsVUFBVU8sS0FBSyxFQUFFO0lBQ2pCO0lBQ0E7SUFDQSxJQUFJRSxPQUFPLEdBQUc7SUFDWjtJQUNBLHVEQUF1RCxDQUFDQyxNQUFNLEVBQzlELFNBQVMsQ0FBQ0EsTUFBTSxFQUNoQiwwQkFBMEIsQ0FBQ0EsTUFBTTtJQUFFO0lBQ25DO0lBQ0EseUNBQXlDLENBQUNBLE1BQU0sQ0FDakQsQ0FBQ0MsSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUNYSixLQUFLLENBQUNLLFNBQVMsQ0FBQyxlQUFlLENBQUMsR0FBRztNQUNqQ0MsT0FBTyxFQUFFO1FBQ1BDLE9BQU8sRUFBRUMsTUFBTTtRQUNiO1FBQ0EsR0FBRyxDQUFDTCxNQUFNLEdBQ1IsS0FBSztRQUFHO1FBQ1AsaUVBQWlFLENBQy9EQSxNQUFNLEdBQ1AsR0FBRztRQUFHO1FBQ047UUFDQTtRQUNBLDhCQUE4QixDQUFDQSxNQUFNLENBQUMsR0FDeEMsSUFBSTtRQUFHO1FBQ1AsYUFBYSxDQUFDQSxNQUFNO1FBQUc7UUFDdkIsb0ZBQW9GLENBQUNBLE1BQU0sQ0FBQ00sT0FBTyxDQUNqRyxVQUFVLEVBQ1YsWUFBWTtVQUNWLE9BQU9QLE9BQU87UUFDaEIsQ0FDRixDQUFDLEVBQ0gsR0FDRixDQUFDO1FBQ0RRLE1BQU0sRUFBRSxJQUFJO1FBQ1pDLE1BQU0sRUFBRTtVQUNOQyxJQUFJLEVBQUU7WUFDSjtZQUNBO1lBQ0E7WUFDQUwsT0FBTyxFQUFFLFVBQVU7WUFDbkJNLEtBQUssRUFBRSxhQUFhO1lBQ3BCRixNQUFNLEVBQUU7Y0FDTkcsSUFBSSxFQUFFLHNDQUFzQztjQUM1Q0MsV0FBVyxFQUFFLEdBQUc7Y0FDaEJDLElBQUksRUFBRTtZQUNSO1VBQ0YsQ0FBQztVQUNEQyxJQUFJLEVBQUU7WUFDSlYsT0FBTyxFQUFFLHNCQUFzQjtZQUMvQlcsVUFBVSxFQUFFLElBQUk7WUFDaEJMLEtBQUssRUFBRSxlQUFlO1lBQ3RCRixNQUFNLEVBQUVYLEtBQUssQ0FBQ0ssU0FBUyxDQUFDWTtVQUMxQixDQUFDO1VBQ0QsY0FBYyxFQUFFO1lBQ2RWLE9BQU8sRUFBRSxRQUFRO1lBQ2pCTSxLQUFLLEVBQUU7VUFDVDtRQUNGO01BQ0YsQ0FBQztNQUNETSxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0RuQixLQUFLLENBQUNLLFNBQVMsQ0FBQyxZQUFZLENBQUMsR0FBR0wsS0FBSyxDQUFDSyxTQUFTLENBQUMsY0FBYyxDQUFDLEdBQzdETCxLQUFLLENBQUNLLFNBQVMsQ0FBQyxlQUFlLENBQUM7RUFDcEMsQ0FBQyxFQUFFTCxLQUFLLENBQUM7QUFDWCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXHNoZWxsLXNlc3Npb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG52YXIgcmVmcmFjdG9yQmFzaCA9IHJlcXVpcmUoJy4vYmFzaC5qcycpXG5tb2R1bGUuZXhwb3J0cyA9IHNoZWxsU2Vzc2lvblxuc2hlbGxTZXNzaW9uLmRpc3BsYXlOYW1lID0gJ3NoZWxsU2Vzc2lvbidcbnNoZWxsU2Vzc2lvbi5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIHNoZWxsU2Vzc2lvbihQcmlzbSkge1xuICBQcmlzbS5yZWdpc3RlcihyZWZyYWN0b3JCYXNoKVxuICA7KGZ1bmN0aW9uIChQcmlzbSkge1xuICAgIC8vIENBUkVGVUwhXG4gICAgLy8gVGhlIGZvbGxvd2luZyBwYXR0ZXJucyBhcmUgY29uY2F0ZW5hdGVkLCBzbyB0aGUgZ3JvdXAgcmVmZXJlbmNlZCBieSBhIGJhY2sgcmVmZXJlbmNlIGlzIG5vbi1vYnZpb3VzIVxuICAgIHZhciBzdHJpbmdzID0gW1xuICAgICAgLy8gbm9ybWFsIHN0cmluZ1xuICAgICAgL1wiKD86XFxcXFtcXHNcXFNdfFxcJFxcKFteKV0rXFwpfFxcJCg/IVxcKCl8YFteYF0rYHxbXlwiXFxcXGAkXSkqXCIvLnNvdXJjZSxcbiAgICAgIC8nW14nXSonLy5zb3VyY2UsXG4gICAgICAvXFwkJyg/OlteJ1xcXFxdfFxcXFxbXFxzXFxTXSkqJy8uc291cmNlLCAvLyBoZXJlIGRvY1xuICAgICAgLy8gMiBjYXB0dXJpbmcgZ3JvdXBzXG4gICAgICAvPDwtP1xccyooW1wiJ10/KShcXHcrKVxcMVxcc1tcXHNcXFNdKj9bXFxyXFxuXVxcMi8uc291cmNlXG4gICAgXS5qb2luKCd8JylcbiAgICBQcmlzbS5sYW5ndWFnZXNbJ3NoZWxsLXNlc3Npb24nXSA9IHtcbiAgICAgIGNvbW1hbmQ6IHtcbiAgICAgICAgcGF0dGVybjogUmVnRXhwKFxuICAgICAgICAgIC8vIHVzZXIgaW5mb1xuICAgICAgICAgIC9eLy5zb3VyY2UgK1xuICAgICAgICAgICAgJyg/OicgKyAvLyA8dXNlcj4gXCI6XCIgKCA8cGF0aD4gKT9cbiAgICAgICAgICAgICgvW15cXHNAOiQjJSohL1xcXFxdK0BbXlxcclxcbkA6JCMlKiEvXFxcXF0rKD86OlteXFwwLVxceDFGJCMlKj9cIjw+Ojt8XSspPy9cbiAgICAgICAgICAgICAgLnNvdXJjZSArXG4gICAgICAgICAgICAgICd8JyArIC8vIDxwYXRoPlxuICAgICAgICAgICAgICAvLyBTaW5jZSB0aGUgcGF0aCBwYXR0ZXJuIGlzIHF1aXRlIGdlbmVyYWwsIHdlIHdpbGwgcmVxdWlyZSBpdCB0byBzdGFydCB3aXRoIGEgc3BlY2lhbCBjaGFyYWN0ZXIgdG9cbiAgICAgICAgICAgICAgLy8gcHJldmVudCBmYWxzZSBwb3NpdGl2ZXMuXG4gICAgICAgICAgICAgIC9bL34uXVteXFwwLVxceDFGJCMlKj9cIjw+QDo7fF0qLy5zb3VyY2UpICtcbiAgICAgICAgICAgICcpPycgKyAvLyBzaGVsbCBzeW1ib2xcbiAgICAgICAgICAgIC9bJCMlXSg/PVxccykvLnNvdXJjZSArIC8vIGJhc2ggY29tbWFuZFxuICAgICAgICAgICAgLyg/OlteXFxcXFxcclxcbiBcXHQnXCI8JF18WyBcXHRdKD86KD8hIyl8Iy4qJCl8XFxcXCg/OlteXFxyXXxcXHJcXG4/KXxcXCQoPyEnKXw8KD8hPCl8PDxzdHI+PikrLy5zb3VyY2UucmVwbGFjZShcbiAgICAgICAgICAgICAgLzw8c3RyPj4vZyxcbiAgICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdHJpbmdzXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICksXG4gICAgICAgICAgJ20nXG4gICAgICAgICksXG4gICAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgaW5mbzoge1xuICAgICAgICAgICAgLy8gZm9vQGJhcjp+L2ZpbGVzJCBleGl0XG4gICAgICAgICAgICAvLyBmb29AYmFyJCBleGl0XG4gICAgICAgICAgICAvLyB+L2ZpbGVzJCBleGl0XG4gICAgICAgICAgICBwYXR0ZXJuOiAvXlteIyQlXSsvLFxuICAgICAgICAgICAgYWxpYXM6ICdwdW5jdHVhdGlvbicsXG4gICAgICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICAgICAgdXNlcjogL15bXlxcc0A6JCMlKiEvXFxcXF0rQFteXFxyXFxuQDokIyUqIS9cXFxcXSsvLFxuICAgICAgICAgICAgICBwdW5jdHVhdGlvbjogLzovLFxuICAgICAgICAgICAgICBwYXRoOiAvW1xcc1xcU10rL1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgYmFzaDoge1xuICAgICAgICAgICAgcGF0dGVybjogLyheWyQjJV1cXHMqKVxcU1tcXHNcXFNdKi8sXG4gICAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAgICAgYWxpYXM6ICdsYW5ndWFnZS1iYXNoJyxcbiAgICAgICAgICAgIGluc2lkZTogUHJpc20ubGFuZ3VhZ2VzLmJhc2hcbiAgICAgICAgICB9LFxuICAgICAgICAgICdzaGVsbC1zeW1ib2wnOiB7XG4gICAgICAgICAgICBwYXR0ZXJuOiAvXlskIyVdLyxcbiAgICAgICAgICAgIGFsaWFzOiAnaW1wb3J0YW50J1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG91dHB1dDogLy4oPzouKig/OltcXHJcXG5dfC4kKSkqL1xuICAgIH1cbiAgICBQcmlzbS5sYW5ndWFnZXNbJ3NoLXNlc3Npb24nXSA9IFByaXNtLmxhbmd1YWdlc1snc2hlbGxzZXNzaW9uJ10gPVxuICAgICAgUHJpc20ubGFuZ3VhZ2VzWydzaGVsbC1zZXNzaW9uJ11cbiAgfSkoUHJpc20pXG59XG4iXSwibmFtZXMiOlsicmVmcmFjdG9yQmFzaCIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwic2hlbGxTZXNzaW9uIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJyZWdpc3RlciIsInN0cmluZ3MiLCJzb3VyY2UiLCJqb2luIiwibGFuZ3VhZ2VzIiwiY29tbWFuZCIsInBhdHRlcm4iLCJSZWdFeHAiLCJyZXBsYWNlIiwiZ3JlZWR5IiwiaW5zaWRlIiwiaW5mbyIsImFsaWFzIiwidXNlciIsInB1bmN0dWF0aW9uIiwicGF0aCIsImJhc2giLCJsb29rYmVoaW5kIiwib3V0cHV0Il0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/shell-session.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/smali.js":
/*!**********************************************!*\
  !*** ./node_modules/refractor/lang/smali.js ***!
  \**********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = smali;\nsmali.displayName = 'smali';\nsmali.aliases = [];\nfunction smali(Prism) {\n  // Test files for the parser itself:\n  // https://github.com/JesusFreke/smali/tree/master/smali/src/test/resources/LexerTest\n  Prism.languages.smali = {\n    comment: /#.*/,\n    string: {\n      pattern: /\"(?:[^\\r\\n\\\\\"]|\\\\.)*\"|'(?:[^\\r\\n\\\\']|\\\\(?:.|u[\\da-fA-F]{4}))'/,\n      greedy: true\n    },\n    'class-name': {\n      pattern: /(^|[^L])L(?:(?:\\w+|`[^`\\r\\n]*`)\\/)*(?:[\\w$]+|`[^`\\r\\n]*`)(?=\\s*;)/,\n      lookbehind: true,\n      inside: {\n        'class-name': {\n          pattern: /(^L|\\/)(?:[\\w$]+|`[^`\\r\\n]*`)$/,\n          lookbehind: true\n        },\n        namespace: {\n          pattern: /^(L)(?:(?:\\w+|`[^`\\r\\n]*`)\\/)+/,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\//\n          }\n        },\n        builtin: /^L/\n      }\n    },\n    builtin: [{\n      // Reference: https://github.com/JesusFreke/smali/wiki/TypesMethodsAndFields#types\n      pattern: /([();\\[])[BCDFIJSVZ]+/,\n      lookbehind: true\n    }, {\n      // e.g. .field mWifiOnUid:I\n      pattern: /([\\w$>]:)[BCDFIJSVZ]/,\n      lookbehind: true\n    }],\n    keyword: [{\n      pattern: /(\\.end\\s+)[\\w-]+/,\n      lookbehind: true\n    }, {\n      pattern: /(^|[^\\w.-])\\.(?!\\d)[\\w-]+/,\n      lookbehind: true\n    }, {\n      pattern: /(^|[^\\w.-])(?:abstract|annotation|bridge|constructor|enum|final|interface|private|protected|public|runtime|static|synthetic|system|transient)(?![\\w.-])/,\n      lookbehind: true\n    }],\n    \"function\": {\n      pattern: /(^|[^\\w.-])(?:\\w+|<[\\w$-]+>)(?=\\()/,\n      lookbehind: true\n    },\n    field: {\n      pattern: /[\\w$]+(?=:)/,\n      alias: 'variable'\n    },\n    register: {\n      pattern: /(^|[^\\w.-])[vp]\\d(?![\\w.-])/,\n      lookbehind: true,\n      alias: 'variable'\n    },\n    \"boolean\": {\n      pattern: /(^|[^\\w.-])(?:false|true)(?![\\w.-])/,\n      lookbehind: true\n    },\n    number: {\n      pattern: /(^|[^/\\w.-])-?(?:NAN|INFINITY|0x(?:[\\dA-F]+(?:\\.[\\dA-F]*)?|\\.[\\dA-F]+)(?:p[+-]?[\\dA-F]+)?|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?)[dflst]?(?![\\w.-])/i,\n      lookbehind: true\n    },\n    label: {\n      pattern: /(:)\\w+/,\n      lookbehind: true,\n      alias: 'property'\n    },\n    operator: /->|\\.\\.|[\\[=]/,\n    punctuation: /[{}(),;:]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvc21hbGkuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxLQUFLO0FBQ3RCQSxLQUFLLENBQUNDLFdBQVcsR0FBRyxPQUFPO0FBQzNCRCxLQUFLLENBQUNFLE9BQU8sR0FBRyxFQUFFO0FBQ2xCLFNBQVNGLEtBQUtBLENBQUNHLEtBQUssRUFBRTtFQUNwQjtFQUNBO0VBQ0FBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixLQUFLLEdBQUc7SUFDdEJLLE9BQU8sRUFBRSxLQUFLO0lBQ2RDLE1BQU0sRUFBRTtNQUNOQyxPQUFPLEVBQUUsK0RBQStEO01BQ3hFQyxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0QsWUFBWSxFQUFFO01BQ1pELE9BQU8sRUFDTCxtRUFBbUU7TUFDckVFLFVBQVUsRUFBRSxJQUFJO01BQ2hCQyxNQUFNLEVBQUU7UUFDTixZQUFZLEVBQUU7VUFDWkgsT0FBTyxFQUFFLGdDQUFnQztVQUN6Q0UsVUFBVSxFQUFFO1FBQ2QsQ0FBQztRQUNERSxTQUFTLEVBQUU7VUFDVEosT0FBTyxFQUFFLGdDQUFnQztVQUN6Q0UsVUFBVSxFQUFFLElBQUk7VUFDaEJDLE1BQU0sRUFBRTtZQUNORSxXQUFXLEVBQUU7VUFDZjtRQUNGLENBQUM7UUFDREMsT0FBTyxFQUFFO01BQ1g7SUFDRixDQUFDO0lBQ0RBLE9BQU8sRUFBRSxDQUNQO01BQ0U7TUFDQU4sT0FBTyxFQUFFLHVCQUF1QjtNQUNoQ0UsVUFBVSxFQUFFO0lBQ2QsQ0FBQyxFQUNEO01BQ0U7TUFDQUYsT0FBTyxFQUFFLHNCQUFzQjtNQUMvQkUsVUFBVSxFQUFFO0lBQ2QsQ0FBQyxDQUNGO0lBQ0RLLE9BQU8sRUFBRSxDQUNQO01BQ0VQLE9BQU8sRUFBRSxrQkFBa0I7TUFDM0JFLFVBQVUsRUFBRTtJQUNkLENBQUMsRUFDRDtNQUNFRixPQUFPLEVBQUUsMkJBQTJCO01BQ3BDRSxVQUFVLEVBQUU7SUFDZCxDQUFDLEVBQ0Q7TUFDRUYsT0FBTyxFQUNMLHlKQUF5SjtNQUMzSkUsVUFBVSxFQUFFO0lBQ2QsQ0FBQyxDQUNGO0lBQ0QsWUFBVTtNQUNSRixPQUFPLEVBQUUsb0NBQW9DO01BQzdDRSxVQUFVLEVBQUU7SUFDZCxDQUFDO0lBQ0RNLEtBQUssRUFBRTtNQUNMUixPQUFPLEVBQUUsYUFBYTtNQUN0QlMsS0FBSyxFQUFFO0lBQ1QsQ0FBQztJQUNEQyxRQUFRLEVBQUU7TUFDUlYsT0FBTyxFQUFFLDZCQUE2QjtNQUN0Q0UsVUFBVSxFQUFFLElBQUk7TUFDaEJPLEtBQUssRUFBRTtJQUNULENBQUM7SUFDRCxXQUFTO01BQ1BULE9BQU8sRUFBRSxxQ0FBcUM7TUFDOUNFLFVBQVUsRUFBRTtJQUNkLENBQUM7SUFDRFMsTUFBTSxFQUFFO01BQ05YLE9BQU8sRUFDTCxxSkFBcUo7TUFDdkpFLFVBQVUsRUFBRTtJQUNkLENBQUM7SUFDRFUsS0FBSyxFQUFFO01BQ0xaLE9BQU8sRUFBRSxRQUFRO01BQ2pCRSxVQUFVLEVBQUUsSUFBSTtNQUNoQk8sS0FBSyxFQUFFO0lBQ1QsQ0FBQztJQUNESSxRQUFRLEVBQUUsZUFBZTtJQUN6QlIsV0FBVyxFQUFFO0VBQ2YsQ0FBQztBQUNIIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcc21hbGkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gc21hbGlcbnNtYWxpLmRpc3BsYXlOYW1lID0gJ3NtYWxpJ1xuc21hbGkuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBzbWFsaShQcmlzbSkge1xuICAvLyBUZXN0IGZpbGVzIGZvciB0aGUgcGFyc2VyIGl0c2VsZjpcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL0plc3VzRnJla2Uvc21hbGkvdHJlZS9tYXN0ZXIvc21hbGkvc3JjL3Rlc3QvcmVzb3VyY2VzL0xleGVyVGVzdFxuICBQcmlzbS5sYW5ndWFnZXMuc21hbGkgPSB7XG4gICAgY29tbWVudDogLyMuKi8sXG4gICAgc3RyaW5nOiB7XG4gICAgICBwYXR0ZXJuOiAvXCIoPzpbXlxcclxcblxcXFxcIl18XFxcXC4pKlwifCcoPzpbXlxcclxcblxcXFwnXXxcXFxcKD86Lnx1W1xcZGEtZkEtRl17NH0pKScvLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICAnY2xhc3MtbmFtZSc6IHtcbiAgICAgIHBhdHRlcm46XG4gICAgICAgIC8oXnxbXkxdKUwoPzooPzpcXHcrfGBbXmBcXHJcXG5dKmApXFwvKSooPzpbXFx3JF0rfGBbXmBcXHJcXG5dKmApKD89XFxzKjspLyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBpbnNpZGU6IHtcbiAgICAgICAgJ2NsYXNzLW5hbWUnOiB7XG4gICAgICAgICAgcGF0dGVybjogLyheTHxcXC8pKD86W1xcdyRdK3xgW15gXFxyXFxuXSpgKSQvLFxuICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgbmFtZXNwYWNlOiB7XG4gICAgICAgICAgcGF0dGVybjogL14oTCkoPzooPzpcXHcrfGBbXmBcXHJcXG5dKmApXFwvKSsvLFxuICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgICBwdW5jdHVhdGlvbjogL1xcLy9cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGJ1aWx0aW46IC9eTC9cbiAgICAgIH1cbiAgICB9LFxuICAgIGJ1aWx0aW46IFtcbiAgICAgIHtcbiAgICAgICAgLy8gUmVmZXJlbmNlOiBodHRwczovL2dpdGh1Yi5jb20vSmVzdXNGcmVrZS9zbWFsaS93aWtpL1R5cGVzTWV0aG9kc0FuZEZpZWxkcyN0eXBlc1xuICAgICAgICBwYXR0ZXJuOiAvKFsoKTtcXFtdKVtCQ0RGSUpTVlpdKy8sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIC8vIGUuZy4gLmZpZWxkIG1XaWZpT25VaWQ6SVxuICAgICAgICBwYXR0ZXJuOiAvKFtcXHckPl06KVtCQ0RGSUpTVlpdLyxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgfVxuICAgIF0sXG4gICAga2V5d29yZDogW1xuICAgICAge1xuICAgICAgICBwYXR0ZXJuOiAvKFxcLmVuZFxccyspW1xcdy1dKy8sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHBhdHRlcm46IC8oXnxbXlxcdy4tXSlcXC4oPyFcXGQpW1xcdy1dKy8sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHBhdHRlcm46XG4gICAgICAgICAgLyhefFteXFx3Li1dKSg/OmFic3RyYWN0fGFubm90YXRpb258YnJpZGdlfGNvbnN0cnVjdG9yfGVudW18ZmluYWx8aW50ZXJmYWNlfHByaXZhdGV8cHJvdGVjdGVkfHB1YmxpY3xydW50aW1lfHN0YXRpY3xzeW50aGV0aWN8c3lzdGVtfHRyYW5zaWVudCkoPyFbXFx3Li1dKS8sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH1cbiAgICBdLFxuICAgIGZ1bmN0aW9uOiB7XG4gICAgICBwYXR0ZXJuOiAvKF58W15cXHcuLV0pKD86XFx3K3w8W1xcdyQtXSs+KSg/PVxcKCkvLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgIH0sXG4gICAgZmllbGQ6IHtcbiAgICAgIHBhdHRlcm46IC9bXFx3JF0rKD89OikvLFxuICAgICAgYWxpYXM6ICd2YXJpYWJsZSdcbiAgICB9LFxuICAgIHJlZ2lzdGVyOiB7XG4gICAgICBwYXR0ZXJuOiAvKF58W15cXHcuLV0pW3ZwXVxcZCg/IVtcXHcuLV0pLyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBhbGlhczogJ3ZhcmlhYmxlJ1xuICAgIH0sXG4gICAgYm9vbGVhbjoge1xuICAgICAgcGF0dGVybjogLyhefFteXFx3Li1dKSg/OmZhbHNlfHRydWUpKD8hW1xcdy4tXSkvLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgIH0sXG4gICAgbnVtYmVyOiB7XG4gICAgICBwYXR0ZXJuOlxuICAgICAgICAvKF58W14vXFx3Li1dKS0/KD86TkFOfElORklOSVRZfDB4KD86W1xcZEEtRl0rKD86XFwuW1xcZEEtRl0qKT98XFwuW1xcZEEtRl0rKSg/OnBbKy1dP1tcXGRBLUZdKyk/fCg/OlxcZCsoPzpcXC5cXGQqKT98XFwuXFxkKykoPzplWystXT9cXGQrKT8pW2RmbHN0XT8oPyFbXFx3Li1dKS9pLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgIH0sXG4gICAgbGFiZWw6IHtcbiAgICAgIHBhdHRlcm46IC8oOilcXHcrLyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBhbGlhczogJ3Byb3BlcnR5J1xuICAgIH0sXG4gICAgb3BlcmF0b3I6IC8tPnxcXC5cXC58W1xcWz1dLyxcbiAgICBwdW5jdHVhdGlvbjogL1t7fSgpLDs6XS9cbiAgfVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJzbWFsaSIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwiY29tbWVudCIsInN0cmluZyIsInBhdHRlcm4iLCJncmVlZHkiLCJsb29rYmVoaW5kIiwiaW5zaWRlIiwibmFtZXNwYWNlIiwicHVuY3R1YXRpb24iLCJidWlsdGluIiwia2V5d29yZCIsImZpZWxkIiwiYWxpYXMiLCJyZWdpc3RlciIsIm51bWJlciIsImxhYmVsIiwib3BlcmF0b3IiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/smali.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/smalltalk.js":
/*!**************************************************!*\
  !*** ./node_modules/refractor/lang/smalltalk.js ***!
  \**************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = smalltalk;\nsmalltalk.displayName = 'smalltalk';\nsmalltalk.aliases = [];\nfunction smalltalk(Prism) {\n  Prism.languages.smalltalk = {\n    comment: {\n      pattern: /\"(?:\"\"|[^\"])*\"/,\n      greedy: true\n    },\n    \"char\": {\n      pattern: /\\$./,\n      greedy: true\n    },\n    string: {\n      pattern: /'(?:''|[^'])*'/,\n      greedy: true\n    },\n    symbol: /#[\\da-z]+|#(?:-|([+\\/\\\\*~<>=@%|&?!])\\1?)|#(?=\\()/i,\n    'block-arguments': {\n      pattern: /(\\[\\s*):[^\\[|]*\\|/,\n      lookbehind: true,\n      inside: {\n        variable: /:[\\da-z]+/i,\n        punctuation: /\\|/\n      }\n    },\n    'temporary-variables': {\n      pattern: /\\|[^|]+\\|/,\n      inside: {\n        variable: /[\\da-z]+/i,\n        punctuation: /\\|/\n      }\n    },\n    keyword: /\\b(?:new|nil|self|super)\\b/,\n    \"boolean\": /\\b(?:false|true)\\b/,\n    number: [/\\d+r-?[\\dA-Z]+(?:\\.[\\dA-Z]+)?(?:e-?\\d+)?/, /\\b\\d+(?:\\.\\d+)?(?:e-?\\d+)?/],\n    operator: /[<=]=?|:=|~[~=]|\\/\\/?|\\\\\\\\|>[>=]?|[!^+\\-*&|,@]/,\n    punctuation: /[.;:?\\[\\](){}]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvc21hbGx0YWxrLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsU0FBUztBQUMxQkEsU0FBUyxDQUFDQyxXQUFXLEdBQUcsV0FBVztBQUNuQ0QsU0FBUyxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUN0QixTQUFTRixTQUFTQSxDQUFDRyxLQUFLLEVBQUU7RUFDeEJBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixTQUFTLEdBQUc7SUFDMUJLLE9BQU8sRUFBRTtNQUNQQyxPQUFPLEVBQUUsZ0JBQWdCO01BQ3pCQyxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0QsUUFBTTtNQUNKRCxPQUFPLEVBQUUsS0FBSztNQUNkQyxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0RDLE1BQU0sRUFBRTtNQUNORixPQUFPLEVBQUUsZ0JBQWdCO01BQ3pCQyxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0RFLE1BQU0sRUFBRSxtREFBbUQ7SUFDM0QsaUJBQWlCLEVBQUU7TUFDakJILE9BQU8sRUFBRSxtQkFBbUI7TUFDNUJJLFVBQVUsRUFBRSxJQUFJO01BQ2hCQyxNQUFNLEVBQUU7UUFDTkMsUUFBUSxFQUFFLFlBQVk7UUFDdEJDLFdBQVcsRUFBRTtNQUNmO0lBQ0YsQ0FBQztJQUNELHFCQUFxQixFQUFFO01BQ3JCUCxPQUFPLEVBQUUsV0FBVztNQUNwQkssTUFBTSxFQUFFO1FBQ05DLFFBQVEsRUFBRSxXQUFXO1FBQ3JCQyxXQUFXLEVBQUU7TUFDZjtJQUNGLENBQUM7SUFDREMsT0FBTyxFQUFFLDRCQUE0QjtJQUNyQyxXQUFTLG9CQUFvQjtJQUM3QkMsTUFBTSxFQUFFLENBQ04sMENBQTBDLEVBQzFDLDRCQUE0QixDQUM3QjtJQUNEQyxRQUFRLEVBQUUsZ0RBQWdEO0lBQzFESCxXQUFXLEVBQUU7RUFDZixDQUFDO0FBQ0giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxzbWFsbHRhbGsuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gc21hbGx0YWxrXG5zbWFsbHRhbGsuZGlzcGxheU5hbWUgPSAnc21hbGx0YWxrJ1xuc21hbGx0YWxrLmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24gc21hbGx0YWxrKFByaXNtKSB7XG4gIFByaXNtLmxhbmd1YWdlcy5zbWFsbHRhbGsgPSB7XG4gICAgY29tbWVudDoge1xuICAgICAgcGF0dGVybjogL1wiKD86XCJcInxbXlwiXSkqXCIvLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICBjaGFyOiB7XG4gICAgICBwYXR0ZXJuOiAvXFwkLi8sXG4gICAgICBncmVlZHk6IHRydWVcbiAgICB9LFxuICAgIHN0cmluZzoge1xuICAgICAgcGF0dGVybjogLycoPzonJ3xbXiddKSonLyxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgc3ltYm9sOiAvI1tcXGRhLXpdK3wjKD86LXwoWytcXC9cXFxcKn48Pj1AJXwmPyFdKVxcMT8pfCMoPz1cXCgpL2ksXG4gICAgJ2Jsb2NrLWFyZ3VtZW50cyc6IHtcbiAgICAgIHBhdHRlcm46IC8oXFxbXFxzKik6W15cXFt8XSpcXHwvLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGluc2lkZToge1xuICAgICAgICB2YXJpYWJsZTogLzpbXFxkYS16XSsvaSxcbiAgICAgICAgcHVuY3R1YXRpb246IC9cXHwvXG4gICAgICB9XG4gICAgfSxcbiAgICAndGVtcG9yYXJ5LXZhcmlhYmxlcyc6IHtcbiAgICAgIHBhdHRlcm46IC9cXHxbXnxdK1xcfC8sXG4gICAgICBpbnNpZGU6IHtcbiAgICAgICAgdmFyaWFibGU6IC9bXFxkYS16XSsvaSxcbiAgICAgICAgcHVuY3R1YXRpb246IC9cXHwvXG4gICAgICB9XG4gICAgfSxcbiAgICBrZXl3b3JkOiAvXFxiKD86bmV3fG5pbHxzZWxmfHN1cGVyKVxcYi8sXG4gICAgYm9vbGVhbjogL1xcYig/OmZhbHNlfHRydWUpXFxiLyxcbiAgICBudW1iZXI6IFtcbiAgICAgIC9cXGQrci0/W1xcZEEtWl0rKD86XFwuW1xcZEEtWl0rKT8oPzplLT9cXGQrKT8vLFxuICAgICAgL1xcYlxcZCsoPzpcXC5cXGQrKT8oPzplLT9cXGQrKT8vXG4gICAgXSxcbiAgICBvcGVyYXRvcjogL1s8PV09P3w6PXx+W349XXxcXC9cXC8/fFxcXFxcXFxcfD5bPj1dP3xbIV4rXFwtKiZ8LEBdLyxcbiAgICBwdW5jdHVhdGlvbjogL1suOzo/XFxbXFxdKCl7fV0vXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwic21hbGx0YWxrIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJjb21tZW50IiwicGF0dGVybiIsImdyZWVkeSIsInN0cmluZyIsInN5bWJvbCIsImxvb2tiZWhpbmQiLCJpbnNpZGUiLCJ2YXJpYWJsZSIsInB1bmN0dWF0aW9uIiwia2V5d29yZCIsIm51bWJlciIsIm9wZXJhdG9yIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/smalltalk.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/smarty.js":
/*!***********************************************!*\
  !*** ./node_modules/refractor/lang/smarty.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar refractorMarkupTemplating = __webpack_require__(/*! ./markup-templating.js */ \"(ssr)/./node_modules/refractor/lang/markup-templating.js\");\nmodule.exports = smarty;\nsmarty.displayName = 'smarty';\nsmarty.aliases = [];\nfunction smarty(Prism) {\n  Prism.register(refractorMarkupTemplating);\n  (function (Prism) {\n    Prism.languages.smarty = {\n      comment: {\n        pattern: /^\\{\\*[\\s\\S]*?\\*\\}/,\n        greedy: true\n      },\n      'embedded-php': {\n        pattern: /^\\{php\\}[\\s\\S]*?\\{\\/php\\}/,\n        greedy: true,\n        inside: {\n          smarty: {\n            pattern: /^\\{php\\}|\\{\\/php\\}$/,\n            inside: null // see below\n          },\n\n          php: {\n            pattern: /[\\s\\S]+/,\n            alias: 'language-php',\n            inside: Prism.languages.php\n          }\n        }\n      },\n      string: [{\n        pattern: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n        greedy: true,\n        inside: {\n          interpolation: {\n            pattern: /\\{[^{}]*\\}|`[^`]*`/,\n            inside: {\n              'interpolation-punctuation': {\n                pattern: /^[{`]|[`}]$/,\n                alias: 'punctuation'\n              },\n              expression: {\n                pattern: /[\\s\\S]+/,\n                inside: null // see below\n              }\n            }\n          },\n\n          variable: /\\$\\w+/\n        }\n      }, {\n        pattern: /'(?:\\\\.|[^'\\\\\\r\\n])*'/,\n        greedy: true\n      }],\n      keyword: {\n        pattern: /(^\\{\\/?)[a-z_]\\w*\\b(?!\\()/i,\n        lookbehind: true,\n        greedy: true\n      },\n      delimiter: {\n        pattern: /^\\{\\/?|\\}$/,\n        greedy: true,\n        alias: 'punctuation'\n      },\n      number: /\\b0x[\\dA-Fa-f]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,\n      variable: [/\\$(?!\\d)\\w+/, /#(?!\\d)\\w+#/, {\n        pattern: /(\\.|->|\\w\\s*=)(?!\\d)\\w+\\b(?!\\()/,\n        lookbehind: true\n      }, {\n        pattern: /(\\[)(?!\\d)\\w+(?=\\])/,\n        lookbehind: true\n      }],\n      \"function\": {\n        pattern: /(\\|\\s*)@?[a-z_]\\w*|\\b[a-z_]\\w*(?=\\()/i,\n        lookbehind: true\n      },\n      'attr-name': /\\b[a-z_]\\w*(?=\\s*=)/i,\n      \"boolean\": /\\b(?:false|no|off|on|true|yes)\\b/,\n      punctuation: /[\\[\\](){}.,:`]|->/,\n      operator: [/[+\\-*\\/%]|==?=?|[!<>]=?|&&|\\|\\|?/, /\\bis\\s+(?:not\\s+)?(?:div|even|odd)(?:\\s+by)?\\b/, /\\b(?:and|eq|gt?e|gt|lt?e|lt|mod|neq?|not|or)\\b/]\n    };\n    Prism.languages.smarty['embedded-php'].inside.smarty.inside = Prism.languages.smarty;\n    Prism.languages.smarty.string[0].inside.interpolation.inside.expression.inside = Prism.languages.smarty;\n    var string = /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|'(?:\\\\.|[^'\\\\\\r\\n])*'/;\n    var smartyPattern = RegExp(\n    // comments\n    /\\{\\*[\\s\\S]*?\\*\\}/.source + '|' +\n    // php tags\n    /\\{php\\}[\\s\\S]*?\\{\\/php\\}/.source + '|' +\n    // smarty blocks\n    /\\{(?:[^{}\"']|<str>|\\{(?:[^{}\"']|<str>|\\{(?:[^{}\"']|<str>)*\\})*\\})*\\}/.source.replace(/<str>/g, function () {\n      return string.source;\n    }), 'g'); // Tokenize all inline Smarty expressions\n    Prism.hooks.add('before-tokenize', function (env) {\n      var smartyLiteralStart = '{literal}';\n      var smartyLiteralEnd = '{/literal}';\n      var smartyLiteralMode = false;\n      Prism.languages['markup-templating'].buildPlaceholders(env, 'smarty', smartyPattern, function (match) {\n        // Smarty tags inside {literal} block are ignored\n        if (match === smartyLiteralEnd) {\n          smartyLiteralMode = false;\n        }\n        if (!smartyLiteralMode) {\n          if (match === smartyLiteralStart) {\n            smartyLiteralMode = true;\n          }\n          return true;\n        }\n        return false;\n      });\n    }); // Re-insert the tokens after tokenizing\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'smarty');\n    });\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/smarty.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/sml.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/sml.js ***!
  \********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = sml;\nsml.displayName = 'sml';\nsml.aliases = ['smlnj'];\nfunction sml(Prism) {\n  // https://smlfamily.github.io/sml97-defn.pdf\n  // https://people.mpi-sws.org/~rossberg/sml.html\n  ;\n  (function (Prism) {\n    var keywords = /\\b(?:abstype|and|andalso|as|case|datatype|do|else|end|eqtype|exception|fn|fun|functor|handle|if|in|include|infix|infixr|let|local|nonfix|of|op|open|orelse|raise|rec|sharing|sig|signature|struct|structure|then|type|val|where|while|with|withtype)\\b/i;\n    Prism.languages.sml = {\n      // allow one level of nesting\n      comment: /\\(\\*(?:[^*(]|\\*(?!\\))|\\((?!\\*)|\\(\\*(?:[^*(]|\\*(?!\\))|\\((?!\\*))*\\*\\))*\\*\\)/,\n      string: {\n        pattern: /#?\"(?:[^\"\\\\]|\\\\.)*\"/,\n        greedy: true\n      },\n      'class-name': [{\n        // This is only an approximation since the real grammar is context-free\n        //\n        // Why the main loop so complex?\n        // The main loop is approximately the same as /(?:\\s*(?:[*,]|->)\\s*<TERMINAL>)*/ which is, obviously, a lot\n        // simpler. The difference is that if a comma is the last iteration of the loop, then the terminal must be\n        // followed by a long identifier.\n        pattern: RegExp(/((?:^|[^:]):\\s*)<TERMINAL>(?:\\s*(?:(?:\\*|->)\\s*<TERMINAL>|,\\s*<TERMINAL>(?:(?=<NOT-LAST>)|(?!<NOT-LAST>)\\s+<LONG-ID>)))*/.source.replace(/<NOT-LAST>/g, function () {\n          return /\\s*(?:[*,]|->)/.source;\n        }).replace(/<TERMINAL>/g, function () {\n          return /(?:'[\\w']*|<LONG-ID>|\\((?:[^()]|\\([^()]*\\))*\\)|\\{(?:[^{}]|\\{[^{}]*\\})*\\})(?:\\s+<LONG-ID>)*/.source;\n        }).replace(/<LONG-ID>/g, function () {\n          return /(?!<KEYWORD>)[a-z\\d_][\\w'.]*/.source;\n        }).replace(/<KEYWORD>/g, function () {\n          return keywords.source;\n        }), 'i'),\n        lookbehind: true,\n        greedy: true,\n        inside: null // see below\n      }, {\n        pattern: /((?:^|[^\\w'])(?:datatype|exception|functor|signature|structure|type)\\s+)[a-z_][\\w'.]*/i,\n        lookbehind: true\n      }],\n      \"function\": {\n        pattern: /((?:^|[^\\w'])fun\\s+)[a-z_][\\w'.]*/i,\n        lookbehind: true\n      },\n      keyword: keywords,\n      variable: {\n        pattern: /(^|[^\\w'])'[\\w']*/,\n        lookbehind: true\n      },\n      number: /~?\\b(?:\\d+(?:\\.\\d+)?(?:e~?\\d+)?|0x[\\da-f]+)\\b/i,\n      word: {\n        pattern: /\\b0w(?:\\d+|x[\\da-f]+)\\b/i,\n        alias: 'constant'\n      },\n      \"boolean\": /\\b(?:false|true)\\b/i,\n      operator: /\\.\\.\\.|:[>=:]|=>?|->|[<>]=?|[!+\\-*/^#|@~]/,\n      punctuation: /[(){}\\[\\].:,;]/\n    };\n    Prism.languages.sml['class-name'][0].inside = Prism.languages.sml;\n    Prism.languages.smlnj = Prism.languages.sml;\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvc21sLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsR0FBRztBQUNwQkEsR0FBRyxDQUFDQyxXQUFXLEdBQUcsS0FBSztBQUN2QkQsR0FBRyxDQUFDRSxPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUM7QUFDdkIsU0FBU0YsR0FBR0EsQ0FBQ0csS0FBSyxFQUFFO0VBQ2xCO0VBQ0E7RUFDQTtFQUFDLENBQUMsVUFBVUEsS0FBSyxFQUFFO0lBQ2pCLElBQUlDLFFBQVEsR0FDVix5UEFBeVA7SUFDM1BELEtBQUssQ0FBQ0UsU0FBUyxDQUFDTCxHQUFHLEdBQUc7TUFDcEI7TUFDQU0sT0FBTyxFQUNMLDJFQUEyRTtNQUM3RUMsTUFBTSxFQUFFO1FBQ05DLE9BQU8sRUFBRSxxQkFBcUI7UUFDOUJDLE1BQU0sRUFBRTtNQUNWLENBQUM7TUFDRCxZQUFZLEVBQUUsQ0FDWjtRQUNFO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBRCxPQUFPLEVBQUVFLE1BQU0sQ0FDYiwwSEFBMEgsQ0FBQ0MsTUFBTSxDQUM5SEMsT0FBTyxDQUFDLGFBQWEsRUFBRSxZQUFZO1VBQ2xDLE9BQU8sZ0JBQWdCLENBQUNELE1BQU07UUFDaEMsQ0FBQyxDQUFDLENBQ0RDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsWUFBWTtVQUNsQyxPQUFPLDRGQUE0RixDQUNoR0QsTUFBTTtRQUNYLENBQUMsQ0FBQyxDQUNEQyxPQUFPLENBQUMsWUFBWSxFQUFFLFlBQVk7VUFDakMsT0FBTyw4QkFBOEIsQ0FBQ0QsTUFBTTtRQUM5QyxDQUFDLENBQUMsQ0FDREMsT0FBTyxDQUFDLFlBQVksRUFBRSxZQUFZO1VBQ2pDLE9BQU9SLFFBQVEsQ0FBQ08sTUFBTTtRQUN4QixDQUFDLENBQUMsRUFDSixHQUNGLENBQUM7UUFDREUsVUFBVSxFQUFFLElBQUk7UUFDaEJKLE1BQU0sRUFBRSxJQUFJO1FBQ1pLLE1BQU0sRUFBRSxJQUFJLENBQUM7TUFDZixDQUFDLEVBQ0Q7UUFDRU4sT0FBTyxFQUNMLHdGQUF3RjtRQUMxRkssVUFBVSxFQUFFO01BQ2QsQ0FBQyxDQUNGO01BQ0QsWUFBVTtRQUNSTCxPQUFPLEVBQUUsb0NBQW9DO1FBQzdDSyxVQUFVLEVBQUU7TUFDZCxDQUFDO01BQ0RFLE9BQU8sRUFBRVgsUUFBUTtNQUNqQlksUUFBUSxFQUFFO1FBQ1JSLE9BQU8sRUFBRSxtQkFBbUI7UUFDNUJLLFVBQVUsRUFBRTtNQUNkLENBQUM7TUFDREksTUFBTSxFQUFFLGdEQUFnRDtNQUN4REMsSUFBSSxFQUFFO1FBQ0pWLE9BQU8sRUFBRSwwQkFBMEI7UUFDbkNXLEtBQUssRUFBRTtNQUNULENBQUM7TUFDRCxXQUFTLHFCQUFxQjtNQUM5QkMsUUFBUSxFQUFFLDJDQUEyQztNQUNyREMsV0FBVyxFQUFFO0lBQ2YsQ0FBQztJQUNEbEIsS0FBSyxDQUFDRSxTQUFTLENBQUNMLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQ2MsTUFBTSxHQUFHWCxLQUFLLENBQUNFLFNBQVMsQ0FBQ0wsR0FBRztJQUNqRUcsS0FBSyxDQUFDRSxTQUFTLENBQUNpQixLQUFLLEdBQUduQixLQUFLLENBQUNFLFNBQVMsQ0FBQ0wsR0FBRztFQUM3QyxDQUFDLEVBQUVHLEtBQUssQ0FBQztBQUNYIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcc21sLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IHNtbFxuc21sLmRpc3BsYXlOYW1lID0gJ3NtbCdcbnNtbC5hbGlhc2VzID0gWydzbWxuaiddXG5mdW5jdGlvbiBzbWwoUHJpc20pIHtcbiAgLy8gaHR0cHM6Ly9zbWxmYW1pbHkuZ2l0aHViLmlvL3NtbDk3LWRlZm4ucGRmXG4gIC8vIGh0dHBzOi8vcGVvcGxlLm1waS1zd3Mub3JnL35yb3NzYmVyZy9zbWwuaHRtbFxuICA7KGZ1bmN0aW9uIChQcmlzbSkge1xuICAgIHZhciBrZXl3b3JkcyA9XG4gICAgICAvXFxiKD86YWJzdHlwZXxhbmR8YW5kYWxzb3xhc3xjYXNlfGRhdGF0eXBlfGRvfGVsc2V8ZW5kfGVxdHlwZXxleGNlcHRpb258Zm58ZnVufGZ1bmN0b3J8aGFuZGxlfGlmfGlufGluY2x1ZGV8aW5maXh8aW5maXhyfGxldHxsb2NhbHxub25maXh8b2Z8b3B8b3BlbnxvcmVsc2V8cmFpc2V8cmVjfHNoYXJpbmd8c2lnfHNpZ25hdHVyZXxzdHJ1Y3R8c3RydWN0dXJlfHRoZW58dHlwZXx2YWx8d2hlcmV8d2hpbGV8d2l0aHx3aXRodHlwZSlcXGIvaVxuICAgIFByaXNtLmxhbmd1YWdlcy5zbWwgPSB7XG4gICAgICAvLyBhbGxvdyBvbmUgbGV2ZWwgb2YgbmVzdGluZ1xuICAgICAgY29tbWVudDpcbiAgICAgICAgL1xcKFxcKig/OlteKihdfFxcKig/IVxcKSl8XFwoKD8hXFwqKXxcXChcXCooPzpbXiooXXxcXCooPyFcXCkpfFxcKCg/IVxcKikpKlxcKlxcKSkqXFwqXFwpLyxcbiAgICAgIHN0cmluZzoge1xuICAgICAgICBwYXR0ZXJuOiAvIz9cIig/OlteXCJcXFxcXXxcXFxcLikqXCIvLFxuICAgICAgICBncmVlZHk6IHRydWVcbiAgICAgIH0sXG4gICAgICAnY2xhc3MtbmFtZSc6IFtcbiAgICAgICAge1xuICAgICAgICAgIC8vIFRoaXMgaXMgb25seSBhbiBhcHByb3hpbWF0aW9uIHNpbmNlIHRoZSByZWFsIGdyYW1tYXIgaXMgY29udGV4dC1mcmVlXG4gICAgICAgICAgLy9cbiAgICAgICAgICAvLyBXaHkgdGhlIG1haW4gbG9vcCBzbyBjb21wbGV4P1xuICAgICAgICAgIC8vIFRoZSBtYWluIGxvb3AgaXMgYXBwcm94aW1hdGVseSB0aGUgc2FtZSBhcyAvKD86XFxzKig/OlsqLF18LT4pXFxzKjxURVJNSU5BTD4pKi8gd2hpY2ggaXMsIG9idmlvdXNseSwgYSBsb3RcbiAgICAgICAgICAvLyBzaW1wbGVyLiBUaGUgZGlmZmVyZW5jZSBpcyB0aGF0IGlmIGEgY29tbWEgaXMgdGhlIGxhc3QgaXRlcmF0aW9uIG9mIHRoZSBsb29wLCB0aGVuIHRoZSB0ZXJtaW5hbCBtdXN0IGJlXG4gICAgICAgICAgLy8gZm9sbG93ZWQgYnkgYSBsb25nIGlkZW50aWZpZXIuXG4gICAgICAgICAgcGF0dGVybjogUmVnRXhwKFxuICAgICAgICAgICAgLygoPzpefFteOl0pOlxccyopPFRFUk1JTkFMPig/OlxccyooPzooPzpcXCp8LT4pXFxzKjxURVJNSU5BTD58LFxccyo8VEVSTUlOQUw+KD86KD89PE5PVC1MQVNUPil8KD8hPE5PVC1MQVNUPilcXHMrPExPTkctSUQ+KSkpKi8uc291cmNlXG4gICAgICAgICAgICAgIC5yZXBsYWNlKC88Tk9ULUxBU1Q+L2csIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gL1xccyooPzpbKixdfC0+KS8uc291cmNlXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIC5yZXBsYWNlKC88VEVSTUlOQUw+L2csIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyg/OidbXFx3J10qfDxMT05HLUlEPnxcXCgoPzpbXigpXXxcXChbXigpXSpcXCkpKlxcKXxcXHsoPzpbXnt9XXxcXHtbXnt9XSpcXH0pKlxcfSkoPzpcXHMrPExPTkctSUQ+KSovXG4gICAgICAgICAgICAgICAgICAuc291cmNlXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIC5yZXBsYWNlKC88TE9ORy1JRD4vZywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAvKD8hPEtFWVdPUkQ+KVthLXpcXGRfXVtcXHcnLl0qLy5zb3VyY2VcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgLnJlcGxhY2UoLzxLRVlXT1JEPi9nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGtleXdvcmRzLnNvdXJjZVxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICdpJ1xuICAgICAgICAgICksXG4gICAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgICBncmVlZHk6IHRydWUsXG4gICAgICAgICAgaW5zaWRlOiBudWxsIC8vIHNlZSBiZWxvd1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcGF0dGVybjpcbiAgICAgICAgICAgIC8oKD86XnxbXlxcdyddKSg/OmRhdGF0eXBlfGV4Y2VwdGlvbnxmdW5jdG9yfHNpZ25hdHVyZXxzdHJ1Y3R1cmV8dHlwZSlcXHMrKVthLXpfXVtcXHcnLl0qL2ksXG4gICAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgZnVuY3Rpb246IHtcbiAgICAgICAgcGF0dGVybjogLygoPzpefFteXFx3J10pZnVuXFxzKylbYS16X11bXFx3Jy5dKi9pLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICB9LFxuICAgICAga2V5d29yZDoga2V5d29yZHMsXG4gICAgICB2YXJpYWJsZToge1xuICAgICAgICBwYXR0ZXJuOiAvKF58W15cXHcnXSknW1xcdyddKi8sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH0sXG4gICAgICBudW1iZXI6IC9+P1xcYig/OlxcZCsoPzpcXC5cXGQrKT8oPzplfj9cXGQrKT98MHhbXFxkYS1mXSspXFxiL2ksXG4gICAgICB3b3JkOiB7XG4gICAgICAgIHBhdHRlcm46IC9cXGIwdyg/OlxcZCt8eFtcXGRhLWZdKylcXGIvaSxcbiAgICAgICAgYWxpYXM6ICdjb25zdGFudCdcbiAgICAgIH0sXG4gICAgICBib29sZWFuOiAvXFxiKD86ZmFsc2V8dHJ1ZSlcXGIvaSxcbiAgICAgIG9wZXJhdG9yOiAvXFwuXFwuXFwufDpbPj06XXw9Pj98LT58Wzw+XT0/fFshK1xcLSovXiN8QH5dLyxcbiAgICAgIHB1bmN0dWF0aW9uOiAvWygpe31cXFtcXF0uOiw7XS9cbiAgICB9XG4gICAgUHJpc20ubGFuZ3VhZ2VzLnNtbFsnY2xhc3MtbmFtZSddWzBdLmluc2lkZSA9IFByaXNtLmxhbmd1YWdlcy5zbWxcbiAgICBQcmlzbS5sYW5ndWFnZXMuc21sbmogPSBQcmlzbS5sYW5ndWFnZXMuc21sXG4gIH0pKFByaXNtKVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJzbWwiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImtleXdvcmRzIiwibGFuZ3VhZ2VzIiwiY29tbWVudCIsInN0cmluZyIsInBhdHRlcm4iLCJncmVlZHkiLCJSZWdFeHAiLCJzb3VyY2UiLCJyZXBsYWNlIiwibG9va2JlaGluZCIsImluc2lkZSIsImtleXdvcmQiLCJ2YXJpYWJsZSIsIm51bWJlciIsIndvcmQiLCJhbGlhcyIsIm9wZXJhdG9yIiwicHVuY3R1YXRpb24iLCJzbWxuaiJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/sml.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/solidity.js":
/*!*************************************************!*\
  !*** ./node_modules/refractor/lang/solidity.js ***!
  \*************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = solidity;\nsolidity.displayName = 'solidity';\nsolidity.aliases = ['sol'];\nfunction solidity(Prism) {\n  Prism.languages.solidity = Prism.languages.extend('clike', {\n    'class-name': {\n      pattern: /(\\b(?:contract|enum|interface|library|new|struct|using)\\s+)(?!\\d)[\\w$]+/,\n      lookbehind: true\n    },\n    keyword: /\\b(?:_|anonymous|as|assembly|assert|break|calldata|case|constant|constructor|continue|contract|default|delete|do|else|emit|enum|event|external|for|from|function|if|import|indexed|inherited|interface|internal|is|let|library|mapping|memory|modifier|new|payable|pragma|private|public|pure|require|returns?|revert|selfdestruct|solidity|storage|struct|suicide|switch|this|throw|using|var|view|while)\\b/,\n    operator: /=>|->|:=|=:|\\*\\*|\\+\\+|--|\\|\\||&&|<<=?|>>=?|[-+*/%^&|<>!=]=?|[~?]/\n  });\n  Prism.languages.insertBefore('solidity', 'keyword', {\n    builtin: /\\b(?:address|bool|byte|u?int(?:8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?|string|bytes(?:[1-9]|[12]\\d|3[0-2])?)\\b/\n  });\n  Prism.languages.insertBefore('solidity', 'number', {\n    version: {\n      pattern: /([<>]=?|\\^)\\d+\\.\\d+\\.\\d+\\b/,\n      lookbehind: true,\n      alias: 'number'\n    }\n  });\n  Prism.languages.sol = Prism.languages.solidity;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvc29saWRpdHkuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxRQUFRO0FBQ3pCQSxRQUFRLENBQUNDLFdBQVcsR0FBRyxVQUFVO0FBQ2pDRCxRQUFRLENBQUNFLE9BQU8sR0FBRyxDQUFDLEtBQUssQ0FBQztBQUMxQixTQUFTRixRQUFRQSxDQUFDRyxLQUFLLEVBQUU7RUFDdkJBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixRQUFRLEdBQUdHLEtBQUssQ0FBQ0MsU0FBUyxDQUFDQyxNQUFNLENBQUMsT0FBTyxFQUFFO0lBQ3pELFlBQVksRUFBRTtNQUNaQyxPQUFPLEVBQ0wseUVBQXlFO01BQzNFQyxVQUFVLEVBQUU7SUFDZCxDQUFDO0lBQ0RDLE9BQU8sRUFDTCw4WUFBOFk7SUFDaFpDLFFBQVEsRUFBRTtFQUNaLENBQUMsQ0FBQztFQUNGTixLQUFLLENBQUNDLFNBQVMsQ0FBQ00sWUFBWSxDQUFDLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDbERDLE9BQU8sRUFDTDtFQUNKLENBQUMsQ0FBQztFQUNGUixLQUFLLENBQUNDLFNBQVMsQ0FBQ00sWUFBWSxDQUFDLFVBQVUsRUFBRSxRQUFRLEVBQUU7SUFDakRFLE9BQU8sRUFBRTtNQUNQTixPQUFPLEVBQUUsNEJBQTRCO01BQ3JDQyxVQUFVLEVBQUUsSUFBSTtNQUNoQk0sS0FBSyxFQUFFO0lBQ1Q7RUFDRixDQUFDLENBQUM7RUFDRlYsS0FBSyxDQUFDQyxTQUFTLENBQUNVLEdBQUcsR0FBR1gsS0FBSyxDQUFDQyxTQUFTLENBQUNKLFFBQVE7QUFDaEQiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFxzb2xpZGl0eS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBzb2xpZGl0eVxuc29saWRpdHkuZGlzcGxheU5hbWUgPSAnc29saWRpdHknXG5zb2xpZGl0eS5hbGlhc2VzID0gWydzb2wnXVxuZnVuY3Rpb24gc29saWRpdHkoUHJpc20pIHtcbiAgUHJpc20ubGFuZ3VhZ2VzLnNvbGlkaXR5ID0gUHJpc20ubGFuZ3VhZ2VzLmV4dGVuZCgnY2xpa2UnLCB7XG4gICAgJ2NsYXNzLW5hbWUnOiB7XG4gICAgICBwYXR0ZXJuOlxuICAgICAgICAvKFxcYig/OmNvbnRyYWN0fGVudW18aW50ZXJmYWNlfGxpYnJhcnl8bmV3fHN0cnVjdHx1c2luZylcXHMrKSg/IVxcZClbXFx3JF0rLyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICB9LFxuICAgIGtleXdvcmQ6XG4gICAgICAvXFxiKD86X3xhbm9ueW1vdXN8YXN8YXNzZW1ibHl8YXNzZXJ0fGJyZWFrfGNhbGxkYXRhfGNhc2V8Y29uc3RhbnR8Y29uc3RydWN0b3J8Y29udGludWV8Y29udHJhY3R8ZGVmYXVsdHxkZWxldGV8ZG98ZWxzZXxlbWl0fGVudW18ZXZlbnR8ZXh0ZXJuYWx8Zm9yfGZyb218ZnVuY3Rpb258aWZ8aW1wb3J0fGluZGV4ZWR8aW5oZXJpdGVkfGludGVyZmFjZXxpbnRlcm5hbHxpc3xsZXR8bGlicmFyeXxtYXBwaW5nfG1lbW9yeXxtb2RpZmllcnxuZXd8cGF5YWJsZXxwcmFnbWF8cHJpdmF0ZXxwdWJsaWN8cHVyZXxyZXF1aXJlfHJldHVybnM/fHJldmVydHxzZWxmZGVzdHJ1Y3R8c29saWRpdHl8c3RvcmFnZXxzdHJ1Y3R8c3VpY2lkZXxzd2l0Y2h8dGhpc3x0aHJvd3x1c2luZ3x2YXJ8dmlld3x3aGlsZSlcXGIvLFxuICAgIG9wZXJhdG9yOiAvPT58LT58Oj18PTp8XFwqXFwqfFxcK1xcK3wtLXxcXHxcXHx8JiZ8PDw9P3w+Pj0/fFstKyovJV4mfDw+IT1dPT98W34/XS9cbiAgfSlcbiAgUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgnc29saWRpdHknLCAna2V5d29yZCcsIHtcbiAgICBidWlsdGluOlxuICAgICAgL1xcYig/OmFkZHJlc3N8Ym9vbHxieXRlfHU/aW50KD86OHwxNnwyNHwzMnw0MHw0OHw1Nnw2NHw3Mnw4MHw4OHw5NnwxMDR8MTEyfDEyMHwxMjh8MTM2fDE0NHwxNTJ8MTYwfDE2OHwxNzZ8MTg0fDE5MnwyMDB8MjA4fDIxNnwyMjR8MjMyfDI0MHwyNDh8MjU2KT98c3RyaW5nfGJ5dGVzKD86WzEtOV18WzEyXVxcZHwzWzAtMl0pPylcXGIvXG4gIH0pXG4gIFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ3NvbGlkaXR5JywgJ251bWJlcicsIHtcbiAgICB2ZXJzaW9uOiB7XG4gICAgICBwYXR0ZXJuOiAvKFs8Pl09P3xcXF4pXFxkK1xcLlxcZCtcXC5cXGQrXFxiLyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBhbGlhczogJ251bWJlcidcbiAgICB9XG4gIH0pXG4gIFByaXNtLmxhbmd1YWdlcy5zb2wgPSBQcmlzbS5sYW5ndWFnZXMuc29saWRpdHlcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwic29saWRpdHkiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImxhbmd1YWdlcyIsImV4dGVuZCIsInBhdHRlcm4iLCJsb29rYmVoaW5kIiwia2V5d29yZCIsIm9wZXJhdG9yIiwiaW5zZXJ0QmVmb3JlIiwiYnVpbHRpbiIsInZlcnNpb24iLCJhbGlhcyIsInNvbCJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/solidity.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/solution-file.js":
/*!******************************************************!*\
  !*** ./node_modules/refractor/lang/solution-file.js ***!
  \******************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = solutionFile;\nsolutionFile.displayName = 'solutionFile';\nsolutionFile.aliases = [];\nfunction solutionFile(Prism) {\n  ;\n  (function (Prism) {\n    var guid = {\n      // https://en.wikipedia.org/wiki/Universally_unique_identifier#Format\n      pattern: /\\{[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12}\\}/i,\n      alias: 'constant',\n      inside: {\n        punctuation: /[{}]/\n      }\n    };\n    Prism.languages['solution-file'] = {\n      comment: {\n        pattern: /#.*/,\n        greedy: true\n      },\n      string: {\n        pattern: /\"[^\"\\r\\n]*\"|'[^'\\r\\n]*'/,\n        greedy: true,\n        inside: {\n          guid: guid\n        }\n      },\n      object: {\n        // Foo\n        //   Bar(\"abs\") = 9\n        //   EndBar\n        //   Prop = TRUE\n        // EndFoo\n        pattern: /^([ \\t]*)(?:([A-Z]\\w*)\\b(?=.*(?:\\r\\n?|\\n)(?:\\1[ \\t].*(?:\\r\\n?|\\n))*\\1End\\2(?=[ \\t]*$))|End[A-Z]\\w*(?=[ \\t]*$))/m,\n        lookbehind: true,\n        greedy: true,\n        alias: 'keyword'\n      },\n      property: {\n        pattern: /^([ \\t]*)(?!\\s)[^\\r\\n\"#=()]*[^\\s\"#=()](?=\\s*=)/m,\n        lookbehind: true,\n        inside: {\n          guid: guid\n        }\n      },\n      guid: guid,\n      number: /\\b\\d+(?:\\.\\d+)*\\b/,\n      \"boolean\": /\\b(?:FALSE|TRUE)\\b/,\n      operator: /=/,\n      punctuation: /[(),]/\n    };\n    Prism.languages['sln'] = Prism.languages['solution-file'];\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvc29sdXRpb24tZmlsZS5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLFlBQVk7QUFDN0JBLFlBQVksQ0FBQ0MsV0FBVyxHQUFHLGNBQWM7QUFDekNELFlBQVksQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDekIsU0FBU0YsWUFBWUEsQ0FBQ0csS0FBSyxFQUFFO0VBQzNCO0VBQUMsQ0FBQyxVQUFVQSxLQUFLLEVBQUU7SUFDakIsSUFBSUMsSUFBSSxHQUFHO01BQ1Q7TUFDQUMsT0FBTyxFQUFFLDhEQUE4RDtNQUN2RUMsS0FBSyxFQUFFLFVBQVU7TUFDakJDLE1BQU0sRUFBRTtRQUNOQyxXQUFXLEVBQUU7TUFDZjtJQUNGLENBQUM7SUFDREwsS0FBSyxDQUFDTSxTQUFTLENBQUMsZUFBZSxDQUFDLEdBQUc7TUFDakNDLE9BQU8sRUFBRTtRQUNQTCxPQUFPLEVBQUUsS0FBSztRQUNkTSxNQUFNLEVBQUU7TUFDVixDQUFDO01BQ0RDLE1BQU0sRUFBRTtRQUNOUCxPQUFPLEVBQUUseUJBQXlCO1FBQ2xDTSxNQUFNLEVBQUUsSUFBSTtRQUNaSixNQUFNLEVBQUU7VUFDTkgsSUFBSSxFQUFFQTtRQUNSO01BQ0YsQ0FBQztNQUNEUyxNQUFNLEVBQUU7UUFDTjtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0FSLE9BQU8sRUFDTCxpSEFBaUg7UUFDbkhTLFVBQVUsRUFBRSxJQUFJO1FBQ2hCSCxNQUFNLEVBQUUsSUFBSTtRQUNaTCxLQUFLLEVBQUU7TUFDVCxDQUFDO01BQ0RTLFFBQVEsRUFBRTtRQUNSVixPQUFPLEVBQUUsaURBQWlEO1FBQzFEUyxVQUFVLEVBQUUsSUFBSTtRQUNoQlAsTUFBTSxFQUFFO1VBQ05ILElBQUksRUFBRUE7UUFDUjtNQUNGLENBQUM7TUFDREEsSUFBSSxFQUFFQSxJQUFJO01BQ1ZZLE1BQU0sRUFBRSxtQkFBbUI7TUFDM0IsV0FBUyxvQkFBb0I7TUFDN0JDLFFBQVEsRUFBRSxHQUFHO01BQ2JULFdBQVcsRUFBRTtJQUNmLENBQUM7SUFDREwsS0FBSyxDQUFDTSxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUdOLEtBQUssQ0FBQ00sU0FBUyxDQUFDLGVBQWUsQ0FBQztFQUMzRCxDQUFDLEVBQUVOLEtBQUssQ0FBQztBQUNYIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcc29sdXRpb24tZmlsZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBzb2x1dGlvbkZpbGVcbnNvbHV0aW9uRmlsZS5kaXNwbGF5TmFtZSA9ICdzb2x1dGlvbkZpbGUnXG5zb2x1dGlvbkZpbGUuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBzb2x1dGlvbkZpbGUoUHJpc20pIHtcbiAgOyhmdW5jdGlvbiAoUHJpc20pIHtcbiAgICB2YXIgZ3VpZCA9IHtcbiAgICAgIC8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1VuaXZlcnNhbGx5X3VuaXF1ZV9pZGVudGlmaWVyI0Zvcm1hdFxuICAgICAgcGF0dGVybjogL1xce1tcXGRhLWZdezh9LVtcXGRhLWZdezR9LVtcXGRhLWZdezR9LVtcXGRhLWZdezR9LVtcXGRhLWZdezEyfVxcfS9pLFxuICAgICAgYWxpYXM6ICdjb25zdGFudCcsXG4gICAgICBpbnNpZGU6IHtcbiAgICAgICAgcHVuY3R1YXRpb246IC9be31dL1xuICAgICAgfVxuICAgIH1cbiAgICBQcmlzbS5sYW5ndWFnZXNbJ3NvbHV0aW9uLWZpbGUnXSA9IHtcbiAgICAgIGNvbW1lbnQ6IHtcbiAgICAgICAgcGF0dGVybjogLyMuKi8sXG4gICAgICAgIGdyZWVkeTogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHN0cmluZzoge1xuICAgICAgICBwYXR0ZXJuOiAvXCJbXlwiXFxyXFxuXSpcInwnW14nXFxyXFxuXSonLyxcbiAgICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICBndWlkOiBndWlkXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvYmplY3Q6IHtcbiAgICAgICAgLy8gRm9vXG4gICAgICAgIC8vICAgQmFyKFwiYWJzXCIpID0gOVxuICAgICAgICAvLyAgIEVuZEJhclxuICAgICAgICAvLyAgIFByb3AgPSBUUlVFXG4gICAgICAgIC8vIEVuZEZvb1xuICAgICAgICBwYXR0ZXJuOlxuICAgICAgICAgIC9eKFsgXFx0XSopKD86KFtBLVpdXFx3KilcXGIoPz0uKig/Olxcclxcbj98XFxuKSg/OlxcMVsgXFx0XS4qKD86XFxyXFxuP3xcXG4pKSpcXDFFbmRcXDIoPz1bIFxcdF0qJCkpfEVuZFtBLVpdXFx3Kig/PVsgXFx0XSokKSkvbSxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgICBhbGlhczogJ2tleXdvcmQnXG4gICAgICB9LFxuICAgICAgcHJvcGVydHk6IHtcbiAgICAgICAgcGF0dGVybjogL14oWyBcXHRdKikoPyFcXHMpW15cXHJcXG5cIiM9KCldKlteXFxzXCIjPSgpXSg/PVxccyo9KS9tLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICBndWlkOiBndWlkXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBndWlkOiBndWlkLFxuICAgICAgbnVtYmVyOiAvXFxiXFxkKyg/OlxcLlxcZCspKlxcYi8sXG4gICAgICBib29sZWFuOiAvXFxiKD86RkFMU0V8VFJVRSlcXGIvLFxuICAgICAgb3BlcmF0b3I6IC89LyxcbiAgICAgIHB1bmN0dWF0aW9uOiAvWygpLF0vXG4gICAgfVxuICAgIFByaXNtLmxhbmd1YWdlc1snc2xuJ10gPSBQcmlzbS5sYW5ndWFnZXNbJ3NvbHV0aW9uLWZpbGUnXVxuICB9KShQcmlzbSlcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwic29sdXRpb25GaWxlIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJndWlkIiwicGF0dGVybiIsImFsaWFzIiwiaW5zaWRlIiwicHVuY3R1YXRpb24iLCJsYW5ndWFnZXMiLCJjb21tZW50IiwiZ3JlZWR5Iiwic3RyaW5nIiwib2JqZWN0IiwibG9va2JlaGluZCIsInByb3BlcnR5IiwibnVtYmVyIiwib3BlcmF0b3IiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/solution-file.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/soy.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/soy.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar refractorMarkupTemplating = __webpack_require__(/*! ./markup-templating.js */ \"(ssr)/./node_modules/refractor/lang/markup-templating.js\");\nmodule.exports = soy;\nsoy.displayName = 'soy';\nsoy.aliases = [];\nfunction soy(Prism) {\n  Prism.register(refractorMarkupTemplating);\n  (function (Prism) {\n    var stringPattern = /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;\n    var numberPattern = /\\b\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?\\b|\\b0x[\\dA-F]+\\b/;\n    Prism.languages.soy = {\n      comment: [/\\/\\*[\\s\\S]*?\\*\\//, {\n        pattern: /(\\s)\\/\\/.*/,\n        lookbehind: true,\n        greedy: true\n      }],\n      'command-arg': {\n        pattern: /(\\{+\\/?\\s*(?:alias|call|delcall|delpackage|deltemplate|namespace|template)\\s+)\\.?[\\w.]+/,\n        lookbehind: true,\n        alias: 'string',\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      parameter: {\n        pattern: /(\\{+\\/?\\s*@?param\\??\\s+)\\.?[\\w.]+/,\n        lookbehind: true,\n        alias: 'variable'\n      },\n      keyword: [{\n        pattern: /(\\{+\\/?[^\\S\\r\\n]*)(?:\\\\[nrt]|alias|call|case|css|default|delcall|delpackage|deltemplate|else(?:if)?|fallbackmsg|for(?:each)?|if(?:empty)?|lb|let|literal|msg|namespace|nil|@?param\\??|rb|sp|switch|template|xid)/,\n        lookbehind: true\n      }, /\\b(?:any|as|attributes|bool|css|float|html|in|int|js|list|map|null|number|string|uri)\\b/],\n      delimiter: {\n        pattern: /^\\{+\\/?|\\/?\\}+$/,\n        alias: 'punctuation'\n      },\n      property: /\\w+(?==)/,\n      variable: {\n        pattern: /\\$[^\\W\\d]\\w*(?:\\??(?:\\.\\w+|\\[[^\\]]+\\]))*/,\n        inside: {\n          string: {\n            pattern: stringPattern,\n            greedy: true\n          },\n          number: numberPattern,\n          punctuation: /[\\[\\].?]/\n        }\n      },\n      string: {\n        pattern: stringPattern,\n        greedy: true\n      },\n      \"function\": [/\\w+(?=\\()/, {\n        pattern: /(\\|[^\\S\\r\\n]*)\\w+/,\n        lookbehind: true\n      }],\n      \"boolean\": /\\b(?:false|true)\\b/,\n      number: numberPattern,\n      operator: /\\?:?|<=?|>=?|==?|!=|[+*/%-]|\\b(?:and|not|or)\\b/,\n      punctuation: /[{}()\\[\\]|.,:]/\n    }; // Tokenize all inline Soy expressions\n    Prism.hooks.add('before-tokenize', function (env) {\n      var soyPattern = /\\{\\{.+?\\}\\}|\\{.+?\\}|\\s\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//g;\n      var soyLitteralStart = '{literal}';\n      var soyLitteralEnd = '{/literal}';\n      var soyLitteralMode = false;\n      Prism.languages['markup-templating'].buildPlaceholders(env, 'soy', soyPattern, function (match) {\n        // Soy tags inside {literal} block are ignored\n        if (match === soyLitteralEnd) {\n          soyLitteralMode = false;\n        }\n        if (!soyLitteralMode) {\n          if (match === soyLitteralStart) {\n            soyLitteralMode = true;\n          }\n          return true;\n        }\n        return false;\n      });\n    }); // Re-insert the tokens after tokenizing\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'soy');\n    });\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/soy.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/sparql.js":
/*!***********************************************!*\
  !*** ./node_modules/refractor/lang/sparql.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar refractorTurtle = __webpack_require__(/*! ./turtle.js */ \"(ssr)/./node_modules/refractor/lang/turtle.js\");\nmodule.exports = sparql;\nsparql.displayName = 'sparql';\nsparql.aliases = ['rq'];\nfunction sparql(Prism) {\n  Prism.register(refractorTurtle);\n  Prism.languages.sparql = Prism.languages.extend('turtle', {\n    \"boolean\": /\\b(?:false|true)\\b/i,\n    variable: {\n      pattern: /[?$]\\w+/,\n      greedy: true\n    }\n  });\n  Prism.languages.insertBefore('sparql', 'punctuation', {\n    keyword: [/\\b(?:A|ADD|ALL|AS|ASC|ASK|BNODE|BY|CLEAR|CONSTRUCT|COPY|CREATE|DATA|DEFAULT|DELETE|DESC|DESCRIBE|DISTINCT|DROP|EXISTS|FILTER|FROM|GROUP|HAVING|INSERT|INTO|LIMIT|LOAD|MINUS|MOVE|NAMED|NOT|NOW|OFFSET|OPTIONAL|ORDER|RAND|REDUCED|SELECT|SEPARATOR|SERVICE|SILENT|STRUUID|UNION|USING|UUID|VALUES|WHERE)\\b/i, /\\b(?:ABS|AVG|BIND|BOUND|CEIL|COALESCE|CONCAT|CONTAINS|COUNT|DATATYPE|DAY|ENCODE_FOR_URI|FLOOR|GROUP_CONCAT|HOURS|IF|IRI|isBLANK|isIRI|isLITERAL|isNUMERIC|isURI|LANG|LANGMATCHES|LCASE|MAX|MD5|MIN|MINUTES|MONTH|REGEX|REPLACE|ROUND|sameTerm|SAMPLE|SECONDS|SHA1|SHA256|SHA384|SHA512|STR|STRAFTER|STRBEFORE|STRDT|STRENDS|STRLANG|STRLEN|STRSTARTS|SUBSTR|SUM|TIMEZONE|TZ|UCASE|URI|YEAR)\\b(?=\\s*\\()/i, /\\b(?:BASE|GRAPH|PREFIX)\\b/i]\n  });\n  Prism.languages.rq = Prism.languages.sparql;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvc3BhcnFsLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUNaLElBQUlBLGVBQWUsR0FBR0MsbUJBQU8sQ0FBQyxrRUFBYSxDQUFDO0FBQzVDQyxNQUFNLENBQUNDLE9BQU8sR0FBR0MsTUFBTTtBQUN2QkEsTUFBTSxDQUFDQyxXQUFXLEdBQUcsUUFBUTtBQUM3QkQsTUFBTSxDQUFDRSxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUM7QUFDdkIsU0FBU0YsTUFBTUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ3JCQSxLQUFLLENBQUNDLFFBQVEsQ0FBQ1IsZUFBZSxDQUFDO0VBQy9CTyxLQUFLLENBQUNFLFNBQVMsQ0FBQ0wsTUFBTSxHQUFHRyxLQUFLLENBQUNFLFNBQVMsQ0FBQ0MsTUFBTSxDQUFDLFFBQVEsRUFBRTtJQUN4RCxXQUFTLHFCQUFxQjtJQUM5QkMsUUFBUSxFQUFFO01BQ1JDLE9BQU8sRUFBRSxTQUFTO01BQ2xCQyxNQUFNLEVBQUU7SUFDVjtFQUNGLENBQUMsQ0FBQztFQUNGTixLQUFLLENBQUNFLFNBQVMsQ0FBQ0ssWUFBWSxDQUFDLFFBQVEsRUFBRSxhQUFhLEVBQUU7SUFDcERDLE9BQU8sRUFBRSxDQUNQLDZTQUE2UyxFQUM3Uyx5WUFBeVksRUFDelksNEJBQTRCO0VBRWhDLENBQUMsQ0FBQztFQUNGUixLQUFLLENBQUNFLFNBQVMsQ0FBQ08sRUFBRSxHQUFHVCxLQUFLLENBQUNFLFNBQVMsQ0FBQ0wsTUFBTTtBQUM3QyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXHNwYXJxbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcbnZhciByZWZyYWN0b3JUdXJ0bGUgPSByZXF1aXJlKCcuL3R1cnRsZS5qcycpXG5tb2R1bGUuZXhwb3J0cyA9IHNwYXJxbFxuc3BhcnFsLmRpc3BsYXlOYW1lID0gJ3NwYXJxbCdcbnNwYXJxbC5hbGlhc2VzID0gWydycSddXG5mdW5jdGlvbiBzcGFycWwoUHJpc20pIHtcbiAgUHJpc20ucmVnaXN0ZXIocmVmcmFjdG9yVHVydGxlKVxuICBQcmlzbS5sYW5ndWFnZXMuc3BhcnFsID0gUHJpc20ubGFuZ3VhZ2VzLmV4dGVuZCgndHVydGxlJywge1xuICAgIGJvb2xlYW46IC9cXGIoPzpmYWxzZXx0cnVlKVxcYi9pLFxuICAgIHZhcmlhYmxlOiB7XG4gICAgICBwYXR0ZXJuOiAvWz8kXVxcdysvLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfVxuICB9KVxuICBQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdzcGFycWwnLCAncHVuY3R1YXRpb24nLCB7XG4gICAga2V5d29yZDogW1xuICAgICAgL1xcYig/OkF8QUREfEFMTHxBU3xBU0N8QVNLfEJOT0RFfEJZfENMRUFSfENPTlNUUlVDVHxDT1BZfENSRUFURXxEQVRBfERFRkFVTFR8REVMRVRFfERFU0N8REVTQ1JJQkV8RElTVElOQ1R8RFJPUHxFWElTVFN8RklMVEVSfEZST018R1JPVVB8SEFWSU5HfElOU0VSVHxJTlRPfExJTUlUfExPQUR8TUlOVVN8TU9WRXxOQU1FRHxOT1R8Tk9XfE9GRlNFVHxPUFRJT05BTHxPUkRFUnxSQU5EfFJFRFVDRUR8U0VMRUNUfFNFUEFSQVRPUnxTRVJWSUNFfFNJTEVOVHxTVFJVVUlEfFVOSU9OfFVTSU5HfFVVSUR8VkFMVUVTfFdIRVJFKVxcYi9pLFxuICAgICAgL1xcYig/OkFCU3xBVkd8QklORHxCT1VORHxDRUlMfENPQUxFU0NFfENPTkNBVHxDT05UQUlOU3xDT1VOVHxEQVRBVFlQRXxEQVl8RU5DT0RFX0ZPUl9VUkl8RkxPT1J8R1JPVVBfQ09OQ0FUfEhPVVJTfElGfElSSXxpc0JMQU5LfGlzSVJJfGlzTElURVJBTHxpc05VTUVSSUN8aXNVUkl8TEFOR3xMQU5HTUFUQ0hFU3xMQ0FTRXxNQVh8TUQ1fE1JTnxNSU5VVEVTfE1PTlRIfFJFR0VYfFJFUExBQ0V8Uk9VTkR8c2FtZVRlcm18U0FNUExFfFNFQ09ORFN8U0hBMXxTSEEyNTZ8U0hBMzg0fFNIQTUxMnxTVFJ8U1RSQUZURVJ8U1RSQkVGT1JFfFNUUkRUfFNUUkVORFN8U1RSTEFOR3xTVFJMRU58U1RSU1RBUlRTfFNVQlNUUnxTVU18VElNRVpPTkV8VFp8VUNBU0V8VVJJfFlFQVIpXFxiKD89XFxzKlxcKCkvaSxcbiAgICAgIC9cXGIoPzpCQVNFfEdSQVBIfFBSRUZJWClcXGIvaVxuICAgIF1cbiAgfSlcbiAgUHJpc20ubGFuZ3VhZ2VzLnJxID0gUHJpc20ubGFuZ3VhZ2VzLnNwYXJxbFxufVxuIl0sIm5hbWVzIjpbInJlZnJhY3RvclR1cnRsZSIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwic3BhcnFsIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJyZWdpc3RlciIsImxhbmd1YWdlcyIsImV4dGVuZCIsInZhcmlhYmxlIiwicGF0dGVybiIsImdyZWVkeSIsImluc2VydEJlZm9yZSIsImtleXdvcmQiLCJycSJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/sparql.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/splunk-spl.js":
/*!***************************************************!*\
  !*** ./node_modules/refractor/lang/splunk-spl.js ***!
  \***************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = splunkSpl;\nsplunkSpl.displayName = 'splunkSpl';\nsplunkSpl.aliases = [];\nfunction splunkSpl(Prism) {\n  Prism.languages['splunk-spl'] = {\n    comment: /`comment\\(\"(?:\\\\.|[^\\\\\"])*\"\\)`/,\n    string: {\n      pattern: /\"(?:\\\\.|[^\\\\\"])*\"/,\n      greedy: true\n    },\n    // https://docs.splunk.com/Documentation/Splunk/7.3.0/SearchReference/ListOfSearchCommands\n    keyword: /\\b(?:abstract|accum|addcoltotals|addinfo|addtotals|analyzefields|anomalies|anomalousvalue|anomalydetection|append|appendcols|appendcsv|appendlookup|appendpipe|arules|associate|audit|autoregress|bin|bucket|bucketdir|chart|cluster|cofilter|collect|concurrency|contingency|convert|correlate|datamodel|dbinspect|dedup|delete|delta|diff|erex|eval|eventcount|eventstats|extract|fieldformat|fields|fieldsummary|filldown|fillnull|findtypes|folderize|foreach|format|from|gauge|gentimes|geom|geomfilter|geostats|head|highlight|history|iconify|input|inputcsv|inputlookup|iplocation|join|kmeans|kv|kvform|loadjob|localize|localop|lookup|makecontinuous|makemv|makeresults|map|mcollect|metadata|metasearch|meventcollect|mstats|multikv|multisearch|mvcombine|mvexpand|nomv|outlier|outputcsv|outputlookup|outputtext|overlap|pivot|predict|rangemap|rare|regex|relevancy|reltime|rename|replace|rest|return|reverse|rex|rtorder|run|savedsearch|script|scrub|search|searchtxn|selfjoin|sendemail|set|setfields|sichart|sirare|sistats|sitimechart|sitop|sort|spath|stats|strcat|streamstats|table|tags|tail|timechart|timewrap|top|transaction|transpose|trendline|tscollect|tstats|typeahead|typelearner|typer|union|uniq|untable|where|x11|xmlkv|xmlunescape|xpath|xyseries)\\b/i,\n    'operator-word': {\n      pattern: /\\b(?:and|as|by|not|or|xor)\\b/i,\n      alias: 'operator'\n    },\n    \"function\": /\\b\\w+(?=\\s*\\()/,\n    property: /\\b\\w+(?=\\s*=(?!=))/,\n    date: {\n      // MM/DD/YYYY(:HH:MM:SS)?\n      pattern: /\\b\\d{1,2}\\/\\d{1,2}\\/\\d{1,4}(?:(?::\\d{1,2}){3})?\\b/,\n      alias: 'number'\n    },\n    number: /\\b\\d+(?:\\.\\d+)?\\b/,\n    \"boolean\": /\\b(?:f|false|t|true)\\b/i,\n    operator: /[<>=]=?|[-+*/%|]/,\n    punctuation: /[()[\\],]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvc3BsdW5rLXNwbC5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLFNBQVM7QUFDMUJBLFNBQVMsQ0FBQ0MsV0FBVyxHQUFHLFdBQVc7QUFDbkNELFNBQVMsQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDdEIsU0FBU0YsU0FBU0EsQ0FBQ0csS0FBSyxFQUFFO0VBQ3hCQSxLQUFLLENBQUNDLFNBQVMsQ0FBQyxZQUFZLENBQUMsR0FBRztJQUM5QkMsT0FBTyxFQUFFLGdDQUFnQztJQUN6Q0MsTUFBTSxFQUFFO01BQ05DLE9BQU8sRUFBRSxtQkFBbUI7TUFDNUJDLE1BQU0sRUFBRTtJQUNWLENBQUM7SUFDRDtJQUNBQyxPQUFPLEVBQ0wsNnRDQUE2dEM7SUFDL3RDLGVBQWUsRUFBRTtNQUNmRixPQUFPLEVBQUUsK0JBQStCO01BQ3hDRyxLQUFLLEVBQUU7SUFDVCxDQUFDO0lBQ0QsWUFBVSxnQkFBZ0I7SUFDMUJDLFFBQVEsRUFBRSxvQkFBb0I7SUFDOUJDLElBQUksRUFBRTtNQUNKO01BQ0FMLE9BQU8sRUFBRSxtREFBbUQ7TUFDNURHLEtBQUssRUFBRTtJQUNULENBQUM7SUFDREcsTUFBTSxFQUFFLG1CQUFtQjtJQUMzQixXQUFTLHlCQUF5QjtJQUNsQ0MsUUFBUSxFQUFFLGtCQUFrQjtJQUM1QkMsV0FBVyxFQUFFO0VBQ2YsQ0FBQztBQUNIIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcc3BsdW5rLXNwbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBzcGx1bmtTcGxcbnNwbHVua1NwbC5kaXNwbGF5TmFtZSA9ICdzcGx1bmtTcGwnXG5zcGx1bmtTcGwuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBzcGx1bmtTcGwoUHJpc20pIHtcbiAgUHJpc20ubGFuZ3VhZ2VzWydzcGx1bmstc3BsJ10gPSB7XG4gICAgY29tbWVudDogL2Bjb21tZW50XFwoXCIoPzpcXFxcLnxbXlxcXFxcIl0pKlwiXFwpYC8sXG4gICAgc3RyaW5nOiB7XG4gICAgICBwYXR0ZXJuOiAvXCIoPzpcXFxcLnxbXlxcXFxcIl0pKlwiLyxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgLy8gaHR0cHM6Ly9kb2NzLnNwbHVuay5jb20vRG9jdW1lbnRhdGlvbi9TcGx1bmsvNy4zLjAvU2VhcmNoUmVmZXJlbmNlL0xpc3RPZlNlYXJjaENvbW1hbmRzXG4gICAga2V5d29yZDpcbiAgICAgIC9cXGIoPzphYnN0cmFjdHxhY2N1bXxhZGRjb2x0b3RhbHN8YWRkaW5mb3xhZGR0b3RhbHN8YW5hbHl6ZWZpZWxkc3xhbm9tYWxpZXN8YW5vbWFsb3VzdmFsdWV8YW5vbWFseWRldGVjdGlvbnxhcHBlbmR8YXBwZW5kY29sc3xhcHBlbmRjc3Z8YXBwZW5kbG9va3VwfGFwcGVuZHBpcGV8YXJ1bGVzfGFzc29jaWF0ZXxhdWRpdHxhdXRvcmVncmVzc3xiaW58YnVja2V0fGJ1Y2tldGRpcnxjaGFydHxjbHVzdGVyfGNvZmlsdGVyfGNvbGxlY3R8Y29uY3VycmVuY3l8Y29udGluZ2VuY3l8Y29udmVydHxjb3JyZWxhdGV8ZGF0YW1vZGVsfGRiaW5zcGVjdHxkZWR1cHxkZWxldGV8ZGVsdGF8ZGlmZnxlcmV4fGV2YWx8ZXZlbnRjb3VudHxldmVudHN0YXRzfGV4dHJhY3R8ZmllbGRmb3JtYXR8ZmllbGRzfGZpZWxkc3VtbWFyeXxmaWxsZG93bnxmaWxsbnVsbHxmaW5kdHlwZXN8Zm9sZGVyaXplfGZvcmVhY2h8Zm9ybWF0fGZyb218Z2F1Z2V8Z2VudGltZXN8Z2VvbXxnZW9tZmlsdGVyfGdlb3N0YXRzfGhlYWR8aGlnaGxpZ2h0fGhpc3Rvcnl8aWNvbmlmeXxpbnB1dHxpbnB1dGNzdnxpbnB1dGxvb2t1cHxpcGxvY2F0aW9ufGpvaW58a21lYW5zfGt2fGt2Zm9ybXxsb2Fkam9ifGxvY2FsaXplfGxvY2Fsb3B8bG9va3VwfG1ha2Vjb250aW51b3VzfG1ha2VtdnxtYWtlcmVzdWx0c3xtYXB8bWNvbGxlY3R8bWV0YWRhdGF8bWV0YXNlYXJjaHxtZXZlbnRjb2xsZWN0fG1zdGF0c3xtdWx0aWt2fG11bHRpc2VhcmNofG12Y29tYmluZXxtdmV4cGFuZHxub212fG91dGxpZXJ8b3V0cHV0Y3N2fG91dHB1dGxvb2t1cHxvdXRwdXR0ZXh0fG92ZXJsYXB8cGl2b3R8cHJlZGljdHxyYW5nZW1hcHxyYXJlfHJlZ2V4fHJlbGV2YW5jeXxyZWx0aW1lfHJlbmFtZXxyZXBsYWNlfHJlc3R8cmV0dXJufHJldmVyc2V8cmV4fHJ0b3JkZXJ8cnVufHNhdmVkc2VhcmNofHNjcmlwdHxzY3J1YnxzZWFyY2h8c2VhcmNodHhufHNlbGZqb2lufHNlbmRlbWFpbHxzZXR8c2V0ZmllbGRzfHNpY2hhcnR8c2lyYXJlfHNpc3RhdHN8c2l0aW1lY2hhcnR8c2l0b3B8c29ydHxzcGF0aHxzdGF0c3xzdHJjYXR8c3RyZWFtc3RhdHN8dGFibGV8dGFnc3x0YWlsfHRpbWVjaGFydHx0aW1ld3JhcHx0b3B8dHJhbnNhY3Rpb258dHJhbnNwb3NlfHRyZW5kbGluZXx0c2NvbGxlY3R8dHN0YXRzfHR5cGVhaGVhZHx0eXBlbGVhcm5lcnx0eXBlcnx1bmlvbnx1bmlxfHVudGFibGV8d2hlcmV8eDExfHhtbGt2fHhtbHVuZXNjYXBlfHhwYXRofHh5c2VyaWVzKVxcYi9pLFxuICAgICdvcGVyYXRvci13b3JkJzoge1xuICAgICAgcGF0dGVybjogL1xcYig/OmFuZHxhc3xieXxub3R8b3J8eG9yKVxcYi9pLFxuICAgICAgYWxpYXM6ICdvcGVyYXRvcidcbiAgICB9LFxuICAgIGZ1bmN0aW9uOiAvXFxiXFx3Kyg/PVxccypcXCgpLyxcbiAgICBwcm9wZXJ0eTogL1xcYlxcdysoPz1cXHMqPSg/IT0pKS8sXG4gICAgZGF0ZToge1xuICAgICAgLy8gTU0vREQvWVlZWSg6SEg6TU06U1MpP1xuICAgICAgcGF0dGVybjogL1xcYlxcZHsxLDJ9XFwvXFxkezEsMn1cXC9cXGR7MSw0fSg/Oig/OjpcXGR7MSwyfSl7M30pP1xcYi8sXG4gICAgICBhbGlhczogJ251bWJlcidcbiAgICB9LFxuICAgIG51bWJlcjogL1xcYlxcZCsoPzpcXC5cXGQrKT9cXGIvLFxuICAgIGJvb2xlYW46IC9cXGIoPzpmfGZhbHNlfHR8dHJ1ZSlcXGIvaSxcbiAgICBvcGVyYXRvcjogL1s8Pj1dPT98Wy0rKi8lfF0vLFxuICAgIHB1bmN0dWF0aW9uOiAvWygpW1xcXSxdL1xuICB9XG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInNwbHVua1NwbCIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwiY29tbWVudCIsInN0cmluZyIsInBhdHRlcm4iLCJncmVlZHkiLCJrZXl3b3JkIiwiYWxpYXMiLCJwcm9wZXJ0eSIsImRhdGUiLCJudW1iZXIiLCJvcGVyYXRvciIsInB1bmN0dWF0aW9uIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/splunk-spl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/sqf.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/sqf.js ***!
  \********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = sqf;\nsqf.displayName = 'sqf';\nsqf.aliases = [];\nfunction sqf(Prism) {\n  Prism.languages.sqf = Prism.languages.extend('clike', {\n    string: {\n      pattern: /\"(?:(?:\"\")?[^\"])*\"(?!\")|'(?:[^'])*'/,\n      greedy: true\n    },\n    keyword: /\\b(?:breakOut|breakTo|call|case|catch|default|do|echo|else|execFSM|execVM|exitWith|for|forEach|forEachMember|forEachMemberAgent|forEachMemberTeam|from|goto|if|nil|preprocessFile|preprocessFileLineNumbers|private|scopeName|spawn|step|switch|then|throw|to|try|while|with)\\b/i,\n    \"boolean\": /\\b(?:false|true)\\b/i,\n    \"function\": /\\b(?:abs|accTime|acos|action|actionIDs|actionKeys|actionKeysImages|actionKeysNames|actionKeysNamesArray|actionName|actionParams|activateAddons|activatedAddons|activateKey|add3DENConnection|add3DENEventHandler|add3DENLayer|addAction|addBackpack|addBackpackCargo|addBackpackCargoGlobal|addBackpackGlobal|addCamShake|addCuratorAddons|addCuratorCameraArea|addCuratorEditableObjects|addCuratorEditingArea|addCuratorPoints|addEditorObject|addEventHandler|addForce|addForceGeneratorRTD|addGoggles|addGroupIcon|addHandgunItem|addHeadgear|addItem|addItemCargo|addItemCargoGlobal|addItemPool|addItemToBackpack|addItemToUniform|addItemToVest|addLiveStats|addMagazine|addMagazineAmmoCargo|addMagazineCargo|addMagazineCargoGlobal|addMagazineGlobal|addMagazinePool|addMagazines|addMagazineTurret|addMenu|addMenuItem|addMissionEventHandler|addMPEventHandler|addMusicEventHandler|addOwnedMine|addPlayerScores|addPrimaryWeaponItem|addPublicVariableEventHandler|addRating|addResources|addScore|addScoreSide|addSecondaryWeaponItem|addSwitchableUnit|addTeamMember|addToRemainsCollector|addTorque|addUniform|addVehicle|addVest|addWaypoint|addWeapon|addWeaponCargo|addWeaponCargoGlobal|addWeaponGlobal|addWeaponItem|addWeaponPool|addWeaponTurret|admin|agent|agents|AGLToASL|aimedAtTarget|aimPos|airDensityCurveRTD|airDensityRTD|airplaneThrottle|airportSide|AISFinishHeal|alive|all3DENEntities|allAirports|allControls|allCurators|allCutLayers|allDead|allDeadMen|allDisplays|allGroups|allMapMarkers|allMines|allMissionObjects|allow3DMode|allowCrewInImmobile|allowCuratorLogicIgnoreAreas|allowDamage|allowDammage|allowFileOperations|allowFleeing|allowGetIn|allowSprint|allPlayers|allSimpleObjects|allSites|allTurrets|allUnits|allUnitsUAV|allVariables|ammo|ammoOnPylon|animate|animateBay|animateDoor|animatePylon|animateSource|animationNames|animationPhase|animationSourcePhase|animationState|append|apply|armoryPoints|arrayIntersect|asin|ASLToAGL|ASLToATL|assert|assignAsCargo|assignAsCargoIndex|assignAsCommander|assignAsDriver|assignAsGunner|assignAsTurret|assignCurator|assignedCargo|assignedCommander|assignedDriver|assignedGunner|assignedItems|assignedTarget|assignedTeam|assignedVehicle|assignedVehicleRole|assignItem|assignTeam|assignToAirport|atan|atan2|atg|ATLToASL|attachedObject|attachedObjects|attachedTo|attachObject|attachTo|attackEnabled|backpack|backpackCargo|backpackContainer|backpackItems|backpackMagazines|backpackSpaceFor|behaviour|benchmark|binocular|blufor|boundingBox|boundingBoxReal|boundingCenter|briefingName|buildingExit|buildingPos|buldozer_EnableRoadDiag|buldozer_IsEnabledRoadDiag|buldozer_LoadNewRoads|buldozer_reloadOperMap|buttonAction|buttonSetAction|cadetMode|callExtension|camCommand|camCommit|camCommitPrepared|camCommitted|camConstuctionSetParams|camCreate|camDestroy|cameraEffect|cameraEffectEnableHUD|cameraInterest|cameraOn|cameraView|campaignConfigFile|camPreload|camPreloaded|camPrepareBank|camPrepareDir|camPrepareDive|camPrepareFocus|camPrepareFov|camPrepareFovRange|camPreparePos|camPrepareRelPos|camPrepareTarget|camSetBank|camSetDir|camSetDive|camSetFocus|camSetFov|camSetFovRange|camSetPos|camSetRelPos|camSetTarget|camTarget|camUseNVG|canAdd|canAddItemToBackpack|canAddItemToUniform|canAddItemToVest|cancelSimpleTaskDestination|canFire|canMove|canSlingLoad|canStand|canSuspend|canTriggerDynamicSimulation|canUnloadInCombat|canVehicleCargo|captive|captiveNum|cbChecked|cbSetChecked|ceil|channelEnabled|cheatsEnabled|checkAIFeature|checkVisibility|civilian|className|clear3DENAttribute|clear3DENInventory|clearAllItemsFromBackpack|clearBackpackCargo|clearBackpackCargoGlobal|clearForcesRTD|clearGroupIcons|clearItemCargo|clearItemCargoGlobal|clearItemPool|clearMagazineCargo|clearMagazineCargoGlobal|clearMagazinePool|clearOverlay|clearRadio|clearVehicleInit|clearWeaponCargo|clearWeaponCargoGlobal|clearWeaponPool|clientOwner|closeDialog|closeDisplay|closeOverlay|collapseObjectTree|collect3DENHistory|collectiveRTD|combatMode|commandArtilleryFire|commandChat|commander|commandFire|commandFollow|commandFSM|commandGetOut|commandingMenu|commandMove|commandRadio|commandStop|commandSuppressiveFire|commandTarget|commandWatch|comment|commitOverlay|compile|compileFinal|completedFSM|composeText|configClasses|configFile|configHierarchy|configName|configNull|configProperties|configSourceAddonList|configSourceMod|configSourceModList|confirmSensorTarget|connectTerminalToUAV|controlNull|controlsGroupCtrl|copyFromClipboard|copyToClipboard|copyWaypoints|cos|count|countEnemy|countFriendly|countSide|countType|countUnknown|create3DENComposition|create3DENEntity|createAgent|createCenter|createDialog|createDiaryLink|createDiaryRecord|createDiarySubject|createDisplay|createGearDialog|createGroup|createGuardedPoint|createLocation|createMarker|createMarkerLocal|createMenu|createMine|createMissionDisplay|createMPCampaignDisplay|createSimpleObject|createSimpleTask|createSite|createSoundSource|createTask|createTeam|createTrigger|createUnit|createVehicle|createVehicleCrew|createVehicleLocal|crew|ctAddHeader|ctAddRow|ctClear|ctCurSel|ctData|ctFindHeaderRows|ctFindRowHeader|ctHeaderControls|ctHeaderCount|ctRemoveHeaders|ctRemoveRows|ctrlActivate|ctrlAddEventHandler|ctrlAngle|ctrlAutoScrollDelay|ctrlAutoScrollRewind|ctrlAutoScrollSpeed|ctrlChecked|ctrlClassName|ctrlCommit|ctrlCommitted|ctrlCreate|ctrlDelete|ctrlEnable|ctrlEnabled|ctrlFade|ctrlHTMLLoaded|ctrlIDC|ctrlIDD|ctrlMapAnimAdd|ctrlMapAnimClear|ctrlMapAnimCommit|ctrlMapAnimDone|ctrlMapCursor|ctrlMapMouseOver|ctrlMapScale|ctrlMapScreenToWorld|ctrlMapWorldToScreen|ctrlModel|ctrlModelDirAndUp|ctrlModelScale|ctrlParent|ctrlParentControlsGroup|ctrlPosition|ctrlRemoveAllEventHandlers|ctrlRemoveEventHandler|ctrlScale|ctrlSetActiveColor|ctrlSetAngle|ctrlSetAutoScrollDelay|ctrlSetAutoScrollRewind|ctrlSetAutoScrollSpeed|ctrlSetBackgroundColor|ctrlSetChecked|ctrlSetDisabledColor|ctrlSetEventHandler|ctrlSetFade|ctrlSetFocus|ctrlSetFont|ctrlSetFontH1|ctrlSetFontH1B|ctrlSetFontH2|ctrlSetFontH2B|ctrlSetFontH3|ctrlSetFontH3B|ctrlSetFontH4|ctrlSetFontH4B|ctrlSetFontH5|ctrlSetFontH5B|ctrlSetFontH6|ctrlSetFontH6B|ctrlSetFontHeight|ctrlSetFontHeightH1|ctrlSetFontHeightH2|ctrlSetFontHeightH3|ctrlSetFontHeightH4|ctrlSetFontHeightH5|ctrlSetFontHeightH6|ctrlSetFontHeightSecondary|ctrlSetFontP|ctrlSetFontPB|ctrlSetFontSecondary|ctrlSetForegroundColor|ctrlSetModel|ctrlSetModelDirAndUp|ctrlSetModelScale|ctrlSetPixelPrecision|ctrlSetPosition|ctrlSetScale|ctrlSetStructuredText|ctrlSetText|ctrlSetTextColor|ctrlSetTextColorSecondary|ctrlSetTextSecondary|ctrlSetTooltip|ctrlSetTooltipColorBox|ctrlSetTooltipColorShade|ctrlSetTooltipColorText|ctrlShow|ctrlShown|ctrlText|ctrlTextHeight|ctrlTextSecondary|ctrlTextWidth|ctrlType|ctrlVisible|ctRowControls|ctRowCount|ctSetCurSel|ctSetData|ctSetHeaderTemplate|ctSetRowTemplate|ctSetValue|ctValue|curatorAddons|curatorCamera|curatorCameraArea|curatorCameraAreaCeiling|curatorCoef|curatorEditableObjects|curatorEditingArea|curatorEditingAreaType|curatorMouseOver|curatorPoints|curatorRegisteredObjects|curatorSelected|curatorWaypointCost|current3DENOperation|currentChannel|currentCommand|currentMagazine|currentMagazineDetail|currentMagazineDetailTurret|currentMagazineTurret|currentMuzzle|currentNamespace|currentTask|currentTasks|currentThrowable|currentVisionMode|currentWaypoint|currentWeapon|currentWeaponMode|currentWeaponTurret|currentZeroing|cursorObject|cursorTarget|customChat|customRadio|cutFadeOut|cutObj|cutRsc|cutText|damage|date|dateToNumber|daytime|deActivateKey|debriefingText|debugFSM|debugLog|deg|delete3DENEntities|deleteAt|deleteCenter|deleteCollection|deleteEditorObject|deleteGroup|deleteGroupWhenEmpty|deleteIdentity|deleteLocation|deleteMarker|deleteMarkerLocal|deleteRange|deleteResources|deleteSite|deleteStatus|deleteTeam|deleteVehicle|deleteVehicleCrew|deleteWaypoint|detach|detectedMines|diag_activeMissionFSMs|diag_activeScripts|diag_activeSQFScripts|diag_activeSQSScripts|diag_captureFrame|diag_captureFrameToFile|diag_captureSlowFrame|diag_codePerformance|diag_drawMode|diag_dynamicSimulationEnd|diag_enable|diag_enabled|diag_fps|diag_fpsMin|diag_frameNo|diag_lightNewLoad|diag_list|diag_log|diag_logSlowFrame|diag_mergeConfigFile|diag_recordTurretLimits|diag_setLightNew|diag_tickTime|diag_toggle|dialog|diarySubjectExists|didJIP|didJIPOwner|difficulty|difficultyEnabled|difficultyEnabledRTD|difficultyOption|direction|directSay|disableAI|disableCollisionWith|disableConversation|disableDebriefingStats|disableMapIndicators|disableNVGEquipment|disableRemoteSensors|disableSerialization|disableTIEquipment|disableUAVConnectability|disableUserInput|displayAddEventHandler|displayCtrl|displayNull|displayParent|displayRemoveAllEventHandlers|displayRemoveEventHandler|displaySetEventHandler|dissolveTeam|distance|distance2D|distanceSqr|distributionRegion|do3DENAction|doArtilleryFire|doFire|doFollow|doFSM|doGetOut|doMove|doorPhase|doStop|doSuppressiveFire|doTarget|doWatch|drawArrow|drawEllipse|drawIcon|drawIcon3D|drawLine|drawLine3D|drawLink|drawLocation|drawPolygon|drawRectangle|drawTriangle|driver|drop|dynamicSimulationDistance|dynamicSimulationDistanceCoef|dynamicSimulationEnabled|dynamicSimulationSystemEnabled|east|edit3DENMissionAttributes|editObject|editorSetEventHandler|effectiveCommander|emptyPositions|enableAI|enableAIFeature|enableAimPrecision|enableAttack|enableAudioFeature|enableAutoStartUpRTD|enableAutoTrimRTD|enableCamShake|enableCaustics|enableChannel|enableCollisionWith|enableCopilot|enableDebriefingStats|enableDiagLegend|enableDynamicSimulation|enableDynamicSimulationSystem|enableEndDialog|enableEngineArtillery|enableEnvironment|enableFatigue|enableGunLights|enableInfoPanelComponent|enableIRLasers|enableMimics|enablePersonTurret|enableRadio|enableReload|enableRopeAttach|enableSatNormalOnDetail|enableSaving|enableSentences|enableSimulation|enableSimulationGlobal|enableStamina|enableStressDamage|enableTeamSwitch|enableTraffic|enableUAVConnectability|enableUAVWaypoints|enableVehicleCargo|enableVehicleSensor|enableWeaponDisassembly|endl|endLoadingScreen|endMission|engineOn|enginesIsOnRTD|enginesPowerRTD|enginesRpmRTD|enginesTorqueRTD|entities|environmentEnabled|estimatedEndServerTime|estimatedTimeLeft|evalObjectArgument|everyBackpack|everyContainer|exec|execEditorScript|exp|expectedDestination|exportJIPMessages|eyeDirection|eyePos|face|faction|fadeMusic|fadeRadio|fadeSound|fadeSpeech|failMission|fillWeaponsFromPool|find|findCover|findDisplay|findEditorObject|findEmptyPosition|findEmptyPositionReady|findIf|findNearestEnemy|finishMissionInit|finite|fire|fireAtTarget|firstBackpack|flag|flagAnimationPhase|flagOwner|flagSide|flagTexture|fleeing|floor|flyInHeight|flyInHeightASL|fog|fogForecast|fogParams|forceAddUniform|forceAtPositionRTD|forcedMap|forceEnd|forceFlagTexture|forceFollowRoad|forceGeneratorRTD|forceMap|forceRespawn|forceSpeed|forceWalk|forceWeaponFire|forceWeatherChange|forgetTarget|format|formation|formationDirection|formationLeader|formationMembers|formationPosition|formationTask|formatText|formLeader|freeLook|fromEditor|fuel|fullCrew|gearIDCAmmoCount|gearSlotAmmoCount|gearSlotData|get3DENActionState|get3DENAttribute|get3DENCamera|get3DENConnections|get3DENEntity|get3DENEntityID|get3DENGrid|get3DENIconsVisible|get3DENLayerEntities|get3DENLinesVisible|get3DENMissionAttribute|get3DENMouseOver|get3DENSelected|getAimingCoef|getAllEnvSoundControllers|getAllHitPointsDamage|getAllOwnedMines|getAllSoundControllers|getAmmoCargo|getAnimAimPrecision|getAnimSpeedCoef|getArray|getArtilleryAmmo|getArtilleryComputerSettings|getArtilleryETA|getAssignedCuratorLogic|getAssignedCuratorUnit|getBackpackCargo|getBleedingRemaining|getBurningValue|getCameraViewDirection|getCargoIndex|getCenterOfMass|getClientState|getClientStateNumber|getCompatiblePylonMagazines|getConnectedUAV|getContainerMaxLoad|getCursorObjectParams|getCustomAimCoef|getDammage|getDescription|getDir|getDirVisual|getDLCAssetsUsage|getDLCAssetsUsageByName|getDLCs|getDLCUsageTime|getEditorCamera|getEditorMode|getEditorObjectScope|getElevationOffset|getEngineTargetRpmRTD|getEnvSoundController|getFatigue|getFieldManualStartPage|getForcedFlagTexture|getFriend|getFSMVariable|getFuelCargo|getGroupIcon|getGroupIconParams|getGroupIcons|getHideFrom|getHit|getHitIndex|getHitPointDamage|getItemCargo|getMagazineCargo|getMarkerColor|getMarkerPos|getMarkerSize|getMarkerType|getMass|getMissionConfig|getMissionConfigValue|getMissionDLCs|getMissionLayerEntities|getMissionLayers|getModelInfo|getMousePosition|getMusicPlayedTime|getNumber|getObjectArgument|getObjectChildren|getObjectDLC|getObjectMaterials|getObjectProxy|getObjectTextures|getObjectType|getObjectViewDistance|getOxygenRemaining|getPersonUsedDLCs|getPilotCameraDirection|getPilotCameraPosition|getPilotCameraRotation|getPilotCameraTarget|getPlateNumber|getPlayerChannel|getPlayerScores|getPlayerUID|getPlayerUIDOld|getPos|getPosASL|getPosASLVisual|getPosASLW|getPosATL|getPosATLVisual|getPosVisual|getPosWorld|getPylonMagazines|getRelDir|getRelPos|getRemoteSensorsDisabled|getRepairCargo|getResolution|getRotorBrakeRTD|getShadowDistance|getShotParents|getSlingLoad|getSoundController|getSoundControllerResult|getSpeed|getStamina|getStatValue|getSuppression|getTerrainGrid|getTerrainHeightASL|getText|getTotalDLCUsageTime|getTrimOffsetRTD|getUnitLoadout|getUnitTrait|getUserMFDText|getUserMFDValue|getVariable|getVehicleCargo|getWeaponCargo|getWeaponSway|getWingsOrientationRTD|getWingsPositionRTD|getWPPos|glanceAt|globalChat|globalRadio|goggles|group|groupChat|groupFromNetId|groupIconSelectable|groupIconsVisible|groupId|groupOwner|groupRadio|groupSelectedUnits|groupSelectUnit|grpNull|gunner|gusts|halt|handgunItems|handgunMagazine|handgunWeapon|handsHit|hasInterface|hasPilotCamera|hasWeapon|hcAllGroups|hcGroupParams|hcLeader|hcRemoveAllGroups|hcRemoveGroup|hcSelected|hcSelectGroup|hcSetGroup|hcShowBar|hcShownBar|headgear|hideBody|hideObject|hideObjectGlobal|hideSelection|hint|hintC|hintCadet|hintSilent|hmd|hostMission|htmlLoad|HUDMovementLevels|humidity|image|importAllGroups|importance|in|inArea|inAreaArray|incapacitatedState|independent|inflame|inflamed|infoPanel|infoPanelComponentEnabled|infoPanelComponents|infoPanels|inGameUISetEventHandler|inheritsFrom|initAmbientLife|inPolygon|inputAction|inRangeOfArtillery|insertEditorObject|intersect|is3DEN|is3DENMultiplayer|isAbleToBreathe|isAgent|isAimPrecisionEnabled|isArray|isAutoHoverOn|isAutonomous|isAutoStartUpEnabledRTD|isAutotest|isAutoTrimOnRTD|isBleeding|isBurning|isClass|isCollisionLightOn|isCopilotEnabled|isDamageAllowed|isDedicated|isDLCAvailable|isEngineOn|isEqualTo|isEqualType|isEqualTypeAll|isEqualTypeAny|isEqualTypeArray|isEqualTypeParams|isFilePatchingEnabled|isFlashlightOn|isFlatEmpty|isForcedWalk|isFormationLeader|isGroupDeletedWhenEmpty|isHidden|isInRemainsCollector|isInstructorFigureEnabled|isIRLaserOn|isKeyActive|isKindOf|isLaserOn|isLightOn|isLocalized|isManualFire|isMarkedForCollection|isMultiplayer|isMultiplayerSolo|isNil|isNull|isNumber|isObjectHidden|isObjectRTD|isOnRoad|isPipEnabled|isPlayer|isRealTime|isRemoteExecuted|isRemoteExecutedJIP|isServer|isShowing3DIcons|isSimpleObject|isSprintAllowed|isStaminaEnabled|isSteamMission|isStreamFriendlyUIEnabled|isStressDamageEnabled|isText|isTouchingGround|isTurnedOut|isTutHintsEnabled|isUAVConnectable|isUAVConnected|isUIContext|isUniformAllowed|isVehicleCargo|isVehicleRadarOn|isVehicleSensorEnabled|isWalking|isWeaponDeployed|isWeaponRested|itemCargo|items|itemsWithMagazines|join|joinAs|joinAsSilent|joinSilent|joinString|kbAddDatabase|kbAddDatabaseTargets|kbAddTopic|kbHasTopic|kbReact|kbRemoveTopic|kbTell|kbWasSaid|keyImage|keyName|knowsAbout|land|landAt|landResult|language|laserTarget|lbAdd|lbClear|lbColor|lbColorRight|lbCurSel|lbData|lbDelete|lbIsSelected|lbPicture|lbPictureRight|lbSelection|lbSetColor|lbSetColorRight|lbSetCurSel|lbSetData|lbSetPicture|lbSetPictureColor|lbSetPictureColorDisabled|lbSetPictureColorSelected|lbSetPictureRight|lbSetPictureRightColor|lbSetPictureRightColorDisabled|lbSetPictureRightColorSelected|lbSetSelectColor|lbSetSelectColorRight|lbSetSelected|lbSetText|lbSetTextRight|lbSetTooltip|lbSetValue|lbSize|lbSort|lbSortByValue|lbText|lbTextRight|lbValue|leader|leaderboardDeInit|leaderboardGetRows|leaderboardInit|leaderboardRequestRowsFriends|leaderboardRequestRowsGlobal|leaderboardRequestRowsGlobalAroundUser|leaderboardsRequestUploadScore|leaderboardsRequestUploadScoreKeepBest|leaderboardState|leaveVehicle|libraryCredits|libraryDisclaimers|lifeState|lightAttachObject|lightDetachObject|lightIsOn|lightnings|limitSpeed|linearConversion|lineBreak|lineIntersects|lineIntersectsObjs|lineIntersectsSurfaces|lineIntersectsWith|linkItem|list|listObjects|listRemoteTargets|listVehicleSensors|ln|lnbAddArray|lnbAddColumn|lnbAddRow|lnbClear|lnbColor|lnbColorRight|lnbCurSelRow|lnbData|lnbDeleteColumn|lnbDeleteRow|lnbGetColumnsPosition|lnbPicture|lnbPictureRight|lnbSetColor|lnbSetColorRight|lnbSetColumnsPos|lnbSetCurSelRow|lnbSetData|lnbSetPicture|lnbSetPictureColor|lnbSetPictureColorRight|lnbSetPictureColorSelected|lnbSetPictureColorSelectedRight|lnbSetPictureRight|lnbSetText|lnbSetTextRight|lnbSetValue|lnbSize|lnbSort|lnbSortByValue|lnbText|lnbTextRight|lnbValue|load|loadAbs|loadBackpack|loadFile|loadGame|loadIdentity|loadMagazine|loadOverlay|loadStatus|loadUniform|loadVest|local|localize|locationNull|locationPosition|lock|lockCameraTo|lockCargo|lockDriver|locked|lockedCargo|lockedDriver|lockedTurret|lockIdentity|lockTurret|lockWP|log|logEntities|logNetwork|logNetworkTerminate|lookAt|lookAtPos|magazineCargo|magazines|magazinesAllTurrets|magazinesAmmo|magazinesAmmoCargo|magazinesAmmoFull|magazinesDetail|magazinesDetailBackpack|magazinesDetailUniform|magazinesDetailVest|magazinesTurret|magazineTurretAmmo|mapAnimAdd|mapAnimClear|mapAnimCommit|mapAnimDone|mapCenterOnCamera|mapGridPosition|markAsFinishedOnSteam|markerAlpha|markerBrush|markerColor|markerDir|markerPos|markerShape|markerSize|markerText|markerType|max|members|menuAction|menuAdd|menuChecked|menuClear|menuCollapse|menuData|menuDelete|menuEnable|menuEnabled|menuExpand|menuHover|menuPicture|menuSetAction|menuSetCheck|menuSetData|menuSetPicture|menuSetValue|menuShortcut|menuShortcutText|menuSize|menuSort|menuText|menuURL|menuValue|min|mineActive|mineDetectedBy|missionConfigFile|missionDifficulty|missionName|missionNamespace|missionStart|missionVersion|modelToWorld|modelToWorldVisual|modelToWorldVisualWorld|modelToWorldWorld|modParams|moonIntensity|moonPhase|morale|move|move3DENCamera|moveInAny|moveInCargo|moveInCommander|moveInDriver|moveInGunner|moveInTurret|moveObjectToEnd|moveOut|moveTime|moveTo|moveToCompleted|moveToFailed|musicVolume|name|nameSound|nearEntities|nearestBuilding|nearestLocation|nearestLocations|nearestLocationWithDubbing|nearestObject|nearestObjects|nearestTerrainObjects|nearObjects|nearObjectsReady|nearRoads|nearSupplies|nearTargets|needReload|netId|netObjNull|newOverlay|nextMenuItemIndex|nextWeatherChange|nMenuItems|numberOfEnginesRTD|numberToDate|objectCurators|objectFromNetId|objectParent|objNull|objStatus|onBriefingGear|onBriefingGroup|onBriefingNotes|onBriefingPlan|onBriefingTeamSwitch|onCommandModeChanged|onDoubleClick|onEachFrame|onGroupIconClick|onGroupIconOverEnter|onGroupIconOverLeave|onHCGroupSelectionChanged|onMapSingleClick|onPlayerConnected|onPlayerDisconnected|onPreloadFinished|onPreloadStarted|onShowNewObject|onTeamSwitch|openCuratorInterface|openDLCPage|openDSInterface|openMap|openSteamApp|openYoutubeVideo|opfor|orderGetIn|overcast|overcastForecast|owner|param|params|parseNumber|parseSimpleArray|parseText|parsingNamespace|particlesQuality|pi|pickWeaponPool|pitch|pixelGrid|pixelGridBase|pixelGridNoUIScale|pixelH|pixelW|playableSlotsNumber|playableUnits|playAction|playActionNow|player|playerRespawnTime|playerSide|playersNumber|playGesture|playMission|playMove|playMoveNow|playMusic|playScriptedMission|playSound|playSound3D|position|positionCameraToWorld|posScreenToWorld|posWorldToScreen|ppEffectAdjust|ppEffectCommit|ppEffectCommitted|ppEffectCreate|ppEffectDestroy|ppEffectEnable|ppEffectEnabled|ppEffectForceInNVG|precision|preloadCamera|preloadObject|preloadSound|preloadTitleObj|preloadTitleRsc|primaryWeapon|primaryWeaponItems|primaryWeaponMagazine|priority|processDiaryLink|processInitCommands|productVersion|profileName|profileNamespace|profileNameSteam|progressLoadingScreen|progressPosition|progressSetPosition|publicVariable|publicVariableClient|publicVariableServer|pushBack|pushBackUnique|putWeaponPool|queryItemsPool|queryMagazinePool|queryWeaponPool|rad|radioChannelAdd|radioChannelCreate|radioChannelRemove|radioChannelSetCallSign|radioChannelSetLabel|radioVolume|rain|rainbow|random|rank|rankId|rating|rectangular|registeredTasks|registerTask|reload|reloadEnabled|remoteControl|remoteExec|remoteExecCall|remoteExecutedOwner|remove3DENConnection|remove3DENEventHandler|remove3DENLayer|removeAction|removeAll3DENEventHandlers|removeAllActions|removeAllAssignedItems|removeAllContainers|removeAllCuratorAddons|removeAllCuratorCameraAreas|removeAllCuratorEditingAreas|removeAllEventHandlers|removeAllHandgunItems|removeAllItems|removeAllItemsWithMagazines|removeAllMissionEventHandlers|removeAllMPEventHandlers|removeAllMusicEventHandlers|removeAllOwnedMines|removeAllPrimaryWeaponItems|removeAllWeapons|removeBackpack|removeBackpackGlobal|removeCuratorAddons|removeCuratorCameraArea|removeCuratorEditableObjects|removeCuratorEditingArea|removeDrawIcon|removeDrawLinks|removeEventHandler|removeFromRemainsCollector|removeGoggles|removeGroupIcon|removeHandgunItem|removeHeadgear|removeItem|removeItemFromBackpack|removeItemFromUniform|removeItemFromVest|removeItems|removeMagazine|removeMagazineGlobal|removeMagazines|removeMagazinesTurret|removeMagazineTurret|removeMenuItem|removeMissionEventHandler|removeMPEventHandler|removeMusicEventHandler|removeOwnedMine|removePrimaryWeaponItem|removeSecondaryWeaponItem|removeSimpleTask|removeSwitchableUnit|removeTeamMember|removeUniform|removeVest|removeWeapon|removeWeaponAttachmentCargo|removeWeaponCargo|removeWeaponGlobal|removeWeaponTurret|reportRemoteTarget|requiredVersion|resetCamShake|resetSubgroupDirection|resistance|resize|resources|respawnVehicle|restartEditorCamera|reveal|revealMine|reverse|reversedMouseY|roadAt|roadsConnectedTo|roleDescription|ropeAttachedObjects|ropeAttachedTo|ropeAttachEnabled|ropeAttachTo|ropeCreate|ropeCut|ropeDestroy|ropeDetach|ropeEndPosition|ropeLength|ropes|ropeUnwind|ropeUnwound|rotorsForcesRTD|rotorsRpmRTD|round|runInitScript|safeZoneH|safeZoneW|safeZoneWAbs|safeZoneX|safeZoneXAbs|safeZoneY|save3DENInventory|saveGame|saveIdentity|saveJoysticks|saveOverlay|saveProfileNamespace|saveStatus|saveVar|savingEnabled|say|say2D|say3D|score|scoreSide|screenshot|screenToWorld|scriptDone|scriptName|scriptNull|scudState|secondaryWeapon|secondaryWeaponItems|secondaryWeaponMagazine|select|selectBestPlaces|selectDiarySubject|selectedEditorObjects|selectEditorObject|selectionNames|selectionPosition|selectLeader|selectMax|selectMin|selectNoPlayer|selectPlayer|selectRandom|selectRandomWeighted|selectWeapon|selectWeaponTurret|sendAUMessage|sendSimpleCommand|sendTask|sendTaskResult|sendUDPMessage|serverCommand|serverCommandAvailable|serverCommandExecutable|serverName|serverTime|set|set3DENAttribute|set3DENAttributes|set3DENGrid|set3DENIconsVisible|set3DENLayer|set3DENLinesVisible|set3DENLogicType|set3DENMissionAttribute|set3DENMissionAttributes|set3DENModelsVisible|set3DENObjectType|set3DENSelected|setAccTime|setActualCollectiveRTD|setAirplaneThrottle|setAirportSide|setAmmo|setAmmoCargo|setAmmoOnPylon|setAnimSpeedCoef|setAperture|setApertureNew|setArmoryPoints|setAttributes|setAutonomous|setBehaviour|setBleedingRemaining|setBrakesRTD|setCameraInterest|setCamShakeDefParams|setCamShakeParams|setCamUseTI|setCaptive|setCenterOfMass|setCollisionLight|setCombatMode|setCompassOscillation|setConvoySeparation|setCuratorCameraAreaCeiling|setCuratorCoef|setCuratorEditingAreaType|setCuratorWaypointCost|setCurrentChannel|setCurrentTask|setCurrentWaypoint|setCustomAimCoef|setCustomWeightRTD|setDamage|setDammage|setDate|setDebriefingText|setDefaultCamera|setDestination|setDetailMapBlendPars|setDir|setDirection|setDrawIcon|setDriveOnPath|setDropInterval|setDynamicSimulationDistance|setDynamicSimulationDistanceCoef|setEditorMode|setEditorObjectScope|setEffectCondition|setEngineRpmRTD|setFace|setFaceAnimation|setFatigue|setFeatureType|setFlagAnimationPhase|setFlagOwner|setFlagSide|setFlagTexture|setFog|setForceGeneratorRTD|setFormation|setFormationTask|setFormDir|setFriend|setFromEditor|setFSMVariable|setFuel|setFuelCargo|setGroupIcon|setGroupIconParams|setGroupIconsSelectable|setGroupIconsVisible|setGroupId|setGroupIdGlobal|setGroupOwner|setGusts|setHideBehind|setHit|setHitIndex|setHitPointDamage|setHorizonParallaxCoef|setHUDMovementLevels|setIdentity|setImportance|setInfoPanel|setLeader|setLightAmbient|setLightAttenuation|setLightBrightness|setLightColor|setLightDayLight|setLightFlareMaxDistance|setLightFlareSize|setLightIntensity|setLightnings|setLightUseFlare|setLocalWindParams|setMagazineTurretAmmo|setMarkerAlpha|setMarkerAlphaLocal|setMarkerBrush|setMarkerBrushLocal|setMarkerColor|setMarkerColorLocal|setMarkerDir|setMarkerDirLocal|setMarkerPos|setMarkerPosLocal|setMarkerShape|setMarkerShapeLocal|setMarkerSize|setMarkerSizeLocal|setMarkerText|setMarkerTextLocal|setMarkerType|setMarkerTypeLocal|setMass|setMimic|setMousePosition|setMusicEffect|setMusicEventHandler|setName|setNameSound|setObjectArguments|setObjectMaterial|setObjectMaterialGlobal|setObjectProxy|setObjectTexture|setObjectTextureGlobal|setObjectViewDistance|setOvercast|setOwner|setOxygenRemaining|setParticleCircle|setParticleClass|setParticleFire|setParticleParams|setParticleRandom|setPilotCameraDirection|setPilotCameraRotation|setPilotCameraTarget|setPilotLight|setPiPEffect|setPitch|setPlateNumber|setPlayable|setPlayerRespawnTime|setPos|setPosASL|setPosASL2|setPosASLW|setPosATL|setPosition|setPosWorld|setPylonLoadOut|setPylonsPriority|setRadioMsg|setRain|setRainbow|setRandomLip|setRank|setRectangular|setRepairCargo|setRotorBrakeRTD|setShadowDistance|setShotParents|setSide|setSimpleTaskAlwaysVisible|setSimpleTaskCustomData|setSimpleTaskDescription|setSimpleTaskDestination|setSimpleTaskTarget|setSimpleTaskType|setSimulWeatherLayers|setSize|setSkill|setSlingLoad|setSoundEffect|setSpeaker|setSpeech|setSpeedMode|setStamina|setStaminaScheme|setStatValue|setSuppression|setSystemOfUnits|setTargetAge|setTaskMarkerOffset|setTaskResult|setTaskState|setTerrainGrid|setText|setTimeMultiplier|setTitleEffect|setToneMapping|setToneMappingParams|setTrafficDensity|setTrafficDistance|setTrafficGap|setTrafficSpeed|setTriggerActivation|setTriggerArea|setTriggerStatements|setTriggerText|setTriggerTimeout|setTriggerType|setType|setUnconscious|setUnitAbility|setUnitLoadout|setUnitPos|setUnitPosWeak|setUnitRank|setUnitRecoilCoefficient|setUnitTrait|setUnloadInCombat|setUserActionText|setUserMFDText|setUserMFDValue|setVariable|setVectorDir|setVectorDirAndUp|setVectorUp|setVehicleAmmo|setVehicleAmmoDef|setVehicleArmor|setVehicleCargo|setVehicleId|setVehicleInit|setVehicleLock|setVehiclePosition|setVehicleRadar|setVehicleReceiveRemoteTargets|setVehicleReportOwnPosition|setVehicleReportRemoteTargets|setVehicleTIPars|setVehicleVarName|setVelocity|setVelocityModelSpace|setVelocityTransformation|setViewDistance|setVisibleIfTreeCollapsed|setWantedRpmRTD|setWaves|setWaypointBehaviour|setWaypointCombatMode|setWaypointCompletionRadius|setWaypointDescription|setWaypointForceBehaviour|setWaypointFormation|setWaypointHousePosition|setWaypointLoiterRadius|setWaypointLoiterType|setWaypointName|setWaypointPosition|setWaypointScript|setWaypointSpeed|setWaypointStatements|setWaypointTimeout|setWaypointType|setWaypointVisible|setWeaponReloadingTime|setWind|setWindDir|setWindForce|setWindStr|setWingForceScaleRTD|setWPPos|show3DIcons|showChat|showCinemaBorder|showCommandingMenu|showCompass|showCuratorCompass|showGPS|showHUD|showLegend|showMap|shownArtilleryComputer|shownChat|shownCompass|shownCuratorCompass|showNewEditorObject|shownGPS|shownHUD|shownMap|shownPad|shownRadio|shownScoretable|shownUAVFeed|shownWarrant|shownWatch|showPad|showRadio|showScoretable|showSubtitles|showUAVFeed|showWarrant|showWatch|showWaypoint|showWaypoints|side|sideAmbientLife|sideChat|sideEmpty|sideEnemy|sideFriendly|sideLogic|sideRadio|sideUnknown|simpleTasks|simulationEnabled|simulCloudDensity|simulCloudOcclusion|simulInClouds|simulWeatherSync|sin|size|sizeOf|skill|skillFinal|skipTime|sleep|sliderPosition|sliderRange|sliderSetPosition|sliderSetRange|sliderSetSpeed|sliderSpeed|slingLoadAssistantShown|soldierMagazines|someAmmo|sort|soundVolume|speaker|speed|speedMode|splitString|sqrt|squadParams|stance|startLoadingScreen|stop|stopEngineRTD|stopped|str|sunOrMoon|supportInfo|suppressFor|surfaceIsWater|surfaceNormal|surfaceType|swimInDepth|switchableUnits|switchAction|switchCamera|switchGesture|switchLight|switchMove|synchronizedObjects|synchronizedTriggers|synchronizedWaypoints|synchronizeObjectsAdd|synchronizeObjectsRemove|synchronizeTrigger|synchronizeWaypoint|systemChat|systemOfUnits|tan|targetKnowledge|targets|targetsAggregate|targetsQuery|taskAlwaysVisible|taskChildren|taskCompleted|taskCustomData|taskDescription|taskDestination|taskHint|taskMarkerOffset|taskNull|taskParent|taskResult|taskState|taskType|teamMember|teamMemberNull|teamName|teams|teamSwitch|teamSwitchEnabled|teamType|terminate|terrainIntersect|terrainIntersectASL|terrainIntersectAtASL|text|textLog|textLogFormat|tg|time|timeMultiplier|titleCut|titleFadeOut|titleObj|titleRsc|titleText|toArray|toFixed|toLower|toString|toUpper|triggerActivated|triggerActivation|triggerArea|triggerAttachedVehicle|triggerAttachObject|triggerAttachVehicle|triggerDynamicSimulation|triggerStatements|triggerText|triggerTimeout|triggerTimeoutCurrent|triggerType|turretLocal|turretOwner|turretUnit|tvAdd|tvClear|tvCollapse|tvCollapseAll|tvCount|tvCurSel|tvData|tvDelete|tvExpand|tvExpandAll|tvPicture|tvPictureRight|tvSetColor|tvSetCurSel|tvSetData|tvSetPicture|tvSetPictureColor|tvSetPictureColorDisabled|tvSetPictureColorSelected|tvSetPictureRight|tvSetPictureRightColor|tvSetPictureRightColorDisabled|tvSetPictureRightColorSelected|tvSetSelectColor|tvSetText|tvSetTooltip|tvSetValue|tvSort|tvSortByValue|tvText|tvTooltip|tvValue|type|typeName|typeOf|UAVControl|uiNamespace|uiSleep|unassignCurator|unassignItem|unassignTeam|unassignVehicle|underwater|uniform|uniformContainer|uniformItems|uniformMagazines|unitAddons|unitAimPosition|unitAimPositionVisual|unitBackpack|unitIsUAV|unitPos|unitReady|unitRecoilCoefficient|units|unitsBelowHeight|unlinkItem|unlockAchievement|unregisterTask|updateDrawIcon|updateMenuItem|updateObjectTree|useAIOperMapObstructionTest|useAISteeringComponent|useAudioTimeForMoves|userInputDisabled|vectorAdd|vectorCos|vectorCrossProduct|vectorDiff|vectorDir|vectorDirVisual|vectorDistance|vectorDistanceSqr|vectorDotProduct|vectorFromTo|vectorMagnitude|vectorMagnitudeSqr|vectorModelToWorld|vectorModelToWorldVisual|vectorMultiply|vectorNormalized|vectorUp|vectorUpVisual|vectorWorldToModel|vectorWorldToModelVisual|vehicle|vehicleCargoEnabled|vehicleChat|vehicleRadio|vehicleReceiveRemoteTargets|vehicleReportOwnPosition|vehicleReportRemoteTargets|vehicles|vehicleVarName|velocity|velocityModelSpace|verifySignature|vest|vestContainer|vestItems|vestMagazines|viewDistance|visibleCompass|visibleGPS|visibleMap|visiblePosition|visiblePositionASL|visibleScoretable|visibleWatch|waitUntil|waves|waypointAttachedObject|waypointAttachedVehicle|waypointAttachObject|waypointAttachVehicle|waypointBehaviour|waypointCombatMode|waypointCompletionRadius|waypointDescription|waypointForceBehaviour|waypointFormation|waypointHousePosition|waypointLoiterRadius|waypointLoiterType|waypointName|waypointPosition|waypoints|waypointScript|waypointsEnabledUAV|waypointShow|waypointSpeed|waypointStatements|waypointTimeout|waypointTimeoutCurrent|waypointType|waypointVisible|weaponAccessories|weaponAccessoriesCargo|weaponCargo|weaponDirection|weaponInertia|weaponLowered|weapons|weaponsItems|weaponsItemsCargo|weaponState|weaponsTurret|weightRTD|west|WFSideText|wind|windDir|windRTD|windStr|wingsForcesRTD|worldName|worldSize|worldToModel|worldToModelVisual|worldToScreen)\\b/i,\n    number: /(?:\\$|\\b0x)[\\da-f]+\\b|(?:\\B\\.\\d+|\\b\\d+(?:\\.\\d+)?)(?:e[+-]?\\d+)?\\b/i,\n    operator: /##|>>|&&|\\|\\||[!=<>]=?|[-+*/%#^]|\\b(?:and|mod|not|or)\\b/i,\n    'magic-variable': {\n      pattern: /\\b(?:this|thisList|thisTrigger|_exception|_fnc_scriptName|_fnc_scriptNameParent|_forEachIndex|_this|_thisEventHandler|_thisFSM|_thisScript|_x)\\b/i,\n      alias: 'keyword'\n    },\n    constant: /\\bDIK(?:_[a-z\\d]+)+\\b/i\n  });\n  Prism.languages.insertBefore('sqf', 'string', {\n    macro: {\n      pattern: /(^[ \\t]*)#[a-z](?:[^\\r\\n\\\\]|\\\\(?:\\r\\n|[\\s\\S]))*/im,\n      lookbehind: true,\n      greedy: true,\n      alias: 'property',\n      inside: {\n        directive: {\n          pattern: /#[a-z]+\\b/i,\n          alias: 'keyword'\n        },\n        comment: Prism.languages.sqf.comment\n      }\n    }\n  });\n  delete Prism.languages.sqf['class-name'];\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/sqf.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/sql.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/sql.js ***!
  \********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = sql;\nsql.displayName = 'sql';\nsql.aliases = [];\nfunction sql(Prism) {\n  Prism.languages.sql = {\n    comment: {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:--|\\/\\/|#).*)/,\n      lookbehind: true\n    },\n    variable: [{\n      pattern: /@([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1/,\n      greedy: true\n    }, /@[\\w.$]+/],\n    string: {\n      pattern: /(^|[^@\\\\])(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\]|\\2\\2)*\\2/,\n      greedy: true,\n      lookbehind: true\n    },\n    identifier: {\n      pattern: /(^|[^@\\\\])`(?:\\\\[\\s\\S]|[^`\\\\]|``)*`/,\n      greedy: true,\n      lookbehind: true,\n      inside: {\n        punctuation: /^`|`$/\n      }\n    },\n    \"function\": /\\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\\s*\\()/i,\n    // Should we highlight user defined functions too?\n    keyword: /\\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:COL|_INSERT)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURN(?:ING|S)?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\\b/i,\n    \"boolean\": /\\b(?:FALSE|NULL|TRUE)\\b/i,\n    number: /\\b0x[\\da-f]+\\b|\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+\\b/i,\n    operator: /[-+*\\/=%^~]|&&?|\\|\\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\\b(?:AND|BETWEEN|DIV|ILIKE|IN|IS|LIKE|NOT|OR|REGEXP|RLIKE|SOUNDS LIKE|XOR)\\b/i,\n    punctuation: /[;[\\]()`,.]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvc3FsLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsR0FBRztBQUNwQkEsR0FBRyxDQUFDQyxXQUFXLEdBQUcsS0FBSztBQUN2QkQsR0FBRyxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNoQixTQUFTRixHQUFHQSxDQUFDRyxLQUFLLEVBQUU7RUFDbEJBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixHQUFHLEdBQUc7SUFDcEJLLE9BQU8sRUFBRTtNQUNQQyxPQUFPLEVBQUUsK0NBQStDO01BQ3hEQyxVQUFVLEVBQUU7SUFDZCxDQUFDO0lBQ0RDLFFBQVEsRUFBRSxDQUNSO01BQ0VGLE9BQU8sRUFBRSxxQ0FBcUM7TUFDOUNHLE1BQU0sRUFBRTtJQUNWLENBQUMsRUFDRCxVQUFVLENBQ1g7SUFDREMsTUFBTSxFQUFFO01BQ05KLE9BQU8sRUFBRSxpREFBaUQ7TUFDMURHLE1BQU0sRUFBRSxJQUFJO01BQ1pGLFVBQVUsRUFBRTtJQUNkLENBQUM7SUFDREksVUFBVSxFQUFFO01BQ1ZMLE9BQU8sRUFBRSxxQ0FBcUM7TUFDOUNHLE1BQU0sRUFBRSxJQUFJO01BQ1pGLFVBQVUsRUFBRSxJQUFJO01BQ2hCSyxNQUFNLEVBQUU7UUFDTkMsV0FBVyxFQUFFO01BQ2Y7SUFDRixDQUFDO0lBQ0QsWUFDRSwyRkFBMkY7SUFDN0Y7SUFDQUMsT0FBTyxFQUNMLHM5RUFBczlFO0lBQ3g5RSxXQUFTLDBCQUEwQjtJQUNuQ0MsTUFBTSxFQUFFLDJDQUEyQztJQUNuREMsUUFBUSxFQUNOLDhIQUE4SDtJQUNoSUgsV0FBVyxFQUFFO0VBQ2YsQ0FBQztBQUNIIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcc3FsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IHNxbFxuc3FsLmRpc3BsYXlOYW1lID0gJ3NxbCdcbnNxbC5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIHNxbChQcmlzbSkge1xuICBQcmlzbS5sYW5ndWFnZXMuc3FsID0ge1xuICAgIGNvbW1lbnQ6IHtcbiAgICAgIHBhdHRlcm46IC8oXnxbXlxcXFxdKSg/OlxcL1xcKltcXHNcXFNdKj9cXCpcXC98KD86LS18XFwvXFwvfCMpLiopLyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICB9LFxuICAgIHZhcmlhYmxlOiBbXG4gICAgICB7XG4gICAgICAgIHBhdHRlcm46IC9AKFtcIidgXSkoPzpcXFxcW1xcc1xcU118KD8hXFwxKVteXFxcXF0pK1xcMS8sXG4gICAgICAgIGdyZWVkeTogdHJ1ZVxuICAgICAgfSxcbiAgICAgIC9AW1xcdy4kXSsvXG4gICAgXSxcbiAgICBzdHJpbmc6IHtcbiAgICAgIHBhdHRlcm46IC8oXnxbXkBcXFxcXSkoXCJ8JykoPzpcXFxcW1xcc1xcU118KD8hXFwyKVteXFxcXF18XFwyXFwyKSpcXDIvLFxuICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgIH0sXG4gICAgaWRlbnRpZmllcjoge1xuICAgICAgcGF0dGVybjogLyhefFteQFxcXFxdKWAoPzpcXFxcW1xcc1xcU118W15gXFxcXF18YGApKmAvLFxuICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGluc2lkZToge1xuICAgICAgICBwdW5jdHVhdGlvbjogL15gfGAkL1xuICAgICAgfVxuICAgIH0sXG4gICAgZnVuY3Rpb246XG4gICAgICAvXFxiKD86QVZHfENPVU5UfEZJUlNUfEZPUk1BVHxMQVNUfExDQVNFfExFTnxNQVh8TUlEfE1JTnxNT0R8Tk9XfFJPVU5EfFNVTXxVQ0FTRSkoPz1cXHMqXFwoKS9pLFxuICAgIC8vIFNob3VsZCB3ZSBoaWdobGlnaHQgdXNlciBkZWZpbmVkIGZ1bmN0aW9ucyB0b28/XG4gICAga2V5d29yZDpcbiAgICAgIC9cXGIoPzpBQ1RJT058QUREfEFGVEVSfEFMR09SSVRITXxBTEx8QUxURVJ8QU5BTFlaRXxBTll8QVBQTFl8QVN8QVNDfEFVVEhPUklaQVRJT058QVVUT19JTkNSRU1FTlR8QkFDS1VQfEJEQnxCRUdJTnxCRVJLRUxFWURCfEJJR0lOVHxCSU5BUll8QklUfEJMT0J8Qk9PTHxCT09MRUFOfEJSRUFLfEJST1dTRXxCVFJFRXxCVUxLfEJZfENBTEx8Q0FTQ0FERUQ/fENBU0V8Q0hBSU58Q0hBUig/OkFDVEVSfFNFVCk/fENIRUNLKD86UE9JTlQpP3xDTE9TRXxDTFVTVEVSRUR8Q09BTEVTQ0V8Q09MTEFURXxDT0xVTU5TP3xDT01NRU5UfENPTU1JVCg/OlRFRCk/fENPTVBVVEV8Q09OTkVDVHxDT05TSVNURU5UfENPTlNUUkFJTlR8Q09OVEFJTlMoPzpUQUJMRSk/fENPTlRJTlVFfENPTlZFUlR8Q1JFQVRFfENST1NTfENVUlJFTlQoPzpfREFURXxfVElNRXxfVElNRVNUQU1QfF9VU0VSKT98Q1VSU09SfENZQ0xFfERBVEEoPzpCQVNFUz8pP3xEQVRFKD86VElNRSk/fERBWXxEQkNDfERFQUxMT0NBVEV8REVDfERFQ0lNQUx8REVDTEFSRXxERUZBVUxUfERFRklORVJ8REVMQVlFRHxERUxFVEV8REVMSU1JVEVSUz98REVOWXxERVNDfERFU0NSSUJFfERFVEVSTUlOSVNUSUN8RElTQUJMRXxESVNDQVJEfERJU0t8RElTVElOQ1R8RElTVElOQ1RST1d8RElTVFJJQlVURUR8RE98RE9VQkxFfERST1B8RFVNTVl8RFVNUCg/OkZJTEUpP3xEVVBMSUNBVEV8RUxTRSg/OklGKT98RU5BQkxFfEVOQ0xPU0VEfEVORHxFTkdJTkV8RU5VTXxFUlJMVkx8RVJST1JTfEVTQ0FQRUQ/fEVYQ0VQVHxFWEVDKD86VVRFKT98RVhJU1RTfEVYSVR8RVhQTEFJTnxFWFRFTkRFRHxGRVRDSHxGSUVMRFN8RklMRXxGSUxMRkFDVE9SfEZJUlNUfEZJWEVEfEZMT0FUfEZPTExPV0lOR3xGT1IoPzogRUFDSCBST1cpP3xGT1JDRXxGT1JFSUdOfEZSRUVURVhUKD86VEFCTEUpP3xGUk9NfEZVTEx8RlVOQ1RJT058R0VPTUVUUlkoPzpDT0xMRUNUSU9OKT98R0xPQkFMfEdPVE98R1JBTlR8R1JPVVB8SEFORExFUnxIQVNIfEhBVklOR3xIT0xETE9DS3xIT1VSfElERU5USVRZKD86Q09MfF9JTlNFUlQpP3xJRnxJR05PUkV8SU1QT1JUfElOREVYfElORklMRXxJTk5FUnxJTk5PREJ8SU5PVVR8SU5TRVJUfElOVHxJTlRFR0VSfElOVEVSU0VDVHxJTlRFUlZBTHxJTlRPfElOVk9LRVJ8SVNPTEFUSU9OfElURVJBVEV8Sk9JTnxLRVlTP3xLSUxMfExBTkdVQUdFfExBU1R8TEVBVkV8TEVGVHxMRVZFTHxMSU1JVHxMSU5FTk98TElORVN8TElORVNUUklOR3xMT0FEfExPQ0FMfExPQ0t8TE9ORyg/OkJMT0J8VEVYVCl8TE9PUHxNQVRDSCg/OkVEKT98TUVESVVNKD86QkxPQnxJTlR8VEVYVCl8TUVSR0V8TUlERExFSU5UfE1JTlVURXxNT0RFfE1PRElGSUVTfE1PRElGWXxNT05USHxNVUxUSSg/OkxJTkVTVFJJTkd8UE9JTlR8UE9MWUdPTil8TkFUSU9OQUx8TkFUVVJBTHxOQ0hBUnxORVhUfE5PfE5PTkNMVVNURVJFRHxOVUxMSUZ8TlVNRVJJQ3xPRkY/fE9GRlNFVFM/fE9OfE9QRU4oPzpEQVRBU09VUkNFfFFVRVJZfFJPV1NFVCk/fE9QVElNSVpFfE9QVElPTig/OkFMTFkpP3xPUkRFUnxPVVQoPzpFUnxGSUxFKT98T1ZFUnxQQVJUSUFMfFBBUlRJVElPTnxQRVJDRU5UfFBJVk9UfFBMQU58UE9JTlR8UE9MWUdPTnxQUkVDRURJTkd8UFJFQ0lTSU9OfFBSRVBBUkV8UFJFVnxQUklNQVJZfFBSSU5UfFBSSVZJTEVHRVN8UFJPQyg/OkVEVVJFKT98UFVCTElDfFBVUkdFfFFVSUNLfFJBSVNFUlJPUnxSRUFEUz98UkVBTHxSRUNPTkZJR1VSRXxSRUZFUkVOQ0VTfFJFTEVBU0V8UkVOQU1FfFJFUEVBVCg/OkFCTEUpP3xSRVBMQUNFfFJFUExJQ0FUSU9OfFJFUVVJUkV8UkVTSUdOQUx8UkVTVE9SRXxSRVNUUklDVHxSRVRVUk4oPzpJTkd8Uyk/fFJFVk9LRXxSSUdIVHxST0xMQkFDS3xST1VUSU5FfFJPVyg/OkNPVU5UfEdVSURDT0x8Uyk/fFJUUkVFfFJVTEV8U0FWRSg/OlBPSU5UKT98U0NIRU1BfFNFQ09ORHxTRUxFQ1R8U0VSSUFMKD86SVpBQkxFKT98U0VTU0lPTig/Ol9VU0VSKT98U0VUKD86VVNFUik/fFNIQVJFfFNIT1d8U0hVVERPV058U0lNUExFfFNNQUxMSU5UfFNOQVBTSE9UfFNPTUV8U09OQU1FfFNRTHxTVEFSVCg/OklORyk/fFNUQVRJU1RJQ1N8U1RBVFVTfFNUUklQRUR8U1lTVEVNX1VTRVJ8VEFCTEVTP3xUQUJMRVNQQUNFfFRFTVAoPzpPUkFSWXxUQUJMRSk/fFRFUk1JTkFURUR8VEVYVCg/OlNJWkUpP3xUSEVOfFRJTUUoPzpTVEFNUCk/fFRJTlkoPzpCTE9CfElOVHxURVhUKXxUT1A/fFRSQU4oPzpTQUNUSU9OUz8pP3xUUklHR0VSfFRSVU5DQVRFfFRTRVFVQUx8VFlQRVM/fFVOQk9VTkRFRHxVTkNPTU1JVFRFRHxVTkRFRklORUR8VU5JT058VU5JUVVFfFVOTE9DS3xVTlBJVk9UfFVOU0lHTkVEfFVQREFURSg/OlRFWFQpP3xVU0FHRXxVU0V8VVNFUnxVU0lOR3xWQUxVRVM/fFZBUig/OkJJTkFSWXxDSEFSfENIQVJBQ1RFUnxZSU5HKXxWSUVXfFdBSVRGT1J8V0FSTklOR1N8V0hFTnxXSEVSRXxXSElMRXxXSVRIKD86IFJPTExVUHxJTik/fFdPUkt8V1JJVEUoPzpURVhUKT98WUVBUilcXGIvaSxcbiAgICBib29sZWFuOiAvXFxiKD86RkFMU0V8TlVMTHxUUlVFKVxcYi9pLFxuICAgIG51bWJlcjogL1xcYjB4W1xcZGEtZl0rXFxifFxcYlxcZCsoPzpcXC5cXGQqKT98XFxCXFwuXFxkK1xcYi9pLFxuICAgIG9wZXJhdG9yOlxuICAgICAgL1stKypcXC89JV5+XXwmJj98XFx8XFx8P3whPT98PCg/Oj0+P3w8fD4pP3w+Wz49XT98XFxiKD86QU5EfEJFVFdFRU58RElWfElMSUtFfElOfElTfExJS0V8Tk9UfE9SfFJFR0VYUHxSTElLRXxTT1VORFMgTElLRXxYT1IpXFxiL2ksXG4gICAgcHVuY3R1YXRpb246IC9bO1tcXF0oKWAsLl0vXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwic3FsIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJjb21tZW50IiwicGF0dGVybiIsImxvb2tiZWhpbmQiLCJ2YXJpYWJsZSIsImdyZWVkeSIsInN0cmluZyIsImlkZW50aWZpZXIiLCJpbnNpZGUiLCJwdW5jdHVhdGlvbiIsImtleXdvcmQiLCJudW1iZXIiLCJvcGVyYXRvciJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/sql.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/squirrel.js":
/*!*************************************************!*\
  !*** ./node_modules/refractor/lang/squirrel.js ***!
  \*************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = squirrel;\nsquirrel.displayName = 'squirrel';\nsquirrel.aliases = [];\nfunction squirrel(Prism) {\n  Prism.languages.squirrel = Prism.languages.extend('clike', {\n    comment: [Prism.languages.clike['comment'][0], {\n      pattern: /(^|[^\\\\:])(?:\\/\\/|#).*/,\n      lookbehind: true,\n      greedy: true\n    }],\n    string: {\n      pattern: /(^|[^\\\\\"'@])(?:@\"(?:[^\"]|\"\")*\"(?!\")|\"(?:[^\\\\\\r\\n\"]|\\\\.)*\")/,\n      lookbehind: true,\n      greedy: true\n    },\n    'class-name': {\n      pattern: /(\\b(?:class|enum|extends|instanceof)\\s+)\\w+(?:\\.\\w+)*/,\n      lookbehind: true,\n      inside: {\n        punctuation: /\\./\n      }\n    },\n    keyword: /\\b(?:__FILE__|__LINE__|base|break|case|catch|class|clone|const|constructor|continue|default|delete|else|enum|extends|for|foreach|function|if|in|instanceof|local|null|resume|return|static|switch|this|throw|try|typeof|while|yield)\\b/,\n    number: /\\b(?:0x[0-9a-fA-F]+|\\d+(?:\\.(?:\\d+|[eE][+-]?\\d+))?)\\b/,\n    operator: /\\+\\+|--|<=>|<[-<]|>>>?|&&?|\\|\\|?|[-+*/%!=<>]=?|[~^]|::?/,\n    punctuation: /[(){}\\[\\],;.]/\n  });\n  Prism.languages.insertBefore('squirrel', 'string', {\n    \"char\": {\n      pattern: /(^|[^\\\\\"'])'(?:[^\\\\']|\\\\(?:[xuU][0-9a-fA-F]{0,8}|[\\s\\S]))'/,\n      lookbehind: true,\n      greedy: true\n    }\n  });\n  Prism.languages.insertBefore('squirrel', 'operator', {\n    'attribute-punctuation': {\n      pattern: /<\\/|\\/>/,\n      alias: 'important'\n    },\n    lambda: {\n      pattern: /@(?=\\()/,\n      alias: 'operator'\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvc3F1aXJyZWwuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxRQUFRO0FBQ3pCQSxRQUFRLENBQUNDLFdBQVcsR0FBRyxVQUFVO0FBQ2pDRCxRQUFRLENBQUNFLE9BQU8sR0FBRyxFQUFFO0FBQ3JCLFNBQVNGLFFBQVFBLENBQUNHLEtBQUssRUFBRTtFQUN2QkEsS0FBSyxDQUFDQyxTQUFTLENBQUNKLFFBQVEsR0FBR0csS0FBSyxDQUFDQyxTQUFTLENBQUNDLE1BQU0sQ0FBQyxPQUFPLEVBQUU7SUFDekRDLE9BQU8sRUFBRSxDQUNQSCxLQUFLLENBQUNDLFNBQVMsQ0FBQ0csS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNuQztNQUNFQyxPQUFPLEVBQUUsd0JBQXdCO01BQ2pDQyxVQUFVLEVBQUUsSUFBSTtNQUNoQkMsTUFBTSxFQUFFO0lBQ1YsQ0FBQyxDQUNGO0lBQ0RDLE1BQU0sRUFBRTtNQUNOSCxPQUFPLEVBQUUsNERBQTREO01BQ3JFQyxVQUFVLEVBQUUsSUFBSTtNQUNoQkMsTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUNELFlBQVksRUFBRTtNQUNaRixPQUFPLEVBQUUsdURBQXVEO01BQ2hFQyxVQUFVLEVBQUUsSUFBSTtNQUNoQkcsTUFBTSxFQUFFO1FBQ05DLFdBQVcsRUFBRTtNQUNmO0lBQ0YsQ0FBQztJQUNEQyxPQUFPLEVBQ0wsd09BQXdPO0lBQzFPQyxNQUFNLEVBQUUsdURBQXVEO0lBQy9EQyxRQUFRLEVBQUUseURBQXlEO0lBQ25FSCxXQUFXLEVBQUU7RUFDZixDQUFDLENBQUM7RUFDRlYsS0FBSyxDQUFDQyxTQUFTLENBQUNhLFlBQVksQ0FBQyxVQUFVLEVBQUUsUUFBUSxFQUFFO0lBQ2pELFFBQU07TUFDSlQsT0FBTyxFQUFFLDREQUE0RDtNQUNyRUMsVUFBVSxFQUFFLElBQUk7TUFDaEJDLE1BQU0sRUFBRTtJQUNWO0VBQ0YsQ0FBQyxDQUFDO0VBQ0ZQLEtBQUssQ0FBQ0MsU0FBUyxDQUFDYSxZQUFZLENBQUMsVUFBVSxFQUFFLFVBQVUsRUFBRTtJQUNuRCx1QkFBdUIsRUFBRTtNQUN2QlQsT0FBTyxFQUFFLFNBQVM7TUFDbEJVLEtBQUssRUFBRTtJQUNULENBQUM7SUFDREMsTUFBTSxFQUFFO01BQ05YLE9BQU8sRUFBRSxTQUFTO01BQ2xCVSxLQUFLLEVBQUU7SUFDVDtFQUNGLENBQUMsQ0FBQztBQUNKIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcc3F1aXJyZWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gc3F1aXJyZWxcbnNxdWlycmVsLmRpc3BsYXlOYW1lID0gJ3NxdWlycmVsJ1xuc3F1aXJyZWwuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBzcXVpcnJlbChQcmlzbSkge1xuICBQcmlzbS5sYW5ndWFnZXMuc3F1aXJyZWwgPSBQcmlzbS5sYW5ndWFnZXMuZXh0ZW5kKCdjbGlrZScsIHtcbiAgICBjb21tZW50OiBbXG4gICAgICBQcmlzbS5sYW5ndWFnZXMuY2xpa2VbJ2NvbW1lbnQnXVswXSxcbiAgICAgIHtcbiAgICAgICAgcGF0dGVybjogLyhefFteXFxcXDpdKSg/OlxcL1xcL3wjKS4qLyxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgICB9XG4gICAgXSxcbiAgICBzdHJpbmc6IHtcbiAgICAgIHBhdHRlcm46IC8oXnxbXlxcXFxcIidAXSkoPzpAXCIoPzpbXlwiXXxcIlwiKSpcIig/IVwiKXxcIig/OlteXFxcXFxcclxcblwiXXxcXFxcLikqXCIpLyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBncmVlZHk6IHRydWVcbiAgICB9LFxuICAgICdjbGFzcy1uYW1lJzoge1xuICAgICAgcGF0dGVybjogLyhcXGIoPzpjbGFzc3xlbnVtfGV4dGVuZHN8aW5zdGFuY2VvZilcXHMrKVxcdysoPzpcXC5cXHcrKSovLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGluc2lkZToge1xuICAgICAgICBwdW5jdHVhdGlvbjogL1xcLi9cbiAgICAgIH1cbiAgICB9LFxuICAgIGtleXdvcmQ6XG4gICAgICAvXFxiKD86X19GSUxFX198X19MSU5FX198YmFzZXxicmVha3xjYXNlfGNhdGNofGNsYXNzfGNsb25lfGNvbnN0fGNvbnN0cnVjdG9yfGNvbnRpbnVlfGRlZmF1bHR8ZGVsZXRlfGVsc2V8ZW51bXxleHRlbmRzfGZvcnxmb3JlYWNofGZ1bmN0aW9ufGlmfGlufGluc3RhbmNlb2Z8bG9jYWx8bnVsbHxyZXN1bWV8cmV0dXJufHN0YXRpY3xzd2l0Y2h8dGhpc3x0aHJvd3x0cnl8dHlwZW9mfHdoaWxlfHlpZWxkKVxcYi8sXG4gICAgbnVtYmVyOiAvXFxiKD86MHhbMC05YS1mQS1GXSt8XFxkKyg/OlxcLig/OlxcZCt8W2VFXVsrLV0/XFxkKykpPylcXGIvLFxuICAgIG9wZXJhdG9yOiAvXFwrXFwrfC0tfDw9Pnw8Wy08XXw+Pj4/fCYmP3xcXHxcXHw/fFstKyovJSE9PD5dPT98W35eXXw6Oj8vLFxuICAgIHB1bmN0dWF0aW9uOiAvWygpe31cXFtcXF0sOy5dL1xuICB9KVxuICBQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdzcXVpcnJlbCcsICdzdHJpbmcnLCB7XG4gICAgY2hhcjoge1xuICAgICAgcGF0dGVybjogLyhefFteXFxcXFwiJ10pJyg/OlteXFxcXCddfFxcXFwoPzpbeHVVXVswLTlhLWZBLUZdezAsOH18W1xcc1xcU10pKScvLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH1cbiAgfSlcbiAgUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgnc3F1aXJyZWwnLCAnb3BlcmF0b3InLCB7XG4gICAgJ2F0dHJpYnV0ZS1wdW5jdHVhdGlvbic6IHtcbiAgICAgIHBhdHRlcm46IC88XFwvfFxcLz4vLFxuICAgICAgYWxpYXM6ICdpbXBvcnRhbnQnXG4gICAgfSxcbiAgICBsYW1iZGE6IHtcbiAgICAgIHBhdHRlcm46IC9AKD89XFwoKS8sXG4gICAgICBhbGlhczogJ29wZXJhdG9yJ1xuICAgIH1cbiAgfSlcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwic3F1aXJyZWwiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImxhbmd1YWdlcyIsImV4dGVuZCIsImNvbW1lbnQiLCJjbGlrZSIsInBhdHRlcm4iLCJsb29rYmVoaW5kIiwiZ3JlZWR5Iiwic3RyaW5nIiwiaW5zaWRlIiwicHVuY3R1YXRpb24iLCJrZXl3b3JkIiwibnVtYmVyIiwib3BlcmF0b3IiLCJpbnNlcnRCZWZvcmUiLCJhbGlhcyIsImxhbWJkYSJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/squirrel.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/stan.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/stan.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = stan;\nstan.displayName = 'stan';\nstan.aliases = [];\nfunction stan(Prism) {\n  ;\n  (function (Prism) {\n    // https://mc-stan.org/docs/2_28/reference-manual/bnf-grammars.html\n    var higherOrderFunctions = /\\b(?:algebra_solver|algebra_solver_newton|integrate_1d|integrate_ode|integrate_ode_bdf|integrate_ode_rk45|map_rect|ode_(?:adams|bdf|ckrk|rk45)(?:_tol)?|ode_adjoint_tol_ctl|reduce_sum|reduce_sum_static)\\b/;\n    Prism.languages.stan = {\n      comment: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/|#(?!include).*/,\n      string: {\n        // String literals can contain spaces and any printable ASCII characters except for \" and \\\n        // https://mc-stan.org/docs/2_24/reference-manual/print-statements-section.html#string-literals\n        pattern: /\"[\\x20\\x21\\x23-\\x5B\\x5D-\\x7E]*\"/,\n        greedy: true\n      },\n      directive: {\n        pattern: /^([ \\t]*)#include\\b.*/m,\n        lookbehind: true,\n        alias: 'property'\n      },\n      'function-arg': {\n        pattern: RegExp('(' + higherOrderFunctions.source + /\\s*\\(\\s*/.source + ')' + /[a-zA-Z]\\w*/.source),\n        lookbehind: true,\n        alias: 'function'\n      },\n      constraint: {\n        pattern: /(\\b(?:int|matrix|real|row_vector|vector)\\s*)<[^<>]*>/,\n        lookbehind: true,\n        inside: {\n          expression: {\n            pattern: /(=\\s*)\\S(?:\\S|\\s+(?!\\s))*?(?=\\s*(?:>$|,\\s*\\w+\\s*=))/,\n            lookbehind: true,\n            inside: null // see below\n          },\n\n          property: /\\b[a-z]\\w*(?=\\s*=)/i,\n          operator: /=/,\n          punctuation: /^<|>$|,/\n        }\n      },\n      keyword: [{\n        pattern: /\\bdata(?=\\s*\\{)|\\b(?:functions|generated|model|parameters|quantities|transformed)\\b/,\n        alias: 'program-block'\n      }, /\\b(?:array|break|cholesky_factor_corr|cholesky_factor_cov|complex|continue|corr_matrix|cov_matrix|data|else|for|if|in|increment_log_prob|int|matrix|ordered|positive_ordered|print|real|reject|return|row_vector|simplex|target|unit_vector|vector|void|while)\\b/,\n      // these are functions that are known to take another function as their first argument.\n      higherOrderFunctions],\n      \"function\": /\\b[a-z]\\w*(?=\\s*\\()/i,\n      number: /(?:\\b\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\B\\.\\d+(?:_\\d+)*)(?:E[+-]?\\d+(?:_\\d+)*)?i?(?!\\w)/i,\n      \"boolean\": /\\b(?:false|true)\\b/,\n      operator: /<-|\\.[*/]=?|\\|\\|?|&&|[!=<>+\\-*/]=?|['^%~?:]/,\n      punctuation: /[()\\[\\]{},;]/\n    };\n    Prism.languages.stan.constraint.inside.expression.inside = Prism.languages.stan;\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvc3Rhbi5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLElBQUk7QUFDckJBLElBQUksQ0FBQ0MsV0FBVyxHQUFHLE1BQU07QUFDekJELElBQUksQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDakIsU0FBU0YsSUFBSUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ25CO0VBQUMsQ0FBQyxVQUFVQSxLQUFLLEVBQUU7SUFDakI7SUFDQSxJQUFJQyxvQkFBb0IsR0FDdEIsNk1BQTZNO0lBQy9NRCxLQUFLLENBQUNFLFNBQVMsQ0FBQ0wsSUFBSSxHQUFHO01BQ3JCTSxPQUFPLEVBQUUsd0NBQXdDO01BQ2pEQyxNQUFNLEVBQUU7UUFDTjtRQUNBO1FBQ0FDLE9BQU8sRUFBRSxpQ0FBaUM7UUFDMUNDLE1BQU0sRUFBRTtNQUNWLENBQUM7TUFDREMsU0FBUyxFQUFFO1FBQ1RGLE9BQU8sRUFBRSx3QkFBd0I7UUFDakNHLFVBQVUsRUFBRSxJQUFJO1FBQ2hCQyxLQUFLLEVBQUU7TUFDVCxDQUFDO01BQ0QsY0FBYyxFQUFFO1FBQ2RKLE9BQU8sRUFBRUssTUFBTSxDQUNiLEdBQUcsR0FDRFQsb0JBQW9CLENBQUNVLE1BQU0sR0FDM0IsVUFBVSxDQUFDQSxNQUFNLEdBQ2pCLEdBQUcsR0FDSCxhQUFhLENBQUNBLE1BQ2xCLENBQUM7UUFDREgsVUFBVSxFQUFFLElBQUk7UUFDaEJDLEtBQUssRUFBRTtNQUNULENBQUM7TUFDREcsVUFBVSxFQUFFO1FBQ1ZQLE9BQU8sRUFBRSxzREFBc0Q7UUFDL0RHLFVBQVUsRUFBRSxJQUFJO1FBQ2hCSyxNQUFNLEVBQUU7VUFDTkMsVUFBVSxFQUFFO1lBQ1ZULE9BQU8sRUFBRSxxREFBcUQ7WUFDOURHLFVBQVUsRUFBRSxJQUFJO1lBQ2hCSyxNQUFNLEVBQUUsSUFBSSxDQUFDO1VBQ2YsQ0FBQzs7VUFDREUsUUFBUSxFQUFFLHFCQUFxQjtVQUMvQkMsUUFBUSxFQUFFLEdBQUc7VUFDYkMsV0FBVyxFQUFFO1FBQ2Y7TUFDRixDQUFDO01BQ0RDLE9BQU8sRUFBRSxDQUNQO1FBQ0ViLE9BQU8sRUFDTCxxRkFBcUY7UUFDdkZJLEtBQUssRUFBRTtNQUNULENBQUMsRUFDRCxrUUFBa1E7TUFBRTtNQUNwUVIsb0JBQW9CLENBQ3JCO01BQ0QsWUFBVSxzQkFBc0I7TUFDaENrQixNQUFNLEVBQ0osNkZBQTZGO01BQy9GLFdBQVMsb0JBQW9CO01BQzdCSCxRQUFRLEVBQUUsNkNBQTZDO01BQ3ZEQyxXQUFXLEVBQUU7SUFDZixDQUFDO0lBQ0RqQixLQUFLLENBQUNFLFNBQVMsQ0FBQ0wsSUFBSSxDQUFDZSxVQUFVLENBQUNDLE1BQU0sQ0FBQ0MsVUFBVSxDQUFDRCxNQUFNLEdBQ3REYixLQUFLLENBQUNFLFNBQVMsQ0FBQ0wsSUFBSTtFQUN4QixDQUFDLEVBQUVHLEtBQUssQ0FBQztBQUNYIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcc3Rhbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBzdGFuXG5zdGFuLmRpc3BsYXlOYW1lID0gJ3N0YW4nXG5zdGFuLmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24gc3RhbihQcmlzbSkge1xuICA7KGZ1bmN0aW9uIChQcmlzbSkge1xuICAgIC8vIGh0dHBzOi8vbWMtc3Rhbi5vcmcvZG9jcy8yXzI4L3JlZmVyZW5jZS1tYW51YWwvYm5mLWdyYW1tYXJzLmh0bWxcbiAgICB2YXIgaGlnaGVyT3JkZXJGdW5jdGlvbnMgPVxuICAgICAgL1xcYig/OmFsZ2VicmFfc29sdmVyfGFsZ2VicmFfc29sdmVyX25ld3RvbnxpbnRlZ3JhdGVfMWR8aW50ZWdyYXRlX29kZXxpbnRlZ3JhdGVfb2RlX2JkZnxpbnRlZ3JhdGVfb2RlX3JrNDV8bWFwX3JlY3R8b2RlXyg/OmFkYW1zfGJkZnxja3JrfHJrNDUpKD86X3RvbCk/fG9kZV9hZGpvaW50X3RvbF9jdGx8cmVkdWNlX3N1bXxyZWR1Y2Vfc3VtX3N0YXRpYylcXGIvXG4gICAgUHJpc20ubGFuZ3VhZ2VzLnN0YW4gPSB7XG4gICAgICBjb21tZW50OiAvXFwvXFwvLip8XFwvXFwqW1xcc1xcU10qP1xcKlxcL3wjKD8haW5jbHVkZSkuKi8sXG4gICAgICBzdHJpbmc6IHtcbiAgICAgICAgLy8gU3RyaW5nIGxpdGVyYWxzIGNhbiBjb250YWluIHNwYWNlcyBhbmQgYW55IHByaW50YWJsZSBBU0NJSSBjaGFyYWN0ZXJzIGV4Y2VwdCBmb3IgXCIgYW5kIFxcXG4gICAgICAgIC8vIGh0dHBzOi8vbWMtc3Rhbi5vcmcvZG9jcy8yXzI0L3JlZmVyZW5jZS1tYW51YWwvcHJpbnQtc3RhdGVtZW50cy1zZWN0aW9uLmh0bWwjc3RyaW5nLWxpdGVyYWxzXG4gICAgICAgIHBhdHRlcm46IC9cIltcXHgyMFxceDIxXFx4MjMtXFx4NUJcXHg1RC1cXHg3RV0qXCIvLFxuICAgICAgICBncmVlZHk6IHRydWVcbiAgICAgIH0sXG4gICAgICBkaXJlY3RpdmU6IHtcbiAgICAgICAgcGF0dGVybjogL14oWyBcXHRdKikjaW5jbHVkZVxcYi4qL20sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGFsaWFzOiAncHJvcGVydHknXG4gICAgICB9LFxuICAgICAgJ2Z1bmN0aW9uLWFyZyc6IHtcbiAgICAgICAgcGF0dGVybjogUmVnRXhwKFxuICAgICAgICAgICcoJyArXG4gICAgICAgICAgICBoaWdoZXJPcmRlckZ1bmN0aW9ucy5zb3VyY2UgK1xuICAgICAgICAgICAgL1xccypcXChcXHMqLy5zb3VyY2UgK1xuICAgICAgICAgICAgJyknICtcbiAgICAgICAgICAgIC9bYS16QS1aXVxcdyovLnNvdXJjZVxuICAgICAgICApLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICBhbGlhczogJ2Z1bmN0aW9uJ1xuICAgICAgfSxcbiAgICAgIGNvbnN0cmFpbnQ6IHtcbiAgICAgICAgcGF0dGVybjogLyhcXGIoPzppbnR8bWF0cml4fHJlYWx8cm93X3ZlY3Rvcnx2ZWN0b3IpXFxzKik8W148Pl0qPi8sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGluc2lkZToge1xuICAgICAgICAgIGV4cHJlc3Npb246IHtcbiAgICAgICAgICAgIHBhdHRlcm46IC8oPVxccyopXFxTKD86XFxTfFxccysoPyFcXHMpKSo/KD89XFxzKig/Oj4kfCxcXHMqXFx3K1xccyo9KSkvLFxuICAgICAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgICAgIGluc2lkZTogbnVsbCAvLyBzZWUgYmVsb3dcbiAgICAgICAgICB9LFxuICAgICAgICAgIHByb3BlcnR5OiAvXFxiW2Etel1cXHcqKD89XFxzKj0pL2ksXG4gICAgICAgICAgb3BlcmF0b3I6IC89LyxcbiAgICAgICAgICBwdW5jdHVhdGlvbjogL148fD4kfCwvXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBrZXl3b3JkOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwYXR0ZXJuOlxuICAgICAgICAgICAgL1xcYmRhdGEoPz1cXHMqXFx7KXxcXGIoPzpmdW5jdGlvbnN8Z2VuZXJhdGVkfG1vZGVsfHBhcmFtZXRlcnN8cXVhbnRpdGllc3x0cmFuc2Zvcm1lZClcXGIvLFxuICAgICAgICAgIGFsaWFzOiAncHJvZ3JhbS1ibG9jaydcbiAgICAgICAgfSxcbiAgICAgICAgL1xcYig/OmFycmF5fGJyZWFrfGNob2xlc2t5X2ZhY3Rvcl9jb3JyfGNob2xlc2t5X2ZhY3Rvcl9jb3Z8Y29tcGxleHxjb250aW51ZXxjb3JyX21hdHJpeHxjb3ZfbWF0cml4fGRhdGF8ZWxzZXxmb3J8aWZ8aW58aW5jcmVtZW50X2xvZ19wcm9ifGludHxtYXRyaXh8b3JkZXJlZHxwb3NpdGl2ZV9vcmRlcmVkfHByaW50fHJlYWx8cmVqZWN0fHJldHVybnxyb3dfdmVjdG9yfHNpbXBsZXh8dGFyZ2V0fHVuaXRfdmVjdG9yfHZlY3Rvcnx2b2lkfHdoaWxlKVxcYi8sIC8vIHRoZXNlIGFyZSBmdW5jdGlvbnMgdGhhdCBhcmUga25vd24gdG8gdGFrZSBhbm90aGVyIGZ1bmN0aW9uIGFzIHRoZWlyIGZpcnN0IGFyZ3VtZW50LlxuICAgICAgICBoaWdoZXJPcmRlckZ1bmN0aW9uc1xuICAgICAgXSxcbiAgICAgIGZ1bmN0aW9uOiAvXFxiW2Etel1cXHcqKD89XFxzKlxcKCkvaSxcbiAgICAgIG51bWJlcjpcbiAgICAgICAgLyg/OlxcYlxcZCsoPzpfXFxkKykqKD86XFwuKD86XFxkKyg/Ol9cXGQrKSopPyk/fFxcQlxcLlxcZCsoPzpfXFxkKykqKSg/OkVbKy1dP1xcZCsoPzpfXFxkKykqKT9pPyg/IVxcdykvaSxcbiAgICAgIGJvb2xlYW46IC9cXGIoPzpmYWxzZXx0cnVlKVxcYi8sXG4gICAgICBvcGVyYXRvcjogLzwtfFxcLlsqL109P3xcXHxcXHw/fCYmfFshPTw+K1xcLSovXT0/fFsnXiV+PzpdLyxcbiAgICAgIHB1bmN0dWF0aW9uOiAvWygpXFxbXFxde30sO10vXG4gICAgfVxuICAgIFByaXNtLmxhbmd1YWdlcy5zdGFuLmNvbnN0cmFpbnQuaW5zaWRlLmV4cHJlc3Npb24uaW5zaWRlID1cbiAgICAgIFByaXNtLmxhbmd1YWdlcy5zdGFuXG4gIH0pKFByaXNtKVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJzdGFuIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJoaWdoZXJPcmRlckZ1bmN0aW9ucyIsImxhbmd1YWdlcyIsImNvbW1lbnQiLCJzdHJpbmciLCJwYXR0ZXJuIiwiZ3JlZWR5IiwiZGlyZWN0aXZlIiwibG9va2JlaGluZCIsImFsaWFzIiwiUmVnRXhwIiwic291cmNlIiwiY29uc3RyYWludCIsImluc2lkZSIsImV4cHJlc3Npb24iLCJwcm9wZXJ0eSIsIm9wZXJhdG9yIiwicHVuY3R1YXRpb24iLCJrZXl3b3JkIiwibnVtYmVyIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/stan.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/stylus.js":
/*!***********************************************!*\
  !*** ./node_modules/refractor/lang/stylus.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = stylus;\nstylus.displayName = 'stylus';\nstylus.aliases = [];\nfunction stylus(Prism) {\n  ;\n  (function (Prism) {\n    var unit = {\n      pattern: /(\\b\\d+)(?:%|[a-z]+)/,\n      lookbehind: true\n    }; // 123 -123 .123 -.123 12.3 -12.3\n    var number = {\n      pattern: /(^|[^\\w.-])-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/,\n      lookbehind: true\n    };\n    var inside = {\n      comment: {\n        pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n        lookbehind: true\n      },\n      url: {\n        pattern: /\\burl\\(([\"']?).*?\\1\\)/i,\n        greedy: true\n      },\n      string: {\n        pattern: /(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,\n        greedy: true\n      },\n      interpolation: null,\n      // See below\n      func: null,\n      // See below\n      important: /\\B!(?:important|optional)\\b/i,\n      keyword: {\n        pattern: /(^|\\s+)(?:(?:else|for|if|return|unless)(?=\\s|$)|@[\\w-]+)/,\n        lookbehind: true\n      },\n      hexcode: /#[\\da-f]{3,6}/i,\n      color: [/\\b(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)\\b/i, {\n        pattern: /\\b(?:hsl|rgb)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:hsl|rgb)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B/i,\n        inside: {\n          unit: unit,\n          number: number,\n          \"function\": /[\\w-]+(?=\\()/,\n          punctuation: /[(),]/\n        }\n      }],\n      entity: /\\\\[\\da-f]{1,8}/i,\n      unit: unit,\n      \"boolean\": /\\b(?:false|true)\\b/,\n      operator: [\n      // We want non-word chars around \"-\" because it is\n      // accepted in property names.\n      /~|[+!\\/%<>?=]=?|[-:]=|\\*[*=]?|\\.{2,3}|&&|\\|\\||\\B-\\B|\\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\\b/],\n      number: number,\n      punctuation: /[{}()\\[\\];:,]/\n    };\n    inside['interpolation'] = {\n      pattern: /\\{[^\\r\\n}:]+\\}/,\n      alias: 'variable',\n      inside: {\n        delimiter: {\n          pattern: /^\\{|\\}$/,\n          alias: 'punctuation'\n        },\n        rest: inside\n      }\n    };\n    inside['func'] = {\n      pattern: /[\\w-]+\\([^)]*\\).*/,\n      inside: {\n        \"function\": /^[^(]+/,\n        rest: inside\n      }\n    };\n    Prism.languages.stylus = {\n      'atrule-declaration': {\n        pattern: /(^[ \\t]*)@.+/m,\n        lookbehind: true,\n        inside: {\n          atrule: /^@[\\w-]+/,\n          rest: inside\n        }\n      },\n      'variable-declaration': {\n        pattern: /(^[ \\t]*)[\\w$-]+\\s*.?=[ \\t]*(?:\\{[^{}]*\\}|\\S.*|$)/m,\n        lookbehind: true,\n        inside: {\n          variable: /^\\S+/,\n          rest: inside\n        }\n      },\n      statement: {\n        pattern: /(^[ \\t]*)(?:else|for|if|return|unless)[ \\t].+/m,\n        lookbehind: true,\n        inside: {\n          keyword: /^\\S+/,\n          rest: inside\n        }\n      },\n      // A property/value pair cannot end with a comma or a brace\n      // It cannot have indented content unless it ended with a semicolon\n      'property-declaration': {\n        pattern: /((?:^|\\{)([ \\t]*))(?:[\\w-]|\\{[^}\\r\\n]+\\})+(?:\\s*:\\s*|[ \\t]+)(?!\\s)[^{\\r\\n]*(?:;|[^{\\r\\n,]$(?!(?:\\r?\\n|\\r)(?:\\{|\\2[ \\t])))/m,\n        lookbehind: true,\n        inside: {\n          property: {\n            pattern: /^[^\\s:]+/,\n            inside: {\n              interpolation: inside.interpolation\n            }\n          },\n          rest: inside\n        }\n      },\n      // A selector can contain parentheses only as part of a pseudo-element\n      // It can span multiple lines.\n      // It must end with a comma or an accolade or have indented content.\n      selector: {\n        pattern: /(^[ \\t]*)(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\)|(?![\\w-]))|\\{[^}\\r\\n]+\\})+)(?:(?:\\r?\\n|\\r)(?:\\1(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\)|(?![\\w-]))|\\{[^}\\r\\n]+\\})+)))*(?:,$|\\{|(?=(?:\\r?\\n|\\r)(?:\\{|\\1[ \\t])))/m,\n        lookbehind: true,\n        inside: {\n          interpolation: inside.interpolation,\n          comment: inside.comment,\n          punctuation: /[{},]/\n        }\n      },\n      func: inside.func,\n      string: inside.string,\n      comment: {\n        pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n        lookbehind: true,\n        greedy: true\n      },\n      interpolation: inside.interpolation,\n      punctuation: /[{}()\\[\\];:.]/\n    };\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/stylus.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/swift.js":
/*!**********************************************!*\
  !*** ./node_modules/refractor/lang/swift.js ***!
  \**********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = swift;\nswift.displayName = 'swift';\nswift.aliases = [];\nfunction swift(Prism) {\n  Prism.languages.swift = {\n    comment: {\n      // Nested comments are supported up to 2 levels\n      pattern: /(^|[^\\\\:])(?:\\/\\/.*|\\/\\*(?:[^/*]|\\/(?!\\*)|\\*(?!\\/)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*\\*\\/)/,\n      lookbehind: true,\n      greedy: true\n    },\n    'string-literal': [\n    // https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html\n    {\n      pattern: RegExp(/(^|[^\"#])/.source + '(?:' +\n      // single-line string\n      /\"(?:\\\\(?:\\((?:[^()]|\\([^()]*\\))*\\)|\\r\\n|[^(])|[^\\\\\\r\\n\"])*\"/.source + '|' +\n      // multi-line string\n      /\"\"\"(?:\\\\(?:\\((?:[^()]|\\([^()]*\\))*\\)|[^(])|[^\\\\\"]|\"(?!\"\"))*\"\"\"/.source + ')' + /(?![\"#])/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /(\\\\\\()(?:[^()]|\\([^()]*\\))*(?=\\))/,\n          lookbehind: true,\n          inside: null // see below\n        },\n\n        'interpolation-punctuation': {\n          pattern: /^\\)|\\\\\\($/,\n          alias: 'punctuation'\n        },\n        punctuation: /\\\\(?=[\\r\\n])/,\n        string: /[\\s\\S]+/\n      }\n    }, {\n      pattern: RegExp(/(^|[^\"#])(#+)/.source + '(?:' +\n      // single-line string\n      /\"(?:\\\\(?:#+\\((?:[^()]|\\([^()]*\\))*\\)|\\r\\n|[^#])|[^\\\\\\r\\n])*?\"/.source + '|' +\n      // multi-line string\n      /\"\"\"(?:\\\\(?:#+\\((?:[^()]|\\([^()]*\\))*\\)|[^#])|[^\\\\])*?\"\"\"/.source + ')' + '\\\\2'),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /(\\\\#+\\()(?:[^()]|\\([^()]*\\))*(?=\\))/,\n          lookbehind: true,\n          inside: null // see below\n        },\n\n        'interpolation-punctuation': {\n          pattern: /^\\)|\\\\#+\\($/,\n          alias: 'punctuation'\n        },\n        string: /[\\s\\S]+/\n      }\n    }],\n    directive: {\n      // directives with conditions\n      pattern: RegExp(/#/.source + '(?:' + (/(?:elseif|if)\\b/.source + '(?:[ \\t]*' +\n      // This regex is a little complex. It's equivalent to this:\n      //   (?:![ \\t]*)?(?:\\b\\w+\\b(?:[ \\t]*<round>)?|<round>)(?:[ \\t]*(?:&&|\\|\\|))?\n      // where <round> is a general parentheses expression.\n      /(?:![ \\t]*)?(?:\\b\\w+\\b(?:[ \\t]*\\((?:[^()]|\\([^()]*\\))*\\))?|\\((?:[^()]|\\([^()]*\\))*\\))(?:[ \\t]*(?:&&|\\|\\|))?/.source + ')+') + '|' + /(?:else|endif)\\b/.source + ')'),\n      alias: 'property',\n      inside: {\n        'directive-name': /^#\\w+/,\n        \"boolean\": /\\b(?:false|true)\\b/,\n        number: /\\b\\d+(?:\\.\\d+)*\\b/,\n        operator: /!|&&|\\|\\||[<>]=?/,\n        punctuation: /[(),]/\n      }\n    },\n    literal: {\n      pattern: /#(?:colorLiteral|column|dsohandle|file(?:ID|Literal|Path)?|function|imageLiteral|line)\\b/,\n      alias: 'constant'\n    },\n    'other-directive': {\n      pattern: /#\\w+\\b/,\n      alias: 'property'\n    },\n    attribute: {\n      pattern: /@\\w+/,\n      alias: 'atrule'\n    },\n    'function-definition': {\n      pattern: /(\\bfunc\\s+)\\w+/,\n      lookbehind: true,\n      alias: 'function'\n    },\n    label: {\n      // https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID141\n      pattern: /\\b(break|continue)\\s+\\w+|\\b[a-zA-Z_]\\w*(?=\\s*:\\s*(?:for|repeat|while)\\b)/,\n      lookbehind: true,\n      alias: 'important'\n    },\n    keyword: /\\b(?:Any|Protocol|Self|Type|actor|as|assignment|associatedtype|associativity|async|await|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic|else|enum|extension|fallthrough|fileprivate|final|for|func|get|guard|higherThan|if|import|in|indirect|infix|init|inout|internal|is|isolated|lazy|left|let|lowerThan|mutating|none|nonisolated|nonmutating|open|operator|optional|override|postfix|precedencegroup|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|set|some|static|struct|subscript|super|switch|throw|throws|try|typealias|unowned|unsafe|var|weak|where|while|willSet)\\b/,\n    \"boolean\": /\\b(?:false|true)\\b/,\n    nil: {\n      pattern: /\\bnil\\b/,\n      alias: 'constant'\n    },\n    'short-argument': /\\$\\d+\\b/,\n    omit: {\n      pattern: /\\b_\\b/,\n      alias: 'keyword'\n    },\n    number: /\\b(?:[\\d_]+(?:\\.[\\de_]+)?|0x[a-f0-9_]+(?:\\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\\b/i,\n    // A class name must start with an upper-case letter and be either 1 letter long or contain a lower-case letter.\n    'class-name': /\\b[A-Z](?:[A-Z_\\d]*[a-z]\\w*)?\\b/,\n    \"function\": /\\b[a-z_]\\w*(?=\\s*\\()/i,\n    constant: /\\b(?:[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\\b/,\n    // Operators are generic in Swift. Developers can even create new operators (e.g. +++).\n    // https://docs.swift.org/swift-book/ReferenceManual/zzSummaryOfTheGrammar.html#ID481\n    // This regex only supports ASCII operators.\n    operator: /[-+*/%=!<>&|^~?]+|\\.[.\\-+*/%=!<>&|^~?]+/,\n    punctuation: /[{}[\\]();,.:\\\\]/\n  };\n  Prism.languages.swift['string-literal'].forEach(function (rule) {\n    rule.inside['interpolation'].inside = Prism.languages.swift;\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/swift.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/systemd.js":
/*!************************************************!*\
  !*** ./node_modules/refractor/lang/systemd.js ***!
  \************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = systemd;\nsystemd.displayName = 'systemd';\nsystemd.aliases = [];\nfunction systemd(Prism) {\n  // https://www.freedesktop.org/software/systemd/man/systemd.syntax.html\n  ;\n  (function (Prism) {\n    var comment = {\n      pattern: /^[;#].*/m,\n      greedy: true\n    };\n    var quotesSource = /\"(?:[^\\r\\n\"\\\\]|\\\\(?:[^\\r]|\\r\\n?))*\"(?!\\S)/.source;\n    Prism.languages.systemd = {\n      comment: comment,\n      section: {\n        pattern: /^\\[[^\\n\\r\\[\\]]*\\](?=[ \\t]*$)/m,\n        greedy: true,\n        inside: {\n          punctuation: /^\\[|\\]$/,\n          'section-name': {\n            pattern: /[\\s\\S]+/,\n            alias: 'selector'\n          }\n        }\n      },\n      key: {\n        pattern: /^[^\\s=]+(?=[ \\t]*=)/m,\n        greedy: true,\n        alias: 'attr-name'\n      },\n      value: {\n        // This pattern is quite complex because of two properties:\n        //  1) Quotes (strings) must be preceded by a space. Since we can't use lookbehinds, we have to \"resolve\"\n        //     the lookbehind. You will see this in the main loop where spaces are handled separately.\n        //  2) Line continuations.\n        //     After line continuations, empty lines and comments are ignored so we have to consume them.\n        pattern: RegExp(/(=[ \\t]*(?!\\s))/.source +\n        // the value either starts with quotes or not\n        '(?:' + quotesSource + '|(?=[^\"\\r\\n]))' +\n        // main loop\n        '(?:' + (/[^\\s\\\\]/.source +\n        // handle spaces separately because of quotes\n        '|' + '[ \\t]+(?:(?![ \\t\"])|' + quotesSource + ')' +\n        // line continuation\n        '|' + /\\\\[\\r\\n]+(?:[#;].*[\\r\\n]+)*(?![#;])/.source) + ')*'),\n        lookbehind: true,\n        greedy: true,\n        alias: 'attr-value',\n        inside: {\n          comment: comment,\n          quoted: {\n            pattern: RegExp(/(^|\\s)/.source + quotesSource),\n            lookbehind: true,\n            greedy: true\n          },\n          punctuation: /\\\\$/m,\n          \"boolean\": {\n            pattern: /^(?:false|no|off|on|true|yes)$/,\n            greedy: true\n          }\n        }\n      },\n      punctuation: /=/\n    };\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvc3lzdGVtZC5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLE9BQU87QUFDeEJBLE9BQU8sQ0FBQ0MsV0FBVyxHQUFHLFNBQVM7QUFDL0JELE9BQU8sQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDcEIsU0FBU0YsT0FBT0EsQ0FBQ0csS0FBSyxFQUFFO0VBQ3RCO0VBQ0E7RUFBQyxDQUFDLFVBQVVBLEtBQUssRUFBRTtJQUNqQixJQUFJQyxPQUFPLEdBQUc7TUFDWkMsT0FBTyxFQUFFLFVBQVU7TUFDbkJDLE1BQU0sRUFBRTtJQUNWLENBQUM7SUFDRCxJQUFJQyxZQUFZLEdBQUcsMkNBQTJDLENBQUNDLE1BQU07SUFDckVMLEtBQUssQ0FBQ00sU0FBUyxDQUFDVCxPQUFPLEdBQUc7TUFDeEJJLE9BQU8sRUFBRUEsT0FBTztNQUNoQk0sT0FBTyxFQUFFO1FBQ1BMLE9BQU8sRUFBRSwrQkFBK0I7UUFDeENDLE1BQU0sRUFBRSxJQUFJO1FBQ1pLLE1BQU0sRUFBRTtVQUNOQyxXQUFXLEVBQUUsU0FBUztVQUN0QixjQUFjLEVBQUU7WUFDZFAsT0FBTyxFQUFFLFNBQVM7WUFDbEJRLEtBQUssRUFBRTtVQUNUO1FBQ0Y7TUFDRixDQUFDO01BQ0RDLEdBQUcsRUFBRTtRQUNIVCxPQUFPLEVBQUUsc0JBQXNCO1FBQy9CQyxNQUFNLEVBQUUsSUFBSTtRQUNaTyxLQUFLLEVBQUU7TUFDVCxDQUFDO01BQ0RFLEtBQUssRUFBRTtRQUNMO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQVYsT0FBTyxFQUFFVyxNQUFNLENBQ2IsaUJBQWlCLENBQUNSLE1BQU07UUFBRztRQUN6QixLQUFLLEdBQ0xELFlBQVksR0FDWixnQkFBZ0I7UUFBRztRQUNuQixLQUFLLElBQ0osU0FBUyxDQUFDQyxNQUFNO1FBQUc7UUFDbEIsR0FBRyxHQUNILHNCQUFzQixHQUN0QkQsWUFBWSxHQUNaLEdBQUc7UUFBRztRQUNOLEdBQUcsR0FDSCxxQ0FBcUMsQ0FBQ0MsTUFBTSxDQUFDLEdBQy9DLElBQ0osQ0FBQztRQUNEUyxVQUFVLEVBQUUsSUFBSTtRQUNoQlgsTUFBTSxFQUFFLElBQUk7UUFDWk8sS0FBSyxFQUFFLFlBQVk7UUFDbkJGLE1BQU0sRUFBRTtVQUNOUCxPQUFPLEVBQUVBLE9BQU87VUFDaEJjLE1BQU0sRUFBRTtZQUNOYixPQUFPLEVBQUVXLE1BQU0sQ0FBQyxRQUFRLENBQUNSLE1BQU0sR0FBR0QsWUFBWSxDQUFDO1lBQy9DVSxVQUFVLEVBQUUsSUFBSTtZQUNoQlgsTUFBTSxFQUFFO1VBQ1YsQ0FBQztVQUNETSxXQUFXLEVBQUUsTUFBTTtVQUNuQixXQUFTO1lBQ1BQLE9BQU8sRUFBRSxnQ0FBZ0M7WUFDekNDLE1BQU0sRUFBRTtVQUNWO1FBQ0Y7TUFDRixDQUFDO01BQ0RNLFdBQVcsRUFBRTtJQUNmLENBQUM7RUFDSCxDQUFDLEVBQUVULEtBQUssQ0FBQztBQUNYIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcc3lzdGVtZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBzeXN0ZW1kXG5zeXN0ZW1kLmRpc3BsYXlOYW1lID0gJ3N5c3RlbWQnXG5zeXN0ZW1kLmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24gc3lzdGVtZChQcmlzbSkge1xuICAvLyBodHRwczovL3d3dy5mcmVlZGVza3RvcC5vcmcvc29mdHdhcmUvc3lzdGVtZC9tYW4vc3lzdGVtZC5zeW50YXguaHRtbFxuICA7KGZ1bmN0aW9uIChQcmlzbSkge1xuICAgIHZhciBjb21tZW50ID0ge1xuICAgICAgcGF0dGVybjogL15bOyNdLiovbSxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH1cbiAgICB2YXIgcXVvdGVzU291cmNlID0gL1wiKD86W15cXHJcXG5cIlxcXFxdfFxcXFwoPzpbXlxccl18XFxyXFxuPykpKlwiKD8hXFxTKS8uc291cmNlXG4gICAgUHJpc20ubGFuZ3VhZ2VzLnN5c3RlbWQgPSB7XG4gICAgICBjb21tZW50OiBjb21tZW50LFxuICAgICAgc2VjdGlvbjoge1xuICAgICAgICBwYXR0ZXJuOiAvXlxcW1teXFxuXFxyXFxbXFxdXSpcXF0oPz1bIFxcdF0qJCkvbSxcbiAgICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICBwdW5jdHVhdGlvbjogL15cXFt8XFxdJC8sXG4gICAgICAgICAgJ3NlY3Rpb24tbmFtZSc6IHtcbiAgICAgICAgICAgIHBhdHRlcm46IC9bXFxzXFxTXSsvLFxuICAgICAgICAgICAgYWxpYXM6ICdzZWxlY3RvcidcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBrZXk6IHtcbiAgICAgICAgcGF0dGVybjogL15bXlxccz1dKyg/PVsgXFx0XSo9KS9tLFxuICAgICAgICBncmVlZHk6IHRydWUsXG4gICAgICAgIGFsaWFzOiAnYXR0ci1uYW1lJ1xuICAgICAgfSxcbiAgICAgIHZhbHVlOiB7XG4gICAgICAgIC8vIFRoaXMgcGF0dGVybiBpcyBxdWl0ZSBjb21wbGV4IGJlY2F1c2Ugb2YgdHdvIHByb3BlcnRpZXM6XG4gICAgICAgIC8vICAxKSBRdW90ZXMgKHN0cmluZ3MpIG11c3QgYmUgcHJlY2VkZWQgYnkgYSBzcGFjZS4gU2luY2Ugd2UgY2FuJ3QgdXNlIGxvb2tiZWhpbmRzLCB3ZSBoYXZlIHRvIFwicmVzb2x2ZVwiXG4gICAgICAgIC8vICAgICB0aGUgbG9va2JlaGluZC4gWW91IHdpbGwgc2VlIHRoaXMgaW4gdGhlIG1haW4gbG9vcCB3aGVyZSBzcGFjZXMgYXJlIGhhbmRsZWQgc2VwYXJhdGVseS5cbiAgICAgICAgLy8gIDIpIExpbmUgY29udGludWF0aW9ucy5cbiAgICAgICAgLy8gICAgIEFmdGVyIGxpbmUgY29udGludWF0aW9ucywgZW1wdHkgbGluZXMgYW5kIGNvbW1lbnRzIGFyZSBpZ25vcmVkIHNvIHdlIGhhdmUgdG8gY29uc3VtZSB0aGVtLlxuICAgICAgICBwYXR0ZXJuOiBSZWdFeHAoXG4gICAgICAgICAgLyg9WyBcXHRdKig/IVxccykpLy5zb3VyY2UgKyAvLyB0aGUgdmFsdWUgZWl0aGVyIHN0YXJ0cyB3aXRoIHF1b3RlcyBvciBub3RcbiAgICAgICAgICAgICcoPzonICtcbiAgICAgICAgICAgIHF1b3Rlc1NvdXJjZSArXG4gICAgICAgICAgICAnfCg/PVteXCJcXHJcXG5dKSknICsgLy8gbWFpbiBsb29wXG4gICAgICAgICAgICAnKD86JyArXG4gICAgICAgICAgICAoL1teXFxzXFxcXF0vLnNvdXJjZSArIC8vIGhhbmRsZSBzcGFjZXMgc2VwYXJhdGVseSBiZWNhdXNlIG9mIHF1b3Rlc1xuICAgICAgICAgICAgICAnfCcgK1xuICAgICAgICAgICAgICAnWyBcXHRdKyg/Oig/IVsgXFx0XCJdKXwnICtcbiAgICAgICAgICAgICAgcXVvdGVzU291cmNlICtcbiAgICAgICAgICAgICAgJyknICsgLy8gbGluZSBjb250aW51YXRpb25cbiAgICAgICAgICAgICAgJ3wnICtcbiAgICAgICAgICAgICAgL1xcXFxbXFxyXFxuXSsoPzpbIztdLipbXFxyXFxuXSspKig/IVsjO10pLy5zb3VyY2UpICtcbiAgICAgICAgICAgICcpKidcbiAgICAgICAgKSxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgICBhbGlhczogJ2F0dHItdmFsdWUnLFxuICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICBjb21tZW50OiBjb21tZW50LFxuICAgICAgICAgIHF1b3RlZDoge1xuICAgICAgICAgICAgcGF0dGVybjogUmVnRXhwKC8oXnxcXHMpLy5zb3VyY2UgKyBxdW90ZXNTb3VyY2UpLFxuICAgICAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgICAgIGdyZWVkeTogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgcHVuY3R1YXRpb246IC9cXFxcJC9tLFxuICAgICAgICAgIGJvb2xlYW46IHtcbiAgICAgICAgICAgIHBhdHRlcm46IC9eKD86ZmFsc2V8bm98b2ZmfG9ufHRydWV8eWVzKSQvLFxuICAgICAgICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcHVuY3R1YXRpb246IC89L1xuICAgIH1cbiAgfSkoUHJpc20pXG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInN5c3RlbWQiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImNvbW1lbnQiLCJwYXR0ZXJuIiwiZ3JlZWR5IiwicXVvdGVzU291cmNlIiwic291cmNlIiwibGFuZ3VhZ2VzIiwic2VjdGlvbiIsImluc2lkZSIsInB1bmN0dWF0aW9uIiwiYWxpYXMiLCJrZXkiLCJ2YWx1ZSIsIlJlZ0V4cCIsImxvb2tiZWhpbmQiLCJxdW90ZWQiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/systemd.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/t4-cs.js":
/*!**********************************************!*\
  !*** ./node_modules/refractor/lang/t4-cs.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar refractorT4Templating = __webpack_require__(/*! ./t4-templating.js */ \"(ssr)/./node_modules/refractor/lang/t4-templating.js\");\nvar refractorCsharp = __webpack_require__(/*! ./csharp.js */ \"(ssr)/./node_modules/refractor/lang/csharp.js\");\nmodule.exports = t4Cs;\nt4Cs.displayName = 't4Cs';\nt4Cs.aliases = [];\nfunction t4Cs(Prism) {\n  Prism.register(refractorT4Templating);\n  Prism.register(refractorCsharp);\n  Prism.languages.t4 = Prism.languages['t4-cs'] = Prism.languages['t4-templating'].createT4('csharp');\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvdDQtY3MuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBQ1osSUFBSUEscUJBQXFCLEdBQUdDLG1CQUFPLENBQUMsZ0ZBQW9CLENBQUM7QUFDekQsSUFBSUMsZUFBZSxHQUFHRCxtQkFBTyxDQUFDLGtFQUFhLENBQUM7QUFDNUNFLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxJQUFJO0FBQ3JCQSxJQUFJLENBQUNDLFdBQVcsR0FBRyxNQUFNO0FBQ3pCRCxJQUFJLENBQUNFLE9BQU8sR0FBRyxFQUFFO0FBQ2pCLFNBQVNGLElBQUlBLENBQUNHLEtBQUssRUFBRTtFQUNuQkEsS0FBSyxDQUFDQyxRQUFRLENBQUNULHFCQUFxQixDQUFDO0VBQ3JDUSxLQUFLLENBQUNDLFFBQVEsQ0FBQ1AsZUFBZSxDQUFDO0VBQy9CTSxLQUFLLENBQUNFLFNBQVMsQ0FBQ0MsRUFBRSxHQUFHSCxLQUFLLENBQUNFLFNBQVMsQ0FBQyxPQUFPLENBQUMsR0FDM0NGLEtBQUssQ0FBQ0UsU0FBUyxDQUFDLGVBQWUsQ0FBQyxDQUFDRSxRQUFRLENBQUMsUUFBUSxDQUFDO0FBQ3ZEIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcdDQtY3MuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG52YXIgcmVmcmFjdG9yVDRUZW1wbGF0aW5nID0gcmVxdWlyZSgnLi90NC10ZW1wbGF0aW5nLmpzJylcbnZhciByZWZyYWN0b3JDc2hhcnAgPSByZXF1aXJlKCcuL2NzaGFycC5qcycpXG5tb2R1bGUuZXhwb3J0cyA9IHQ0Q3NcbnQ0Q3MuZGlzcGxheU5hbWUgPSAndDRDcydcbnQ0Q3MuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiB0NENzKFByaXNtKSB7XG4gIFByaXNtLnJlZ2lzdGVyKHJlZnJhY3RvclQ0VGVtcGxhdGluZylcbiAgUHJpc20ucmVnaXN0ZXIocmVmcmFjdG9yQ3NoYXJwKVxuICBQcmlzbS5sYW5ndWFnZXMudDQgPSBQcmlzbS5sYW5ndWFnZXNbJ3Q0LWNzJ10gPVxuICAgIFByaXNtLmxhbmd1YWdlc1sndDQtdGVtcGxhdGluZyddLmNyZWF0ZVQ0KCdjc2hhcnAnKVxufVxuIl0sIm5hbWVzIjpbInJlZnJhY3RvclQ0VGVtcGxhdGluZyIsInJlcXVpcmUiLCJyZWZyYWN0b3JDc2hhcnAiLCJtb2R1bGUiLCJleHBvcnRzIiwidDRDcyIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwicmVnaXN0ZXIiLCJsYW5ndWFnZXMiLCJ0NCIsImNyZWF0ZVQ0Il0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/t4-cs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/t4-templating.js":
/*!******************************************************!*\
  !*** ./node_modules/refractor/lang/t4-templating.js ***!
  \******************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = t4Templating;\nt4Templating.displayName = 't4Templating';\nt4Templating.aliases = [];\nfunction t4Templating(Prism) {\n  ;\n  (function (Prism) {\n    function createBlock(prefix, inside, contentAlias) {\n      return {\n        pattern: RegExp('<#' + prefix + '[\\\\s\\\\S]*?#>'),\n        alias: 'block',\n        inside: {\n          delimiter: {\n            pattern: RegExp('^<#' + prefix + '|#>$'),\n            alias: 'important'\n          },\n          content: {\n            pattern: /[\\s\\S]+/,\n            inside: inside,\n            alias: contentAlias\n          }\n        }\n      };\n    }\n    function createT4(insideLang) {\n      var grammar = Prism.languages[insideLang];\n      var className = 'language-' + insideLang;\n      return {\n        block: {\n          pattern: /<#[\\s\\S]+?#>/,\n          inside: {\n            directive: createBlock('@', {\n              'attr-value': {\n                pattern: /=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+)/,\n                inside: {\n                  punctuation: /^=|^[\"']|[\"']$/\n                }\n              },\n              keyword: /\\b\\w+(?=\\s)/,\n              'attr-name': /\\b\\w+/\n            }),\n            expression: createBlock('=', grammar, className),\n            'class-feature': createBlock('\\\\+', grammar, className),\n            standard: createBlock('', grammar, className)\n          }\n        }\n      };\n    }\n    Prism.languages['t4-templating'] = Object.defineProperty({}, 'createT4', {\n      value: createT4\n    });\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvdDQtdGVtcGxhdGluZy5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLFlBQVk7QUFDN0JBLFlBQVksQ0FBQ0MsV0FBVyxHQUFHLGNBQWM7QUFDekNELFlBQVksQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDekIsU0FBU0YsWUFBWUEsQ0FBQ0csS0FBSyxFQUFFO0VBQzNCO0VBQUMsQ0FBQyxVQUFVQSxLQUFLLEVBQUU7SUFDakIsU0FBU0MsV0FBV0EsQ0FBQ0MsTUFBTSxFQUFFQyxNQUFNLEVBQUVDLFlBQVksRUFBRTtNQUNqRCxPQUFPO1FBQ0xDLE9BQU8sRUFBRUMsTUFBTSxDQUFDLElBQUksR0FBR0osTUFBTSxHQUFHLGNBQWMsQ0FBQztRQUMvQ0ssS0FBSyxFQUFFLE9BQU87UUFDZEosTUFBTSxFQUFFO1VBQ05LLFNBQVMsRUFBRTtZQUNUSCxPQUFPLEVBQUVDLE1BQU0sQ0FBQyxLQUFLLEdBQUdKLE1BQU0sR0FBRyxNQUFNLENBQUM7WUFDeENLLEtBQUssRUFBRTtVQUNULENBQUM7VUFDREUsT0FBTyxFQUFFO1lBQ1BKLE9BQU8sRUFBRSxTQUFTO1lBQ2xCRixNQUFNLEVBQUVBLE1BQU07WUFDZEksS0FBSyxFQUFFSDtVQUNUO1FBQ0Y7TUFDRixDQUFDO0lBQ0g7SUFDQSxTQUFTTSxRQUFRQSxDQUFDQyxVQUFVLEVBQUU7TUFDNUIsSUFBSUMsT0FBTyxHQUFHWixLQUFLLENBQUNhLFNBQVMsQ0FBQ0YsVUFBVSxDQUFDO01BQ3pDLElBQUlHLFNBQVMsR0FBRyxXQUFXLEdBQUdILFVBQVU7TUFDeEMsT0FBTztRQUNMSSxLQUFLLEVBQUU7VUFDTFYsT0FBTyxFQUFFLGNBQWM7VUFDdkJGLE1BQU0sRUFBRTtZQUNOYSxTQUFTLEVBQUVmLFdBQVcsQ0FBQyxHQUFHLEVBQUU7Y0FDMUIsWUFBWSxFQUFFO2dCQUNaSSxPQUFPLEVBQUUsa0RBQWtEO2dCQUMzREYsTUFBTSxFQUFFO2tCQUNOYyxXQUFXLEVBQUU7Z0JBQ2Y7Y0FDRixDQUFDO2NBQ0RDLE9BQU8sRUFBRSxhQUFhO2NBQ3RCLFdBQVcsRUFBRTtZQUNmLENBQUMsQ0FBQztZQUNGQyxVQUFVLEVBQUVsQixXQUFXLENBQUMsR0FBRyxFQUFFVyxPQUFPLEVBQUVFLFNBQVMsQ0FBQztZQUNoRCxlQUFlLEVBQUViLFdBQVcsQ0FBQyxLQUFLLEVBQUVXLE9BQU8sRUFBRUUsU0FBUyxDQUFDO1lBQ3ZETSxRQUFRLEVBQUVuQixXQUFXLENBQUMsRUFBRSxFQUFFVyxPQUFPLEVBQUVFLFNBQVM7VUFDOUM7UUFDRjtNQUNGLENBQUM7SUFDSDtJQUNBZCxLQUFLLENBQUNhLFNBQVMsQ0FBQyxlQUFlLENBQUMsR0FBR1EsTUFBTSxDQUFDQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUUsVUFBVSxFQUFFO01BQ3ZFQyxLQUFLLEVBQUViO0lBQ1QsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxFQUFFVixLQUFLLENBQUM7QUFDWCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXHQ0LXRlbXBsYXRpbmcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gdDRUZW1wbGF0aW5nXG50NFRlbXBsYXRpbmcuZGlzcGxheU5hbWUgPSAndDRUZW1wbGF0aW5nJ1xudDRUZW1wbGF0aW5nLmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24gdDRUZW1wbGF0aW5nKFByaXNtKSB7XG4gIDsoZnVuY3Rpb24gKFByaXNtKSB7XG4gICAgZnVuY3Rpb24gY3JlYXRlQmxvY2socHJlZml4LCBpbnNpZGUsIGNvbnRlbnRBbGlhcykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGF0dGVybjogUmVnRXhwKCc8IycgKyBwcmVmaXggKyAnW1xcXFxzXFxcXFNdKj8jPicpLFxuICAgICAgICBhbGlhczogJ2Jsb2NrJyxcbiAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgZGVsaW1pdGVyOiB7XG4gICAgICAgICAgICBwYXR0ZXJuOiBSZWdFeHAoJ148IycgKyBwcmVmaXggKyAnfCM+JCcpLFxuICAgICAgICAgICAgYWxpYXM6ICdpbXBvcnRhbnQnXG4gICAgICAgICAgfSxcbiAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICBwYXR0ZXJuOiAvW1xcc1xcU10rLyxcbiAgICAgICAgICAgIGluc2lkZTogaW5zaWRlLFxuICAgICAgICAgICAgYWxpYXM6IGNvbnRlbnRBbGlhc1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBjcmVhdGVUNChpbnNpZGVMYW5nKSB7XG4gICAgICB2YXIgZ3JhbW1hciA9IFByaXNtLmxhbmd1YWdlc1tpbnNpZGVMYW5nXVxuICAgICAgdmFyIGNsYXNzTmFtZSA9ICdsYW5ndWFnZS0nICsgaW5zaWRlTGFuZ1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYmxvY2s6IHtcbiAgICAgICAgICBwYXR0ZXJuOiAvPCNbXFxzXFxTXSs/Iz4vLFxuICAgICAgICAgIGluc2lkZToge1xuICAgICAgICAgICAgZGlyZWN0aXZlOiBjcmVhdGVCbG9jaygnQCcsIHtcbiAgICAgICAgICAgICAgJ2F0dHItdmFsdWUnOiB7XG4gICAgICAgICAgICAgICAgcGF0dGVybjogLz0oPzooXCJ8JykoPzpcXFxcW1xcc1xcU118KD8hXFwxKVteXFxcXF0pKlxcMXxbXlxccydcIj49XSspLyxcbiAgICAgICAgICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICAgICAgICAgIHB1bmN0dWF0aW9uOiAvXj18XltcIiddfFtcIiddJC9cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGtleXdvcmQ6IC9cXGJcXHcrKD89XFxzKS8sXG4gICAgICAgICAgICAgICdhdHRyLW5hbWUnOiAvXFxiXFx3Ky9cbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgZXhwcmVzc2lvbjogY3JlYXRlQmxvY2soJz0nLCBncmFtbWFyLCBjbGFzc05hbWUpLFxuICAgICAgICAgICAgJ2NsYXNzLWZlYXR1cmUnOiBjcmVhdGVCbG9jaygnXFxcXCsnLCBncmFtbWFyLCBjbGFzc05hbWUpLFxuICAgICAgICAgICAgc3RhbmRhcmQ6IGNyZWF0ZUJsb2NrKCcnLCBncmFtbWFyLCBjbGFzc05hbWUpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIFByaXNtLmxhbmd1YWdlc1sndDQtdGVtcGxhdGluZyddID0gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnY3JlYXRlVDQnLCB7XG4gICAgICB2YWx1ZTogY3JlYXRlVDRcbiAgICB9KVxuICB9KShQcmlzbSlcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwidDRUZW1wbGF0aW5nIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJjcmVhdGVCbG9jayIsInByZWZpeCIsImluc2lkZSIsImNvbnRlbnRBbGlhcyIsInBhdHRlcm4iLCJSZWdFeHAiLCJhbGlhcyIsImRlbGltaXRlciIsImNvbnRlbnQiLCJjcmVhdGVUNCIsImluc2lkZUxhbmciLCJncmFtbWFyIiwibGFuZ3VhZ2VzIiwiY2xhc3NOYW1lIiwiYmxvY2siLCJkaXJlY3RpdmUiLCJwdW5jdHVhdGlvbiIsImtleXdvcmQiLCJleHByZXNzaW9uIiwic3RhbmRhcmQiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/t4-templating.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/t4-vb.js":
/*!**********************************************!*\
  !*** ./node_modules/refractor/lang/t4-vb.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar refractorT4Templating = __webpack_require__(/*! ./t4-templating.js */ \"(ssr)/./node_modules/refractor/lang/t4-templating.js\");\nvar refractorVbnet = __webpack_require__(/*! ./vbnet.js */ \"(ssr)/./node_modules/refractor/lang/vbnet.js\");\nmodule.exports = t4Vb;\nt4Vb.displayName = 't4Vb';\nt4Vb.aliases = [];\nfunction t4Vb(Prism) {\n  Prism.register(refractorT4Templating);\n  Prism.register(refractorVbnet);\n  Prism.languages['t4-vb'] = Prism.languages['t4-templating'].createT4('vbnet');\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvdDQtdmIuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBQ1osSUFBSUEscUJBQXFCLEdBQUdDLG1CQUFPLENBQUMsZ0ZBQW9CLENBQUM7QUFDekQsSUFBSUMsY0FBYyxHQUFHRCxtQkFBTyxDQUFDLGdFQUFZLENBQUM7QUFDMUNFLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxJQUFJO0FBQ3JCQSxJQUFJLENBQUNDLFdBQVcsR0FBRyxNQUFNO0FBQ3pCRCxJQUFJLENBQUNFLE9BQU8sR0FBRyxFQUFFO0FBQ2pCLFNBQVNGLElBQUlBLENBQUNHLEtBQUssRUFBRTtFQUNuQkEsS0FBSyxDQUFDQyxRQUFRLENBQUNULHFCQUFxQixDQUFDO0VBQ3JDUSxLQUFLLENBQUNDLFFBQVEsQ0FBQ1AsY0FBYyxDQUFDO0VBQzlCTSxLQUFLLENBQUNFLFNBQVMsQ0FBQyxPQUFPLENBQUMsR0FBR0YsS0FBSyxDQUFDRSxTQUFTLENBQUMsZUFBZSxDQUFDLENBQUNDLFFBQVEsQ0FBQyxPQUFPLENBQUM7QUFDL0UiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFx0NC12Yi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcbnZhciByZWZyYWN0b3JUNFRlbXBsYXRpbmcgPSByZXF1aXJlKCcuL3Q0LXRlbXBsYXRpbmcuanMnKVxudmFyIHJlZnJhY3RvclZibmV0ID0gcmVxdWlyZSgnLi92Ym5ldC5qcycpXG5tb2R1bGUuZXhwb3J0cyA9IHQ0VmJcbnQ0VmIuZGlzcGxheU5hbWUgPSAndDRWYidcbnQ0VmIuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiB0NFZiKFByaXNtKSB7XG4gIFByaXNtLnJlZ2lzdGVyKHJlZnJhY3RvclQ0VGVtcGxhdGluZylcbiAgUHJpc20ucmVnaXN0ZXIocmVmcmFjdG9yVmJuZXQpXG4gIFByaXNtLmxhbmd1YWdlc1sndDQtdmInXSA9IFByaXNtLmxhbmd1YWdlc1sndDQtdGVtcGxhdGluZyddLmNyZWF0ZVQ0KCd2Ym5ldCcpXG59XG4iXSwibmFtZXMiOlsicmVmcmFjdG9yVDRUZW1wbGF0aW5nIiwicmVxdWlyZSIsInJlZnJhY3RvclZibmV0IiwibW9kdWxlIiwiZXhwb3J0cyIsInQ0VmIiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsInJlZ2lzdGVyIiwibGFuZ3VhZ2VzIiwiY3JlYXRlVDQiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/t4-vb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/tap.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/tap.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar refractorYaml = __webpack_require__(/*! ./yaml.js */ \"(ssr)/./node_modules/refractor/lang/yaml.js\");\nmodule.exports = tap;\ntap.displayName = 'tap';\ntap.aliases = [];\nfunction tap(Prism) {\n  Prism.register(refractorYaml);\n  // https://en.wikipedia.org/wiki/Test_Anything_Protocol\n  Prism.languages.tap = {\n    fail: /not ok[^#{\\n\\r]*/,\n    pass: /ok[^#{\\n\\r]*/,\n    pragma: /pragma [+-][a-z]+/,\n    bailout: /bail out!.*/i,\n    version: /TAP version \\d+/i,\n    plan: /\\b\\d+\\.\\.\\d+(?: +#.*)?/,\n    subtest: {\n      pattern: /# Subtest(?:: .*)?/,\n      greedy: true\n    },\n    punctuation: /[{}]/,\n    directive: /#.*/,\n    yamlish: {\n      pattern: /(^[ \\t]*)---[\\s\\S]*?[\\r\\n][ \\t]*\\.\\.\\.$/m,\n      lookbehind: true,\n      inside: Prism.languages.yaml,\n      alias: 'language-yaml'\n    }\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvdGFwLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUNaLElBQUlBLGFBQWEsR0FBR0MsbUJBQU8sQ0FBQyw4REFBVyxDQUFDO0FBQ3hDQyxNQUFNLENBQUNDLE9BQU8sR0FBR0MsR0FBRztBQUNwQkEsR0FBRyxDQUFDQyxXQUFXLEdBQUcsS0FBSztBQUN2QkQsR0FBRyxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNoQixTQUFTRixHQUFHQSxDQUFDRyxLQUFLLEVBQUU7RUFDbEJBLEtBQUssQ0FBQ0MsUUFBUSxDQUFDUixhQUFhLENBQUM7RUFDN0I7RUFDQU8sS0FBSyxDQUFDRSxTQUFTLENBQUNMLEdBQUcsR0FBRztJQUNwQk0sSUFBSSxFQUFFLGtCQUFrQjtJQUN4QkMsSUFBSSxFQUFFLGNBQWM7SUFDcEJDLE1BQU0sRUFBRSxtQkFBbUI7SUFDM0JDLE9BQU8sRUFBRSxjQUFjO0lBQ3ZCQyxPQUFPLEVBQUUsa0JBQWtCO0lBQzNCQyxJQUFJLEVBQUUsd0JBQXdCO0lBQzlCQyxPQUFPLEVBQUU7TUFDUEMsT0FBTyxFQUFFLG9CQUFvQjtNQUM3QkMsTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUNEQyxXQUFXLEVBQUUsTUFBTTtJQUNuQkMsU0FBUyxFQUFFLEtBQUs7SUFDaEJDLE9BQU8sRUFBRTtNQUNQSixPQUFPLEVBQUUsMENBQTBDO01BQ25ESyxVQUFVLEVBQUUsSUFBSTtNQUNoQkMsTUFBTSxFQUFFaEIsS0FBSyxDQUFDRSxTQUFTLENBQUNlLElBQUk7TUFDNUJDLEtBQUssRUFBRTtJQUNUO0VBQ0YsQ0FBQztBQUNIIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcdGFwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xudmFyIHJlZnJhY3RvcllhbWwgPSByZXF1aXJlKCcuL3lhbWwuanMnKVxubW9kdWxlLmV4cG9ydHMgPSB0YXBcbnRhcC5kaXNwbGF5TmFtZSA9ICd0YXAnXG50YXAuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiB0YXAoUHJpc20pIHtcbiAgUHJpc20ucmVnaXN0ZXIocmVmcmFjdG9yWWFtbClcbiAgLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVGVzdF9Bbnl0aGluZ19Qcm90b2NvbFxuICBQcmlzbS5sYW5ndWFnZXMudGFwID0ge1xuICAgIGZhaWw6IC9ub3Qgb2tbXiN7XFxuXFxyXSovLFxuICAgIHBhc3M6IC9va1teI3tcXG5cXHJdKi8sXG4gICAgcHJhZ21hOiAvcHJhZ21hIFsrLV1bYS16XSsvLFxuICAgIGJhaWxvdXQ6IC9iYWlsIG91dCEuKi9pLFxuICAgIHZlcnNpb246IC9UQVAgdmVyc2lvbiBcXGQrL2ksXG4gICAgcGxhbjogL1xcYlxcZCtcXC5cXC5cXGQrKD86ICsjLiopPy8sXG4gICAgc3VidGVzdDoge1xuICAgICAgcGF0dGVybjogLyMgU3VidGVzdCg/OjogLiopPy8sXG4gICAgICBncmVlZHk6IHRydWVcbiAgICB9LFxuICAgIHB1bmN0dWF0aW9uOiAvW3t9XS8sXG4gICAgZGlyZWN0aXZlOiAvIy4qLyxcbiAgICB5YW1saXNoOiB7XG4gICAgICBwYXR0ZXJuOiAvKF5bIFxcdF0qKS0tLVtcXHNcXFNdKj9bXFxyXFxuXVsgXFx0XSpcXC5cXC5cXC4kL20sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgaW5zaWRlOiBQcmlzbS5sYW5ndWFnZXMueWFtbCxcbiAgICAgIGFsaWFzOiAnbGFuZ3VhZ2UteWFtbCdcbiAgICB9XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJyZWZyYWN0b3JZYW1sIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJ0YXAiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsInJlZ2lzdGVyIiwibGFuZ3VhZ2VzIiwiZmFpbCIsInBhc3MiLCJwcmFnbWEiLCJiYWlsb3V0IiwidmVyc2lvbiIsInBsYW4iLCJzdWJ0ZXN0IiwicGF0dGVybiIsImdyZWVkeSIsInB1bmN0dWF0aW9uIiwiZGlyZWN0aXZlIiwieWFtbGlzaCIsImxvb2tiZWhpbmQiLCJpbnNpZGUiLCJ5YW1sIiwiYWxpYXMiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/tap.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/tcl.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/tcl.js ***!
  \********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = tcl;\ntcl.displayName = 'tcl';\ntcl.aliases = [];\nfunction tcl(Prism) {\n  Prism.languages.tcl = {\n    comment: {\n      pattern: /(^|[^\\\\])#.*/,\n      lookbehind: true\n    },\n    string: {\n      pattern: /\"(?:[^\"\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\"/,\n      greedy: true\n    },\n    variable: [{\n      pattern: /(\\$)(?:::)?(?:[a-zA-Z0-9]+::)*\\w+/,\n      lookbehind: true\n    }, {\n      pattern: /(\\$)\\{[^}]+\\}/,\n      lookbehind: true\n    }, {\n      pattern: /(^[\\t ]*set[ \\t]+)(?:::)?(?:[a-zA-Z0-9]+::)*\\w+/m,\n      lookbehind: true\n    }],\n    \"function\": {\n      pattern: /(^[\\t ]*proc[ \\t]+)\\S+/m,\n      lookbehind: true\n    },\n    builtin: [{\n      pattern: /(^[\\t ]*)(?:break|class|continue|error|eval|exit|for|foreach|if|proc|return|switch|while)\\b/m,\n      lookbehind: true\n    }, /\\b(?:else|elseif)\\b/],\n    scope: {\n      pattern: /(^[\\t ]*)(?:global|upvar|variable)\\b/m,\n      lookbehind: true,\n      alias: 'constant'\n    },\n    keyword: {\n      pattern: /(^[\\t ]*|\\[)(?:Safe_Base|Tcl|after|append|apply|array|auto_(?:execok|import|load|mkindex|qualify|reset)|automkindex_old|bgerror|binary|catch|cd|chan|clock|close|concat|dde|dict|encoding|eof|exec|expr|fblocked|fconfigure|fcopy|file(?:event|name)?|flush|gets|glob|history|http|incr|info|interp|join|lappend|lassign|lindex|linsert|list|llength|load|lrange|lrepeat|lreplace|lreverse|lsearch|lset|lsort|math(?:func|op)|memory|msgcat|namespace|open|package|parray|pid|pkg_mkIndex|platform|puts|pwd|re_syntax|read|refchan|regexp|registry|regsub|rename|scan|seek|set|socket|source|split|string|subst|tcl(?:_endOfWord|_findLibrary|startOf(?:Next|Previous)Word|test|vars|wordBreak(?:After|Before))|tell|time|tm|trace|unknown|unload|unset|update|uplevel|vwait)\\b/m,\n      lookbehind: true\n    },\n    operator: /!=?|\\*\\*?|==|&&?|\\|\\|?|<[=<]?|>[=>]?|[-+~\\/%?^]|\\b(?:eq|in|ne|ni)\\b/,\n    punctuation: /[{}()\\[\\]]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvdGNsLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsR0FBRztBQUNwQkEsR0FBRyxDQUFDQyxXQUFXLEdBQUcsS0FBSztBQUN2QkQsR0FBRyxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNoQixTQUFTRixHQUFHQSxDQUFDRyxLQUFLLEVBQUU7RUFDbEJBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixHQUFHLEdBQUc7SUFDcEJLLE9BQU8sRUFBRTtNQUNQQyxPQUFPLEVBQUUsY0FBYztNQUN2QkMsVUFBVSxFQUFFO0lBQ2QsQ0FBQztJQUNEQyxNQUFNLEVBQUU7TUFDTkYsT0FBTyxFQUFFLHFDQUFxQztNQUM5Q0csTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUNEQyxRQUFRLEVBQUUsQ0FDUjtNQUNFSixPQUFPLEVBQUUsbUNBQW1DO01BQzVDQyxVQUFVLEVBQUU7SUFDZCxDQUFDLEVBQ0Q7TUFDRUQsT0FBTyxFQUFFLGVBQWU7TUFDeEJDLFVBQVUsRUFBRTtJQUNkLENBQUMsRUFDRDtNQUNFRCxPQUFPLEVBQUUsa0RBQWtEO01BQzNEQyxVQUFVLEVBQUU7SUFDZCxDQUFDLENBQ0Y7SUFDRCxZQUFVO01BQ1JELE9BQU8sRUFBRSx5QkFBeUI7TUFDbENDLFVBQVUsRUFBRTtJQUNkLENBQUM7SUFDREksT0FBTyxFQUFFLENBQ1A7TUFDRUwsT0FBTyxFQUNMLDhGQUE4RjtNQUNoR0MsVUFBVSxFQUFFO0lBQ2QsQ0FBQyxFQUNELHFCQUFxQixDQUN0QjtJQUNESyxLQUFLLEVBQUU7TUFDTE4sT0FBTyxFQUFFLHVDQUF1QztNQUNoREMsVUFBVSxFQUFFLElBQUk7TUFDaEJNLEtBQUssRUFBRTtJQUNULENBQUM7SUFDREMsT0FBTyxFQUFFO01BQ1BSLE9BQU8sRUFDTCxrdkJBQWt2QjtNQUNwdkJDLFVBQVUsRUFBRTtJQUNkLENBQUM7SUFDRFEsUUFBUSxFQUNOLHFFQUFxRTtJQUN2RUMsV0FBVyxFQUFFO0VBQ2YsQ0FBQztBQUNIIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcdGNsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IHRjbFxudGNsLmRpc3BsYXlOYW1lID0gJ3RjbCdcbnRjbC5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIHRjbChQcmlzbSkge1xuICBQcmlzbS5sYW5ndWFnZXMudGNsID0ge1xuICAgIGNvbW1lbnQ6IHtcbiAgICAgIHBhdHRlcm46IC8oXnxbXlxcXFxdKSMuKi8sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgfSxcbiAgICBzdHJpbmc6IHtcbiAgICAgIHBhdHRlcm46IC9cIig/OlteXCJcXFxcXFxyXFxuXXxcXFxcKD86XFxyXFxufFtcXHNcXFNdKSkqXCIvLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICB2YXJpYWJsZTogW1xuICAgICAge1xuICAgICAgICBwYXR0ZXJuOiAvKFxcJCkoPzo6Oik/KD86W2EtekEtWjAtOV0rOjopKlxcdysvLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBwYXR0ZXJuOiAvKFxcJClcXHtbXn1dK1xcfS8sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHBhdHRlcm46IC8oXltcXHQgXSpzZXRbIFxcdF0rKSg/Ojo6KT8oPzpbYS16QS1aMC05XSs6OikqXFx3Ky9tLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICB9XG4gICAgXSxcbiAgICBmdW5jdGlvbjoge1xuICAgICAgcGF0dGVybjogLyheW1xcdCBdKnByb2NbIFxcdF0rKVxcUysvbSxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICB9LFxuICAgIGJ1aWx0aW46IFtcbiAgICAgIHtcbiAgICAgICAgcGF0dGVybjpcbiAgICAgICAgICAvKF5bXFx0IF0qKSg/OmJyZWFrfGNsYXNzfGNvbnRpbnVlfGVycm9yfGV2YWx8ZXhpdHxmb3J8Zm9yZWFjaHxpZnxwcm9jfHJldHVybnxzd2l0Y2h8d2hpbGUpXFxiL20sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH0sXG4gICAgICAvXFxiKD86ZWxzZXxlbHNlaWYpXFxiL1xuICAgIF0sXG4gICAgc2NvcGU6IHtcbiAgICAgIHBhdHRlcm46IC8oXltcXHQgXSopKD86Z2xvYmFsfHVwdmFyfHZhcmlhYmxlKVxcYi9tLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGFsaWFzOiAnY29uc3RhbnQnXG4gICAgfSxcbiAgICBrZXl3b3JkOiB7XG4gICAgICBwYXR0ZXJuOlxuICAgICAgICAvKF5bXFx0IF0qfFxcWykoPzpTYWZlX0Jhc2V8VGNsfGFmdGVyfGFwcGVuZHxhcHBseXxhcnJheXxhdXRvXyg/OmV4ZWNva3xpbXBvcnR8bG9hZHxta2luZGV4fHF1YWxpZnl8cmVzZXQpfGF1dG9ta2luZGV4X29sZHxiZ2Vycm9yfGJpbmFyeXxjYXRjaHxjZHxjaGFufGNsb2NrfGNsb3NlfGNvbmNhdHxkZGV8ZGljdHxlbmNvZGluZ3xlb2Z8ZXhlY3xleHByfGZibG9ja2VkfGZjb25maWd1cmV8ZmNvcHl8ZmlsZSg/OmV2ZW50fG5hbWUpP3xmbHVzaHxnZXRzfGdsb2J8aGlzdG9yeXxodHRwfGluY3J8aW5mb3xpbnRlcnB8am9pbnxsYXBwZW5kfGxhc3NpZ258bGluZGV4fGxpbnNlcnR8bGlzdHxsbGVuZ3RofGxvYWR8bHJhbmdlfGxyZXBlYXR8bHJlcGxhY2V8bHJldmVyc2V8bHNlYXJjaHxsc2V0fGxzb3J0fG1hdGgoPzpmdW5jfG9wKXxtZW1vcnl8bXNnY2F0fG5hbWVzcGFjZXxvcGVufHBhY2thZ2V8cGFycmF5fHBpZHxwa2dfbWtJbmRleHxwbGF0Zm9ybXxwdXRzfHB3ZHxyZV9zeW50YXh8cmVhZHxyZWZjaGFufHJlZ2V4cHxyZWdpc3RyeXxyZWdzdWJ8cmVuYW1lfHNjYW58c2Vla3xzZXR8c29ja2V0fHNvdXJjZXxzcGxpdHxzdHJpbmd8c3Vic3R8dGNsKD86X2VuZE9mV29yZHxfZmluZExpYnJhcnl8c3RhcnRPZig/Ok5leHR8UHJldmlvdXMpV29yZHx0ZXN0fHZhcnN8d29yZEJyZWFrKD86QWZ0ZXJ8QmVmb3JlKSl8dGVsbHx0aW1lfHRtfHRyYWNlfHVua25vd258dW5sb2FkfHVuc2V0fHVwZGF0ZXx1cGxldmVsfHZ3YWl0KVxcYi9tLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgIH0sXG4gICAgb3BlcmF0b3I6XG4gICAgICAvIT0/fFxcKlxcKj98PT18JiY/fFxcfFxcfD98PFs9PF0/fD5bPT5dP3xbLSt+XFwvJT9eXXxcXGIoPzplcXxpbnxuZXxuaSlcXGIvLFxuICAgIHB1bmN0dWF0aW9uOiAvW3t9KClcXFtcXF1dL1xuICB9XG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInRjbCIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwiY29tbWVudCIsInBhdHRlcm4iLCJsb29rYmVoaW5kIiwic3RyaW5nIiwiZ3JlZWR5IiwidmFyaWFibGUiLCJidWlsdGluIiwic2NvcGUiLCJhbGlhcyIsImtleXdvcmQiLCJvcGVyYXRvciIsInB1bmN0dWF0aW9uIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/tcl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/textile.js":
/*!************************************************!*\
  !*** ./node_modules/refractor/lang/textile.js ***!
  \************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = textile;\ntextile.displayName = 'textile';\ntextile.aliases = [];\nfunction textile(Prism) {\n  ;\n  (function (Prism) {\n    // We don't allow for pipes inside parentheses\n    // to not break table pattern |(. foo |). bar |\n    var modifierRegex = /\\([^|()\\n]+\\)|\\[[^\\]\\n]+\\]|\\{[^}\\n]+\\}/.source; // Opening and closing parentheses which are not a modifier\n    // This pattern is necessary to prevent exponential backtracking\n    var parenthesesRegex = /\\)|\\((?![^|()\\n]+\\))/.source;\n    /**\n     * @param {string} source\n     * @param {string} [flags]\n     */\n    function withModifier(source, flags) {\n      return RegExp(source.replace(/<MOD>/g, function () {\n        return '(?:' + modifierRegex + ')';\n      }).replace(/<PAR>/g, function () {\n        return '(?:' + parenthesesRegex + ')';\n      }), flags || '');\n    }\n    var modifierTokens = {\n      css: {\n        pattern: /\\{[^{}]+\\}/,\n        inside: {\n          rest: Prism.languages.css\n        }\n      },\n      'class-id': {\n        pattern: /(\\()[^()]+(?=\\))/,\n        lookbehind: true,\n        alias: 'attr-value'\n      },\n      lang: {\n        pattern: /(\\[)[^\\[\\]]+(?=\\])/,\n        lookbehind: true,\n        alias: 'attr-value'\n      },\n      // Anything else is punctuation (the first pattern is for row/col spans inside tables)\n      punctuation: /[\\\\\\/]\\d+|\\S/\n    };\n    var textile = Prism.languages.textile = Prism.languages.extend('markup', {\n      phrase: {\n        pattern: /(^|\\r|\\n)\\S[\\s\\S]*?(?=$|\\r?\\n\\r?\\n|\\r\\r)/,\n        lookbehind: true,\n        inside: {\n          // h1. Header 1\n          'block-tag': {\n            pattern: withModifier(/^[a-z]\\w*(?:<MOD>|<PAR>|[<>=])*\\./.source),\n            inside: {\n              modifier: {\n                pattern: withModifier(/(^[a-z]\\w*)(?:<MOD>|<PAR>|[<>=])+(?=\\.)/.source),\n                lookbehind: true,\n                inside: modifierTokens\n              },\n              tag: /^[a-z]\\w*/,\n              punctuation: /\\.$/\n            }\n          },\n          // # List item\n          // * List item\n          list: {\n            pattern: withModifier(/^[*#]+<MOD>*\\s+\\S.*/.source, 'm'),\n            inside: {\n              modifier: {\n                pattern: withModifier(/(^[*#]+)<MOD>+/.source),\n                lookbehind: true,\n                inside: modifierTokens\n              },\n              punctuation: /^[*#]+/\n            }\n          },\n          // | cell | cell | cell |\n          table: {\n            // Modifiers can be applied to the row: {color:red}.|1|2|3|\n            // or the cell: |{color:red}.1|2|3|\n            pattern: withModifier(/^(?:(?:<MOD>|<PAR>|[<>=^~])+\\.\\s*)?(?:\\|(?:(?:<MOD>|<PAR>|[<>=^~_]|[\\\\/]\\d+)+\\.|(?!(?:<MOD>|<PAR>|[<>=^~_]|[\\\\/]\\d+)+\\.))[^|]*)+\\|/.source, 'm'),\n            inside: {\n              modifier: {\n                // Modifiers for rows after the first one are\n                // preceded by a pipe and a line feed\n                pattern: withModifier(/(^|\\|(?:\\r?\\n|\\r)?)(?:<MOD>|<PAR>|[<>=^~_]|[\\\\/]\\d+)+(?=\\.)/.source),\n                lookbehind: true,\n                inside: modifierTokens\n              },\n              punctuation: /\\||^\\./\n            }\n          },\n          inline: {\n            // eslint-disable-next-line regexp/no-super-linear-backtracking\n            pattern: withModifier(/(^|[^a-zA-Z\\d])(\\*\\*|__|\\?\\?|[*_%@+\\-^~])<MOD>*.+?\\2(?![a-zA-Z\\d])/.source),\n            lookbehind: true,\n            inside: {\n              // Note: superscripts and subscripts are not handled specifically\n              // *bold*, **bold**\n              bold: {\n                // eslint-disable-next-line regexp/no-super-linear-backtracking\n                pattern: withModifier(/(^(\\*\\*?)<MOD>*).+?(?=\\2)/.source),\n                lookbehind: true\n              },\n              // _italic_, __italic__\n              italic: {\n                // eslint-disable-next-line regexp/no-super-linear-backtracking\n                pattern: withModifier(/(^(__?)<MOD>*).+?(?=\\2)/.source),\n                lookbehind: true\n              },\n              // ??cite??\n              cite: {\n                // eslint-disable-next-line regexp/no-super-linear-backtracking\n                pattern: withModifier(/(^\\?\\?<MOD>*).+?(?=\\?\\?)/.source),\n                lookbehind: true,\n                alias: 'string'\n              },\n              // @code@\n              code: {\n                // eslint-disable-next-line regexp/no-super-linear-backtracking\n                pattern: withModifier(/(^@<MOD>*).+?(?=@)/.source),\n                lookbehind: true,\n                alias: 'keyword'\n              },\n              // +inserted+\n              inserted: {\n                // eslint-disable-next-line regexp/no-super-linear-backtracking\n                pattern: withModifier(/(^\\+<MOD>*).+?(?=\\+)/.source),\n                lookbehind: true\n              },\n              // -deleted-\n              deleted: {\n                // eslint-disable-next-line regexp/no-super-linear-backtracking\n                pattern: withModifier(/(^-<MOD>*).+?(?=-)/.source),\n                lookbehind: true\n              },\n              // %span%\n              span: {\n                // eslint-disable-next-line regexp/no-super-linear-backtracking\n                pattern: withModifier(/(^%<MOD>*).+?(?=%)/.source),\n                lookbehind: true\n              },\n              modifier: {\n                pattern: withModifier(/(^\\*\\*|__|\\?\\?|[*_%@+\\-^~])<MOD>+/.source),\n                lookbehind: true,\n                inside: modifierTokens\n              },\n              punctuation: /[*_%?@+\\-^~]+/\n            }\n          },\n          // [alias]http://example.com\n          'link-ref': {\n            pattern: /^\\[[^\\]]+\\]\\S+$/m,\n            inside: {\n              string: {\n                pattern: /(^\\[)[^\\]]+(?=\\])/,\n                lookbehind: true\n              },\n              url: {\n                pattern: /(^\\])\\S+$/,\n                lookbehind: true\n              },\n              punctuation: /[\\[\\]]/\n            }\n          },\n          // \"text\":http://example.com\n          // \"text\":link-ref\n          link: {\n            // eslint-disable-next-line regexp/no-super-linear-backtracking\n            pattern: withModifier(/\"<MOD>*[^\"]+\":.+?(?=[^\\w/]?(?:\\s|$))/.source),\n            inside: {\n              text: {\n                // eslint-disable-next-line regexp/no-super-linear-backtracking\n                pattern: withModifier(/(^\"<MOD>*)[^\"]+(?=\")/.source),\n                lookbehind: true\n              },\n              modifier: {\n                pattern: withModifier(/(^\")<MOD>+/.source),\n                lookbehind: true,\n                inside: modifierTokens\n              },\n              url: {\n                pattern: /(:).+/,\n                lookbehind: true\n              },\n              punctuation: /[\":]/\n            }\n          },\n          // !image.jpg!\n          // !image.jpg(Title)!:http://example.com\n          image: {\n            pattern: withModifier(/!(?:<MOD>|<PAR>|[<>=])*(?![<>=])[^!\\s()]+(?:\\([^)]+\\))?!(?::.+?(?=[^\\w/]?(?:\\s|$)))?/.source),\n            inside: {\n              source: {\n                pattern: withModifier(/(^!(?:<MOD>|<PAR>|[<>=])*)(?![<>=])[^!\\s()]+(?:\\([^)]+\\))?(?=!)/.source),\n                lookbehind: true,\n                alias: 'url'\n              },\n              modifier: {\n                pattern: withModifier(/(^!)(?:<MOD>|<PAR>|[<>=])+/.source),\n                lookbehind: true,\n                inside: modifierTokens\n              },\n              url: {\n                pattern: /(:).+/,\n                lookbehind: true\n              },\n              punctuation: /[!:]/\n            }\n          },\n          // Footnote[1]\n          footnote: {\n            pattern: /\\b\\[\\d+\\]/,\n            alias: 'comment',\n            inside: {\n              punctuation: /\\[|\\]/\n            }\n          },\n          // CSS(Cascading Style Sheet)\n          acronym: {\n            pattern: /\\b[A-Z\\d]+\\([^)]+\\)/,\n            inside: {\n              comment: {\n                pattern: /(\\()[^()]+(?=\\))/,\n                lookbehind: true\n              },\n              punctuation: /[()]/\n            }\n          },\n          // Prism(C)\n          mark: {\n            pattern: /\\b\\((?:C|R|TM)\\)/,\n            alias: 'comment',\n            inside: {\n              punctuation: /[()]/\n            }\n          }\n        }\n      }\n    });\n    var phraseInside = textile['phrase'].inside;\n    var nestedPatterns = {\n      inline: phraseInside['inline'],\n      link: phraseInside['link'],\n      image: phraseInside['image'],\n      footnote: phraseInside['footnote'],\n      acronym: phraseInside['acronym'],\n      mark: phraseInside['mark']\n    }; // Only allow alpha-numeric HTML tags, not XML tags\n    textile.tag.pattern = /<\\/?(?!\\d)[a-z0-9]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i; // Allow some nesting\n    var phraseInlineInside = phraseInside['inline'].inside;\n    phraseInlineInside['bold'].inside = nestedPatterns;\n    phraseInlineInside['italic'].inside = nestedPatterns;\n    phraseInlineInside['inserted'].inside = nestedPatterns;\n    phraseInlineInside['deleted'].inside = nestedPatterns;\n    phraseInlineInside['span'].inside = nestedPatterns; // Allow some styles inside table cells\n    var phraseTableInside = phraseInside['table'].inside;\n    phraseTableInside['inline'] = nestedPatterns['inline'];\n    phraseTableInside['link'] = nestedPatterns['link'];\n    phraseTableInside['image'] = nestedPatterns['image'];\n    phraseTableInside['footnote'] = nestedPatterns['footnote'];\n    phraseTableInside['acronym'] = nestedPatterns['acronym'];\n    phraseTableInside['mark'] = nestedPatterns['mark'];\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/textile.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/toml.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/toml.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = toml;\ntoml.displayName = 'toml';\ntoml.aliases = [];\nfunction toml(Prism) {\n  ;\n  (function (Prism) {\n    var key = /(?:[\\w-]+|'[^'\\n\\r]*'|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")/.source;\n    /**\n     * @param {string} pattern\n     */\n    function insertKey(pattern) {\n      return pattern.replace(/__/g, function () {\n        return key;\n      });\n    }\n    Prism.languages.toml = {\n      comment: {\n        pattern: /#.*/,\n        greedy: true\n      },\n      table: {\n        pattern: RegExp(insertKey(/(^[\\t ]*\\[\\s*(?:\\[\\s*)?)__(?:\\s*\\.\\s*__)*(?=\\s*\\])/.source), 'm'),\n        lookbehind: true,\n        greedy: true,\n        alias: 'class-name'\n      },\n      key: {\n        pattern: RegExp(insertKey(/(^[\\t ]*|[{,]\\s*)__(?:\\s*\\.\\s*__)*(?=\\s*=)/.source), 'm'),\n        lookbehind: true,\n        greedy: true,\n        alias: 'property'\n      },\n      string: {\n        pattern: /\"\"\"(?:\\\\[\\s\\S]|[^\\\\])*?\"\"\"|'''[\\s\\S]*?'''|'[^'\\n\\r]*'|\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n        greedy: true\n      },\n      date: [{\n        // Offset Date-Time, Local Date-Time, Local Date\n        pattern: /\\b\\d{4}-\\d{2}-\\d{2}(?:[T\\s]\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|[+-]\\d{2}:\\d{2})?)?\\b/i,\n        alias: 'number'\n      }, {\n        // Local Time\n        pattern: /\\b\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?\\b/,\n        alias: 'number'\n      }],\n      number: /(?:\\b0(?:x[\\da-zA-Z]+(?:_[\\da-zA-Z]+)*|o[0-7]+(?:_[0-7]+)*|b[10]+(?:_[10]+)*))\\b|[-+]?\\b\\d+(?:_\\d+)*(?:\\.\\d+(?:_\\d+)*)?(?:[eE][+-]?\\d+(?:_\\d+)*)?\\b|[-+]?\\b(?:inf|nan)\\b/,\n      \"boolean\": /\\b(?:false|true)\\b/,\n      punctuation: /[.,=[\\]{}]/\n    };\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvdG9tbC5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLElBQUk7QUFDckJBLElBQUksQ0FBQ0MsV0FBVyxHQUFHLE1BQU07QUFDekJELElBQUksQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDakIsU0FBU0YsSUFBSUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ25CO0VBQUMsQ0FBQyxVQUFVQSxLQUFLLEVBQUU7SUFDakIsSUFBSUMsR0FBRyxHQUFHLDhDQUE4QyxDQUFDQyxNQUFNO0lBQy9EO0FBQ0o7QUFDQTtJQUNJLFNBQVNDLFNBQVNBLENBQUNDLE9BQU8sRUFBRTtNQUMxQixPQUFPQSxPQUFPLENBQUNDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsWUFBWTtRQUN4QyxPQUFPSixHQUFHO01BQ1osQ0FBQyxDQUFDO0lBQ0o7SUFDQUQsS0FBSyxDQUFDTSxTQUFTLENBQUNULElBQUksR0FBRztNQUNyQlUsT0FBTyxFQUFFO1FBQ1BILE9BQU8sRUFBRSxLQUFLO1FBQ2RJLE1BQU0sRUFBRTtNQUNWLENBQUM7TUFDREMsS0FBSyxFQUFFO1FBQ0xMLE9BQU8sRUFBRU0sTUFBTSxDQUNiUCxTQUFTLENBQ1Asb0RBQW9ELENBQUNELE1BQ3ZELENBQUMsRUFDRCxHQUNGLENBQUM7UUFDRFMsVUFBVSxFQUFFLElBQUk7UUFDaEJILE1BQU0sRUFBRSxJQUFJO1FBQ1pJLEtBQUssRUFBRTtNQUNULENBQUM7TUFDRFgsR0FBRyxFQUFFO1FBQ0hHLE9BQU8sRUFBRU0sTUFBTSxDQUNiUCxTQUFTLENBQUMsNENBQTRDLENBQUNELE1BQU0sQ0FBQyxFQUM5RCxHQUNGLENBQUM7UUFDRFMsVUFBVSxFQUFFLElBQUk7UUFDaEJILE1BQU0sRUFBRSxJQUFJO1FBQ1pJLEtBQUssRUFBRTtNQUNULENBQUM7TUFDREMsTUFBTSxFQUFFO1FBQ05ULE9BQU8sRUFDTCw2RUFBNkU7UUFDL0VJLE1BQU0sRUFBRTtNQUNWLENBQUM7TUFDRE0sSUFBSSxFQUFFLENBQ0o7UUFDRTtRQUNBVixPQUFPLEVBQ0wsbUZBQW1GO1FBQ3JGUSxLQUFLLEVBQUU7TUFDVCxDQUFDLEVBQ0Q7UUFDRTtRQUNBUixPQUFPLEVBQUUsaUNBQWlDO1FBQzFDUSxLQUFLLEVBQUU7TUFDVCxDQUFDLENBQ0Y7TUFDREcsTUFBTSxFQUNKLDBLQUEwSztNQUM1SyxXQUFTLG9CQUFvQjtNQUM3QkMsV0FBVyxFQUFFO0lBQ2YsQ0FBQztFQUNILENBQUMsRUFBRWhCLEtBQUssQ0FBQztBQUNYIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcdG9tbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSB0b21sXG50b21sLmRpc3BsYXlOYW1lID0gJ3RvbWwnXG50b21sLmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24gdG9tbChQcmlzbSkge1xuICA7KGZ1bmN0aW9uIChQcmlzbSkge1xuICAgIHZhciBrZXkgPSAvKD86W1xcdy1dK3wnW14nXFxuXFxyXSonfFwiKD86XFxcXC58W15cXFxcXCJcXHJcXG5dKSpcIikvLnNvdXJjZVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXR0ZXJuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5zZXJ0S2V5KHBhdHRlcm4pIHtcbiAgICAgIHJldHVybiBwYXR0ZXJuLnJlcGxhY2UoL19fL2csIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGtleVxuICAgICAgfSlcbiAgICB9XG4gICAgUHJpc20ubGFuZ3VhZ2VzLnRvbWwgPSB7XG4gICAgICBjb21tZW50OiB7XG4gICAgICAgIHBhdHRlcm46IC8jLiovLFxuICAgICAgICBncmVlZHk6IHRydWVcbiAgICAgIH0sXG4gICAgICB0YWJsZToge1xuICAgICAgICBwYXR0ZXJuOiBSZWdFeHAoXG4gICAgICAgICAgaW5zZXJ0S2V5KFxuICAgICAgICAgICAgLyheW1xcdCBdKlxcW1xccyooPzpcXFtcXHMqKT8pX18oPzpcXHMqXFwuXFxzKl9fKSooPz1cXHMqXFxdKS8uc291cmNlXG4gICAgICAgICAgKSxcbiAgICAgICAgICAnbSdcbiAgICAgICAgKSxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgICBhbGlhczogJ2NsYXNzLW5hbWUnXG4gICAgICB9LFxuICAgICAga2V5OiB7XG4gICAgICAgIHBhdHRlcm46IFJlZ0V4cChcbiAgICAgICAgICBpbnNlcnRLZXkoLyheW1xcdCBdKnxbeyxdXFxzKilfXyg/OlxccypcXC5cXHMqX18pKig/PVxccyo9KS8uc291cmNlKSxcbiAgICAgICAgICAnbSdcbiAgICAgICAgKSxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgICBhbGlhczogJ3Byb3BlcnR5J1xuICAgICAgfSxcbiAgICAgIHN0cmluZzoge1xuICAgICAgICBwYXR0ZXJuOlxuICAgICAgICAgIC9cIlwiXCIoPzpcXFxcW1xcc1xcU118W15cXFxcXSkqP1wiXCJcInwnJydbXFxzXFxTXSo/JycnfCdbXidcXG5cXHJdKid8XCIoPzpcXFxcLnxbXlxcXFxcIlxcclxcbl0pKlwiLyxcbiAgICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgICB9LFxuICAgICAgZGF0ZTogW1xuICAgICAgICB7XG4gICAgICAgICAgLy8gT2Zmc2V0IERhdGUtVGltZSwgTG9jYWwgRGF0ZS1UaW1lLCBMb2NhbCBEYXRlXG4gICAgICAgICAgcGF0dGVybjpcbiAgICAgICAgICAgIC9cXGJcXGR7NH0tXFxkezJ9LVxcZHsyfSg/OltUXFxzXVxcZHsyfTpcXGR7Mn06XFxkezJ9KD86XFwuXFxkKyk/KD86WnxbKy1dXFxkezJ9OlxcZHsyfSk/KT9cXGIvaSxcbiAgICAgICAgICBhbGlhczogJ251bWJlcidcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIC8vIExvY2FsIFRpbWVcbiAgICAgICAgICBwYXR0ZXJuOiAvXFxiXFxkezJ9OlxcZHsyfTpcXGR7Mn0oPzpcXC5cXGQrKT9cXGIvLFxuICAgICAgICAgIGFsaWFzOiAnbnVtYmVyJ1xuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgbnVtYmVyOlxuICAgICAgICAvKD86XFxiMCg/OnhbXFxkYS16QS1aXSsoPzpfW1xcZGEtekEtWl0rKSp8b1swLTddKyg/Ol9bMC03XSspKnxiWzEwXSsoPzpfWzEwXSspKikpXFxifFstK10/XFxiXFxkKyg/Ol9cXGQrKSooPzpcXC5cXGQrKD86X1xcZCspKik/KD86W2VFXVsrLV0/XFxkKyg/Ol9cXGQrKSopP1xcYnxbLStdP1xcYig/OmluZnxuYW4pXFxiLyxcbiAgICAgIGJvb2xlYW46IC9cXGIoPzpmYWxzZXx0cnVlKVxcYi8sXG4gICAgICBwdW5jdHVhdGlvbjogL1suLD1bXFxde31dL1xuICAgIH1cbiAgfSkoUHJpc20pXG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInRvbWwiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImtleSIsInNvdXJjZSIsImluc2VydEtleSIsInBhdHRlcm4iLCJyZXBsYWNlIiwibGFuZ3VhZ2VzIiwiY29tbWVudCIsImdyZWVkeSIsInRhYmxlIiwiUmVnRXhwIiwibG9va2JlaGluZCIsImFsaWFzIiwic3RyaW5nIiwiZGF0ZSIsIm51bWJlciIsInB1bmN0dWF0aW9uIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/toml.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/tremor.js":
/*!***********************************************!*\
  !*** ./node_modules/refractor/lang/tremor.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = tremor;\ntremor.displayName = 'tremor';\ntremor.aliases = [];\nfunction tremor(Prism) {\n  ;\n  (function (Prism) {\n    Prism.languages.tremor = {\n      comment: {\n        pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:--|\\/\\/|#).*)/,\n        lookbehind: true\n      },\n      'interpolated-string': null,\n      // see below\n      extractor: {\n        pattern: /\\b[a-z_]\\w*\\|(?:[^\\r\\n\\\\|]|\\\\(?:\\r\\n|[\\s\\S]))*\\|/i,\n        greedy: true,\n        inside: {\n          regex: {\n            pattern: /(^re)\\|[\\s\\S]+/,\n            lookbehind: true\n          },\n          \"function\": /^\\w+/,\n          value: /\\|[\\s\\S]+/\n        }\n      },\n      identifier: {\n        pattern: /`[^`]*`/,\n        greedy: true\n      },\n      \"function\": /\\b[a-z_]\\w*(?=\\s*(?:::\\s*<|\\())\\b/,\n      keyword: /\\b(?:args|as|by|case|config|connect|connector|const|copy|create|default|define|deploy|drop|each|emit|end|erase|event|flow|fn|for|from|group|having|insert|into|intrinsic|let|links|match|merge|mod|move|of|operator|patch|pipeline|recur|script|select|set|sliding|state|stream|to|tumbling|update|use|when|where|window|with)\\b/,\n      \"boolean\": /\\b(?:false|null|true)\\b/i,\n      number: /\\b(?:0b[01_]*|0x[0-9a-fA-F_]*|\\d[\\d_]*(?:\\.\\d[\\d_]*)?(?:[Ee][+-]?[\\d_]+)?)\\b/,\n      'pattern-punctuation': {\n        pattern: /%(?=[({[])/,\n        alias: 'punctuation'\n      },\n      operator: /[-+*\\/%~!^]=?|=[=>]?|&[&=]?|\\|[|=]?|<<?=?|>>?>?=?|(?:absent|and|not|or|present|xor)\\b/,\n      punctuation: /::|[;\\[\\]()\\{\\},.:]/\n    };\n    var interpolationPattern = /#\\{(?:[^\"{}]|\\{[^{}]*\\}|\"(?:[^\"\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\")*\\}/.source;\n    Prism.languages.tremor['interpolated-string'] = {\n      pattern: RegExp(/(^|[^\\\\])/.source + '(?:' + '\"\"\"(?:' + /[^\"\\\\#]|\\\\[\\s\\S]|\"(?!\"\")|#(?!\\{)/.source + '|' + interpolationPattern + ')*\"\"\"' + '|' + '\"(?:' + /[^\"\\\\\\r\\n#]|\\\\(?:\\r\\n|[\\s\\S])|#(?!\\{)/.source + '|' + interpolationPattern + ')*\"' + ')'),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: RegExp(interpolationPattern),\n          inside: {\n            punctuation: /^#\\{|\\}$/,\n            expression: {\n              pattern: /[\\s\\S]+/,\n              inside: Prism.languages.tremor\n            }\n          }\n        },\n        string: /[\\s\\S]+/\n      }\n    };\n    Prism.languages.troy = Prism.languages['tremor'];\n    Prism.languages.trickle = Prism.languages['tremor'];\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvdHJlbW9yLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsTUFBTTtBQUN2QkEsTUFBTSxDQUFDQyxXQUFXLEdBQUcsUUFBUTtBQUM3QkQsTUFBTSxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNuQixTQUFTRixNQUFNQSxDQUFDRyxLQUFLLEVBQUU7RUFDckI7RUFBQyxDQUFDLFVBQVVBLEtBQUssRUFBRTtJQUNqQkEsS0FBSyxDQUFDQyxTQUFTLENBQUNKLE1BQU0sR0FBRztNQUN2QkssT0FBTyxFQUFFO1FBQ1BDLE9BQU8sRUFBRSwrQ0FBK0M7UUFDeERDLFVBQVUsRUFBRTtNQUNkLENBQUM7TUFDRCxxQkFBcUIsRUFBRSxJQUFJO01BQzNCO01BQ0FDLFNBQVMsRUFBRTtRQUNURixPQUFPLEVBQUUsbURBQW1EO1FBQzVERyxNQUFNLEVBQUUsSUFBSTtRQUNaQyxNQUFNLEVBQUU7VUFDTkMsS0FBSyxFQUFFO1lBQ0xMLE9BQU8sRUFBRSxnQkFBZ0I7WUFDekJDLFVBQVUsRUFBRTtVQUNkLENBQUM7VUFDRCxZQUFVLE1BQU07VUFDaEJLLEtBQUssRUFBRTtRQUNUO01BQ0YsQ0FBQztNQUNEQyxVQUFVLEVBQUU7UUFDVlAsT0FBTyxFQUFFLFNBQVM7UUFDbEJHLE1BQU0sRUFBRTtNQUNWLENBQUM7TUFDRCxZQUFVLG1DQUFtQztNQUM3Q0ssT0FBTyxFQUNMLGtVQUFrVTtNQUNwVSxXQUFTLDBCQUEwQjtNQUNuQ0MsTUFBTSxFQUNKLDhFQUE4RTtNQUNoRixxQkFBcUIsRUFBRTtRQUNyQlQsT0FBTyxFQUFFLFlBQVk7UUFDckJVLEtBQUssRUFBRTtNQUNULENBQUM7TUFDREMsUUFBUSxFQUNOLHVGQUF1RjtNQUN6RkMsV0FBVyxFQUFFO0lBQ2YsQ0FBQztJQUNELElBQUlDLG9CQUFvQixHQUN0QixpRUFBaUUsQ0FBQ0MsTUFBTTtJQUMxRWpCLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixNQUFNLENBQUMscUJBQXFCLENBQUMsR0FBRztNQUM5Q00sT0FBTyxFQUFFZSxNQUFNLENBQ2IsV0FBVyxDQUFDRCxNQUFNLEdBQ2hCLEtBQUssR0FDTCxRQUFRLEdBQ1Isa0NBQWtDLENBQUNBLE1BQU0sR0FDekMsR0FBRyxHQUNIRCxvQkFBb0IsR0FDcEIsT0FBTyxHQUNQLEdBQUcsR0FDSCxNQUFNLEdBQ04sdUNBQXVDLENBQUNDLE1BQU0sR0FDOUMsR0FBRyxHQUNIRCxvQkFBb0IsR0FDcEIsS0FBSyxHQUNMLEdBQ0osQ0FBQztNQUNEWixVQUFVLEVBQUUsSUFBSTtNQUNoQkUsTUFBTSxFQUFFLElBQUk7TUFDWkMsTUFBTSxFQUFFO1FBQ05ZLGFBQWEsRUFBRTtVQUNiaEIsT0FBTyxFQUFFZSxNQUFNLENBQUNGLG9CQUFvQixDQUFDO1VBQ3JDVCxNQUFNLEVBQUU7WUFDTlEsV0FBVyxFQUFFLFVBQVU7WUFDdkJLLFVBQVUsRUFBRTtjQUNWakIsT0FBTyxFQUFFLFNBQVM7Y0FDbEJJLE1BQU0sRUFBRVAsS0FBSyxDQUFDQyxTQUFTLENBQUNKO1lBQzFCO1VBQ0Y7UUFDRixDQUFDO1FBQ0R3QixNQUFNLEVBQUU7TUFDVjtJQUNGLENBQUM7SUFDRHJCLEtBQUssQ0FBQ0MsU0FBUyxDQUFDcUIsSUFBSSxHQUFHdEIsS0FBSyxDQUFDQyxTQUFTLENBQUMsUUFBUSxDQUFDO0lBQ2hERCxLQUFLLENBQUNDLFNBQVMsQ0FBQ3NCLE9BQU8sR0FBR3ZCLEtBQUssQ0FBQ0MsU0FBUyxDQUFDLFFBQVEsQ0FBQztFQUNyRCxDQUFDLEVBQUVELEtBQUssQ0FBQztBQUNYIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcdHJlbW9yLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IHRyZW1vclxudHJlbW9yLmRpc3BsYXlOYW1lID0gJ3RyZW1vcidcbnRyZW1vci5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIHRyZW1vcihQcmlzbSkge1xuICA7KGZ1bmN0aW9uIChQcmlzbSkge1xuICAgIFByaXNtLmxhbmd1YWdlcy50cmVtb3IgPSB7XG4gICAgICBjb21tZW50OiB7XG4gICAgICAgIHBhdHRlcm46IC8oXnxbXlxcXFxdKSg/OlxcL1xcKltcXHNcXFNdKj9cXCpcXC98KD86LS18XFwvXFwvfCMpLiopLyxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgfSxcbiAgICAgICdpbnRlcnBvbGF0ZWQtc3RyaW5nJzogbnVsbCxcbiAgICAgIC8vIHNlZSBiZWxvd1xuICAgICAgZXh0cmFjdG9yOiB7XG4gICAgICAgIHBhdHRlcm46IC9cXGJbYS16X11cXHcqXFx8KD86W15cXHJcXG5cXFxcfF18XFxcXCg/OlxcclxcbnxbXFxzXFxTXSkpKlxcfC9pLFxuICAgICAgICBncmVlZHk6IHRydWUsXG4gICAgICAgIGluc2lkZToge1xuICAgICAgICAgIHJlZ2V4OiB7XG4gICAgICAgICAgICBwYXR0ZXJuOiAvKF5yZSlcXHxbXFxzXFxTXSsvLFxuICAgICAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZnVuY3Rpb246IC9eXFx3Ky8sXG4gICAgICAgICAgdmFsdWU6IC9cXHxbXFxzXFxTXSsvXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBpZGVudGlmaWVyOiB7XG4gICAgICAgIHBhdHRlcm46IC9gW15gXSpgLyxcbiAgICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgICB9LFxuICAgICAgZnVuY3Rpb246IC9cXGJbYS16X11cXHcqKD89XFxzKig/Ojo6XFxzKjx8XFwoKSlcXGIvLFxuICAgICAga2V5d29yZDpcbiAgICAgICAgL1xcYig/OmFyZ3N8YXN8Ynl8Y2FzZXxjb25maWd8Y29ubmVjdHxjb25uZWN0b3J8Y29uc3R8Y29weXxjcmVhdGV8ZGVmYXVsdHxkZWZpbmV8ZGVwbG95fGRyb3B8ZWFjaHxlbWl0fGVuZHxlcmFzZXxldmVudHxmbG93fGZufGZvcnxmcm9tfGdyb3VwfGhhdmluZ3xpbnNlcnR8aW50b3xpbnRyaW5zaWN8bGV0fGxpbmtzfG1hdGNofG1lcmdlfG1vZHxtb3ZlfG9mfG9wZXJhdG9yfHBhdGNofHBpcGVsaW5lfHJlY3VyfHNjcmlwdHxzZWxlY3R8c2V0fHNsaWRpbmd8c3RhdGV8c3RyZWFtfHRvfHR1bWJsaW5nfHVwZGF0ZXx1c2V8d2hlbnx3aGVyZXx3aW5kb3d8d2l0aClcXGIvLFxuICAgICAgYm9vbGVhbjogL1xcYig/OmZhbHNlfG51bGx8dHJ1ZSlcXGIvaSxcbiAgICAgIG51bWJlcjpcbiAgICAgICAgL1xcYig/OjBiWzAxX10qfDB4WzAtOWEtZkEtRl9dKnxcXGRbXFxkX10qKD86XFwuXFxkW1xcZF9dKik/KD86W0VlXVsrLV0/W1xcZF9dKyk/KVxcYi8sXG4gICAgICAncGF0dGVybi1wdW5jdHVhdGlvbic6IHtcbiAgICAgICAgcGF0dGVybjogLyUoPz1bKHtbXSkvLFxuICAgICAgICBhbGlhczogJ3B1bmN0dWF0aW9uJ1xuICAgICAgfSxcbiAgICAgIG9wZXJhdG9yOlxuICAgICAgICAvWy0rKlxcLyV+IV5dPT98PVs9Pl0/fCZbJj1dP3xcXHxbfD1dP3w8PD89P3w+Pj8+Pz0/fCg/OmFic2VudHxhbmR8bm90fG9yfHByZXNlbnR8eG9yKVxcYi8sXG4gICAgICBwdW5jdHVhdGlvbjogLzo6fFs7XFxbXFxdKClcXHtcXH0sLjpdL1xuICAgIH1cbiAgICB2YXIgaW50ZXJwb2xhdGlvblBhdHRlcm4gPVxuICAgICAgLyNcXHsoPzpbXlwie31dfFxce1tee31dKlxcfXxcIig/OlteXCJcXFxcXFxyXFxuXXxcXFxcKD86XFxyXFxufFtcXHNcXFNdKSkqXCIpKlxcfS8uc291cmNlXG4gICAgUHJpc20ubGFuZ3VhZ2VzLnRyZW1vclsnaW50ZXJwb2xhdGVkLXN0cmluZyddID0ge1xuICAgICAgcGF0dGVybjogUmVnRXhwKFxuICAgICAgICAvKF58W15cXFxcXSkvLnNvdXJjZSArXG4gICAgICAgICAgJyg/OicgK1xuICAgICAgICAgICdcIlwiXCIoPzonICtcbiAgICAgICAgICAvW15cIlxcXFwjXXxcXFxcW1xcc1xcU118XCIoPyFcIlwiKXwjKD8hXFx7KS8uc291cmNlICtcbiAgICAgICAgICAnfCcgK1xuICAgICAgICAgIGludGVycG9sYXRpb25QYXR0ZXJuICtcbiAgICAgICAgICAnKSpcIlwiXCInICtcbiAgICAgICAgICAnfCcgK1xuICAgICAgICAgICdcIig/OicgK1xuICAgICAgICAgIC9bXlwiXFxcXFxcclxcbiNdfFxcXFwoPzpcXHJcXG58W1xcc1xcU10pfCMoPyFcXHspLy5zb3VyY2UgK1xuICAgICAgICAgICd8JyArXG4gICAgICAgICAgaW50ZXJwb2xhdGlvblBhdHRlcm4gK1xuICAgICAgICAgICcpKlwiJyArXG4gICAgICAgICAgJyknXG4gICAgICApLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgIGluc2lkZToge1xuICAgICAgICBpbnRlcnBvbGF0aW9uOiB7XG4gICAgICAgICAgcGF0dGVybjogUmVnRXhwKGludGVycG9sYXRpb25QYXR0ZXJuKSxcbiAgICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICAgIHB1bmN0dWF0aW9uOiAvXiNcXHt8XFx9JC8sXG4gICAgICAgICAgICBleHByZXNzaW9uOiB7XG4gICAgICAgICAgICAgIHBhdHRlcm46IC9bXFxzXFxTXSsvLFxuICAgICAgICAgICAgICBpbnNpZGU6IFByaXNtLmxhbmd1YWdlcy50cmVtb3JcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHN0cmluZzogL1tcXHNcXFNdKy9cbiAgICAgIH1cbiAgICB9XG4gICAgUHJpc20ubGFuZ3VhZ2VzLnRyb3kgPSBQcmlzbS5sYW5ndWFnZXNbJ3RyZW1vciddXG4gICAgUHJpc20ubGFuZ3VhZ2VzLnRyaWNrbGUgPSBQcmlzbS5sYW5ndWFnZXNbJ3RyZW1vciddXG4gIH0pKFByaXNtKVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJ0cmVtb3IiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImxhbmd1YWdlcyIsImNvbW1lbnQiLCJwYXR0ZXJuIiwibG9va2JlaGluZCIsImV4dHJhY3RvciIsImdyZWVkeSIsImluc2lkZSIsInJlZ2V4IiwidmFsdWUiLCJpZGVudGlmaWVyIiwia2V5d29yZCIsIm51bWJlciIsImFsaWFzIiwib3BlcmF0b3IiLCJwdW5jdHVhdGlvbiIsImludGVycG9sYXRpb25QYXR0ZXJuIiwic291cmNlIiwiUmVnRXhwIiwiaW50ZXJwb2xhdGlvbiIsImV4cHJlc3Npb24iLCJzdHJpbmciLCJ0cm95IiwidHJpY2tsZSJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/tremor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/tsx.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/tsx.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar refractorJsx = __webpack_require__(/*! ./jsx.js */ \"(ssr)/./node_modules/refractor/lang/jsx.js\");\nvar refractorTypescript = __webpack_require__(/*! ./typescript.js */ \"(ssr)/./node_modules/refractor/lang/typescript.js\");\nmodule.exports = tsx;\ntsx.displayName = 'tsx';\ntsx.aliases = [];\nfunction tsx(Prism) {\n  Prism.register(refractorJsx);\n  Prism.register(refractorTypescript);\n  (function (Prism) {\n    var typescript = Prism.util.clone(Prism.languages.typescript);\n    Prism.languages.tsx = Prism.languages.extend('jsx', typescript); // doesn't work with TS because TS is too complex\n    delete Prism.languages.tsx['parameter'];\n    delete Prism.languages.tsx['literal-property']; // This will prevent collisions between TSX tags and TS generic types.\n    // Idea by https://github.com/karlhorky\n    // Discussion: https://github.com/PrismJS/prism/issues/2594#issuecomment-710666928\n    var tag = Prism.languages.tsx.tag;\n    tag.pattern = RegExp(/(^|[^\\w$]|(?=<\\/))/.source + '(?:' + tag.pattern.source + ')', tag.pattern.flags);\n    tag.lookbehind = true;\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvdHN4LmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUNaLElBQUlBLFlBQVksR0FBR0MsbUJBQU8sQ0FBQyw0REFBVSxDQUFDO0FBQ3RDLElBQUlDLG1CQUFtQixHQUFHRCxtQkFBTyxDQUFDLDBFQUFpQixDQUFDO0FBQ3BERSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsR0FBRztBQUNwQkEsR0FBRyxDQUFDQyxXQUFXLEdBQUcsS0FBSztBQUN2QkQsR0FBRyxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNoQixTQUFTRixHQUFHQSxDQUFDRyxLQUFLLEVBQUU7RUFDbEJBLEtBQUssQ0FBQ0MsUUFBUSxDQUFDVCxZQUFZLENBQUM7RUFDNUJRLEtBQUssQ0FBQ0MsUUFBUSxDQUFDUCxtQkFBbUIsQ0FBQztFQUNsQyxDQUFDLFVBQVVNLEtBQUssRUFBRTtJQUNqQixJQUFJRSxVQUFVLEdBQUdGLEtBQUssQ0FBQ0csSUFBSSxDQUFDQyxLQUFLLENBQUNKLEtBQUssQ0FBQ0ssU0FBUyxDQUFDSCxVQUFVLENBQUM7SUFDN0RGLEtBQUssQ0FBQ0ssU0FBUyxDQUFDUixHQUFHLEdBQUdHLEtBQUssQ0FBQ0ssU0FBUyxDQUFDQyxNQUFNLENBQUMsS0FBSyxFQUFFSixVQUFVLENBQUMsRUFBQztJQUNoRSxPQUFPRixLQUFLLENBQUNLLFNBQVMsQ0FBQ1IsR0FBRyxDQUFDLFdBQVcsQ0FBQztJQUN2QyxPQUFPRyxLQUFLLENBQUNLLFNBQVMsQ0FBQ1IsR0FBRyxDQUFDLGtCQUFrQixDQUFDLEVBQUM7SUFDL0M7SUFDQTtJQUNBLElBQUlVLEdBQUcsR0FBR1AsS0FBSyxDQUFDSyxTQUFTLENBQUNSLEdBQUcsQ0FBQ1UsR0FBRztJQUNqQ0EsR0FBRyxDQUFDQyxPQUFPLEdBQUdDLE1BQU0sQ0FDbEIsb0JBQW9CLENBQUNDLE1BQU0sR0FBRyxLQUFLLEdBQUdILEdBQUcsQ0FBQ0MsT0FBTyxDQUFDRSxNQUFNLEdBQUcsR0FBRyxFQUM5REgsR0FBRyxDQUFDQyxPQUFPLENBQUNHLEtBQ2QsQ0FBQztJQUNESixHQUFHLENBQUNLLFVBQVUsR0FBRyxJQUFJO0VBQ3ZCLENBQUMsRUFBRVosS0FBSyxDQUFDO0FBQ1giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFx0c3guanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG52YXIgcmVmcmFjdG9ySnN4ID0gcmVxdWlyZSgnLi9qc3guanMnKVxudmFyIHJlZnJhY3RvclR5cGVzY3JpcHQgPSByZXF1aXJlKCcuL3R5cGVzY3JpcHQuanMnKVxubW9kdWxlLmV4cG9ydHMgPSB0c3hcbnRzeC5kaXNwbGF5TmFtZSA9ICd0c3gnXG50c3guYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiB0c3goUHJpc20pIHtcbiAgUHJpc20ucmVnaXN0ZXIocmVmcmFjdG9ySnN4KVxuICBQcmlzbS5yZWdpc3RlcihyZWZyYWN0b3JUeXBlc2NyaXB0KVxuICA7KGZ1bmN0aW9uIChQcmlzbSkge1xuICAgIHZhciB0eXBlc2NyaXB0ID0gUHJpc20udXRpbC5jbG9uZShQcmlzbS5sYW5ndWFnZXMudHlwZXNjcmlwdClcbiAgICBQcmlzbS5sYW5ndWFnZXMudHN4ID0gUHJpc20ubGFuZ3VhZ2VzLmV4dGVuZCgnanN4JywgdHlwZXNjcmlwdCkgLy8gZG9lc24ndCB3b3JrIHdpdGggVFMgYmVjYXVzZSBUUyBpcyB0b28gY29tcGxleFxuICAgIGRlbGV0ZSBQcmlzbS5sYW5ndWFnZXMudHN4WydwYXJhbWV0ZXInXVxuICAgIGRlbGV0ZSBQcmlzbS5sYW5ndWFnZXMudHN4WydsaXRlcmFsLXByb3BlcnR5J10gLy8gVGhpcyB3aWxsIHByZXZlbnQgY29sbGlzaW9ucyBiZXR3ZWVuIFRTWCB0YWdzIGFuZCBUUyBnZW5lcmljIHR5cGVzLlxuICAgIC8vIElkZWEgYnkgaHR0cHM6Ly9naXRodWIuY29tL2thcmxob3JreVxuICAgIC8vIERpc2N1c3Npb246IGh0dHBzOi8vZ2l0aHViLmNvbS9QcmlzbUpTL3ByaXNtL2lzc3Vlcy8yNTk0I2lzc3VlY29tbWVudC03MTA2NjY5MjhcbiAgICB2YXIgdGFnID0gUHJpc20ubGFuZ3VhZ2VzLnRzeC50YWdcbiAgICB0YWcucGF0dGVybiA9IFJlZ0V4cChcbiAgICAgIC8oXnxbXlxcdyRdfCg/PTxcXC8pKS8uc291cmNlICsgJyg/OicgKyB0YWcucGF0dGVybi5zb3VyY2UgKyAnKScsXG4gICAgICB0YWcucGF0dGVybi5mbGFnc1xuICAgIClcbiAgICB0YWcubG9va2JlaGluZCA9IHRydWVcbiAgfSkoUHJpc20pXG59XG4iXSwibmFtZXMiOlsicmVmcmFjdG9ySnN4IiwicmVxdWlyZSIsInJlZnJhY3RvclR5cGVzY3JpcHQiLCJtb2R1bGUiLCJleHBvcnRzIiwidHN4IiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJyZWdpc3RlciIsInR5cGVzY3JpcHQiLCJ1dGlsIiwiY2xvbmUiLCJsYW5ndWFnZXMiLCJleHRlbmQiLCJ0YWciLCJwYXR0ZXJuIiwiUmVnRXhwIiwic291cmNlIiwiZmxhZ3MiLCJsb29rYmVoaW5kIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/tsx.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/tt2.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/tt2.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar refractorMarkupTemplating = __webpack_require__(/*! ./markup-templating.js */ \"(ssr)/./node_modules/refractor/lang/markup-templating.js\");\nmodule.exports = tt2;\ntt2.displayName = 'tt2';\ntt2.aliases = [];\nfunction tt2(Prism) {\n  Prism.register(refractorMarkupTemplating);\n  (function (Prism) {\n    Prism.languages.tt2 = Prism.languages.extend('clike', {\n      comment: /#.*|\\[%#[\\s\\S]*?%\\]/,\n      keyword: /\\b(?:BLOCK|CALL|CASE|CATCH|CLEAR|DEBUG|DEFAULT|ELSE|ELSIF|END|FILTER|FINAL|FOREACH|GET|IF|IN|INCLUDE|INSERT|LAST|MACRO|META|NEXT|PERL|PROCESS|RAWPERL|RETURN|SET|STOP|SWITCH|TAGS|THROW|TRY|UNLESS|USE|WHILE|WRAPPER)\\b/,\n      punctuation: /[[\\]{},()]/\n    });\n    Prism.languages.insertBefore('tt2', 'number', {\n      operator: /=[>=]?|!=?|<=?|>=?|&&|\\|\\|?|\\b(?:and|not|or)\\b/,\n      variable: {\n        pattern: /\\b[a-z]\\w*(?:\\s*\\.\\s*(?:\\d+|\\$?[a-z]\\w*))*\\b/i\n      }\n    });\n    Prism.languages.insertBefore('tt2', 'keyword', {\n      delimiter: {\n        pattern: /^(?:\\[%|%%)-?|-?%\\]$/,\n        alias: 'punctuation'\n      }\n    });\n    Prism.languages.insertBefore('tt2', 'string', {\n      'single-quoted-string': {\n        pattern: /'[^\\\\']*(?:\\\\[\\s\\S][^\\\\']*)*'/,\n        greedy: true,\n        alias: 'string'\n      },\n      'double-quoted-string': {\n        pattern: /\"[^\\\\\"]*(?:\\\\[\\s\\S][^\\\\\"]*)*\"/,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          variable: {\n            pattern: /\\$(?:[a-z]\\w*(?:\\.(?:\\d+|\\$?[a-z]\\w*))*)/i\n          }\n        }\n      }\n    }); // The different types of TT2 strings \"replace\" the C-like standard string\n    delete Prism.languages.tt2.string;\n    Prism.hooks.add('before-tokenize', function (env) {\n      var tt2Pattern = /\\[%[\\s\\S]+?%\\]/g;\n      Prism.languages['markup-templating'].buildPlaceholders(env, 'tt2', tt2Pattern);\n    });\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'tt2');\n    });\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvdHQyLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUNaLElBQUlBLHlCQUF5QixHQUFHQyxtQkFBTyxDQUFDLHdGQUF3QixDQUFDO0FBQ2pFQyxNQUFNLENBQUNDLE9BQU8sR0FBR0MsR0FBRztBQUNwQkEsR0FBRyxDQUFDQyxXQUFXLEdBQUcsS0FBSztBQUN2QkQsR0FBRyxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNoQixTQUFTRixHQUFHQSxDQUFDRyxLQUFLLEVBQUU7RUFDbEJBLEtBQUssQ0FBQ0MsUUFBUSxDQUFDUix5QkFBeUIsQ0FBQztFQUN4QyxDQUFDLFVBQVVPLEtBQUssRUFBRTtJQUNqQkEsS0FBSyxDQUFDRSxTQUFTLENBQUNMLEdBQUcsR0FBR0csS0FBSyxDQUFDRSxTQUFTLENBQUNDLE1BQU0sQ0FBQyxPQUFPLEVBQUU7TUFDcERDLE9BQU8sRUFBRSxxQkFBcUI7TUFDOUJDLE9BQU8sRUFDTCx5TkFBeU47TUFDM05DLFdBQVcsRUFBRTtJQUNmLENBQUMsQ0FBQztJQUNGTixLQUFLLENBQUNFLFNBQVMsQ0FBQ0ssWUFBWSxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUU7TUFDNUNDLFFBQVEsRUFBRSxnREFBZ0Q7TUFDMURDLFFBQVEsRUFBRTtRQUNSQyxPQUFPLEVBQUU7TUFDWDtJQUNGLENBQUMsQ0FBQztJQUNGVixLQUFLLENBQUNFLFNBQVMsQ0FBQ0ssWUFBWSxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUU7TUFDN0NJLFNBQVMsRUFBRTtRQUNURCxPQUFPLEVBQUUsc0JBQXNCO1FBQy9CRSxLQUFLLEVBQUU7TUFDVDtJQUNGLENBQUMsQ0FBQztJQUNGWixLQUFLLENBQUNFLFNBQVMsQ0FBQ0ssWUFBWSxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUU7TUFDNUMsc0JBQXNCLEVBQUU7UUFDdEJHLE9BQU8sRUFBRSwrQkFBK0I7UUFDeENHLE1BQU0sRUFBRSxJQUFJO1FBQ1pELEtBQUssRUFBRTtNQUNULENBQUM7TUFDRCxzQkFBc0IsRUFBRTtRQUN0QkYsT0FBTyxFQUFFLCtCQUErQjtRQUN4Q0csTUFBTSxFQUFFLElBQUk7UUFDWkQsS0FBSyxFQUFFLFFBQVE7UUFDZkUsTUFBTSxFQUFFO1VBQ05MLFFBQVEsRUFBRTtZQUNSQyxPQUFPLEVBQUU7VUFDWDtRQUNGO01BQ0Y7SUFDRixDQUFDLENBQUMsRUFBQztJQUNILE9BQU9WLEtBQUssQ0FBQ0UsU0FBUyxDQUFDTCxHQUFHLENBQUNrQixNQUFNO0lBQ2pDZixLQUFLLENBQUNnQixLQUFLLENBQUNDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxVQUFVQyxHQUFHLEVBQUU7TUFDaEQsSUFBSUMsVUFBVSxHQUFHLGlCQUFpQjtNQUNsQ25CLEtBQUssQ0FBQ0UsU0FBUyxDQUFDLG1CQUFtQixDQUFDLENBQUNrQixpQkFBaUIsQ0FDcERGLEdBQUcsRUFDSCxLQUFLLEVBQ0xDLFVBQ0YsQ0FBQztJQUNILENBQUMsQ0FBQztJQUNGbkIsS0FBSyxDQUFDZ0IsS0FBSyxDQUFDQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsVUFBVUMsR0FBRyxFQUFFO01BQy9DbEIsS0FBSyxDQUFDRSxTQUFTLENBQUMsbUJBQW1CLENBQUMsQ0FBQ21CLG9CQUFvQixDQUFDSCxHQUFHLEVBQUUsS0FBSyxDQUFDO0lBQ3ZFLENBQUMsQ0FBQztFQUNKLENBQUMsRUFBRWxCLEtBQUssQ0FBQztBQUNYIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcdHQyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xudmFyIHJlZnJhY3Rvck1hcmt1cFRlbXBsYXRpbmcgPSByZXF1aXJlKCcuL21hcmt1cC10ZW1wbGF0aW5nLmpzJylcbm1vZHVsZS5leHBvcnRzID0gdHQyXG50dDIuZGlzcGxheU5hbWUgPSAndHQyJ1xudHQyLmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24gdHQyKFByaXNtKSB7XG4gIFByaXNtLnJlZ2lzdGVyKHJlZnJhY3Rvck1hcmt1cFRlbXBsYXRpbmcpXG4gIDsoZnVuY3Rpb24gKFByaXNtKSB7XG4gICAgUHJpc20ubGFuZ3VhZ2VzLnR0MiA9IFByaXNtLmxhbmd1YWdlcy5leHRlbmQoJ2NsaWtlJywge1xuICAgICAgY29tbWVudDogLyMuKnxcXFslI1tcXHNcXFNdKj8lXFxdLyxcbiAgICAgIGtleXdvcmQ6XG4gICAgICAgIC9cXGIoPzpCTE9DS3xDQUxMfENBU0V8Q0FUQ0h8Q0xFQVJ8REVCVUd8REVGQVVMVHxFTFNFfEVMU0lGfEVORHxGSUxURVJ8RklOQUx8Rk9SRUFDSHxHRVR8SUZ8SU58SU5DTFVERXxJTlNFUlR8TEFTVHxNQUNST3xNRVRBfE5FWFR8UEVSTHxQUk9DRVNTfFJBV1BFUkx8UkVUVVJOfFNFVHxTVE9QfFNXSVRDSHxUQUdTfFRIUk9XfFRSWXxVTkxFU1N8VVNFfFdISUxFfFdSQVBQRVIpXFxiLyxcbiAgICAgIHB1bmN0dWF0aW9uOiAvW1tcXF17fSwoKV0vXG4gICAgfSlcbiAgICBQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCd0dDInLCAnbnVtYmVyJywge1xuICAgICAgb3BlcmF0b3I6IC89Wz49XT98IT0/fDw9P3w+PT98JiZ8XFx8XFx8P3xcXGIoPzphbmR8bm90fG9yKVxcYi8sXG4gICAgICB2YXJpYWJsZToge1xuICAgICAgICBwYXR0ZXJuOiAvXFxiW2Etel1cXHcqKD86XFxzKlxcLlxccyooPzpcXGQrfFxcJD9bYS16XVxcdyopKSpcXGIvaVxuICAgICAgfVxuICAgIH0pXG4gICAgUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgndHQyJywgJ2tleXdvcmQnLCB7XG4gICAgICBkZWxpbWl0ZXI6IHtcbiAgICAgICAgcGF0dGVybjogL14oPzpcXFslfCUlKS0/fC0/JVxcXSQvLFxuICAgICAgICBhbGlhczogJ3B1bmN0dWF0aW9uJ1xuICAgICAgfVxuICAgIH0pXG4gICAgUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgndHQyJywgJ3N0cmluZycsIHtcbiAgICAgICdzaW5nbGUtcXVvdGVkLXN0cmluZyc6IHtcbiAgICAgICAgcGF0dGVybjogLydbXlxcXFwnXSooPzpcXFxcW1xcc1xcU11bXlxcXFwnXSopKicvLFxuICAgICAgICBncmVlZHk6IHRydWUsXG4gICAgICAgIGFsaWFzOiAnc3RyaW5nJ1xuICAgICAgfSxcbiAgICAgICdkb3VibGUtcXVvdGVkLXN0cmluZyc6IHtcbiAgICAgICAgcGF0dGVybjogL1wiW15cXFxcXCJdKig/OlxcXFxbXFxzXFxTXVteXFxcXFwiXSopKlwiLyxcbiAgICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgICBhbGlhczogJ3N0cmluZycsXG4gICAgICAgIGluc2lkZToge1xuICAgICAgICAgIHZhcmlhYmxlOiB7XG4gICAgICAgICAgICBwYXR0ZXJuOiAvXFwkKD86W2Etel1cXHcqKD86XFwuKD86XFxkK3xcXCQ/W2Etel1cXHcqKSkqKS9pXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSkgLy8gVGhlIGRpZmZlcmVudCB0eXBlcyBvZiBUVDIgc3RyaW5ncyBcInJlcGxhY2VcIiB0aGUgQy1saWtlIHN0YW5kYXJkIHN0cmluZ1xuICAgIGRlbGV0ZSBQcmlzbS5sYW5ndWFnZXMudHQyLnN0cmluZ1xuICAgIFByaXNtLmhvb2tzLmFkZCgnYmVmb3JlLXRva2VuaXplJywgZnVuY3Rpb24gKGVudikge1xuICAgICAgdmFyIHR0MlBhdHRlcm4gPSAvXFxbJVtcXHNcXFNdKz8lXFxdL2dcbiAgICAgIFByaXNtLmxhbmd1YWdlc1snbWFya3VwLXRlbXBsYXRpbmcnXS5idWlsZFBsYWNlaG9sZGVycyhcbiAgICAgICAgZW52LFxuICAgICAgICAndHQyJyxcbiAgICAgICAgdHQyUGF0dGVyblxuICAgICAgKVxuICAgIH0pXG4gICAgUHJpc20uaG9va3MuYWRkKCdhZnRlci10b2tlbml6ZScsIGZ1bmN0aW9uIChlbnYpIHtcbiAgICAgIFByaXNtLmxhbmd1YWdlc1snbWFya3VwLXRlbXBsYXRpbmcnXS50b2tlbml6ZVBsYWNlaG9sZGVycyhlbnYsICd0dDInKVxuICAgIH0pXG4gIH0pKFByaXNtKVxufVxuIl0sIm5hbWVzIjpbInJlZnJhY3Rvck1hcmt1cFRlbXBsYXRpbmciLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsInR0MiIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwicmVnaXN0ZXIiLCJsYW5ndWFnZXMiLCJleHRlbmQiLCJjb21tZW50Iiwia2V5d29yZCIsInB1bmN0dWF0aW9uIiwiaW5zZXJ0QmVmb3JlIiwib3BlcmF0b3IiLCJ2YXJpYWJsZSIsInBhdHRlcm4iLCJkZWxpbWl0ZXIiLCJhbGlhcyIsImdyZWVkeSIsImluc2lkZSIsInN0cmluZyIsImhvb2tzIiwiYWRkIiwiZW52IiwidHQyUGF0dGVybiIsImJ1aWxkUGxhY2Vob2xkZXJzIiwidG9rZW5pemVQbGFjZWhvbGRlcnMiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/tt2.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/turtle.js":
/*!***********************************************!*\
  !*** ./node_modules/refractor/lang/turtle.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = turtle;\nturtle.displayName = 'turtle';\nturtle.aliases = [];\nfunction turtle(Prism) {\n  Prism.languages.turtle = {\n    comment: {\n      pattern: /#.*/,\n      greedy: true\n    },\n    'multiline-string': {\n      pattern: /\"\"\"(?:(?:\"\"?)?(?:[^\"\\\\]|\\\\.))*\"\"\"|'''(?:(?:''?)?(?:[^'\\\\]|\\\\.))*'''/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        comment: /#.*/\n      }\n    },\n    string: {\n      pattern: /\"(?:[^\\\\\"\\r\\n]|\\\\.)*\"|'(?:[^\\\\'\\r\\n]|\\\\.)*'/,\n      greedy: true\n    },\n    url: {\n      pattern: /<(?:[^\\x00-\\x20<>\"{}|^`\\\\]|\\\\(?:u[\\da-fA-F]{4}|U[\\da-fA-F]{8}))*>/,\n      greedy: true,\n      inside: {\n        punctuation: /[<>]/\n      }\n    },\n    \"function\": {\n      pattern: /(?:(?![-.\\d\\xB7])[-.\\w\\xB7\\xC0-\\uFFFD]+)?:(?:(?![-.])(?:[-.:\\w\\xC0-\\uFFFD]|%[\\da-f]{2}|\\\\.)+)?/i,\n      inside: {\n        'local-name': {\n          pattern: /([^:]*:)[\\s\\S]+/,\n          lookbehind: true\n        },\n        prefix: {\n          pattern: /[\\s\\S]+/,\n          inside: {\n            punctuation: /:/\n          }\n        }\n      }\n    },\n    number: /[+-]?\\b\\d+(?:\\.\\d*)?(?:e[+-]?\\d+)?/i,\n    punctuation: /[{}.,;()[\\]]|\\^\\^/,\n    \"boolean\": /\\b(?:false|true)\\b/,\n    keyword: [/(?:\\ba|@prefix|@base)\\b|=/, /\\b(?:base|graph|prefix)\\b/i],\n    tag: {\n      pattern: /@[a-z]+(?:-[a-z\\d]+)*/i,\n      inside: {\n        punctuation: /@/\n      }\n    }\n  };\n  Prism.languages.trig = Prism.languages['turtle'];\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvdHVydGxlLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsTUFBTTtBQUN2QkEsTUFBTSxDQUFDQyxXQUFXLEdBQUcsUUFBUTtBQUM3QkQsTUFBTSxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNuQixTQUFTRixNQUFNQSxDQUFDRyxLQUFLLEVBQUU7RUFDckJBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixNQUFNLEdBQUc7SUFDdkJLLE9BQU8sRUFBRTtNQUNQQyxPQUFPLEVBQUUsS0FBSztNQUNkQyxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0Qsa0JBQWtCLEVBQUU7TUFDbEJELE9BQU8sRUFDTCxxRUFBcUU7TUFDdkVDLE1BQU0sRUFBRSxJQUFJO01BQ1pDLEtBQUssRUFBRSxRQUFRO01BQ2ZDLE1BQU0sRUFBRTtRQUNOSixPQUFPLEVBQUU7TUFDWDtJQUNGLENBQUM7SUFDREssTUFBTSxFQUFFO01BQ05KLE9BQU8sRUFBRSw2Q0FBNkM7TUFDdERDLE1BQU0sRUFBRTtJQUNWLENBQUM7SUFDREksR0FBRyxFQUFFO01BQ0hMLE9BQU8sRUFDTCxtRUFBbUU7TUFDckVDLE1BQU0sRUFBRSxJQUFJO01BQ1pFLE1BQU0sRUFBRTtRQUNORyxXQUFXLEVBQUU7TUFDZjtJQUNGLENBQUM7SUFDRCxZQUFVO01BQ1JOLE9BQU8sRUFDTCxpR0FBaUc7TUFDbkdHLE1BQU0sRUFBRTtRQUNOLFlBQVksRUFBRTtVQUNaSCxPQUFPLEVBQUUsaUJBQWlCO1VBQzFCTyxVQUFVLEVBQUU7UUFDZCxDQUFDO1FBQ0RDLE1BQU0sRUFBRTtVQUNOUixPQUFPLEVBQUUsU0FBUztVQUNsQkcsTUFBTSxFQUFFO1lBQ05HLFdBQVcsRUFBRTtVQUNmO1FBQ0Y7TUFDRjtJQUNGLENBQUM7SUFDREcsTUFBTSxFQUFFLHFDQUFxQztJQUM3Q0gsV0FBVyxFQUFFLG1CQUFtQjtJQUNoQyxXQUFTLG9CQUFvQjtJQUM3QkksT0FBTyxFQUFFLENBQUMsMkJBQTJCLEVBQUUsNEJBQTRCLENBQUM7SUFDcEVDLEdBQUcsRUFBRTtNQUNIWCxPQUFPLEVBQUUsd0JBQXdCO01BQ2pDRyxNQUFNLEVBQUU7UUFDTkcsV0FBVyxFQUFFO01BQ2Y7SUFDRjtFQUNGLENBQUM7RUFDRFQsS0FBSyxDQUFDQyxTQUFTLENBQUNjLElBQUksR0FBR2YsS0FBSyxDQUFDQyxTQUFTLENBQUMsUUFBUSxDQUFDO0FBQ2xEIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcdHVydGxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IHR1cnRsZVxudHVydGxlLmRpc3BsYXlOYW1lID0gJ3R1cnRsZSdcbnR1cnRsZS5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIHR1cnRsZShQcmlzbSkge1xuICBQcmlzbS5sYW5ndWFnZXMudHVydGxlID0ge1xuICAgIGNvbW1lbnQ6IHtcbiAgICAgIHBhdHRlcm46IC8jLiovLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICAnbXVsdGlsaW5lLXN0cmluZyc6IHtcbiAgICAgIHBhdHRlcm46XG4gICAgICAgIC9cIlwiXCIoPzooPzpcIlwiPyk/KD86W15cIlxcXFxdfFxcXFwuKSkqXCJcIlwifCcnJyg/Oig/OicnPyk/KD86W14nXFxcXF18XFxcXC4pKSonJycvLFxuICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgYWxpYXM6ICdzdHJpbmcnLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgIGNvbW1lbnQ6IC8jLiovXG4gICAgICB9XG4gICAgfSxcbiAgICBzdHJpbmc6IHtcbiAgICAgIHBhdHRlcm46IC9cIig/OlteXFxcXFwiXFxyXFxuXXxcXFxcLikqXCJ8Jyg/OlteXFxcXCdcXHJcXG5dfFxcXFwuKSonLyxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgdXJsOiB7XG4gICAgICBwYXR0ZXJuOlxuICAgICAgICAvPCg/OlteXFx4MDAtXFx4MjA8Plwie318XmBcXFxcXXxcXFxcKD86dVtcXGRhLWZBLUZdezR9fFVbXFxkYS1mQS1GXXs4fSkpKj4vLFxuICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgIHB1bmN0dWF0aW9uOiAvWzw+XS9cbiAgICAgIH1cbiAgICB9LFxuICAgIGZ1bmN0aW9uOiB7XG4gICAgICBwYXR0ZXJuOlxuICAgICAgICAvKD86KD8hWy0uXFxkXFx4QjddKVstLlxcd1xceEI3XFx4QzAtXFx1RkZGRF0rKT86KD86KD8hWy0uXSkoPzpbLS46XFx3XFx4QzAtXFx1RkZGRF18JVtcXGRhLWZdezJ9fFxcXFwuKSspPy9pLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgICdsb2NhbC1uYW1lJzoge1xuICAgICAgICAgIHBhdHRlcm46IC8oW146XSo6KVtcXHNcXFNdKy8sXG4gICAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBwcmVmaXg6IHtcbiAgICAgICAgICBwYXR0ZXJuOiAvW1xcc1xcU10rLyxcbiAgICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICAgIHB1bmN0dWF0aW9uOiAvOi9cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIG51bWJlcjogL1srLV0/XFxiXFxkKyg/OlxcLlxcZCopPyg/OmVbKy1dP1xcZCspPy9pLFxuICAgIHB1bmN0dWF0aW9uOiAvW3t9Liw7KClbXFxdXXxcXF5cXF4vLFxuICAgIGJvb2xlYW46IC9cXGIoPzpmYWxzZXx0cnVlKVxcYi8sXG4gICAga2V5d29yZDogWy8oPzpcXGJhfEBwcmVmaXh8QGJhc2UpXFxifD0vLCAvXFxiKD86YmFzZXxncmFwaHxwcmVmaXgpXFxiL2ldLFxuICAgIHRhZzoge1xuICAgICAgcGF0dGVybjogL0BbYS16XSsoPzotW2EtelxcZF0rKSovaSxcbiAgICAgIGluc2lkZToge1xuICAgICAgICBwdW5jdHVhdGlvbjogL0AvXG4gICAgICB9XG4gICAgfVxuICB9XG4gIFByaXNtLmxhbmd1YWdlcy50cmlnID0gUHJpc20ubGFuZ3VhZ2VzWyd0dXJ0bGUnXVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJ0dXJ0bGUiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImxhbmd1YWdlcyIsImNvbW1lbnQiLCJwYXR0ZXJuIiwiZ3JlZWR5IiwiYWxpYXMiLCJpbnNpZGUiLCJzdHJpbmciLCJ1cmwiLCJwdW5jdHVhdGlvbiIsImxvb2tiZWhpbmQiLCJwcmVmaXgiLCJudW1iZXIiLCJrZXl3b3JkIiwidGFnIiwidHJpZyJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/turtle.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/twig.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/twig.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar refractorMarkupTemplating = __webpack_require__(/*! ./markup-templating.js */ \"(ssr)/./node_modules/refractor/lang/markup-templating.js\");\nmodule.exports = twig;\ntwig.displayName = 'twig';\ntwig.aliases = [];\nfunction twig(Prism) {\n  Prism.register(refractorMarkupTemplating);\n  Prism.languages.twig = {\n    comment: /^\\{#[\\s\\S]*?#\\}$/,\n    'tag-name': {\n      pattern: /(^\\{%-?\\s*)\\w+/,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    delimiter: {\n      pattern: /^\\{[{%]-?|-?[%}]\\}$/,\n      alias: 'punctuation'\n    },\n    string: {\n      pattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      inside: {\n        punctuation: /^['\"]|['\"]$/\n      }\n    },\n    keyword: /\\b(?:even|if|odd)\\b/,\n    \"boolean\": /\\b(?:false|null|true)\\b/,\n    number: /\\b0x[\\dA-Fa-f]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,\n    operator: [{\n      pattern: /(\\s)(?:and|b-and|b-or|b-xor|ends with|in|is|matches|not|or|same as|starts with)(?=\\s)/,\n      lookbehind: true\n    }, /[=<>]=?|!=|\\*\\*?|\\/\\/?|\\?:?|[-+~%|]/],\n    punctuation: /[()\\[\\]{}:.,]/\n  };\n  Prism.hooks.add('before-tokenize', function (env) {\n    if (env.language !== 'twig') {\n      return;\n    }\n    var pattern = /\\{(?:#[\\s\\S]*?#|%[\\s\\S]*?%|\\{[\\s\\S]*?\\})\\}/g;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'twig', pattern);\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'twig');\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvdHdpZy5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFDWixJQUFJQSx5QkFBeUIsR0FBR0MsbUJBQU8sQ0FBQyx3RkFBd0IsQ0FBQztBQUNqRUMsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLElBQUk7QUFDckJBLElBQUksQ0FBQ0MsV0FBVyxHQUFHLE1BQU07QUFDekJELElBQUksQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDakIsU0FBU0YsSUFBSUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ25CQSxLQUFLLENBQUNDLFFBQVEsQ0FBQ1IseUJBQXlCLENBQUM7RUFDekNPLEtBQUssQ0FBQ0UsU0FBUyxDQUFDTCxJQUFJLEdBQUc7SUFDckJNLE9BQU8sRUFBRSxrQkFBa0I7SUFDM0IsVUFBVSxFQUFFO01BQ1ZDLE9BQU8sRUFBRSxnQkFBZ0I7TUFDekJDLFVBQVUsRUFBRSxJQUFJO01BQ2hCQyxLQUFLLEVBQUU7SUFDVCxDQUFDO0lBQ0RDLFNBQVMsRUFBRTtNQUNUSCxPQUFPLEVBQUUscUJBQXFCO01BQzlCRSxLQUFLLEVBQUU7SUFDVCxDQUFDO0lBQ0RFLE1BQU0sRUFBRTtNQUNOSixPQUFPLEVBQUUsaUNBQWlDO01BQzFDSyxNQUFNLEVBQUU7UUFDTkMsV0FBVyxFQUFFO01BQ2Y7SUFDRixDQUFDO0lBQ0RDLE9BQU8sRUFBRSxxQkFBcUI7SUFDOUIsV0FBUyx5QkFBeUI7SUFDbENDLE1BQU0sRUFBRSw4REFBOEQ7SUFDdEVDLFFBQVEsRUFBRSxDQUNSO01BQ0VULE9BQU8sRUFDTCx1RkFBdUY7TUFDekZDLFVBQVUsRUFBRTtJQUNkLENBQUMsRUFDRCxxQ0FBcUMsQ0FDdEM7SUFDREssV0FBVyxFQUFFO0VBQ2YsQ0FBQztFQUNEVixLQUFLLENBQUNjLEtBQUssQ0FBQ0MsR0FBRyxDQUFDLGlCQUFpQixFQUFFLFVBQVVDLEdBQUcsRUFBRTtJQUNoRCxJQUFJQSxHQUFHLENBQUNDLFFBQVEsS0FBSyxNQUFNLEVBQUU7TUFDM0I7SUFDRjtJQUNBLElBQUliLE9BQU8sR0FBRyw2Q0FBNkM7SUFDM0RKLEtBQUssQ0FBQ0UsU0FBUyxDQUFDLG1CQUFtQixDQUFDLENBQUNnQixpQkFBaUIsQ0FBQ0YsR0FBRyxFQUFFLE1BQU0sRUFBRVosT0FBTyxDQUFDO0VBQzlFLENBQUMsQ0FBQztFQUNGSixLQUFLLENBQUNjLEtBQUssQ0FBQ0MsR0FBRyxDQUFDLGdCQUFnQixFQUFFLFVBQVVDLEdBQUcsRUFBRTtJQUMvQ2hCLEtBQUssQ0FBQ0UsU0FBUyxDQUFDLG1CQUFtQixDQUFDLENBQUNpQixvQkFBb0IsQ0FBQ0gsR0FBRyxFQUFFLE1BQU0sQ0FBQztFQUN4RSxDQUFDLENBQUM7QUFDSiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXHR3aWcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG52YXIgcmVmcmFjdG9yTWFya3VwVGVtcGxhdGluZyA9IHJlcXVpcmUoJy4vbWFya3VwLXRlbXBsYXRpbmcuanMnKVxubW9kdWxlLmV4cG9ydHMgPSB0d2lnXG50d2lnLmRpc3BsYXlOYW1lID0gJ3R3aWcnXG50d2lnLmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24gdHdpZyhQcmlzbSkge1xuICBQcmlzbS5yZWdpc3RlcihyZWZyYWN0b3JNYXJrdXBUZW1wbGF0aW5nKVxuICBQcmlzbS5sYW5ndWFnZXMudHdpZyA9IHtcbiAgICBjb21tZW50OiAvXlxceyNbXFxzXFxTXSo/I1xcfSQvLFxuICAgICd0YWctbmFtZSc6IHtcbiAgICAgIHBhdHRlcm46IC8oXlxceyUtP1xccyopXFx3Ky8sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgYWxpYXM6ICdrZXl3b3JkJ1xuICAgIH0sXG4gICAgZGVsaW1pdGVyOiB7XG4gICAgICBwYXR0ZXJuOiAvXlxce1t7JV0tP3wtP1slfV1cXH0kLyxcbiAgICAgIGFsaWFzOiAncHVuY3R1YXRpb24nXG4gICAgfSxcbiAgICBzdHJpbmc6IHtcbiAgICAgIHBhdHRlcm46IC8oXCJ8JykoPzpcXFxcLnwoPyFcXDEpW15cXFxcXFxyXFxuXSkqXFwxLyxcbiAgICAgIGluc2lkZToge1xuICAgICAgICBwdW5jdHVhdGlvbjogL15bJ1wiXXxbJ1wiXSQvXG4gICAgICB9XG4gICAgfSxcbiAgICBrZXl3b3JkOiAvXFxiKD86ZXZlbnxpZnxvZGQpXFxiLyxcbiAgICBib29sZWFuOiAvXFxiKD86ZmFsc2V8bnVsbHx0cnVlKVxcYi8sXG4gICAgbnVtYmVyOiAvXFxiMHhbXFxkQS1GYS1mXSt8KD86XFxiXFxkKyg/OlxcLlxcZCopP3xcXEJcXC5cXGQrKSg/OltFZV1bLStdP1xcZCspPy8sXG4gICAgb3BlcmF0b3I6IFtcbiAgICAgIHtcbiAgICAgICAgcGF0dGVybjpcbiAgICAgICAgICAvKFxccykoPzphbmR8Yi1hbmR8Yi1vcnxiLXhvcnxlbmRzIHdpdGh8aW58aXN8bWF0Y2hlc3xub3R8b3J8c2FtZSBhc3xzdGFydHMgd2l0aCkoPz1cXHMpLyxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIC9bPTw+XT0/fCE9fFxcKlxcKj98XFwvXFwvP3xcXD86P3xbLSt+JXxdL1xuICAgIF0sXG4gICAgcHVuY3R1YXRpb246IC9bKClcXFtcXF17fTouLF0vXG4gIH1cbiAgUHJpc20uaG9va3MuYWRkKCdiZWZvcmUtdG9rZW5pemUnLCBmdW5jdGlvbiAoZW52KSB7XG4gICAgaWYgKGVudi5sYW5ndWFnZSAhPT0gJ3R3aWcnKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgdmFyIHBhdHRlcm4gPSAvXFx7KD86I1tcXHNcXFNdKj8jfCVbXFxzXFxTXSo/JXxcXHtbXFxzXFxTXSo/XFx9KVxcfS9nXG4gICAgUHJpc20ubGFuZ3VhZ2VzWydtYXJrdXAtdGVtcGxhdGluZyddLmJ1aWxkUGxhY2Vob2xkZXJzKGVudiwgJ3R3aWcnLCBwYXR0ZXJuKVxuICB9KVxuICBQcmlzbS5ob29rcy5hZGQoJ2FmdGVyLXRva2VuaXplJywgZnVuY3Rpb24gKGVudikge1xuICAgIFByaXNtLmxhbmd1YWdlc1snbWFya3VwLXRlbXBsYXRpbmcnXS50b2tlbml6ZVBsYWNlaG9sZGVycyhlbnYsICd0d2lnJylcbiAgfSlcbn1cbiJdLCJuYW1lcyI6WyJyZWZyYWN0b3JNYXJrdXBUZW1wbGF0aW5nIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJ0d2lnIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJyZWdpc3RlciIsImxhbmd1YWdlcyIsImNvbW1lbnQiLCJwYXR0ZXJuIiwibG9va2JlaGluZCIsImFsaWFzIiwiZGVsaW1pdGVyIiwic3RyaW5nIiwiaW5zaWRlIiwicHVuY3R1YXRpb24iLCJrZXl3b3JkIiwibnVtYmVyIiwib3BlcmF0b3IiLCJob29rcyIsImFkZCIsImVudiIsImxhbmd1YWdlIiwiYnVpbGRQbGFjZWhvbGRlcnMiLCJ0b2tlbml6ZVBsYWNlaG9sZGVycyJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/twig.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/typescript.js":
/*!***************************************************!*\
  !*** ./node_modules/refractor/lang/typescript.js ***!
  \***************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = typescript;\ntypescript.displayName = 'typescript';\ntypescript.aliases = ['ts'];\nfunction typescript(Prism) {\n  ;\n  (function (Prism) {\n    Prism.languages.typescript = Prism.languages.extend('javascript', {\n      'class-name': {\n        pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n        lookbehind: true,\n        greedy: true,\n        inside: null // see below\n      },\n\n      builtin: /\\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\\b/\n    }); // The keywords TypeScript adds to JavaScript\n    Prism.languages.typescript.keyword.push(/\\b(?:abstract|declare|is|keyof|readonly|require)\\b/,\n    // keywords that have to be followed by an identifier\n    /\\b(?:asserts|infer|interface|module|namespace|type)\\b(?=\\s*(?:[{_$a-zA-Z\\xA0-\\uFFFF]|$))/,\n    // This is for `import type *, {}`\n    /\\btype\\b(?=\\s*(?:[\\{*]|$))/); // doesn't work with TS because TS is too complex\n    delete Prism.languages.typescript['parameter'];\n    delete Prism.languages.typescript['literal-property']; // a version of typescript specifically for highlighting types\n    var typeInside = Prism.languages.extend('typescript', {});\n    delete typeInside['class-name'];\n    Prism.languages.typescript['class-name'].inside = typeInside;\n    Prism.languages.insertBefore('typescript', 'function', {\n      decorator: {\n        pattern: /@[$\\w\\xA0-\\uFFFF]+/,\n        inside: {\n          at: {\n            pattern: /^@/,\n            alias: 'operator'\n          },\n          \"function\": /^[\\s\\S]+/\n        }\n      },\n      'generic-function': {\n        // e.g. foo<T extends \"bar\" | \"baz\">( ...\n        pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n        greedy: true,\n        inside: {\n          \"function\": /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\n          generic: {\n            pattern: /<[\\s\\S]+/,\n            // everything after the first <\n            alias: 'class-name',\n            inside: typeInside\n          }\n        }\n      }\n    });\n    Prism.languages.ts = Prism.languages.typescript;\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvdHlwZXNjcmlwdC5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLFVBQVU7QUFDM0JBLFVBQVUsQ0FBQ0MsV0FBVyxHQUFHLFlBQVk7QUFDckNELFVBQVUsQ0FBQ0UsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDO0FBQzNCLFNBQVNGLFVBQVVBLENBQUNHLEtBQUssRUFBRTtFQUN6QjtFQUFDLENBQUMsVUFBVUEsS0FBSyxFQUFFO0lBQ2pCQSxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osVUFBVSxHQUFHRyxLQUFLLENBQUNDLFNBQVMsQ0FBQ0MsTUFBTSxDQUFDLFlBQVksRUFBRTtNQUNoRSxZQUFZLEVBQUU7UUFDWkMsT0FBTyxFQUNMLDhLQUE4SztRQUNoTEMsVUFBVSxFQUFFLElBQUk7UUFDaEJDLE1BQU0sRUFBRSxJQUFJO1FBQ1pDLE1BQU0sRUFBRSxJQUFJLENBQUM7TUFDZixDQUFDOztNQUNEQyxPQUFPLEVBQ0w7SUFDSixDQUFDLENBQUMsRUFBQztJQUNIUCxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osVUFBVSxDQUFDVyxPQUFPLENBQUNDLElBQUksQ0FDckMsb0RBQW9EO0lBQUU7SUFDdEQsMEZBQTBGO0lBQUU7SUFDNUYsNEJBQ0YsQ0FBQyxFQUFDO0lBQ0YsT0FBT1QsS0FBSyxDQUFDQyxTQUFTLENBQUNKLFVBQVUsQ0FBQyxXQUFXLENBQUM7SUFDOUMsT0FBT0csS0FBSyxDQUFDQyxTQUFTLENBQUNKLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFDO0lBQ3RELElBQUlhLFVBQVUsR0FBR1YsS0FBSyxDQUFDQyxTQUFTLENBQUNDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDekQsT0FBT1EsVUFBVSxDQUFDLFlBQVksQ0FBQztJQUMvQlYsS0FBSyxDQUFDQyxTQUFTLENBQUNKLFVBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQ1MsTUFBTSxHQUFHSSxVQUFVO0lBQzVEVixLQUFLLENBQUNDLFNBQVMsQ0FBQ1UsWUFBWSxDQUFDLFlBQVksRUFBRSxVQUFVLEVBQUU7TUFDckRDLFNBQVMsRUFBRTtRQUNUVCxPQUFPLEVBQUUsb0JBQW9CO1FBQzdCRyxNQUFNLEVBQUU7VUFDTk8sRUFBRSxFQUFFO1lBQ0ZWLE9BQU8sRUFBRSxJQUFJO1lBQ2JXLEtBQUssRUFBRTtVQUNULENBQUM7VUFDRCxZQUFVO1FBQ1o7TUFDRixDQUFDO01BQ0Qsa0JBQWtCLEVBQUU7UUFDbEI7UUFDQVgsT0FBTyxFQUNMLHdHQUF3RztRQUMxR0UsTUFBTSxFQUFFLElBQUk7UUFDWkMsTUFBTSxFQUFFO1VBQ04sWUFBVSwyREFBMkQ7VUFDckVTLE9BQU8sRUFBRTtZQUNQWixPQUFPLEVBQUUsVUFBVTtZQUNuQjtZQUNBVyxLQUFLLEVBQUUsWUFBWTtZQUNuQlIsTUFBTSxFQUFFSTtVQUNWO1FBQ0Y7TUFDRjtJQUNGLENBQUMsQ0FBQztJQUNGVixLQUFLLENBQUNDLFNBQVMsQ0FBQ2UsRUFBRSxHQUFHaEIsS0FBSyxDQUFDQyxTQUFTLENBQUNKLFVBQVU7RUFDakQsQ0FBQyxFQUFFRyxLQUFLLENBQUM7QUFDWCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXHR5cGVzY3JpcHQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gdHlwZXNjcmlwdFxudHlwZXNjcmlwdC5kaXNwbGF5TmFtZSA9ICd0eXBlc2NyaXB0J1xudHlwZXNjcmlwdC5hbGlhc2VzID0gWyd0cyddXG5mdW5jdGlvbiB0eXBlc2NyaXB0KFByaXNtKSB7XG4gIDsoZnVuY3Rpb24gKFByaXNtKSB7XG4gICAgUHJpc20ubGFuZ3VhZ2VzLnR5cGVzY3JpcHQgPSBQcmlzbS5sYW5ndWFnZXMuZXh0ZW5kKCdqYXZhc2NyaXB0Jywge1xuICAgICAgJ2NsYXNzLW5hbWUnOiB7XG4gICAgICAgIHBhdHRlcm46XG4gICAgICAgICAgLyhcXGIoPzpjbGFzc3xleHRlbmRzfGltcGxlbWVudHN8aW5zdGFuY2VvZnxpbnRlcmZhY2V8bmV3fHR5cGUpXFxzKykoPyFrZXlvZlxcYikoPyFcXHMpW18kYS16QS1aXFx4QTAtXFx1RkZGRl0oPzooPyFcXHMpWyRcXHdcXHhBMC1cXHVGRkZGXSkqKD86XFxzKjwoPzpbXjw+XXw8KD86W148Pl18PFtePD5dKj4pKj4pKj4pPy8sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgICAgaW5zaWRlOiBudWxsIC8vIHNlZSBiZWxvd1xuICAgICAgfSxcbiAgICAgIGJ1aWx0aW46XG4gICAgICAgIC9cXGIoPzpBcnJheXxGdW5jdGlvbnxQcm9taXNlfGFueXxib29sZWFufGNvbnNvbGV8bmV2ZXJ8bnVtYmVyfHN0cmluZ3xzeW1ib2x8dW5rbm93bilcXGIvXG4gICAgfSkgLy8gVGhlIGtleXdvcmRzIFR5cGVTY3JpcHQgYWRkcyB0byBKYXZhU2NyaXB0XG4gICAgUHJpc20ubGFuZ3VhZ2VzLnR5cGVzY3JpcHQua2V5d29yZC5wdXNoKFxuICAgICAgL1xcYig/OmFic3RyYWN0fGRlY2xhcmV8aXN8a2V5b2Z8cmVhZG9ubHl8cmVxdWlyZSlcXGIvLCAvLyBrZXl3b3JkcyB0aGF0IGhhdmUgdG8gYmUgZm9sbG93ZWQgYnkgYW4gaWRlbnRpZmllclxuICAgICAgL1xcYig/OmFzc2VydHN8aW5mZXJ8aW50ZXJmYWNlfG1vZHVsZXxuYW1lc3BhY2V8dHlwZSlcXGIoPz1cXHMqKD86W3tfJGEtekEtWlxceEEwLVxcdUZGRkZdfCQpKS8sIC8vIFRoaXMgaXMgZm9yIGBpbXBvcnQgdHlwZSAqLCB7fWBcbiAgICAgIC9cXGJ0eXBlXFxiKD89XFxzKig/OltcXHsqXXwkKSkvXG4gICAgKSAvLyBkb2Vzbid0IHdvcmsgd2l0aCBUUyBiZWNhdXNlIFRTIGlzIHRvbyBjb21wbGV4XG4gICAgZGVsZXRlIFByaXNtLmxhbmd1YWdlcy50eXBlc2NyaXB0WydwYXJhbWV0ZXInXVxuICAgIGRlbGV0ZSBQcmlzbS5sYW5ndWFnZXMudHlwZXNjcmlwdFsnbGl0ZXJhbC1wcm9wZXJ0eSddIC8vIGEgdmVyc2lvbiBvZiB0eXBlc2NyaXB0IHNwZWNpZmljYWxseSBmb3IgaGlnaGxpZ2h0aW5nIHR5cGVzXG4gICAgdmFyIHR5cGVJbnNpZGUgPSBQcmlzbS5sYW5ndWFnZXMuZXh0ZW5kKCd0eXBlc2NyaXB0Jywge30pXG4gICAgZGVsZXRlIHR5cGVJbnNpZGVbJ2NsYXNzLW5hbWUnXVxuICAgIFByaXNtLmxhbmd1YWdlcy50eXBlc2NyaXB0WydjbGFzcy1uYW1lJ10uaW5zaWRlID0gdHlwZUluc2lkZVxuICAgIFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ3R5cGVzY3JpcHQnLCAnZnVuY3Rpb24nLCB7XG4gICAgICBkZWNvcmF0b3I6IHtcbiAgICAgICAgcGF0dGVybjogL0BbJFxcd1xceEEwLVxcdUZGRkZdKy8sXG4gICAgICAgIGluc2lkZToge1xuICAgICAgICAgIGF0OiB7XG4gICAgICAgICAgICBwYXR0ZXJuOiAvXkAvLFxuICAgICAgICAgICAgYWxpYXM6ICdvcGVyYXRvcidcbiAgICAgICAgICB9LFxuICAgICAgICAgIGZ1bmN0aW9uOiAvXltcXHNcXFNdKy9cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgICdnZW5lcmljLWZ1bmN0aW9uJzoge1xuICAgICAgICAvLyBlLmcuIGZvbzxUIGV4dGVuZHMgXCJiYXJcIiB8IFwiYmF6XCI+KCAuLi5cbiAgICAgICAgcGF0dGVybjpcbiAgICAgICAgICAvIz8oPyFcXHMpW18kYS16QS1aXFx4QTAtXFx1RkZGRl0oPzooPyFcXHMpWyRcXHdcXHhBMC1cXHVGRkZGXSkqXFxzKjwoPzpbXjw+XXw8KD86W148Pl18PFtePD5dKj4pKj4pKj4oPz1cXHMqXFwoKS8sXG4gICAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgZnVuY3Rpb246IC9eIz8oPyFcXHMpW18kYS16QS1aXFx4QTAtXFx1RkZGRl0oPzooPyFcXHMpWyRcXHdcXHhBMC1cXHVGRkZGXSkqLyxcbiAgICAgICAgICBnZW5lcmljOiB7XG4gICAgICAgICAgICBwYXR0ZXJuOiAvPFtcXHNcXFNdKy8sXG4gICAgICAgICAgICAvLyBldmVyeXRoaW5nIGFmdGVyIHRoZSBmaXJzdCA8XG4gICAgICAgICAgICBhbGlhczogJ2NsYXNzLW5hbWUnLFxuICAgICAgICAgICAgaW5zaWRlOiB0eXBlSW5zaWRlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgICBQcmlzbS5sYW5ndWFnZXMudHMgPSBQcmlzbS5sYW5ndWFnZXMudHlwZXNjcmlwdFxuICB9KShQcmlzbSlcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwidHlwZXNjcmlwdCIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwiZXh0ZW5kIiwicGF0dGVybiIsImxvb2tiZWhpbmQiLCJncmVlZHkiLCJpbnNpZGUiLCJidWlsdGluIiwia2V5d29yZCIsInB1c2giLCJ0eXBlSW5zaWRlIiwiaW5zZXJ0QmVmb3JlIiwiZGVjb3JhdG9yIiwiYXQiLCJhbGlhcyIsImdlbmVyaWMiLCJ0cyJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/typescript.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/typoscript.js":
/*!***************************************************!*\
  !*** ./node_modules/refractor/lang/typoscript.js ***!
  \***************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = typoscript;\ntyposcript.displayName = 'typoscript';\ntyposcript.aliases = ['tsconfig'];\nfunction typoscript(Prism) {\n  ;\n  (function (Prism) {\n    var keywords = /\\b(?:ACT|ACTIFSUB|CARRAY|CASE|CLEARGIF|COA|COA_INT|CONSTANTS|CONTENT|CUR|EDITPANEL|EFFECT|EXT|FILE|FLUIDTEMPLATE|FORM|FRAME|FRAMESET|GIFBUILDER|GMENU|GMENU_FOLDOUT|GMENU_LAYERS|GP|HMENU|HRULER|HTML|IENV|IFSUB|IMAGE|IMGMENU|IMGMENUITEM|IMGTEXT|IMG_RESOURCE|INCLUDE_TYPOSCRIPT|JSMENU|JSMENUITEM|LLL|LOAD_REGISTER|NO|PAGE|RECORDS|RESTORE_REGISTER|TEMPLATE|TEXT|TMENU|TMENUITEM|TMENU_LAYERS|USER|USER_INT|_GIFBUILDER|global|globalString|globalVar)\\b/;\n    Prism.languages.typoscript = {\n      comment: [{\n        // multiline comments /* */\n        pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n        lookbehind: true\n      }, {\n        // double-slash comments - ignored when backslashes or colon is found in front\n        // also ignored whenever directly after an equal-sign, because it would probably be an url without protocol\n        pattern: /(^|[^\\\\:= \\t]|(?:^|[^= \\t])[ \\t]+)\\/\\/.*/,\n        lookbehind: true,\n        greedy: true\n      }, {\n        // hash comments - ignored when leading quote is found for hex colors in strings\n        pattern: /(^|[^\"'])#.*/,\n        lookbehind: true,\n        greedy: true\n      }],\n      \"function\": [{\n        // old include style\n        pattern: /<INCLUDE_TYPOSCRIPT:\\s*source\\s*=\\s*(?:\"[^\"\\r\\n]*\"|'[^'\\r\\n]*')\\s*>/,\n        inside: {\n          string: {\n            pattern: /\"[^\"\\r\\n]*\"|'[^'\\r\\n]*'/,\n            inside: {\n              keyword: keywords\n            }\n          },\n          keyword: {\n            pattern: /INCLUDE_TYPOSCRIPT/\n          }\n        }\n      }, {\n        // new include style\n        pattern: /@import\\s*(?:\"[^\"\\r\\n]*\"|'[^'\\r\\n]*')/,\n        inside: {\n          string: /\"[^\"\\r\\n]*\"|'[^'\\r\\n]*'/\n        }\n      }],\n      string: {\n        pattern: /^([^=]*=[< ]?)(?:(?!\\]\\n).)*/,\n        lookbehind: true,\n        inside: {\n          \"function\": /\\{\\$.*\\}/,\n          // constants include\n          keyword: keywords,\n          number: /^\\d+$/,\n          punctuation: /[,|:]/\n        }\n      },\n      keyword: keywords,\n      number: {\n        // special highlighting for indexes of arrays in tags\n        pattern: /\\b\\d+\\s*[.{=]/,\n        inside: {\n          operator: /[.{=]/\n        }\n      },\n      tag: {\n        pattern: /\\.?[-\\w\\\\]+\\.?/,\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      punctuation: /[{}[\\];(),.:|]/,\n      operator: /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/\n    };\n    Prism.languages.tsconfig = Prism.languages.typoscript;\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvdHlwb3NjcmlwdC5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLFVBQVU7QUFDM0JBLFVBQVUsQ0FBQ0MsV0FBVyxHQUFHLFlBQVk7QUFDckNELFVBQVUsQ0FBQ0UsT0FBTyxHQUFHLENBQUMsVUFBVSxDQUFDO0FBQ2pDLFNBQVNGLFVBQVVBLENBQUNHLEtBQUssRUFBRTtFQUN6QjtFQUFDLENBQUMsVUFBVUEsS0FBSyxFQUFFO0lBQ2pCLElBQUlDLFFBQVEsR0FDViwrYkFBK2I7SUFDamNELEtBQUssQ0FBQ0UsU0FBUyxDQUFDTCxVQUFVLEdBQUc7TUFDM0JNLE9BQU8sRUFBRSxDQUNQO1FBQ0U7UUFDQUMsT0FBTyxFQUFFLGlDQUFpQztRQUMxQ0MsVUFBVSxFQUFFO01BQ2QsQ0FBQyxFQUNEO1FBQ0U7UUFDQTtRQUNBRCxPQUFPLEVBQUUsMENBQTBDO1FBQ25EQyxVQUFVLEVBQUUsSUFBSTtRQUNoQkMsTUFBTSxFQUFFO01BQ1YsQ0FBQyxFQUNEO1FBQ0U7UUFDQUYsT0FBTyxFQUFFLGNBQWM7UUFDdkJDLFVBQVUsRUFBRSxJQUFJO1FBQ2hCQyxNQUFNLEVBQUU7TUFDVixDQUFDLENBQ0Y7TUFDRCxZQUFVLENBQ1I7UUFDRTtRQUNBRixPQUFPLEVBQ0wscUVBQXFFO1FBQ3ZFRyxNQUFNLEVBQUU7VUFDTkMsTUFBTSxFQUFFO1lBQ05KLE9BQU8sRUFBRSx5QkFBeUI7WUFDbENHLE1BQU0sRUFBRTtjQUNORSxPQUFPLEVBQUVSO1lBQ1g7VUFDRixDQUFDO1VBQ0RRLE9BQU8sRUFBRTtZQUNQTCxPQUFPLEVBQUU7VUFDWDtRQUNGO01BQ0YsQ0FBQyxFQUNEO1FBQ0U7UUFDQUEsT0FBTyxFQUFFLHVDQUF1QztRQUNoREcsTUFBTSxFQUFFO1VBQ05DLE1BQU0sRUFBRTtRQUNWO01BQ0YsQ0FBQyxDQUNGO01BQ0RBLE1BQU0sRUFBRTtRQUNOSixPQUFPLEVBQUUsOEJBQThCO1FBQ3ZDQyxVQUFVLEVBQUUsSUFBSTtRQUNoQkUsTUFBTSxFQUFFO1VBQ04sWUFBVSxVQUFVO1VBQ3BCO1VBQ0FFLE9BQU8sRUFBRVIsUUFBUTtVQUNqQlMsTUFBTSxFQUFFLE9BQU87VUFDZkMsV0FBVyxFQUFFO1FBQ2Y7TUFDRixDQUFDO01BQ0RGLE9BQU8sRUFBRVIsUUFBUTtNQUNqQlMsTUFBTSxFQUFFO1FBQ047UUFDQU4sT0FBTyxFQUFFLGVBQWU7UUFDeEJHLE1BQU0sRUFBRTtVQUNOSyxRQUFRLEVBQUU7UUFDWjtNQUNGLENBQUM7TUFDREMsR0FBRyxFQUFFO1FBQ0hULE9BQU8sRUFBRSxnQkFBZ0I7UUFDekJHLE1BQU0sRUFBRTtVQUNOSSxXQUFXLEVBQUU7UUFDZjtNQUNGLENBQUM7TUFDREEsV0FBVyxFQUFFLGdCQUFnQjtNQUM3QkMsUUFBUSxFQUFFO0lBQ1osQ0FBQztJQUNEWixLQUFLLENBQUNFLFNBQVMsQ0FBQ1ksUUFBUSxHQUFHZCxLQUFLLENBQUNFLFNBQVMsQ0FBQ0wsVUFBVTtFQUN2RCxDQUFDLEVBQUVHLEtBQUssQ0FBQztBQUNYIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcdHlwb3NjcmlwdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSB0eXBvc2NyaXB0XG50eXBvc2NyaXB0LmRpc3BsYXlOYW1lID0gJ3R5cG9zY3JpcHQnXG50eXBvc2NyaXB0LmFsaWFzZXMgPSBbJ3RzY29uZmlnJ11cbmZ1bmN0aW9uIHR5cG9zY3JpcHQoUHJpc20pIHtcbiAgOyhmdW5jdGlvbiAoUHJpc20pIHtcbiAgICB2YXIga2V5d29yZHMgPVxuICAgICAgL1xcYig/OkFDVHxBQ1RJRlNVQnxDQVJSQVl8Q0FTRXxDTEVBUkdJRnxDT0F8Q09BX0lOVHxDT05TVEFOVFN8Q09OVEVOVHxDVVJ8RURJVFBBTkVMfEVGRkVDVHxFWFR8RklMRXxGTFVJRFRFTVBMQVRFfEZPUk18RlJBTUV8RlJBTUVTRVR8R0lGQlVJTERFUnxHTUVOVXxHTUVOVV9GT0xET1VUfEdNRU5VX0xBWUVSU3xHUHxITUVOVXxIUlVMRVJ8SFRNTHxJRU5WfElGU1VCfElNQUdFfElNR01FTlV8SU1HTUVOVUlURU18SU1HVEVYVHxJTUdfUkVTT1VSQ0V8SU5DTFVERV9UWVBPU0NSSVBUfEpTTUVOVXxKU01FTlVJVEVNfExMTHxMT0FEX1JFR0lTVEVSfE5PfFBBR0V8UkVDT1JEU3xSRVNUT1JFX1JFR0lTVEVSfFRFTVBMQVRFfFRFWFR8VE1FTlV8VE1FTlVJVEVNfFRNRU5VX0xBWUVSU3xVU0VSfFVTRVJfSU5UfF9HSUZCVUlMREVSfGdsb2JhbHxnbG9iYWxTdHJpbmd8Z2xvYmFsVmFyKVxcYi9cbiAgICBQcmlzbS5sYW5ndWFnZXMudHlwb3NjcmlwdCA9IHtcbiAgICAgIGNvbW1lbnQ6IFtcbiAgICAgICAge1xuICAgICAgICAgIC8vIG11bHRpbGluZSBjb21tZW50cyAvKiAqL1xuICAgICAgICAgIHBhdHRlcm46IC8oXnxbXlxcXFxdKVxcL1xcKltcXHNcXFNdKj8oPzpcXCpcXC98JCkvLFxuICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIC8vIGRvdWJsZS1zbGFzaCBjb21tZW50cyAtIGlnbm9yZWQgd2hlbiBiYWNrc2xhc2hlcyBvciBjb2xvbiBpcyBmb3VuZCBpbiBmcm9udFxuICAgICAgICAgIC8vIGFsc28gaWdub3JlZCB3aGVuZXZlciBkaXJlY3RseSBhZnRlciBhbiBlcXVhbC1zaWduLCBiZWNhdXNlIGl0IHdvdWxkIHByb2JhYmx5IGJlIGFuIHVybCB3aXRob3V0IHByb3RvY29sXG4gICAgICAgICAgcGF0dGVybjogLyhefFteXFxcXDo9IFxcdF18KD86XnxbXj0gXFx0XSlbIFxcdF0rKVxcL1xcLy4qLyxcbiAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAgIGdyZWVkeTogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgLy8gaGFzaCBjb21tZW50cyAtIGlnbm9yZWQgd2hlbiBsZWFkaW5nIHF1b3RlIGlzIGZvdW5kIGZvciBoZXggY29sb3JzIGluIHN0cmluZ3NcbiAgICAgICAgICBwYXR0ZXJuOiAvKF58W15cIiddKSMuKi8sXG4gICAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgICBncmVlZHk6IHRydWVcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIGZ1bmN0aW9uOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAvLyBvbGQgaW5jbHVkZSBzdHlsZVxuICAgICAgICAgIHBhdHRlcm46XG4gICAgICAgICAgICAvPElOQ0xVREVfVFlQT1NDUklQVDpcXHMqc291cmNlXFxzKj1cXHMqKD86XCJbXlwiXFxyXFxuXSpcInwnW14nXFxyXFxuXSonKVxccyo+LyxcbiAgICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICAgIHN0cmluZzoge1xuICAgICAgICAgICAgICBwYXR0ZXJuOiAvXCJbXlwiXFxyXFxuXSpcInwnW14nXFxyXFxuXSonLyxcbiAgICAgICAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgICAgICAga2V5d29yZDoga2V5d29yZHNcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGtleXdvcmQ6IHtcbiAgICAgICAgICAgICAgcGF0dGVybjogL0lOQ0xVREVfVFlQT1NDUklQVC9cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAvLyBuZXcgaW5jbHVkZSBzdHlsZVxuICAgICAgICAgIHBhdHRlcm46IC9AaW1wb3J0XFxzKig/OlwiW15cIlxcclxcbl0qXCJ8J1teJ1xcclxcbl0qJykvLFxuICAgICAgICAgIGluc2lkZToge1xuICAgICAgICAgICAgc3RyaW5nOiAvXCJbXlwiXFxyXFxuXSpcInwnW14nXFxyXFxuXSonL1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIHN0cmluZzoge1xuICAgICAgICBwYXR0ZXJuOiAvXihbXj1dKj1bPCBdPykoPzooPyFcXF1cXG4pLikqLyxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgZnVuY3Rpb246IC9cXHtcXCQuKlxcfS8sXG4gICAgICAgICAgLy8gY29uc3RhbnRzIGluY2x1ZGVcbiAgICAgICAgICBrZXl3b3JkOiBrZXl3b3JkcyxcbiAgICAgICAgICBudW1iZXI6IC9eXFxkKyQvLFxuICAgICAgICAgIHB1bmN0dWF0aW9uOiAvWyx8Ol0vXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBrZXl3b3JkOiBrZXl3b3JkcyxcbiAgICAgIG51bWJlcjoge1xuICAgICAgICAvLyBzcGVjaWFsIGhpZ2hsaWdodGluZyBmb3IgaW5kZXhlcyBvZiBhcnJheXMgaW4gdGFnc1xuICAgICAgICBwYXR0ZXJuOiAvXFxiXFxkK1xccypbLns9XS8sXG4gICAgICAgIGluc2lkZToge1xuICAgICAgICAgIG9wZXJhdG9yOiAvWy57PV0vXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB0YWc6IHtcbiAgICAgICAgcGF0dGVybjogL1xcLj9bLVxcd1xcXFxdK1xcLj8vLFxuICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICBwdW5jdHVhdGlvbjogL1xcLi9cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHB1bmN0dWF0aW9uOiAvW3t9W1xcXTsoKSwuOnxdLyxcbiAgICAgIG9wZXJhdG9yOiAvWzw+XT0/fFshPV09Pz0/fC0tP3xcXCtcXCs/fCYmP3xcXHxcXHw/fFs/Ki9+XiVdL1xuICAgIH1cbiAgICBQcmlzbS5sYW5ndWFnZXMudHNjb25maWcgPSBQcmlzbS5sYW5ndWFnZXMudHlwb3NjcmlwdFxuICB9KShQcmlzbSlcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwidHlwb3NjcmlwdCIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwia2V5d29yZHMiLCJsYW5ndWFnZXMiLCJjb21tZW50IiwicGF0dGVybiIsImxvb2tiZWhpbmQiLCJncmVlZHkiLCJpbnNpZGUiLCJzdHJpbmciLCJrZXl3b3JkIiwibnVtYmVyIiwicHVuY3R1YXRpb24iLCJvcGVyYXRvciIsInRhZyIsInRzY29uZmlnIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/typoscript.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/unrealscript.js":
/*!*****************************************************!*\
  !*** ./node_modules/refractor/lang/unrealscript.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = unrealscript;\nunrealscript.displayName = 'unrealscript';\nunrealscript.aliases = ['uc', 'uscript'];\nfunction unrealscript(Prism) {\n  Prism.languages.unrealscript = {\n    comment: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,\n    string: {\n      pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true\n    },\n    category: {\n      pattern: /(\\b(?:(?:autoexpand|hide|show)categories|var)\\s*\\()[^()]+(?=\\))/,\n      lookbehind: true,\n      greedy: true,\n      alias: 'property'\n    },\n    metadata: {\n      pattern: /(\\w\\s*)<\\s*\\w+\\s*=[^<>|=\\r\\n]+(?:\\|\\s*\\w+\\s*=[^<>|=\\r\\n]+)*>/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        property: /\\b\\w+(?=\\s*=)/,\n        operator: /=/,\n        punctuation: /[<>|]/\n      }\n    },\n    macro: {\n      pattern: /`\\w+/,\n      alias: 'property'\n    },\n    'class-name': {\n      pattern: /(\\b(?:class|enum|extends|interface|state(?:\\(\\))?|struct|within)\\s+)\\w+/,\n      lookbehind: true\n    },\n    keyword: /\\b(?:abstract|actor|array|auto|autoexpandcategories|bool|break|byte|case|class|classgroup|client|coerce|collapsecategories|config|const|continue|default|defaultproperties|delegate|dependson|deprecated|do|dontcollapsecategories|editconst|editinlinenew|else|enum|event|exec|export|extends|final|float|for|forcescriptorder|foreach|function|goto|guid|hidecategories|hidedropdown|if|ignores|implements|inherits|input|int|interface|iterator|latent|local|material|name|native|nativereplication|noexport|nontransient|noteditinlinenew|notplaceable|operator|optional|out|pawn|perobjectconfig|perobjectlocalized|placeable|postoperator|preoperator|private|protected|reliable|replication|return|server|showcategories|simulated|singular|state|static|string|struct|structdefault|structdefaultproperties|switch|texture|transient|travel|unreliable|until|var|vector|while|within)\\b/,\n    \"function\": /\\b[a-z_]\\w*(?=\\s*\\()/i,\n    \"boolean\": /\\b(?:false|true)\\b/,\n    number: /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n    // https://docs.unrealengine.com/udk/Three/UnrealScriptExpressions.html\n    operator: />>|<<|--|\\+\\+|\\*\\*|[-+*/~!=<>$@]=?|&&?|\\|\\|?|\\^\\^?|[?:%]|\\b(?:ClockwiseFrom|Cross|Dot)\\b/,\n    punctuation: /[()[\\]{};,.]/\n  };\n  Prism.languages.uc = Prism.languages.uscript = Prism.languages.unrealscript;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvdW5yZWFsc2NyaXB0LmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsWUFBWTtBQUM3QkEsWUFBWSxDQUFDQyxXQUFXLEdBQUcsY0FBYztBQUN6Q0QsWUFBWSxDQUFDRSxPQUFPLEdBQUcsQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDO0FBQ3hDLFNBQVNGLFlBQVlBLENBQUNHLEtBQUssRUFBRTtFQUMzQkEsS0FBSyxDQUFDQyxTQUFTLENBQUNKLFlBQVksR0FBRztJQUM3QkssT0FBTyxFQUFFLHlCQUF5QjtJQUNsQ0MsTUFBTSxFQUFFO01BQ05DLE9BQU8sRUFBRSxnREFBZ0Q7TUFDekRDLE1BQU0sRUFBRTtJQUNWLENBQUM7SUFDREMsUUFBUSxFQUFFO01BQ1JGLE9BQU8sRUFDTCxpRUFBaUU7TUFDbkVHLFVBQVUsRUFBRSxJQUFJO01BQ2hCRixNQUFNLEVBQUUsSUFBSTtNQUNaRyxLQUFLLEVBQUU7SUFDVCxDQUFDO0lBQ0RDLFFBQVEsRUFBRTtNQUNSTCxPQUFPLEVBQUUsOERBQThEO01BQ3ZFRyxVQUFVLEVBQUUsSUFBSTtNQUNoQkYsTUFBTSxFQUFFLElBQUk7TUFDWkssTUFBTSxFQUFFO1FBQ05DLFFBQVEsRUFBRSxlQUFlO1FBQ3pCQyxRQUFRLEVBQUUsR0FBRztRQUNiQyxXQUFXLEVBQUU7TUFDZjtJQUNGLENBQUM7SUFDREMsS0FBSyxFQUFFO01BQ0xWLE9BQU8sRUFBRSxNQUFNO01BQ2ZJLEtBQUssRUFBRTtJQUNULENBQUM7SUFDRCxZQUFZLEVBQUU7TUFDWkosT0FBTyxFQUNMLHlFQUF5RTtNQUMzRUcsVUFBVSxFQUFFO0lBQ2QsQ0FBQztJQUNEUSxPQUFPLEVBQ0wsaTJCQUFpMkI7SUFDbjJCLFlBQVUsdUJBQXVCO0lBQ2pDLFdBQVMsb0JBQW9CO0lBQzdCQyxNQUFNLEVBQUUsMkRBQTJEO0lBQ25FO0lBQ0FKLFFBQVEsRUFDTiwwRkFBMEY7SUFDNUZDLFdBQVcsRUFBRTtFQUNmLENBQUM7RUFDRGIsS0FBSyxDQUFDQyxTQUFTLENBQUNnQixFQUFFLEdBQUdqQixLQUFLLENBQUNDLFNBQVMsQ0FBQ2lCLE9BQU8sR0FBR2xCLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixZQUFZO0FBQzdFIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcdW5yZWFsc2NyaXB0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IHVucmVhbHNjcmlwdFxudW5yZWFsc2NyaXB0LmRpc3BsYXlOYW1lID0gJ3VucmVhbHNjcmlwdCdcbnVucmVhbHNjcmlwdC5hbGlhc2VzID0gWyd1YycsICd1c2NyaXB0J11cbmZ1bmN0aW9uIHVucmVhbHNjcmlwdChQcmlzbSkge1xuICBQcmlzbS5sYW5ndWFnZXMudW5yZWFsc2NyaXB0ID0ge1xuICAgIGNvbW1lbnQ6IC9cXC9cXC8uKnxcXC9cXCpbXFxzXFxTXSo/XFwqXFwvLyxcbiAgICBzdHJpbmc6IHtcbiAgICAgIHBhdHRlcm46IC8oW1wiJ10pKD86XFxcXCg/OlxcclxcbnxbXFxzXFxTXSl8KD8hXFwxKVteXFxcXFxcclxcbl0pKlxcMS8sXG4gICAgICBncmVlZHk6IHRydWVcbiAgICB9LFxuICAgIGNhdGVnb3J5OiB7XG4gICAgICBwYXR0ZXJuOlxuICAgICAgICAvKFxcYig/Oig/OmF1dG9leHBhbmR8aGlkZXxzaG93KWNhdGVnb3JpZXN8dmFyKVxccypcXCgpW14oKV0rKD89XFwpKS8sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgYWxpYXM6ICdwcm9wZXJ0eSdcbiAgICB9LFxuICAgIG1ldGFkYXRhOiB7XG4gICAgICBwYXR0ZXJuOiAvKFxcd1xccyopPFxccypcXHcrXFxzKj1bXjw+fD1cXHJcXG5dKyg/OlxcfFxccypcXHcrXFxzKj1bXjw+fD1cXHJcXG5dKykqPi8sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgIHByb3BlcnR5OiAvXFxiXFx3Kyg/PVxccyo9KS8sXG4gICAgICAgIG9wZXJhdG9yOiAvPS8sXG4gICAgICAgIHB1bmN0dWF0aW9uOiAvWzw+fF0vXG4gICAgICB9XG4gICAgfSxcbiAgICBtYWNybzoge1xuICAgICAgcGF0dGVybjogL2BcXHcrLyxcbiAgICAgIGFsaWFzOiAncHJvcGVydHknXG4gICAgfSxcbiAgICAnY2xhc3MtbmFtZSc6IHtcbiAgICAgIHBhdHRlcm46XG4gICAgICAgIC8oXFxiKD86Y2xhc3N8ZW51bXxleHRlbmRzfGludGVyZmFjZXxzdGF0ZSg/OlxcKFxcKSk/fHN0cnVjdHx3aXRoaW4pXFxzKylcXHcrLyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICB9LFxuICAgIGtleXdvcmQ6XG4gICAgICAvXFxiKD86YWJzdHJhY3R8YWN0b3J8YXJyYXl8YXV0b3xhdXRvZXhwYW5kY2F0ZWdvcmllc3xib29sfGJyZWFrfGJ5dGV8Y2FzZXxjbGFzc3xjbGFzc2dyb3VwfGNsaWVudHxjb2VyY2V8Y29sbGFwc2VjYXRlZ29yaWVzfGNvbmZpZ3xjb25zdHxjb250aW51ZXxkZWZhdWx0fGRlZmF1bHRwcm9wZXJ0aWVzfGRlbGVnYXRlfGRlcGVuZHNvbnxkZXByZWNhdGVkfGRvfGRvbnRjb2xsYXBzZWNhdGVnb3JpZXN8ZWRpdGNvbnN0fGVkaXRpbmxpbmVuZXd8ZWxzZXxlbnVtfGV2ZW50fGV4ZWN8ZXhwb3J0fGV4dGVuZHN8ZmluYWx8ZmxvYXR8Zm9yfGZvcmNlc2NyaXB0b3JkZXJ8Zm9yZWFjaHxmdW5jdGlvbnxnb3RvfGd1aWR8aGlkZWNhdGVnb3JpZXN8aGlkZWRyb3Bkb3dufGlmfGlnbm9yZXN8aW1wbGVtZW50c3xpbmhlcml0c3xpbnB1dHxpbnR8aW50ZXJmYWNlfGl0ZXJhdG9yfGxhdGVudHxsb2NhbHxtYXRlcmlhbHxuYW1lfG5hdGl2ZXxuYXRpdmVyZXBsaWNhdGlvbnxub2V4cG9ydHxub250cmFuc2llbnR8bm90ZWRpdGlubGluZW5ld3xub3RwbGFjZWFibGV8b3BlcmF0b3J8b3B0aW9uYWx8b3V0fHBhd258cGVyb2JqZWN0Y29uZmlnfHBlcm9iamVjdGxvY2FsaXplZHxwbGFjZWFibGV8cG9zdG9wZXJhdG9yfHByZW9wZXJhdG9yfHByaXZhdGV8cHJvdGVjdGVkfHJlbGlhYmxlfHJlcGxpY2F0aW9ufHJldHVybnxzZXJ2ZXJ8c2hvd2NhdGVnb3JpZXN8c2ltdWxhdGVkfHNpbmd1bGFyfHN0YXRlfHN0YXRpY3xzdHJpbmd8c3RydWN0fHN0cnVjdGRlZmF1bHR8c3RydWN0ZGVmYXVsdHByb3BlcnRpZXN8c3dpdGNofHRleHR1cmV8dHJhbnNpZW50fHRyYXZlbHx1bnJlbGlhYmxlfHVudGlsfHZhcnx2ZWN0b3J8d2hpbGV8d2l0aGluKVxcYi8sXG4gICAgZnVuY3Rpb246IC9cXGJbYS16X11cXHcqKD89XFxzKlxcKCkvaSxcbiAgICBib29sZWFuOiAvXFxiKD86ZmFsc2V8dHJ1ZSlcXGIvLFxuICAgIG51bWJlcjogL1xcYjB4W1xcZGEtZl0rXFxifCg/OlxcYlxcZCsoPzpcXC5cXGQqKT98XFxCXFwuXFxkKykoPzplWystXT9cXGQrKT8vaSxcbiAgICAvLyBodHRwczovL2RvY3MudW5yZWFsZW5naW5lLmNvbS91ZGsvVGhyZWUvVW5yZWFsU2NyaXB0RXhwcmVzc2lvbnMuaHRtbFxuICAgIG9wZXJhdG9yOlxuICAgICAgLz4+fDw8fC0tfFxcK1xcK3xcXCpcXCp8Wy0rKi9+IT08PiRAXT0/fCYmP3xcXHxcXHw/fFxcXlxcXj98Wz86JV18XFxiKD86Q2xvY2t3aXNlRnJvbXxDcm9zc3xEb3QpXFxiLyxcbiAgICBwdW5jdHVhdGlvbjogL1soKVtcXF17fTssLl0vXG4gIH1cbiAgUHJpc20ubGFuZ3VhZ2VzLnVjID0gUHJpc20ubGFuZ3VhZ2VzLnVzY3JpcHQgPSBQcmlzbS5sYW5ndWFnZXMudW5yZWFsc2NyaXB0XG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInVucmVhbHNjcmlwdCIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwiY29tbWVudCIsInN0cmluZyIsInBhdHRlcm4iLCJncmVlZHkiLCJjYXRlZ29yeSIsImxvb2tiZWhpbmQiLCJhbGlhcyIsIm1ldGFkYXRhIiwiaW5zaWRlIiwicHJvcGVydHkiLCJvcGVyYXRvciIsInB1bmN0dWF0aW9uIiwibWFjcm8iLCJrZXl3b3JkIiwibnVtYmVyIiwidWMiLCJ1c2NyaXB0Il0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/unrealscript.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/uorazor.js":
/*!************************************************!*\
  !*** ./node_modules/refractor/lang/uorazor.js ***!
  \************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = uorazor;\nuorazor.displayName = 'uorazor';\nuorazor.aliases = [];\nfunction uorazor(Prism) {\n  Prism.languages.uorazor = {\n    'comment-hash': {\n      pattern: /#.*/,\n      alias: 'comment',\n      greedy: true\n    },\n    'comment-slash': {\n      pattern: /\\/\\/.*/,\n      alias: 'comment',\n      greedy: true\n    },\n    string: {\n      pattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      inside: {\n        punctuation: /^['\"]|['\"]$/\n      },\n      greedy: true\n    },\n    'source-layers': {\n      pattern: /\\b(?:arms|backpack|blue|bracelet|cancel|clear|cloak|criminal|earrings|enemy|facialhair|friend|friendly|gloves|gray|grey|ground|hair|head|innerlegs|innertorso|innocent|lefthand|middletorso|murderer|neck|nonfriendly|onehandedsecondary|outerlegs|outertorso|pants|red|righthand|ring|self|shirt|shoes|talisman|waist)\\b/i,\n      alias: 'function'\n    },\n    'source-commands': {\n      pattern: /\\b(?:alliance|attack|cast|clearall|clearignore|clearjournal|clearlist|clearsysmsg|createlist|createtimer|dclick|dclicktype|dclickvar|dress|dressconfig|drop|droprelloc|emote|getlabel|guild|gumpclose|gumpresponse|hotkey|ignore|lasttarget|lift|lifttype|menu|menuresponse|msg|org|organize|organizer|overhead|pause|poplist|potion|promptresponse|pushlist|removelist|removetimer|rename|restock|say|scav|scavenger|script|setability|setlasttarget|setskill|settimer|setvar|sysmsg|target|targetloc|targetrelloc|targettype|undress|unignore|unsetvar|useobject|useonce|useskill|usetype|virtue|wait|waitforgump|waitformenu|waitforprompt|waitforstat|waitforsysmsg|waitfortarget|walk|wfsysmsg|wft|whisper|yell)\\b/,\n      alias: 'function'\n    },\n    'tag-name': {\n      pattern: /(^\\{%-?\\s*)\\w+/,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    delimiter: {\n      pattern: /^\\{[{%]-?|-?[%}]\\}$/,\n      alias: 'punctuation'\n    },\n    \"function\": /\\b(?:atlist|close|closest|count|counter|counttype|dead|dex|diffhits|diffmana|diffstam|diffweight|find|findbuff|finddebuff|findlayer|findtype|findtypelist|followers|gumpexists|hidden|hits|hp|hue|human|humanoid|ingump|inlist|insysmessage|insysmsg|int|invul|lhandempty|list|listexists|mana|maxhits|maxhp|maxmana|maxstam|maxweight|monster|mounted|name|next|noto|paralyzed|poisoned|position|prev|previous|queued|rand|random|rhandempty|skill|stam|str|targetexists|timer|timerexists|varexist|warmode|weight)\\b/,\n    keyword: /\\b(?:and|as|break|continue|else|elseif|endfor|endif|endwhile|for|if|loop|not|or|replay|stop|while)\\b/,\n    \"boolean\": /\\b(?:false|null|true)\\b/,\n    number: /\\b0x[\\dA-Fa-f]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,\n    operator: [{\n      pattern: /(\\s)(?:and|b-and|b-or|b-xor|ends with|in|is|matches|not|or|same as|starts with)(?=\\s)/,\n      lookbehind: true\n    }, /[=<>]=?|!=|\\*\\*?|\\/\\/?|\\?:?|[-+~%|]/],\n    punctuation: /[()\\[\\]{}:.,]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvdW9yYXpvci5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLE9BQU87QUFDeEJBLE9BQU8sQ0FBQ0MsV0FBVyxHQUFHLFNBQVM7QUFDL0JELE9BQU8sQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDcEIsU0FBU0YsT0FBT0EsQ0FBQ0csS0FBSyxFQUFFO0VBQ3RCQSxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osT0FBTyxHQUFHO0lBQ3hCLGNBQWMsRUFBRTtNQUNkSyxPQUFPLEVBQUUsS0FBSztNQUNkQyxLQUFLLEVBQUUsU0FBUztNQUNoQkMsTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUNELGVBQWUsRUFBRTtNQUNmRixPQUFPLEVBQUUsUUFBUTtNQUNqQkMsS0FBSyxFQUFFLFNBQVM7TUFDaEJDLE1BQU0sRUFBRTtJQUNWLENBQUM7SUFDREMsTUFBTSxFQUFFO01BQ05ILE9BQU8sRUFBRSxpQ0FBaUM7TUFDMUNJLE1BQU0sRUFBRTtRQUNOQyxXQUFXLEVBQUU7TUFDZixDQUFDO01BQ0RILE1BQU0sRUFBRTtJQUNWLENBQUM7SUFDRCxlQUFlLEVBQUU7TUFDZkYsT0FBTyxFQUNMLDRUQUE0VDtNQUM5VEMsS0FBSyxFQUFFO0lBQ1QsQ0FBQztJQUNELGlCQUFpQixFQUFFO01BQ2pCRCxPQUFPLEVBQ0wseXJCQUF5ckI7TUFDM3JCQyxLQUFLLEVBQUU7SUFDVCxDQUFDO0lBQ0QsVUFBVSxFQUFFO01BQ1ZELE9BQU8sRUFBRSxnQkFBZ0I7TUFDekJNLFVBQVUsRUFBRSxJQUFJO01BQ2hCTCxLQUFLLEVBQUU7SUFDVCxDQUFDO0lBQ0RNLFNBQVMsRUFBRTtNQUNUUCxPQUFPLEVBQUUscUJBQXFCO01BQzlCQyxLQUFLLEVBQUU7SUFDVCxDQUFDO0lBQ0QsWUFDRSx3ZkFBd2Y7SUFDMWZPLE9BQU8sRUFDTCxzR0FBc0c7SUFDeEcsV0FBUyx5QkFBeUI7SUFDbENDLE1BQU0sRUFBRSw4REFBOEQ7SUFDdEVDLFFBQVEsRUFBRSxDQUNSO01BQ0VWLE9BQU8sRUFDTCx1RkFBdUY7TUFDekZNLFVBQVUsRUFBRTtJQUNkLENBQUMsRUFDRCxxQ0FBcUMsQ0FDdEM7SUFDREQsV0FBVyxFQUFFO0VBQ2YsQ0FBQztBQUNIIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcdW9yYXpvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSB1b3Jhem9yXG51b3Jhem9yLmRpc3BsYXlOYW1lID0gJ3VvcmF6b3InXG51b3Jhem9yLmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24gdW9yYXpvcihQcmlzbSkge1xuICBQcmlzbS5sYW5ndWFnZXMudW9yYXpvciA9IHtcbiAgICAnY29tbWVudC1oYXNoJzoge1xuICAgICAgcGF0dGVybjogLyMuKi8sXG4gICAgICBhbGlhczogJ2NvbW1lbnQnLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICAnY29tbWVudC1zbGFzaCc6IHtcbiAgICAgIHBhdHRlcm46IC9cXC9cXC8uKi8sXG4gICAgICBhbGlhczogJ2NvbW1lbnQnLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICBzdHJpbmc6IHtcbiAgICAgIHBhdHRlcm46IC8oXCJ8JykoPzpcXFxcLnwoPyFcXDEpW15cXFxcXFxyXFxuXSkqXFwxLyxcbiAgICAgIGluc2lkZToge1xuICAgICAgICBwdW5jdHVhdGlvbjogL15bJ1wiXXxbJ1wiXSQvXG4gICAgICB9LFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICAnc291cmNlLWxheWVycyc6IHtcbiAgICAgIHBhdHRlcm46XG4gICAgICAgIC9cXGIoPzphcm1zfGJhY2twYWNrfGJsdWV8YnJhY2VsZXR8Y2FuY2VsfGNsZWFyfGNsb2FrfGNyaW1pbmFsfGVhcnJpbmdzfGVuZW15fGZhY2lhbGhhaXJ8ZnJpZW5kfGZyaWVuZGx5fGdsb3Zlc3xncmF5fGdyZXl8Z3JvdW5kfGhhaXJ8aGVhZHxpbm5lcmxlZ3N8aW5uZXJ0b3Jzb3xpbm5vY2VudHxsZWZ0aGFuZHxtaWRkbGV0b3Jzb3xtdXJkZXJlcnxuZWNrfG5vbmZyaWVuZGx5fG9uZWhhbmRlZHNlY29uZGFyeXxvdXRlcmxlZ3N8b3V0ZXJ0b3Jzb3xwYW50c3xyZWR8cmlnaHRoYW5kfHJpbmd8c2VsZnxzaGlydHxzaG9lc3x0YWxpc21hbnx3YWlzdClcXGIvaSxcbiAgICAgIGFsaWFzOiAnZnVuY3Rpb24nXG4gICAgfSxcbiAgICAnc291cmNlLWNvbW1hbmRzJzoge1xuICAgICAgcGF0dGVybjpcbiAgICAgICAgL1xcYig/OmFsbGlhbmNlfGF0dGFja3xjYXN0fGNsZWFyYWxsfGNsZWFyaWdub3JlfGNsZWFyam91cm5hbHxjbGVhcmxpc3R8Y2xlYXJzeXNtc2d8Y3JlYXRlbGlzdHxjcmVhdGV0aW1lcnxkY2xpY2t8ZGNsaWNrdHlwZXxkY2xpY2t2YXJ8ZHJlc3N8ZHJlc3Njb25maWd8ZHJvcHxkcm9wcmVsbG9jfGVtb3RlfGdldGxhYmVsfGd1aWxkfGd1bXBjbG9zZXxndW1wcmVzcG9uc2V8aG90a2V5fGlnbm9yZXxsYXN0dGFyZ2V0fGxpZnR8bGlmdHR5cGV8bWVudXxtZW51cmVzcG9uc2V8bXNnfG9yZ3xvcmdhbml6ZXxvcmdhbml6ZXJ8b3ZlcmhlYWR8cGF1c2V8cG9wbGlzdHxwb3Rpb258cHJvbXB0cmVzcG9uc2V8cHVzaGxpc3R8cmVtb3ZlbGlzdHxyZW1vdmV0aW1lcnxyZW5hbWV8cmVzdG9ja3xzYXl8c2NhdnxzY2F2ZW5nZXJ8c2NyaXB0fHNldGFiaWxpdHl8c2V0bGFzdHRhcmdldHxzZXRza2lsbHxzZXR0aW1lcnxzZXR2YXJ8c3lzbXNnfHRhcmdldHx0YXJnZXRsb2N8dGFyZ2V0cmVsbG9jfHRhcmdldHR5cGV8dW5kcmVzc3x1bmlnbm9yZXx1bnNldHZhcnx1c2VvYmplY3R8dXNlb25jZXx1c2Vza2lsbHx1c2V0eXBlfHZpcnR1ZXx3YWl0fHdhaXRmb3JndW1wfHdhaXRmb3JtZW51fHdhaXRmb3Jwcm9tcHR8d2FpdGZvcnN0YXR8d2FpdGZvcnN5c21zZ3x3YWl0Zm9ydGFyZ2V0fHdhbGt8d2ZzeXNtc2d8d2Z0fHdoaXNwZXJ8eWVsbClcXGIvLFxuICAgICAgYWxpYXM6ICdmdW5jdGlvbidcbiAgICB9LFxuICAgICd0YWctbmFtZSc6IHtcbiAgICAgIHBhdHRlcm46IC8oXlxceyUtP1xccyopXFx3Ky8sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgYWxpYXM6ICdrZXl3b3JkJ1xuICAgIH0sXG4gICAgZGVsaW1pdGVyOiB7XG4gICAgICBwYXR0ZXJuOiAvXlxce1t7JV0tP3wtP1slfV1cXH0kLyxcbiAgICAgIGFsaWFzOiAncHVuY3R1YXRpb24nXG4gICAgfSxcbiAgICBmdW5jdGlvbjpcbiAgICAgIC9cXGIoPzphdGxpc3R8Y2xvc2V8Y2xvc2VzdHxjb3VudHxjb3VudGVyfGNvdW50dHlwZXxkZWFkfGRleHxkaWZmaGl0c3xkaWZmbWFuYXxkaWZmc3RhbXxkaWZmd2VpZ2h0fGZpbmR8ZmluZGJ1ZmZ8ZmluZGRlYnVmZnxmaW5kbGF5ZXJ8ZmluZHR5cGV8ZmluZHR5cGVsaXN0fGZvbGxvd2Vyc3xndW1wZXhpc3RzfGhpZGRlbnxoaXRzfGhwfGh1ZXxodW1hbnxodW1hbm9pZHxpbmd1bXB8aW5saXN0fGluc3lzbWVzc2FnZXxpbnN5c21zZ3xpbnR8aW52dWx8bGhhbmRlbXB0eXxsaXN0fGxpc3RleGlzdHN8bWFuYXxtYXhoaXRzfG1heGhwfG1heG1hbmF8bWF4c3RhbXxtYXh3ZWlnaHR8bW9uc3Rlcnxtb3VudGVkfG5hbWV8bmV4dHxub3RvfHBhcmFseXplZHxwb2lzb25lZHxwb3NpdGlvbnxwcmV2fHByZXZpb3VzfHF1ZXVlZHxyYW5kfHJhbmRvbXxyaGFuZGVtcHR5fHNraWxsfHN0YW18c3RyfHRhcmdldGV4aXN0c3x0aW1lcnx0aW1lcmV4aXN0c3x2YXJleGlzdHx3YXJtb2RlfHdlaWdodClcXGIvLFxuICAgIGtleXdvcmQ6XG4gICAgICAvXFxiKD86YW5kfGFzfGJyZWFrfGNvbnRpbnVlfGVsc2V8ZWxzZWlmfGVuZGZvcnxlbmRpZnxlbmR3aGlsZXxmb3J8aWZ8bG9vcHxub3R8b3J8cmVwbGF5fHN0b3B8d2hpbGUpXFxiLyxcbiAgICBib29sZWFuOiAvXFxiKD86ZmFsc2V8bnVsbHx0cnVlKVxcYi8sXG4gICAgbnVtYmVyOiAvXFxiMHhbXFxkQS1GYS1mXSt8KD86XFxiXFxkKyg/OlxcLlxcZCopP3xcXEJcXC5cXGQrKSg/OltFZV1bLStdP1xcZCspPy8sXG4gICAgb3BlcmF0b3I6IFtcbiAgICAgIHtcbiAgICAgICAgcGF0dGVybjpcbiAgICAgICAgICAvKFxccykoPzphbmR8Yi1hbmR8Yi1vcnxiLXhvcnxlbmRzIHdpdGh8aW58aXN8bWF0Y2hlc3xub3R8b3J8c2FtZSBhc3xzdGFydHMgd2l0aCkoPz1cXHMpLyxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIC9bPTw+XT0/fCE9fFxcKlxcKj98XFwvXFwvP3xcXD86P3xbLSt+JXxdL1xuICAgIF0sXG4gICAgcHVuY3R1YXRpb246IC9bKClcXFtcXF17fTouLF0vXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwidW9yYXpvciIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwicGF0dGVybiIsImFsaWFzIiwiZ3JlZWR5Iiwic3RyaW5nIiwiaW5zaWRlIiwicHVuY3R1YXRpb24iLCJsb29rYmVoaW5kIiwiZGVsaW1pdGVyIiwia2V5d29yZCIsIm51bWJlciIsIm9wZXJhdG9yIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/uorazor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/uri.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/uri.js ***!
  \********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = uri;\nuri.displayName = 'uri';\nuri.aliases = ['url'];\nfunction uri(Prism) {\n  // https://tools.ietf.org/html/rfc3986#appendix-A\n  Prism.languages.uri = {\n    scheme: {\n      pattern: /^[a-z][a-z0-9+.-]*:/im,\n      greedy: true,\n      inside: {\n        'scheme-delimiter': /:$/\n      }\n    },\n    fragment: {\n      pattern: /#[\\w\\-.~!$&'()*+,;=%:@/?]*/,\n      inside: {\n        'fragment-delimiter': /^#/\n      }\n    },\n    query: {\n      pattern: /\\?[\\w\\-.~!$&'()*+,;=%:@/?]*/,\n      inside: {\n        'query-delimiter': {\n          pattern: /^\\?/,\n          greedy: true\n        },\n        'pair-delimiter': /[&;]/,\n        pair: {\n          pattern: /^[^=][\\s\\S]*/,\n          inside: {\n            key: /^[^=]+/,\n            value: {\n              pattern: /(^=)[\\s\\S]+/,\n              lookbehind: true\n            }\n          }\n        }\n      }\n    },\n    authority: {\n      pattern: RegExp(/^\\/\\//.source +\n      // [ userinfo \"@\" ]\n      /(?:[\\w\\-.~!$&'()*+,;=%:]*@)?/.source + (\n      // host\n      '(?:' +\n      // IP-literal\n      /\\[(?:[0-9a-fA-F:.]{2,48}|v[0-9a-fA-F]+\\.[\\w\\-.~!$&'()*+,;=]+)\\]/.source + '|' +\n      // IPv4address or registered name\n      /[\\w\\-.~!$&'()*+,;=%]*/.source + ')') +\n      // [ \":\" port ]\n      /(?::\\d*)?/.source, 'm'),\n      inside: {\n        'authority-delimiter': /^\\/\\//,\n        'user-info-segment': {\n          pattern: /^[\\w\\-.~!$&'()*+,;=%:]*@/,\n          inside: {\n            'user-info-delimiter': /@$/,\n            'user-info': /^[\\w\\-.~!$&'()*+,;=%:]+/\n          }\n        },\n        'port-segment': {\n          pattern: /:\\d*$/,\n          inside: {\n            'port-delimiter': /^:/,\n            port: /^\\d+/\n          }\n        },\n        host: {\n          pattern: /[\\s\\S]+/,\n          inside: {\n            'ip-literal': {\n              pattern: /^\\[[\\s\\S]+\\]$/,\n              inside: {\n                'ip-literal-delimiter': /^\\[|\\]$/,\n                'ipv-future': /^v[\\s\\S]+/,\n                'ipv6-address': /^[\\s\\S]+/\n              }\n            },\n            'ipv4-address': /^(?:(?:[03-9]\\d?|[12]\\d{0,2})\\.){3}(?:[03-9]\\d?|[12]\\d{0,2})$/\n          }\n        }\n      }\n    },\n    path: {\n      pattern: /^[\\w\\-.~!$&'()*+,;=%:@/]+/m,\n      inside: {\n        'path-separator': /\\//\n      }\n    }\n  };\n  Prism.languages.url = Prism.languages.uri;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvdXJpLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsR0FBRztBQUNwQkEsR0FBRyxDQUFDQyxXQUFXLEdBQUcsS0FBSztBQUN2QkQsR0FBRyxDQUFDRSxPQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUM7QUFDckIsU0FBU0YsR0FBR0EsQ0FBQ0csS0FBSyxFQUFFO0VBQ2xCO0VBQ0FBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixHQUFHLEdBQUc7SUFDcEJLLE1BQU0sRUFBRTtNQUNOQyxPQUFPLEVBQUUsdUJBQXVCO01BQ2hDQyxNQUFNLEVBQUUsSUFBSTtNQUNaQyxNQUFNLEVBQUU7UUFDTixrQkFBa0IsRUFBRTtNQUN0QjtJQUNGLENBQUM7SUFDREMsUUFBUSxFQUFFO01BQ1JILE9BQU8sRUFBRSw0QkFBNEI7TUFDckNFLE1BQU0sRUFBRTtRQUNOLG9CQUFvQixFQUFFO01BQ3hCO0lBQ0YsQ0FBQztJQUNERSxLQUFLLEVBQUU7TUFDTEosT0FBTyxFQUFFLDZCQUE2QjtNQUN0Q0UsTUFBTSxFQUFFO1FBQ04saUJBQWlCLEVBQUU7VUFDakJGLE9BQU8sRUFBRSxLQUFLO1VBQ2RDLE1BQU0sRUFBRTtRQUNWLENBQUM7UUFDRCxnQkFBZ0IsRUFBRSxNQUFNO1FBQ3hCSSxJQUFJLEVBQUU7VUFDSkwsT0FBTyxFQUFFLGNBQWM7VUFDdkJFLE1BQU0sRUFBRTtZQUNOSSxHQUFHLEVBQUUsUUFBUTtZQUNiQyxLQUFLLEVBQUU7Y0FDTFAsT0FBTyxFQUFFLGFBQWE7Y0FDdEJRLFVBQVUsRUFBRTtZQUNkO1VBQ0Y7UUFDRjtNQUNGO0lBQ0YsQ0FBQztJQUNEQyxTQUFTLEVBQUU7TUFDVFQsT0FBTyxFQUFFVSxNQUFNLENBQ2IsT0FBTyxDQUFDQyxNQUFNO01BQUc7TUFDZiw4QkFBOEIsQ0FBQ0EsTUFBTTtNQUFHO01BQ3ZDLEtBQUs7TUFBRztNQUNQLGlFQUFpRSxDQUM5REEsTUFBTSxHQUNULEdBQUc7TUFBRztNQUNOLHVCQUF1QixDQUFDQSxNQUFNLEdBQzlCLEdBQUcsQ0FBQztNQUFHO01BQ1QsV0FBVyxDQUFDQSxNQUFNLEVBQ3BCLEdBQ0YsQ0FBQztNQUNEVCxNQUFNLEVBQUU7UUFDTixxQkFBcUIsRUFBRSxPQUFPO1FBQzlCLG1CQUFtQixFQUFFO1VBQ25CRixPQUFPLEVBQUUsMEJBQTBCO1VBQ25DRSxNQUFNLEVBQUU7WUFDTixxQkFBcUIsRUFBRSxJQUFJO1lBQzNCLFdBQVcsRUFBRTtVQUNmO1FBQ0YsQ0FBQztRQUNELGNBQWMsRUFBRTtVQUNkRixPQUFPLEVBQUUsT0FBTztVQUNoQkUsTUFBTSxFQUFFO1lBQ04sZ0JBQWdCLEVBQUUsSUFBSTtZQUN0QlUsSUFBSSxFQUFFO1VBQ1I7UUFDRixDQUFDO1FBQ0RDLElBQUksRUFBRTtVQUNKYixPQUFPLEVBQUUsU0FBUztVQUNsQkUsTUFBTSxFQUFFO1lBQ04sWUFBWSxFQUFFO2NBQ1pGLE9BQU8sRUFBRSxlQUFlO2NBQ3hCRSxNQUFNLEVBQUU7Z0JBQ04sc0JBQXNCLEVBQUUsU0FBUztnQkFDakMsWUFBWSxFQUFFLFdBQVc7Z0JBQ3pCLGNBQWMsRUFBRTtjQUNsQjtZQUNGLENBQUM7WUFDRCxjQUFjLEVBQ1o7VUFDSjtRQUNGO01BQ0Y7SUFDRixDQUFDO0lBQ0RZLElBQUksRUFBRTtNQUNKZCxPQUFPLEVBQUUsNEJBQTRCO01BQ3JDRSxNQUFNLEVBQUU7UUFDTixnQkFBZ0IsRUFBRTtNQUNwQjtJQUNGO0VBQ0YsQ0FBQztFQUNETCxLQUFLLENBQUNDLFNBQVMsQ0FBQ2lCLEdBQUcsR0FBR2xCLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixHQUFHO0FBQzNDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcdXJpLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IHVyaVxudXJpLmRpc3BsYXlOYW1lID0gJ3VyaSdcbnVyaS5hbGlhc2VzID0gWyd1cmwnXVxuZnVuY3Rpb24gdXJpKFByaXNtKSB7XG4gIC8vIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzOTg2I2FwcGVuZGl4LUFcbiAgUHJpc20ubGFuZ3VhZ2VzLnVyaSA9IHtcbiAgICBzY2hlbWU6IHtcbiAgICAgIHBhdHRlcm46IC9eW2Etel1bYS16MC05Ky4tXSo6L2ltLFxuICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgICdzY2hlbWUtZGVsaW1pdGVyJzogLzokL1xuICAgICAgfVxuICAgIH0sXG4gICAgZnJhZ21lbnQ6IHtcbiAgICAgIHBhdHRlcm46IC8jW1xcd1xcLS5+ISQmJygpKissOz0lOkAvP10qLyxcbiAgICAgIGluc2lkZToge1xuICAgICAgICAnZnJhZ21lbnQtZGVsaW1pdGVyJzogL14jL1xuICAgICAgfVxuICAgIH0sXG4gICAgcXVlcnk6IHtcbiAgICAgIHBhdHRlcm46IC9cXD9bXFx3XFwtLn4hJCYnKCkqKyw7PSU6QC8/XSovLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgICdxdWVyeS1kZWxpbWl0ZXInOiB7XG4gICAgICAgICAgcGF0dGVybjogL15cXD8vLFxuICAgICAgICAgIGdyZWVkeTogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICAncGFpci1kZWxpbWl0ZXInOiAvWyY7XS8sXG4gICAgICAgIHBhaXI6IHtcbiAgICAgICAgICBwYXR0ZXJuOiAvXltePV1bXFxzXFxTXSovLFxuICAgICAgICAgIGluc2lkZToge1xuICAgICAgICAgICAga2V5OiAvXltePV0rLyxcbiAgICAgICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgICAgIHBhdHRlcm46IC8oXj0pW1xcc1xcU10rLyxcbiAgICAgICAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgYXV0aG9yaXR5OiB7XG4gICAgICBwYXR0ZXJuOiBSZWdFeHAoXG4gICAgICAgIC9eXFwvXFwvLy5zb3VyY2UgKyAvLyBbIHVzZXJpbmZvIFwiQFwiIF1cbiAgICAgICAgICAvKD86W1xcd1xcLS5+ISQmJygpKissOz0lOl0qQCk/Ly5zb3VyY2UgKyAvLyBob3N0XG4gICAgICAgICAgKCcoPzonICsgLy8gSVAtbGl0ZXJhbFxuICAgICAgICAgICAgL1xcWyg/OlswLTlhLWZBLUY6Ll17Miw0OH18dlswLTlhLWZBLUZdK1xcLltcXHdcXC0ufiEkJicoKSorLDs9XSspXFxdL1xuICAgICAgICAgICAgICAuc291cmNlICtcbiAgICAgICAgICAgICd8JyArIC8vIElQdjRhZGRyZXNzIG9yIHJlZ2lzdGVyZWQgbmFtZVxuICAgICAgICAgICAgL1tcXHdcXC0ufiEkJicoKSorLDs9JV0qLy5zb3VyY2UgK1xuICAgICAgICAgICAgJyknKSArIC8vIFsgXCI6XCIgcG9ydCBdXG4gICAgICAgICAgLyg/OjpcXGQqKT8vLnNvdXJjZSxcbiAgICAgICAgJ20nXG4gICAgICApLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgICdhdXRob3JpdHktZGVsaW1pdGVyJzogL15cXC9cXC8vLFxuICAgICAgICAndXNlci1pbmZvLXNlZ21lbnQnOiB7XG4gICAgICAgICAgcGF0dGVybjogL15bXFx3XFwtLn4hJCYnKCkqKyw7PSU6XSpALyxcbiAgICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICAgICd1c2VyLWluZm8tZGVsaW1pdGVyJzogL0AkLyxcbiAgICAgICAgICAgICd1c2VyLWluZm8nOiAvXltcXHdcXC0ufiEkJicoKSorLDs9JTpdKy9cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICdwb3J0LXNlZ21lbnQnOiB7XG4gICAgICAgICAgcGF0dGVybjogLzpcXGQqJC8sXG4gICAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgICAncG9ydC1kZWxpbWl0ZXInOiAvXjovLFxuICAgICAgICAgICAgcG9ydDogL15cXGQrL1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgaG9zdDoge1xuICAgICAgICAgIHBhdHRlcm46IC9bXFxzXFxTXSsvLFxuICAgICAgICAgIGluc2lkZToge1xuICAgICAgICAgICAgJ2lwLWxpdGVyYWwnOiB7XG4gICAgICAgICAgICAgIHBhdHRlcm46IC9eXFxbW1xcc1xcU10rXFxdJC8sXG4gICAgICAgICAgICAgIGluc2lkZToge1xuICAgICAgICAgICAgICAgICdpcC1saXRlcmFsLWRlbGltaXRlcic6IC9eXFxbfFxcXSQvLFxuICAgICAgICAgICAgICAgICdpcHYtZnV0dXJlJzogL152W1xcc1xcU10rLyxcbiAgICAgICAgICAgICAgICAnaXB2Ni1hZGRyZXNzJzogL15bXFxzXFxTXSsvXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAnaXB2NC1hZGRyZXNzJzpcbiAgICAgICAgICAgICAgL14oPzooPzpbMDMtOV1cXGQ/fFsxMl1cXGR7MCwyfSlcXC4pezN9KD86WzAzLTldXFxkP3xbMTJdXFxkezAsMn0pJC9cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHBhdGg6IHtcbiAgICAgIHBhdHRlcm46IC9eW1xcd1xcLS5+ISQmJygpKissOz0lOkAvXSsvbSxcbiAgICAgIGluc2lkZToge1xuICAgICAgICAncGF0aC1zZXBhcmF0b3InOiAvXFwvL1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBQcmlzbS5sYW5ndWFnZXMudXJsID0gUHJpc20ubGFuZ3VhZ2VzLnVyaVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJ1cmkiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImxhbmd1YWdlcyIsInNjaGVtZSIsInBhdHRlcm4iLCJncmVlZHkiLCJpbnNpZGUiLCJmcmFnbWVudCIsInF1ZXJ5IiwicGFpciIsImtleSIsInZhbHVlIiwibG9va2JlaGluZCIsImF1dGhvcml0eSIsIlJlZ0V4cCIsInNvdXJjZSIsInBvcnQiLCJob3N0IiwicGF0aCIsInVybCJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/uri.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/v.js":
/*!******************************************!*\
  !*** ./node_modules/refractor/lang/v.js ***!
  \******************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = v;\nv.displayName = 'v';\nv.aliases = [];\nfunction v(Prism) {\n  ;\n  (function (Prism) {\n    var interpolationExpr = {\n      pattern: /[\\s\\S]+/,\n      inside: null\n    };\n    Prism.languages.v = Prism.languages.extend('clike', {\n      string: {\n        pattern: /r?([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        alias: 'quoted-string',\n        greedy: true,\n        inside: {\n          interpolation: {\n            pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$(?:\\{[^{}]*\\}|\\w+(?:\\.\\w+(?:\\([^\\(\\)]*\\))?|\\[[^\\[\\]]+\\])*)/,\n            lookbehind: true,\n            inside: {\n              'interpolation-variable': {\n                pattern: /^\\$\\w[\\s\\S]*$/,\n                alias: 'variable'\n              },\n              'interpolation-punctuation': {\n                pattern: /^\\$\\{|\\}$/,\n                alias: 'punctuation'\n              },\n              'interpolation-expression': interpolationExpr\n            }\n          }\n        }\n      },\n      'class-name': {\n        pattern: /(\\b(?:enum|interface|struct|type)\\s+)(?:C\\.)?\\w+/,\n        lookbehind: true\n      },\n      keyword: /(?:\\b(?:__global|as|asm|assert|atomic|break|chan|const|continue|defer|else|embed|enum|fn|for|go(?:to)?|if|import|in|interface|is|lock|match|module|mut|none|or|pub|return|rlock|select|shared|sizeof|static|struct|type(?:of)?|union|unsafe)|\\$(?:else|for|if)|#(?:flag|include))\\b/,\n      number: /\\b(?:0x[a-f\\d]+(?:_[a-f\\d]+)*|0b[01]+(?:_[01]+)*|0o[0-7]+(?:_[0-7]+)*|\\d+(?:_\\d+)*(?:\\.\\d+(?:_\\d+)*)?)\\b/i,\n      operator: /~|\\?|[*\\/%^!=]=?|\\+[=+]?|-[=-]?|\\|[=|]?|&(?:=|&|\\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\\.\\.\\.?/,\n      builtin: /\\b(?:any(?:_float|_int)?|bool|byte(?:ptr)?|charptr|f(?:32|64)|i(?:8|16|64|128|nt)|rune|size_t|string|u(?:16|32|64|128)|voidptr)\\b/\n    });\n    interpolationExpr.inside = Prism.languages.v;\n    Prism.languages.insertBefore('v', 'string', {\n      \"char\": {\n        pattern: /`(?:\\\\`|\\\\?[^`]{1,2})`/,\n        // using {1,2} instead of `u` flag for compatibility\n        alias: 'rune'\n      }\n    });\n    Prism.languages.insertBefore('v', 'operator', {\n      attribute: {\n        pattern: /(^[\\t ]*)\\[(?:deprecated|direct_array_access|flag|inline|live|ref_only|typedef|unsafe_fn|windows_stdcall)\\]/m,\n        lookbehind: true,\n        alias: 'annotation',\n        inside: {\n          punctuation: /[\\[\\]]/,\n          keyword: /\\w+/\n        }\n      },\n      generic: {\n        pattern: /<\\w+>(?=\\s*[\\)\\{])/,\n        inside: {\n          punctuation: /[<>]/,\n          'class-name': /\\w+/\n        }\n      }\n    });\n    Prism.languages.insertBefore('v', 'function', {\n      'generic-function': {\n        // e.g. foo<T>( ...\n        pattern: /\\b\\w+\\s*<\\w+>(?=\\()/,\n        inside: {\n          \"function\": /^\\w+/,\n          generic: {\n            pattern: /<\\w+>/,\n            inside: Prism.languages.v.generic.inside\n          }\n        }\n      }\n    });\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvdi5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLENBQUM7QUFDbEJBLENBQUMsQ0FBQ0MsV0FBVyxHQUFHLEdBQUc7QUFDbkJELENBQUMsQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDZCxTQUFTRixDQUFDQSxDQUFDRyxLQUFLLEVBQUU7RUFDaEI7RUFBQyxDQUFDLFVBQVVBLEtBQUssRUFBRTtJQUNqQixJQUFJQyxpQkFBaUIsR0FBRztNQUN0QkMsT0FBTyxFQUFFLFNBQVM7TUFDbEJDLE1BQU0sRUFBRTtJQUNWLENBQUM7SUFDREgsS0FBSyxDQUFDSSxTQUFTLENBQUNQLENBQUMsR0FBR0csS0FBSyxDQUFDSSxTQUFTLENBQUNDLE1BQU0sQ0FBQyxPQUFPLEVBQUU7TUFDbERDLE1BQU0sRUFBRTtRQUNOSixPQUFPLEVBQUUsa0RBQWtEO1FBQzNESyxLQUFLLEVBQUUsZUFBZTtRQUN0QkMsTUFBTSxFQUFFLElBQUk7UUFDWkwsTUFBTSxFQUFFO1VBQ05NLGFBQWEsRUFBRTtZQUNiUCxPQUFPLEVBQ0wscUZBQXFGO1lBQ3ZGUSxVQUFVLEVBQUUsSUFBSTtZQUNoQlAsTUFBTSxFQUFFO2NBQ04sd0JBQXdCLEVBQUU7Z0JBQ3hCRCxPQUFPLEVBQUUsZUFBZTtnQkFDeEJLLEtBQUssRUFBRTtjQUNULENBQUM7Y0FDRCwyQkFBMkIsRUFBRTtnQkFDM0JMLE9BQU8sRUFBRSxXQUFXO2dCQUNwQkssS0FBSyxFQUFFO2NBQ1QsQ0FBQztjQUNELDBCQUEwQixFQUFFTjtZQUM5QjtVQUNGO1FBQ0Y7TUFDRixDQUFDO01BQ0QsWUFBWSxFQUFFO1FBQ1pDLE9BQU8sRUFBRSxrREFBa0Q7UUFDM0RRLFVBQVUsRUFBRTtNQUNkLENBQUM7TUFDREMsT0FBTyxFQUNMLHFSQUFxUjtNQUN2UkMsTUFBTSxFQUNKLDJHQUEyRztNQUM3R0MsUUFBUSxFQUNOLDZGQUE2RjtNQUMvRkMsT0FBTyxFQUNMO0lBQ0osQ0FBQyxDQUFDO0lBQ0ZiLGlCQUFpQixDQUFDRSxNQUFNLEdBQUdILEtBQUssQ0FBQ0ksU0FBUyxDQUFDUCxDQUFDO0lBQzVDRyxLQUFLLENBQUNJLFNBQVMsQ0FBQ1csWUFBWSxDQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUU7TUFDMUMsUUFBTTtRQUNKYixPQUFPLEVBQUUsd0JBQXdCO1FBQ2pDO1FBQ0FLLEtBQUssRUFBRTtNQUNUO0lBQ0YsQ0FBQyxDQUFDO0lBQ0ZQLEtBQUssQ0FBQ0ksU0FBUyxDQUFDVyxZQUFZLENBQUMsR0FBRyxFQUFFLFVBQVUsRUFBRTtNQUM1Q0MsU0FBUyxFQUFFO1FBQ1RkLE9BQU8sRUFDTCw4R0FBOEc7UUFDaEhRLFVBQVUsRUFBRSxJQUFJO1FBQ2hCSCxLQUFLLEVBQUUsWUFBWTtRQUNuQkosTUFBTSxFQUFFO1VBQ05jLFdBQVcsRUFBRSxRQUFRO1VBQ3JCTixPQUFPLEVBQUU7UUFDWDtNQUNGLENBQUM7TUFDRE8sT0FBTyxFQUFFO1FBQ1BoQixPQUFPLEVBQUUsb0JBQW9CO1FBQzdCQyxNQUFNLEVBQUU7VUFDTmMsV0FBVyxFQUFFLE1BQU07VUFDbkIsWUFBWSxFQUFFO1FBQ2hCO01BQ0Y7SUFDRixDQUFDLENBQUM7SUFDRmpCLEtBQUssQ0FBQ0ksU0FBUyxDQUFDVyxZQUFZLENBQUMsR0FBRyxFQUFFLFVBQVUsRUFBRTtNQUM1QyxrQkFBa0IsRUFBRTtRQUNsQjtRQUNBYixPQUFPLEVBQUUscUJBQXFCO1FBQzlCQyxNQUFNLEVBQUU7VUFDTixZQUFVLE1BQU07VUFDaEJlLE9BQU8sRUFBRTtZQUNQaEIsT0FBTyxFQUFFLE9BQU87WUFDaEJDLE1BQU0sRUFBRUgsS0FBSyxDQUFDSSxTQUFTLENBQUNQLENBQUMsQ0FBQ3FCLE9BQU8sQ0FBQ2Y7VUFDcEM7UUFDRjtNQUNGO0lBQ0YsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxFQUFFSCxLQUFLLENBQUM7QUFDWCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXHYuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gdlxudi5kaXNwbGF5TmFtZSA9ICd2J1xudi5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIHYoUHJpc20pIHtcbiAgOyhmdW5jdGlvbiAoUHJpc20pIHtcbiAgICB2YXIgaW50ZXJwb2xhdGlvbkV4cHIgPSB7XG4gICAgICBwYXR0ZXJuOiAvW1xcc1xcU10rLyxcbiAgICAgIGluc2lkZTogbnVsbFxuICAgIH1cbiAgICBQcmlzbS5sYW5ndWFnZXMudiA9IFByaXNtLmxhbmd1YWdlcy5leHRlbmQoJ2NsaWtlJywge1xuICAgICAgc3RyaW5nOiB7XG4gICAgICAgIHBhdHRlcm46IC9yPyhbXCInXSkoPzpcXFxcKD86XFxyXFxufFtcXHNcXFNdKXwoPyFcXDEpW15cXFxcXFxyXFxuXSkqXFwxLyxcbiAgICAgICAgYWxpYXM6ICdxdW90ZWQtc3RyaW5nJyxcbiAgICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICBpbnRlcnBvbGF0aW9uOiB7XG4gICAgICAgICAgICBwYXR0ZXJuOlxuICAgICAgICAgICAgICAvKCg/Ol58W15cXFxcXSkoPzpcXFxcezJ9KSopXFwkKD86XFx7W157fV0qXFx9fFxcdysoPzpcXC5cXHcrKD86XFwoW15cXChcXCldKlxcKSk/fFxcW1teXFxbXFxdXStcXF0pKikvLFxuICAgICAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgICAgIGluc2lkZToge1xuICAgICAgICAgICAgICAnaW50ZXJwb2xhdGlvbi12YXJpYWJsZSc6IHtcbiAgICAgICAgICAgICAgICBwYXR0ZXJuOiAvXlxcJFxcd1tcXHNcXFNdKiQvLFxuICAgICAgICAgICAgICAgIGFsaWFzOiAndmFyaWFibGUnXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICdpbnRlcnBvbGF0aW9uLXB1bmN0dWF0aW9uJzoge1xuICAgICAgICAgICAgICAgIHBhdHRlcm46IC9eXFwkXFx7fFxcfSQvLFxuICAgICAgICAgICAgICAgIGFsaWFzOiAncHVuY3R1YXRpb24nXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICdpbnRlcnBvbGF0aW9uLWV4cHJlc3Npb24nOiBpbnRlcnBvbGF0aW9uRXhwclxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgICdjbGFzcy1uYW1lJzoge1xuICAgICAgICBwYXR0ZXJuOiAvKFxcYig/OmVudW18aW50ZXJmYWNlfHN0cnVjdHx0eXBlKVxccyspKD86Q1xcLik/XFx3Ky8sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH0sXG4gICAgICBrZXl3b3JkOlxuICAgICAgICAvKD86XFxiKD86X19nbG9iYWx8YXN8YXNtfGFzc2VydHxhdG9taWN8YnJlYWt8Y2hhbnxjb25zdHxjb250aW51ZXxkZWZlcnxlbHNlfGVtYmVkfGVudW18Zm58Zm9yfGdvKD86dG8pP3xpZnxpbXBvcnR8aW58aW50ZXJmYWNlfGlzfGxvY2t8bWF0Y2h8bW9kdWxlfG11dHxub25lfG9yfHB1YnxyZXR1cm58cmxvY2t8c2VsZWN0fHNoYXJlZHxzaXplb2Z8c3RhdGljfHN0cnVjdHx0eXBlKD86b2YpP3x1bmlvbnx1bnNhZmUpfFxcJCg/OmVsc2V8Zm9yfGlmKXwjKD86ZmxhZ3xpbmNsdWRlKSlcXGIvLFxuICAgICAgbnVtYmVyOlxuICAgICAgICAvXFxiKD86MHhbYS1mXFxkXSsoPzpfW2EtZlxcZF0rKSp8MGJbMDFdKyg/Ol9bMDFdKykqfDBvWzAtN10rKD86X1swLTddKykqfFxcZCsoPzpfXFxkKykqKD86XFwuXFxkKyg/Ol9cXGQrKSopPylcXGIvaSxcbiAgICAgIG9wZXJhdG9yOlxuICAgICAgICAvfnxcXD98WypcXC8lXiE9XT0/fFxcK1s9K10/fC1bPS1dP3xcXHxbPXxdP3wmKD86PXwmfFxcXj0/KT98Pig/Oj49P3w9KT98PCg/Ojw9P3w9fC0pP3w6PXxcXC5cXC5cXC4/LyxcbiAgICAgIGJ1aWx0aW46XG4gICAgICAgIC9cXGIoPzphbnkoPzpfZmxvYXR8X2ludCk/fGJvb2x8Ynl0ZSg/OnB0cik/fGNoYXJwdHJ8Zig/OjMyfDY0KXxpKD86OHwxNnw2NHwxMjh8bnQpfHJ1bmV8c2l6ZV90fHN0cmluZ3x1KD86MTZ8MzJ8NjR8MTI4KXx2b2lkcHRyKVxcYi9cbiAgICB9KVxuICAgIGludGVycG9sYXRpb25FeHByLmluc2lkZSA9IFByaXNtLmxhbmd1YWdlcy52XG4gICAgUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgndicsICdzdHJpbmcnLCB7XG4gICAgICBjaGFyOiB7XG4gICAgICAgIHBhdHRlcm46IC9gKD86XFxcXGB8XFxcXD9bXmBdezEsMn0pYC8sXG4gICAgICAgIC8vIHVzaW5nIHsxLDJ9IGluc3RlYWQgb2YgYHVgIGZsYWcgZm9yIGNvbXBhdGliaWxpdHlcbiAgICAgICAgYWxpYXM6ICdydW5lJ1xuICAgICAgfVxuICAgIH0pXG4gICAgUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgndicsICdvcGVyYXRvcicsIHtcbiAgICAgIGF0dHJpYnV0ZToge1xuICAgICAgICBwYXR0ZXJuOlxuICAgICAgICAgIC8oXltcXHQgXSopXFxbKD86ZGVwcmVjYXRlZHxkaXJlY3RfYXJyYXlfYWNjZXNzfGZsYWd8aW5saW5lfGxpdmV8cmVmX29ubHl8dHlwZWRlZnx1bnNhZmVfZm58d2luZG93c19zdGRjYWxsKVxcXS9tLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICBhbGlhczogJ2Fubm90YXRpb24nLFxuICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICBwdW5jdHVhdGlvbjogL1tcXFtcXF1dLyxcbiAgICAgICAgICBrZXl3b3JkOiAvXFx3Ky9cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGdlbmVyaWM6IHtcbiAgICAgICAgcGF0dGVybjogLzxcXHcrPig/PVxccypbXFwpXFx7XSkvLFxuICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICBwdW5jdHVhdGlvbjogL1s8Pl0vLFxuICAgICAgICAgICdjbGFzcy1uYW1lJzogL1xcdysvXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuICAgIFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ3YnLCAnZnVuY3Rpb24nLCB7XG4gICAgICAnZ2VuZXJpYy1mdW5jdGlvbic6IHtcbiAgICAgICAgLy8gZS5nLiBmb288VD4oIC4uLlxuICAgICAgICBwYXR0ZXJuOiAvXFxiXFx3K1xccyo8XFx3Kz4oPz1cXCgpLyxcbiAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgZnVuY3Rpb246IC9eXFx3Ky8sXG4gICAgICAgICAgZ2VuZXJpYzoge1xuICAgICAgICAgICAgcGF0dGVybjogLzxcXHcrPi8sXG4gICAgICAgICAgICBpbnNpZGU6IFByaXNtLmxhbmd1YWdlcy52LmdlbmVyaWMuaW5zaWRlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgfSkoUHJpc20pXG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInYiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImludGVycG9sYXRpb25FeHByIiwicGF0dGVybiIsImluc2lkZSIsImxhbmd1YWdlcyIsImV4dGVuZCIsInN0cmluZyIsImFsaWFzIiwiZ3JlZWR5IiwiaW50ZXJwb2xhdGlvbiIsImxvb2tiZWhpbmQiLCJrZXl3b3JkIiwibnVtYmVyIiwib3BlcmF0b3IiLCJidWlsdGluIiwiaW5zZXJ0QmVmb3JlIiwiYXR0cmlidXRlIiwicHVuY3R1YXRpb24iLCJnZW5lcmljIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/v.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/vala.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/vala.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = vala;\nvala.displayName = 'vala';\nvala.aliases = [];\nfunction vala(Prism) {\n  Prism.languages.vala = Prism.languages.extend('clike', {\n    // Classes copied from prism-csharp\n    'class-name': [{\n      // (Foo bar, Bar baz)\n      pattern: /\\b[A-Z]\\w*(?:\\.\\w+)*\\b(?=(?:\\?\\s+|\\*?\\s+\\*?)\\w)/,\n      inside: {\n        punctuation: /\\./\n      }\n    }, {\n      // [Foo]\n      pattern: /(\\[)[A-Z]\\w*(?:\\.\\w+)*\\b/,\n      lookbehind: true,\n      inside: {\n        punctuation: /\\./\n      }\n    }, {\n      // class Foo : Bar\n      pattern: /(\\b(?:class|interface)\\s+[A-Z]\\w*(?:\\.\\w+)*\\s*:\\s*)[A-Z]\\w*(?:\\.\\w+)*\\b/,\n      lookbehind: true,\n      inside: {\n        punctuation: /\\./\n      }\n    }, {\n      // class Foo\n      pattern: /((?:\\b(?:class|enum|interface|new|struct)\\s+)|(?:catch\\s+\\())[A-Z]\\w*(?:\\.\\w+)*\\b/,\n      lookbehind: true,\n      inside: {\n        punctuation: /\\./\n      }\n    }],\n    keyword: /\\b(?:abstract|as|assert|async|base|bool|break|case|catch|char|class|const|construct|continue|default|delegate|delete|do|double|dynamic|else|ensures|enum|errordomain|extern|finally|float|for|foreach|get|if|in|inline|int|int16|int32|int64|int8|interface|internal|is|lock|long|namespace|new|null|out|override|owned|params|private|protected|public|ref|requires|return|set|short|signal|sizeof|size_t|ssize_t|static|string|struct|switch|this|throw|throws|try|typeof|uchar|uint|uint16|uint32|uint64|uint8|ulong|unichar|unowned|ushort|using|value|var|virtual|void|volatile|weak|while|yield)\\b/i,\n    \"function\": /\\b\\w+(?=\\s*\\()/,\n    number: /(?:\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)(?:f|u?l?)?/i,\n    operator: /\\+\\+|--|&&|\\|\\||<<=?|>>=?|=>|->|~|[+\\-*\\/%&^|=!<>]=?|\\?\\??|\\.\\.\\./,\n    punctuation: /[{}[\\];(),.:]/,\n    constant: /\\b[A-Z0-9_]+\\b/\n  });\n  Prism.languages.insertBefore('vala', 'string', {\n    'raw-string': {\n      pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n      greedy: true,\n      alias: 'string'\n    },\n    'template-string': {\n      pattern: /@\"[\\s\\S]*?\"/,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /\\$(?:\\([^)]*\\)|[a-zA-Z]\\w*)/,\n          inside: {\n            delimiter: {\n              pattern: /^\\$\\(?|\\)$/,\n              alias: 'punctuation'\n            },\n            rest: Prism.languages.vala\n          }\n        },\n        string: /[\\s\\S]+/\n      }\n    }\n  });\n  Prism.languages.insertBefore('vala', 'keyword', {\n    regex: {\n      pattern: /\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[imsx]{0,4}(?=\\s*(?:$|[\\r\\n,.;})\\]]))/,\n      greedy: true,\n      inside: {\n        'regex-source': {\n          pattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\n          lookbehind: true,\n          alias: 'language-regex',\n          inside: Prism.languages.regex\n        },\n        'regex-delimiter': /^\\//,\n        'regex-flags': /^[a-z]+$/\n      }\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvdmFsYS5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLElBQUk7QUFDckJBLElBQUksQ0FBQ0MsV0FBVyxHQUFHLE1BQU07QUFDekJELElBQUksQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDakIsU0FBU0YsSUFBSUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ25CQSxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osSUFBSSxHQUFHRyxLQUFLLENBQUNDLFNBQVMsQ0FBQ0MsTUFBTSxDQUFDLE9BQU8sRUFBRTtJQUNyRDtJQUNBLFlBQVksRUFBRSxDQUNaO01BQ0U7TUFDQUMsT0FBTyxFQUFFLGlEQUFpRDtNQUMxREMsTUFBTSxFQUFFO1FBQ05DLFdBQVcsRUFBRTtNQUNmO0lBQ0YsQ0FBQyxFQUNEO01BQ0U7TUFDQUYsT0FBTyxFQUFFLDBCQUEwQjtNQUNuQ0csVUFBVSxFQUFFLElBQUk7TUFDaEJGLE1BQU0sRUFBRTtRQUNOQyxXQUFXLEVBQUU7TUFDZjtJQUNGLENBQUMsRUFDRDtNQUNFO01BQ0FGLE9BQU8sRUFDTCx5RUFBeUU7TUFDM0VHLFVBQVUsRUFBRSxJQUFJO01BQ2hCRixNQUFNLEVBQUU7UUFDTkMsV0FBVyxFQUFFO01BQ2Y7SUFDRixDQUFDLEVBQ0Q7TUFDRTtNQUNBRixPQUFPLEVBQ0wsbUZBQW1GO01BQ3JGRyxVQUFVLEVBQUUsSUFBSTtNQUNoQkYsTUFBTSxFQUFFO1FBQ05DLFdBQVcsRUFBRTtNQUNmO0lBQ0YsQ0FBQyxDQUNGO0lBQ0RFLE9BQU8sRUFDTCwya0JBQTJrQjtJQUM3a0IsWUFBVSxnQkFBZ0I7SUFDMUJDLE1BQU0sRUFDSiwwRUFBMEU7SUFDNUVDLFFBQVEsRUFDTixtRUFBbUU7SUFDckVKLFdBQVcsRUFBRSxlQUFlO0lBQzVCSyxRQUFRLEVBQUU7RUFDWixDQUFDLENBQUM7RUFDRlYsS0FBSyxDQUFDQyxTQUFTLENBQUNVLFlBQVksQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFO0lBQzdDLFlBQVksRUFBRTtNQUNaUixPQUFPLEVBQUUsZ0JBQWdCO01BQ3pCUyxNQUFNLEVBQUUsSUFBSTtNQUNaQyxLQUFLLEVBQUU7SUFDVCxDQUFDO0lBQ0QsaUJBQWlCLEVBQUU7TUFDakJWLE9BQU8sRUFBRSxhQUFhO01BQ3RCUyxNQUFNLEVBQUUsSUFBSTtNQUNaUixNQUFNLEVBQUU7UUFDTlUsYUFBYSxFQUFFO1VBQ2JYLE9BQU8sRUFBRSw2QkFBNkI7VUFDdENDLE1BQU0sRUFBRTtZQUNOVyxTQUFTLEVBQUU7Y0FDVFosT0FBTyxFQUFFLFlBQVk7Y0FDckJVLEtBQUssRUFBRTtZQUNULENBQUM7WUFDREcsSUFBSSxFQUFFaEIsS0FBSyxDQUFDQyxTQUFTLENBQUNKO1VBQ3hCO1FBQ0YsQ0FBQztRQUNEb0IsTUFBTSxFQUFFO01BQ1Y7SUFDRjtFQUNGLENBQUMsQ0FBQztFQUNGakIsS0FBSyxDQUFDQyxTQUFTLENBQUNVLFlBQVksQ0FBQyxNQUFNLEVBQUUsU0FBUyxFQUFFO0lBQzlDTyxLQUFLLEVBQUU7TUFDTGYsT0FBTyxFQUNMLHlGQUF5RjtNQUMzRlMsTUFBTSxFQUFFLElBQUk7TUFDWlIsTUFBTSxFQUFFO1FBQ04sY0FBYyxFQUFFO1VBQ2RELE9BQU8sRUFBRSwyQkFBMkI7VUFDcENHLFVBQVUsRUFBRSxJQUFJO1VBQ2hCTyxLQUFLLEVBQUUsZ0JBQWdCO1VBQ3ZCVCxNQUFNLEVBQUVKLEtBQUssQ0FBQ0MsU0FBUyxDQUFDaUI7UUFDMUIsQ0FBQztRQUNELGlCQUFpQixFQUFFLEtBQUs7UUFDeEIsYUFBYSxFQUFFO01BQ2pCO0lBQ0Y7RUFDRixDQUFDLENBQUM7QUFDSiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXHZhbGEuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gdmFsYVxudmFsYS5kaXNwbGF5TmFtZSA9ICd2YWxhJ1xudmFsYS5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIHZhbGEoUHJpc20pIHtcbiAgUHJpc20ubGFuZ3VhZ2VzLnZhbGEgPSBQcmlzbS5sYW5ndWFnZXMuZXh0ZW5kKCdjbGlrZScsIHtcbiAgICAvLyBDbGFzc2VzIGNvcGllZCBmcm9tIHByaXNtLWNzaGFycFxuICAgICdjbGFzcy1uYW1lJzogW1xuICAgICAge1xuICAgICAgICAvLyAoRm9vIGJhciwgQmFyIGJheilcbiAgICAgICAgcGF0dGVybjogL1xcYltBLVpdXFx3Kig/OlxcLlxcdyspKlxcYig/PSg/OlxcP1xccyt8XFwqP1xccytcXCo/KVxcdykvLFxuICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICBwdW5jdHVhdGlvbjogL1xcLi9cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgLy8gW0Zvb11cbiAgICAgICAgcGF0dGVybjogLyhcXFspW0EtWl1cXHcqKD86XFwuXFx3KykqXFxiLyxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgcHVuY3R1YXRpb246IC9cXC4vXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIC8vIGNsYXNzIEZvbyA6IEJhclxuICAgICAgICBwYXR0ZXJuOlxuICAgICAgICAgIC8oXFxiKD86Y2xhc3N8aW50ZXJmYWNlKVxccytbQS1aXVxcdyooPzpcXC5cXHcrKSpcXHMqOlxccyopW0EtWl1cXHcqKD86XFwuXFx3KykqXFxiLyxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgcHVuY3R1YXRpb246IC9cXC4vXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIC8vIGNsYXNzIEZvb1xuICAgICAgICBwYXR0ZXJuOlxuICAgICAgICAgIC8oKD86XFxiKD86Y2xhc3N8ZW51bXxpbnRlcmZhY2V8bmV3fHN0cnVjdClcXHMrKXwoPzpjYXRjaFxccytcXCgpKVtBLVpdXFx3Kig/OlxcLlxcdyspKlxcYi8sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGluc2lkZToge1xuICAgICAgICAgIHB1bmN0dWF0aW9uOiAvXFwuL1xuICAgICAgICB9XG4gICAgICB9XG4gICAgXSxcbiAgICBrZXl3b3JkOlxuICAgICAgL1xcYig/OmFic3RyYWN0fGFzfGFzc2VydHxhc3luY3xiYXNlfGJvb2x8YnJlYWt8Y2FzZXxjYXRjaHxjaGFyfGNsYXNzfGNvbnN0fGNvbnN0cnVjdHxjb250aW51ZXxkZWZhdWx0fGRlbGVnYXRlfGRlbGV0ZXxkb3xkb3VibGV8ZHluYW1pY3xlbHNlfGVuc3VyZXN8ZW51bXxlcnJvcmRvbWFpbnxleHRlcm58ZmluYWxseXxmbG9hdHxmb3J8Zm9yZWFjaHxnZXR8aWZ8aW58aW5saW5lfGludHxpbnQxNnxpbnQzMnxpbnQ2NHxpbnQ4fGludGVyZmFjZXxpbnRlcm5hbHxpc3xsb2NrfGxvbmd8bmFtZXNwYWNlfG5ld3xudWxsfG91dHxvdmVycmlkZXxvd25lZHxwYXJhbXN8cHJpdmF0ZXxwcm90ZWN0ZWR8cHVibGljfHJlZnxyZXF1aXJlc3xyZXR1cm58c2V0fHNob3J0fHNpZ25hbHxzaXplb2Z8c2l6ZV90fHNzaXplX3R8c3RhdGljfHN0cmluZ3xzdHJ1Y3R8c3dpdGNofHRoaXN8dGhyb3d8dGhyb3dzfHRyeXx0eXBlb2Z8dWNoYXJ8dWludHx1aW50MTZ8dWludDMyfHVpbnQ2NHx1aW50OHx1bG9uZ3x1bmljaGFyfHVub3duZWR8dXNob3J0fHVzaW5nfHZhbHVlfHZhcnx2aXJ0dWFsfHZvaWR8dm9sYXRpbGV8d2Vha3x3aGlsZXx5aWVsZClcXGIvaSxcbiAgICBmdW5jdGlvbjogL1xcYlxcdysoPz1cXHMqXFwoKS8sXG4gICAgbnVtYmVyOlxuICAgICAgLyg/OlxcYjB4W1xcZGEtZl0rXFxifCg/OlxcYlxcZCsoPzpcXC5cXGQqKT98XFxCXFwuXFxkKykoPzplWystXT9cXGQrKT8pKD86Znx1P2w/KT8vaSxcbiAgICBvcGVyYXRvcjpcbiAgICAgIC9cXCtcXCt8LS18JiZ8XFx8XFx8fDw8PT98Pj49P3w9PnwtPnx+fFsrXFwtKlxcLyUmXnw9ITw+XT0/fFxcP1xcPz98XFwuXFwuXFwuLyxcbiAgICBwdW5jdHVhdGlvbjogL1t7fVtcXF07KCksLjpdLyxcbiAgICBjb25zdGFudDogL1xcYltBLVowLTlfXStcXGIvXG4gIH0pXG4gIFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ3ZhbGEnLCAnc3RyaW5nJywge1xuICAgICdyYXctc3RyaW5nJzoge1xuICAgICAgcGF0dGVybjogL1wiXCJcIltcXHNcXFNdKj9cIlwiXCIvLFxuICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgYWxpYXM6ICdzdHJpbmcnXG4gICAgfSxcbiAgICAndGVtcGxhdGUtc3RyaW5nJzoge1xuICAgICAgcGF0dGVybjogL0BcIltcXHNcXFNdKj9cIi8sXG4gICAgICBncmVlZHk6IHRydWUsXG4gICAgICBpbnNpZGU6IHtcbiAgICAgICAgaW50ZXJwb2xhdGlvbjoge1xuICAgICAgICAgIHBhdHRlcm46IC9cXCQoPzpcXChbXildKlxcKXxbYS16QS1aXVxcdyopLyxcbiAgICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICAgIGRlbGltaXRlcjoge1xuICAgICAgICAgICAgICBwYXR0ZXJuOiAvXlxcJFxcKD98XFwpJC8sXG4gICAgICAgICAgICAgIGFsaWFzOiAncHVuY3R1YXRpb24nXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVzdDogUHJpc20ubGFuZ3VhZ2VzLnZhbGFcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHN0cmluZzogL1tcXHNcXFNdKy9cbiAgICAgIH1cbiAgICB9XG4gIH0pXG4gIFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ3ZhbGEnLCAna2V5d29yZCcsIHtcbiAgICByZWdleDoge1xuICAgICAgcGF0dGVybjpcbiAgICAgICAgL1xcLyg/OlxcWyg/OlteXFxdXFxcXFxcclxcbl18XFxcXC4pKlxcXXxcXFxcLnxbXi9cXFxcXFxbXFxyXFxuXSkrXFwvW2ltc3hdezAsNH0oPz1cXHMqKD86JHxbXFxyXFxuLC47fSlcXF1dKSkvLFxuICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgICdyZWdleC1zb3VyY2UnOiB7XG4gICAgICAgICAgcGF0dGVybjogL14oXFwvKVtcXHNcXFNdKyg/PVxcL1thLXpdKiQpLyxcbiAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAgIGFsaWFzOiAnbGFuZ3VhZ2UtcmVnZXgnLFxuICAgICAgICAgIGluc2lkZTogUHJpc20ubGFuZ3VhZ2VzLnJlZ2V4XG4gICAgICAgIH0sXG4gICAgICAgICdyZWdleC1kZWxpbWl0ZXInOiAvXlxcLy8sXG4gICAgICAgICdyZWdleC1mbGFncyc6IC9eW2Etel0rJC9cbiAgICAgIH1cbiAgICB9XG4gIH0pXG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInZhbGEiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImxhbmd1YWdlcyIsImV4dGVuZCIsInBhdHRlcm4iLCJpbnNpZGUiLCJwdW5jdHVhdGlvbiIsImxvb2tiZWhpbmQiLCJrZXl3b3JkIiwibnVtYmVyIiwib3BlcmF0b3IiLCJjb25zdGFudCIsImluc2VydEJlZm9yZSIsImdyZWVkeSIsImFsaWFzIiwiaW50ZXJwb2xhdGlvbiIsImRlbGltaXRlciIsInJlc3QiLCJzdHJpbmciLCJyZWdleCJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/vala.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/vbnet.js":
/*!**********************************************!*\
  !*** ./node_modules/refractor/lang/vbnet.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar refractorBasic = __webpack_require__(/*! ./basic.js */ \"(ssr)/./node_modules/refractor/lang/basic.js\");\nmodule.exports = vbnet;\nvbnet.displayName = 'vbnet';\nvbnet.aliases = [];\nfunction vbnet(Prism) {\n  Prism.register(refractorBasic);\n  Prism.languages.vbnet = Prism.languages.extend('basic', {\n    comment: [{\n      pattern: /(?:!|REM\\b).+/i,\n      inside: {\n        keyword: /^REM/i\n      }\n    }, {\n      pattern: /(^|[^\\\\:])'.*/,\n      lookbehind: true,\n      greedy: true\n    }],\n    string: {\n      pattern: /(^|[^\"])\"(?:\"\"|[^\"])*\"(?!\")/,\n      lookbehind: true,\n      greedy: true\n    },\n    keyword: /(?:\\b(?:ADDHANDLER|ADDRESSOF|ALIAS|AND|ANDALSO|AS|BEEP|BLOAD|BOOLEAN|BSAVE|BYREF|BYTE|BYVAL|CALL(?: ABSOLUTE)?|CASE|CATCH|CBOOL|CBYTE|CCHAR|CDATE|CDBL|CDEC|CHAIN|CHAR|CHDIR|CINT|CLASS|CLEAR|CLNG|CLOSE|CLS|COBJ|COM|COMMON|CONST|CONTINUE|CSBYTE|CSHORT|CSNG|CSTR|CTYPE|CUINT|CULNG|CUSHORT|DATA|DATE|DECIMAL|DECLARE|DEF(?: FN| SEG|DBL|INT|LNG|SNG|STR)|DEFAULT|DELEGATE|DIM|DIRECTCAST|DO|DOUBLE|ELSE|ELSEIF|END|ENUM|ENVIRON|ERASE|ERROR|EVENT|EXIT|FALSE|FIELD|FILES|FINALLY|FOR(?: EACH)?|FRIEND|FUNCTION|GET|GETTYPE|GETXMLNAMESPACE|GLOBAL|GOSUB|GOTO|HANDLES|IF|IMPLEMENTS|IMPORTS|IN|INHERITS|INPUT|INTEGER|INTERFACE|IOCTL|IS|ISNOT|KEY|KILL|LET|LIB|LIKE|LINE INPUT|LOCATE|LOCK|LONG|LOOP|LSET|ME|MKDIR|MOD|MODULE|MUSTINHERIT|MUSTOVERRIDE|MYBASE|MYCLASS|NAME|NAMESPACE|NARROWING|NEW|NEXT|NOT|NOTHING|NOTINHERITABLE|NOTOVERRIDABLE|OBJECT|OF|OFF|ON(?: COM| ERROR| KEY| TIMER)?|OPEN|OPERATOR|OPTION(?: BASE)?|OPTIONAL|OR|ORELSE|OUT|OVERLOADS|OVERRIDABLE|OVERRIDES|PARAMARRAY|PARTIAL|POKE|PRIVATE|PROPERTY|PROTECTED|PUBLIC|PUT|RAISEEVENT|READ|READONLY|REDIM|REM|REMOVEHANDLER|RESTORE|RESUME|RETURN|RMDIR|RSET|RUN|SBYTE|SELECT(?: CASE)?|SET|SHADOWS|SHARED|SHELL|SHORT|SINGLE|SLEEP|STATIC|STEP|STOP|STRING|STRUCTURE|SUB|SWAP|SYNCLOCK|SYSTEM|THEN|THROW|TIMER|TO|TROFF|TRON|TRUE|TRY|TRYCAST|TYPE|TYPEOF|UINTEGER|ULONG|UNLOCK|UNTIL|USHORT|USING|VIEW PRINT|WAIT|WEND|WHEN|WHILE|WIDENING|WITH|WITHEVENTS|WRITE|WRITEONLY|XOR)|\\B(?:#CONST|#ELSE|#ELSEIF|#END|#IF))(?:\\$|\\b)/i,\n    punctuation: /[,;:(){}]/\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvdmJuZXQuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBQ1osSUFBSUEsY0FBYyxHQUFHQyxtQkFBTyxDQUFDLGdFQUFZLENBQUM7QUFDMUNDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxLQUFLO0FBQ3RCQSxLQUFLLENBQUNDLFdBQVcsR0FBRyxPQUFPO0FBQzNCRCxLQUFLLENBQUNFLE9BQU8sR0FBRyxFQUFFO0FBQ2xCLFNBQVNGLEtBQUtBLENBQUNHLEtBQUssRUFBRTtFQUNwQkEsS0FBSyxDQUFDQyxRQUFRLENBQUNSLGNBQWMsQ0FBQztFQUM5Qk8sS0FBSyxDQUFDRSxTQUFTLENBQUNMLEtBQUssR0FBR0csS0FBSyxDQUFDRSxTQUFTLENBQUNDLE1BQU0sQ0FBQyxPQUFPLEVBQUU7SUFDdERDLE9BQU8sRUFBRSxDQUNQO01BQ0VDLE9BQU8sRUFBRSxnQkFBZ0I7TUFDekJDLE1BQU0sRUFBRTtRQUNOQyxPQUFPLEVBQUU7TUFDWDtJQUNGLENBQUMsRUFDRDtNQUNFRixPQUFPLEVBQUUsZUFBZTtNQUN4QkcsVUFBVSxFQUFFLElBQUk7TUFDaEJDLE1BQU0sRUFBRTtJQUNWLENBQUMsQ0FDRjtJQUNEQyxNQUFNLEVBQUU7TUFDTkwsT0FBTyxFQUFFLDZCQUE2QjtNQUN0Q0csVUFBVSxFQUFFLElBQUk7TUFDaEJDLE1BQU0sRUFBRTtJQUNWLENBQUM7SUFDREYsT0FBTyxFQUNMLDY2Q0FBNjZDO0lBQy82Q0ksV0FBVyxFQUFFO0VBQ2YsQ0FBQyxDQUFDO0FBQ0oiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFx2Ym5ldC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcbnZhciByZWZyYWN0b3JCYXNpYyA9IHJlcXVpcmUoJy4vYmFzaWMuanMnKVxubW9kdWxlLmV4cG9ydHMgPSB2Ym5ldFxudmJuZXQuZGlzcGxheU5hbWUgPSAndmJuZXQnXG52Ym5ldC5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIHZibmV0KFByaXNtKSB7XG4gIFByaXNtLnJlZ2lzdGVyKHJlZnJhY3RvckJhc2ljKVxuICBQcmlzbS5sYW5ndWFnZXMudmJuZXQgPSBQcmlzbS5sYW5ndWFnZXMuZXh0ZW5kKCdiYXNpYycsIHtcbiAgICBjb21tZW50OiBbXG4gICAgICB7XG4gICAgICAgIHBhdHRlcm46IC8oPzohfFJFTVxcYikuKy9pLFxuICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICBrZXl3b3JkOiAvXlJFTS9pXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHBhdHRlcm46IC8oXnxbXlxcXFw6XSknLiovLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICBncmVlZHk6IHRydWVcbiAgICAgIH1cbiAgICBdLFxuICAgIHN0cmluZzoge1xuICAgICAgcGF0dGVybjogLyhefFteXCJdKVwiKD86XCJcInxbXlwiXSkqXCIoPyFcIikvLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAga2V5d29yZDpcbiAgICAgIC8oPzpcXGIoPzpBRERIQU5ETEVSfEFERFJFU1NPRnxBTElBU3xBTkR8QU5EQUxTT3xBU3xCRUVQfEJMT0FEfEJPT0xFQU58QlNBVkV8QllSRUZ8QllURXxCWVZBTHxDQUxMKD86IEFCU09MVVRFKT98Q0FTRXxDQVRDSHxDQk9PTHxDQllURXxDQ0hBUnxDREFURXxDREJMfENERUN8Q0hBSU58Q0hBUnxDSERJUnxDSU5UfENMQVNTfENMRUFSfENMTkd8Q0xPU0V8Q0xTfENPQkp8Q09NfENPTU1PTnxDT05TVHxDT05USU5VRXxDU0JZVEV8Q1NIT1JUfENTTkd8Q1NUUnxDVFlQRXxDVUlOVHxDVUxOR3xDVVNIT1JUfERBVEF8REFURXxERUNJTUFMfERFQ0xBUkV8REVGKD86IEZOfCBTRUd8REJMfElOVHxMTkd8U05HfFNUUil8REVGQVVMVHxERUxFR0FURXxESU18RElSRUNUQ0FTVHxET3xET1VCTEV8RUxTRXxFTFNFSUZ8RU5EfEVOVU18RU5WSVJPTnxFUkFTRXxFUlJPUnxFVkVOVHxFWElUfEZBTFNFfEZJRUxEfEZJTEVTfEZJTkFMTFl8Rk9SKD86IEVBQ0gpP3xGUklFTkR8RlVOQ1RJT058R0VUfEdFVFRZUEV8R0VUWE1MTkFNRVNQQUNFfEdMT0JBTHxHT1NVQnxHT1RPfEhBTkRMRVN8SUZ8SU1QTEVNRU5UU3xJTVBPUlRTfElOfElOSEVSSVRTfElOUFVUfElOVEVHRVJ8SU5URVJGQUNFfElPQ1RMfElTfElTTk9UfEtFWXxLSUxMfExFVHxMSUJ8TElLRXxMSU5FIElOUFVUfExPQ0FURXxMT0NLfExPTkd8TE9PUHxMU0VUfE1FfE1LRElSfE1PRHxNT0RVTEV8TVVTVElOSEVSSVR8TVVTVE9WRVJSSURFfE1ZQkFTRXxNWUNMQVNTfE5BTUV8TkFNRVNQQUNFfE5BUlJPV0lOR3xORVd8TkVYVHxOT1R8Tk9USElOR3xOT1RJTkhFUklUQUJMRXxOT1RPVkVSUklEQUJMRXxPQkpFQ1R8T0Z8T0ZGfE9OKD86IENPTXwgRVJST1J8IEtFWXwgVElNRVIpP3xPUEVOfE9QRVJBVE9SfE9QVElPTig/OiBCQVNFKT98T1BUSU9OQUx8T1J8T1JFTFNFfE9VVHxPVkVSTE9BRFN8T1ZFUlJJREFCTEV8T1ZFUlJJREVTfFBBUkFNQVJSQVl8UEFSVElBTHxQT0tFfFBSSVZBVEV8UFJPUEVSVFl8UFJPVEVDVEVEfFBVQkxJQ3xQVVR8UkFJU0VFVkVOVHxSRUFEfFJFQURPTkxZfFJFRElNfFJFTXxSRU1PVkVIQU5ETEVSfFJFU1RPUkV8UkVTVU1FfFJFVFVSTnxSTURJUnxSU0VUfFJVTnxTQllURXxTRUxFQ1QoPzogQ0FTRSk/fFNFVHxTSEFET1dTfFNIQVJFRHxTSEVMTHxTSE9SVHxTSU5HTEV8U0xFRVB8U1RBVElDfFNURVB8U1RPUHxTVFJJTkd8U1RSVUNUVVJFfFNVQnxTV0FQfFNZTkNMT0NLfFNZU1RFTXxUSEVOfFRIUk9XfFRJTUVSfFRPfFRST0ZGfFRST058VFJVRXxUUll8VFJZQ0FTVHxUWVBFfFRZUEVPRnxVSU5URUdFUnxVTE9OR3xVTkxPQ0t8VU5USUx8VVNIT1JUfFVTSU5HfFZJRVcgUFJJTlR8V0FJVHxXRU5EfFdIRU58V0hJTEV8V0lERU5JTkd8V0lUSHxXSVRIRVZFTlRTfFdSSVRFfFdSSVRFT05MWXxYT1IpfFxcQig/OiNDT05TVHwjRUxTRXwjRUxTRUlGfCNFTkR8I0lGKSkoPzpcXCR8XFxiKS9pLFxuICAgIHB1bmN0dWF0aW9uOiAvWyw7Oigpe31dL1xuICB9KVxufVxuIl0sIm5hbWVzIjpbInJlZnJhY3RvckJhc2ljIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJ2Ym5ldCIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwicmVnaXN0ZXIiLCJsYW5ndWFnZXMiLCJleHRlbmQiLCJjb21tZW50IiwicGF0dGVybiIsImluc2lkZSIsImtleXdvcmQiLCJsb29rYmVoaW5kIiwiZ3JlZWR5Iiwic3RyaW5nIiwicHVuY3R1YXRpb24iXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/vbnet.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/velocity.js":
/*!*************************************************!*\
  !*** ./node_modules/refractor/lang/velocity.js ***!
  \*************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = velocity;\nvelocity.displayName = 'velocity';\nvelocity.aliases = [];\nfunction velocity(Prism) {\n  ;\n  (function (Prism) {\n    Prism.languages.velocity = Prism.languages.extend('markup', {});\n    var velocity = {\n      variable: {\n        pattern: /(^|[^\\\\](?:\\\\\\\\)*)\\$!?(?:[a-z][\\w-]*(?:\\([^)]*\\))?(?:\\.[a-z][\\w-]*(?:\\([^)]*\\))?|\\[[^\\]]+\\])*|\\{[^}]+\\})/i,\n        lookbehind: true,\n        inside: {} // See below\n      },\n\n      string: {\n        pattern: /\"[^\"]*\"|'[^']*'/,\n        greedy: true\n      },\n      number: /\\b\\d+\\b/,\n      \"boolean\": /\\b(?:false|true)\\b/,\n      operator: /[=!<>]=?|[+*/%-]|&&|\\|\\||\\.\\.|\\b(?:eq|g[et]|l[et]|n(?:e|ot))\\b/,\n      punctuation: /[(){}[\\]:,.]/\n    };\n    velocity.variable.inside = {\n      string: velocity['string'],\n      \"function\": {\n        pattern: /([^\\w-])[a-z][\\w-]*(?=\\()/,\n        lookbehind: true\n      },\n      number: velocity['number'],\n      \"boolean\": velocity['boolean'],\n      punctuation: velocity['punctuation']\n    };\n    Prism.languages.insertBefore('velocity', 'comment', {\n      unparsed: {\n        pattern: /(^|[^\\\\])#\\[\\[[\\s\\S]*?\\]\\]#/,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          punctuation: /^#\\[\\[|\\]\\]#$/\n        }\n      },\n      'velocity-comment': [{\n        pattern: /(^|[^\\\\])#\\*[\\s\\S]*?\\*#/,\n        lookbehind: true,\n        greedy: true,\n        alias: 'comment'\n      }, {\n        pattern: /(^|[^\\\\])##.*/,\n        lookbehind: true,\n        greedy: true,\n        alias: 'comment'\n      }],\n      directive: {\n        pattern: /(^|[^\\\\](?:\\\\\\\\)*)#@?(?:[a-z][\\w-]*|\\{[a-z][\\w-]*\\})(?:\\s*\\((?:[^()]|\\([^()]*\\))*\\))?/i,\n        lookbehind: true,\n        inside: {\n          keyword: {\n            pattern: /^#@?(?:[a-z][\\w-]*|\\{[a-z][\\w-]*\\})|\\bin\\b/,\n            inside: {\n              punctuation: /[{}]/\n            }\n          },\n          rest: velocity\n        }\n      },\n      variable: velocity['variable']\n    });\n    Prism.languages.velocity['tag'].inside['attr-value'].inside.rest = Prism.languages.velocity;\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvdmVsb2NpdHkuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxRQUFRO0FBQ3pCQSxRQUFRLENBQUNDLFdBQVcsR0FBRyxVQUFVO0FBQ2pDRCxRQUFRLENBQUNFLE9BQU8sR0FBRyxFQUFFO0FBQ3JCLFNBQVNGLFFBQVFBLENBQUNHLEtBQUssRUFBRTtFQUN2QjtFQUFDLENBQUMsVUFBVUEsS0FBSyxFQUFFO0lBQ2pCQSxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osUUFBUSxHQUFHRyxLQUFLLENBQUNDLFNBQVMsQ0FBQ0MsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUMvRCxJQUFJTCxRQUFRLEdBQUc7TUFDYk0sUUFBUSxFQUFFO1FBQ1JDLE9BQU8sRUFDTCwyR0FBMkc7UUFDN0dDLFVBQVUsRUFBRSxJQUFJO1FBQ2hCQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7TUFDYixDQUFDOztNQUNEQyxNQUFNLEVBQUU7UUFDTkgsT0FBTyxFQUFFLGlCQUFpQjtRQUMxQkksTUFBTSxFQUFFO01BQ1YsQ0FBQztNQUNEQyxNQUFNLEVBQUUsU0FBUztNQUNqQixXQUFTLG9CQUFvQjtNQUM3QkMsUUFBUSxFQUNOLGdFQUFnRTtNQUNsRUMsV0FBVyxFQUFFO0lBQ2YsQ0FBQztJQUNEZCxRQUFRLENBQUNNLFFBQVEsQ0FBQ0csTUFBTSxHQUFHO01BQ3pCQyxNQUFNLEVBQUVWLFFBQVEsQ0FBQyxRQUFRLENBQUM7TUFDMUIsWUFBVTtRQUNSTyxPQUFPLEVBQUUsMkJBQTJCO1FBQ3BDQyxVQUFVLEVBQUU7TUFDZCxDQUFDO01BQ0RJLE1BQU0sRUFBRVosUUFBUSxDQUFDLFFBQVEsQ0FBQztNQUMxQixXQUFTQSxRQUFRLENBQUMsU0FBUyxDQUFDO01BQzVCYyxXQUFXLEVBQUVkLFFBQVEsQ0FBQyxhQUFhO0lBQ3JDLENBQUM7SUFDREcsS0FBSyxDQUFDQyxTQUFTLENBQUNXLFlBQVksQ0FBQyxVQUFVLEVBQUUsU0FBUyxFQUFFO01BQ2xEQyxRQUFRLEVBQUU7UUFDUlQsT0FBTyxFQUFFLDZCQUE2QjtRQUN0Q0MsVUFBVSxFQUFFLElBQUk7UUFDaEJHLE1BQU0sRUFBRSxJQUFJO1FBQ1pGLE1BQU0sRUFBRTtVQUNOSyxXQUFXLEVBQUU7UUFDZjtNQUNGLENBQUM7TUFDRCxrQkFBa0IsRUFBRSxDQUNsQjtRQUNFUCxPQUFPLEVBQUUseUJBQXlCO1FBQ2xDQyxVQUFVLEVBQUUsSUFBSTtRQUNoQkcsTUFBTSxFQUFFLElBQUk7UUFDWk0sS0FBSyxFQUFFO01BQ1QsQ0FBQyxFQUNEO1FBQ0VWLE9BQU8sRUFBRSxlQUFlO1FBQ3hCQyxVQUFVLEVBQUUsSUFBSTtRQUNoQkcsTUFBTSxFQUFFLElBQUk7UUFDWk0sS0FBSyxFQUFFO01BQ1QsQ0FBQyxDQUNGO01BQ0RDLFNBQVMsRUFBRTtRQUNUWCxPQUFPLEVBQ0wsd0ZBQXdGO1FBQzFGQyxVQUFVLEVBQUUsSUFBSTtRQUNoQkMsTUFBTSxFQUFFO1VBQ05VLE9BQU8sRUFBRTtZQUNQWixPQUFPLEVBQUUsNENBQTRDO1lBQ3JERSxNQUFNLEVBQUU7Y0FDTkssV0FBVyxFQUFFO1lBQ2Y7VUFDRixDQUFDO1VBQ0RNLElBQUksRUFBRXBCO1FBQ1I7TUFDRixDQUFDO01BQ0RNLFFBQVEsRUFBRU4sUUFBUSxDQUFDLFVBQVU7SUFDL0IsQ0FBQyxDQUFDO0lBQ0ZHLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixRQUFRLENBQUMsS0FBSyxDQUFDLENBQUNTLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQ0EsTUFBTSxDQUFDVyxJQUFJLEdBQzlEakIsS0FBSyxDQUFDQyxTQUFTLENBQUNKLFFBQVE7RUFDNUIsQ0FBQyxFQUFFRyxLQUFLLENBQUM7QUFDWCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXHZlbG9jaXR5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IHZlbG9jaXR5XG52ZWxvY2l0eS5kaXNwbGF5TmFtZSA9ICd2ZWxvY2l0eSdcbnZlbG9jaXR5LmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24gdmVsb2NpdHkoUHJpc20pIHtcbiAgOyhmdW5jdGlvbiAoUHJpc20pIHtcbiAgICBQcmlzbS5sYW5ndWFnZXMudmVsb2NpdHkgPSBQcmlzbS5sYW5ndWFnZXMuZXh0ZW5kKCdtYXJrdXAnLCB7fSlcbiAgICB2YXIgdmVsb2NpdHkgPSB7XG4gICAgICB2YXJpYWJsZToge1xuICAgICAgICBwYXR0ZXJuOlxuICAgICAgICAgIC8oXnxbXlxcXFxdKD86XFxcXFxcXFwpKilcXCQhPyg/OlthLXpdW1xcdy1dKig/OlxcKFteKV0qXFwpKT8oPzpcXC5bYS16XVtcXHctXSooPzpcXChbXildKlxcKSk/fFxcW1teXFxdXStcXF0pKnxcXHtbXn1dK1xcfSkvaSxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgaW5zaWRlOiB7fSAvLyBTZWUgYmVsb3dcbiAgICAgIH0sXG4gICAgICBzdHJpbmc6IHtcbiAgICAgICAgcGF0dGVybjogL1wiW15cIl0qXCJ8J1teJ10qJy8sXG4gICAgICAgIGdyZWVkeTogdHJ1ZVxuICAgICAgfSxcbiAgICAgIG51bWJlcjogL1xcYlxcZCtcXGIvLFxuICAgICAgYm9vbGVhbjogL1xcYig/OmZhbHNlfHRydWUpXFxiLyxcbiAgICAgIG9wZXJhdG9yOlxuICAgICAgICAvWz0hPD5dPT98WysqLyUtXXwmJnxcXHxcXHx8XFwuXFwufFxcYig/OmVxfGdbZXRdfGxbZXRdfG4oPzplfG90KSlcXGIvLFxuICAgICAgcHVuY3R1YXRpb246IC9bKCl7fVtcXF06LC5dL1xuICAgIH1cbiAgICB2ZWxvY2l0eS52YXJpYWJsZS5pbnNpZGUgPSB7XG4gICAgICBzdHJpbmc6IHZlbG9jaXR5WydzdHJpbmcnXSxcbiAgICAgIGZ1bmN0aW9uOiB7XG4gICAgICAgIHBhdHRlcm46IC8oW15cXHctXSlbYS16XVtcXHctXSooPz1cXCgpLyxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIG51bWJlcjogdmVsb2NpdHlbJ251bWJlciddLFxuICAgICAgYm9vbGVhbjogdmVsb2NpdHlbJ2Jvb2xlYW4nXSxcbiAgICAgIHB1bmN0dWF0aW9uOiB2ZWxvY2l0eVsncHVuY3R1YXRpb24nXVxuICAgIH1cbiAgICBQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCd2ZWxvY2l0eScsICdjb21tZW50Jywge1xuICAgICAgdW5wYXJzZWQ6IHtcbiAgICAgICAgcGF0dGVybjogLyhefFteXFxcXF0pI1xcW1xcW1tcXHNcXFNdKj9cXF1cXF0jLyxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICBwdW5jdHVhdGlvbjogL14jXFxbXFxbfFxcXVxcXSMkL1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgJ3ZlbG9jaXR5LWNvbW1lbnQnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwYXR0ZXJuOiAvKF58W15cXFxcXSkjXFwqW1xcc1xcU10qP1xcKiMvLFxuICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgICAgIGFsaWFzOiAnY29tbWVudCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHBhdHRlcm46IC8oXnxbXlxcXFxdKSMjLiovLFxuICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgICAgIGFsaWFzOiAnY29tbWVudCdcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIGRpcmVjdGl2ZToge1xuICAgICAgICBwYXR0ZXJuOlxuICAgICAgICAgIC8oXnxbXlxcXFxdKD86XFxcXFxcXFwpKikjQD8oPzpbYS16XVtcXHctXSp8XFx7W2Etel1bXFx3LV0qXFx9KSg/OlxccypcXCgoPzpbXigpXXxcXChbXigpXSpcXCkpKlxcKSk/L2ksXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGluc2lkZToge1xuICAgICAgICAgIGtleXdvcmQ6IHtcbiAgICAgICAgICAgIHBhdHRlcm46IC9eI0A/KD86W2Etel1bXFx3LV0qfFxce1thLXpdW1xcdy1dKlxcfSl8XFxiaW5cXGIvLFxuICAgICAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgICAgIHB1bmN0dWF0aW9uOiAvW3t9XS9cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHJlc3Q6IHZlbG9jaXR5XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB2YXJpYWJsZTogdmVsb2NpdHlbJ3ZhcmlhYmxlJ11cbiAgICB9KVxuICAgIFByaXNtLmxhbmd1YWdlcy52ZWxvY2l0eVsndGFnJ10uaW5zaWRlWydhdHRyLXZhbHVlJ10uaW5zaWRlLnJlc3QgPVxuICAgICAgUHJpc20ubGFuZ3VhZ2VzLnZlbG9jaXR5XG4gIH0pKFByaXNtKVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJ2ZWxvY2l0eSIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwiZXh0ZW5kIiwidmFyaWFibGUiLCJwYXR0ZXJuIiwibG9va2JlaGluZCIsImluc2lkZSIsInN0cmluZyIsImdyZWVkeSIsIm51bWJlciIsIm9wZXJhdG9yIiwicHVuY3R1YXRpb24iLCJpbnNlcnRCZWZvcmUiLCJ1bnBhcnNlZCIsImFsaWFzIiwiZGlyZWN0aXZlIiwia2V5d29yZCIsInJlc3QiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/velocity.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/verilog.js":
/*!************************************************!*\
  !*** ./node_modules/refractor/lang/verilog.js ***!
  \************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = verilog;\nverilog.displayName = 'verilog';\nverilog.aliases = [];\nfunction verilog(Prism) {\n  Prism.languages.verilog = {\n    comment: {\n      pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,\n      greedy: true\n    },\n    string: {\n      pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n      greedy: true\n    },\n    'kernel-function': {\n      // support for any kernel function (ex: $display())\n      pattern: /\\B\\$\\w+\\b/,\n      alias: 'property'\n    },\n    // support for user defined constants (ex: `define)\n    constant: /\\B`\\w+\\b/,\n    \"function\": /\\b\\w+(?=\\()/,\n    // support for verilog and system verilog keywords\n    keyword: /\\b(?:alias|and|assert|assign|assume|automatic|before|begin|bind|bins|binsof|bit|break|buf|bufif0|bufif1|byte|case|casex|casez|cell|chandle|class|clocking|cmos|config|const|constraint|context|continue|cover|covergroup|coverpoint|cross|deassign|default|defparam|design|disable|dist|do|edge|else|end|endcase|endclass|endclocking|endconfig|endfunction|endgenerate|endgroup|endinterface|endmodule|endpackage|endprimitive|endprogram|endproperty|endsequence|endspecify|endtable|endtask|enum|event|expect|export|extends|extern|final|first_match|for|force|foreach|forever|fork|forkjoin|function|generate|genvar|highz0|highz1|if|iff|ifnone|ignore_bins|illegal_bins|import|incdir|include|initial|inout|input|inside|instance|int|integer|interface|intersect|join|join_any|join_none|large|liblist|library|local|localparam|logic|longint|macromodule|matches|medium|modport|module|nand|negedge|new|nmos|nor|noshowcancelled|not|notif0|notif1|null|or|output|package|packed|parameter|pmos|posedge|primitive|priority|program|property|protected|pull0|pull1|pulldown|pullup|pulsestyle_ondetect|pulsestyle_onevent|pure|rand|randc|randcase|randsequence|rcmos|real|realtime|ref|reg|release|repeat|return|rnmos|rpmos|rtran|rtranif0|rtranif1|scalared|sequence|shortint|shortreal|showcancelled|signed|small|solve|specify|specparam|static|string|strong0|strong1|struct|super|supply0|supply1|table|tagged|task|this|throughout|time|timeprecision|timeunit|tran|tranif0|tranif1|tri|tri0|tri1|triand|trior|trireg|type|typedef|union|unique|unsigned|use|uwire|var|vectored|virtual|void|wait|wait_order|wand|weak0|weak1|while|wildcard|wire|with|within|wor|xnor|xor)\\b/,\n    // bold highlighting for all verilog and system verilog logic blocks\n    important: /\\b(?:always|always_comb|always_ff|always_latch)\\b(?: *@)?/,\n    // support for time ticks, vectors, and real numbers\n    number: /\\B##?\\d+|(?:\\b\\d+)?'[odbh] ?[\\da-fzx_?]+|\\b(?:\\d*[._])?\\d+(?:e[-+]?\\d+)?/i,\n    operator: /[-+{}^~%*\\/?=!<>&|]+/,\n    punctuation: /[[\\];(),.:]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvdmVyaWxvZy5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLE9BQU87QUFDeEJBLE9BQU8sQ0FBQ0MsV0FBVyxHQUFHLFNBQVM7QUFDL0JELE9BQU8sQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDcEIsU0FBU0YsT0FBT0EsQ0FBQ0csS0FBSyxFQUFFO0VBQ3RCQSxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osT0FBTyxHQUFHO0lBQ3hCSyxPQUFPLEVBQUU7TUFDUEMsT0FBTyxFQUFFLHlCQUF5QjtNQUNsQ0MsTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUNEQyxNQUFNLEVBQUU7TUFDTkYsT0FBTyxFQUFFLHFDQUFxQztNQUM5Q0MsTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUNELGlCQUFpQixFQUFFO01BQ2pCO01BQ0FELE9BQU8sRUFBRSxXQUFXO01BQ3BCRyxLQUFLLEVBQUU7SUFDVCxDQUFDO0lBQ0Q7SUFDQUMsUUFBUSxFQUFFLFVBQVU7SUFDcEIsWUFBVSxhQUFhO0lBQ3ZCO0lBQ0FDLE9BQU8sRUFDTCwrbERBQStsRDtJQUNqbUQ7SUFDQUMsU0FBUyxFQUFFLDJEQUEyRDtJQUN0RTtJQUNBQyxNQUFNLEVBQ0osMkVBQTJFO0lBQzdFQyxRQUFRLEVBQUUsc0JBQXNCO0lBQ2hDQyxXQUFXLEVBQUU7RUFDZixDQUFDO0FBQ0giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFx2ZXJpbG9nLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IHZlcmlsb2dcbnZlcmlsb2cuZGlzcGxheU5hbWUgPSAndmVyaWxvZydcbnZlcmlsb2cuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiB2ZXJpbG9nKFByaXNtKSB7XG4gIFByaXNtLmxhbmd1YWdlcy52ZXJpbG9nID0ge1xuICAgIGNvbW1lbnQ6IHtcbiAgICAgIHBhdHRlcm46IC9cXC9cXC8uKnxcXC9cXCpbXFxzXFxTXSo/XFwqXFwvLyxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgc3RyaW5nOiB7XG4gICAgICBwYXR0ZXJuOiAvXCIoPzpcXFxcKD86XFxyXFxufFtcXHNcXFNdKXxbXlwiXFxcXFxcclxcbl0pKlwiLyxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgJ2tlcm5lbC1mdW5jdGlvbic6IHtcbiAgICAgIC8vIHN1cHBvcnQgZm9yIGFueSBrZXJuZWwgZnVuY3Rpb24gKGV4OiAkZGlzcGxheSgpKVxuICAgICAgcGF0dGVybjogL1xcQlxcJFxcdytcXGIvLFxuICAgICAgYWxpYXM6ICdwcm9wZXJ0eSdcbiAgICB9LFxuICAgIC8vIHN1cHBvcnQgZm9yIHVzZXIgZGVmaW5lZCBjb25zdGFudHMgKGV4OiBgZGVmaW5lKVxuICAgIGNvbnN0YW50OiAvXFxCYFxcdytcXGIvLFxuICAgIGZ1bmN0aW9uOiAvXFxiXFx3Kyg/PVxcKCkvLFxuICAgIC8vIHN1cHBvcnQgZm9yIHZlcmlsb2cgYW5kIHN5c3RlbSB2ZXJpbG9nIGtleXdvcmRzXG4gICAga2V5d29yZDpcbiAgICAgIC9cXGIoPzphbGlhc3xhbmR8YXNzZXJ0fGFzc2lnbnxhc3N1bWV8YXV0b21hdGljfGJlZm9yZXxiZWdpbnxiaW5kfGJpbnN8Ymluc29mfGJpdHxicmVha3xidWZ8YnVmaWYwfGJ1ZmlmMXxieXRlfGNhc2V8Y2FzZXh8Y2FzZXp8Y2VsbHxjaGFuZGxlfGNsYXNzfGNsb2NraW5nfGNtb3N8Y29uZmlnfGNvbnN0fGNvbnN0cmFpbnR8Y29udGV4dHxjb250aW51ZXxjb3Zlcnxjb3Zlcmdyb3VwfGNvdmVycG9pbnR8Y3Jvc3N8ZGVhc3NpZ258ZGVmYXVsdHxkZWZwYXJhbXxkZXNpZ258ZGlzYWJsZXxkaXN0fGRvfGVkZ2V8ZWxzZXxlbmR8ZW5kY2FzZXxlbmRjbGFzc3xlbmRjbG9ja2luZ3xlbmRjb25maWd8ZW5kZnVuY3Rpb258ZW5kZ2VuZXJhdGV8ZW5kZ3JvdXB8ZW5kaW50ZXJmYWNlfGVuZG1vZHVsZXxlbmRwYWNrYWdlfGVuZHByaW1pdGl2ZXxlbmRwcm9ncmFtfGVuZHByb3BlcnR5fGVuZHNlcXVlbmNlfGVuZHNwZWNpZnl8ZW5kdGFibGV8ZW5kdGFza3xlbnVtfGV2ZW50fGV4cGVjdHxleHBvcnR8ZXh0ZW5kc3xleHRlcm58ZmluYWx8Zmlyc3RfbWF0Y2h8Zm9yfGZvcmNlfGZvcmVhY2h8Zm9yZXZlcnxmb3JrfGZvcmtqb2lufGZ1bmN0aW9ufGdlbmVyYXRlfGdlbnZhcnxoaWdoejB8aGlnaHoxfGlmfGlmZnxpZm5vbmV8aWdub3JlX2JpbnN8aWxsZWdhbF9iaW5zfGltcG9ydHxpbmNkaXJ8aW5jbHVkZXxpbml0aWFsfGlub3V0fGlucHV0fGluc2lkZXxpbnN0YW5jZXxpbnR8aW50ZWdlcnxpbnRlcmZhY2V8aW50ZXJzZWN0fGpvaW58am9pbl9hbnl8am9pbl9ub25lfGxhcmdlfGxpYmxpc3R8bGlicmFyeXxsb2NhbHxsb2NhbHBhcmFtfGxvZ2ljfGxvbmdpbnR8bWFjcm9tb2R1bGV8bWF0Y2hlc3xtZWRpdW18bW9kcG9ydHxtb2R1bGV8bmFuZHxuZWdlZGdlfG5ld3xubW9zfG5vcnxub3Nob3djYW5jZWxsZWR8bm90fG5vdGlmMHxub3RpZjF8bnVsbHxvcnxvdXRwdXR8cGFja2FnZXxwYWNrZWR8cGFyYW1ldGVyfHBtb3N8cG9zZWRnZXxwcmltaXRpdmV8cHJpb3JpdHl8cHJvZ3JhbXxwcm9wZXJ0eXxwcm90ZWN0ZWR8cHVsbDB8cHVsbDF8cHVsbGRvd258cHVsbHVwfHB1bHNlc3R5bGVfb25kZXRlY3R8cHVsc2VzdHlsZV9vbmV2ZW50fHB1cmV8cmFuZHxyYW5kY3xyYW5kY2FzZXxyYW5kc2VxdWVuY2V8cmNtb3N8cmVhbHxyZWFsdGltZXxyZWZ8cmVnfHJlbGVhc2V8cmVwZWF0fHJldHVybnxybm1vc3xycG1vc3xydHJhbnxydHJhbmlmMHxydHJhbmlmMXxzY2FsYXJlZHxzZXF1ZW5jZXxzaG9ydGludHxzaG9ydHJlYWx8c2hvd2NhbmNlbGxlZHxzaWduZWR8c21hbGx8c29sdmV8c3BlY2lmeXxzcGVjcGFyYW18c3RhdGljfHN0cmluZ3xzdHJvbmcwfHN0cm9uZzF8c3RydWN0fHN1cGVyfHN1cHBseTB8c3VwcGx5MXx0YWJsZXx0YWdnZWR8dGFza3x0aGlzfHRocm91Z2hvdXR8dGltZXx0aW1lcHJlY2lzaW9ufHRpbWV1bml0fHRyYW58dHJhbmlmMHx0cmFuaWYxfHRyaXx0cmkwfHRyaTF8dHJpYW5kfHRyaW9yfHRyaXJlZ3x0eXBlfHR5cGVkZWZ8dW5pb258dW5pcXVlfHVuc2lnbmVkfHVzZXx1d2lyZXx2YXJ8dmVjdG9yZWR8dmlydHVhbHx2b2lkfHdhaXR8d2FpdF9vcmRlcnx3YW5kfHdlYWswfHdlYWsxfHdoaWxlfHdpbGRjYXJkfHdpcmV8d2l0aHx3aXRoaW58d29yfHhub3J8eG9yKVxcYi8sXG4gICAgLy8gYm9sZCBoaWdobGlnaHRpbmcgZm9yIGFsbCB2ZXJpbG9nIGFuZCBzeXN0ZW0gdmVyaWxvZyBsb2dpYyBibG9ja3NcbiAgICBpbXBvcnRhbnQ6IC9cXGIoPzphbHdheXN8YWx3YXlzX2NvbWJ8YWx3YXlzX2ZmfGFsd2F5c19sYXRjaClcXGIoPzogKkApPy8sXG4gICAgLy8gc3VwcG9ydCBmb3IgdGltZSB0aWNrcywgdmVjdG9ycywgYW5kIHJlYWwgbnVtYmVyc1xuICAgIG51bWJlcjpcbiAgICAgIC9cXEIjIz9cXGQrfCg/OlxcYlxcZCspPydbb2RiaF0gP1tcXGRhLWZ6eF8/XSt8XFxiKD86XFxkKlsuX10pP1xcZCsoPzplWy0rXT9cXGQrKT8vaSxcbiAgICBvcGVyYXRvcjogL1stK3t9Xn4lKlxcLz89ITw+JnxdKy8sXG4gICAgcHVuY3R1YXRpb246IC9bW1xcXTsoKSwuOl0vXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwidmVyaWxvZyIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwiY29tbWVudCIsInBhdHRlcm4iLCJncmVlZHkiLCJzdHJpbmciLCJhbGlhcyIsImNvbnN0YW50Iiwia2V5d29yZCIsImltcG9ydGFudCIsIm51bWJlciIsIm9wZXJhdG9yIiwicHVuY3R1YXRpb24iXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/verilog.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/vhdl.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/vhdl.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = vhdl;\nvhdl.displayName = 'vhdl';\nvhdl.aliases = [];\nfunction vhdl(Prism) {\n  Prism.languages.vhdl = {\n    comment: /--.+/,\n    // support for all logic vectors\n    'vhdl-vectors': {\n      pattern: /\\b[oxb]\"[\\da-f_]+\"|\"[01uxzwlh-]+\"/i,\n      alias: 'number'\n    },\n    // support for operator overloading included\n    'quoted-function': {\n      pattern: /\"\\S+?\"(?=\\()/,\n      alias: 'function'\n    },\n    string: /\"(?:[^\\\\\"\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\"/,\n    constant: /\\b(?:library|use)\\b/i,\n    // support for predefined attributes included\n    keyword: /\\b(?:'active|'ascending|'base|'delayed|'driving|'driving_value|'event|'high|'image|'instance_name|'last_active|'last_event|'last_value|'left|'leftof|'length|'low|'path_name|'pos|'pred|'quiet|'range|'reverse_range|'right|'rightof|'simple_name|'stable|'succ|'transaction|'val|'value|access|after|alias|all|architecture|array|assert|attribute|begin|block|body|buffer|bus|case|component|configuration|constant|disconnect|downto|else|elsif|end|entity|exit|file|for|function|generate|generic|group|guarded|if|impure|in|inertial|inout|is|label|library|linkage|literal|loop|map|new|next|null|of|on|open|others|out|package|port|postponed|procedure|process|pure|range|record|register|reject|report|return|select|severity|shared|signal|subtype|then|to|transport|type|unaffected|units|until|use|variable|wait|when|while|with)\\b/i,\n    \"boolean\": /\\b(?:false|true)\\b/i,\n    \"function\": /\\w+(?=\\()/,\n    // decimal, based, physical, and exponential numbers supported\n    number: /'[01uxzwlh-]'|\\b(?:\\d+#[\\da-f_.]+#|\\d[\\d_.]*)(?:e[-+]?\\d+)?/i,\n    operator: /[<>]=?|:=|[-+*/&=]|\\b(?:abs|and|mod|nand|nor|not|or|rem|rol|ror|sla|sll|sra|srl|xnor|xor)\\b/i,\n    punctuation: /[{}[\\];(),.:]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvdmhkbC5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLElBQUk7QUFDckJBLElBQUksQ0FBQ0MsV0FBVyxHQUFHLE1BQU07QUFDekJELElBQUksQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDakIsU0FBU0YsSUFBSUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ25CQSxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osSUFBSSxHQUFHO0lBQ3JCSyxPQUFPLEVBQUUsTUFBTTtJQUNmO0lBQ0EsY0FBYyxFQUFFO01BQ2RDLE9BQU8sRUFBRSxvQ0FBb0M7TUFDN0NDLEtBQUssRUFBRTtJQUNULENBQUM7SUFDRDtJQUNBLGlCQUFpQixFQUFFO01BQ2pCRCxPQUFPLEVBQUUsY0FBYztNQUN2QkMsS0FBSyxFQUFFO0lBQ1QsQ0FBQztJQUNEQyxNQUFNLEVBQUUscUNBQXFDO0lBQzdDQyxRQUFRLEVBQUUsc0JBQXNCO0lBQ2hDO0lBQ0FDLE9BQU8sRUFDTCxrekJBQWt6QjtJQUNwekIsV0FBUyxxQkFBcUI7SUFDOUIsWUFBVSxXQUFXO0lBQ3JCO0lBQ0FDLE1BQU0sRUFBRSw4REFBOEQ7SUFDdEVDLFFBQVEsRUFDTiw4RkFBOEY7SUFDaEdDLFdBQVcsRUFBRTtFQUNmLENBQUM7QUFDSCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXHZoZGwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gdmhkbFxudmhkbC5kaXNwbGF5TmFtZSA9ICd2aGRsJ1xudmhkbC5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIHZoZGwoUHJpc20pIHtcbiAgUHJpc20ubGFuZ3VhZ2VzLnZoZGwgPSB7XG4gICAgY29tbWVudDogLy0tLisvLFxuICAgIC8vIHN1cHBvcnQgZm9yIGFsbCBsb2dpYyB2ZWN0b3JzXG4gICAgJ3ZoZGwtdmVjdG9ycyc6IHtcbiAgICAgIHBhdHRlcm46IC9cXGJbb3hiXVwiW1xcZGEtZl9dK1wifFwiWzAxdXh6d2xoLV0rXCIvaSxcbiAgICAgIGFsaWFzOiAnbnVtYmVyJ1xuICAgIH0sXG4gICAgLy8gc3VwcG9ydCBmb3Igb3BlcmF0b3Igb3ZlcmxvYWRpbmcgaW5jbHVkZWRcbiAgICAncXVvdGVkLWZ1bmN0aW9uJzoge1xuICAgICAgcGF0dGVybjogL1wiXFxTKz9cIig/PVxcKCkvLFxuICAgICAgYWxpYXM6ICdmdW5jdGlvbidcbiAgICB9LFxuICAgIHN0cmluZzogL1wiKD86W15cXFxcXCJcXHJcXG5dfFxcXFwoPzpcXHJcXG58W1xcc1xcU10pKSpcIi8sXG4gICAgY29uc3RhbnQ6IC9cXGIoPzpsaWJyYXJ5fHVzZSlcXGIvaSxcbiAgICAvLyBzdXBwb3J0IGZvciBwcmVkZWZpbmVkIGF0dHJpYnV0ZXMgaW5jbHVkZWRcbiAgICBrZXl3b3JkOlxuICAgICAgL1xcYig/OidhY3RpdmV8J2FzY2VuZGluZ3wnYmFzZXwnZGVsYXllZHwnZHJpdmluZ3wnZHJpdmluZ192YWx1ZXwnZXZlbnR8J2hpZ2h8J2ltYWdlfCdpbnN0YW5jZV9uYW1lfCdsYXN0X2FjdGl2ZXwnbGFzdF9ldmVudHwnbGFzdF92YWx1ZXwnbGVmdHwnbGVmdG9mfCdsZW5ndGh8J2xvd3wncGF0aF9uYW1lfCdwb3N8J3ByZWR8J3F1aWV0fCdyYW5nZXwncmV2ZXJzZV9yYW5nZXwncmlnaHR8J3JpZ2h0b2Z8J3NpbXBsZV9uYW1lfCdzdGFibGV8J3N1Y2N8J3RyYW5zYWN0aW9ufCd2YWx8J3ZhbHVlfGFjY2Vzc3xhZnRlcnxhbGlhc3xhbGx8YXJjaGl0ZWN0dXJlfGFycmF5fGFzc2VydHxhdHRyaWJ1dGV8YmVnaW58YmxvY2t8Ym9keXxidWZmZXJ8YnVzfGNhc2V8Y29tcG9uZW50fGNvbmZpZ3VyYXRpb258Y29uc3RhbnR8ZGlzY29ubmVjdHxkb3dudG98ZWxzZXxlbHNpZnxlbmR8ZW50aXR5fGV4aXR8ZmlsZXxmb3J8ZnVuY3Rpb258Z2VuZXJhdGV8Z2VuZXJpY3xncm91cHxndWFyZGVkfGlmfGltcHVyZXxpbnxpbmVydGlhbHxpbm91dHxpc3xsYWJlbHxsaWJyYXJ5fGxpbmthZ2V8bGl0ZXJhbHxsb29wfG1hcHxuZXd8bmV4dHxudWxsfG9mfG9ufG9wZW58b3RoZXJzfG91dHxwYWNrYWdlfHBvcnR8cG9zdHBvbmVkfHByb2NlZHVyZXxwcm9jZXNzfHB1cmV8cmFuZ2V8cmVjb3JkfHJlZ2lzdGVyfHJlamVjdHxyZXBvcnR8cmV0dXJufHNlbGVjdHxzZXZlcml0eXxzaGFyZWR8c2lnbmFsfHN1YnR5cGV8dGhlbnx0b3x0cmFuc3BvcnR8dHlwZXx1bmFmZmVjdGVkfHVuaXRzfHVudGlsfHVzZXx2YXJpYWJsZXx3YWl0fHdoZW58d2hpbGV8d2l0aClcXGIvaSxcbiAgICBib29sZWFuOiAvXFxiKD86ZmFsc2V8dHJ1ZSlcXGIvaSxcbiAgICBmdW5jdGlvbjogL1xcdysoPz1cXCgpLyxcbiAgICAvLyBkZWNpbWFsLCBiYXNlZCwgcGh5c2ljYWwsIGFuZCBleHBvbmVudGlhbCBudW1iZXJzIHN1cHBvcnRlZFxuICAgIG51bWJlcjogLydbMDF1eHp3bGgtXSd8XFxiKD86XFxkKyNbXFxkYS1mXy5dKyN8XFxkW1xcZF8uXSopKD86ZVstK10/XFxkKyk/L2ksXG4gICAgb3BlcmF0b3I6XG4gICAgICAvWzw+XT0/fDo9fFstKyovJj1dfFxcYig/OmFic3xhbmR8bW9kfG5hbmR8bm9yfG5vdHxvcnxyZW18cm9sfHJvcnxzbGF8c2xsfHNyYXxzcmx8eG5vcnx4b3IpXFxiL2ksXG4gICAgcHVuY3R1YXRpb246IC9be31bXFxdOygpLC46XS9cbiAgfVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJ2aGRsIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJjb21tZW50IiwicGF0dGVybiIsImFsaWFzIiwic3RyaW5nIiwiY29uc3RhbnQiLCJrZXl3b3JkIiwibnVtYmVyIiwib3BlcmF0b3IiLCJwdW5jdHVhdGlvbiJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/vhdl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/vim.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/vim.js ***!
  \********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = vim;\nvim.displayName = 'vim';\nvim.aliases = [];\nfunction vim(Prism) {\n  Prism.languages.vim = {\n    string: /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?:[^'\\r\\n]|'')*'/,\n    comment: /\".*/,\n    \"function\": /\\b\\w+(?=\\()/,\n    keyword: /\\b(?:N|Next|P|Print|X|XMLent|XMLns|ab|abbreviate|abc|abclear|abo|aboveleft|al|all|ar|arga|argadd|argd|argdelete|argdo|arge|argedit|argg|argglobal|argl|arglocal|args|argu|argument|as|ascii|b|bN|bNext|ba|bad|badd|ball|bd|bdelete|be|bel|belowright|bf|bfirst|bl|blast|bm|bmodified|bn|bnext|bo|botright|bp|bprevious|br|brea|break|breaka|breakadd|breakd|breakdel|breakl|breaklist|brewind|bro|browse|bufdo|buffer|buffers|bun|bunload|bw|bwipeout|c|cN|cNext|cNfcNfile|ca|cabbrev|cabc|cabclear|cad|caddb|caddbuffer|caddexpr|caddf|caddfile|cal|call|cat|catch|cb|cbuffer|cc|ccl|cclose|cd|ce|center|cex|cexpr|cf|cfile|cfir|cfirst|cg|cgetb|cgetbuffer|cgete|cgetexpr|cgetfile|change|changes|chd|chdir|che|checkpath|checkt|checktime|cl|cla|clast|clist|clo|close|cmapc|cmapclear|cn|cnew|cnewer|cnext|cnf|cnfile|cnorea|cnoreabbrev|co|col|colder|colo|colorscheme|comc|comclear|comp|compiler|con|conf|confirm|continue|cope|copen|copy|cp|cpf|cpfile|cprevious|cq|cquit|cr|crewind|cu|cuna|cunabbrev|cunmap|cw|cwindow|d|debugg|debuggreedy|delc|delcommand|delete|delf|delfunction|delm|delmarks|di|diffg|diffget|diffoff|diffpatch|diffpu|diffput|diffsplit|diffthis|diffu|diffupdate|dig|digraphs|display|dj|djump|dl|dlist|dr|drop|ds|dsearch|dsp|dsplit|e|earlier|echoe|echoerr|echom|echomsg|echon|edit|el|else|elsei|elseif|em|emenu|en|endf|endfo|endfor|endfun|endfunction|endif|endt|endtry|endw|endwhile|ene|enew|ex|exi|exit|exu|exusage|f|file|files|filetype|fin|fina|finally|find|fini|finish|fir|first|fix|fixdel|fo|fold|foldc|foldclose|foldd|folddoc|folddoclosed|folddoopen|foldo|foldopen|for|fu|fun|function|go|goto|gr|grep|grepa|grepadd|h|ha|hardcopy|help|helpf|helpfind|helpg|helpgrep|helpt|helptags|hid|hide|his|history|ia|iabbrev|iabc|iabclear|if|ij|ijump|il|ilist|imapc|imapclear|in|inorea|inoreabbrev|isearch|isp|isplit|iu|iuna|iunabbrev|iunmap|j|join|ju|jumps|k|kee|keepalt|keepj|keepjumps|keepmarks|l|lN|lNext|lNf|lNfile|la|lad|laddb|laddbuffer|laddexpr|laddf|laddfile|lan|language|last|later|lb|lbuffer|lc|lcd|lch|lchdir|lcl|lclose|left|lefta|leftabove|let|lex|lexpr|lf|lfile|lfir|lfirst|lg|lgetb|lgetbuffer|lgete|lgetexpr|lgetfile|lgr|lgrep|lgrepa|lgrepadd|lh|lhelpgrep|list|ll|lla|llast|lli|llist|lm|lmak|lmake|lmap|lmapc|lmapclear|ln|lne|lnew|lnewer|lnext|lnf|lnfile|lnoremap|lo|loadview|loc|lockmarks|lockv|lockvar|lol|lolder|lop|lopen|lp|lpf|lpfile|lprevious|lr|lrewind|ls|lt|ltag|lu|lunmap|lv|lvimgrep|lvimgrepa|lvimgrepadd|lw|lwindow|m|ma|mak|make|mark|marks|mat|match|menut|menutranslate|mk|mkexrc|mks|mksession|mksp|mkspell|mkv|mkvie|mkview|mkvimrc|mod|mode|move|mz|mzf|mzfile|mzscheme|n|nbkey|new|next|nmapc|nmapclear|noh|nohlsearch|norea|noreabbrev|nu|number|nun|nunmap|o|omapc|omapclear|on|only|open|opt|options|ou|ounmap|p|pc|pclose|pe|ped|pedit|perl|perld|perldo|po|pop|popu|popup|pp|ppop|pre|preserve|prev|previous|print|prof|profd|profdel|profile|promptf|promptfind|promptr|promptrepl|ps|psearch|ptN|ptNext|pta|ptag|ptf|ptfirst|ptj|ptjump|ptl|ptlast|ptn|ptnext|ptp|ptprevious|ptr|ptrewind|pts|ptselect|pu|put|pw|pwd|py|pyf|pyfile|python|q|qa|qall|quit|quita|quitall|r|read|rec|recover|red|redi|redir|redo|redr|redraw|redraws|redrawstatus|reg|registers|res|resize|ret|retab|retu|return|rew|rewind|ri|right|rightb|rightbelow|ru|rub|ruby|rubyd|rubydo|rubyf|rubyfile|runtime|rv|rviminfo|sN|sNext|sa|sal|sall|san|sandbox|sargument|sav|saveas|sb|sbN|sbNext|sba|sball|sbf|sbfirst|sbl|sblast|sbm|sbmodified|sbn|sbnext|sbp|sbprevious|sbr|sbrewind|sbuffer|scrip|scripte|scriptencoding|scriptnames|se|set|setf|setfiletype|setg|setglobal|setl|setlocal|sf|sfind|sfir|sfirst|sh|shell|sign|sil|silent|sim|simalt|sl|sla|slast|sleep|sm|smagic|smap|smapc|smapclear|sme|smenu|sn|snext|sni|sniff|sno|snomagic|snor|snoremap|snoreme|snoremenu|so|sor|sort|source|sp|spe|spelld|spelldump|spellgood|spelli|spellinfo|spellr|spellrepall|spellu|spellundo|spellw|spellwrong|split|spr|sprevious|sre|srewind|st|sta|stag|star|startg|startgreplace|startinsert|startr|startreplace|stj|stjump|stop|stopi|stopinsert|sts|stselect|sun|sunhide|sunm|sunmap|sus|suspend|sv|sview|syncbind|t|tN|tNext|ta|tab|tabN|tabNext|tabc|tabclose|tabd|tabdo|tabe|tabedit|tabf|tabfind|tabfir|tabfirst|tabl|tablast|tabm|tabmove|tabn|tabnew|tabnext|tabo|tabonly|tabp|tabprevious|tabr|tabrewind|tabs|tag|tags|tc|tcl|tcld|tcldo|tclf|tclfile|te|tearoff|tf|tfirst|th|throw|tj|tjump|tl|tlast|tm|tmenu|tn|tnext|to|topleft|tp|tprevious|tr|trewind|try|ts|tselect|tu|tunmenu|u|una|unabbreviate|undo|undoj|undojoin|undol|undolist|unh|unhide|unlet|unlo|unlockvar|unm|unmap|up|update|ve|verb|verbose|version|vert|vertical|vi|vie|view|vim|vimgrep|vimgrepa|vimgrepadd|visual|viu|viusage|vmapc|vmapclear|vne|vnew|vs|vsplit|vu|vunmap|w|wN|wNext|wa|wall|wh|while|win|winc|wincmd|windo|winp|winpos|winsize|wn|wnext|wp|wprevious|wq|wqa|wqall|write|ws|wsverb|wv|wviminfo|x|xa|xall|xit|xm|xmap|xmapc|xmapclear|xme|xmenu|xn|xnoremap|xnoreme|xnoremenu|xu|xunmap|y|yank)\\b/,\n    builtin: /\\b(?:acd|ai|akm|aleph|allowrevins|altkeymap|ambiwidth|ambw|anti|antialias|arab|arabic|arabicshape|ari|arshape|autochdir|autocmd|autoindent|autoread|autowrite|autowriteall|aw|awa|background|backspace|backup|backupcopy|backupdir|backupext|backupskip|balloondelay|ballooneval|balloonexpr|bdir|bdlay|beval|bex|bexpr|bg|bh|bin|binary|biosk|bioskey|bk|bkc|bomb|breakat|brk|browsedir|bs|bsdir|bsk|bt|bufhidden|buflisted|buftype|casemap|ccv|cdpath|cedit|cfu|ch|charconvert|ci|cin|cindent|cink|cinkeys|cino|cinoptions|cinw|cinwords|clipboard|cmdheight|cmdwinheight|cmp|cms|columns|com|comments|commentstring|compatible|complete|completefunc|completeopt|consk|conskey|copyindent|cot|cpo|cpoptions|cpt|cscopepathcomp|cscopeprg|cscopequickfix|cscopetag|cscopetagorder|cscopeverbose|cspc|csprg|csqf|cst|csto|csverb|cuc|cul|cursorcolumn|cursorline|cwh|debug|deco|def|define|delcombine|dex|dg|dict|dictionary|diff|diffexpr|diffopt|digraph|dip|dir|directory|dy|ea|ead|eadirection|eb|ed|edcompatible|ef|efm|ei|ek|enc|encoding|endofline|eol|ep|equalalways|equalprg|errorbells|errorfile|errorformat|esckeys|et|eventignore|expandtab|exrc|fcl|fcs|fdc|fde|fdi|fdl|fdls|fdm|fdn|fdo|fdt|fen|fenc|fencs|fex|ff|ffs|fileencoding|fileencodings|fileformat|fileformats|fillchars|fk|fkmap|flp|fml|fmr|foldcolumn|foldenable|foldexpr|foldignore|foldlevel|foldlevelstart|foldmarker|foldmethod|foldminlines|foldnestmax|foldtext|formatexpr|formatlistpat|formatoptions|formatprg|fp|fs|fsync|ft|gcr|gd|gdefault|gfm|gfn|gfs|gfw|ghr|gp|grepformat|grepprg|gtl|gtt|guicursor|guifont|guifontset|guifontwide|guiheadroom|guioptions|guipty|guitablabel|guitabtooltip|helpfile|helpheight|helplang|hf|hh|hi|hidden|highlight|hk|hkmap|hkmapp|hkp|hl|hlg|hls|hlsearch|ic|icon|iconstring|ignorecase|im|imactivatekey|imak|imc|imcmdline|imd|imdisable|imi|iminsert|ims|imsearch|inc|include|includeexpr|incsearch|inde|indentexpr|indentkeys|indk|inex|inf|infercase|insertmode|invacd|invai|invakm|invallowrevins|invaltkeymap|invanti|invantialias|invar|invarab|invarabic|invarabicshape|invari|invarshape|invautochdir|invautoindent|invautoread|invautowrite|invautowriteall|invaw|invawa|invbackup|invballooneval|invbeval|invbin|invbinary|invbiosk|invbioskey|invbk|invbl|invbomb|invbuflisted|invcf|invci|invcin|invcindent|invcompatible|invconfirm|invconsk|invconskey|invcopyindent|invcp|invcscopetag|invcscopeverbose|invcst|invcsverb|invcuc|invcul|invcursorcolumn|invcursorline|invdeco|invdelcombine|invdg|invdiff|invdigraph|invdisable|invea|inveb|inved|invedcompatible|invek|invendofline|inveol|invequalalways|inverrorbells|invesckeys|invet|invex|invexpandtab|invexrc|invfen|invfk|invfkmap|invfoldenable|invgd|invgdefault|invguipty|invhid|invhidden|invhk|invhkmap|invhkmapp|invhkp|invhls|invhlsearch|invic|invicon|invignorecase|invim|invimc|invimcmdline|invimd|invincsearch|invinf|invinfercase|invinsertmode|invis|invjoinspaces|invjs|invlazyredraw|invlbr|invlinebreak|invlisp|invlist|invloadplugins|invlpl|invlz|invma|invmacatsui|invmagic|invmh|invml|invmod|invmodeline|invmodifiable|invmodified|invmore|invmousef|invmousefocus|invmousehide|invnu|invnumber|invodev|invopendevice|invpaste|invpi|invpreserveindent|invpreviewwindow|invprompt|invpvw|invreadonly|invremap|invrestorescreen|invrevins|invri|invrightleft|invrightleftcmd|invrl|invrlc|invro|invrs|invru|invruler|invsb|invsc|invscb|invscrollbind|invscs|invsecure|invsft|invshellslash|invshelltemp|invshiftround|invshortname|invshowcmd|invshowfulltag|invshowmatch|invshowmode|invsi|invsm|invsmartcase|invsmartindent|invsmarttab|invsmd|invsn|invsol|invspell|invsplitbelow|invsplitright|invspr|invsr|invssl|invsta|invstartofline|invstmp|invswapfile|invswf|invta|invtagbsearch|invtagrelative|invtagstack|invtbi|invtbidi|invtbs|invtermbidi|invterse|invtextauto|invtextmode|invtf|invtgst|invtildeop|invtimeout|invtitle|invto|invtop|invtr|invttimeout|invttybuiltin|invttyfast|invtx|invvb|invvisualbell|invwa|invwarn|invwb|invweirdinvert|invwfh|invwfw|invwildmenu|invwinfixheight|invwinfixwidth|invwiv|invwmnu|invwrap|invwrapscan|invwrite|invwriteany|invwritebackup|invws|isf|isfname|isi|isident|isk|iskeyword|isprint|joinspaces|js|key|keymap|keymodel|keywordprg|km|kmp|kp|langmap|langmenu|laststatus|lazyredraw|lbr|lcs|linebreak|lines|linespace|lisp|lispwords|listchars|loadplugins|lpl|lsp|lz|macatsui|magic|makeef|makeprg|matchpairs|matchtime|maxcombine|maxfuncdepth|maxmapdepth|maxmem|maxmempattern|maxmemtot|mco|mef|menuitems|mfd|mh|mis|mkspellmem|ml|mls|mm|mmd|mmp|mmt|modeline|modelines|modifiable|modified|more|mouse|mousef|mousefocus|mousehide|mousem|mousemodel|mouses|mouseshape|mouset|mousetime|mp|mps|msm|mzq|mzquantum|nf|noacd|noai|noakm|noallowrevins|noaltkeymap|noanti|noantialias|noar|noarab|noarabic|noarabicshape|noari|noarshape|noautochdir|noautoindent|noautoread|noautowrite|noautowriteall|noaw|noawa|nobackup|noballooneval|nobeval|nobin|nobinary|nobiosk|nobioskey|nobk|nobl|nobomb|nobuflisted|nocf|noci|nocin|nocindent|nocompatible|noconfirm|noconsk|noconskey|nocopyindent|nocp|nocscopetag|nocscopeverbose|nocst|nocsverb|nocuc|nocul|nocursorcolumn|nocursorline|nodeco|nodelcombine|nodg|nodiff|nodigraph|nodisable|noea|noeb|noed|noedcompatible|noek|noendofline|noeol|noequalalways|noerrorbells|noesckeys|noet|noex|noexpandtab|noexrc|nofen|nofk|nofkmap|nofoldenable|nogd|nogdefault|noguipty|nohid|nohidden|nohk|nohkmap|nohkmapp|nohkp|nohls|noic|noicon|noignorecase|noim|noimc|noimcmdline|noimd|noincsearch|noinf|noinfercase|noinsertmode|nois|nojoinspaces|nojs|nolazyredraw|nolbr|nolinebreak|nolisp|nolist|noloadplugins|nolpl|nolz|noma|nomacatsui|nomagic|nomh|noml|nomod|nomodeline|nomodifiable|nomodified|nomore|nomousef|nomousefocus|nomousehide|nonu|nonumber|noodev|noopendevice|nopaste|nopi|nopreserveindent|nopreviewwindow|noprompt|nopvw|noreadonly|noremap|norestorescreen|norevins|nori|norightleft|norightleftcmd|norl|norlc|noro|nors|noru|noruler|nosb|nosc|noscb|noscrollbind|noscs|nosecure|nosft|noshellslash|noshelltemp|noshiftround|noshortname|noshowcmd|noshowfulltag|noshowmatch|noshowmode|nosi|nosm|nosmartcase|nosmartindent|nosmarttab|nosmd|nosn|nosol|nospell|nosplitbelow|nosplitright|nospr|nosr|nossl|nosta|nostartofline|nostmp|noswapfile|noswf|nota|notagbsearch|notagrelative|notagstack|notbi|notbidi|notbs|notermbidi|noterse|notextauto|notextmode|notf|notgst|notildeop|notimeout|notitle|noto|notop|notr|nottimeout|nottybuiltin|nottyfast|notx|novb|novisualbell|nowa|nowarn|nowb|noweirdinvert|nowfh|nowfw|nowildmenu|nowinfixheight|nowinfixwidth|nowiv|nowmnu|nowrap|nowrapscan|nowrite|nowriteany|nowritebackup|nows|nrformats|numberwidth|nuw|odev|oft|ofu|omnifunc|opendevice|operatorfunc|opfunc|osfiletype|pa|para|paragraphs|paste|pastetoggle|patchexpr|patchmode|path|pdev|penc|pex|pexpr|pfn|ph|pheader|pi|pm|pmbcs|pmbfn|popt|preserveindent|previewheight|previewwindow|printdevice|printencoding|printexpr|printfont|printheader|printmbcharset|printmbfont|printoptions|prompt|pt|pumheight|pvh|pvw|qe|quoteescape|readonly|remap|report|restorescreen|revins|rightleft|rightleftcmd|rl|rlc|ro|rs|rtp|ruf|ruler|rulerformat|runtimepath|sbo|sc|scb|scr|scroll|scrollbind|scrolljump|scrolloff|scrollopt|scs|sect|sections|secure|sel|selection|selectmode|sessionoptions|sft|shcf|shellcmdflag|shellpipe|shellquote|shellredir|shellslash|shelltemp|shelltype|shellxquote|shiftround|shiftwidth|shm|shortmess|shortname|showbreak|showcmd|showfulltag|showmatch|showmode|showtabline|shq|si|sidescroll|sidescrolloff|siso|sj|slm|smartcase|smartindent|smarttab|smc|smd|softtabstop|sol|spc|spell|spellcapcheck|spellfile|spelllang|spellsuggest|spf|spl|splitbelow|splitright|sps|sr|srr|ss|ssl|ssop|stal|startofline|statusline|stl|stmp|su|sua|suffixes|suffixesadd|sw|swapfile|swapsync|swb|swf|switchbuf|sws|sxq|syn|synmaxcol|syntax|t_AB|t_AF|t_AL|t_CS|t_CV|t_Ce|t_Co|t_Cs|t_DL|t_EI|t_F1|t_F2|t_F3|t_F4|t_F5|t_F6|t_F7|t_F8|t_F9|t_IE|t_IS|t_K1|t_K3|t_K4|t_K5|t_K6|t_K7|t_K8|t_K9|t_KA|t_KB|t_KC|t_KD|t_KE|t_KF|t_KG|t_KH|t_KI|t_KJ|t_KK|t_KL|t_RI|t_RV|t_SI|t_Sb|t_Sf|t_WP|t_WS|t_ZH|t_ZR|t_al|t_bc|t_cd|t_ce|t_cl|t_cm|t_cs|t_da|t_db|t_dl|t_fs|t_k1|t_k2|t_k3|t_k4|t_k5|t_k6|t_k7|t_k8|t_k9|t_kB|t_kD|t_kI|t_kN|t_kP|t_kb|t_kd|t_ke|t_kh|t_kl|t_kr|t_ks|t_ku|t_le|t_mb|t_md|t_me|t_mr|t_ms|t_nd|t_op|t_se|t_so|t_sr|t_te|t_ti|t_ts|t_ue|t_us|t_ut|t_vb|t_ve|t_vi|t_vs|t_xs|tabline|tabpagemax|tabstop|tagbsearch|taglength|tagrelative|tagstack|tal|tb|tbi|tbidi|tbis|tbs|tenc|term|termbidi|termencoding|terse|textauto|textmode|textwidth|tgst|thesaurus|tildeop|timeout|timeoutlen|title|titlelen|titleold|titlestring|toolbar|toolbariconsize|top|tpm|tsl|tsr|ttimeout|ttimeoutlen|ttm|tty|ttybuiltin|ttyfast|ttym|ttymouse|ttyscroll|ttytype|tw|tx|uc|ul|undolevels|updatecount|updatetime|ut|vb|vbs|vdir|verbosefile|vfile|viewdir|viewoptions|viminfo|virtualedit|visualbell|vop|wak|warn|wb|wc|wcm|wd|weirdinvert|wfh|wfw|whichwrap|wi|wig|wildchar|wildcharm|wildignore|wildmenu|wildmode|wildoptions|wim|winaltkeys|window|winfixheight|winfixwidth|winheight|winminheight|winminwidth|winwidth|wiv|wiw|wm|wmh|wmnu|wmw|wop|wrap|wrapmargin|wrapscan|writeany|writebackup|writedelay|ww)\\b/,\n    number: /\\b(?:0x[\\da-f]+|\\d+(?:\\.\\d+)?)\\b/i,\n    operator: /\\|\\||&&|[-+.]=?|[=!](?:[=~][#?]?)?|[<>]=?[#?]?|[*\\/%?]|\\b(?:is(?:not)?)\\b/,\n    punctuation: /[{}[\\](),;:]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/vim.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/visual-basic.js":
/*!*****************************************************!*\
  !*** ./node_modules/refractor/lang/visual-basic.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = visualBasic;\nvisualBasic.displayName = 'visualBasic';\nvisualBasic.aliases = [];\nfunction visualBasic(Prism) {\n  Prism.languages['visual-basic'] = {\n    comment: {\n      pattern: /(?:['‘’]|REM\\b)(?:[^\\r\\n_]|_(?:\\r\\n?|\\n)?)*/i,\n      inside: {\n        keyword: /^REM/i\n      }\n    },\n    directive: {\n      pattern: /#(?:Const|Else|ElseIf|End|ExternalChecksum|ExternalSource|If|Region)(?:\\b_[ \\t]*(?:\\r\\n?|\\n)|.)+/i,\n      alias: 'property',\n      greedy: true\n    },\n    string: {\n      pattern: /\\$?[\"“”](?:[\"“”]{2}|[^\"“”])*[\"“”]C?/i,\n      greedy: true\n    },\n    date: {\n      pattern: /#[ \\t]*(?:\\d+([/-])\\d+\\1\\d+(?:[ \\t]+(?:\\d+[ \\t]*(?:AM|PM)|\\d+:\\d+(?::\\d+)?(?:[ \\t]*(?:AM|PM))?))?|\\d+[ \\t]*(?:AM|PM)|\\d+:\\d+(?::\\d+)?(?:[ \\t]*(?:AM|PM))?)[ \\t]*#/i,\n      alias: 'number'\n    },\n    number: /(?:(?:\\b\\d+(?:\\.\\d+)?|\\.\\d+)(?:E[+-]?\\d+)?|&[HO][\\dA-F]+)(?:[FRD]|U?[ILS])?/i,\n    \"boolean\": /\\b(?:False|Nothing|True)\\b/i,\n    keyword: /\\b(?:AddHandler|AddressOf|Alias|And(?:Also)?|As|Boolean|ByRef|Byte|ByVal|Call|Case|Catch|C(?:Bool|Byte|Char|Date|Dbl|Dec|Int|Lng|Obj|SByte|Short|Sng|Str|Type|UInt|ULng|UShort)|Char|Class|Const|Continue|Currency|Date|Decimal|Declare|Default|Delegate|Dim|DirectCast|Do|Double|Each|Else(?:If)?|End(?:If)?|Enum|Erase|Error|Event|Exit|Finally|For|Friend|Function|Get(?:Type|XMLNamespace)?|Global|GoSub|GoTo|Handles|If|Implements|Imports|In|Inherits|Integer|Interface|Is|IsNot|Let|Lib|Like|Long|Loop|Me|Mod|Module|Must(?:Inherit|Override)|My(?:Base|Class)|Namespace|Narrowing|New|Next|Not(?:Inheritable|Overridable)?|Object|Of|On|Operator|Option(?:al)?|Or(?:Else)?|Out|Overloads|Overridable|Overrides|ParamArray|Partial|Private|Property|Protected|Public|RaiseEvent|ReadOnly|ReDim|RemoveHandler|Resume|Return|SByte|Select|Set|Shadows|Shared|short|Single|Static|Step|Stop|String|Structure|Sub|SyncLock|Then|Throw|To|Try|TryCast|Type|TypeOf|U(?:Integer|Long|Short)|Until|Using|Variant|Wend|When|While|Widening|With(?:Events)?|WriteOnly|Xor)\\b/i,\n    operator: /[+\\-*/\\\\^<=>&#@$%!]|\\b_(?=[ \\t]*[\\r\\n])/,\n    punctuation: /[{}().,:?]/\n  };\n  Prism.languages.vb = Prism.languages['visual-basic'];\n  Prism.languages.vba = Prism.languages['visual-basic'];\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvdmlzdWFsLWJhc2ljLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsV0FBVztBQUM1QkEsV0FBVyxDQUFDQyxXQUFXLEdBQUcsYUFBYTtBQUN2Q0QsV0FBVyxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUN4QixTQUFTRixXQUFXQSxDQUFDRyxLQUFLLEVBQUU7RUFDMUJBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDLGNBQWMsQ0FBQyxHQUFHO0lBQ2hDQyxPQUFPLEVBQUU7TUFDUEMsT0FBTyxFQUFFLDhDQUE4QztNQUN2REMsTUFBTSxFQUFFO1FBQ05DLE9BQU8sRUFBRTtNQUNYO0lBQ0YsQ0FBQztJQUNEQyxTQUFTLEVBQUU7TUFDVEgsT0FBTyxFQUNMLG1HQUFtRztNQUNyR0ksS0FBSyxFQUFFLFVBQVU7TUFDakJDLE1BQU0sRUFBRTtJQUNWLENBQUM7SUFDREMsTUFBTSxFQUFFO01BQ05OLE9BQU8sRUFBRSxzQ0FBc0M7TUFDL0NLLE1BQU0sRUFBRTtJQUNWLENBQUM7SUFDREUsSUFBSSxFQUFFO01BQ0pQLE9BQU8sRUFDTCxvS0FBb0s7TUFDdEtJLEtBQUssRUFBRTtJQUNULENBQUM7SUFDREksTUFBTSxFQUNKLDhFQUE4RTtJQUNoRixXQUFTLDZCQUE2QjtJQUN0Q04sT0FBTyxFQUNMLDRnQ0FBNGdDO0lBQzlnQ08sUUFBUSxFQUFFLHlDQUF5QztJQUNuREMsV0FBVyxFQUFFO0VBQ2YsQ0FBQztFQUNEYixLQUFLLENBQUNDLFNBQVMsQ0FBQ2EsRUFBRSxHQUFHZCxLQUFLLENBQUNDLFNBQVMsQ0FBQyxjQUFjLENBQUM7RUFDcERELEtBQUssQ0FBQ0MsU0FBUyxDQUFDYyxHQUFHLEdBQUdmLEtBQUssQ0FBQ0MsU0FBUyxDQUFDLGNBQWMsQ0FBQztBQUN2RCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXHZpc3VhbC1iYXNpYy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSB2aXN1YWxCYXNpY1xudmlzdWFsQmFzaWMuZGlzcGxheU5hbWUgPSAndmlzdWFsQmFzaWMnXG52aXN1YWxCYXNpYy5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIHZpc3VhbEJhc2ljKFByaXNtKSB7XG4gIFByaXNtLmxhbmd1YWdlc1sndmlzdWFsLWJhc2ljJ10gPSB7XG4gICAgY29tbWVudDoge1xuICAgICAgcGF0dGVybjogLyg/Olsn4oCY4oCZXXxSRU1cXGIpKD86W15cXHJcXG5fXXxfKD86XFxyXFxuP3xcXG4pPykqL2ksXG4gICAgICBpbnNpZGU6IHtcbiAgICAgICAga2V5d29yZDogL15SRU0vaVxuICAgICAgfVxuICAgIH0sXG4gICAgZGlyZWN0aXZlOiB7XG4gICAgICBwYXR0ZXJuOlxuICAgICAgICAvIyg/OkNvbnN0fEVsc2V8RWxzZUlmfEVuZHxFeHRlcm5hbENoZWNrc3VtfEV4dGVybmFsU291cmNlfElmfFJlZ2lvbikoPzpcXGJfWyBcXHRdKig/Olxcclxcbj98XFxuKXwuKSsvaSxcbiAgICAgIGFsaWFzOiAncHJvcGVydHknLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICBzdHJpbmc6IHtcbiAgICAgIHBhdHRlcm46IC9cXCQ/W1wi4oCc4oCdXSg/OltcIuKAnOKAnV17Mn18W15cIuKAnOKAnV0pKltcIuKAnOKAnV1DPy9pLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICBkYXRlOiB7XG4gICAgICBwYXR0ZXJuOlxuICAgICAgICAvI1sgXFx0XSooPzpcXGQrKFsvLV0pXFxkK1xcMVxcZCsoPzpbIFxcdF0rKD86XFxkK1sgXFx0XSooPzpBTXxQTSl8XFxkKzpcXGQrKD86OlxcZCspPyg/OlsgXFx0XSooPzpBTXxQTSkpPykpP3xcXGQrWyBcXHRdKig/OkFNfFBNKXxcXGQrOlxcZCsoPzo6XFxkKyk/KD86WyBcXHRdKig/OkFNfFBNKSk/KVsgXFx0XSojL2ksXG4gICAgICBhbGlhczogJ251bWJlcidcbiAgICB9LFxuICAgIG51bWJlcjpcbiAgICAgIC8oPzooPzpcXGJcXGQrKD86XFwuXFxkKyk/fFxcLlxcZCspKD86RVsrLV0/XFxkKyk/fCZbSE9dW1xcZEEtRl0rKSg/OltGUkRdfFU/W0lMU10pPy9pLFxuICAgIGJvb2xlYW46IC9cXGIoPzpGYWxzZXxOb3RoaW5nfFRydWUpXFxiL2ksXG4gICAga2V5d29yZDpcbiAgICAgIC9cXGIoPzpBZGRIYW5kbGVyfEFkZHJlc3NPZnxBbGlhc3xBbmQoPzpBbHNvKT98QXN8Qm9vbGVhbnxCeVJlZnxCeXRlfEJ5VmFsfENhbGx8Q2FzZXxDYXRjaHxDKD86Qm9vbHxCeXRlfENoYXJ8RGF0ZXxEYmx8RGVjfEludHxMbmd8T2JqfFNCeXRlfFNob3J0fFNuZ3xTdHJ8VHlwZXxVSW50fFVMbmd8VVNob3J0KXxDaGFyfENsYXNzfENvbnN0fENvbnRpbnVlfEN1cnJlbmN5fERhdGV8RGVjaW1hbHxEZWNsYXJlfERlZmF1bHR8RGVsZWdhdGV8RGltfERpcmVjdENhc3R8RG98RG91YmxlfEVhY2h8RWxzZSg/OklmKT98RW5kKD86SWYpP3xFbnVtfEVyYXNlfEVycm9yfEV2ZW50fEV4aXR8RmluYWxseXxGb3J8RnJpZW5kfEZ1bmN0aW9ufEdldCg/OlR5cGV8WE1MTmFtZXNwYWNlKT98R2xvYmFsfEdvU3VifEdvVG98SGFuZGxlc3xJZnxJbXBsZW1lbnRzfEltcG9ydHN8SW58SW5oZXJpdHN8SW50ZWdlcnxJbnRlcmZhY2V8SXN8SXNOb3R8TGV0fExpYnxMaWtlfExvbmd8TG9vcHxNZXxNb2R8TW9kdWxlfE11c3QoPzpJbmhlcml0fE92ZXJyaWRlKXxNeSg/OkJhc2V8Q2xhc3MpfE5hbWVzcGFjZXxOYXJyb3dpbmd8TmV3fE5leHR8Tm90KD86SW5oZXJpdGFibGV8T3ZlcnJpZGFibGUpP3xPYmplY3R8T2Z8T258T3BlcmF0b3J8T3B0aW9uKD86YWwpP3xPcig/OkVsc2UpP3xPdXR8T3ZlcmxvYWRzfE92ZXJyaWRhYmxlfE92ZXJyaWRlc3xQYXJhbUFycmF5fFBhcnRpYWx8UHJpdmF0ZXxQcm9wZXJ0eXxQcm90ZWN0ZWR8UHVibGljfFJhaXNlRXZlbnR8UmVhZE9ubHl8UmVEaW18UmVtb3ZlSGFuZGxlcnxSZXN1bWV8UmV0dXJufFNCeXRlfFNlbGVjdHxTZXR8U2hhZG93c3xTaGFyZWR8c2hvcnR8U2luZ2xlfFN0YXRpY3xTdGVwfFN0b3B8U3RyaW5nfFN0cnVjdHVyZXxTdWJ8U3luY0xvY2t8VGhlbnxUaHJvd3xUb3xUcnl8VHJ5Q2FzdHxUeXBlfFR5cGVPZnxVKD86SW50ZWdlcnxMb25nfFNob3J0KXxVbnRpbHxVc2luZ3xWYXJpYW50fFdlbmR8V2hlbnxXaGlsZXxXaWRlbmluZ3xXaXRoKD86RXZlbnRzKT98V3JpdGVPbmx5fFhvcilcXGIvaSxcbiAgICBvcGVyYXRvcjogL1srXFwtKi9cXFxcXjw9PiYjQCQlIV18XFxiXyg/PVsgXFx0XSpbXFxyXFxuXSkvLFxuICAgIHB1bmN0dWF0aW9uOiAvW3t9KCkuLDo/XS9cbiAgfVxuICBQcmlzbS5sYW5ndWFnZXMudmIgPSBQcmlzbS5sYW5ndWFnZXNbJ3Zpc3VhbC1iYXNpYyddXG4gIFByaXNtLmxhbmd1YWdlcy52YmEgPSBQcmlzbS5sYW5ndWFnZXNbJ3Zpc3VhbC1iYXNpYyddXG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInZpc3VhbEJhc2ljIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJjb21tZW50IiwicGF0dGVybiIsImluc2lkZSIsImtleXdvcmQiLCJkaXJlY3RpdmUiLCJhbGlhcyIsImdyZWVkeSIsInN0cmluZyIsImRhdGUiLCJudW1iZXIiLCJvcGVyYXRvciIsInB1bmN0dWF0aW9uIiwidmIiLCJ2YmEiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/visual-basic.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/warpscript.js":
/*!***************************************************!*\
  !*** ./node_modules/refractor/lang/warpscript.js ***!
  \***************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = warpscript;\nwarpscript.displayName = 'warpscript';\nwarpscript.aliases = [];\nfunction warpscript(Prism) {\n  Prism.languages.warpscript = {\n    comment: /#.*|\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,\n    string: {\n      pattern: /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?:[^'\\\\\\r\\n]|\\\\.)*'|<'(?:[^\\\\']|'(?!>)|\\\\.)*'>/,\n      greedy: true\n    },\n    variable: /\\$\\S+/,\n    macro: {\n      pattern: /@\\S+/,\n      alias: 'property'\n    },\n    // WarpScript doesn't have any keywords, these are all functions under the control category\n    // https://www.warp10.io/tags/control\n    keyword: /\\b(?:BREAK|CHECKMACRO|CONTINUE|CUDF|DEFINED|DEFINEDMACRO|EVAL|FAIL|FOR|FOREACH|FORSTEP|IFT|IFTE|MSGFAIL|NRETURN|RETHROW|RETURN|SWITCH|TRY|UDF|UNTIL|WHILE)\\b/,\n    number: /[+-]?\\b(?:NaN|Infinity|\\d+(?:\\.\\d*)?(?:[Ee][+-]?\\d+)?|0x[\\da-fA-F]+|0b[01]+)\\b/,\n    \"boolean\": /\\b(?:F|T|false|true)\\b/,\n    punctuation: /<%|%>|[{}[\\]()]/,\n    // Some operators from the \"operators\" category\n    // https://www.warp10.io/tags/operators\n    operator: /==|&&?|\\|\\|?|\\*\\*?|>>>?|<<|[<>!~]=?|[-/%^]|\\+!?|\\b(?:AND|NOT|OR)\\b/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvd2FycHNjcmlwdC5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLFVBQVU7QUFDM0JBLFVBQVUsQ0FBQ0MsV0FBVyxHQUFHLFlBQVk7QUFDckNELFVBQVUsQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDdkIsU0FBU0YsVUFBVUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ3pCQSxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osVUFBVSxHQUFHO0lBQzNCSyxPQUFPLEVBQUUsNkJBQTZCO0lBQ3RDQyxNQUFNLEVBQUU7TUFDTkMsT0FBTyxFQUNMLHdFQUF3RTtNQUMxRUMsTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUNEQyxRQUFRLEVBQUUsT0FBTztJQUNqQkMsS0FBSyxFQUFFO01BQ0xILE9BQU8sRUFBRSxNQUFNO01BQ2ZJLEtBQUssRUFBRTtJQUNULENBQUM7SUFDRDtJQUNBO0lBQ0FDLE9BQU8sRUFDTCw4SkFBOEo7SUFDaEtDLE1BQU0sRUFDSixnRkFBZ0Y7SUFDbEYsV0FBUyx3QkFBd0I7SUFDakNDLFdBQVcsRUFBRSxpQkFBaUI7SUFDOUI7SUFDQTtJQUNBQyxRQUFRLEVBQ047RUFDSixDQUFDO0FBQ0giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFx3YXJwc2NyaXB0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IHdhcnBzY3JpcHRcbndhcnBzY3JpcHQuZGlzcGxheU5hbWUgPSAnd2FycHNjcmlwdCdcbndhcnBzY3JpcHQuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiB3YXJwc2NyaXB0KFByaXNtKSB7XG4gIFByaXNtLmxhbmd1YWdlcy53YXJwc2NyaXB0ID0ge1xuICAgIGNvbW1lbnQ6IC8jLip8XFwvXFwvLip8XFwvXFwqW1xcc1xcU10qP1xcKlxcLy8sXG4gICAgc3RyaW5nOiB7XG4gICAgICBwYXR0ZXJuOlxuICAgICAgICAvXCIoPzpbXlwiXFxcXFxcclxcbl18XFxcXC4pKlwifCcoPzpbXidcXFxcXFxyXFxuXXxcXFxcLikqJ3w8Jyg/OlteXFxcXCddfCcoPyE+KXxcXFxcLikqJz4vLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICB2YXJpYWJsZTogL1xcJFxcUysvLFxuICAgIG1hY3JvOiB7XG4gICAgICBwYXR0ZXJuOiAvQFxcUysvLFxuICAgICAgYWxpYXM6ICdwcm9wZXJ0eSdcbiAgICB9LFxuICAgIC8vIFdhcnBTY3JpcHQgZG9lc24ndCBoYXZlIGFueSBrZXl3b3JkcywgdGhlc2UgYXJlIGFsbCBmdW5jdGlvbnMgdW5kZXIgdGhlIGNvbnRyb2wgY2F0ZWdvcnlcbiAgICAvLyBodHRwczovL3d3dy53YXJwMTAuaW8vdGFncy9jb250cm9sXG4gICAga2V5d29yZDpcbiAgICAgIC9cXGIoPzpCUkVBS3xDSEVDS01BQ1JPfENPTlRJTlVFfENVREZ8REVGSU5FRHxERUZJTkVETUFDUk98RVZBTHxGQUlMfEZPUnxGT1JFQUNIfEZPUlNURVB8SUZUfElGVEV8TVNHRkFJTHxOUkVUVVJOfFJFVEhST1d8UkVUVVJOfFNXSVRDSHxUUll8VURGfFVOVElMfFdISUxFKVxcYi8sXG4gICAgbnVtYmVyOlxuICAgICAgL1srLV0/XFxiKD86TmFOfEluZmluaXR5fFxcZCsoPzpcXC5cXGQqKT8oPzpbRWVdWystXT9cXGQrKT98MHhbXFxkYS1mQS1GXSt8MGJbMDFdKylcXGIvLFxuICAgIGJvb2xlYW46IC9cXGIoPzpGfFR8ZmFsc2V8dHJ1ZSlcXGIvLFxuICAgIHB1bmN0dWF0aW9uOiAvPCV8JT58W3t9W1xcXSgpXS8sXG4gICAgLy8gU29tZSBvcGVyYXRvcnMgZnJvbSB0aGUgXCJvcGVyYXRvcnNcIiBjYXRlZ29yeVxuICAgIC8vIGh0dHBzOi8vd3d3LndhcnAxMC5pby90YWdzL29wZXJhdG9yc1xuICAgIG9wZXJhdG9yOlxuICAgICAgLz09fCYmP3xcXHxcXHw/fFxcKlxcKj98Pj4+P3w8PHxbPD4hfl09P3xbLS8lXl18XFwrIT98XFxiKD86QU5EfE5PVHxPUilcXGIvXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwid2FycHNjcmlwdCIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwiY29tbWVudCIsInN0cmluZyIsInBhdHRlcm4iLCJncmVlZHkiLCJ2YXJpYWJsZSIsIm1hY3JvIiwiYWxpYXMiLCJrZXl3b3JkIiwibnVtYmVyIiwicHVuY3R1YXRpb24iLCJvcGVyYXRvciJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/warpscript.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/wasm.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/wasm.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = wasm;\nwasm.displayName = 'wasm';\nwasm.aliases = [];\nfunction wasm(Prism) {\n  Prism.languages.wasm = {\n    comment: [/\\(;[\\s\\S]*?;\\)/, {\n      pattern: /;;.*/,\n      greedy: true\n    }],\n    string: {\n      pattern: /\"(?:\\\\[\\s\\S]|[^\"\\\\])*\"/,\n      greedy: true\n    },\n    keyword: [{\n      pattern: /\\b(?:align|offset)=/,\n      inside: {\n        operator: /=/\n      }\n    }, {\n      pattern: /\\b(?:(?:f32|f64|i32|i64)(?:\\.(?:abs|add|and|ceil|clz|const|convert_[su]\\/i(?:32|64)|copysign|ctz|demote\\/f64|div(?:_[su])?|eqz?|extend_[su]\\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|neg?|nearest|or|popcnt|promote\\/f32|reinterpret\\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|sqrt|store(?:8|16|32)?|sub|trunc(?:_[su]\\/f(?:32|64))?|wrap\\/i64|xor))?|memory\\.(?:grow|size))\\b/,\n      inside: {\n        punctuation: /\\./\n      }\n    }, /\\b(?:anyfunc|block|br(?:_if|_table)?|call(?:_indirect)?|data|drop|elem|else|end|export|func|get_(?:global|local)|global|if|import|local|loop|memory|module|mut|nop|offset|param|result|return|select|set_(?:global|local)|start|table|tee_local|then|type|unreachable)\\b/],\n    variable: /\\$[\\w!#$%&'*+\\-./:<=>?@\\\\^`|~]+/,\n    number: /[+-]?\\b(?:\\d(?:_?\\d)*(?:\\.\\d(?:_?\\d)*)?(?:[eE][+-]?\\d(?:_?\\d)*)?|0x[\\da-fA-F](?:_?[\\da-fA-F])*(?:\\.[\\da-fA-F](?:_?[\\da-fA-D])*)?(?:[pP][+-]?\\d(?:_?\\d)*)?)\\b|\\binf\\b|\\bnan(?::0x[\\da-fA-F](?:_?[\\da-fA-D])*)?\\b/,\n    punctuation: /[()]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvd2FzbS5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLElBQUk7QUFDckJBLElBQUksQ0FBQ0MsV0FBVyxHQUFHLE1BQU07QUFDekJELElBQUksQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDakIsU0FBU0YsSUFBSUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ25CQSxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osSUFBSSxHQUFHO0lBQ3JCSyxPQUFPLEVBQUUsQ0FDUCxnQkFBZ0IsRUFDaEI7TUFDRUMsT0FBTyxFQUFFLE1BQU07TUFDZkMsTUFBTSxFQUFFO0lBQ1YsQ0FBQyxDQUNGO0lBQ0RDLE1BQU0sRUFBRTtNQUNORixPQUFPLEVBQUUsd0JBQXdCO01BQ2pDQyxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0RFLE9BQU8sRUFBRSxDQUNQO01BQ0VILE9BQU8sRUFBRSxxQkFBcUI7TUFDOUJJLE1BQU0sRUFBRTtRQUNOQyxRQUFRLEVBQUU7TUFDWjtJQUNGLENBQUMsRUFDRDtNQUNFTCxPQUFPLEVBQ0wsZ2JBQWdiO01BQ2xiSSxNQUFNLEVBQUU7UUFDTkUsV0FBVyxFQUFFO01BQ2Y7SUFDRixDQUFDLEVBQ0QsMFFBQTBRLENBQzNRO0lBQ0RDLFFBQVEsRUFBRSxpQ0FBaUM7SUFDM0NDLE1BQU0sRUFDSixpTkFBaU47SUFDbk5GLFdBQVcsRUFBRTtFQUNmLENBQUM7QUFDSCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXHdhc20uanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gd2FzbVxud2FzbS5kaXNwbGF5TmFtZSA9ICd3YXNtJ1xud2FzbS5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIHdhc20oUHJpc20pIHtcbiAgUHJpc20ubGFuZ3VhZ2VzLndhc20gPSB7XG4gICAgY29tbWVudDogW1xuICAgICAgL1xcKDtbXFxzXFxTXSo/O1xcKS8sXG4gICAgICB7XG4gICAgICAgIHBhdHRlcm46IC87Oy4qLyxcbiAgICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgICB9XG4gICAgXSxcbiAgICBzdHJpbmc6IHtcbiAgICAgIHBhdHRlcm46IC9cIig/OlxcXFxbXFxzXFxTXXxbXlwiXFxcXF0pKlwiLyxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAga2V5d29yZDogW1xuICAgICAge1xuICAgICAgICBwYXR0ZXJuOiAvXFxiKD86YWxpZ258b2Zmc2V0KT0vLFxuICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICBvcGVyYXRvcjogLz0vXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHBhdHRlcm46XG4gICAgICAgICAgL1xcYig/Oig/OmYzMnxmNjR8aTMyfGk2NCkoPzpcXC4oPzphYnN8YWRkfGFuZHxjZWlsfGNsenxjb25zdHxjb252ZXJ0X1tzdV1cXC9pKD86MzJ8NjQpfGNvcHlzaWdufGN0enxkZW1vdGVcXC9mNjR8ZGl2KD86X1tzdV0pP3xlcXo/fGV4dGVuZF9bc3VdXFwvaTMyfGZsb29yfGdlKD86X1tzdV0pP3xndCg/Ol9bc3VdKT98bGUoPzpfW3N1XSk/fGxvYWQoPzooPzo4fDE2fDMyKV9bc3VdKT98bHQoPzpfW3N1XSk/fG1heHxtaW58bXVsfG5lZz98bmVhcmVzdHxvcnxwb3BjbnR8cHJvbW90ZVxcL2YzMnxyZWludGVycHJldFxcL1tmaV0oPzozMnw2NCl8cmVtX1tzdV18cm90W2xyXXxzaGx8c2hyX1tzdV18c3FydHxzdG9yZSg/Ojh8MTZ8MzIpP3xzdWJ8dHJ1bmMoPzpfW3N1XVxcL2YoPzozMnw2NCkpP3x3cmFwXFwvaTY0fHhvcikpP3xtZW1vcnlcXC4oPzpncm93fHNpemUpKVxcYi8sXG4gICAgICAgIGluc2lkZToge1xuICAgICAgICAgIHB1bmN0dWF0aW9uOiAvXFwuL1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgL1xcYig/OmFueWZ1bmN8YmxvY2t8YnIoPzpfaWZ8X3RhYmxlKT98Y2FsbCg/Ol9pbmRpcmVjdCk/fGRhdGF8ZHJvcHxlbGVtfGVsc2V8ZW5kfGV4cG9ydHxmdW5jfGdldF8oPzpnbG9iYWx8bG9jYWwpfGdsb2JhbHxpZnxpbXBvcnR8bG9jYWx8bG9vcHxtZW1vcnl8bW9kdWxlfG11dHxub3B8b2Zmc2V0fHBhcmFtfHJlc3VsdHxyZXR1cm58c2VsZWN0fHNldF8oPzpnbG9iYWx8bG9jYWwpfHN0YXJ0fHRhYmxlfHRlZV9sb2NhbHx0aGVufHR5cGV8dW5yZWFjaGFibGUpXFxiL1xuICAgIF0sXG4gICAgdmFyaWFibGU6IC9cXCRbXFx3ISMkJSYnKitcXC0uLzo8PT4/QFxcXFxeYHx+XSsvLFxuICAgIG51bWJlcjpcbiAgICAgIC9bKy1dP1xcYig/OlxcZCg/Ol8/XFxkKSooPzpcXC5cXGQoPzpfP1xcZCkqKT8oPzpbZUVdWystXT9cXGQoPzpfP1xcZCkqKT98MHhbXFxkYS1mQS1GXSg/Ol8/W1xcZGEtZkEtRl0pKig/OlxcLltcXGRhLWZBLUZdKD86Xz9bXFxkYS1mQS1EXSkqKT8oPzpbcFBdWystXT9cXGQoPzpfP1xcZCkqKT8pXFxifFxcYmluZlxcYnxcXGJuYW4oPzo6MHhbXFxkYS1mQS1GXSg/Ol8/W1xcZGEtZkEtRF0pKik/XFxiLyxcbiAgICBwdW5jdHVhdGlvbjogL1soKV0vXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwid2FzbSIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwiY29tbWVudCIsInBhdHRlcm4iLCJncmVlZHkiLCJzdHJpbmciLCJrZXl3b3JkIiwiaW5zaWRlIiwib3BlcmF0b3IiLCJwdW5jdHVhdGlvbiIsInZhcmlhYmxlIiwibnVtYmVyIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/wasm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/web-idl.js":
/*!************************************************!*\
  !*** ./node_modules/refractor/lang/web-idl.js ***!
  \************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = webIdl;\nwebIdl.displayName = 'webIdl';\nwebIdl.aliases = [];\nfunction webIdl(Prism) {\n  ;\n  (function (Prism) {\n    var id = /(?:\\B-|\\b_|\\b)[A-Za-z][\\w-]*(?![\\w-])/.source;\n    var type = '(?:' + /\\b(?:unsigned\\s+)?long\\s+long(?![\\w-])/.source + '|' + /\\b(?:unrestricted|unsigned)\\s+[a-z]+(?![\\w-])/.source + '|' + /(?!(?:unrestricted|unsigned)\\b)/.source + id + /(?:\\s*<(?:[^<>]|<[^<>]*>)*>)?/.source + ')' + /(?:\\s*\\?)?/.source;\n    var typeInside = {};\n    Prism.languages['web-idl'] = {\n      comment: {\n        pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,\n        greedy: true\n      },\n      string: {\n        pattern: /\"[^\"]*\"/,\n        greedy: true\n      },\n      namespace: {\n        pattern: RegExp(/(\\bnamespace\\s+)/.source + id),\n        lookbehind: true\n      },\n      'class-name': [{\n        pattern: /(^|[^\\w-])(?:iterable|maplike|setlike)\\s*<(?:[^<>]|<[^<>]*>)*>/,\n        lookbehind: true,\n        inside: typeInside\n      }, {\n        pattern: RegExp(/(\\b(?:attribute|const|deleter|getter|optional|setter)\\s+)/.source + type),\n        lookbehind: true,\n        inside: typeInside\n      }, {\n        // callback return type\n        pattern: RegExp('(' + /\\bcallback\\s+/.source + id + /\\s*=\\s*/.source + ')' + type),\n        lookbehind: true,\n        inside: typeInside\n      }, {\n        // typedef\n        pattern: RegExp(/(\\btypedef\\b\\s*)/.source + type),\n        lookbehind: true,\n        inside: typeInside\n      }, {\n        pattern: RegExp(/(\\b(?:callback|dictionary|enum|interface(?:\\s+mixin)?)\\s+)(?!(?:interface|mixin)\\b)/.source + id),\n        lookbehind: true\n      }, {\n        // inheritance\n        pattern: RegExp(/(:\\s*)/.source + id),\n        lookbehind: true\n      },\n      // includes and implements\n      RegExp(id + /(?=\\s+(?:implements|includes)\\b)/.source), {\n        pattern: RegExp(/(\\b(?:implements|includes)\\s+)/.source + id),\n        lookbehind: true\n      }, {\n        // function return type, parameter types, and dictionary members\n        pattern: RegExp(type + '(?=' + /\\s*(?:\\.{3}\\s*)?/.source + id + /\\s*[(),;=]/.source + ')'),\n        inside: typeInside\n      }],\n      builtin: /\\b(?:ArrayBuffer|BigInt64Array|BigUint64Array|ByteString|DOMString|DataView|Float32Array|Float64Array|FrozenArray|Int16Array|Int32Array|Int8Array|ObservableArray|Promise|USVString|Uint16Array|Uint32Array|Uint8Array|Uint8ClampedArray)\\b/,\n      keyword: [/\\b(?:async|attribute|callback|const|constructor|deleter|dictionary|enum|getter|implements|includes|inherit|interface|mixin|namespace|null|optional|or|partial|readonly|required|setter|static|stringifier|typedef|unrestricted)\\b/,\n      // type keywords\n      /\\b(?:any|bigint|boolean|byte|double|float|iterable|long|maplike|object|octet|record|sequence|setlike|short|symbol|undefined|unsigned|void)\\b/],\n      \"boolean\": /\\b(?:false|true)\\b/,\n      number: {\n        pattern: /(^|[^\\w-])-?(?:0x[0-9a-f]+|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?|NaN|Infinity)(?![\\w-])/i,\n        lookbehind: true\n      },\n      operator: /\\.{3}|[=:?<>-]/,\n      punctuation: /[(){}[\\].,;]/\n    };\n    for (var key in Prism.languages['web-idl']) {\n      if (key !== 'class-name') {\n        typeInside[key] = Prism.languages['web-idl'][key];\n      }\n    }\n    Prism.languages['webidl'] = Prism.languages['web-idl'];\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/web-idl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/wiki.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/wiki.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = wiki;\nwiki.displayName = 'wiki';\nwiki.aliases = [];\nfunction wiki(Prism) {\n  Prism.languages.wiki = Prism.languages.extend('markup', {\n    'block-comment': {\n      pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n      lookbehind: true,\n      alias: 'comment'\n    },\n    heading: {\n      pattern: /^(=+)[^=\\r\\n].*?\\1/m,\n      inside: {\n        punctuation: /^=+|=+$/,\n        important: /.+/\n      }\n    },\n    emphasis: {\n      // TODO Multi-line\n      pattern: /('{2,5}).+?\\1/,\n      inside: {\n        'bold-italic': {\n          pattern: /(''''').+?(?=\\1)/,\n          lookbehind: true,\n          alias: ['bold', 'italic']\n        },\n        bold: {\n          pattern: /(''')[^'](?:.*?[^'])?(?=\\1)/,\n          lookbehind: true\n        },\n        italic: {\n          pattern: /('')[^'](?:.*?[^'])?(?=\\1)/,\n          lookbehind: true\n        },\n        punctuation: /^''+|''+$/\n      }\n    },\n    hr: {\n      pattern: /^-{4,}/m,\n      alias: 'punctuation'\n    },\n    url: [/ISBN +(?:97[89][ -]?)?(?:\\d[ -]?){9}[\\dx]\\b|(?:PMID|RFC) +\\d+/i, /\\[\\[.+?\\]\\]|\\[.+?\\]/],\n    variable: [/__[A-Z]+__/,\n    // FIXME Nested structures should be handled\n    // {{formatnum:{{#expr:{{{3}}}}}}}\n    /\\{{3}.+?\\}{3}/, /\\{\\{.+?\\}\\}/],\n    symbol: [/^#redirect/im, /~{3,5}/],\n    // Handle table attrs:\n    // {|\n    // ! style=\"text-align:left;\"| Item\n    // |}\n    'table-tag': {\n      pattern: /((?:^|[|!])[|!])[^|\\r\\n]+\\|(?!\\|)/m,\n      lookbehind: true,\n      inside: {\n        'table-bar': {\n          pattern: /\\|$/,\n          alias: 'punctuation'\n        },\n        rest: Prism.languages.markup['tag'].inside\n      }\n    },\n    punctuation: /^(?:\\{\\||\\|\\}|\\|-|[*#:;!|])|\\|\\||!!/m\n  });\n  Prism.languages.insertBefore('wiki', 'tag', {\n    // Prevent highlighting inside <nowiki>, <source> and <pre> tags\n    nowiki: {\n      pattern: /<(nowiki|pre|source)\\b[^>]*>[\\s\\S]*?<\\/\\1>/i,\n      inside: {\n        tag: {\n          pattern: /<(?:nowiki|pre|source)\\b[^>]*>|<\\/(?:nowiki|pre|source)>/i,\n          inside: Prism.languages.markup['tag'].inside\n        }\n      }\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvd2lraS5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLElBQUk7QUFDckJBLElBQUksQ0FBQ0MsV0FBVyxHQUFHLE1BQU07QUFDekJELElBQUksQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDakIsU0FBU0YsSUFBSUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ25CQSxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osSUFBSSxHQUFHRyxLQUFLLENBQUNDLFNBQVMsQ0FBQ0MsTUFBTSxDQUFDLFFBQVEsRUFBRTtJQUN0RCxlQUFlLEVBQUU7TUFDZkMsT0FBTyxFQUFFLDJCQUEyQjtNQUNwQ0MsVUFBVSxFQUFFLElBQUk7TUFDaEJDLEtBQUssRUFBRTtJQUNULENBQUM7SUFDREMsT0FBTyxFQUFFO01BQ1BILE9BQU8sRUFBRSxxQkFBcUI7TUFDOUJJLE1BQU0sRUFBRTtRQUNOQyxXQUFXLEVBQUUsU0FBUztRQUN0QkMsU0FBUyxFQUFFO01BQ2I7SUFDRixDQUFDO0lBQ0RDLFFBQVEsRUFBRTtNQUNSO01BQ0FQLE9BQU8sRUFBRSxlQUFlO01BQ3hCSSxNQUFNLEVBQUU7UUFDTixhQUFhLEVBQUU7VUFDYkosT0FBTyxFQUFFLGtCQUFrQjtVQUMzQkMsVUFBVSxFQUFFLElBQUk7VUFDaEJDLEtBQUssRUFBRSxDQUFDLE1BQU0sRUFBRSxRQUFRO1FBQzFCLENBQUM7UUFDRE0sSUFBSSxFQUFFO1VBQ0pSLE9BQU8sRUFBRSw2QkFBNkI7VUFDdENDLFVBQVUsRUFBRTtRQUNkLENBQUM7UUFDRFEsTUFBTSxFQUFFO1VBQ05ULE9BQU8sRUFBRSw0QkFBNEI7VUFDckNDLFVBQVUsRUFBRTtRQUNkLENBQUM7UUFDREksV0FBVyxFQUFFO01BQ2Y7SUFDRixDQUFDO0lBQ0RLLEVBQUUsRUFBRTtNQUNGVixPQUFPLEVBQUUsU0FBUztNQUNsQkUsS0FBSyxFQUFFO0lBQ1QsQ0FBQztJQUNEUyxHQUFHLEVBQUUsQ0FDSCxnRUFBZ0UsRUFDaEUscUJBQXFCLENBQ3RCO0lBQ0RDLFFBQVEsRUFBRSxDQUNSLFlBQVk7SUFBRTtJQUNkO0lBQ0EsZUFBZSxFQUNmLGFBQWEsQ0FDZDtJQUNEQyxNQUFNLEVBQUUsQ0FBQyxjQUFjLEVBQUUsUUFBUSxDQUFDO0lBQ2xDO0lBQ0E7SUFDQTtJQUNBO0lBQ0EsV0FBVyxFQUFFO01BQ1hiLE9BQU8sRUFBRSxvQ0FBb0M7TUFDN0NDLFVBQVUsRUFBRSxJQUFJO01BQ2hCRyxNQUFNLEVBQUU7UUFDTixXQUFXLEVBQUU7VUFDWEosT0FBTyxFQUFFLEtBQUs7VUFDZEUsS0FBSyxFQUFFO1FBQ1QsQ0FBQztRQUNEWSxJQUFJLEVBQUVqQixLQUFLLENBQUNDLFNBQVMsQ0FBQ2lCLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQ1g7TUFDdEM7SUFDRixDQUFDO0lBQ0RDLFdBQVcsRUFBRTtFQUNmLENBQUMsQ0FBQztFQUNGUixLQUFLLENBQUNDLFNBQVMsQ0FBQ2tCLFlBQVksQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFO0lBQzFDO0lBQ0FDLE1BQU0sRUFBRTtNQUNOakIsT0FBTyxFQUFFLDZDQUE2QztNQUN0REksTUFBTSxFQUFFO1FBQ05jLEdBQUcsRUFBRTtVQUNIbEIsT0FBTyxFQUFFLDJEQUEyRDtVQUNwRUksTUFBTSxFQUFFUCxLQUFLLENBQUNDLFNBQVMsQ0FBQ2lCLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQ1g7UUFDeEM7TUFDRjtJQUNGO0VBQ0YsQ0FBQyxDQUFDO0FBQ0oiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFx3aWtpLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IHdpa2lcbndpa2kuZGlzcGxheU5hbWUgPSAnd2lraSdcbndpa2kuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiB3aWtpKFByaXNtKSB7XG4gIFByaXNtLmxhbmd1YWdlcy53aWtpID0gUHJpc20ubGFuZ3VhZ2VzLmV4dGVuZCgnbWFya3VwJywge1xuICAgICdibG9jay1jb21tZW50Jzoge1xuICAgICAgcGF0dGVybjogLyhefFteXFxcXF0pXFwvXFwqW1xcc1xcU10qP1xcKlxcLy8sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgYWxpYXM6ICdjb21tZW50J1xuICAgIH0sXG4gICAgaGVhZGluZzoge1xuICAgICAgcGF0dGVybjogL14oPSspW149XFxyXFxuXS4qP1xcMS9tLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgIHB1bmN0dWF0aW9uOiAvXj0rfD0rJC8sXG4gICAgICAgIGltcG9ydGFudDogLy4rL1xuICAgICAgfVxuICAgIH0sXG4gICAgZW1waGFzaXM6IHtcbiAgICAgIC8vIFRPRE8gTXVsdGktbGluZVxuICAgICAgcGF0dGVybjogLygnezIsNX0pLis/XFwxLyxcbiAgICAgIGluc2lkZToge1xuICAgICAgICAnYm9sZC1pdGFsaWMnOiB7XG4gICAgICAgICAgcGF0dGVybjogLygnJycnJykuKz8oPz1cXDEpLyxcbiAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAgIGFsaWFzOiBbJ2JvbGQnLCAnaXRhbGljJ11cbiAgICAgICAgfSxcbiAgICAgICAgYm9sZDoge1xuICAgICAgICAgIHBhdHRlcm46IC8oJycnKVteJ10oPzouKj9bXiddKT8oPz1cXDEpLyxcbiAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIGl0YWxpYzoge1xuICAgICAgICAgIHBhdHRlcm46IC8oJycpW14nXSg/Oi4qP1teJ10pPyg/PVxcMSkvLFxuICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgcHVuY3R1YXRpb246IC9eJycrfCcnKyQvXG4gICAgICB9XG4gICAgfSxcbiAgICBocjoge1xuICAgICAgcGF0dGVybjogL14tezQsfS9tLFxuICAgICAgYWxpYXM6ICdwdW5jdHVhdGlvbidcbiAgICB9LFxuICAgIHVybDogW1xuICAgICAgL0lTQk4gKyg/Ojk3Wzg5XVsgLV0/KT8oPzpcXGRbIC1dPyl7OX1bXFxkeF1cXGJ8KD86UE1JRHxSRkMpICtcXGQrL2ksXG4gICAgICAvXFxbXFxbLis/XFxdXFxdfFxcWy4rP1xcXS9cbiAgICBdLFxuICAgIHZhcmlhYmxlOiBbXG4gICAgICAvX19bQS1aXStfXy8sIC8vIEZJWE1FIE5lc3RlZCBzdHJ1Y3R1cmVzIHNob3VsZCBiZSBoYW5kbGVkXG4gICAgICAvLyB7e2Zvcm1hdG51bTp7eyNleHByOnt7ezN9fX19fX19XG4gICAgICAvXFx7ezN9Lis/XFx9ezN9LyxcbiAgICAgIC9cXHtcXHsuKz9cXH1cXH0vXG4gICAgXSxcbiAgICBzeW1ib2w6IFsvXiNyZWRpcmVjdC9pbSwgL357Myw1fS9dLFxuICAgIC8vIEhhbmRsZSB0YWJsZSBhdHRyczpcbiAgICAvLyB7fFxuICAgIC8vICEgc3R5bGU9XCJ0ZXh0LWFsaWduOmxlZnQ7XCJ8IEl0ZW1cbiAgICAvLyB8fVxuICAgICd0YWJsZS10YWcnOiB7XG4gICAgICBwYXR0ZXJuOiAvKCg/Ol58W3whXSlbfCFdKVtefFxcclxcbl0rXFx8KD8hXFx8KS9tLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGluc2lkZToge1xuICAgICAgICAndGFibGUtYmFyJzoge1xuICAgICAgICAgIHBhdHRlcm46IC9cXHwkLyxcbiAgICAgICAgICBhbGlhczogJ3B1bmN0dWF0aW9uJ1xuICAgICAgICB9LFxuICAgICAgICByZXN0OiBQcmlzbS5sYW5ndWFnZXMubWFya3VwWyd0YWcnXS5pbnNpZGVcbiAgICAgIH1cbiAgICB9LFxuICAgIHB1bmN0dWF0aW9uOiAvXig/Olxce1xcfHxcXHxcXH18XFx8LXxbKiM6OyF8XSl8XFx8XFx8fCEhL21cbiAgfSlcbiAgUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgnd2lraScsICd0YWcnLCB7XG4gICAgLy8gUHJldmVudCBoaWdobGlnaHRpbmcgaW5zaWRlIDxub3dpa2k+LCA8c291cmNlPiBhbmQgPHByZT4gdGFnc1xuICAgIG5vd2lraToge1xuICAgICAgcGF0dGVybjogLzwobm93aWtpfHByZXxzb3VyY2UpXFxiW14+XSo+W1xcc1xcU10qPzxcXC9cXDE+L2ksXG4gICAgICBpbnNpZGU6IHtcbiAgICAgICAgdGFnOiB7XG4gICAgICAgICAgcGF0dGVybjogLzwoPzpub3dpa2l8cHJlfHNvdXJjZSlcXGJbXj5dKj58PFxcLyg/Om5vd2lraXxwcmV8c291cmNlKT4vaSxcbiAgICAgICAgICBpbnNpZGU6IFByaXNtLmxhbmd1YWdlcy5tYXJrdXBbJ3RhZyddLmluc2lkZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9KVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJ3aWtpIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJleHRlbmQiLCJwYXR0ZXJuIiwibG9va2JlaGluZCIsImFsaWFzIiwiaGVhZGluZyIsImluc2lkZSIsInB1bmN0dWF0aW9uIiwiaW1wb3J0YW50IiwiZW1waGFzaXMiLCJib2xkIiwiaXRhbGljIiwiaHIiLCJ1cmwiLCJ2YXJpYWJsZSIsInN5bWJvbCIsInJlc3QiLCJtYXJrdXAiLCJpbnNlcnRCZWZvcmUiLCJub3dpa2kiLCJ0YWciXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/wiki.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/wolfram.js":
/*!************************************************!*\
  !*** ./node_modules/refractor/lang/wolfram.js ***!
  \************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = wolfram;\nwolfram.displayName = 'wolfram';\nwolfram.aliases = ['mathematica', 'wl', 'nb'];\nfunction wolfram(Prism) {\n  Prism.languages.wolfram = {\n    // Allow one level of nesting - note: regex taken from applescipt\n    comment: /\\(\\*(?:\\(\\*(?:[^*]|\\*(?!\\)))*\\*\\)|(?!\\(\\*)[\\s\\S])*?\\*\\)/,\n    string: {\n      pattern: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n      greedy: true\n    },\n    keyword: /\\b(?:Abs|AbsArg|Accuracy|Block|Do|For|Function|If|Manipulate|Module|Nest|NestList|None|Return|Switch|Table|Which|While)\\b/,\n    context: {\n      pattern: /\\b\\w+`+\\w*/,\n      alias: 'class-name'\n    },\n    blank: {\n      pattern: /\\b\\w+_\\b/,\n      alias: 'regex'\n    },\n    'global-variable': {\n      pattern: /\\$\\w+/,\n      alias: 'variable'\n    },\n    \"boolean\": /\\b(?:False|True)\\b/,\n    number: /(?:\\b(?=\\d)|\\B(?=\\.))(?:0[bo])?(?:(?:\\d|0x[\\da-f])[\\da-f]*(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?j?\\b/i,\n    operator: /\\/\\.|;|=\\.|\\^=|\\^:=|:=|<<|>>|<\\||\\|>|:>|\\|->|->|<-|@@@|@@|@|\\/@|=!=|===|==|=|\\+|-|\\^|\\[\\/-+%=\\]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,\n    punctuation: /[{}[\\];(),.:]/\n  };\n  Prism.languages.mathematica = Prism.languages.wolfram;\n  Prism.languages.wl = Prism.languages.wolfram;\n  Prism.languages.nb = Prism.languages.wolfram;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvd29sZnJhbS5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLE9BQU87QUFDeEJBLE9BQU8sQ0FBQ0MsV0FBVyxHQUFHLFNBQVM7QUFDL0JELE9BQU8sQ0FBQ0UsT0FBTyxHQUFHLENBQUMsYUFBYSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUM7QUFDN0MsU0FBU0YsT0FBT0EsQ0FBQ0csS0FBSyxFQUFFO0VBQ3RCQSxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osT0FBTyxHQUFHO0lBQ3hCO0lBQ0FLLE9BQU8sRUFBRSx5REFBeUQ7SUFDbEVDLE1BQU0sRUFBRTtNQUNOQyxPQUFPLEVBQUUsdUJBQXVCO01BQ2hDQyxNQUFNLEVBQUU7SUFDVixDQUFDO0lBQ0RDLE9BQU8sRUFDTCwySEFBMkg7SUFDN0hDLE9BQU8sRUFBRTtNQUNQSCxPQUFPLEVBQUUsWUFBWTtNQUNyQkksS0FBSyxFQUFFO0lBQ1QsQ0FBQztJQUNEQyxLQUFLLEVBQUU7TUFDTEwsT0FBTyxFQUFFLFVBQVU7TUFDbkJJLEtBQUssRUFBRTtJQUNULENBQUM7SUFDRCxpQkFBaUIsRUFBRTtNQUNqQkosT0FBTyxFQUFFLE9BQU87TUFDaEJJLEtBQUssRUFBRTtJQUNULENBQUM7SUFDRCxXQUFTLG9CQUFvQjtJQUM3QkUsTUFBTSxFQUNKLGdHQUFnRztJQUNsR0MsUUFBUSxFQUNOLDRJQUE0STtJQUM5SUMsV0FBVyxFQUFFO0VBQ2YsQ0FBQztFQUNEWixLQUFLLENBQUNDLFNBQVMsQ0FBQ1ksV0FBVyxHQUFHYixLQUFLLENBQUNDLFNBQVMsQ0FBQ0osT0FBTztFQUNyREcsS0FBSyxDQUFDQyxTQUFTLENBQUNhLEVBQUUsR0FBR2QsS0FBSyxDQUFDQyxTQUFTLENBQUNKLE9BQU87RUFDNUNHLEtBQUssQ0FBQ0MsU0FBUyxDQUFDYyxFQUFFLEdBQUdmLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixPQUFPO0FBQzlDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xcd29sZnJhbS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSB3b2xmcmFtXG53b2xmcmFtLmRpc3BsYXlOYW1lID0gJ3dvbGZyYW0nXG53b2xmcmFtLmFsaWFzZXMgPSBbJ21hdGhlbWF0aWNhJywgJ3dsJywgJ25iJ11cbmZ1bmN0aW9uIHdvbGZyYW0oUHJpc20pIHtcbiAgUHJpc20ubGFuZ3VhZ2VzLndvbGZyYW0gPSB7XG4gICAgLy8gQWxsb3cgb25lIGxldmVsIG9mIG5lc3RpbmcgLSBub3RlOiByZWdleCB0YWtlbiBmcm9tIGFwcGxlc2NpcHRcbiAgICBjb21tZW50OiAvXFwoXFwqKD86XFwoXFwqKD86W14qXXxcXCooPyFcXCkpKSpcXCpcXCl8KD8hXFwoXFwqKVtcXHNcXFNdKSo/XFwqXFwpLyxcbiAgICBzdHJpbmc6IHtcbiAgICAgIHBhdHRlcm46IC9cIig/OlxcXFwufFteXCJcXFxcXFxyXFxuXSkqXCIvLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICBrZXl3b3JkOlxuICAgICAgL1xcYig/OkFic3xBYnNBcmd8QWNjdXJhY3l8QmxvY2t8RG98Rm9yfEZ1bmN0aW9ufElmfE1hbmlwdWxhdGV8TW9kdWxlfE5lc3R8TmVzdExpc3R8Tm9uZXxSZXR1cm58U3dpdGNofFRhYmxlfFdoaWNofFdoaWxlKVxcYi8sXG4gICAgY29udGV4dDoge1xuICAgICAgcGF0dGVybjogL1xcYlxcdytgK1xcdyovLFxuICAgICAgYWxpYXM6ICdjbGFzcy1uYW1lJ1xuICAgIH0sXG4gICAgYmxhbms6IHtcbiAgICAgIHBhdHRlcm46IC9cXGJcXHcrX1xcYi8sXG4gICAgICBhbGlhczogJ3JlZ2V4J1xuICAgIH0sXG4gICAgJ2dsb2JhbC12YXJpYWJsZSc6IHtcbiAgICAgIHBhdHRlcm46IC9cXCRcXHcrLyxcbiAgICAgIGFsaWFzOiAndmFyaWFibGUnXG4gICAgfSxcbiAgICBib29sZWFuOiAvXFxiKD86RmFsc2V8VHJ1ZSlcXGIvLFxuICAgIG51bWJlcjpcbiAgICAgIC8oPzpcXGIoPz1cXGQpfFxcQig/PVxcLikpKD86MFtib10pPyg/Oig/OlxcZHwweFtcXGRhLWZdKVtcXGRhLWZdKig/OlxcLlxcZCopP3xcXC5cXGQrKSg/OmVbKy1dP1xcZCspP2o/XFxiL2ksXG4gICAgb3BlcmF0b3I6XG4gICAgICAvXFwvXFwufDt8PVxcLnxcXF49fFxcXjo9fDo9fDw8fD4+fDxcXHx8XFx8Pnw6PnxcXHwtPnwtPnw8LXxAQEB8QEB8QHxcXC9AfD0hPXw9PT18PT18PXxcXCt8LXxcXF58XFxbXFwvLSslPVxcXT0/fCE9fFxcKlxcKj89P3xcXC9cXC8/PT98PFs8PT5dP3w+Wz0+XT98WyZ8Xn5dLyxcbiAgICBwdW5jdHVhdGlvbjogL1t7fVtcXF07KCksLjpdL1xuICB9XG4gIFByaXNtLmxhbmd1YWdlcy5tYXRoZW1hdGljYSA9IFByaXNtLmxhbmd1YWdlcy53b2xmcmFtXG4gIFByaXNtLmxhbmd1YWdlcy53bCA9IFByaXNtLmxhbmd1YWdlcy53b2xmcmFtXG4gIFByaXNtLmxhbmd1YWdlcy5uYiA9IFByaXNtLmxhbmd1YWdlcy53b2xmcmFtXG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIndvbGZyYW0iLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImxhbmd1YWdlcyIsImNvbW1lbnQiLCJzdHJpbmciLCJwYXR0ZXJuIiwiZ3JlZWR5Iiwia2V5d29yZCIsImNvbnRleHQiLCJhbGlhcyIsImJsYW5rIiwibnVtYmVyIiwib3BlcmF0b3IiLCJwdW5jdHVhdGlvbiIsIm1hdGhlbWF0aWNhIiwid2wiLCJuYiJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/wolfram.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/wren.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/wren.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = wren;\nwren.displayName = 'wren';\nwren.aliases = [];\nfunction wren(Prism) {\n  // https://wren.io/\n  Prism.languages.wren = {\n    // Multiline comments in Wren can have nested multiline comments\n    // Comments: // and /* */\n    comment: [{\n      // support 3 levels of nesting\n      // regex: \\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|<self>)*\\*\\/\n      pattern: /\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*))*\\*\\/)*\\*\\/)*\\*\\//,\n      greedy: true\n    }, {\n      pattern: /(^|[^\\\\:])\\/\\/.*/,\n      lookbehind: true,\n      greedy: true\n    }],\n    // Triple quoted strings are multiline but cannot have interpolation (raw strings)\n    // Based on prism-python.js\n    'triple-quoted-string': {\n      pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n      greedy: true,\n      alias: 'string'\n    },\n    // see below\n    'string-literal': null,\n    // #!/usr/bin/env wren on the first line\n    hashbang: {\n      pattern: /^#!\\/.+/,\n      greedy: true,\n      alias: 'comment'\n    },\n    // Attributes are special keywords to add meta data to classes\n    attribute: {\n      // #! attributes are stored in class properties\n      // #!myvar = true\n      // #attributes are not stored and dismissed at compilation\n      pattern: /#!?[ \\t\\u3000]*\\w+/,\n      alias: 'keyword'\n    },\n    'class-name': [{\n      // class definition\n      // class Meta {}\n      pattern: /(\\bclass\\s+)\\w+/,\n      lookbehind: true\n    },\n    // A class must always start with an uppercase.\n    // File.read\n    /\\b[A-Z][a-z\\d_]*\\b/],\n    // A constant can be a variable, class, property or method. Just named in all uppercase letters\n    constant: /\\b[A-Z][A-Z\\d_]*\\b/,\n    \"null\": {\n      pattern: /\\bnull\\b/,\n      alias: 'keyword'\n    },\n    keyword: /\\b(?:as|break|class|construct|continue|else|for|foreign|if|import|in|is|return|static|super|this|var|while)\\b/,\n    \"boolean\": /\\b(?:false|true)\\b/,\n    number: /\\b(?:0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/i,\n    // Functions can be Class.method()\n    \"function\": /\\b[a-z_]\\w*(?=\\s*[({])/i,\n    operator: /<<|>>|[=!<>]=?|&&|\\|\\||[-+*/%~^&|?:]|\\.{2,3}/,\n    punctuation: /[\\[\\](){}.,;]/\n  };\n  Prism.languages.wren['string-literal'] = {\n    // A single quote string is multiline and can have interpolation (similar to JS backticks ``)\n    pattern: /(^|[^\\\\\"])\"(?:[^\\\\\"%]|\\\\[\\s\\S]|%(?!\\()|%\\((?:[^()]|\\((?:[^()]|\\([^)]*\\))*\\))*\\))*\"/,\n    lookbehind: true,\n    greedy: true,\n    inside: {\n      interpolation: {\n        // \"%(interpolation)\"\n        pattern: /((?:^|[^\\\\])(?:\\\\{2})*)%\\((?:[^()]|\\((?:[^()]|\\([^)]*\\))*\\))*\\)/,\n        lookbehind: true,\n        inside: {\n          expression: {\n            pattern: /^(%\\()[\\s\\S]+(?=\\)$)/,\n            lookbehind: true,\n            inside: Prism.languages.wren\n          },\n          'interpolation-punctuation': {\n            pattern: /^%\\(|\\)$/,\n            alias: 'punctuation'\n          }\n        }\n      },\n      string: /[\\s\\S]+/\n    }\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvd3Jlbi5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLElBQUk7QUFDckJBLElBQUksQ0FBQ0MsV0FBVyxHQUFHLE1BQU07QUFDekJELElBQUksQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDakIsU0FBU0YsSUFBSUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ25CO0VBQ0FBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixJQUFJLEdBQUc7SUFDckI7SUFDQTtJQUNBSyxPQUFPLEVBQUUsQ0FDUDtNQUNFO01BQ0E7TUFDQUMsT0FBTyxFQUNMLGdIQUFnSDtNQUNsSEMsTUFBTSxFQUFFO0lBQ1YsQ0FBQyxFQUNEO01BQ0VELE9BQU8sRUFBRSxrQkFBa0I7TUFDM0JFLFVBQVUsRUFBRSxJQUFJO01BQ2hCRCxNQUFNLEVBQUU7SUFDVixDQUFDLENBQ0Y7SUFDRDtJQUNBO0lBQ0Esc0JBQXNCLEVBQUU7TUFDdEJELE9BQU8sRUFBRSxnQkFBZ0I7TUFDekJDLE1BQU0sRUFBRSxJQUFJO01BQ1pFLEtBQUssRUFBRTtJQUNULENBQUM7SUFDRDtJQUNBLGdCQUFnQixFQUFFLElBQUk7SUFDdEI7SUFDQUMsUUFBUSxFQUFFO01BQ1JKLE9BQU8sRUFBRSxTQUFTO01BQ2xCQyxNQUFNLEVBQUUsSUFBSTtNQUNaRSxLQUFLLEVBQUU7SUFDVCxDQUFDO0lBQ0Q7SUFDQUUsU0FBUyxFQUFFO01BQ1Q7TUFDQTtNQUNBO01BQ0FMLE9BQU8sRUFBRSxvQkFBb0I7TUFDN0JHLEtBQUssRUFBRTtJQUNULENBQUM7SUFDRCxZQUFZLEVBQUUsQ0FDWjtNQUNFO01BQ0E7TUFDQUgsT0FBTyxFQUFFLGlCQUFpQjtNQUMxQkUsVUFBVSxFQUFFO0lBQ2QsQ0FBQztJQUFFO0lBQ0g7SUFDQSxvQkFBb0IsQ0FDckI7SUFDRDtJQUNBSSxRQUFRLEVBQUUsb0JBQW9CO0lBQzlCLFFBQU07TUFDSk4sT0FBTyxFQUFFLFVBQVU7TUFDbkJHLEtBQUssRUFBRTtJQUNULENBQUM7SUFDREksT0FBTyxFQUNMLCtHQUErRztJQUNqSCxXQUFTLG9CQUFvQjtJQUM3QkMsTUFBTSxFQUFFLGlEQUFpRDtJQUN6RDtJQUNBLFlBQVUseUJBQXlCO0lBQ25DQyxRQUFRLEVBQUUsOENBQThDO0lBQ3hEQyxXQUFXLEVBQUU7RUFDZixDQUFDO0VBQ0RiLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRztJQUN2QztJQUNBTSxPQUFPLEVBQ0wsb0ZBQW9GO0lBQ3RGRSxVQUFVLEVBQUUsSUFBSTtJQUNoQkQsTUFBTSxFQUFFLElBQUk7SUFDWlUsTUFBTSxFQUFFO01BQ05DLGFBQWEsRUFBRTtRQUNiO1FBQ0FaLE9BQU8sRUFDTCxpRUFBaUU7UUFDbkVFLFVBQVUsRUFBRSxJQUFJO1FBQ2hCUyxNQUFNLEVBQUU7VUFDTkUsVUFBVSxFQUFFO1lBQ1ZiLE9BQU8sRUFBRSxzQkFBc0I7WUFDL0JFLFVBQVUsRUFBRSxJQUFJO1lBQ2hCUyxNQUFNLEVBQUVkLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSjtVQUMxQixDQUFDO1VBQ0QsMkJBQTJCLEVBQUU7WUFDM0JNLE9BQU8sRUFBRSxVQUFVO1lBQ25CRyxLQUFLLEVBQUU7VUFDVDtRQUNGO01BQ0YsQ0FBQztNQUNEVyxNQUFNLEVBQUU7SUFDVjtFQUNGLENBQUM7QUFDSCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxyZWZyYWN0b3JcXGxhbmdcXHdyZW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gd3Jlblxud3Jlbi5kaXNwbGF5TmFtZSA9ICd3cmVuJ1xud3Jlbi5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIHdyZW4oUHJpc20pIHtcbiAgLy8gaHR0cHM6Ly93cmVuLmlvL1xuICBQcmlzbS5sYW5ndWFnZXMud3JlbiA9IHtcbiAgICAvLyBNdWx0aWxpbmUgY29tbWVudHMgaW4gV3JlbiBjYW4gaGF2ZSBuZXN0ZWQgbXVsdGlsaW5lIGNvbW1lbnRzXG4gICAgLy8gQ29tbWVudHM6IC8vIGFuZCAvKiAqL1xuICAgIGNvbW1lbnQ6IFtcbiAgICAgIHtcbiAgICAgICAgLy8gc3VwcG9ydCAzIGxldmVscyBvZiBuZXN0aW5nXG4gICAgICAgIC8vIHJlZ2V4OiBcXC9cXCooPzpbXiovXXxcXCooPyFcXC8pfFxcLyg/IVxcKil8PHNlbGY+KSpcXCpcXC9cbiAgICAgICAgcGF0dGVybjpcbiAgICAgICAgICAvXFwvXFwqKD86W14qL118XFwqKD8hXFwvKXxcXC8oPyFcXCopfFxcL1xcKig/OlteKi9dfFxcKig/IVxcLyl8XFwvKD8hXFwqKXxcXC9cXCooPzpbXiovXXxcXCooPyFcXC8pfFxcLyg/IVxcKikpKlxcKlxcLykqXFwqXFwvKSpcXCpcXC8vLFxuICAgICAgICBncmVlZHk6IHRydWVcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHBhdHRlcm46IC8oXnxbXlxcXFw6XSlcXC9cXC8uKi8sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGdyZWVkeTogdHJ1ZVxuICAgICAgfVxuICAgIF0sXG4gICAgLy8gVHJpcGxlIHF1b3RlZCBzdHJpbmdzIGFyZSBtdWx0aWxpbmUgYnV0IGNhbm5vdCBoYXZlIGludGVycG9sYXRpb24gKHJhdyBzdHJpbmdzKVxuICAgIC8vIEJhc2VkIG9uIHByaXNtLXB5dGhvbi5qc1xuICAgICd0cmlwbGUtcXVvdGVkLXN0cmluZyc6IHtcbiAgICAgIHBhdHRlcm46IC9cIlwiXCJbXFxzXFxTXSo/XCJcIlwiLyxcbiAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgIGFsaWFzOiAnc3RyaW5nJ1xuICAgIH0sXG4gICAgLy8gc2VlIGJlbG93XG4gICAgJ3N0cmluZy1saXRlcmFsJzogbnVsbCxcbiAgICAvLyAjIS91c3IvYmluL2VudiB3cmVuIG9uIHRoZSBmaXJzdCBsaW5lXG4gICAgaGFzaGJhbmc6IHtcbiAgICAgIHBhdHRlcm46IC9eIyFcXC8uKy8sXG4gICAgICBncmVlZHk6IHRydWUsXG4gICAgICBhbGlhczogJ2NvbW1lbnQnXG4gICAgfSxcbiAgICAvLyBBdHRyaWJ1dGVzIGFyZSBzcGVjaWFsIGtleXdvcmRzIHRvIGFkZCBtZXRhIGRhdGEgdG8gY2xhc3Nlc1xuICAgIGF0dHJpYnV0ZToge1xuICAgICAgLy8gIyEgYXR0cmlidXRlcyBhcmUgc3RvcmVkIGluIGNsYXNzIHByb3BlcnRpZXNcbiAgICAgIC8vICMhbXl2YXIgPSB0cnVlXG4gICAgICAvLyAjYXR0cmlidXRlcyBhcmUgbm90IHN0b3JlZCBhbmQgZGlzbWlzc2VkIGF0IGNvbXBpbGF0aW9uXG4gICAgICBwYXR0ZXJuOiAvIyE/WyBcXHRcXHUzMDAwXSpcXHcrLyxcbiAgICAgIGFsaWFzOiAna2V5d29yZCdcbiAgICB9LFxuICAgICdjbGFzcy1uYW1lJzogW1xuICAgICAge1xuICAgICAgICAvLyBjbGFzcyBkZWZpbml0aW9uXG4gICAgICAgIC8vIGNsYXNzIE1ldGEge31cbiAgICAgICAgcGF0dGVybjogLyhcXGJjbGFzc1xccyspXFx3Ky8sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH0sIC8vIEEgY2xhc3MgbXVzdCBhbHdheXMgc3RhcnQgd2l0aCBhbiB1cHBlcmNhc2UuXG4gICAgICAvLyBGaWxlLnJlYWRcbiAgICAgIC9cXGJbQS1aXVthLXpcXGRfXSpcXGIvXG4gICAgXSxcbiAgICAvLyBBIGNvbnN0YW50IGNhbiBiZSBhIHZhcmlhYmxlLCBjbGFzcywgcHJvcGVydHkgb3IgbWV0aG9kLiBKdXN0IG5hbWVkIGluIGFsbCB1cHBlcmNhc2UgbGV0dGVyc1xuICAgIGNvbnN0YW50OiAvXFxiW0EtWl1bQS1aXFxkX10qXFxiLyxcbiAgICBudWxsOiB7XG4gICAgICBwYXR0ZXJuOiAvXFxibnVsbFxcYi8sXG4gICAgICBhbGlhczogJ2tleXdvcmQnXG4gICAgfSxcbiAgICBrZXl3b3JkOlxuICAgICAgL1xcYig/OmFzfGJyZWFrfGNsYXNzfGNvbnN0cnVjdHxjb250aW51ZXxlbHNlfGZvcnxmb3JlaWdufGlmfGltcG9ydHxpbnxpc3xyZXR1cm58c3RhdGljfHN1cGVyfHRoaXN8dmFyfHdoaWxlKVxcYi8sXG4gICAgYm9vbGVhbjogL1xcYig/OmZhbHNlfHRydWUpXFxiLyxcbiAgICBudW1iZXI6IC9cXGIoPzoweFtcXGRhLWZdK3xcXGQrKD86XFwuXFxkKyk/KD86ZVsrLV0/XFxkKyk/KVxcYi9pLFxuICAgIC8vIEZ1bmN0aW9ucyBjYW4gYmUgQ2xhc3MubWV0aG9kKClcbiAgICBmdW5jdGlvbjogL1xcYlthLXpfXVxcdyooPz1cXHMqWyh7XSkvaSxcbiAgICBvcGVyYXRvcjogLzw8fD4+fFs9ITw+XT0/fCYmfFxcfFxcfHxbLSsqLyV+XiZ8PzpdfFxcLnsyLDN9LyxcbiAgICBwdW5jdHVhdGlvbjogL1tcXFtcXF0oKXt9Liw7XS9cbiAgfVxuICBQcmlzbS5sYW5ndWFnZXMud3Jlblsnc3RyaW5nLWxpdGVyYWwnXSA9IHtcbiAgICAvLyBBIHNpbmdsZSBxdW90ZSBzdHJpbmcgaXMgbXVsdGlsaW5lIGFuZCBjYW4gaGF2ZSBpbnRlcnBvbGF0aW9uIChzaW1pbGFyIHRvIEpTIGJhY2t0aWNrcyBgYClcbiAgICBwYXR0ZXJuOlxuICAgICAgLyhefFteXFxcXFwiXSlcIig/OlteXFxcXFwiJV18XFxcXFtcXHNcXFNdfCUoPyFcXCgpfCVcXCgoPzpbXigpXXxcXCgoPzpbXigpXXxcXChbXildKlxcKSkqXFwpKSpcXCkpKlwiLyxcbiAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgIGdyZWVkeTogdHJ1ZSxcbiAgICBpbnNpZGU6IHtcbiAgICAgIGludGVycG9sYXRpb246IHtcbiAgICAgICAgLy8gXCIlKGludGVycG9sYXRpb24pXCJcbiAgICAgICAgcGF0dGVybjpcbiAgICAgICAgICAvKCg/Ol58W15cXFxcXSkoPzpcXFxcezJ9KSopJVxcKCg/OlteKCldfFxcKCg/OlteKCldfFxcKFteKV0qXFwpKSpcXCkpKlxcKS8sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGluc2lkZToge1xuICAgICAgICAgIGV4cHJlc3Npb246IHtcbiAgICAgICAgICAgIHBhdHRlcm46IC9eKCVcXCgpW1xcc1xcU10rKD89XFwpJCkvLFxuICAgICAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgICAgIGluc2lkZTogUHJpc20ubGFuZ3VhZ2VzLndyZW5cbiAgICAgICAgICB9LFxuICAgICAgICAgICdpbnRlcnBvbGF0aW9uLXB1bmN0dWF0aW9uJzoge1xuICAgICAgICAgICAgcGF0dGVybjogL14lXFwofFxcKSQvLFxuICAgICAgICAgICAgYWxpYXM6ICdwdW5jdHVhdGlvbidcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBzdHJpbmc6IC9bXFxzXFxTXSsvXG4gICAgfVxuICB9XG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIndyZW4iLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImxhbmd1YWdlcyIsImNvbW1lbnQiLCJwYXR0ZXJuIiwiZ3JlZWR5IiwibG9va2JlaGluZCIsImFsaWFzIiwiaGFzaGJhbmciLCJhdHRyaWJ1dGUiLCJjb25zdGFudCIsImtleXdvcmQiLCJudW1iZXIiLCJvcGVyYXRvciIsInB1bmN0dWF0aW9uIiwiaW5zaWRlIiwiaW50ZXJwb2xhdGlvbiIsImV4cHJlc3Npb24iLCJzdHJpbmciXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/wren.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/xeora.js":
/*!**********************************************!*\
  !*** ./node_modules/refractor/lang/xeora.js ***!
  \**********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = xeora;\nxeora.displayName = 'xeora';\nxeora.aliases = ['xeoracube'];\nfunction xeora(Prism) {\n  ;\n  (function (Prism) {\n    Prism.languages.xeora = Prism.languages.extend('markup', {\n      constant: {\n        pattern: /\\$(?:DomainContents|PageRenderDuration)\\$/,\n        inside: {\n          punctuation: {\n            pattern: /\\$/\n          }\n        }\n      },\n      variable: {\n        pattern: /\\$@?(?:#+|[-+*~=^])?[\\w.]+\\$/,\n        inside: {\n          punctuation: {\n            pattern: /[$.]/\n          },\n          operator: {\n            pattern: /#+|[-+*~=^@]/\n          }\n        }\n      },\n      'function-inline': {\n        pattern: /\\$F:[-\\w.]+\\?[-\\w.]+(?:,(?:(?:@[-#]*\\w+\\.[\\w+.]\\.*)*\\|)*(?:(?:[\\w+]|[-#*.~^]+[\\w+]|=\\S)(?:[^$=]|=+[^=])*=*|(?:@[-#]*\\w+\\.[\\w+.]\\.*)+(?:(?:[\\w+]|[-#*~^][-#*.~^]*[\\w+]|=\\S)(?:[^$=]|=+[^=])*=*)?)?)?\\$/,\n        inside: {\n          variable: {\n            pattern: /(?:[,|])@?(?:#+|[-+*~=^])?[\\w.]+/,\n            inside: {\n              punctuation: {\n                pattern: /[,.|]/\n              },\n              operator: {\n                pattern: /#+|[-+*~=^@]/\n              }\n            }\n          },\n          punctuation: {\n            pattern: /\\$\\w:|[$:?.,|]/\n          }\n        },\n        alias: 'function'\n      },\n      'function-block': {\n        pattern: /\\$XF:\\{[-\\w.]+\\?[-\\w.]+(?:,(?:(?:@[-#]*\\w+\\.[\\w+.]\\.*)*\\|)*(?:(?:[\\w+]|[-#*.~^]+[\\w+]|=\\S)(?:[^$=]|=+[^=])*=*|(?:@[-#]*\\w+\\.[\\w+.]\\.*)+(?:(?:[\\w+]|[-#*~^][-#*.~^]*[\\w+]|=\\S)(?:[^$=]|=+[^=])*=*)?)?)?\\}:XF\\$/,\n        inside: {\n          punctuation: {\n            pattern: /[$:{}?.,|]/\n          }\n        },\n        alias: 'function'\n      },\n      'directive-inline': {\n        pattern: /\\$\\w(?:#\\d+\\+?)?(?:\\[[-\\w.]+\\])?:[-\\/\\w.]+\\$/,\n        inside: {\n          punctuation: {\n            pattern: /\\$(?:\\w:|C(?:\\[|#\\d))?|[:{[\\]]/,\n            inside: {\n              tag: {\n                pattern: /#\\d/\n              }\n            }\n          }\n        },\n        alias: 'function'\n      },\n      'directive-block-open': {\n        pattern: /\\$\\w+:\\{|\\$\\w(?:#\\d+\\+?)?(?:\\[[-\\w.]+\\])?:[-\\w.]+:\\{(?:![A-Z]+)?/,\n        inside: {\n          punctuation: {\n            pattern: /\\$(?:\\w:|C(?:\\[|#\\d))?|[:{[\\]]/,\n            inside: {\n              tag: {\n                pattern: /#\\d/\n              }\n            }\n          },\n          attribute: {\n            pattern: /![A-Z]+$/,\n            inside: {\n              punctuation: {\n                pattern: /!/\n              }\n            },\n            alias: 'keyword'\n          }\n        },\n        alias: 'function'\n      },\n      'directive-block-separator': {\n        pattern: /\\}:[-\\w.]+:\\{/,\n        inside: {\n          punctuation: {\n            pattern: /[:{}]/\n          }\n        },\n        alias: 'function'\n      },\n      'directive-block-close': {\n        pattern: /\\}:[-\\w.]+\\$/,\n        inside: {\n          punctuation: {\n            pattern: /[:{}$]/\n          }\n        },\n        alias: 'function'\n      }\n    });\n    Prism.languages.insertBefore('inside', 'punctuation', {\n      variable: Prism.languages.xeora['function-inline'].inside['variable']\n    }, Prism.languages.xeora['function-block']);\n    Prism.languages.xeoracube = Prism.languages.xeora;\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcveGVvcmEuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxLQUFLO0FBQ3RCQSxLQUFLLENBQUNDLFdBQVcsR0FBRyxPQUFPO0FBQzNCRCxLQUFLLENBQUNFLE9BQU8sR0FBRyxDQUFDLFdBQVcsQ0FBQztBQUM3QixTQUFTRixLQUFLQSxDQUFDRyxLQUFLLEVBQUU7RUFDcEI7RUFBQyxDQUFDLFVBQVVBLEtBQUssRUFBRTtJQUNqQkEsS0FBSyxDQUFDQyxTQUFTLENBQUNKLEtBQUssR0FBR0csS0FBSyxDQUFDQyxTQUFTLENBQUNDLE1BQU0sQ0FBQyxRQUFRLEVBQUU7TUFDdkRDLFFBQVEsRUFBRTtRQUNSQyxPQUFPLEVBQUUsMkNBQTJDO1FBQ3BEQyxNQUFNLEVBQUU7VUFDTkMsV0FBVyxFQUFFO1lBQ1hGLE9BQU8sRUFBRTtVQUNYO1FBQ0Y7TUFDRixDQUFDO01BQ0RHLFFBQVEsRUFBRTtRQUNSSCxPQUFPLEVBQUUsOEJBQThCO1FBQ3ZDQyxNQUFNLEVBQUU7VUFDTkMsV0FBVyxFQUFFO1lBQ1hGLE9BQU8sRUFBRTtVQUNYLENBQUM7VUFDREksUUFBUSxFQUFFO1lBQ1JKLE9BQU8sRUFBRTtVQUNYO1FBQ0Y7TUFDRixDQUFDO01BQ0QsaUJBQWlCLEVBQUU7UUFDakJBLE9BQU8sRUFDTCx1TUFBdU07UUFDek1DLE1BQU0sRUFBRTtVQUNORSxRQUFRLEVBQUU7WUFDUkgsT0FBTyxFQUFFLGtDQUFrQztZQUMzQ0MsTUFBTSxFQUFFO2NBQ05DLFdBQVcsRUFBRTtnQkFDWEYsT0FBTyxFQUFFO2NBQ1gsQ0FBQztjQUNESSxRQUFRLEVBQUU7Z0JBQ1JKLE9BQU8sRUFBRTtjQUNYO1lBQ0Y7VUFDRixDQUFDO1VBQ0RFLFdBQVcsRUFBRTtZQUNYRixPQUFPLEVBQUU7VUFDWDtRQUNGLENBQUM7UUFDREssS0FBSyxFQUFFO01BQ1QsQ0FBQztNQUNELGdCQUFnQixFQUFFO1FBQ2hCTCxPQUFPLEVBQ0wsK01BQStNO1FBQ2pOQyxNQUFNLEVBQUU7VUFDTkMsV0FBVyxFQUFFO1lBQ1hGLE9BQU8sRUFBRTtVQUNYO1FBQ0YsQ0FBQztRQUNESyxLQUFLLEVBQUU7TUFDVCxDQUFDO01BQ0Qsa0JBQWtCLEVBQUU7UUFDbEJMLE9BQU8sRUFBRSw4Q0FBOEM7UUFDdkRDLE1BQU0sRUFBRTtVQUNOQyxXQUFXLEVBQUU7WUFDWEYsT0FBTyxFQUFFLGdDQUFnQztZQUN6Q0MsTUFBTSxFQUFFO2NBQ05LLEdBQUcsRUFBRTtnQkFDSE4sT0FBTyxFQUFFO2NBQ1g7WUFDRjtVQUNGO1FBQ0YsQ0FBQztRQUNESyxLQUFLLEVBQUU7TUFDVCxDQUFDO01BQ0Qsc0JBQXNCLEVBQUU7UUFDdEJMLE9BQU8sRUFDTCxrRUFBa0U7UUFDcEVDLE1BQU0sRUFBRTtVQUNOQyxXQUFXLEVBQUU7WUFDWEYsT0FBTyxFQUFFLGdDQUFnQztZQUN6Q0MsTUFBTSxFQUFFO2NBQ05LLEdBQUcsRUFBRTtnQkFDSE4sT0FBTyxFQUFFO2NBQ1g7WUFDRjtVQUNGLENBQUM7VUFDRE8sU0FBUyxFQUFFO1lBQ1RQLE9BQU8sRUFBRSxVQUFVO1lBQ25CQyxNQUFNLEVBQUU7Y0FDTkMsV0FBVyxFQUFFO2dCQUNYRixPQUFPLEVBQUU7Y0FDWDtZQUNGLENBQUM7WUFDREssS0FBSyxFQUFFO1VBQ1Q7UUFDRixDQUFDO1FBQ0RBLEtBQUssRUFBRTtNQUNULENBQUM7TUFDRCwyQkFBMkIsRUFBRTtRQUMzQkwsT0FBTyxFQUFFLGVBQWU7UUFDeEJDLE1BQU0sRUFBRTtVQUNOQyxXQUFXLEVBQUU7WUFDWEYsT0FBTyxFQUFFO1VBQ1g7UUFDRixDQUFDO1FBQ0RLLEtBQUssRUFBRTtNQUNULENBQUM7TUFDRCx1QkFBdUIsRUFBRTtRQUN2QkwsT0FBTyxFQUFFLGNBQWM7UUFDdkJDLE1BQU0sRUFBRTtVQUNOQyxXQUFXLEVBQUU7WUFDWEYsT0FBTyxFQUFFO1VBQ1g7UUFDRixDQUFDO1FBQ0RLLEtBQUssRUFBRTtNQUNUO0lBQ0YsQ0FBQyxDQUFDO0lBQ0ZULEtBQUssQ0FBQ0MsU0FBUyxDQUFDVyxZQUFZLENBQzFCLFFBQVEsRUFDUixhQUFhLEVBQ2I7TUFDRUwsUUFBUSxFQUFFUCxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUNRLE1BQU0sQ0FBQyxVQUFVO0lBQ3RFLENBQUMsRUFDREwsS0FBSyxDQUFDQyxTQUFTLENBQUNKLEtBQUssQ0FBQyxnQkFBZ0IsQ0FDeEMsQ0FBQztJQUNERyxLQUFLLENBQUNDLFNBQVMsQ0FBQ1ksU0FBUyxHQUFHYixLQUFLLENBQUNDLFNBQVMsQ0FBQ0osS0FBSztFQUNuRCxDQUFDLEVBQUVHLEtBQUssQ0FBQztBQUNYIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xceGVvcmEuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0geGVvcmFcbnhlb3JhLmRpc3BsYXlOYW1lID0gJ3hlb3JhJ1xueGVvcmEuYWxpYXNlcyA9IFsneGVvcmFjdWJlJ11cbmZ1bmN0aW9uIHhlb3JhKFByaXNtKSB7XG4gIDsoZnVuY3Rpb24gKFByaXNtKSB7XG4gICAgUHJpc20ubGFuZ3VhZ2VzLnhlb3JhID0gUHJpc20ubGFuZ3VhZ2VzLmV4dGVuZCgnbWFya3VwJywge1xuICAgICAgY29uc3RhbnQ6IHtcbiAgICAgICAgcGF0dGVybjogL1xcJCg/OkRvbWFpbkNvbnRlbnRzfFBhZ2VSZW5kZXJEdXJhdGlvbilcXCQvLFxuICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICBwdW5jdHVhdGlvbjoge1xuICAgICAgICAgICAgcGF0dGVybjogL1xcJC9cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB2YXJpYWJsZToge1xuICAgICAgICBwYXR0ZXJuOiAvXFwkQD8oPzojK3xbLSsqfj1eXSk/W1xcdy5dK1xcJC8sXG4gICAgICAgIGluc2lkZToge1xuICAgICAgICAgIHB1bmN0dWF0aW9uOiB7XG4gICAgICAgICAgICBwYXR0ZXJuOiAvWyQuXS9cbiAgICAgICAgICB9LFxuICAgICAgICAgIG9wZXJhdG9yOiB7XG4gICAgICAgICAgICBwYXR0ZXJuOiAvIyt8Wy0rKn49XkBdL1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgICdmdW5jdGlvbi1pbmxpbmUnOiB7XG4gICAgICAgIHBhdHRlcm46XG4gICAgICAgICAgL1xcJEY6Wy1cXHcuXStcXD9bLVxcdy5dKyg/OiwoPzooPzpAWy0jXSpcXHcrXFwuW1xcdysuXVxcLiopKlxcfCkqKD86KD86W1xcdytdfFstIyoufl5dK1tcXHcrXXw9XFxTKSg/OlteJD1dfD0rW149XSkqPSp8KD86QFstI10qXFx3K1xcLltcXHcrLl1cXC4qKSsoPzooPzpbXFx3K118Wy0jKn5eXVstIyoufl5dKltcXHcrXXw9XFxTKSg/OlteJD1dfD0rW149XSkqPSopPyk/KT9cXCQvLFxuICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICB2YXJpYWJsZToge1xuICAgICAgICAgICAgcGF0dGVybjogLyg/OlssfF0pQD8oPzojK3xbLSsqfj1eXSk/W1xcdy5dKy8sXG4gICAgICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICAgICAgcHVuY3R1YXRpb246IHtcbiAgICAgICAgICAgICAgICBwYXR0ZXJuOiAvWywufF0vXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIG9wZXJhdG9yOiB7XG4gICAgICAgICAgICAgICAgcGF0dGVybjogLyMrfFstKyp+PV5AXS9cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgcHVuY3R1YXRpb246IHtcbiAgICAgICAgICAgIHBhdHRlcm46IC9cXCRcXHc6fFskOj8uLHxdL1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgYWxpYXM6ICdmdW5jdGlvbidcbiAgICAgIH0sXG4gICAgICAnZnVuY3Rpb24tYmxvY2snOiB7XG4gICAgICAgIHBhdHRlcm46XG4gICAgICAgICAgL1xcJFhGOlxce1stXFx3Ll0rXFw/Wy1cXHcuXSsoPzosKD86KD86QFstI10qXFx3K1xcLltcXHcrLl1cXC4qKSpcXHwpKig/Oig/OltcXHcrXXxbLSMqLn5eXStbXFx3K118PVxcUykoPzpbXiQ9XXw9K1tePV0pKj0qfCg/OkBbLSNdKlxcdytcXC5bXFx3Ky5dXFwuKikrKD86KD86W1xcdytdfFstIyp+Xl1bLSMqLn5eXSpbXFx3K118PVxcUykoPzpbXiQ9XXw9K1tePV0pKj0qKT8pPyk/XFx9OlhGXFwkLyxcbiAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgcHVuY3R1YXRpb246IHtcbiAgICAgICAgICAgIHBhdHRlcm46IC9bJDp7fT8uLHxdL1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgYWxpYXM6ICdmdW5jdGlvbidcbiAgICAgIH0sXG4gICAgICAnZGlyZWN0aXZlLWlubGluZSc6IHtcbiAgICAgICAgcGF0dGVybjogL1xcJFxcdyg/OiNcXGQrXFwrPyk/KD86XFxbWy1cXHcuXStcXF0pPzpbLVxcL1xcdy5dK1xcJC8sXG4gICAgICAgIGluc2lkZToge1xuICAgICAgICAgIHB1bmN0dWF0aW9uOiB7XG4gICAgICAgICAgICBwYXR0ZXJuOiAvXFwkKD86XFx3OnxDKD86XFxbfCNcXGQpKT98Wzp7W1xcXV0vLFxuICAgICAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgICAgIHRhZzoge1xuICAgICAgICAgICAgICAgIHBhdHRlcm46IC8jXFxkL1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBhbGlhczogJ2Z1bmN0aW9uJ1xuICAgICAgfSxcbiAgICAgICdkaXJlY3RpdmUtYmxvY2stb3Blbic6IHtcbiAgICAgICAgcGF0dGVybjpcbiAgICAgICAgICAvXFwkXFx3KzpcXHt8XFwkXFx3KD86I1xcZCtcXCs/KT8oPzpcXFtbLVxcdy5dK1xcXSk/OlstXFx3Ll0rOlxceyg/OiFbQS1aXSspPy8sXG4gICAgICAgIGluc2lkZToge1xuICAgICAgICAgIHB1bmN0dWF0aW9uOiB7XG4gICAgICAgICAgICBwYXR0ZXJuOiAvXFwkKD86XFx3OnxDKD86XFxbfCNcXGQpKT98Wzp7W1xcXV0vLFxuICAgICAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgICAgIHRhZzoge1xuICAgICAgICAgICAgICAgIHBhdHRlcm46IC8jXFxkL1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBhdHRyaWJ1dGU6IHtcbiAgICAgICAgICAgIHBhdHRlcm46IC8hW0EtWl0rJC8sXG4gICAgICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICAgICAgcHVuY3R1YXRpb246IHtcbiAgICAgICAgICAgICAgICBwYXR0ZXJuOiAvIS9cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFsaWFzOiAna2V5d29yZCdcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGFsaWFzOiAnZnVuY3Rpb24nXG4gICAgICB9LFxuICAgICAgJ2RpcmVjdGl2ZS1ibG9jay1zZXBhcmF0b3InOiB7XG4gICAgICAgIHBhdHRlcm46IC9cXH06Wy1cXHcuXSs6XFx7LyxcbiAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgcHVuY3R1YXRpb246IHtcbiAgICAgICAgICAgIHBhdHRlcm46IC9bOnt9XS9cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGFsaWFzOiAnZnVuY3Rpb24nXG4gICAgICB9LFxuICAgICAgJ2RpcmVjdGl2ZS1ibG9jay1jbG9zZSc6IHtcbiAgICAgICAgcGF0dGVybjogL1xcfTpbLVxcdy5dK1xcJC8sXG4gICAgICAgIGluc2lkZToge1xuICAgICAgICAgIHB1bmN0dWF0aW9uOiB7XG4gICAgICAgICAgICBwYXR0ZXJuOiAvWzp7fSRdL1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgYWxpYXM6ICdmdW5jdGlvbidcbiAgICAgIH1cbiAgICB9KVxuICAgIFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoXG4gICAgICAnaW5zaWRlJyxcbiAgICAgICdwdW5jdHVhdGlvbicsXG4gICAgICB7XG4gICAgICAgIHZhcmlhYmxlOiBQcmlzbS5sYW5ndWFnZXMueGVvcmFbJ2Z1bmN0aW9uLWlubGluZSddLmluc2lkZVsndmFyaWFibGUnXVxuICAgICAgfSxcbiAgICAgIFByaXNtLmxhbmd1YWdlcy54ZW9yYVsnZnVuY3Rpb24tYmxvY2snXVxuICAgIClcbiAgICBQcmlzbS5sYW5ndWFnZXMueGVvcmFjdWJlID0gUHJpc20ubGFuZ3VhZ2VzLnhlb3JhXG4gIH0pKFByaXNtKVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJ4ZW9yYSIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwiZXh0ZW5kIiwiY29uc3RhbnQiLCJwYXR0ZXJuIiwiaW5zaWRlIiwicHVuY3R1YXRpb24iLCJ2YXJpYWJsZSIsIm9wZXJhdG9yIiwiYWxpYXMiLCJ0YWciLCJhdHRyaWJ1dGUiLCJpbnNlcnRCZWZvcmUiLCJ4ZW9yYWN1YmUiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/xeora.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/xml-doc.js":
/*!************************************************!*\
  !*** ./node_modules/refractor/lang/xml-doc.js ***!
  \************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = xmlDoc;\nxmlDoc.displayName = 'xmlDoc';\nxmlDoc.aliases = [];\nfunction xmlDoc(Prism) {\n  ;\n  (function (Prism) {\n    /**\n     * If the given language is present, it will insert the given doc comment grammar token into it.\n     *\n     * @param {string} lang\n     * @param {any} docComment\n     */\n    function insertDocComment(lang, docComment) {\n      if (Prism.languages[lang]) {\n        Prism.languages.insertBefore(lang, 'comment', {\n          'doc-comment': docComment\n        });\n      }\n    }\n    var tag = Prism.languages.markup.tag;\n    var slashDocComment = {\n      pattern: /\\/\\/\\/.*/,\n      greedy: true,\n      alias: 'comment',\n      inside: {\n        tag: tag\n      }\n    };\n    var tickDocComment = {\n      pattern: /'''.*/,\n      greedy: true,\n      alias: 'comment',\n      inside: {\n        tag: tag\n      }\n    };\n    insertDocComment('csharp', slashDocComment);\n    insertDocComment('fsharp', slashDocComment);\n    insertDocComment('vbnet', tickDocComment);\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcveG1sLWRvYy5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLE1BQU07QUFDdkJBLE1BQU0sQ0FBQ0MsV0FBVyxHQUFHLFFBQVE7QUFDN0JELE1BQU0sQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDbkIsU0FBU0YsTUFBTUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ3JCO0VBQUMsQ0FBQyxVQUFVQSxLQUFLLEVBQUU7SUFDakI7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0lBQ0ksU0FBU0MsZ0JBQWdCQSxDQUFDQyxJQUFJLEVBQUVDLFVBQVUsRUFBRTtNQUMxQyxJQUFJSCxLQUFLLENBQUNJLFNBQVMsQ0FBQ0YsSUFBSSxDQUFDLEVBQUU7UUFDekJGLEtBQUssQ0FBQ0ksU0FBUyxDQUFDQyxZQUFZLENBQUNILElBQUksRUFBRSxTQUFTLEVBQUU7VUFDNUMsYUFBYSxFQUFFQztRQUNqQixDQUFDLENBQUM7TUFDSjtJQUNGO0lBQ0EsSUFBSUcsR0FBRyxHQUFHTixLQUFLLENBQUNJLFNBQVMsQ0FBQ0csTUFBTSxDQUFDRCxHQUFHO0lBQ3BDLElBQUlFLGVBQWUsR0FBRztNQUNwQkMsT0FBTyxFQUFFLFVBQVU7TUFDbkJDLE1BQU0sRUFBRSxJQUFJO01BQ1pDLEtBQUssRUFBRSxTQUFTO01BQ2hCQyxNQUFNLEVBQUU7UUFDTk4sR0FBRyxFQUFFQTtNQUNQO0lBQ0YsQ0FBQztJQUNELElBQUlPLGNBQWMsR0FBRztNQUNuQkosT0FBTyxFQUFFLE9BQU87TUFDaEJDLE1BQU0sRUFBRSxJQUFJO01BQ1pDLEtBQUssRUFBRSxTQUFTO01BQ2hCQyxNQUFNLEVBQUU7UUFDTk4sR0FBRyxFQUFFQTtNQUNQO0lBQ0YsQ0FBQztJQUNETCxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUVPLGVBQWUsQ0FBQztJQUMzQ1AsZ0JBQWdCLENBQUMsUUFBUSxFQUFFTyxlQUFlLENBQUM7SUFDM0NQLGdCQUFnQixDQUFDLE9BQU8sRUFBRVksY0FBYyxDQUFDO0VBQzNDLENBQUMsRUFBRWIsS0FBSyxDQUFDO0FBQ1giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFx4bWwtZG9jLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IHhtbERvY1xueG1sRG9jLmRpc3BsYXlOYW1lID0gJ3htbERvYydcbnhtbERvYy5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIHhtbERvYyhQcmlzbSkge1xuICA7KGZ1bmN0aW9uIChQcmlzbSkge1xuICAgIC8qKlxuICAgICAqIElmIHRoZSBnaXZlbiBsYW5ndWFnZSBpcyBwcmVzZW50LCBpdCB3aWxsIGluc2VydCB0aGUgZ2l2ZW4gZG9jIGNvbW1lbnQgZ3JhbW1hciB0b2tlbiBpbnRvIGl0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGxhbmdcbiAgICAgKiBAcGFyYW0ge2FueX0gZG9jQ29tbWVudFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluc2VydERvY0NvbW1lbnQobGFuZywgZG9jQ29tbWVudCkge1xuICAgICAgaWYgKFByaXNtLmxhbmd1YWdlc1tsYW5nXSkge1xuICAgICAgICBQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKGxhbmcsICdjb21tZW50Jywge1xuICAgICAgICAgICdkb2MtY29tbWVudCc6IGRvY0NvbW1lbnRcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIHRhZyA9IFByaXNtLmxhbmd1YWdlcy5tYXJrdXAudGFnXG4gICAgdmFyIHNsYXNoRG9jQ29tbWVudCA9IHtcbiAgICAgIHBhdHRlcm46IC9cXC9cXC9cXC8uKi8sXG4gICAgICBncmVlZHk6IHRydWUsXG4gICAgICBhbGlhczogJ2NvbW1lbnQnLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgIHRhZzogdGFnXG4gICAgICB9XG4gICAgfVxuICAgIHZhciB0aWNrRG9jQ29tbWVudCA9IHtcbiAgICAgIHBhdHRlcm46IC8nJycuKi8sXG4gICAgICBncmVlZHk6IHRydWUsXG4gICAgICBhbGlhczogJ2NvbW1lbnQnLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgIHRhZzogdGFnXG4gICAgICB9XG4gICAgfVxuICAgIGluc2VydERvY0NvbW1lbnQoJ2NzaGFycCcsIHNsYXNoRG9jQ29tbWVudClcbiAgICBpbnNlcnREb2NDb21tZW50KCdmc2hhcnAnLCBzbGFzaERvY0NvbW1lbnQpXG4gICAgaW5zZXJ0RG9jQ29tbWVudCgndmJuZXQnLCB0aWNrRG9jQ29tbWVudClcbiAgfSkoUHJpc20pXG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInhtbERvYyIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwiaW5zZXJ0RG9jQ29tbWVudCIsImxhbmciLCJkb2NDb21tZW50IiwibGFuZ3VhZ2VzIiwiaW5zZXJ0QmVmb3JlIiwidGFnIiwibWFya3VwIiwic2xhc2hEb2NDb21tZW50IiwicGF0dGVybiIsImdyZWVkeSIsImFsaWFzIiwiaW5zaWRlIiwidGlja0RvY0NvbW1lbnQiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/xml-doc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/xojo.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/xojo.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = xojo;\nxojo.displayName = 'xojo';\nxojo.aliases = [];\nfunction xojo(Prism) {\n  Prism.languages.xojo = {\n    comment: {\n      pattern: /(?:'|\\/\\/|Rem\\b).+/i,\n      greedy: true\n    },\n    string: {\n      pattern: /\"(?:\"\"|[^\"])*\"/,\n      greedy: true\n    },\n    number: [/(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:E[+-]?\\d+)?/i, /&[bchou][a-z\\d]+/i],\n    directive: {\n      pattern: /#(?:Else|ElseIf|Endif|If|Pragma)\\b/i,\n      alias: 'property'\n    },\n    keyword: /\\b(?:AddHandler|App|Array|As(?:signs)?|Auto|Boolean|Break|By(?:Ref|Val)|Byte|Call|Case|Catch|CFStringRef|CGFloat|Class|Color|Const|Continue|CString|Currency|CurrentMethodName|Declare|Delegate|Dim|Do(?:uble|wnTo)?|Each|Else(?:If)?|End|Enumeration|Event|Exception|Exit|Extends|False|Finally|For|Function|Get|GetTypeInfo|Global|GOTO|If|Implements|In|Inherits|Int(?:8|16|32|64|eger|erface)?|Lib|Loop|Me|Module|Next|Nil|Object|Optional|OSType|ParamArray|Private|Property|Protected|PString|Ptr|Raise(?:Event)?|ReDim|RemoveHandler|Return|Select(?:or)?|Self|Set|Shared|Short|Single|Soft|Static|Step|String|Sub|Super|Text|Then|To|True|Try|Ubound|UInt(?:8|16|32|64|eger)?|Until|Using|Var(?:iant)?|Wend|While|WindowPtr|WString)\\b/i,\n    operator: /<[=>]?|>=?|[+\\-*\\/\\\\^=]|\\b(?:AddressOf|And|Ctype|IsA?|Mod|New|Not|Or|WeakAddressOf|Xor)\\b/i,\n    punctuation: /[.,;:()]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcveG9qby5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLElBQUk7QUFDckJBLElBQUksQ0FBQ0MsV0FBVyxHQUFHLE1BQU07QUFDekJELElBQUksQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDakIsU0FBU0YsSUFBSUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ25CQSxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osSUFBSSxHQUFHO0lBQ3JCSyxPQUFPLEVBQUU7TUFDUEMsT0FBTyxFQUFFLHFCQUFxQjtNQUM5QkMsTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUNEQyxNQUFNLEVBQUU7TUFDTkYsT0FBTyxFQUFFLGdCQUFnQjtNQUN6QkMsTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUNERSxNQUFNLEVBQUUsQ0FBQyw0Q0FBNEMsRUFBRSxtQkFBbUIsQ0FBQztJQUMzRUMsU0FBUyxFQUFFO01BQ1RKLE9BQU8sRUFBRSxxQ0FBcUM7TUFDOUNLLEtBQUssRUFBRTtJQUNULENBQUM7SUFDREMsT0FBTyxFQUNMLGl0QkFBaXRCO0lBQ250QkMsUUFBUSxFQUNOLDRGQUE0RjtJQUM5RkMsV0FBVyxFQUFFO0VBQ2YsQ0FBQztBQUNIIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xceG9qby5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSB4b2pvXG54b2pvLmRpc3BsYXlOYW1lID0gJ3hvam8nXG54b2pvLmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24geG9qbyhQcmlzbSkge1xuICBQcmlzbS5sYW5ndWFnZXMueG9qbyA9IHtcbiAgICBjb21tZW50OiB7XG4gICAgICBwYXR0ZXJuOiAvKD86J3xcXC9cXC98UmVtXFxiKS4rL2ksXG4gICAgICBncmVlZHk6IHRydWVcbiAgICB9LFxuICAgIHN0cmluZzoge1xuICAgICAgcGF0dGVybjogL1wiKD86XCJcInxbXlwiXSkqXCIvLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICBudW1iZXI6IFsvKD86XFxiXFxkKyg/OlxcLlxcZCopP3xcXEJcXC5cXGQrKSg/OkVbKy1dP1xcZCspPy9pLCAvJltiY2hvdV1bYS16XFxkXSsvaV0sXG4gICAgZGlyZWN0aXZlOiB7XG4gICAgICBwYXR0ZXJuOiAvIyg/OkVsc2V8RWxzZUlmfEVuZGlmfElmfFByYWdtYSlcXGIvaSxcbiAgICAgIGFsaWFzOiAncHJvcGVydHknXG4gICAgfSxcbiAgICBrZXl3b3JkOlxuICAgICAgL1xcYig/OkFkZEhhbmRsZXJ8QXBwfEFycmF5fEFzKD86c2lnbnMpP3xBdXRvfEJvb2xlYW58QnJlYWt8QnkoPzpSZWZ8VmFsKXxCeXRlfENhbGx8Q2FzZXxDYXRjaHxDRlN0cmluZ1JlZnxDR0Zsb2F0fENsYXNzfENvbG9yfENvbnN0fENvbnRpbnVlfENTdHJpbmd8Q3VycmVuY3l8Q3VycmVudE1ldGhvZE5hbWV8RGVjbGFyZXxEZWxlZ2F0ZXxEaW18RG8oPzp1YmxlfHduVG8pP3xFYWNofEVsc2UoPzpJZik/fEVuZHxFbnVtZXJhdGlvbnxFdmVudHxFeGNlcHRpb258RXhpdHxFeHRlbmRzfEZhbHNlfEZpbmFsbHl8Rm9yfEZ1bmN0aW9ufEdldHxHZXRUeXBlSW5mb3xHbG9iYWx8R09UT3xJZnxJbXBsZW1lbnRzfElufEluaGVyaXRzfEludCg/Ojh8MTZ8MzJ8NjR8ZWdlcnxlcmZhY2UpP3xMaWJ8TG9vcHxNZXxNb2R1bGV8TmV4dHxOaWx8T2JqZWN0fE9wdGlvbmFsfE9TVHlwZXxQYXJhbUFycmF5fFByaXZhdGV8UHJvcGVydHl8UHJvdGVjdGVkfFBTdHJpbmd8UHRyfFJhaXNlKD86RXZlbnQpP3xSZURpbXxSZW1vdmVIYW5kbGVyfFJldHVybnxTZWxlY3QoPzpvcik/fFNlbGZ8U2V0fFNoYXJlZHxTaG9ydHxTaW5nbGV8U29mdHxTdGF0aWN8U3RlcHxTdHJpbmd8U3VifFN1cGVyfFRleHR8VGhlbnxUb3xUcnVlfFRyeXxVYm91bmR8VUludCg/Ojh8MTZ8MzJ8NjR8ZWdlcik/fFVudGlsfFVzaW5nfFZhcig/OmlhbnQpP3xXZW5kfFdoaWxlfFdpbmRvd1B0cnxXU3RyaW5nKVxcYi9pLFxuICAgIG9wZXJhdG9yOlxuICAgICAgLzxbPT5dP3w+PT98WytcXC0qXFwvXFxcXF49XXxcXGIoPzpBZGRyZXNzT2Z8QW5kfEN0eXBlfElzQT98TW9kfE5ld3xOb3R8T3J8V2Vha0FkZHJlc3NPZnxYb3IpXFxiL2ksXG4gICAgcHVuY3R1YXRpb246IC9bLiw7OigpXS9cbiAgfVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJ4b2pvIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJjb21tZW50IiwicGF0dGVybiIsImdyZWVkeSIsInN0cmluZyIsIm51bWJlciIsImRpcmVjdGl2ZSIsImFsaWFzIiwia2V5d29yZCIsIm9wZXJhdG9yIiwicHVuY3R1YXRpb24iXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/xojo.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/xquery.js":
/*!***********************************************!*\
  !*** ./node_modules/refractor/lang/xquery.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = xquery;\nxquery.displayName = 'xquery';\nxquery.aliases = [];\nfunction xquery(Prism) {\n  ;\n  (function (Prism) {\n    Prism.languages.xquery = Prism.languages.extend('markup', {\n      'xquery-comment': {\n        pattern: /\\(:[\\s\\S]*?:\\)/,\n        greedy: true,\n        alias: 'comment'\n      },\n      string: {\n        pattern: /([\"'])(?:\\1\\1|(?!\\1)[\\s\\S])*\\1/,\n        greedy: true\n      },\n      extension: {\n        pattern: /\\(#.+?#\\)/,\n        alias: 'symbol'\n      },\n      variable: /\\$[-\\w:]+/,\n      axis: {\n        pattern: /(^|[^-])(?:ancestor(?:-or-self)?|attribute|child|descendant(?:-or-self)?|following(?:-sibling)?|parent|preceding(?:-sibling)?|self)(?=::)/,\n        lookbehind: true,\n        alias: 'operator'\n      },\n      'keyword-operator': {\n        pattern: /(^|[^:-])\\b(?:and|castable as|div|eq|except|ge|gt|idiv|instance of|intersect|is|le|lt|mod|ne|or|union)\\b(?=$|[^:-])/,\n        lookbehind: true,\n        alias: 'operator'\n      },\n      keyword: {\n        pattern: /(^|[^:-])\\b(?:as|ascending|at|base-uri|boundary-space|case|cast as|collation|construction|copy-namespaces|declare|default|descending|else|empty (?:greatest|least)|encoding|every|external|for|function|if|import|in|inherit|lax|let|map|module|namespace|no-inherit|no-preserve|option|order(?: by|ed|ing)?|preserve|return|satisfies|schema|some|stable|strict|strip|then|to|treat as|typeswitch|unordered|validate|variable|version|where|xquery)\\b(?=$|[^:-])/,\n        lookbehind: true\n      },\n      \"function\": /[\\w-]+(?::[\\w-]+)*(?=\\s*\\()/,\n      'xquery-element': {\n        pattern: /(element\\s+)[\\w-]+(?::[\\w-]+)*/,\n        lookbehind: true,\n        alias: 'tag'\n      },\n      'xquery-attribute': {\n        pattern: /(attribute\\s+)[\\w-]+(?::[\\w-]+)*/,\n        lookbehind: true,\n        alias: 'attr-name'\n      },\n      builtin: {\n        pattern: /(^|[^:-])\\b(?:attribute|comment|document|element|processing-instruction|text|xs:(?:ENTITIES|ENTITY|ID|IDREFS?|NCName|NMTOKENS?|NOTATION|Name|QName|anyAtomicType|anyType|anyURI|base64Binary|boolean|byte|date|dateTime|dayTimeDuration|decimal|double|duration|float|gDay|gMonth|gMonthDay|gYear|gYearMonth|hexBinary|int|integer|language|long|negativeInteger|nonNegativeInteger|nonPositiveInteger|normalizedString|positiveInteger|short|string|time|token|unsigned(?:Byte|Int|Long|Short)|untyped(?:Atomic)?|yearMonthDuration))\\b(?=$|[^:-])/,\n        lookbehind: true\n      },\n      number: /\\b\\d+(?:\\.\\d+)?(?:E[+-]?\\d+)?/,\n      operator: [/[+*=?|@]|\\.\\.?|:=|!=|<[=<]?|>[=>]?/, {\n        pattern: /(\\s)-(?=\\s)/,\n        lookbehind: true\n      }],\n      punctuation: /[[\\](){},;:/]/\n    });\n    Prism.languages.xquery.tag.pattern = /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|\\{(?!\\{)(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])+\\}|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/;\n    Prism.languages.xquery['tag'].inside['attr-value'].pattern = /=(?:(\"|')(?:\\\\[\\s\\S]|\\{(?!\\{)(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])+\\}|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+)/;\n    Prism.languages.xquery['tag'].inside['attr-value'].inside['punctuation'] = /^=\"|\"$/;\n    Prism.languages.xquery['tag'].inside['attr-value'].inside['expression'] = {\n      // Allow for two levels of nesting\n      pattern: /\\{(?!\\{)(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])+\\}/,\n      inside: Prism.languages.xquery,\n      alias: 'language-xquery'\n    }; // The following will handle plain text inside tags\n    var _stringifyToken = function stringifyToken(token) {\n      if (typeof token === 'string') {\n        return token;\n      }\n      if (typeof token.content === 'string') {\n        return token.content;\n      }\n      return token.content.map(_stringifyToken).join('');\n    };\n    var _walkTokens = function walkTokens(tokens) {\n      var openedTags = [];\n      for (var i = 0; i < tokens.length; i++) {\n        var token = tokens[i];\n        var notTagNorBrace = false;\n        if (typeof token !== 'string') {\n          if (token.type === 'tag' && token.content[0] && token.content[0].type === 'tag') {\n            // We found a tag, now find its kind\n            if (token.content[0].content[0].content === '</') {\n              // Closing tag\n              if (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === _stringifyToken(token.content[0].content[1])) {\n                // Pop matching opening tag\n                openedTags.pop();\n              }\n            } else {\n              if (token.content[token.content.length - 1].content === '/>') {\n                // Autoclosed tag, ignore\n              } else {\n                // Opening tag\n                openedTags.push({\n                  tagName: _stringifyToken(token.content[0].content[1]),\n                  openedBraces: 0\n                });\n              }\n            }\n          } else if (openedTags.length > 0 && token.type === 'punctuation' && token.content === '{' && (\n          // Ignore `{{`\n          !tokens[i + 1] || tokens[i + 1].type !== 'punctuation' || tokens[i + 1].content !== '{') && (!tokens[i - 1] || tokens[i - 1].type !== 'plain-text' || tokens[i - 1].content !== '{')) {\n            // Here we might have entered an XQuery expression inside a tag\n            openedTags[openedTags.length - 1].openedBraces++;\n          } else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === 'punctuation' && token.content === '}') {\n            // Here we might have left an XQuery expression inside a tag\n            openedTags[openedTags.length - 1].openedBraces--;\n          } else if (token.type !== 'comment') {\n            notTagNorBrace = true;\n          }\n        }\n        if (notTagNorBrace || typeof token === 'string') {\n          if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {\n            // Here we are inside a tag, and not inside an XQuery expression.\n            // That's plain text: drop any tokens matched.\n            var plainText = _stringifyToken(token); // And merge text with adjacent text\n            if (i < tokens.length - 1 && (typeof tokens[i + 1] === 'string' || tokens[i + 1].type === 'plain-text')) {\n              plainText += _stringifyToken(tokens[i + 1]);\n              tokens.splice(i + 1, 1);\n            }\n            if (i > 0 && (typeof tokens[i - 1] === 'string' || tokens[i - 1].type === 'plain-text')) {\n              plainText = _stringifyToken(tokens[i - 1]) + plainText;\n              tokens.splice(i - 1, 1);\n              i--;\n            }\n            if (/^\\s+$/.test(plainText)) {\n              tokens[i] = plainText;\n            } else {\n              tokens[i] = new Prism.Token('plain-text', plainText, null, plainText);\n            }\n          }\n        }\n        if (token.content && typeof token.content !== 'string') {\n          _walkTokens(token.content);\n        }\n      }\n    };\n    Prism.hooks.add('after-tokenize', function (env) {\n      if (env.language !== 'xquery') {\n        return;\n      }\n      _walkTokens(env.tokens);\n    });\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcveHF1ZXJ5LmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsTUFBTTtBQUN2QkEsTUFBTSxDQUFDQyxXQUFXLEdBQUcsUUFBUTtBQUM3QkQsTUFBTSxDQUFDRSxPQUFPLEdBQUcsRUFBRTtBQUNuQixTQUFTRixNQUFNQSxDQUFDRyxLQUFLLEVBQUU7RUFDckI7RUFBQyxDQUFDLFVBQVVBLEtBQUssRUFBRTtJQUNqQkEsS0FBSyxDQUFDQyxTQUFTLENBQUNKLE1BQU0sR0FBR0csS0FBSyxDQUFDQyxTQUFTLENBQUNDLE1BQU0sQ0FBQyxRQUFRLEVBQUU7TUFDeEQsZ0JBQWdCLEVBQUU7UUFDaEJDLE9BQU8sRUFBRSxnQkFBZ0I7UUFDekJDLE1BQU0sRUFBRSxJQUFJO1FBQ1pDLEtBQUssRUFBRTtNQUNULENBQUM7TUFDREMsTUFBTSxFQUFFO1FBQ05ILE9BQU8sRUFBRSxnQ0FBZ0M7UUFDekNDLE1BQU0sRUFBRTtNQUNWLENBQUM7TUFDREcsU0FBUyxFQUFFO1FBQ1RKLE9BQU8sRUFBRSxXQUFXO1FBQ3BCRSxLQUFLLEVBQUU7TUFDVCxDQUFDO01BQ0RHLFFBQVEsRUFBRSxXQUFXO01BQ3JCQyxJQUFJLEVBQUU7UUFDSk4sT0FBTyxFQUNMLDJJQUEySTtRQUM3SU8sVUFBVSxFQUFFLElBQUk7UUFDaEJMLEtBQUssRUFBRTtNQUNULENBQUM7TUFDRCxrQkFBa0IsRUFBRTtRQUNsQkYsT0FBTyxFQUNMLHFIQUFxSDtRQUN2SE8sVUFBVSxFQUFFLElBQUk7UUFDaEJMLEtBQUssRUFBRTtNQUNULENBQUM7TUFDRE0sT0FBTyxFQUFFO1FBQ1BSLE9BQU8sRUFDTCxtY0FBbWM7UUFDcmNPLFVBQVUsRUFBRTtNQUNkLENBQUM7TUFDRCxZQUFVLDZCQUE2QjtNQUN2QyxnQkFBZ0IsRUFBRTtRQUNoQlAsT0FBTyxFQUFFLGdDQUFnQztRQUN6Q08sVUFBVSxFQUFFLElBQUk7UUFDaEJMLEtBQUssRUFBRTtNQUNULENBQUM7TUFDRCxrQkFBa0IsRUFBRTtRQUNsQkYsT0FBTyxFQUFFLGtDQUFrQztRQUMzQ08sVUFBVSxFQUFFLElBQUk7UUFDaEJMLEtBQUssRUFBRTtNQUNULENBQUM7TUFDRE8sT0FBTyxFQUFFO1FBQ1BULE9BQU8sRUFDTCxxaEJBQXFoQjtRQUN2aEJPLFVBQVUsRUFBRTtNQUNkLENBQUM7TUFDREcsTUFBTSxFQUFFLCtCQUErQjtNQUN2Q0MsUUFBUSxFQUFFLENBQ1Isb0NBQW9DLEVBQ3BDO1FBQ0VYLE9BQU8sRUFBRSxhQUFhO1FBQ3RCTyxVQUFVLEVBQUU7TUFDZCxDQUFDLENBQ0Y7TUFDREssV0FBVyxFQUFFO0lBQ2YsQ0FBQyxDQUFDO0lBQ0ZmLEtBQUssQ0FBQ0MsU0FBUyxDQUFDSixNQUFNLENBQUNtQixHQUFHLENBQUNiLE9BQU8sR0FDaEMsc0pBQXNKO0lBQ3hKSCxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDb0IsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDZCxPQUFPLEdBQ3hELGlHQUFpRztJQUNuR0gsS0FBSyxDQUFDQyxTQUFTLENBQUNKLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQ29CLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQ0EsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUN0RSxRQUFRO0lBQ1ZqQixLQUFLLENBQUNDLFNBQVMsQ0FBQ0osTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDb0IsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDQSxNQUFNLENBQUMsWUFBWSxDQUFDLEdBQUc7TUFDeEU7TUFDQWQsT0FBTyxFQUFFLGdEQUFnRDtNQUN6RGMsTUFBTSxFQUFFakIsS0FBSyxDQUFDQyxTQUFTLENBQUNKLE1BQU07TUFDOUJRLEtBQUssRUFBRTtJQUNULENBQUMsRUFBQztJQUNGLElBQUlhLGVBQWMsR0FBRyxTQUFqQkEsY0FBY0EsQ0FBYUMsS0FBSyxFQUFFO01BQ3BDLElBQUksT0FBT0EsS0FBSyxLQUFLLFFBQVEsRUFBRTtRQUM3QixPQUFPQSxLQUFLO01BQ2Q7TUFDQSxJQUFJLE9BQU9BLEtBQUssQ0FBQ0MsT0FBTyxLQUFLLFFBQVEsRUFBRTtRQUNyQyxPQUFPRCxLQUFLLENBQUNDLE9BQU87TUFDdEI7TUFDQSxPQUFPRCxLQUFLLENBQUNDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDSCxlQUFjLENBQUMsQ0FBQ0ksSUFBSSxDQUFDLEVBQUUsQ0FBQztJQUNuRCxDQUFDO0lBQ0QsSUFBSUMsV0FBVSxHQUFHLFNBQWJBLFVBQVVBLENBQWFDLE1BQU0sRUFBRTtNQUNqQyxJQUFJQyxVQUFVLEdBQUcsRUFBRTtNQUNuQixLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR0YsTUFBTSxDQUFDRyxNQUFNLEVBQUVELENBQUMsRUFBRSxFQUFFO1FBQ3RDLElBQUlQLEtBQUssR0FBR0ssTUFBTSxDQUFDRSxDQUFDLENBQUM7UUFDckIsSUFBSUUsY0FBYyxHQUFHLEtBQUs7UUFDMUIsSUFBSSxPQUFPVCxLQUFLLEtBQUssUUFBUSxFQUFFO1VBQzdCLElBQ0VBLEtBQUssQ0FBQ1UsSUFBSSxLQUFLLEtBQUssSUFDcEJWLEtBQUssQ0FBQ0MsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUNoQkQsS0FBSyxDQUFDQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUNTLElBQUksS0FBSyxLQUFLLEVBQy9CO1lBQ0E7WUFDQSxJQUFJVixLQUFLLENBQUNDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQ0EsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDQSxPQUFPLEtBQUssSUFBSSxFQUFFO2NBQ2hEO2NBQ0EsSUFDRUssVUFBVSxDQUFDRSxNQUFNLEdBQUcsQ0FBQyxJQUNyQkYsVUFBVSxDQUFDQSxVQUFVLENBQUNFLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQ0csT0FBTyxLQUN2Q1osZUFBYyxDQUFDQyxLQUFLLENBQUNDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQ0EsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQzdDO2dCQUNBO2dCQUNBSyxVQUFVLENBQUNNLEdBQUcsQ0FBQyxDQUFDO2NBQ2xCO1lBQ0YsQ0FBQyxNQUFNO2NBQ0wsSUFBSVosS0FBSyxDQUFDQyxPQUFPLENBQUNELEtBQUssQ0FBQ0MsT0FBTyxDQUFDTyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUNQLE9BQU8sS0FBSyxJQUFJLEVBQUU7Z0JBQzVEO2NBQUEsQ0FDRCxNQUFNO2dCQUNMO2dCQUNBSyxVQUFVLENBQUNPLElBQUksQ0FBQztrQkFDZEYsT0FBTyxFQUFFWixlQUFjLENBQUNDLEtBQUssQ0FBQ0MsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDQSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7a0JBQ3BEYSxZQUFZLEVBQUU7Z0JBQ2hCLENBQUMsQ0FBQztjQUNKO1lBQ0Y7VUFDRixDQUFDLE1BQU0sSUFDTFIsVUFBVSxDQUFDRSxNQUFNLEdBQUcsQ0FBQyxJQUNyQlIsS0FBSyxDQUFDVSxJQUFJLEtBQUssYUFBYSxJQUM1QlYsS0FBSyxDQUFDQyxPQUFPLEtBQUssR0FBRztVQUFJO1VBQ3hCLENBQUNJLE1BQU0sQ0FBQ0UsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUNiRixNQUFNLENBQUNFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQ0csSUFBSSxLQUFLLGFBQWEsSUFDcENMLE1BQU0sQ0FBQ0UsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDTixPQUFPLEtBQUssR0FBRyxDQUFDLEtBQy9CLENBQUNJLE1BQU0sQ0FBQ0UsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUNiRixNQUFNLENBQUNFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQ0csSUFBSSxLQUFLLFlBQVksSUFDbkNMLE1BQU0sQ0FBQ0UsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDTixPQUFPLEtBQUssR0FBRyxDQUFDLEVBQ2hDO1lBQ0E7WUFDQUssVUFBVSxDQUFDQSxVQUFVLENBQUNFLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQ00sWUFBWSxFQUFFO1VBQ2xELENBQUMsTUFBTSxJQUNMUixVQUFVLENBQUNFLE1BQU0sR0FBRyxDQUFDLElBQ3JCRixVQUFVLENBQUNBLFVBQVUsQ0FBQ0UsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDTSxZQUFZLEdBQUcsQ0FBQyxJQUNsRGQsS0FBSyxDQUFDVSxJQUFJLEtBQUssYUFBYSxJQUM1QlYsS0FBSyxDQUFDQyxPQUFPLEtBQUssR0FBRyxFQUNyQjtZQUNBO1lBQ0FLLFVBQVUsQ0FBQ0EsVUFBVSxDQUFDRSxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUNNLFlBQVksRUFBRTtVQUNsRCxDQUFDLE1BQU0sSUFBSWQsS0FBSyxDQUFDVSxJQUFJLEtBQUssU0FBUyxFQUFFO1lBQ25DRCxjQUFjLEdBQUcsSUFBSTtVQUN2QjtRQUNGO1FBQ0EsSUFBSUEsY0FBYyxJQUFJLE9BQU9ULEtBQUssS0FBSyxRQUFRLEVBQUU7VUFDL0MsSUFDRU0sVUFBVSxDQUFDRSxNQUFNLEdBQUcsQ0FBQyxJQUNyQkYsVUFBVSxDQUFDQSxVQUFVLENBQUNFLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQ00sWUFBWSxLQUFLLENBQUMsRUFDcEQ7WUFDQTtZQUNBO1lBQ0EsSUFBSUMsU0FBUyxHQUFHaEIsZUFBYyxDQUFDQyxLQUFLLENBQUMsRUFBQztZQUN0QyxJQUNFTyxDQUFDLEdBQUdGLE1BQU0sQ0FBQ0csTUFBTSxHQUFHLENBQUMsS0FDcEIsT0FBT0gsTUFBTSxDQUFDRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssUUFBUSxJQUNoQ0YsTUFBTSxDQUFDRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUNHLElBQUksS0FBSyxZQUFZLENBQUMsRUFDdEM7Y0FDQUssU0FBUyxJQUFJaEIsZUFBYyxDQUFDTSxNQUFNLENBQUNFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztjQUMxQ0YsTUFBTSxDQUFDVyxNQUFNLENBQUNULENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3pCO1lBQ0EsSUFDRUEsQ0FBQyxHQUFHLENBQUMsS0FDSixPQUFPRixNQUFNLENBQUNFLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxRQUFRLElBQ2hDRixNQUFNLENBQUNFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQ0csSUFBSSxLQUFLLFlBQVksQ0FBQyxFQUN0QztjQUNBSyxTQUFTLEdBQUdoQixlQUFjLENBQUNNLE1BQU0sQ0FBQ0UsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUdRLFNBQVM7Y0FDckRWLE1BQU0sQ0FBQ1csTUFBTSxDQUFDVCxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztjQUN2QkEsQ0FBQyxFQUFFO1lBQ0w7WUFDQSxJQUFJLE9BQU8sQ0FBQ1UsSUFBSSxDQUFDRixTQUFTLENBQUMsRUFBRTtjQUMzQlYsTUFBTSxDQUFDRSxDQUFDLENBQUMsR0FBR1EsU0FBUztZQUN2QixDQUFDLE1BQU07Y0FDTFYsTUFBTSxDQUFDRSxDQUFDLENBQUMsR0FBRyxJQUFJMUIsS0FBSyxDQUFDcUMsS0FBSyxDQUN6QixZQUFZLEVBQ1pILFNBQVMsRUFDVCxJQUFJLEVBQ0pBLFNBQ0YsQ0FBQztZQUNIO1VBQ0Y7UUFDRjtRQUNBLElBQUlmLEtBQUssQ0FBQ0MsT0FBTyxJQUFJLE9BQU9ELEtBQUssQ0FBQ0MsT0FBTyxLQUFLLFFBQVEsRUFBRTtVQUN0REcsV0FBVSxDQUFDSixLQUFLLENBQUNDLE9BQU8sQ0FBQztRQUMzQjtNQUNGO0lBQ0YsQ0FBQztJQUNEcEIsS0FBSyxDQUFDc0MsS0FBSyxDQUFDQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsVUFBVUMsR0FBRyxFQUFFO01BQy9DLElBQUlBLEdBQUcsQ0FBQ0MsUUFBUSxLQUFLLFFBQVEsRUFBRTtRQUM3QjtNQUNGO01BQ0FsQixXQUFVLENBQUNpQixHQUFHLENBQUNoQixNQUFNLENBQUM7SUFDeEIsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxFQUFFeEIsS0FBSyxDQUFDO0FBQ1giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xccmVmcmFjdG9yXFxsYW5nXFx4cXVlcnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0geHF1ZXJ5XG54cXVlcnkuZGlzcGxheU5hbWUgPSAneHF1ZXJ5J1xueHF1ZXJ5LmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24geHF1ZXJ5KFByaXNtKSB7XG4gIDsoZnVuY3Rpb24gKFByaXNtKSB7XG4gICAgUHJpc20ubGFuZ3VhZ2VzLnhxdWVyeSA9IFByaXNtLmxhbmd1YWdlcy5leHRlbmQoJ21hcmt1cCcsIHtcbiAgICAgICd4cXVlcnktY29tbWVudCc6IHtcbiAgICAgICAgcGF0dGVybjogL1xcKDpbXFxzXFxTXSo/OlxcKS8sXG4gICAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgICAgYWxpYXM6ICdjb21tZW50J1xuICAgICAgfSxcbiAgICAgIHN0cmluZzoge1xuICAgICAgICBwYXR0ZXJuOiAvKFtcIiddKSg/OlxcMVxcMXwoPyFcXDEpW1xcc1xcU10pKlxcMS8sXG4gICAgICAgIGdyZWVkeTogdHJ1ZVxuICAgICAgfSxcbiAgICAgIGV4dGVuc2lvbjoge1xuICAgICAgICBwYXR0ZXJuOiAvXFwoIy4rPyNcXCkvLFxuICAgICAgICBhbGlhczogJ3N5bWJvbCdcbiAgICAgIH0sXG4gICAgICB2YXJpYWJsZTogL1xcJFstXFx3Ol0rLyxcbiAgICAgIGF4aXM6IHtcbiAgICAgICAgcGF0dGVybjpcbiAgICAgICAgICAvKF58W14tXSkoPzphbmNlc3Rvcig/Oi1vci1zZWxmKT98YXR0cmlidXRlfGNoaWxkfGRlc2NlbmRhbnQoPzotb3Itc2VsZik/fGZvbGxvd2luZyg/Oi1zaWJsaW5nKT98cGFyZW50fHByZWNlZGluZyg/Oi1zaWJsaW5nKT98c2VsZikoPz06OikvLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICBhbGlhczogJ29wZXJhdG9yJ1xuICAgICAgfSxcbiAgICAgICdrZXl3b3JkLW9wZXJhdG9yJzoge1xuICAgICAgICBwYXR0ZXJuOlxuICAgICAgICAgIC8oXnxbXjotXSlcXGIoPzphbmR8Y2FzdGFibGUgYXN8ZGl2fGVxfGV4Y2VwdHxnZXxndHxpZGl2fGluc3RhbmNlIG9mfGludGVyc2VjdHxpc3xsZXxsdHxtb2R8bmV8b3J8dW5pb24pXFxiKD89JHxbXjotXSkvLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICBhbGlhczogJ29wZXJhdG9yJ1xuICAgICAgfSxcbiAgICAgIGtleXdvcmQ6IHtcbiAgICAgICAgcGF0dGVybjpcbiAgICAgICAgICAvKF58W146LV0pXFxiKD86YXN8YXNjZW5kaW5nfGF0fGJhc2UtdXJpfGJvdW5kYXJ5LXNwYWNlfGNhc2V8Y2FzdCBhc3xjb2xsYXRpb258Y29uc3RydWN0aW9ufGNvcHktbmFtZXNwYWNlc3xkZWNsYXJlfGRlZmF1bHR8ZGVzY2VuZGluZ3xlbHNlfGVtcHR5ICg/OmdyZWF0ZXN0fGxlYXN0KXxlbmNvZGluZ3xldmVyeXxleHRlcm5hbHxmb3J8ZnVuY3Rpb258aWZ8aW1wb3J0fGlufGluaGVyaXR8bGF4fGxldHxtYXB8bW9kdWxlfG5hbWVzcGFjZXxuby1pbmhlcml0fG5vLXByZXNlcnZlfG9wdGlvbnxvcmRlcig/OiBieXxlZHxpbmcpP3xwcmVzZXJ2ZXxyZXR1cm58c2F0aXNmaWVzfHNjaGVtYXxzb21lfHN0YWJsZXxzdHJpY3R8c3RyaXB8dGhlbnx0b3x0cmVhdCBhc3x0eXBlc3dpdGNofHVub3JkZXJlZHx2YWxpZGF0ZXx2YXJpYWJsZXx2ZXJzaW9ufHdoZXJlfHhxdWVyeSlcXGIoPz0kfFteOi1dKS8sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH0sXG4gICAgICBmdW5jdGlvbjogL1tcXHctXSsoPzo6W1xcdy1dKykqKD89XFxzKlxcKCkvLFxuICAgICAgJ3hxdWVyeS1lbGVtZW50Jzoge1xuICAgICAgICBwYXR0ZXJuOiAvKGVsZW1lbnRcXHMrKVtcXHctXSsoPzo6W1xcdy1dKykqLyxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgYWxpYXM6ICd0YWcnXG4gICAgICB9LFxuICAgICAgJ3hxdWVyeS1hdHRyaWJ1dGUnOiB7XG4gICAgICAgIHBhdHRlcm46IC8oYXR0cmlidXRlXFxzKylbXFx3LV0rKD86OltcXHctXSspKi8sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGFsaWFzOiAnYXR0ci1uYW1lJ1xuICAgICAgfSxcbiAgICAgIGJ1aWx0aW46IHtcbiAgICAgICAgcGF0dGVybjpcbiAgICAgICAgICAvKF58W146LV0pXFxiKD86YXR0cmlidXRlfGNvbW1lbnR8ZG9jdW1lbnR8ZWxlbWVudHxwcm9jZXNzaW5nLWluc3RydWN0aW9ufHRleHR8eHM6KD86RU5USVRJRVN8RU5USVRZfElEfElEUkVGUz98TkNOYW1lfE5NVE9LRU5TP3xOT1RBVElPTnxOYW1lfFFOYW1lfGFueUF0b21pY1R5cGV8YW55VHlwZXxhbnlVUkl8YmFzZTY0QmluYXJ5fGJvb2xlYW58Ynl0ZXxkYXRlfGRhdGVUaW1lfGRheVRpbWVEdXJhdGlvbnxkZWNpbWFsfGRvdWJsZXxkdXJhdGlvbnxmbG9hdHxnRGF5fGdNb250aHxnTW9udGhEYXl8Z1llYXJ8Z1llYXJNb250aHxoZXhCaW5hcnl8aW50fGludGVnZXJ8bGFuZ3VhZ2V8bG9uZ3xuZWdhdGl2ZUludGVnZXJ8bm9uTmVnYXRpdmVJbnRlZ2VyfG5vblBvc2l0aXZlSW50ZWdlcnxub3JtYWxpemVkU3RyaW5nfHBvc2l0aXZlSW50ZWdlcnxzaG9ydHxzdHJpbmd8dGltZXx0b2tlbnx1bnNpZ25lZCg/OkJ5dGV8SW50fExvbmd8U2hvcnQpfHVudHlwZWQoPzpBdG9taWMpP3x5ZWFyTW9udGhEdXJhdGlvbikpXFxiKD89JHxbXjotXSkvLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICB9LFxuICAgICAgbnVtYmVyOiAvXFxiXFxkKyg/OlxcLlxcZCspPyg/OkVbKy1dP1xcZCspPy8sXG4gICAgICBvcGVyYXRvcjogW1xuICAgICAgICAvWysqPT98QF18XFwuXFwuP3w6PXwhPXw8Wz08XT98Pls9Pl0/LyxcbiAgICAgICAge1xuICAgICAgICAgIHBhdHRlcm46IC8oXFxzKS0oPz1cXHMpLyxcbiAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBwdW5jdHVhdGlvbjogL1tbXFxdKCl7fSw7Oi9dL1xuICAgIH0pXG4gICAgUHJpc20ubGFuZ3VhZ2VzLnhxdWVyeS50YWcucGF0dGVybiA9XG4gICAgICAvPFxcLz8oPyFcXGQpW15cXHM+XFwvPSQ8JV0rKD86XFxzK1teXFxzPlxcLz1dKyg/Oj0oPzooXCJ8JykoPzpcXFxcW1xcc1xcU118XFx7KD8hXFx7KSg/Olxceyg/Olxce1tee31dKlxcfXxbXnt9XSkqXFx9fFtee31dKStcXH18KD8hXFwxKVteXFxcXF0pKlxcMXxbXlxccydcIj49XSspKT8pKlxccypcXC8/Pi9cbiAgICBQcmlzbS5sYW5ndWFnZXMueHF1ZXJ5Wyd0YWcnXS5pbnNpZGVbJ2F0dHItdmFsdWUnXS5wYXR0ZXJuID1cbiAgICAgIC89KD86KFwifCcpKD86XFxcXFtcXHNcXFNdfFxceyg/IVxceykoPzpcXHsoPzpcXHtbXnt9XSpcXH18W157fV0pKlxcfXxbXnt9XSkrXFx9fCg/IVxcMSlbXlxcXFxdKSpcXDF8W15cXHMnXCI+PV0rKS9cbiAgICBQcmlzbS5sYW5ndWFnZXMueHF1ZXJ5Wyd0YWcnXS5pbnNpZGVbJ2F0dHItdmFsdWUnXS5pbnNpZGVbJ3B1bmN0dWF0aW9uJ10gPVxuICAgICAgL149XCJ8XCIkL1xuICAgIFByaXNtLmxhbmd1YWdlcy54cXVlcnlbJ3RhZyddLmluc2lkZVsnYXR0ci12YWx1ZSddLmluc2lkZVsnZXhwcmVzc2lvbiddID0ge1xuICAgICAgLy8gQWxsb3cgZm9yIHR3byBsZXZlbHMgb2YgbmVzdGluZ1xuICAgICAgcGF0dGVybjogL1xceyg/IVxceykoPzpcXHsoPzpcXHtbXnt9XSpcXH18W157fV0pKlxcfXxbXnt9XSkrXFx9LyxcbiAgICAgIGluc2lkZTogUHJpc20ubGFuZ3VhZ2VzLnhxdWVyeSxcbiAgICAgIGFsaWFzOiAnbGFuZ3VhZ2UteHF1ZXJ5J1xuICAgIH0gLy8gVGhlIGZvbGxvd2luZyB3aWxsIGhhbmRsZSBwbGFpbiB0ZXh0IGluc2lkZSB0YWdzXG4gICAgdmFyIHN0cmluZ2lmeVRva2VuID0gZnVuY3Rpb24gKHRva2VuKSB7XG4gICAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdG9rZW5cbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgdG9rZW4uY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHRva2VuLmNvbnRlbnRcbiAgICAgIH1cbiAgICAgIHJldHVybiB0b2tlbi5jb250ZW50Lm1hcChzdHJpbmdpZnlUb2tlbikuam9pbignJylcbiAgICB9XG4gICAgdmFyIHdhbGtUb2tlbnMgPSBmdW5jdGlvbiAodG9rZW5zKSB7XG4gICAgICB2YXIgb3BlbmVkVGFncyA9IFtdXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV1cbiAgICAgICAgdmFyIG5vdFRhZ05vckJyYWNlID0gZmFsc2VcbiAgICAgICAgaWYgKHR5cGVvZiB0b2tlbiAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICB0b2tlbi50eXBlID09PSAndGFnJyAmJlxuICAgICAgICAgICAgdG9rZW4uY29udGVudFswXSAmJlxuICAgICAgICAgICAgdG9rZW4uY29udGVudFswXS50eXBlID09PSAndGFnJ1xuICAgICAgICAgICkge1xuICAgICAgICAgICAgLy8gV2UgZm91bmQgYSB0YWcsIG5vdyBmaW5kIGl0cyBraW5kXG4gICAgICAgICAgICBpZiAodG9rZW4uY29udGVudFswXS5jb250ZW50WzBdLmNvbnRlbnQgPT09ICc8LycpIHtcbiAgICAgICAgICAgICAgLy8gQ2xvc2luZyB0YWdcbiAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIG9wZW5lZFRhZ3MubGVuZ3RoID4gMCAmJlxuICAgICAgICAgICAgICAgIG9wZW5lZFRhZ3Nbb3BlbmVkVGFncy5sZW5ndGggLSAxXS50YWdOYW1lID09PVxuICAgICAgICAgICAgICAgICAgc3RyaW5naWZ5VG9rZW4odG9rZW4uY29udGVudFswXS5jb250ZW50WzFdKVxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAvLyBQb3AgbWF0Y2hpbmcgb3BlbmluZyB0YWdcbiAgICAgICAgICAgICAgICBvcGVuZWRUYWdzLnBvcCgpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmICh0b2tlbi5jb250ZW50W3Rva2VuLmNvbnRlbnQubGVuZ3RoIC0gMV0uY29udGVudCA9PT0gJy8+Jykge1xuICAgICAgICAgICAgICAgIC8vIEF1dG9jbG9zZWQgdGFnLCBpZ25vcmVcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBPcGVuaW5nIHRhZ1xuICAgICAgICAgICAgICAgIG9wZW5lZFRhZ3MucHVzaCh7XG4gICAgICAgICAgICAgICAgICB0YWdOYW1lOiBzdHJpbmdpZnlUb2tlbih0b2tlbi5jb250ZW50WzBdLmNvbnRlbnRbMV0pLFxuICAgICAgICAgICAgICAgICAgb3BlbmVkQnJhY2VzOiAwXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICBvcGVuZWRUYWdzLmxlbmd0aCA+IDAgJiZcbiAgICAgICAgICAgIHRva2VuLnR5cGUgPT09ICdwdW5jdHVhdGlvbicgJiZcbiAgICAgICAgICAgIHRva2VuLmNvbnRlbnQgPT09ICd7JyAmJiAvLyBJZ25vcmUgYHt7YFxuICAgICAgICAgICAgKCF0b2tlbnNbaSArIDFdIHx8XG4gICAgICAgICAgICAgIHRva2Vuc1tpICsgMV0udHlwZSAhPT0gJ3B1bmN0dWF0aW9uJyB8fFxuICAgICAgICAgICAgICB0b2tlbnNbaSArIDFdLmNvbnRlbnQgIT09ICd7JykgJiZcbiAgICAgICAgICAgICghdG9rZW5zW2kgLSAxXSB8fFxuICAgICAgICAgICAgICB0b2tlbnNbaSAtIDFdLnR5cGUgIT09ICdwbGFpbi10ZXh0JyB8fFxuICAgICAgICAgICAgICB0b2tlbnNbaSAtIDFdLmNvbnRlbnQgIT09ICd7JylcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIC8vIEhlcmUgd2UgbWlnaHQgaGF2ZSBlbnRlcmVkIGFuIFhRdWVyeSBleHByZXNzaW9uIGluc2lkZSBhIHRhZ1xuICAgICAgICAgICAgb3BlbmVkVGFnc1tvcGVuZWRUYWdzLmxlbmd0aCAtIDFdLm9wZW5lZEJyYWNlcysrXG4gICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgIG9wZW5lZFRhZ3MubGVuZ3RoID4gMCAmJlxuICAgICAgICAgICAgb3BlbmVkVGFnc1tvcGVuZWRUYWdzLmxlbmd0aCAtIDFdLm9wZW5lZEJyYWNlcyA+IDAgJiZcbiAgICAgICAgICAgIHRva2VuLnR5cGUgPT09ICdwdW5jdHVhdGlvbicgJiZcbiAgICAgICAgICAgIHRva2VuLmNvbnRlbnQgPT09ICd9J1xuICAgICAgICAgICkge1xuICAgICAgICAgICAgLy8gSGVyZSB3ZSBtaWdodCBoYXZlIGxlZnQgYW4gWFF1ZXJ5IGV4cHJlc3Npb24gaW5zaWRlIGEgdGFnXG4gICAgICAgICAgICBvcGVuZWRUYWdzW29wZW5lZFRhZ3MubGVuZ3RoIC0gMV0ub3BlbmVkQnJhY2VzLS1cbiAgICAgICAgICB9IGVsc2UgaWYgKHRva2VuLnR5cGUgIT09ICdjb21tZW50Jykge1xuICAgICAgICAgICAgbm90VGFnTm9yQnJhY2UgPSB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChub3RUYWdOb3JCcmFjZSB8fCB0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgb3BlbmVkVGFncy5sZW5ndGggPiAwICYmXG4gICAgICAgICAgICBvcGVuZWRUYWdzW29wZW5lZFRhZ3MubGVuZ3RoIC0gMV0ub3BlbmVkQnJhY2VzID09PSAwXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICAvLyBIZXJlIHdlIGFyZSBpbnNpZGUgYSB0YWcsIGFuZCBub3QgaW5zaWRlIGFuIFhRdWVyeSBleHByZXNzaW9uLlxuICAgICAgICAgICAgLy8gVGhhdCdzIHBsYWluIHRleHQ6IGRyb3AgYW55IHRva2VucyBtYXRjaGVkLlxuICAgICAgICAgICAgdmFyIHBsYWluVGV4dCA9IHN0cmluZ2lmeVRva2VuKHRva2VuKSAvLyBBbmQgbWVyZ2UgdGV4dCB3aXRoIGFkamFjZW50IHRleHRcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgaSA8IHRva2Vucy5sZW5ndGggLSAxICYmXG4gICAgICAgICAgICAgICh0eXBlb2YgdG9rZW5zW2kgKyAxXSA9PT0gJ3N0cmluZycgfHxcbiAgICAgICAgICAgICAgICB0b2tlbnNbaSArIDFdLnR5cGUgPT09ICdwbGFpbi10ZXh0JylcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBwbGFpblRleHQgKz0gc3RyaW5naWZ5VG9rZW4odG9rZW5zW2kgKyAxXSlcbiAgICAgICAgICAgICAgdG9rZW5zLnNwbGljZShpICsgMSwgMSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgaSA+IDAgJiZcbiAgICAgICAgICAgICAgKHR5cGVvZiB0b2tlbnNbaSAtIDFdID09PSAnc3RyaW5nJyB8fFxuICAgICAgICAgICAgICAgIHRva2Vuc1tpIC0gMV0udHlwZSA9PT0gJ3BsYWluLXRleHQnKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIHBsYWluVGV4dCA9IHN0cmluZ2lmeVRva2VuKHRva2Vuc1tpIC0gMV0pICsgcGxhaW5UZXh0XG4gICAgICAgICAgICAgIHRva2Vucy5zcGxpY2UoaSAtIDEsIDEpXG4gICAgICAgICAgICAgIGktLVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKC9eXFxzKyQvLnRlc3QocGxhaW5UZXh0KSkge1xuICAgICAgICAgICAgICB0b2tlbnNbaV0gPSBwbGFpblRleHRcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRva2Vuc1tpXSA9IG5ldyBQcmlzbS5Ub2tlbihcbiAgICAgICAgICAgICAgICAncGxhaW4tdGV4dCcsXG4gICAgICAgICAgICAgICAgcGxhaW5UZXh0LFxuICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgcGxhaW5UZXh0XG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRva2VuLmNvbnRlbnQgJiYgdHlwZW9mIHRva2VuLmNvbnRlbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgd2Fsa1Rva2Vucyh0b2tlbi5jb250ZW50KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIFByaXNtLmhvb2tzLmFkZCgnYWZ0ZXItdG9rZW5pemUnLCBmdW5jdGlvbiAoZW52KSB7XG4gICAgICBpZiAoZW52Lmxhbmd1YWdlICE9PSAneHF1ZXJ5Jykge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIHdhbGtUb2tlbnMoZW52LnRva2VucylcbiAgICB9KVxuICB9KShQcmlzbSlcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwieHF1ZXJ5IiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJleHRlbmQiLCJwYXR0ZXJuIiwiZ3JlZWR5IiwiYWxpYXMiLCJzdHJpbmciLCJleHRlbnNpb24iLCJ2YXJpYWJsZSIsImF4aXMiLCJsb29rYmVoaW5kIiwia2V5d29yZCIsImJ1aWx0aW4iLCJudW1iZXIiLCJvcGVyYXRvciIsInB1bmN0dWF0aW9uIiwidGFnIiwiaW5zaWRlIiwic3RyaW5naWZ5VG9rZW4iLCJ0b2tlbiIsImNvbnRlbnQiLCJtYXAiLCJqb2luIiwid2Fsa1Rva2VucyIsInRva2VucyIsIm9wZW5lZFRhZ3MiLCJpIiwibGVuZ3RoIiwibm90VGFnTm9yQnJhY2UiLCJ0eXBlIiwidGFnTmFtZSIsInBvcCIsInB1c2giLCJvcGVuZWRCcmFjZXMiLCJwbGFpblRleHQiLCJzcGxpY2UiLCJ0ZXN0IiwiVG9rZW4iLCJob29rcyIsImFkZCIsImVudiIsImxhbmd1YWdlIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/xquery.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/yaml.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/yaml.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = yaml;\nyaml.displayName = 'yaml';\nyaml.aliases = ['yml'];\nfunction yaml(Prism) {\n  ;\n  (function (Prism) {\n    // https://yaml.org/spec/1.2/spec.html#c-ns-anchor-property\n    // https://yaml.org/spec/1.2/spec.html#c-ns-alias-node\n    var anchorOrAlias = /[*&][^\\s[\\]{},]+/; // https://yaml.org/spec/1.2/spec.html#c-ns-tag-property\n    var tag = /!(?:<[\\w\\-%#;/?:@&=+$,.!~*'()[\\]]+>|(?:[a-zA-Z\\d-]*!)?[\\w\\-%#;/?:@&=+$.~*'()]+)?/; // https://yaml.org/spec/1.2/spec.html#c-ns-properties(n,c)\n    var properties = '(?:' + tag.source + '(?:[ \\t]+' + anchorOrAlias.source + ')?|' + anchorOrAlias.source + '(?:[ \\t]+' + tag.source + ')?)'; // https://yaml.org/spec/1.2/spec.html#ns-plain(n,c)\n    // This is a simplified version that doesn't support \"#\" and multiline keys\n    // All these long scarry character classes are simplified versions of YAML's characters\n    var plainKey = /(?:[^\\s\\x00-\\x08\\x0e-\\x1f!\"#%&'*,\\-:>?@[\\]`{|}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]|[?:-]<PLAIN>)(?:[ \\t]*(?:(?![#:])<PLAIN>|:<PLAIN>))*/.source.replace(/<PLAIN>/g, function () {\n      return /[^\\s\\x00-\\x08\\x0e-\\x1f,[\\]{}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]/.source;\n    });\n    var string = /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?:[^'\\\\\\r\\n]|\\\\.)*'/.source;\n    /**\n     *\n     * @param {string} value\n     * @param {string} [flags]\n     * @returns {RegExp}\n     */\n    function createValuePattern(value, flags) {\n      flags = (flags || '').replace(/m/g, '') + 'm'; // add m flag\n      var pattern = /([:\\-,[{]\\s*(?:\\s<<prop>>[ \\t]+)?)(?:<<value>>)(?=[ \\t]*(?:$|,|\\]|\\}|(?:[\\r\\n]\\s*)?#))/.source.replace(/<<prop>>/g, function () {\n        return properties;\n      }).replace(/<<value>>/g, function () {\n        return value;\n      });\n      return RegExp(pattern, flags);\n    }\n    Prism.languages.yaml = {\n      scalar: {\n        pattern: RegExp(/([\\-:]\\s*(?:\\s<<prop>>[ \\t]+)?[|>])[ \\t]*(?:((?:\\r?\\n|\\r)[ \\t]+)\\S[^\\r\\n]*(?:\\2[^\\r\\n]+)*)/.source.replace(/<<prop>>/g, function () {\n          return properties;\n        })),\n        lookbehind: true,\n        alias: 'string'\n      },\n      comment: /#.*/,\n      key: {\n        pattern: RegExp(/((?:^|[:\\-,[{\\r\\n?])[ \\t]*(?:<<prop>>[ \\t]+)?)<<key>>(?=\\s*:\\s)/.source.replace(/<<prop>>/g, function () {\n          return properties;\n        }).replace(/<<key>>/g, function () {\n          return '(?:' + plainKey + '|' + string + ')';\n        })),\n        lookbehind: true,\n        greedy: true,\n        alias: 'atrule'\n      },\n      directive: {\n        pattern: /(^[ \\t]*)%.+/m,\n        lookbehind: true,\n        alias: 'important'\n      },\n      datetime: {\n        pattern: createValuePattern(/\\d{4}-\\d\\d?-\\d\\d?(?:[tT]|[ \\t]+)\\d\\d?:\\d{2}:\\d{2}(?:\\.\\d*)?(?:[ \\t]*(?:Z|[-+]\\d\\d?(?::\\d{2})?))?|\\d{4}-\\d{2}-\\d{2}|\\d\\d?:\\d{2}(?::\\d{2}(?:\\.\\d*)?)?/.source),\n        lookbehind: true,\n        alias: 'number'\n      },\n      \"boolean\": {\n        pattern: createValuePattern(/false|true/.source, 'i'),\n        lookbehind: true,\n        alias: 'important'\n      },\n      \"null\": {\n        pattern: createValuePattern(/null|~/.source, 'i'),\n        lookbehind: true,\n        alias: 'important'\n      },\n      string: {\n        pattern: createValuePattern(string),\n        lookbehind: true,\n        greedy: true\n      },\n      number: {\n        pattern: createValuePattern(/[+-]?(?:0x[\\da-f]+|0o[0-7]+|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?|\\.inf|\\.nan)/.source, 'i'),\n        lookbehind: true\n      },\n      tag: tag,\n      important: anchorOrAlias,\n      punctuation: /---|[:[\\]{}\\-,|>?]|\\.\\.\\./\n    };\n    Prism.languages.yml = Prism.languages.yaml;\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/yaml.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/yang.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/yang.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = yang;\nyang.displayName = 'yang';\nyang.aliases = [];\nfunction yang(Prism) {\n  Prism.languages.yang = {\n    // https://tools.ietf.org/html/rfc6020#page-34\n    // http://www.yang-central.org/twiki/bin/view/Main/YangExamples\n    comment: /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*/,\n    string: {\n      pattern: /\"(?:[^\\\\\"]|\\\\.)*\"|'[^']*'/,\n      greedy: true\n    },\n    keyword: {\n      pattern: /(^|[{};\\r\\n][ \\t]*)[a-z_][\\w.-]*/i,\n      lookbehind: true\n    },\n    namespace: {\n      pattern: /(\\s)[a-z_][\\w.-]*(?=:)/i,\n      lookbehind: true\n    },\n    \"boolean\": /\\b(?:false|true)\\b/,\n    operator: /\\+/,\n    punctuation: /[{};:]/\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcveWFuZy5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLElBQUk7QUFDckJBLElBQUksQ0FBQ0MsV0FBVyxHQUFHLE1BQU07QUFDekJELElBQUksQ0FBQ0UsT0FBTyxHQUFHLEVBQUU7QUFDakIsU0FBU0YsSUFBSUEsQ0FBQ0csS0FBSyxFQUFFO0VBQ25CQSxLQUFLLENBQUNDLFNBQVMsQ0FBQ0osSUFBSSxHQUFHO0lBQ3JCO0lBQ0E7SUFDQUssT0FBTyxFQUFFLHlCQUF5QjtJQUNsQ0MsTUFBTSxFQUFFO01BQ05DLE9BQU8sRUFBRSwyQkFBMkI7TUFDcENDLE1BQU0sRUFBRTtJQUNWLENBQUM7SUFDREMsT0FBTyxFQUFFO01BQ1BGLE9BQU8sRUFBRSxtQ0FBbUM7TUFDNUNHLFVBQVUsRUFBRTtJQUNkLENBQUM7SUFDREMsU0FBUyxFQUFFO01BQ1RKLE9BQU8sRUFBRSx5QkFBeUI7TUFDbENHLFVBQVUsRUFBRTtJQUNkLENBQUM7SUFDRCxXQUFTLG9CQUFvQjtJQUM3QkUsUUFBUSxFQUFFLElBQUk7SUFDZEMsV0FBVyxFQUFFO0VBQ2YsQ0FBQztBQUNIIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXHJlZnJhY3RvclxcbGFuZ1xceWFuZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSB5YW5nXG55YW5nLmRpc3BsYXlOYW1lID0gJ3lhbmcnXG55YW5nLmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24geWFuZyhQcmlzbSkge1xuICBQcmlzbS5sYW5ndWFnZXMueWFuZyA9IHtcbiAgICAvLyBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNjAyMCNwYWdlLTM0XG4gICAgLy8gaHR0cDovL3d3dy55YW5nLWNlbnRyYWwub3JnL3R3aWtpL2Jpbi92aWV3L01haW4vWWFuZ0V4YW1wbGVzXG4gICAgY29tbWVudDogL1xcL1xcKltcXHNcXFNdKj9cXCpcXC98XFwvXFwvLiovLFxuICAgIHN0cmluZzoge1xuICAgICAgcGF0dGVybjogL1wiKD86W15cXFxcXCJdfFxcXFwuKSpcInwnW14nXSonLyxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAga2V5d29yZDoge1xuICAgICAgcGF0dGVybjogLyhefFt7fTtcXHJcXG5dWyBcXHRdKilbYS16X11bXFx3Li1dKi9pLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgIH0sXG4gICAgbmFtZXNwYWNlOiB7XG4gICAgICBwYXR0ZXJuOiAvKFxccylbYS16X11bXFx3Li1dKig/PTopL2ksXG4gICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgfSxcbiAgICBib29sZWFuOiAvXFxiKD86ZmFsc2V8dHJ1ZSlcXGIvLFxuICAgIG9wZXJhdG9yOiAvXFwrLyxcbiAgICBwdW5jdHVhdGlvbjogL1t7fTs6XS9cbiAgfVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJ5YW5nIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJjb21tZW50Iiwic3RyaW5nIiwicGF0dGVybiIsImdyZWVkeSIsImtleXdvcmQiLCJsb29rYmVoaW5kIiwibmFtZXNwYWNlIiwib3BlcmF0b3IiLCJwdW5jdHVhdGlvbiJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/yang.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/zig.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/zig.js ***!
  \********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = zig;\nzig.displayName = 'zig';\nzig.aliases = [];\nfunction zig(Prism) {\n  ;\n  (function (Prism) {\n    function literal(str) {\n      return function () {\n        return str;\n      };\n    }\n    var keyword = /\\b(?:align|allowzero|and|anyframe|anytype|asm|async|await|break|cancel|catch|comptime|const|continue|defer|else|enum|errdefer|error|export|extern|fn|for|if|inline|linksection|nakedcc|noalias|nosuspend|null|or|orelse|packed|promise|pub|resume|return|stdcallcc|struct|suspend|switch|test|threadlocal|try|undefined|union|unreachable|usingnamespace|var|volatile|while)\\b/;\n    var IDENTIFIER = '\\\\b(?!' + keyword.source + ')(?!\\\\d)\\\\w+\\\\b';\n    var ALIGN = /align\\s*\\((?:[^()]|\\([^()]*\\))*\\)/.source;\n    var PREFIX_TYPE_OP = /(?:\\?|\\bpromise->|(?:\\[[^[\\]]*\\]|\\*(?!\\*)|\\*\\*)(?:\\s*<ALIGN>|\\s*const\\b|\\s*volatile\\b|\\s*allowzero\\b)*)/.source.replace(/<ALIGN>/g, literal(ALIGN));\n    var SUFFIX_EXPR = /(?:\\bpromise\\b|(?:\\berror\\.)?<ID>(?:\\.<ID>)*(?!\\s+<ID>))/.source.replace(/<ID>/g, literal(IDENTIFIER));\n    var TYPE = '(?!\\\\s)(?:!?\\\\s*(?:' + PREFIX_TYPE_OP + '\\\\s*)*' + SUFFIX_EXPR + ')+';\n    /*\n     * A simplified grammar for Zig compile time type literals:\n     *\n     * TypeExpr = ( \"!\"? PREFIX_TYPE_OP* SUFFIX_EXPR )+\n     *\n     * SUFFIX_EXPR = ( \\b \"promise\" \\b | ( \\b \"error\" \".\" )? IDENTIFIER ( \".\" IDENTIFIER )* (?! \\s+ IDENTIFIER ) )\n     *\n     * PREFIX_TYPE_OP = \"?\"\n     *                | \\b \"promise\" \"->\"\n     *                | ( \"[\" [^\\[\\]]* \"]\" | \"*\" | \"**\" ) ( ALIGN | \"const\" \\b | \"volatile\" \\b | \"allowzero\" \\b )*\n     *\n     * ALIGN = \"align\" \"(\" ( [^()] | \"(\" [^()]* \")\" )* \")\"\n     *\n     * IDENTIFIER = \\b (?! KEYWORD ) [a-zA-Z_] \\w* \\b\n     *\n     */\n    Prism.languages.zig = {\n      comment: [{\n        pattern: /\\/\\/[/!].*/,\n        alias: 'doc-comment'\n      }, /\\/{2}.*/],\n      string: [{\n        // \"string\" and c\"string\"\n        pattern: /(^|[^\\\\@])c?\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"/,\n        lookbehind: true,\n        greedy: true\n      }, {\n        // multiline strings and c-strings\n        pattern: /([\\r\\n])([ \\t]+c?\\\\{2}).*(?:(?:\\r\\n?|\\n)\\2.*)*/,\n        lookbehind: true,\n        greedy: true\n      }],\n      \"char\": {\n        // characters 'a', '\\n', '\\xFF', '\\u{10FFFF}'\n        pattern: /(^|[^\\\\])'(?:[^'\\\\\\r\\n]|[\\uD800-\\uDFFF]{2}|\\\\(?:.|x[a-fA-F\\d]{2}|u\\{[a-fA-F\\d]{1,6}\\}))'/,\n        lookbehind: true,\n        greedy: true\n      },\n      builtin: /\\B@(?!\\d)\\w+(?=\\s*\\()/,\n      label: {\n        pattern: /(\\b(?:break|continue)\\s*:\\s*)\\w+\\b|\\b(?!\\d)\\w+\\b(?=\\s*:\\s*(?:\\{|while\\b))/,\n        lookbehind: true\n      },\n      'class-name': [\n      // const Foo = struct {};\n      /\\b(?!\\d)\\w+(?=\\s*=\\s*(?:(?:extern|packed)\\s+)?(?:enum|struct|union)\\s*[({])/, {\n        // const x: i32 = 9;\n        // var x: Bar;\n        // fn foo(x: bool, y: f32) void {}\n        pattern: RegExp(/(:\\s*)<TYPE>(?=\\s*(?:<ALIGN>\\s*)?[=;,)])|<TYPE>(?=\\s*(?:<ALIGN>\\s*)?\\{)/.source.replace(/<TYPE>/g, literal(TYPE)).replace(/<ALIGN>/g, literal(ALIGN))),\n        lookbehind: true,\n        inside: null // see below\n      }, {\n        // extern fn foo(x: f64) f64; (optional alignment)\n        pattern: RegExp(/(\\)\\s*)<TYPE>(?=\\s*(?:<ALIGN>\\s*)?;)/.source.replace(/<TYPE>/g, literal(TYPE)).replace(/<ALIGN>/g, literal(ALIGN))),\n        lookbehind: true,\n        inside: null // see below\n      }],\n\n      'builtin-type': {\n        pattern: /\\b(?:anyerror|bool|c_u?(?:int|long|longlong|short)|c_longdouble|c_void|comptime_(?:float|int)|f(?:16|32|64|128)|[iu](?:8|16|32|64|128|size)|noreturn|type|void)\\b/,\n        alias: 'keyword'\n      },\n      keyword: keyword,\n      \"function\": /\\b(?!\\d)\\w+(?=\\s*\\()/,\n      number: /\\b(?:0b[01]+|0o[0-7]+|0x[a-fA-F\\d]+(?:\\.[a-fA-F\\d]*)?(?:[pP][+-]?[a-fA-F\\d]+)?|\\d+(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)\\b/,\n      \"boolean\": /\\b(?:false|true)\\b/,\n      operator: /\\.[*?]|\\.{2,3}|[-=]>|\\*\\*|\\+\\+|\\|\\||(?:<<|>>|[-+*]%|[-+*/%^&|<>!=])=?|[?~]/,\n      punctuation: /[.:,;(){}[\\]]/\n    };\n    Prism.languages.zig['class-name'].forEach(function (obj) {\n      if (obj.inside === null) {\n        obj.inside = Prism.languages.zig;\n      }\n    });\n  })(Prism);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/zig.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/node_modules/prismjs/components/prism-core.js":
/*!******************************************************************************!*\
  !*** ./node_modules/refractor/node_modules/prismjs/components/prism-core.js ***!
  \******************************************************************************/
/***/ ((module) => {

eval("\n\n/// <reference lib=\"WebWorker\"/>\n\nvar _self =  false ? 0 // if in browser\n: typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope ? self // if in worker\n: {} // if in node js\n;\n\n/**\n * Prism: Lightweight, robust, elegant syntax highlighting\n *\n * @license MIT <https://opensource.org/licenses/MIT>\n * @author Lea Verou <https://lea.verou.me>\n * @namespace\n * @public\n */\nvar Prism = function (_self) {\n  // Private helper vars\n  var lang = /(?:^|\\s)lang(?:uage)?-([\\w-]+)(?=\\s|$)/i;\n  var uniqueId = 0;\n\n  // The grammar object for plaintext\n  var plainTextGrammar = {};\n  var _ = {\n    /**\n     * By default, Prism will attempt to highlight all code elements (by calling {@link Prism.highlightAll}) on the\n     * current page after the page finished loading. This might be a problem if e.g. you wanted to asynchronously load\n     * additional languages or plugins yourself.\n     *\n     * By setting this value to `true`, Prism will not automatically highlight all code elements on the page.\n     *\n     * You obviously have to change this value before the automatic highlighting started. To do this, you can add an\n     * empty Prism object into the global scope before loading the Prism script like this:\n     *\n     * ```js\n     * window.Prism = window.Prism || {};\n     * Prism.manual = true;\n     * // add a new <script> to load Prism's script\n     * ```\n     *\n     * @default false\n     * @type {boolean}\n     * @memberof Prism\n     * @public\n     */\n    manual: _self.Prism && _self.Prism.manual,\n    /**\n     * By default, if Prism is in a web worker, it assumes that it is in a worker it created itself, so it uses\n     * `addEventListener` to communicate with its parent instance. However, if you're using Prism manually in your\n     * own worker, you don't want it to do this.\n     *\n     * By setting this value to `true`, Prism will not add its own listeners to the worker.\n     *\n     * You obviously have to change this value before Prism executes. To do this, you can add an\n     * empty Prism object into the global scope before loading the Prism script like this:\n     *\n     * ```js\n     * window.Prism = window.Prism || {};\n     * Prism.disableWorkerMessageHandler = true;\n     * // Load Prism's script\n     * ```\n     *\n     * @default false\n     * @type {boolean}\n     * @memberof Prism\n     * @public\n     */\n    disableWorkerMessageHandler: _self.Prism && _self.Prism.disableWorkerMessageHandler,\n    /**\n     * A namespace for utility methods.\n     *\n     * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may\n     * change or disappear at any time.\n     *\n     * @namespace\n     * @memberof Prism\n     */\n    util: {\n      encode: function encode(tokens) {\n        if (tokens instanceof Token) {\n          return new Token(tokens.type, encode(tokens.content), tokens.alias);\n        } else if (Array.isArray(tokens)) {\n          return tokens.map(encode);\n        } else {\n          return tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\\u00a0/g, ' ');\n        }\n      },\n      /**\n       * Returns the name of the type of the given value.\n       *\n       * @param {any} o\n       * @returns {string}\n       * @example\n       * type(null)      === 'Null'\n       * type(undefined) === 'Undefined'\n       * type(123)       === 'Number'\n       * type('foo')     === 'String'\n       * type(true)      === 'Boolean'\n       * type([1, 2])    === 'Array'\n       * type({})        === 'Object'\n       * type(String)    === 'Function'\n       * type(/abc+/)    === 'RegExp'\n       */\n      type: function type(o) {\n        return Object.prototype.toString.call(o).slice(8, -1);\n      },\n      /**\n       * Returns a unique number for the given object. Later calls will still return the same number.\n       *\n       * @param {Object} obj\n       * @returns {number}\n       */\n      objId: function objId(obj) {\n        if (!obj['__id']) {\n          Object.defineProperty(obj, '__id', {\n            value: ++uniqueId\n          });\n        }\n        return obj['__id'];\n      },\n      /**\n       * Creates a deep clone of the given object.\n       *\n       * The main intended use of this function is to clone language definitions.\n       *\n       * @param {T} o\n       * @param {Record<number, any>} [visited]\n       * @returns {T}\n       * @template T\n       */\n      clone: function deepClone(o, visited) {\n        visited = visited || {};\n        var clone;\n        var id;\n        switch (_.util.type(o)) {\n          case 'Object':\n            id = _.util.objId(o);\n            if (visited[id]) {\n              return visited[id];\n            }\n            clone = /** @type {Record<string, any>} */{};\n            visited[id] = clone;\n            for (var key in o) {\n              if (o.hasOwnProperty(key)) {\n                clone[key] = deepClone(o[key], visited);\n              }\n            }\n            return (/** @type {any} */clone\n            );\n          case 'Array':\n            id = _.util.objId(o);\n            if (visited[id]) {\n              return visited[id];\n            }\n            clone = [];\n            visited[id] = clone;\n            /** @type {Array} */ /** @type {any} */o.forEach(function (v, i) {\n              clone[i] = deepClone(v, visited);\n            });\n            return (/** @type {any} */clone\n            );\n          default:\n            return o;\n        }\n      },\n      /**\n       * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.\n       *\n       * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.\n       *\n       * @param {Element} element\n       * @returns {string}\n       */\n      getLanguage: function getLanguage(element) {\n        while (element) {\n          var m = lang.exec(element.className);\n          if (m) {\n            return m[1].toLowerCase();\n          }\n          element = element.parentElement;\n        }\n        return 'none';\n      },\n      /**\n       * Sets the Prism `language-xxxx` class of the given element.\n       *\n       * @param {Element} element\n       * @param {string} language\n       * @returns {void}\n       */\n      setLanguage: function setLanguage(element, language) {\n        // remove all `language-xxxx` classes\n        // (this might leave behind a leading space)\n        element.className = element.className.replace(RegExp(lang, 'gi'), '');\n\n        // add the new `language-xxxx` class\n        // (using `classList` will automatically clean up spaces for us)\n        element.classList.add('language-' + language);\n      },\n      /**\n       * Returns the script element that is currently executing.\n       *\n       * This does __not__ work for line script element.\n       *\n       * @returns {HTMLScriptElement | null}\n       */\n      currentScript: function currentScript() {\n        if (typeof document === 'undefined') {\n          return null;\n        }\n        if ('currentScript' in document && 1 < 2 /* hack to trip TS' flow analysis */) {\n          return (/** @type {any} */document.currentScript\n          );\n        }\n\n        // IE11 workaround\n        // we'll get the src of the current script by parsing IE11's error stack trace\n        // this will not work for inline scripts\n\n        try {\n          throw new Error();\n        } catch (err) {\n          // Get file src url from stack. Specifically works with the format of stack traces in IE.\n          // A stack will look like this:\n          //\n          // Error\n          //    at _.util.currentScript (http://localhost/components/prism-core.js:119:5)\n          //    at Global code (http://localhost/components/prism-core.js:606:1)\n\n          var src = (/at [^(\\r\\n]*\\((.*):[^:]+:[^:]+\\)$/i.exec(err.stack) || [])[1];\n          if (src) {\n            var scripts = document.getElementsByTagName('script');\n            for (var i in scripts) {\n              if (scripts[i].src == src) {\n                return scripts[i];\n              }\n            }\n          }\n          return null;\n        }\n      },\n      /**\n       * Returns whether a given class is active for `element`.\n       *\n       * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated\n       * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the\n       * given class is just the given class with a `no-` prefix.\n       *\n       * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is\n       * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its\n       * ancestors have the given class or the negated version of it, then the default activation will be returned.\n       *\n       * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated\n       * version of it, the class is considered active.\n       *\n       * @param {Element} element\n       * @param {string} className\n       * @param {boolean} [defaultActivation=false]\n       * @returns {boolean}\n       */\n      isActive: function isActive(element, className, defaultActivation) {\n        var no = 'no-' + className;\n        while (element) {\n          var classList = element.classList;\n          if (classList.contains(className)) {\n            return true;\n          }\n          if (classList.contains(no)) {\n            return false;\n          }\n          element = element.parentElement;\n        }\n        return !!defaultActivation;\n      }\n    },\n    /**\n     * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.\n     *\n     * @namespace\n     * @memberof Prism\n     * @public\n     */\n    languages: {\n      /**\n       * The grammar for plain, unformatted text.\n       */\n      plain: plainTextGrammar,\n      plaintext: plainTextGrammar,\n      text: plainTextGrammar,\n      txt: plainTextGrammar,\n      /**\n       * Creates a deep copy of the language with the given id and appends the given tokens.\n       *\n       * If a token in `redef` also appears in the copied language, then the existing token in the copied language\n       * will be overwritten at its original position.\n       *\n       * ## Best practices\n       *\n       * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)\n       * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to\n       * understand the language definition because, normally, the order of tokens matters in Prism grammars.\n       *\n       * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.\n       * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.\n       *\n       * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.\n       * @param {Grammar} redef The new tokens to append.\n       * @returns {Grammar} The new language created.\n       * @public\n       * @example\n       * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {\n       *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token\n       *     // at its original position\n       *     'comment': { ... },\n       *     // CSS doesn't have a 'color' token, so this token will be appended\n       *     'color': /\\b(?:red|green|blue)\\b/\n       * });\n       */\n      extend: function extend(id, redef) {\n        var lang = _.util.clone(_.languages[id]);\n        for (var key in redef) {\n          lang[key] = redef[key];\n        }\n        return lang;\n      },\n      /**\n       * Inserts tokens _before_ another token in a language definition or any other grammar.\n       *\n       * ## Usage\n       *\n       * This helper method makes it easy to modify existing languages. For example, the CSS language definition\n       * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded\n       * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the\n       * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do\n       * this:\n       *\n       * ```js\n       * Prism.languages.markup.style = {\n       *     // token\n       * };\n       * ```\n       *\n       * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens\n       * before existing tokens. For the CSS example above, you would use it like this:\n       *\n       * ```js\n       * Prism.languages.insertBefore('markup', 'cdata', {\n       *     'style': {\n       *         // token\n       *     }\n       * });\n       * ```\n       *\n       * ## Special cases\n       *\n       * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar\n       * will be ignored.\n       *\n       * This behavior can be used to insert tokens after `before`:\n       *\n       * ```js\n       * Prism.languages.insertBefore('markup', 'comment', {\n       *     'comment': Prism.languages.markup.comment,\n       *     // tokens after 'comment'\n       * });\n       * ```\n       *\n       * ## Limitations\n       *\n       * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object\n       * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave\n       * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily\n       * deleting properties which is necessary to insert at arbitrary positions.\n       *\n       * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.\n       * Instead, it will create a new object and replace all references to the target object with the new one. This\n       * can be done without temporarily deleting properties, so the iteration order is well-defined.\n       *\n       * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if\n       * you hold the target object in a variable, then the value of the variable will not change.\n       *\n       * ```js\n       * var oldMarkup = Prism.languages.markup;\n       * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });\n       *\n       * assert(oldMarkup !== Prism.languages.markup);\n       * assert(newMarkup === Prism.languages.markup);\n       * ```\n       *\n       * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the\n       * object to be modified.\n       * @param {string} before The key to insert before.\n       * @param {Grammar} insert An object containing the key-value pairs to be inserted.\n       * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the\n       * object to be modified.\n       *\n       * Defaults to `Prism.languages`.\n       * @returns {Grammar} The new grammar object.\n       * @public\n       */\n      insertBefore: function insertBefore(inside, before, insert, root) {\n        root = root || /** @type {any} */_.languages;\n        var grammar = root[inside];\n        /** @type {Grammar} */\n        var ret = {};\n        for (var token in grammar) {\n          if (grammar.hasOwnProperty(token)) {\n            if (token == before) {\n              for (var newToken in insert) {\n                if (insert.hasOwnProperty(newToken)) {\n                  ret[newToken] = insert[newToken];\n                }\n              }\n            }\n\n            // Do not insert token which also occur in insert. See #1525\n            if (!insert.hasOwnProperty(token)) {\n              ret[token] = grammar[token];\n            }\n          }\n        }\n        var old = root[inside];\n        root[inside] = ret;\n\n        // Update references in other language definitions\n        _.languages.DFS(_.languages, function (key, value) {\n          if (value === old && key != inside) {\n            this[key] = ret;\n          }\n        });\n        return ret;\n      },\n      // Traverse a language definition with Depth First Search\n      DFS: function DFS(o, callback, type, visited) {\n        visited = visited || {};\n        var objId = _.util.objId;\n        for (var i in o) {\n          if (o.hasOwnProperty(i)) {\n            callback.call(o, i, o[i], type || i);\n            var property = o[i];\n            var propertyType = _.util.type(property);\n            if (propertyType === 'Object' && !visited[objId(property)]) {\n              visited[objId(property)] = true;\n              DFS(property, callback, null, visited);\n            } else if (propertyType === 'Array' && !visited[objId(property)]) {\n              visited[objId(property)] = true;\n              DFS(property, callback, i, visited);\n            }\n          }\n        }\n      }\n    },\n    plugins: {},\n    /**\n     * This is the most high-level function in Prism’s API.\n     * It fetches all the elements that have a `.language-xxxx` class and then calls {@link Prism.highlightElement} on\n     * each one of them.\n     *\n     * This is equivalent to `Prism.highlightAllUnder(document, async, callback)`.\n     *\n     * @param {boolean} [async=false] Same as in {@link Prism.highlightAllUnder}.\n     * @param {HighlightCallback} [callback] Same as in {@link Prism.highlightAllUnder}.\n     * @memberof Prism\n     * @public\n     */\n    highlightAll: function highlightAll(async, callback) {\n      _.highlightAllUnder(document, async, callback);\n    },\n    /**\n     * Fetches all the descendants of `container` that have a `.language-xxxx` class and then calls\n     * {@link Prism.highlightElement} on each one of them.\n     *\n     * The following hooks will be run:\n     * 1. `before-highlightall`\n     * 2. `before-all-elements-highlight`\n     * 3. All hooks of {@link Prism.highlightElement} for each element.\n     *\n     * @param {ParentNode} container The root element, whose descendants that have a `.language-xxxx` class will be highlighted.\n     * @param {boolean} [async=false] Whether each element is to be highlighted asynchronously using Web Workers.\n     * @param {HighlightCallback} [callback] An optional callback to be invoked on each element after its highlighting is done.\n     * @memberof Prism\n     * @public\n     */\n    highlightAllUnder: function highlightAllUnder(container, async, callback) {\n      var env = {\n        callback: callback,\n        container: container,\n        selector: 'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'\n      };\n      _.hooks.run('before-highlightall', env);\n      env.elements = Array.prototype.slice.apply(env.container.querySelectorAll(env.selector));\n      _.hooks.run('before-all-elements-highlight', env);\n      for (var i = 0, element; element = env.elements[i++];) {\n        _.highlightElement(element, async === true, env.callback);\n      }\n    },\n    /**\n     * Highlights the code inside a single element.\n     *\n     * The following hooks will be run:\n     * 1. `before-sanity-check`\n     * 2. `before-highlight`\n     * 3. All hooks of {@link Prism.highlight}. These hooks will be run by an asynchronous worker if `async` is `true`.\n     * 4. `before-insert`\n     * 5. `after-highlight`\n     * 6. `complete`\n     *\n     * Some the above hooks will be skipped if the element doesn't contain any text or there is no grammar loaded for\n     * the element's language.\n     *\n     * @param {Element} element The element containing the code.\n     * It must have a class of `language-xxxx` to be processed, where `xxxx` is a valid language identifier.\n     * @param {boolean} [async=false] Whether the element is to be highlighted asynchronously using Web Workers\n     * to improve performance and avoid blocking the UI when highlighting very large chunks of code. This option is\n     * [disabled by default](https://prismjs.com/faq.html#why-is-asynchronous-highlighting-disabled-by-default).\n     *\n     * Note: All language definitions required to highlight the code must be included in the main `prism.js` file for\n     * asynchronous highlighting to work. You can build your own bundle on the\n     * [Download page](https://prismjs.com/download.html).\n     * @param {HighlightCallback} [callback] An optional callback to be invoked after the highlighting is done.\n     * Mostly useful when `async` is `true`, since in that case, the highlighting is done asynchronously.\n     * @memberof Prism\n     * @public\n     */\n    highlightElement: function highlightElement(element, async, callback) {\n      // Find language\n      var language = _.util.getLanguage(element);\n      var grammar = _.languages[language];\n\n      // Set language on the element, if not present\n      _.util.setLanguage(element, language);\n\n      // Set language on the parent, for styling\n      var parent = element.parentElement;\n      if (parent && parent.nodeName.toLowerCase() === 'pre') {\n        _.util.setLanguage(parent, language);\n      }\n      var code = element.textContent;\n      var env = {\n        element: element,\n        language: language,\n        grammar: grammar,\n        code: code\n      };\n      function insertHighlightedCode(highlightedCode) {\n        env.highlightedCode = highlightedCode;\n        _.hooks.run('before-insert', env);\n        env.element.innerHTML = env.highlightedCode;\n        _.hooks.run('after-highlight', env);\n        _.hooks.run('complete', env);\n        callback && callback.call(env.element);\n      }\n      _.hooks.run('before-sanity-check', env);\n\n      // plugins may change/add the parent/element\n      parent = env.element.parentElement;\n      if (parent && parent.nodeName.toLowerCase() === 'pre' && !parent.hasAttribute('tabindex')) {\n        parent.setAttribute('tabindex', '0');\n      }\n      if (!env.code) {\n        _.hooks.run('complete', env);\n        callback && callback.call(env.element);\n        return;\n      }\n      _.hooks.run('before-highlight', env);\n      if (!env.grammar) {\n        insertHighlightedCode(_.util.encode(env.code));\n        return;\n      }\n      if (async && _self.Worker) {\n        var worker = new Worker(_.filename);\n        worker.onmessage = function (evt) {\n          insertHighlightedCode(evt.data);\n        };\n        worker.postMessage(JSON.stringify({\n          language: env.language,\n          code: env.code,\n          immediateClose: true\n        }));\n      } else {\n        insertHighlightedCode(_.highlight(env.code, env.grammar, env.language));\n      }\n    },\n    /**\n     * Low-level function, only use if you know what you’re doing. It accepts a string of text as input\n     * and the language definitions to use, and returns a string with the HTML produced.\n     *\n     * The following hooks will be run:\n     * 1. `before-tokenize`\n     * 2. `after-tokenize`\n     * 3. `wrap`: On each {@link Token}.\n     *\n     * @param {string} text A string with the code to be highlighted.\n     * @param {Grammar} grammar An object containing the tokens to use.\n     *\n     * Usually a language definition like `Prism.languages.markup`.\n     * @param {string} language The name of the language definition passed to `grammar`.\n     * @returns {string} The highlighted HTML.\n     * @memberof Prism\n     * @public\n     * @example\n     * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');\n     */\n    highlight: function highlight(text, grammar, language) {\n      var env = {\n        code: text,\n        grammar: grammar,\n        language: language\n      };\n      _.hooks.run('before-tokenize', env);\n      if (!env.grammar) {\n        throw new Error('The language \"' + env.language + '\" has no grammar.');\n      }\n      env.tokens = _.tokenize(env.code, env.grammar);\n      _.hooks.run('after-tokenize', env);\n      return Token.stringify(_.util.encode(env.tokens), env.language);\n    },\n    /**\n     * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input\n     * and the language definitions to use, and returns an array with the tokenized code.\n     *\n     * When the language definition includes nested tokens, the function is called recursively on each of these tokens.\n     *\n     * This method could be useful in other contexts as well, as a very crude parser.\n     *\n     * @param {string} text A string with the code to be highlighted.\n     * @param {Grammar} grammar An object containing the tokens to use.\n     *\n     * Usually a language definition like `Prism.languages.markup`.\n     * @returns {TokenStream} An array of strings and tokens, a token stream.\n     * @memberof Prism\n     * @public\n     * @example\n     * let code = `var foo = 0;`;\n     * let tokens = Prism.tokenize(code, Prism.languages.javascript);\n     * tokens.forEach(token => {\n     *     if (token instanceof Prism.Token && token.type === 'number') {\n     *         console.log(`Found numeric literal: ${token.content}`);\n     *     }\n     * });\n     */\n    tokenize: function tokenize(text, grammar) {\n      var rest = grammar.rest;\n      if (rest) {\n        for (var token in rest) {\n          grammar[token] = rest[token];\n        }\n        delete grammar.rest;\n      }\n      var tokenList = new LinkedList();\n      addAfter(tokenList, tokenList.head, text);\n      matchGrammar(text, tokenList, grammar, tokenList.head, 0);\n      return toArray(tokenList);\n    },\n    /**\n     * @namespace\n     * @memberof Prism\n     * @public\n     */\n    hooks: {\n      all: {},\n      /**\n       * Adds the given callback to the list of callbacks for the given hook.\n       *\n       * The callback will be invoked when the hook it is registered for is run.\n       * Hooks are usually directly run by a highlight function but you can also run hooks yourself.\n       *\n       * One callback function can be registered to multiple hooks and the same hook multiple times.\n       *\n       * @param {string} name The name of the hook.\n       * @param {HookCallback} callback The callback function which is given environment variables.\n       * @public\n       */\n      add: function add(name, callback) {\n        var hooks = _.hooks.all;\n        hooks[name] = hooks[name] || [];\n        hooks[name].push(callback);\n      },\n      /**\n       * Runs a hook invoking all registered callbacks with the given environment variables.\n       *\n       * Callbacks will be invoked synchronously and in the order in which they were registered.\n       *\n       * @param {string} name The name of the hook.\n       * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.\n       * @public\n       */\n      run: function run(name, env) {\n        var callbacks = _.hooks.all[name];\n        if (!callbacks || !callbacks.length) {\n          return;\n        }\n        for (var i = 0, callback; callback = callbacks[i++];) {\n          callback(env);\n        }\n      }\n    },\n    Token: Token\n  };\n  _self.Prism = _;\n\n  // Typescript note:\n  // The following can be used to import the Token type in JSDoc:\n  //\n  //   @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\n\n  /**\n   * Creates a new token.\n   *\n   * @param {string} type See {@link Token#type type}\n   * @param {string | TokenStream} content See {@link Token#content content}\n   * @param {string|string[]} [alias] The alias(es) of the token.\n   * @param {string} [matchedStr=\"\"] A copy of the full string this token was created from.\n   * @class\n   * @global\n   * @public\n   */\n  function Token(type, content, alias, matchedStr) {\n    /**\n     * The type of the token.\n     *\n     * This is usually the key of a pattern in a {@link Grammar}.\n     *\n     * @type {string}\n     * @see GrammarToken\n     * @public\n     */\n    this.type = type;\n    /**\n     * The strings or tokens contained by this token.\n     *\n     * This will be a token stream if the pattern matched also defined an `inside` grammar.\n     *\n     * @type {string | TokenStream}\n     * @public\n     */\n    this.content = content;\n    /**\n     * The alias(es) of the token.\n     *\n     * @type {string|string[]}\n     * @see GrammarToken\n     * @public\n     */\n    this.alias = alias;\n    // Copy of the full string this token was created from\n    this.length = (matchedStr || '').length | 0;\n  }\n\n  /**\n   * A token stream is an array of strings and {@link Token Token} objects.\n   *\n   * Token streams have to fulfill a few properties that are assumed by most functions (mostly internal ones) that process\n   * them.\n   *\n   * 1. No adjacent strings.\n   * 2. No empty strings.\n   *\n   *    The only exception here is the token stream that only contains the empty string and nothing else.\n   *\n   * @typedef {Array<string | Token>} TokenStream\n   * @global\n   * @public\n   */\n\n  /**\n   * Converts the given token or token stream to an HTML representation.\n   *\n   * The following hooks will be run:\n   * 1. `wrap`: On each {@link Token}.\n   *\n   * @param {string | Token | TokenStream} o The token or token stream to be converted.\n   * @param {string} language The name of current language.\n   * @returns {string} The HTML representation of the token or token stream.\n   * @memberof Token\n   * @static\n   */\n  Token.stringify = function stringify(o, language) {\n    if (typeof o == 'string') {\n      return o;\n    }\n    if (Array.isArray(o)) {\n      var s = '';\n      o.forEach(function (e) {\n        s += stringify(e, language);\n      });\n      return s;\n    }\n    var env = {\n      type: o.type,\n      content: stringify(o.content, language),\n      tag: 'span',\n      classes: ['token', o.type],\n      attributes: {},\n      language: language\n    };\n    var aliases = o.alias;\n    if (aliases) {\n      if (Array.isArray(aliases)) {\n        Array.prototype.push.apply(env.classes, aliases);\n      } else {\n        env.classes.push(aliases);\n      }\n    }\n    _.hooks.run('wrap', env);\n    var attributes = '';\n    for (var name in env.attributes) {\n      attributes += ' ' + name + '=\"' + (env.attributes[name] || '').replace(/\"/g, '&quot;') + '\"';\n    }\n    return '<' + env.tag + ' class=\"' + env.classes.join(' ') + '\"' + attributes + '>' + env.content + '</' + env.tag + '>';\n  };\n\n  /**\n   * @param {RegExp} pattern\n   * @param {number} pos\n   * @param {string} text\n   * @param {boolean} lookbehind\n   * @returns {RegExpExecArray | null}\n   */\n  function matchPattern(pattern, pos, text, lookbehind) {\n    pattern.lastIndex = pos;\n    var match = pattern.exec(text);\n    if (match && lookbehind && match[1]) {\n      // change the match to remove the text matched by the Prism lookbehind group\n      var lookbehindLength = match[1].length;\n      match.index += lookbehindLength;\n      match[0] = match[0].slice(lookbehindLength);\n    }\n    return match;\n  }\n\n  /**\n   * @param {string} text\n   * @param {LinkedList<string | Token>} tokenList\n   * @param {any} grammar\n   * @param {LinkedListNode<string | Token>} startNode\n   * @param {number} startPos\n   * @param {RematchOptions} [rematch]\n   * @returns {void}\n   * @private\n   *\n   * @typedef RematchOptions\n   * @property {string} cause\n   * @property {number} reach\n   */\n  function matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {\n    for (var token in grammar) {\n      if (!grammar.hasOwnProperty(token) || !grammar[token]) {\n        continue;\n      }\n      var patterns = grammar[token];\n      patterns = Array.isArray(patterns) ? patterns : [patterns];\n      for (var j = 0; j < patterns.length; ++j) {\n        if (rematch && rematch.cause == token + ',' + j) {\n          return;\n        }\n        var patternObj = patterns[j];\n        var inside = patternObj.inside;\n        var lookbehind = !!patternObj.lookbehind;\n        var greedy = !!patternObj.greedy;\n        var alias = patternObj.alias;\n        if (greedy && !patternObj.pattern.global) {\n          // Without the global flag, lastIndex won't work\n          var flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];\n          patternObj.pattern = RegExp(patternObj.pattern.source, flags + 'g');\n        }\n\n        /** @type {RegExp} */\n        var pattern = patternObj.pattern || patternObj;\n        for (\n        // iterate the token list and keep track of the current token/string position\n        var currentNode = startNode.next, pos = startPos; currentNode !== tokenList.tail; pos += currentNode.value.length, currentNode = currentNode.next) {\n          if (rematch && pos >= rematch.reach) {\n            break;\n          }\n          var str = currentNode.value;\n          if (tokenList.length > text.length) {\n            // Something went terribly wrong, ABORT, ABORT!\n            return;\n          }\n          if (str instanceof Token) {\n            continue;\n          }\n          var removeCount = 1; // this is the to parameter of removeBetween\n          var match;\n          if (greedy) {\n            match = matchPattern(pattern, pos, text, lookbehind);\n            if (!match || match.index >= text.length) {\n              break;\n            }\n            var from = match.index;\n            var to = match.index + match[0].length;\n            var p = pos;\n\n            // find the node that contains the match\n            p += currentNode.value.length;\n            while (from >= p) {\n              currentNode = currentNode.next;\n              p += currentNode.value.length;\n            }\n            // adjust pos (and p)\n            p -= currentNode.value.length;\n            pos = p;\n\n            // the current node is a Token, then the match starts inside another Token, which is invalid\n            if (currentNode.value instanceof Token) {\n              continue;\n            }\n\n            // find the last node which is affected by this match\n            for (var k = currentNode; k !== tokenList.tail && (p < to || typeof k.value === 'string'); k = k.next) {\n              removeCount++;\n              p += k.value.length;\n            }\n            removeCount--;\n\n            // replace with the new match\n            str = text.slice(pos, p);\n            match.index -= pos;\n          } else {\n            match = matchPattern(pattern, 0, str, lookbehind);\n            if (!match) {\n              continue;\n            }\n          }\n\n          // eslint-disable-next-line no-redeclare\n          var from = match.index;\n          var matchStr = match[0];\n          var before = str.slice(0, from);\n          var after = str.slice(from + matchStr.length);\n          var reach = pos + str.length;\n          if (rematch && reach > rematch.reach) {\n            rematch.reach = reach;\n          }\n          var removeFrom = currentNode.prev;\n          if (before) {\n            removeFrom = addAfter(tokenList, removeFrom, before);\n            pos += before.length;\n          }\n          removeRange(tokenList, removeFrom, removeCount);\n          var wrapped = new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr);\n          currentNode = addAfter(tokenList, removeFrom, wrapped);\n          if (after) {\n            addAfter(tokenList, currentNode, after);\n          }\n          if (removeCount > 1) {\n            // at least one Token object was removed, so we have to do some rematching\n            // this can only happen if the current pattern is greedy\n\n            /** @type {RematchOptions} */\n            var nestedRematch = {\n              cause: token + ',' + j,\n              reach: reach\n            };\n            matchGrammar(text, tokenList, grammar, currentNode.prev, pos, nestedRematch);\n\n            // the reach might have been extended because of the rematching\n            if (rematch && nestedRematch.reach > rematch.reach) {\n              rematch.reach = nestedRematch.reach;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * @typedef LinkedListNode\n   * @property {T} value\n   * @property {LinkedListNode<T> | null} prev The previous node.\n   * @property {LinkedListNode<T> | null} next The next node.\n   * @template T\n   * @private\n   */\n\n  /**\n   * @template T\n   * @private\n   */\n  function LinkedList() {\n    /** @type {LinkedListNode<T>} */\n    var head = {\n      value: null,\n      prev: null,\n      next: null\n    };\n    /** @type {LinkedListNode<T>} */\n    var tail = {\n      value: null,\n      prev: head,\n      next: null\n    };\n    head.next = tail;\n\n    /** @type {LinkedListNode<T>} */\n    this.head = head;\n    /** @type {LinkedListNode<T>} */\n    this.tail = tail;\n    this.length = 0;\n  }\n\n  /**\n   * Adds a new node with the given value to the list.\n   *\n   * @param {LinkedList<T>} list\n   * @param {LinkedListNode<T>} node\n   * @param {T} value\n   * @returns {LinkedListNode<T>} The added node.\n   * @template T\n   */\n  function addAfter(list, node, value) {\n    // assumes that node != list.tail && values.length >= 0\n    var next = node.next;\n    var newNode = {\n      value: value,\n      prev: node,\n      next: next\n    };\n    node.next = newNode;\n    next.prev = newNode;\n    list.length++;\n    return newNode;\n  }\n  /**\n   * Removes `count` nodes after the given node. The given node will not be removed.\n   *\n   * @param {LinkedList<T>} list\n   * @param {LinkedListNode<T>} node\n   * @param {number} count\n   * @template T\n   */\n  function removeRange(list, node, count) {\n    var next = node.next;\n    for (var i = 0; i < count && next !== list.tail; i++) {\n      next = next.next;\n    }\n    node.next = next;\n    next.prev = node;\n    list.length -= i;\n  }\n  /**\n   * @param {LinkedList<T>} list\n   * @returns {T[]}\n   * @template T\n   */\n  function toArray(list) {\n    var array = [];\n    var node = list.head.next;\n    while (node !== list.tail) {\n      array.push(node.value);\n      node = node.next;\n    }\n    return array;\n  }\n  if (!_self.document) {\n    if (!_self.addEventListener) {\n      // in Node.js\n      return _;\n    }\n    if (!_.disableWorkerMessageHandler) {\n      // In worker\n      _self.addEventListener('message', function (evt) {\n        var message = JSON.parse(evt.data);\n        var lang = message.language;\n        var code = message.code;\n        var immediateClose = message.immediateClose;\n        _self.postMessage(_.highlight(code, _.languages[lang], lang));\n        if (immediateClose) {\n          _self.close();\n        }\n      }, false);\n    }\n    return _;\n  }\n\n  // Get current script and highlight\n  var script = _.util.currentScript();\n  if (script) {\n    _.filename = script.src;\n    if (script.hasAttribute('data-manual')) {\n      _.manual = true;\n    }\n  }\n  function highlightAutomaticallyCallback() {\n    if (!_.manual) {\n      _.highlightAll();\n    }\n  }\n  if (!_.manual) {\n    // If the document state is \"loading\", then we'll use DOMContentLoaded.\n    // If the document state is \"interactive\" and the prism.js script is deferred, then we'll also use the\n    // DOMContentLoaded event because there might be some plugins or languages which have also been deferred and they\n    // might take longer one animation frame to execute which can create a race condition where only some plugins have\n    // been loaded when Prism.highlightAll() is executed, depending on how fast resources are loaded.\n    // See https://github.com/PrismJS/prism/issues/2102\n    var readyState = document.readyState;\n    if (readyState === 'loading' || readyState === 'interactive' && script && script.defer) {\n      document.addEventListener('DOMContentLoaded', highlightAutomaticallyCallback);\n    } else {\n      if (window.requestAnimationFrame) {\n        window.requestAnimationFrame(highlightAutomaticallyCallback);\n      } else {\n        window.setTimeout(highlightAutomaticallyCallback, 16);\n      }\n    }\n  }\n  return _;\n}(_self);\nif ( true && module.exports) {\n  module.exports = Prism;\n}\n\n// hack for components to work correctly in node.js\nif (typeof global !== 'undefined') {\n  global.Prism = Prism;\n}\n\n// some additional documentation/types\n\n/**\n * The expansion of a simple `RegExp` literal to support additional properties.\n *\n * @typedef GrammarToken\n * @property {RegExp} pattern The regular expression of the token.\n * @property {boolean} [lookbehind=false] If `true`, then the first capturing group of `pattern` will (effectively)\n * behave as a lookbehind group meaning that the captured text will not be part of the matched text of the new token.\n * @property {boolean} [greedy=false] Whether the token is greedy.\n * @property {string|string[]} [alias] An optional alias or list of aliases.\n * @property {Grammar} [inside] The nested grammar of this token.\n *\n * The `inside` grammar will be used to tokenize the text value of each token of this kind.\n *\n * This can be used to make nested and even recursive language definitions.\n *\n * Note: This can cause infinite recursion. Be careful when you embed different languages or even the same language into\n * each another.\n * @global\n * @public\n */\n\n/**\n * @typedef Grammar\n * @type {Object<string, RegExp | GrammarToken | Array<RegExp | GrammarToken>>}\n * @property {Grammar} [rest] An optional grammar object that will be appended to this grammar.\n * @global\n * @public\n */\n\n/**\n * A function which will invoked after an element was successfully highlighted.\n *\n * @callback HighlightCallback\n * @param {Element} element The element successfully highlighted.\n * @returns {void}\n * @global\n * @public\n */\n\n/**\n * @callback HookCallback\n * @param {Object<string, any>} env The environment variables of the hook.\n * @returns {void}\n * @global\n * @public\n *///# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/node_modules/prismjs/components/prism-core.js\n");

/***/ })

};
;