"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@tiptap";
exports.ids = ["vendor-chunks/@tiptap"];
exports.modules = {

/***/ "(ssr)/./node_modules/@tiptap/core/dist/index.js":
/*!*************************************************!*\
  !*** ./node_modules/@tiptap/core/dist/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CommandManager: () => (/* binding */ CommandManager),\n/* harmony export */   Editor: () => (/* binding */ Editor),\n/* harmony export */   Extension: () => (/* binding */ Extension),\n/* harmony export */   InputRule: () => (/* binding */ InputRule),\n/* harmony export */   Mark: () => (/* binding */ Mark),\n/* harmony export */   Node: () => (/* binding */ Node),\n/* harmony export */   NodePos: () => (/* binding */ NodePos),\n/* harmony export */   NodeView: () => (/* binding */ NodeView),\n/* harmony export */   PasteRule: () => (/* binding */ PasteRule),\n/* harmony export */   Tracker: () => (/* binding */ Tracker),\n/* harmony export */   callOrReturn: () => (/* binding */ callOrReturn),\n/* harmony export */   combineTransactionSteps: () => (/* binding */ combineTransactionSteps),\n/* harmony export */   createChainableState: () => (/* binding */ createChainableState),\n/* harmony export */   createDocument: () => (/* binding */ createDocument),\n/* harmony export */   createNodeFromContent: () => (/* binding */ createNodeFromContent),\n/* harmony export */   createStyleTag: () => (/* binding */ createStyleTag),\n/* harmony export */   defaultBlockAt: () => (/* binding */ defaultBlockAt),\n/* harmony export */   deleteProps: () => (/* binding */ deleteProps),\n/* harmony export */   elementFromString: () => (/* binding */ elementFromString),\n/* harmony export */   escapeForRegEx: () => (/* binding */ escapeForRegEx),\n/* harmony export */   extensions: () => (/* binding */ index),\n/* harmony export */   findChildren: () => (/* binding */ findChildren),\n/* harmony export */   findChildrenInRange: () => (/* binding */ findChildrenInRange),\n/* harmony export */   findDuplicates: () => (/* binding */ findDuplicates),\n/* harmony export */   findParentNode: () => (/* binding */ findParentNode),\n/* harmony export */   findParentNodeClosestToPos: () => (/* binding */ findParentNodeClosestToPos),\n/* harmony export */   fromString: () => (/* binding */ fromString),\n/* harmony export */   generateHTML: () => (/* binding */ generateHTML),\n/* harmony export */   generateJSON: () => (/* binding */ generateJSON),\n/* harmony export */   generateText: () => (/* binding */ generateText),\n/* harmony export */   getAttributes: () => (/* binding */ _getAttributes),\n/* harmony export */   getAttributesFromExtensions: () => (/* binding */ getAttributesFromExtensions),\n/* harmony export */   getChangedRanges: () => (/* binding */ getChangedRanges),\n/* harmony export */   getDebugJSON: () => (/* binding */ getDebugJSON),\n/* harmony export */   getExtensionField: () => (/* binding */ getExtensionField),\n/* harmony export */   getHTMLFromFragment: () => (/* binding */ getHTMLFromFragment),\n/* harmony export */   getMarkAttributes: () => (/* binding */ getMarkAttributes),\n/* harmony export */   getMarkRange: () => (/* binding */ getMarkRange),\n/* harmony export */   getMarkType: () => (/* binding */ getMarkType),\n/* harmony export */   getMarksBetween: () => (/* binding */ getMarksBetween),\n/* harmony export */   getNodeAtPosition: () => (/* binding */ getNodeAtPosition),\n/* harmony export */   getNodeAttributes: () => (/* binding */ getNodeAttributes),\n/* harmony export */   getNodeType: () => (/* binding */ getNodeType),\n/* harmony export */   getRenderedAttributes: () => (/* binding */ getRenderedAttributes),\n/* harmony export */   getSchema: () => (/* binding */ getSchema),\n/* harmony export */   getSchemaByResolvedExtensions: () => (/* binding */ getSchemaByResolvedExtensions),\n/* harmony export */   getSchemaTypeByName: () => (/* binding */ getSchemaTypeByName),\n/* harmony export */   getSchemaTypeNameByName: () => (/* binding */ getSchemaTypeNameByName),\n/* harmony export */   getSplittedAttributes: () => (/* binding */ getSplittedAttributes),\n/* harmony export */   getText: () => (/* binding */ _getText),\n/* harmony export */   getTextBetween: () => (/* binding */ getTextBetween),\n/* harmony export */   getTextContentFromNodes: () => (/* binding */ getTextContentFromNodes),\n/* harmony export */   getTextSerializersFromSchema: () => (/* binding */ getTextSerializersFromSchema),\n/* harmony export */   injectExtensionAttributesToParseRule: () => (/* binding */ injectExtensionAttributesToParseRule),\n/* harmony export */   inputRulesPlugin: () => (/* binding */ inputRulesPlugin),\n/* harmony export */   isActive: () => (/* binding */ _isActive),\n/* harmony export */   isAtEndOfNode: () => (/* binding */ isAtEndOfNode),\n/* harmony export */   isAtStartOfNode: () => (/* binding */ isAtStartOfNode),\n/* harmony export */   isEmptyObject: () => (/* binding */ isEmptyObject),\n/* harmony export */   isExtensionRulesEnabled: () => (/* binding */ isExtensionRulesEnabled),\n/* harmony export */   isFunction: () => (/* binding */ isFunction),\n/* harmony export */   isList: () => (/* binding */ isList),\n/* harmony export */   isMacOS: () => (/* binding */ isMacOS),\n/* harmony export */   isMarkActive: () => (/* binding */ isMarkActive),\n/* harmony export */   isNodeActive: () => (/* binding */ isNodeActive),\n/* harmony export */   isNodeEmpty: () => (/* binding */ isNodeEmpty),\n/* harmony export */   isNodeSelection: () => (/* binding */ isNodeSelection),\n/* harmony export */   isNumber: () => (/* binding */ isNumber),\n/* harmony export */   isPlainObject: () => (/* binding */ isPlainObject),\n/* harmony export */   isRegExp: () => (/* binding */ isRegExp),\n/* harmony export */   isString: () => (/* binding */ isString),\n/* harmony export */   isTextSelection: () => (/* binding */ isTextSelection),\n/* harmony export */   isiOS: () => (/* binding */ isiOS),\n/* harmony export */   markInputRule: () => (/* binding */ markInputRule),\n/* harmony export */   markPasteRule: () => (/* binding */ markPasteRule),\n/* harmony export */   mergeAttributes: () => (/* binding */ mergeAttributes),\n/* harmony export */   mergeDeep: () => (/* binding */ mergeDeep),\n/* harmony export */   minMax: () => (/* binding */ minMax),\n/* harmony export */   nodeInputRule: () => (/* binding */ nodeInputRule),\n/* harmony export */   nodePasteRule: () => (/* binding */ nodePasteRule),\n/* harmony export */   objectIncludes: () => (/* binding */ objectIncludes),\n/* harmony export */   pasteRulesPlugin: () => (/* binding */ pasteRulesPlugin),\n/* harmony export */   posToDOMRect: () => (/* binding */ posToDOMRect),\n/* harmony export */   removeDuplicates: () => (/* binding */ removeDuplicates),\n/* harmony export */   resolveFocusPosition: () => (/* binding */ resolveFocusPosition),\n/* harmony export */   rewriteUnknownContent: () => (/* binding */ rewriteUnknownContent),\n/* harmony export */   selectionToInsertionEnd: () => (/* binding */ selectionToInsertionEnd),\n/* harmony export */   splitExtensions: () => (/* binding */ splitExtensions),\n/* harmony export */   textInputRule: () => (/* binding */ textInputRule),\n/* harmony export */   textPasteRule: () => (/* binding */ textPasteRule),\n/* harmony export */   textblockTypeInputRule: () => (/* binding */ textblockTypeInputRule),\n/* harmony export */   wrappingInputRule: () => (/* binding */ wrappingInputRule)\n/* harmony export */ });\n/* harmony import */ var _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/pm/state */ \"(ssr)/./node_modules/@tiptap/pm/state/dist/index.js\");\n/* harmony import */ var _tiptap_pm_view__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tiptap/pm/view */ \"(ssr)/./node_modules/@tiptap/pm/view/dist/index.js\");\n/* harmony import */ var _tiptap_pm_keymap__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tiptap/pm/keymap */ \"(ssr)/./node_modules/@tiptap/pm/keymap/dist/index.js\");\n/* harmony import */ var _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @tiptap/pm/model */ \"(ssr)/./node_modules/@tiptap/pm/model/dist/index.js\");\n/* harmony import */ var _tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @tiptap/pm/transform */ \"(ssr)/./node_modules/@tiptap/pm/transform/dist/index.js\");\n/* harmony import */ var _tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @tiptap/pm/commands */ \"(ssr)/./node_modules/@tiptap/pm/commands/dist/index.js\");\n/* harmony import */ var _tiptap_pm_schema_list__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @tiptap/pm/schema-list */ \"(ssr)/./node_modules/@tiptap/pm/schema-list/dist/index.js\");\nfunction _readOnlyError(name) { throw new TypeError(\"\\\"\" + name + \"\\\" is read-only\"); }\nfunction _callSuper(_this, derived, args) {\n  function isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n      return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    } catch (e) {\n      return false;\n    }\n  }\n  derived = _getPrototypeOf(derived);\n  return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));\n}\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\n\n\n\n\n\n\n\n/**\n * Takes a Transaction & Editor State and turns it into a chainable state object\n * @param config The transaction and state to create the chainable state from\n * @returns A chainable Editor state object\n */\nfunction createChainableState(config) {\n  var state = config.state,\n    transaction = config.transaction;\n  var selection = transaction.selection;\n  var doc = transaction.doc;\n  var storedMarks = transaction.storedMarks;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    apply: state.apply.bind(state),\n    applyTransaction: state.applyTransaction.bind(state),\n    plugins: state.plugins,\n    schema: state.schema,\n    reconfigure: state.reconfigure.bind(state),\n    toJSON: state.toJSON.bind(state),\n    get storedMarks() {\n      return storedMarks;\n    },\n    get selection() {\n      return selection;\n    },\n    get doc() {\n      return doc;\n    },\n    get tr() {\n      selection = transaction.selection;\n      doc = transaction.doc;\n      storedMarks = transaction.storedMarks;\n      return transaction;\n    }\n  });\n}\nvar CommandManager = /*#__PURE__*/function () {\n  function CommandManager(props) {\n    _classCallCheck(this, CommandManager);\n    this.editor = props.editor;\n    this.rawCommands = this.editor.extensionManager.commands;\n    this.customState = props.state;\n  }\n  return _createClass(CommandManager, [{\n    key: \"hasCustomState\",\n    get: function get() {\n      return !!this.customState;\n    }\n  }, {\n    key: \"state\",\n    get: function get() {\n      return this.customState || this.editor.state;\n    }\n  }, {\n    key: \"commands\",\n    get: function get() {\n      var _this = this;\n      var rawCommands = this.rawCommands,\n        editor = this.editor,\n        state = this.state;\n      var view = editor.view;\n      var tr = state.tr;\n      var props = this.buildProps(tr);\n      return Object.fromEntries(Object.entries(rawCommands).map(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          name = _ref2[0],\n          command = _ref2[1];\n        var method = function method() {\n          var callback = command.apply(void 0, arguments)(props);\n          if (!tr.getMeta('preventDispatch') && !_this.hasCustomState) {\n            view.dispatch(tr);\n          }\n          return callback;\n        };\n        return [name, method];\n      }));\n    }\n  }, {\n    key: \"chain\",\n    get: function get() {\n      var _this2 = this;\n      return function () {\n        return _this2.createChain();\n      };\n    }\n  }, {\n    key: \"can\",\n    get: function get() {\n      var _this3 = this;\n      return function () {\n        return _this3.createCan();\n      };\n    }\n  }, {\n    key: \"createChain\",\n    value: function createChain(startTr) {\n      var _this4 = this;\n      var shouldDispatch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var rawCommands = this.rawCommands,\n        editor = this.editor,\n        state = this.state;\n      var view = editor.view;\n      var callbacks = [];\n      var hasStartTransaction = !!startTr;\n      var tr = startTr || state.tr;\n      var run = function run() {\n        if (!hasStartTransaction && shouldDispatch && !tr.getMeta('preventDispatch') && !_this4.hasCustomState) {\n          view.dispatch(tr);\n        }\n        return callbacks.every(function (callback) {\n          return callback === true;\n        });\n      };\n      var chain = _objectSpread(_objectSpread({}, Object.fromEntries(Object.entries(rawCommands).map(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n          name = _ref4[0],\n          command = _ref4[1];\n        var chainedCommand = function chainedCommand() {\n          var props = _this4.buildProps(tr, shouldDispatch);\n          var callback = command.apply(void 0, arguments)(props);\n          callbacks.push(callback);\n          return chain;\n        };\n        return [name, chainedCommand];\n      }))), {}, {\n        run: run\n      });\n      return chain;\n    }\n  }, {\n    key: \"createCan\",\n    value: function createCan(startTr) {\n      var _this5 = this;\n      var rawCommands = this.rawCommands,\n        state = this.state;\n      var dispatch = false;\n      var tr = startTr || state.tr;\n      var props = this.buildProps(tr, dispatch);\n      var formattedCommands = Object.fromEntries(Object.entries(rawCommands).map(function (_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 2),\n          name = _ref6[0],\n          command = _ref6[1];\n        return [name, function () {\n          return command.apply(void 0, arguments)(_objectSpread(_objectSpread({}, props), {}, {\n            dispatch: undefined\n          }));\n        }];\n      }));\n      return _objectSpread(_objectSpread({}, formattedCommands), {}, {\n        chain: function chain() {\n          return _this5.createChain(tr, dispatch);\n        }\n      });\n    }\n  }, {\n    key: \"buildProps\",\n    value: function buildProps(tr) {\n      var _this6 = this;\n      var shouldDispatch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var rawCommands = this.rawCommands,\n        editor = this.editor,\n        state = this.state;\n      var view = editor.view;\n      var props = {\n        tr: tr,\n        editor: editor,\n        view: view,\n        state: createChainableState({\n          state: state,\n          transaction: tr\n        }),\n        dispatch: shouldDispatch ? function () {\n          return undefined;\n        } : undefined,\n        chain: function chain() {\n          return _this6.createChain(tr, shouldDispatch);\n        },\n        can: function can() {\n          return _this6.createCan(tr);\n        },\n        get commands() {\n          return Object.fromEntries(Object.entries(rawCommands).map(function (_ref7) {\n            var _ref8 = _slicedToArray(_ref7, 2),\n              name = _ref8[0],\n              command = _ref8[1];\n            return [name, function () {\n              return command.apply(void 0, arguments)(props);\n            }];\n          }));\n        }\n      };\n      return props;\n    }\n  }]);\n}();\nvar EventEmitter = /*#__PURE__*/function () {\n  function EventEmitter() {\n    _classCallCheck(this, EventEmitter);\n    this.callbacks = {};\n  }\n  return _createClass(EventEmitter, [{\n    key: \"on\",\n    value: function on(event, fn) {\n      if (!this.callbacks[event]) {\n        this.callbacks[event] = [];\n      }\n      this.callbacks[event].push(fn);\n      return this;\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(event) {\n      var _this7 = this;\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      var callbacks = this.callbacks[event];\n      if (callbacks) {\n        callbacks.forEach(function (callback) {\n          return callback.apply(_this7, args);\n        });\n      }\n      return this;\n    }\n  }, {\n    key: \"off\",\n    value: function off(event, fn) {\n      var callbacks = this.callbacks[event];\n      if (callbacks) {\n        if (fn) {\n          this.callbacks[event] = callbacks.filter(function (callback) {\n            return callback !== fn;\n          });\n        } else {\n          delete this.callbacks[event];\n        }\n      }\n      return this;\n    }\n  }, {\n    key: \"once\",\n    value: function once(event, fn) {\n      var _this8 = this;\n      var _onceFn = function onceFn() {\n        _this8.off(event, _onceFn);\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n        fn.apply(_this8, args);\n      };\n      return this.on(event, _onceFn);\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners() {\n      this.callbacks = {};\n    }\n  }]);\n}();\n/**\n * Returns a field from an extension\n * @param extension The Tiptap extension\n * @param field The field, for example `renderHTML` or `priority`\n * @param context The context object that should be passed as `this` into the function\n * @returns The field value\n */\nfunction getExtensionField(extension, field, context) {\n  if (extension.config[field] === undefined && extension.parent) {\n    return getExtensionField(extension.parent, field, context);\n  }\n  if (typeof extension.config[field] === 'function') {\n    var value = extension.config[field].bind(_objectSpread(_objectSpread({}, context), {}, {\n      parent: extension.parent ? getExtensionField(extension.parent, field, context) : null\n    }));\n    return value;\n  }\n  return extension.config[field];\n}\nfunction splitExtensions(extensions) {\n  var baseExtensions = extensions.filter(function (extension) {\n    return extension.type === 'extension';\n  });\n  var nodeExtensions = extensions.filter(function (extension) {\n    return extension.type === 'node';\n  });\n  var markExtensions = extensions.filter(function (extension) {\n    return extension.type === 'mark';\n  });\n  return {\n    baseExtensions: baseExtensions,\n    nodeExtensions: nodeExtensions,\n    markExtensions: markExtensions\n  };\n}\n\n/**\n * Get a list of all extension attributes defined in `addAttribute` and `addGlobalAttribute`.\n * @param extensions List of extensions\n */\nfunction getAttributesFromExtensions(extensions) {\n  var extensionAttributes = [];\n  var _splitExtensions = splitExtensions(extensions),\n    nodeExtensions = _splitExtensions.nodeExtensions,\n    markExtensions = _splitExtensions.markExtensions;\n  var nodeAndMarkExtensions = [].concat(_toConsumableArray(nodeExtensions), _toConsumableArray(markExtensions));\n  var defaultAttribute = {\n    \"default\": null,\n    rendered: true,\n    renderHTML: null,\n    parseHTML: null,\n    keepOnSplit: true,\n    isRequired: false\n  };\n  extensions.forEach(function (extension) {\n    var context = {\n      name: extension.name,\n      options: extension.options,\n      storage: extension.storage,\n      extensions: nodeAndMarkExtensions\n    };\n    var addGlobalAttributes = getExtensionField(extension, 'addGlobalAttributes', context);\n    if (!addGlobalAttributes) {\n      return;\n    }\n    var globalAttributes = addGlobalAttributes();\n    globalAttributes.forEach(function (globalAttribute) {\n      globalAttribute.types.forEach(function (type) {\n        Object.entries(globalAttribute.attributes).forEach(function (_ref9) {\n          var _ref10 = _slicedToArray(_ref9, 2),\n            name = _ref10[0],\n            attribute = _ref10[1];\n          extensionAttributes.push({\n            type: type,\n            name: name,\n            attribute: _objectSpread(_objectSpread({}, defaultAttribute), attribute)\n          });\n        });\n      });\n    });\n  });\n  nodeAndMarkExtensions.forEach(function (extension) {\n    var context = {\n      name: extension.name,\n      options: extension.options,\n      storage: extension.storage\n    };\n    var addAttributes = getExtensionField(extension, 'addAttributes', context);\n    if (!addAttributes) {\n      return;\n    }\n    // TODO: remove `as Attributes`\n    var attributes = addAttributes();\n    Object.entries(attributes).forEach(function (_ref11) {\n      var _ref12 = _slicedToArray(_ref11, 2),\n        name = _ref12[0],\n        attribute = _ref12[1];\n      var mergedAttr = _objectSpread(_objectSpread({}, defaultAttribute), attribute);\n      if (typeof (mergedAttr === null || mergedAttr === void 0 ? void 0 : mergedAttr[\"default\"]) === 'function') {\n        mergedAttr[\"default\"] = mergedAttr[\"default\"]();\n      }\n      if ((mergedAttr === null || mergedAttr === void 0 ? void 0 : mergedAttr.isRequired) && (mergedAttr === null || mergedAttr === void 0 ? void 0 : mergedAttr[\"default\"]) === undefined) {\n        delete mergedAttr[\"default\"];\n      }\n      extensionAttributes.push({\n        type: extension.name,\n        name: name,\n        attribute: mergedAttr\n      });\n    });\n  });\n  return extensionAttributes;\n}\nfunction getNodeType(nameOrType, schema) {\n  if (typeof nameOrType === 'string') {\n    if (!schema.nodes[nameOrType]) {\n      throw Error(\"There is no node type named '\".concat(nameOrType, \"'. Maybe you forgot to add the extension?\"));\n    }\n    return schema.nodes[nameOrType];\n  }\n  return nameOrType;\n}\nfunction mergeAttributes() {\n  for (var _len3 = arguments.length, objects = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    objects[_key3] = arguments[_key3];\n  }\n  return objects.filter(function (item) {\n    return !!item;\n  }).reduce(function (items, item) {\n    var mergedAttributes = _objectSpread({}, items);\n    Object.entries(item).forEach(function (_ref13) {\n      var _ref14 = _slicedToArray(_ref13, 2),\n        key = _ref14[0],\n        value = _ref14[1];\n      var exists = mergedAttributes[key];\n      if (!exists) {\n        mergedAttributes[key] = value;\n        return;\n      }\n      if (key === 'class') {\n        var valueClasses = value ? String(value).split(' ') : [];\n        var existingClasses = mergedAttributes[key] ? mergedAttributes[key].split(' ') : [];\n        var insertClasses = valueClasses.filter(function (valueClass) {\n          return !existingClasses.includes(valueClass);\n        });\n        mergedAttributes[key] = [].concat(_toConsumableArray(existingClasses), _toConsumableArray(insertClasses)).join(' ');\n      } else if (key === 'style') {\n        var newStyles = value ? value.split(';').map(function (style) {\n          return style.trim();\n        }).filter(Boolean) : [];\n        var existingStyles = mergedAttributes[key] ? mergedAttributes[key].split(';').map(function (style) {\n          return style.trim();\n        }).filter(Boolean) : [];\n        var styleMap = new Map();\n        existingStyles.forEach(function (style) {\n          var _style$split$map = style.split(':').map(function (part) {\n              return part.trim();\n            }),\n            _style$split$map2 = _slicedToArray(_style$split$map, 2),\n            property = _style$split$map2[0],\n            val = _style$split$map2[1];\n          styleMap.set(property, val);\n        });\n        newStyles.forEach(function (style) {\n          var _style$split$map3 = style.split(':').map(function (part) {\n              return part.trim();\n            }),\n            _style$split$map4 = _slicedToArray(_style$split$map3, 2),\n            property = _style$split$map4[0],\n            val = _style$split$map4[1];\n          styleMap.set(property, val);\n        });\n        mergedAttributes[key] = Array.from(styleMap.entries()).map(function (_ref15) {\n          var _ref16 = _slicedToArray(_ref15, 2),\n            property = _ref16[0],\n            val = _ref16[1];\n          return \"\".concat(property, \": \").concat(val);\n        }).join('; ');\n      } else {\n        mergedAttributes[key] = value;\n      }\n    });\n    return mergedAttributes;\n  }, {});\n}\nfunction getRenderedAttributes(nodeOrMark, extensionAttributes) {\n  return extensionAttributes.filter(function (attribute) {\n    return attribute.type === nodeOrMark.type.name;\n  }).filter(function (item) {\n    return item.attribute.rendered;\n  }).map(function (item) {\n    if (!item.attribute.renderHTML) {\n      return _defineProperty({}, item.name, nodeOrMark.attrs[item.name]);\n    }\n    return item.attribute.renderHTML(nodeOrMark.attrs) || {};\n  }).reduce(function (attributes, attribute) {\n    return mergeAttributes(attributes, attribute);\n  }, {});\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\nfunction isFunction(value) {\n  return typeof value === 'function';\n}\n\n/**\n * Optionally calls `value` as a function.\n * Otherwise it is returned directly.\n * @param value Function or any value.\n * @param context Optional context to bind to function.\n * @param props Optional props to pass to function.\n */\nfunction callOrReturn(value) {\n  var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  if (isFunction(value)) {\n    for (var _len4 = arguments.length, props = new Array(_len4 > 2 ? _len4 - 2 : 0), _key4 = 2; _key4 < _len4; _key4++) {\n      props[_key4 - 2] = arguments[_key4];\n    }\n    if (context) {\n      return value.bind(context).apply(void 0, props);\n    }\n    return value.apply(void 0, props);\n  }\n  return value;\n}\nfunction isEmptyObject() {\n  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return Object.keys(value).length === 0 && value.constructor === Object;\n}\nfunction fromString(value) {\n  if (typeof value !== 'string') {\n    return value;\n  }\n  if (value.match(/^[+-]?(?:\\d*\\.)?\\d+$/)) {\n    return Number(value);\n  }\n  if (value === 'true') {\n    return true;\n  }\n  if (value === 'false') {\n    return false;\n  }\n  return value;\n}\n\n/**\n * This function merges extension attributes into parserule attributes (`attrs` or `getAttrs`).\n * Cancels when `getAttrs` returned `false`.\n * @param parseRule ProseMirror ParseRule\n * @param extensionAttributes List of attributes to inject\n */\nfunction injectExtensionAttributesToParseRule(parseRule, extensionAttributes) {\n  if ('style' in parseRule) {\n    return parseRule;\n  }\n  return _objectSpread(_objectSpread({}, parseRule), {}, {\n    getAttrs: function getAttrs(node) {\n      var oldAttributes = parseRule.getAttrs ? parseRule.getAttrs(node) : parseRule.attrs;\n      if (oldAttributes === false) {\n        return false;\n      }\n      var newAttributes = extensionAttributes.reduce(function (items, item) {\n        var value = item.attribute.parseHTML ? item.attribute.parseHTML(node) : fromString(node.getAttribute(item.name));\n        if (value === null || value === undefined) {\n          return items;\n        }\n        return _objectSpread(_objectSpread({}, items), {}, _defineProperty({}, item.name, value));\n      }, {});\n      return _objectSpread(_objectSpread({}, oldAttributes), newAttributes);\n    }\n  });\n}\nfunction cleanUpSchemaItem(data) {\n  return Object.fromEntries(\n  // @ts-ignore\n  Object.entries(data).filter(function (_ref18) {\n    var _ref19 = _slicedToArray(_ref18, 2),\n      key = _ref19[0],\n      value = _ref19[1];\n    if (key === 'attrs' && isEmptyObject(value)) {\n      return false;\n    }\n    return value !== null && value !== undefined;\n  }));\n}\n/**\n * Creates a new Prosemirror schema based on the given extensions.\n * @param extensions An array of Tiptap extensions\n * @param editor The editor instance\n * @returns A Prosemirror schema\n */\nfunction getSchemaByResolvedExtensions(extensions, editor) {\n  var _a;\n  var allAttributes = getAttributesFromExtensions(extensions);\n  var _splitExtensions2 = splitExtensions(extensions),\n    nodeExtensions = _splitExtensions2.nodeExtensions,\n    markExtensions = _splitExtensions2.markExtensions;\n  var topNode = (_a = nodeExtensions.find(function (extension) {\n    return getExtensionField(extension, 'topNode');\n  })) === null || _a === void 0 ? void 0 : _a.name;\n  var nodes = Object.fromEntries(nodeExtensions.map(function (extension) {\n    var extensionAttributes = allAttributes.filter(function (attribute) {\n      return attribute.type === extension.name;\n    });\n    var context = {\n      name: extension.name,\n      options: extension.options,\n      storage: extension.storage,\n      editor: editor\n    };\n    var extraNodeFields = extensions.reduce(function (fields, e) {\n      var extendNodeSchema = getExtensionField(e, 'extendNodeSchema', context);\n      return _objectSpread(_objectSpread({}, fields), extendNodeSchema ? extendNodeSchema(extension) : {});\n    }, {});\n    var schema = cleanUpSchemaItem(_objectSpread(_objectSpread({}, extraNodeFields), {}, {\n      content: callOrReturn(getExtensionField(extension, 'content', context)),\n      marks: callOrReturn(getExtensionField(extension, 'marks', context)),\n      group: callOrReturn(getExtensionField(extension, 'group', context)),\n      inline: callOrReturn(getExtensionField(extension, 'inline', context)),\n      atom: callOrReturn(getExtensionField(extension, 'atom', context)),\n      selectable: callOrReturn(getExtensionField(extension, 'selectable', context)),\n      draggable: callOrReturn(getExtensionField(extension, 'draggable', context)),\n      code: callOrReturn(getExtensionField(extension, 'code', context)),\n      whitespace: callOrReturn(getExtensionField(extension, 'whitespace', context)),\n      linebreakReplacement: callOrReturn(getExtensionField(extension, 'linebreakReplacement', context)),\n      defining: callOrReturn(getExtensionField(extension, 'defining', context)),\n      isolating: callOrReturn(getExtensionField(extension, 'isolating', context)),\n      attrs: Object.fromEntries(extensionAttributes.map(function (extensionAttribute) {\n        var _a;\n        return [extensionAttribute.name, {\n          \"default\": (_a = extensionAttribute === null || extensionAttribute === void 0 ? void 0 : extensionAttribute.attribute) === null || _a === void 0 ? void 0 : _a[\"default\"]\n        }];\n      }))\n    }));\n    var parseHTML = callOrReturn(getExtensionField(extension, 'parseHTML', context));\n    if (parseHTML) {\n      schema.parseDOM = parseHTML.map(function (parseRule) {\n        return injectExtensionAttributesToParseRule(parseRule, extensionAttributes);\n      });\n    }\n    var renderHTML = getExtensionField(extension, 'renderHTML', context);\n    if (renderHTML) {\n      schema.toDOM = function (node) {\n        return renderHTML({\n          node: node,\n          HTMLAttributes: getRenderedAttributes(node, extensionAttributes)\n        });\n      };\n    }\n    var renderText = getExtensionField(extension, 'renderText', context);\n    if (renderText) {\n      schema.toText = renderText;\n    }\n    return [extension.name, schema];\n  }));\n  var marks = Object.fromEntries(markExtensions.map(function (extension) {\n    var extensionAttributes = allAttributes.filter(function (attribute) {\n      return attribute.type === extension.name;\n    });\n    var context = {\n      name: extension.name,\n      options: extension.options,\n      storage: extension.storage,\n      editor: editor\n    };\n    var extraMarkFields = extensions.reduce(function (fields, e) {\n      var extendMarkSchema = getExtensionField(e, 'extendMarkSchema', context);\n      return _objectSpread(_objectSpread({}, fields), extendMarkSchema ? extendMarkSchema(extension) : {});\n    }, {});\n    var schema = cleanUpSchemaItem(_objectSpread(_objectSpread({}, extraMarkFields), {}, {\n      inclusive: callOrReturn(getExtensionField(extension, 'inclusive', context)),\n      excludes: callOrReturn(getExtensionField(extension, 'excludes', context)),\n      group: callOrReturn(getExtensionField(extension, 'group', context)),\n      spanning: callOrReturn(getExtensionField(extension, 'spanning', context)),\n      code: callOrReturn(getExtensionField(extension, 'code', context)),\n      attrs: Object.fromEntries(extensionAttributes.map(function (extensionAttribute) {\n        var _a;\n        return [extensionAttribute.name, {\n          \"default\": (_a = extensionAttribute === null || extensionAttribute === void 0 ? void 0 : extensionAttribute.attribute) === null || _a === void 0 ? void 0 : _a[\"default\"]\n        }];\n      }))\n    }));\n    var parseHTML = callOrReturn(getExtensionField(extension, 'parseHTML', context));\n    if (parseHTML) {\n      schema.parseDOM = parseHTML.map(function (parseRule) {\n        return injectExtensionAttributesToParseRule(parseRule, extensionAttributes);\n      });\n    }\n    var renderHTML = getExtensionField(extension, 'renderHTML', context);\n    if (renderHTML) {\n      schema.toDOM = function (mark) {\n        return renderHTML({\n          mark: mark,\n          HTMLAttributes: getRenderedAttributes(mark, extensionAttributes)\n        });\n      };\n    }\n    return [extension.name, schema];\n  }));\n  return new _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.Schema({\n    topNode: topNode,\n    nodes: nodes,\n    marks: marks\n  });\n}\n\n/**\n * Tries to get a node or mark type by its name.\n * @param name The name of the node or mark type\n * @param schema The Prosemiror schema to search in\n * @returns The node or mark type, or null if it doesn't exist\n */\nfunction getSchemaTypeByName(name, schema) {\n  return schema.nodes[name] || schema.marks[name] || null;\n}\nfunction isExtensionRulesEnabled(extension, enabled) {\n  if (Array.isArray(enabled)) {\n    return enabled.some(function (enabledExtension) {\n      var name = typeof enabledExtension === 'string' ? enabledExtension : enabledExtension.name;\n      return name === extension.name;\n    });\n  }\n  return enabled;\n}\nfunction getHTMLFromFragment(fragment, schema) {\n  var documentFragment = _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.DOMSerializer.fromSchema(schema).serializeFragment(fragment);\n  var temporaryDocument = document.implementation.createHTMLDocument();\n  var container = temporaryDocument.createElement('div');\n  container.appendChild(documentFragment);\n  return container.innerHTML;\n}\n\n/**\n * Returns the text content of a resolved prosemirror position\n * @param $from The resolved position to get the text content from\n * @param maxMatch The maximum number of characters to match\n * @returns The text content\n */\nvar getTextContentFromNodes = function getTextContentFromNodes($from) {\n  var maxMatch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;\n  var textBefore = '';\n  var sliceEndPos = $from.parentOffset;\n  $from.parent.nodesBetween(Math.max(0, sliceEndPos - maxMatch), sliceEndPos, function (node, pos, parent, index) {\n    var _a, _b;\n    var chunk = ((_b = (_a = node.type.spec).toText) === null || _b === void 0 ? void 0 : _b.call(_a, {\n      node: node,\n      pos: pos,\n      parent: parent,\n      index: index\n    })) || node.textContent || '%leaf%';\n    textBefore += node.isAtom && !node.isText ? chunk : chunk.slice(0, Math.max(0, sliceEndPos - pos));\n  });\n  return textBefore;\n};\nfunction isRegExp(value) {\n  return Object.prototype.toString.call(value) === '[object RegExp]';\n}\nvar InputRule = /*#__PURE__*/_createClass(function InputRule(config) {\n  _classCallCheck(this, InputRule);\n  this.find = config.find;\n  this.handler = config.handler;\n});\nvar inputRuleMatcherHandler = function inputRuleMatcherHandler(text, find) {\n  if (isRegExp(find)) {\n    return find.exec(text);\n  }\n  var inputRuleMatch = find(text);\n  if (!inputRuleMatch) {\n    return null;\n  }\n  var result = [inputRuleMatch.text];\n  result.index = inputRuleMatch.index;\n  result.input = text;\n  result.data = inputRuleMatch.data;\n  if (inputRuleMatch.replaceWith) {\n    if (!inputRuleMatch.text.includes(inputRuleMatch.replaceWith)) {\n      console.warn('[tiptap warn]: \"inputRuleMatch.replaceWith\" must be part of \"inputRuleMatch.text\".');\n    }\n    result.push(inputRuleMatch.replaceWith);\n  }\n  return result;\n};\nfunction run$1(config) {\n  var _a;\n  var editor = config.editor,\n    from = config.from,\n    to = config.to,\n    text = config.text,\n    rules = config.rules,\n    plugin = config.plugin;\n  var view = editor.view;\n  if (view.composing) {\n    return false;\n  }\n  var $from = view.state.doc.resolve(from);\n  if (\n  // check for code node\n  $from.parent.type.spec.code\n  // check for code mark\n  || !!((_a = $from.nodeBefore || $from.nodeAfter) === null || _a === void 0 ? void 0 : _a.marks.find(function (mark) {\n    return mark.type.spec.code;\n  }))) {\n    return false;\n  }\n  var matched = false;\n  var textBefore = getTextContentFromNodes($from) + text;\n  rules.forEach(function (rule) {\n    if (matched) {\n      return;\n    }\n    var match = inputRuleMatcherHandler(textBefore, rule.find);\n    if (!match) {\n      return;\n    }\n    var tr = view.state.tr;\n    var state = createChainableState({\n      state: view.state,\n      transaction: tr\n    });\n    var range = {\n      from: from - (match[0].length - text.length),\n      to: to\n    };\n    var _CommandManager = new CommandManager({\n        editor: editor,\n        state: state\n      }),\n      commands = _CommandManager.commands,\n      chain = _CommandManager.chain,\n      can = _CommandManager.can;\n    var handler = rule.handler({\n      state: state,\n      range: range,\n      match: match,\n      commands: commands,\n      chain: chain,\n      can: can\n    });\n    // stop if there are no changes\n    if (handler === null || !tr.steps.length) {\n      return;\n    }\n    // store transform as meta data\n    // so we can undo input rules within the `undoInputRules` command\n    tr.setMeta(plugin, {\n      transform: tr,\n      from: from,\n      to: to,\n      text: text\n    });\n    view.dispatch(tr);\n    matched = true;\n  });\n  return matched;\n}\n/**\n * Create an input rules plugin. When enabled, it will cause text\n * input that matches any of the given rules to trigger the rule’s\n * action.\n */\nfunction inputRulesPlugin(props) {\n  var editor = props.editor,\n    rules = props.rules;\n  var plugin = new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n    state: {\n      init: function init() {\n        return null;\n      },\n      apply: function apply(tr, prev, state) {\n        var stored = tr.getMeta(plugin);\n        if (stored) {\n          return stored;\n        }\n        // if InputRule is triggered by insertContent()\n        var simulatedInputMeta = tr.getMeta('applyInputRules');\n        var isSimulatedInput = !!simulatedInputMeta;\n        if (isSimulatedInput) {\n          setTimeout(function () {\n            var text = simulatedInputMeta.text;\n            if (typeof text === 'string') {\n              text = text;\n            } else {\n              text = getHTMLFromFragment(_tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.Fragment.from(text), state.schema);\n            }\n            var from = simulatedInputMeta.from;\n            var to = from + text.length;\n            run$1({\n              editor: editor,\n              from: from,\n              to: to,\n              text: text,\n              rules: rules,\n              plugin: plugin\n            });\n          });\n        }\n        return tr.selectionSet || tr.docChanged ? null : prev;\n      }\n    },\n    props: {\n      handleTextInput: function handleTextInput(view, from, to, text) {\n        return run$1({\n          editor: editor,\n          from: from,\n          to: to,\n          text: text,\n          rules: rules,\n          plugin: plugin\n        });\n      },\n      handleDOMEvents: {\n        compositionend: function compositionend(view) {\n          setTimeout(function () {\n            var $cursor = view.state.selection.$cursor;\n            if ($cursor) {\n              run$1({\n                editor: editor,\n                from: $cursor.pos,\n                to: $cursor.pos,\n                text: '',\n                rules: rules,\n                plugin: plugin\n              });\n            }\n          });\n          return false;\n        }\n      },\n      // add support for input rules to trigger on enter\n      // this is useful for example for code blocks\n      handleKeyDown: function handleKeyDown(view, event) {\n        if (event.key !== 'Enter') {\n          return false;\n        }\n        var $cursor = view.state.selection.$cursor;\n        if ($cursor) {\n          return run$1({\n            editor: editor,\n            from: $cursor.pos,\n            to: $cursor.pos,\n            text: '\\n',\n            rules: rules,\n            plugin: plugin\n          });\n        }\n        return false;\n      }\n    },\n    // @ts-ignore\n    isInputRules: true\n  });\n  return plugin;\n}\n\n// see: https://github.com/mesqueeb/is-what/blob/88d6e4ca92fb2baab6003c54e02eedf4e729e5ab/src/index.ts\nfunction getType(value) {\n  return Object.prototype.toString.call(value).slice(8, -1);\n}\nfunction isPlainObject(value) {\n  if (getType(value) !== 'Object') {\n    return false;\n  }\n  return value.constructor === Object && Object.getPrototypeOf(value) === Object.prototype;\n}\nfunction mergeDeep(target, source) {\n  var output = _objectSpread({}, target);\n  if (isPlainObject(target) && isPlainObject(source)) {\n    Object.keys(source).forEach(function (key) {\n      if (isPlainObject(source[key]) && isPlainObject(target[key])) {\n        output[key] = mergeDeep(target[key], source[key]);\n      } else {\n        output[key] = source[key];\n      }\n    });\n  }\n  return output;\n}\n\n/**\n * The Mark class is used to create custom mark extensions.\n * @see https://tiptap.dev/api/extensions#create-a-new-extension\n */\nvar Mark = /*#__PURE__*/function () {\n  function Mark() {\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, Mark);\n    this.type = 'mark';\n    this.name = 'mark';\n    this.parent = null;\n    this.child = null;\n    this.config = {\n      name: this.name,\n      defaultOptions: {}\n    };\n    this.config = _objectSpread(_objectSpread({}, this.config), config);\n    this.name = this.config.name;\n    if (config.defaultOptions && Object.keys(config.defaultOptions).length > 0) {\n      console.warn(\"[tiptap warn]: BREAKING CHANGE: \\\"defaultOptions\\\" is deprecated. Please use \\\"addOptions\\\" instead. Found in extension: \\\"\".concat(this.name, \"\\\".\"));\n    }\n    // TODO: remove `addOptions` fallback\n    this.options = this.config.defaultOptions;\n    if (this.config.addOptions) {\n      this.options = callOrReturn(getExtensionField(this, 'addOptions', {\n        name: this.name\n      }));\n    }\n    this.storage = callOrReturn(getExtensionField(this, 'addStorage', {\n      name: this.name,\n      options: this.options\n    })) || {};\n  }\n  return _createClass(Mark, [{\n    key: \"configure\",\n    value: function configure() {\n      var _this9 = this;\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      // return a new instance so we can use the same extension\n      // with different calls of `configure`\n      var extension = this.extend(_objectSpread(_objectSpread({}, this.config), {}, {\n        addOptions: function addOptions() {\n          return mergeDeep(_this9.options, options);\n        }\n      }));\n      // Always preserve the current name\n      extension.name = this.name;\n      // Set the parent to be our parent\n      extension.parent = this.parent;\n      return extension;\n    }\n  }, {\n    key: \"extend\",\n    value: function extend() {\n      var extendedConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var extension = new Mark(extendedConfig);\n      extension.parent = this;\n      this.child = extension;\n      extension.name = extendedConfig.name ? extendedConfig.name : extension.parent.name;\n      if (extendedConfig.defaultOptions && Object.keys(extendedConfig.defaultOptions).length > 0) {\n        console.warn(\"[tiptap warn]: BREAKING CHANGE: \\\"defaultOptions\\\" is deprecated. Please use \\\"addOptions\\\" instead. Found in extension: \\\"\".concat(extension.name, \"\\\".\"));\n      }\n      extension.options = callOrReturn(getExtensionField(extension, 'addOptions', {\n        name: extension.name\n      }));\n      extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {\n        name: extension.name,\n        options: extension.options\n      }));\n      return extension;\n    }\n  }], [{\n    key: \"create\",\n    value: function create() {\n      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return new Mark(config);\n    }\n  }, {\n    key: \"handleExit\",\n    value: function handleExit(_ref20) {\n      var editor = _ref20.editor,\n        mark = _ref20.mark;\n      var tr = editor.state.tr;\n      var currentPos = editor.state.selection.$from;\n      var isAtEnd = currentPos.pos === currentPos.end();\n      if (isAtEnd) {\n        var currentMarks = currentPos.marks();\n        var isInMark = !!currentMarks.find(function (m) {\n          return (m === null || m === void 0 ? void 0 : m.type.name) === mark.name;\n        });\n        if (!isInMark) {\n          return false;\n        }\n        var removeMark = currentMarks.find(function (m) {\n          return (m === null || m === void 0 ? void 0 : m.type.name) === mark.name;\n        });\n        if (removeMark) {\n          tr.removeStoredMark(removeMark);\n        }\n        tr.insertText(' ', currentPos.pos);\n        editor.view.dispatch(tr);\n        return true;\n      }\n      return false;\n    }\n  }]);\n}();\nfunction isNumber(value) {\n  return typeof value === 'number';\n}\n\n/**\n * Paste rules are used to react to pasted content.\n * @see https://tiptap.dev/docs/editor/extensions/custom-extensions/extend-existing#paste-rules\n */\nvar PasteRule = /*#__PURE__*/_createClass(function PasteRule(config) {\n  _classCallCheck(this, PasteRule);\n  this.find = config.find;\n  this.handler = config.handler;\n});\nvar pasteRuleMatcherHandler = function pasteRuleMatcherHandler(text, find, event) {\n  if (isRegExp(find)) {\n    return _toConsumableArray(text.matchAll(find));\n  }\n  var matches = find(text, event);\n  if (!matches) {\n    return [];\n  }\n  return matches.map(function (pasteRuleMatch) {\n    var result = [pasteRuleMatch.text];\n    result.index = pasteRuleMatch.index;\n    result.input = text;\n    result.data = pasteRuleMatch.data;\n    if (pasteRuleMatch.replaceWith) {\n      if (!pasteRuleMatch.text.includes(pasteRuleMatch.replaceWith)) {\n        console.warn('[tiptap warn]: \"pasteRuleMatch.replaceWith\" must be part of \"pasteRuleMatch.text\".');\n      }\n      result.push(pasteRuleMatch.replaceWith);\n    }\n    return result;\n  });\n};\nfunction run(config) {\n  var editor = config.editor,\n    state = config.state,\n    from = config.from,\n    to = config.to,\n    rule = config.rule,\n    pasteEvent = config.pasteEvent,\n    dropEvent = config.dropEvent;\n  var _CommandManager2 = new CommandManager({\n      editor: editor,\n      state: state\n    }),\n    commands = _CommandManager2.commands,\n    chain = _CommandManager2.chain,\n    can = _CommandManager2.can;\n  var handlers = [];\n  state.doc.nodesBetween(from, to, function (node, pos) {\n    if (!node.isTextblock || node.type.spec.code) {\n      return;\n    }\n    var resolvedFrom = Math.max(from, pos);\n    var resolvedTo = Math.min(to, pos + node.content.size);\n    var textToMatch = node.textBetween(resolvedFrom - pos, resolvedTo - pos, undefined, \"\\uFFFC\");\n    var matches = pasteRuleMatcherHandler(textToMatch, rule.find, pasteEvent);\n    matches.forEach(function (match) {\n      if (match.index === undefined) {\n        return;\n      }\n      var start = resolvedFrom + match.index + 1;\n      var end = start + match[0].length;\n      var range = {\n        from: state.tr.mapping.map(start),\n        to: state.tr.mapping.map(end)\n      };\n      var handler = rule.handler({\n        state: state,\n        range: range,\n        match: match,\n        commands: commands,\n        chain: chain,\n        can: can,\n        pasteEvent: pasteEvent,\n        dropEvent: dropEvent\n      });\n      handlers.push(handler);\n    });\n  });\n  var success = handlers.every(function (handler) {\n    return handler !== null;\n  });\n  return success;\n}\n// When dragging across editors, must get another editor instance to delete selection content.\nvar tiptapDragFromOtherEditor = null;\nvar createClipboardPasteEvent = function createClipboardPasteEvent(text) {\n  var _a;\n  var event = new ClipboardEvent('paste', {\n    clipboardData: new DataTransfer()\n  });\n  (_a = event.clipboardData) === null || _a === void 0 ? void 0 : _a.setData('text/html', text);\n  return event;\n};\n/**\n * Create an paste rules plugin. When enabled, it will cause pasted\n * text that matches any of the given rules to trigger the rule’s\n * action.\n */\nfunction pasteRulesPlugin(props) {\n  var editor = props.editor,\n    rules = props.rules;\n  var dragSourceElement = null;\n  var isPastedFromProseMirror = false;\n  var isDroppedFromProseMirror = false;\n  var pasteEvent = typeof ClipboardEvent !== 'undefined' ? new ClipboardEvent('paste') : null;\n  var dropEvent;\n  try {\n    dropEvent = typeof DragEvent !== 'undefined' ? new DragEvent('drop') : null;\n  } catch (_unused) {\n    dropEvent = null;\n  }\n  var processEvent = function processEvent(_ref21) {\n    var state = _ref21.state,\n      from = _ref21.from,\n      to = _ref21.to,\n      rule = _ref21.rule,\n      pasteEvt = _ref21.pasteEvt;\n    var tr = state.tr;\n    var chainableState = createChainableState({\n      state: state,\n      transaction: tr\n    });\n    var handler = run({\n      editor: editor,\n      state: chainableState,\n      from: Math.max(from - 1, 0),\n      to: to.b - 1,\n      rule: rule,\n      pasteEvent: pasteEvt,\n      dropEvent: dropEvent\n    });\n    if (!handler || !tr.steps.length) {\n      return;\n    }\n    try {\n      dropEvent = typeof DragEvent !== 'undefined' ? new DragEvent('drop') : null;\n    } catch (_unused2) {\n      dropEvent = null;\n    }\n    pasteEvent = typeof ClipboardEvent !== 'undefined' ? new ClipboardEvent('paste') : null;\n    return tr;\n  };\n  var plugins = rules.map(function (rule) {\n    return new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n      // we register a global drag handler to track the current drag source element\n      view: function view(_view2) {\n        var handleDragstart = function handleDragstart(event) {\n          var _a;\n          dragSourceElement = ((_a = _view2.dom.parentElement) === null || _a === void 0 ? void 0 : _a.contains(event.target)) ? _view2.dom.parentElement : null;\n          if (dragSourceElement) {\n            tiptapDragFromOtherEditor = editor;\n          }\n        };\n        var handleDragend = function handleDragend() {\n          if (tiptapDragFromOtherEditor) {\n            tiptapDragFromOtherEditor = null;\n          }\n        };\n        window.addEventListener('dragstart', handleDragstart);\n        window.addEventListener('dragend', handleDragend);\n        return {\n          destroy: function destroy() {\n            window.removeEventListener('dragstart', handleDragstart);\n            window.removeEventListener('dragend', handleDragend);\n          }\n        };\n      },\n      props: {\n        handleDOMEvents: {\n          drop: function drop(view, event) {\n            isDroppedFromProseMirror = dragSourceElement === view.dom.parentElement;\n            dropEvent = event;\n            if (!isDroppedFromProseMirror) {\n              var dragFromOtherEditor = tiptapDragFromOtherEditor;\n              if (dragFromOtherEditor) {\n                // setTimeout to avoid the wrong content after drop, timeout arg can't be empty or 0\n                setTimeout(function () {\n                  var selection = dragFromOtherEditor.state.selection;\n                  if (selection) {\n                    dragFromOtherEditor.commands.deleteRange({\n                      from: selection.from,\n                      to: selection.to\n                    });\n                  }\n                }, 10);\n              }\n            }\n            return false;\n          },\n          paste: function paste(_view, event) {\n            var _a;\n            var html = (_a = event.clipboardData) === null || _a === void 0 ? void 0 : _a.getData('text/html');\n            pasteEvent = event;\n            isPastedFromProseMirror = !!(html === null || html === void 0 ? void 0 : html.includes('data-pm-slice'));\n            return false;\n          }\n        }\n      },\n      appendTransaction: function appendTransaction(transactions, oldState, state) {\n        var transaction = transactions[0];\n        var isPaste = transaction.getMeta('uiEvent') === 'paste' && !isPastedFromProseMirror;\n        var isDrop = transaction.getMeta('uiEvent') === 'drop' && !isDroppedFromProseMirror;\n        // if PasteRule is triggered by insertContent()\n        var simulatedPasteMeta = transaction.getMeta('applyPasteRules');\n        var isSimulatedPaste = !!simulatedPasteMeta;\n        if (!isPaste && !isDrop && !isSimulatedPaste) {\n          return;\n        }\n        // Handle simulated paste\n        if (isSimulatedPaste) {\n          var text = simulatedPasteMeta.text;\n          if (typeof text === 'string') {\n            text = text;\n          } else {\n            text = getHTMLFromFragment(_tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.Fragment.from(text), state.schema);\n          }\n          var _from2 = simulatedPasteMeta.from;\n          var _to2 = _from2 + text.length;\n          var pasteEvt = createClipboardPasteEvent(text);\n          return processEvent({\n            rule: rule,\n            state: state,\n            from: _from2,\n            to: {\n              b: _to2\n            },\n            pasteEvt: pasteEvt\n          });\n        }\n        // handle actual paste/drop\n        var from = oldState.doc.content.findDiffStart(state.doc.content);\n        var to = oldState.doc.content.findDiffEnd(state.doc.content);\n        // stop if there is no changed range\n        if (!isNumber(from) || !to || from === to.b) {\n          return;\n        }\n        return processEvent({\n          rule: rule,\n          state: state,\n          from: from,\n          to: to,\n          pasteEvt: pasteEvent\n        });\n      }\n    });\n  });\n  return plugins;\n}\nfunction findDuplicates(items) {\n  var filtered = items.filter(function (el, index) {\n    return items.indexOf(el) !== index;\n  });\n  return Array.from(new Set(filtered));\n}\nvar ExtensionManager = /*#__PURE__*/function () {\n  function ExtensionManager(extensions, editor) {\n    _classCallCheck(this, ExtensionManager);\n    this.splittableMarks = [];\n    this.editor = editor;\n    this.extensions = ExtensionManager.resolve(extensions);\n    this.schema = getSchemaByResolvedExtensions(this.extensions, editor);\n    this.setupExtensions();\n  }\n  /**\n   * Returns a flattened and sorted extension list while\n   * also checking for duplicated extensions and warns the user.\n   * @param extensions An array of Tiptap extensions\n   * @returns An flattened and sorted array of Tiptap extensions\n   */\n  return _createClass(ExtensionManager, [{\n    key: \"commands\",\n    get:\n    /**\n     * Get all commands from the extensions.\n     * @returns An object with all commands where the key is the command name and the value is the command function\n     */\n    function get() {\n      var _this10 = this;\n      return this.extensions.reduce(function (commands, extension) {\n        var context = {\n          name: extension.name,\n          options: extension.options,\n          storage: extension.storage,\n          editor: _this10.editor,\n          type: getSchemaTypeByName(extension.name, _this10.schema)\n        };\n        var addCommands = getExtensionField(extension, 'addCommands', context);\n        if (!addCommands) {\n          return commands;\n        }\n        return _objectSpread(_objectSpread({}, commands), addCommands());\n      }, {});\n    }\n    /**\n     * Get all registered Prosemirror plugins from the extensions.\n     * @returns An array of Prosemirror plugins\n     */\n  }, {\n    key: \"plugins\",\n    get: function get() {\n      var _this11 = this;\n      var editor = this.editor;\n      // With ProseMirror, first plugins within an array are executed first.\n      // In Tiptap, we provide the ability to override plugins,\n      // so it feels more natural to run plugins at the end of an array first.\n      // That’s why we have to reverse the `extensions` array and sort again\n      // based on the `priority` option.\n      var extensions = ExtensionManager.sort(_toConsumableArray(this.extensions).reverse());\n      var inputRules = [];\n      var pasteRules = [];\n      var allPlugins = extensions.map(function (extension) {\n        var context = {\n          name: extension.name,\n          options: extension.options,\n          storage: extension.storage,\n          editor: editor,\n          type: getSchemaTypeByName(extension.name, _this11.schema)\n        };\n        var plugins = [];\n        var addKeyboardShortcuts = getExtensionField(extension, 'addKeyboardShortcuts', context);\n        var defaultBindings = {};\n        // bind exit handling\n        if (extension.type === 'mark' && getExtensionField(extension, 'exitable', context)) {\n          defaultBindings.ArrowRight = function () {\n            return Mark.handleExit({\n              editor: editor,\n              mark: extension\n            });\n          };\n        }\n        if (addKeyboardShortcuts) {\n          var bindings = Object.fromEntries(Object.entries(addKeyboardShortcuts()).map(function (_ref22) {\n            var _ref23 = _slicedToArray(_ref22, 2),\n              shortcut = _ref23[0],\n              method = _ref23[1];\n            return [shortcut, function () {\n              return method({\n                editor: editor\n              });\n            }];\n          }));\n          defaultBindings = _objectSpread(_objectSpread({}, defaultBindings), bindings);\n        }\n        var keyMapPlugin = (0,_tiptap_pm_keymap__WEBPACK_IMPORTED_MODULE_2__.keymap)(defaultBindings);\n        plugins.push(keyMapPlugin);\n        var addInputRules = getExtensionField(extension, 'addInputRules', context);\n        if (isExtensionRulesEnabled(extension, editor.options.enableInputRules) && addInputRules) {\n          inputRules.push.apply(inputRules, _toConsumableArray(addInputRules()));\n        }\n        var addPasteRules = getExtensionField(extension, 'addPasteRules', context);\n        if (isExtensionRulesEnabled(extension, editor.options.enablePasteRules) && addPasteRules) {\n          pasteRules.push.apply(pasteRules, _toConsumableArray(addPasteRules()));\n        }\n        var addProseMirrorPlugins = getExtensionField(extension, 'addProseMirrorPlugins', context);\n        if (addProseMirrorPlugins) {\n          var proseMirrorPlugins = addProseMirrorPlugins();\n          plugins.push.apply(plugins, _toConsumableArray(proseMirrorPlugins));\n        }\n        return plugins;\n      }).flat();\n      return [inputRulesPlugin({\n        editor: editor,\n        rules: inputRules\n      })].concat(_toConsumableArray(pasteRulesPlugin({\n        editor: editor,\n        rules: pasteRules\n      })), _toConsumableArray(allPlugins));\n    }\n    /**\n     * Get all attributes from the extensions.\n     * @returns An array of attributes\n     */\n  }, {\n    key: \"attributes\",\n    get: function get() {\n      return getAttributesFromExtensions(this.extensions);\n    }\n    /**\n     * Get all node views from the extensions.\n     * @returns An object with all node views where the key is the node name and the value is the node view function\n     */\n  }, {\n    key: \"nodeViews\",\n    get: function get() {\n      var _this12 = this;\n      var editor = this.editor;\n      var _splitExtensions3 = splitExtensions(this.extensions),\n        nodeExtensions = _splitExtensions3.nodeExtensions;\n      return Object.fromEntries(nodeExtensions.filter(function (extension) {\n        return !!getExtensionField(extension, 'addNodeView');\n      }).map(function (extension) {\n        var extensionAttributes = _this12.attributes.filter(function (attribute) {\n          return attribute.type === extension.name;\n        });\n        var context = {\n          name: extension.name,\n          options: extension.options,\n          storage: extension.storage,\n          editor: editor,\n          type: getNodeType(extension.name, _this12.schema)\n        };\n        var addNodeView = getExtensionField(extension, 'addNodeView', context);\n        if (!addNodeView) {\n          return [];\n        }\n        var nodeview = function nodeview(node, view, getPos, decorations, innerDecorations) {\n          var HTMLAttributes = getRenderedAttributes(node, extensionAttributes);\n          return addNodeView()({\n            // pass-through\n            node: node,\n            view: view,\n            getPos: getPos,\n            decorations: decorations,\n            innerDecorations: innerDecorations,\n            // tiptap-specific\n            editor: editor,\n            extension: extension,\n            HTMLAttributes: HTMLAttributes\n          });\n        };\n        return [extension.name, nodeview];\n      }));\n    }\n    /**\n     * Go through all extensions, create extension storages & setup marks\n     * & bind editor event listener.\n     */\n  }, {\n    key: \"setupExtensions\",\n    value: function setupExtensions() {\n      var _this13 = this;\n      this.extensions.forEach(function (extension) {\n        var _a;\n        // store extension storage in editor\n        _this13.editor.extensionStorage[extension.name] = extension.storage;\n        var context = {\n          name: extension.name,\n          options: extension.options,\n          storage: extension.storage,\n          editor: _this13.editor,\n          type: getSchemaTypeByName(extension.name, _this13.schema)\n        };\n        if (extension.type === 'mark') {\n          var keepOnSplit = (_a = callOrReturn(getExtensionField(extension, 'keepOnSplit', context))) !== null && _a !== void 0 ? _a : true;\n          if (keepOnSplit) {\n            _this13.splittableMarks.push(extension.name);\n          }\n        }\n        var onBeforeCreate = getExtensionField(extension, 'onBeforeCreate', context);\n        var onCreate = getExtensionField(extension, 'onCreate', context);\n        var onUpdate = getExtensionField(extension, 'onUpdate', context);\n        var onSelectionUpdate = getExtensionField(extension, 'onSelectionUpdate', context);\n        var onTransaction = getExtensionField(extension, 'onTransaction', context);\n        var onFocus = getExtensionField(extension, 'onFocus', context);\n        var onBlur = getExtensionField(extension, 'onBlur', context);\n        var onDestroy = getExtensionField(extension, 'onDestroy', context);\n        if (onBeforeCreate) {\n          _this13.editor.on('beforeCreate', onBeforeCreate);\n        }\n        if (onCreate) {\n          _this13.editor.on('create', onCreate);\n        }\n        if (onUpdate) {\n          _this13.editor.on('update', onUpdate);\n        }\n        if (onSelectionUpdate) {\n          _this13.editor.on('selectionUpdate', onSelectionUpdate);\n        }\n        if (onTransaction) {\n          _this13.editor.on('transaction', onTransaction);\n        }\n        if (onFocus) {\n          _this13.editor.on('focus', onFocus);\n        }\n        if (onBlur) {\n          _this13.editor.on('blur', onBlur);\n        }\n        if (onDestroy) {\n          _this13.editor.on('destroy', onDestroy);\n        }\n      });\n    }\n  }], [{\n    key: \"resolve\",\n    value: function resolve(extensions) {\n      var resolvedExtensions = ExtensionManager.sort(ExtensionManager.flatten(extensions));\n      var duplicatedNames = findDuplicates(resolvedExtensions.map(function (extension) {\n        return extension.name;\n      }));\n      if (duplicatedNames.length) {\n        console.warn(\"[tiptap warn]: Duplicate extension names found: [\".concat(duplicatedNames.map(function (item) {\n          return \"'\".concat(item, \"'\");\n        }).join(', '), \"]. This can lead to issues.\"));\n      }\n      return resolvedExtensions;\n    }\n    /**\n     * Create a flattened array of extensions by traversing the `addExtensions` field.\n     * @param extensions An array of Tiptap extensions\n     * @returns A flattened array of Tiptap extensions\n     */\n  }, {\n    key: \"flatten\",\n    value: function flatten(extensions) {\n      var _this14 = this;\n      return extensions.map(function (extension) {\n        var context = {\n          name: extension.name,\n          options: extension.options,\n          storage: extension.storage\n        };\n        var addExtensions = getExtensionField(extension, 'addExtensions', context);\n        if (addExtensions) {\n          return [extension].concat(_toConsumableArray(_this14.flatten(addExtensions())));\n        }\n        return extension;\n      })\n      // `Infinity` will break TypeScript so we set a number that is probably high enough\n      .flat(10);\n    }\n    /**\n     * Sort extensions by priority.\n     * @param extensions An array of Tiptap extensions\n     * @returns A sorted array of Tiptap extensions by priority\n     */\n  }, {\n    key: \"sort\",\n    value: function sort(extensions) {\n      var defaultPriority = 100;\n      return extensions.sort(function (a, b) {\n        var priorityA = getExtensionField(a, 'priority') || defaultPriority;\n        var priorityB = getExtensionField(b, 'priority') || defaultPriority;\n        if (priorityA > priorityB) {\n          return -1;\n        }\n        if (priorityA < priorityB) {\n          return 1;\n        }\n        return 0;\n      });\n    }\n  }]);\n}();\n/**\n * The Extension class is the base class for all extensions.\n * @see https://tiptap.dev/api/extensions#create-a-new-extension\n */\nvar Extension = /*#__PURE__*/function () {\n  function Extension() {\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, Extension);\n    this.type = 'extension';\n    this.name = 'extension';\n    this.parent = null;\n    this.child = null;\n    this.config = {\n      name: this.name,\n      defaultOptions: {}\n    };\n    this.config = _objectSpread(_objectSpread({}, this.config), config);\n    this.name = this.config.name;\n    if (config.defaultOptions && Object.keys(config.defaultOptions).length > 0) {\n      console.warn(\"[tiptap warn]: BREAKING CHANGE: \\\"defaultOptions\\\" is deprecated. Please use \\\"addOptions\\\" instead. Found in extension: \\\"\".concat(this.name, \"\\\".\"));\n    }\n    // TODO: remove `addOptions` fallback\n    this.options = this.config.defaultOptions;\n    if (this.config.addOptions) {\n      this.options = callOrReturn(getExtensionField(this, 'addOptions', {\n        name: this.name\n      }));\n    }\n    this.storage = callOrReturn(getExtensionField(this, 'addStorage', {\n      name: this.name,\n      options: this.options\n    })) || {};\n  }\n  return _createClass(Extension, [{\n    key: \"configure\",\n    value: function configure() {\n      var _this15 = this;\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      // return a new instance so we can use the same extension\n      // with different calls of `configure`\n      var extension = this.extend(_objectSpread(_objectSpread({}, this.config), {}, {\n        addOptions: function addOptions() {\n          return mergeDeep(_this15.options, options);\n        }\n      }));\n      // Always preserve the current name\n      extension.name = this.name;\n      // Set the parent to be our parent\n      extension.parent = this.parent;\n      return extension;\n    }\n  }, {\n    key: \"extend\",\n    value: function extend() {\n      var extendedConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var extension = new Extension(_objectSpread(_objectSpread({}, this.config), extendedConfig));\n      extension.parent = this;\n      this.child = extension;\n      extension.name = extendedConfig.name ? extendedConfig.name : extension.parent.name;\n      if (extendedConfig.defaultOptions && Object.keys(extendedConfig.defaultOptions).length > 0) {\n        console.warn(\"[tiptap warn]: BREAKING CHANGE: \\\"defaultOptions\\\" is deprecated. Please use \\\"addOptions\\\" instead. Found in extension: \\\"\".concat(extension.name, \"\\\".\"));\n      }\n      extension.options = callOrReturn(getExtensionField(extension, 'addOptions', {\n        name: extension.name\n      }));\n      extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {\n        name: extension.name,\n        options: extension.options\n      }));\n      return extension;\n    }\n  }], [{\n    key: \"create\",\n    value: function create() {\n      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return new Extension(config);\n    }\n  }]);\n}();\n/**\n * Gets the text between two positions in a Prosemirror node\n * and serializes it using the given text serializers and block separator (see getText)\n * @param startNode The Prosemirror node to start from\n * @param range The range of the text to get\n * @param options Options for the text serializer & block separator\n * @returns The text between the two positions\n */\nfunction getTextBetween(startNode, range, options) {\n  var from = range.from,\n    to = range.to;\n  var _ref24 = options || {},\n    _ref24$blockSeparator = _ref24.blockSeparator,\n    blockSeparator = _ref24$blockSeparator === void 0 ? '\\n\\n' : _ref24$blockSeparator,\n    _ref24$textSerializer = _ref24.textSerializers,\n    textSerializers = _ref24$textSerializer === void 0 ? {} : _ref24$textSerializer;\n  var text = '';\n  startNode.nodesBetween(from, to, function (node, pos, parent, index) {\n    var _a;\n    if (node.isBlock && pos > from) {\n      text += blockSeparator;\n    }\n    var textSerializer = textSerializers === null || textSerializers === void 0 ? void 0 : textSerializers[node.type.name];\n    if (textSerializer) {\n      if (parent) {\n        text += textSerializer({\n          node: node,\n          pos: pos,\n          parent: parent,\n          index: index,\n          range: range\n        });\n      }\n      // do not descend into child nodes when there exists a serializer\n      return false;\n    }\n    if (node.isText) {\n      text += (_a = node === null || node === void 0 ? void 0 : node.text) === null || _a === void 0 ? void 0 : _a.slice(Math.max(from, pos) - pos, to - pos); // eslint-disable-line\n    }\n  });\n\n  return text;\n}\n\n/**\n * Find text serializers `toText` in a Prosemirror schema\n * @param schema The Prosemirror schema to search in\n * @returns A record of text serializers by node name\n */\nfunction getTextSerializersFromSchema(schema) {\n  return Object.fromEntries(Object.entries(schema.nodes).filter(function (_ref25) {\n    var _ref26 = _slicedToArray(_ref25, 2),\n      node = _ref26[1];\n    return node.spec.toText;\n  }).map(function (_ref27) {\n    var _ref28 = _slicedToArray(_ref27, 2),\n      name = _ref28[0],\n      node = _ref28[1];\n    return [name, node.spec.toText];\n  }));\n}\nvar ClipboardTextSerializer = Extension.create({\n  name: 'clipboardTextSerializer',\n  addOptions: function addOptions() {\n    return {\n      blockSeparator: undefined\n    };\n  },\n  addProseMirrorPlugins: function addProseMirrorPlugins() {\n    var _this16 = this;\n    return [new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n      key: new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey('clipboardTextSerializer'),\n      props: {\n        clipboardTextSerializer: function clipboardTextSerializer() {\n          var editor = _this16.editor;\n          var state = editor.state,\n            schema = editor.schema;\n          var doc = state.doc,\n            selection = state.selection;\n          var ranges = selection.ranges;\n          var from = Math.min.apply(Math, _toConsumableArray(ranges.map(function (range) {\n            return range.$from.pos;\n          })));\n          var to = Math.max.apply(Math, _toConsumableArray(ranges.map(function (range) {\n            return range.$to.pos;\n          })));\n          var textSerializers = getTextSerializersFromSchema(schema);\n          var range = {\n            from: from,\n            to: to\n          };\n          return getTextBetween(doc, range, _objectSpread(_objectSpread({}, _this16.options.blockSeparator !== undefined ? {\n            blockSeparator: _this16.options.blockSeparator\n          } : {}), {}, {\n            textSerializers: textSerializers\n          }));\n        }\n      }\n    })];\n  }\n});\nvar blur = function blur() {\n  return function (_ref29) {\n    var editor = _ref29.editor,\n      view = _ref29.view;\n    requestAnimationFrame(function () {\n      var _a;\n      if (!editor.isDestroyed) {\n        view.dom.blur();\n        // Browsers should remove the caret on blur but safari does not.\n        // See: https://github.com/ueberdosis/tiptap/issues/2405\n        (_a = window === null || window === void 0 ? void 0 : window.getSelection()) === null || _a === void 0 ? void 0 : _a.removeAllRanges();\n      }\n    });\n    return true;\n  };\n};\nvar clearContent = function clearContent() {\n  var emitUpdate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  return function (_ref30) {\n    var commands = _ref30.commands;\n    return commands.setContent('', emitUpdate);\n  };\n};\nvar clearNodes = function clearNodes() {\n  return function (_ref31) {\n    var state = _ref31.state,\n      tr = _ref31.tr,\n      dispatch = _ref31.dispatch;\n    var selection = tr.selection;\n    var ranges = selection.ranges;\n    if (!dispatch) {\n      return true;\n    }\n    ranges.forEach(function (_ref32) {\n      var $from = _ref32.$from,\n        $to = _ref32.$to;\n      state.doc.nodesBetween($from.pos, $to.pos, function (node, pos) {\n        if (node.type.isText) {\n          return;\n        }\n        var doc = tr.doc,\n          mapping = tr.mapping;\n        var $mappedFrom = doc.resolve(mapping.map(pos));\n        var $mappedTo = doc.resolve(mapping.map(pos + node.nodeSize));\n        var nodeRange = $mappedFrom.blockRange($mappedTo);\n        if (!nodeRange) {\n          return;\n        }\n        var targetLiftDepth = (0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.liftTarget)(nodeRange);\n        if (node.type.isTextblock) {\n          var _$mappedFrom$parent$c = $mappedFrom.parent.contentMatchAt($mappedFrom.index()),\n            defaultType = _$mappedFrom$parent$c.defaultType;\n          tr.setNodeMarkup(nodeRange.start, defaultType);\n        }\n        if (targetLiftDepth || targetLiftDepth === 0) {\n          tr.lift(nodeRange, targetLiftDepth);\n        }\n      });\n    });\n    return true;\n  };\n};\nvar command = function command(fn) {\n  return function (props) {\n    return fn(props);\n  };\n};\nvar createParagraphNear = function createParagraphNear() {\n  return function (_ref33) {\n    var state = _ref33.state,\n      dispatch = _ref33.dispatch;\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.createParagraphNear)(state, dispatch);\n  };\n};\nvar cut = function cut(originRange, targetPos) {\n  return function (_ref34) {\n    var editor = _ref34.editor,\n      tr = _ref34.tr;\n    var state = editor.state;\n    var contentSlice = state.doc.slice(originRange.from, originRange.to);\n    tr.deleteRange(originRange.from, originRange.to);\n    var newPos = tr.mapping.map(targetPos);\n    tr.insert(newPos, contentSlice.content);\n    tr.setSelection(new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection(tr.doc.resolve(newPos - 1)));\n    return true;\n  };\n};\nvar deleteCurrentNode = function deleteCurrentNode() {\n  return function (_ref35) {\n    var tr = _ref35.tr,\n      dispatch = _ref35.dispatch;\n    var selection = tr.selection;\n    var currentNode = selection.$anchor.node();\n    // if there is content inside the current node, break out of this command\n    if (currentNode.content.size > 0) {\n      return false;\n    }\n    var $pos = tr.selection.$anchor;\n    for (var depth = $pos.depth; depth > 0; depth -= 1) {\n      var node = $pos.node(depth);\n      if (node.type === currentNode.type) {\n        if (dispatch) {\n          var from = $pos.before(depth);\n          var to = $pos.after(depth);\n          tr[\"delete\"](from, to).scrollIntoView();\n        }\n        return true;\n      }\n    }\n    return false;\n  };\n};\nvar deleteNode = function deleteNode(typeOrName) {\n  return function (_ref36) {\n    var tr = _ref36.tr,\n      state = _ref36.state,\n      dispatch = _ref36.dispatch;\n    var type = getNodeType(typeOrName, state.schema);\n    var $pos = tr.selection.$anchor;\n    for (var depth = $pos.depth; depth > 0; depth -= 1) {\n      var node = $pos.node(depth);\n      if (node.type === type) {\n        if (dispatch) {\n          var from = $pos.before(depth);\n          var to = $pos.after(depth);\n          tr[\"delete\"](from, to).scrollIntoView();\n        }\n        return true;\n      }\n    }\n    return false;\n  };\n};\nvar deleteRange = function deleteRange(range) {\n  return function (_ref37) {\n    var tr = _ref37.tr,\n      dispatch = _ref37.dispatch;\n    var from = range.from,\n      to = range.to;\n    if (dispatch) {\n      tr[\"delete\"](from, to);\n    }\n    return true;\n  };\n};\nvar deleteSelection = function deleteSelection() {\n  return function (_ref38) {\n    var state = _ref38.state,\n      dispatch = _ref38.dispatch;\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.deleteSelection)(state, dispatch);\n  };\n};\nvar enter = function enter() {\n  return function (_ref39) {\n    var commands = _ref39.commands;\n    return commands.keyboardShortcut('Enter');\n  };\n};\nvar exitCode = function exitCode() {\n  return function (_ref40) {\n    var state = _ref40.state,\n      dispatch = _ref40.dispatch;\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.exitCode)(state, dispatch);\n  };\n};\n\n/**\n * Check if object1 includes object2\n * @param object1 Object\n * @param object2 Object\n */\nfunction objectIncludes(object1, object2) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    strict: true\n  };\n  var keys = Object.keys(object2);\n  if (!keys.length) {\n    return true;\n  }\n  return keys.every(function (key) {\n    if (options.strict) {\n      return object2[key] === object1[key];\n    }\n    if (isRegExp(object2[key])) {\n      return object2[key].test(object1[key]);\n    }\n    return object2[key] === object1[key];\n  });\n}\nfunction findMarkInSet(marks, type) {\n  var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return marks.find(function (item) {\n    return item.type === type && objectIncludes(\n    // Only check equality for the attributes that are provided\n    Object.fromEntries(Object.keys(attributes).map(function (k) {\n      return [k, item.attrs[k]];\n    })), attributes);\n  });\n}\nfunction isMarkInSet(marks, type) {\n  var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return !!findMarkInSet(marks, type, attributes);\n}\n/**\n * Get the range of a mark at a resolved position.\n */\nfunction getMarkRange(\n/**\n * The position to get the mark range for.\n */\n$pos,\n/**\n * The mark type to get the range for.\n */\ntype,\n/**\n * The attributes to match against.\n * If not provided, only the first mark at the position will be matched.\n */\nattributes) {\n  var _a;\n  if (!$pos || !type) {\n    return;\n  }\n  var start = $pos.parent.childAfter($pos.parentOffset);\n  // If the cursor is at the start of a text node that does not have the mark, look backward\n  if (!start.node || !start.node.marks.some(function (mark) {\n    return mark.type === type;\n  })) {\n    start = $pos.parent.childBefore($pos.parentOffset);\n  }\n  // If there is no text node with the mark even backward, return undefined\n  if (!start.node || !start.node.marks.some(function (mark) {\n    return mark.type === type;\n  })) {\n    return;\n  }\n  // Default to only matching against the first mark's attributes\n  attributes = attributes || ((_a = start.node.marks[0]) === null || _a === void 0 ? void 0 : _a.attrs);\n  // We now know that the cursor is either at the start, middle or end of a text node with the specified mark\n  // so we can look it up on the targeted mark\n  var mark = findMarkInSet(_toConsumableArray(start.node.marks), type, attributes);\n  if (!mark) {\n    return;\n  }\n  var startIndex = start.index;\n  var startPos = $pos.start() + start.offset;\n  var endIndex = startIndex + 1;\n  var endPos = startPos + start.node.nodeSize;\n  while (startIndex > 0 && isMarkInSet(_toConsumableArray($pos.parent.child(startIndex - 1).marks), type, attributes)) {\n    startIndex -= 1;\n    startPos -= $pos.parent.child(startIndex).nodeSize;\n  }\n  while (endIndex < $pos.parent.childCount && isMarkInSet(_toConsumableArray($pos.parent.child(endIndex).marks), type, attributes)) {\n    endPos += $pos.parent.child(endIndex).nodeSize;\n    endIndex += 1;\n  }\n  return {\n    from: startPos,\n    to: endPos\n  };\n}\nfunction getMarkType(nameOrType, schema) {\n  if (typeof nameOrType === 'string') {\n    if (!schema.marks[nameOrType]) {\n      throw Error(\"There is no mark type named '\".concat(nameOrType, \"'. Maybe you forgot to add the extension?\"));\n    }\n    return schema.marks[nameOrType];\n  }\n  return nameOrType;\n}\nvar extendMarkRange = function extendMarkRange(typeOrName) {\n  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return function (_ref41) {\n    var tr = _ref41.tr,\n      state = _ref41.state,\n      dispatch = _ref41.dispatch;\n    var type = getMarkType(typeOrName, state.schema);\n    var doc = tr.doc,\n      selection = tr.selection;\n    var $from = selection.$from,\n      from = selection.from,\n      to = selection.to;\n    if (dispatch) {\n      var range = getMarkRange($from, type, attributes);\n      if (range && range.from <= from && range.to >= to) {\n        var newSelection = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.create(doc, range.from, range.to);\n        tr.setSelection(newSelection);\n      }\n    }\n    return true;\n  };\n};\nvar first = function first(commands) {\n  return function (props) {\n    var items = typeof commands === 'function' ? commands(props) : commands;\n    for (var i = 0; i < items.length; i += 1) {\n      if (items[i](props)) {\n        return true;\n      }\n    }\n    return false;\n  };\n};\nfunction isTextSelection(value) {\n  return value instanceof _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection;\n}\nfunction minMax() {\n  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  return Math.min(Math.max(value, min), max);\n}\nfunction resolveFocusPosition(doc) {\n  var position = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  if (!position) {\n    return null;\n  }\n  var selectionAtStart = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Selection.atStart(doc);\n  var selectionAtEnd = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Selection.atEnd(doc);\n  if (position === 'start' || position === true) {\n    return selectionAtStart;\n  }\n  if (position === 'end') {\n    return selectionAtEnd;\n  }\n  var minPos = selectionAtStart.from;\n  var maxPos = selectionAtEnd.to;\n  if (position === 'all') {\n    return _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.create(doc, minMax(0, minPos, maxPos), minMax(doc.content.size, minPos, maxPos));\n  }\n  return _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.create(doc, minMax(position, minPos, maxPos), minMax(position, minPos, maxPos));\n}\nfunction isAndroid() {\n  return navigator.platform === 'Android' || /android/i.test(navigator.userAgent);\n}\nfunction isiOS() {\n  return ['iPad Simulator', 'iPhone Simulator', 'iPod Simulator', 'iPad', 'iPhone', 'iPod'].includes(navigator.platform)\n  // iPad on iOS 13 detection\n  || navigator.userAgent.includes('Mac') && 'ontouchend' in document;\n}\nvar focus = function focus() {\n  var position = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return function (_ref42) {\n    var editor = _ref42.editor,\n      view = _ref42.view,\n      tr = _ref42.tr,\n      dispatch = _ref42.dispatch;\n    options = _objectSpread({\n      scrollIntoView: true\n    }, options);\n    var delayedFocus = function delayedFocus() {\n      // focus within `requestAnimationFrame` breaks focus on iOS and Android\n      // so we have to call this\n      if (isiOS() || isAndroid()) {\n        view.dom.focus();\n      }\n      // For React we have to focus asynchronously. Otherwise wild things happen.\n      // see: https://github.com/ueberdosis/tiptap/issues/1520\n      requestAnimationFrame(function () {\n        if (!editor.isDestroyed) {\n          view.focus();\n          if (options === null || options === void 0 ? void 0 : options.scrollIntoView) {\n            editor.commands.scrollIntoView();\n          }\n        }\n      });\n    };\n    if (view.hasFocus() && position === null || position === false) {\n      return true;\n    }\n    // we don’t try to resolve a NodeSelection or CellSelection\n    if (dispatch && position === null && !isTextSelection(editor.state.selection)) {\n      delayedFocus();\n      return true;\n    }\n    // pass through tr.doc instead of editor.state.doc\n    // since transactions could change the editors state before this command has been run\n    var selection = resolveFocusPosition(tr.doc, position) || editor.state.selection;\n    var isSameSelection = editor.state.selection.eq(selection);\n    if (dispatch) {\n      if (!isSameSelection) {\n        tr.setSelection(selection);\n      }\n      // `tr.setSelection` resets the stored marks\n      // so we’ll restore them if the selection is the same as before\n      if (isSameSelection && tr.storedMarks) {\n        tr.setStoredMarks(tr.storedMarks);\n      }\n      delayedFocus();\n    }\n    return true;\n  };\n};\nvar forEach = function forEach(items, fn) {\n  return function (props) {\n    return items.every(function (item, index) {\n      return fn(item, _objectSpread(_objectSpread({}, props), {}, {\n        index: index\n      }));\n    });\n  };\n};\nvar insertContent = function insertContent(value, options) {\n  return function (_ref43) {\n    var tr = _ref43.tr,\n      commands = _ref43.commands;\n    return commands.insertContentAt({\n      from: tr.selection.from,\n      to: tr.selection.to\n    }, value, options);\n  };\n};\nvar _removeWhitespaces = function removeWhitespaces(node) {\n  var children = node.childNodes;\n  for (var i = children.length - 1; i >= 0; i -= 1) {\n    var child = children[i];\n    if (child.nodeType === 3 && child.nodeValue && /^(\\n\\s\\s|\\n)$/.test(child.nodeValue)) {\n      node.removeChild(child);\n    } else if (child.nodeType === 1) {\n      _removeWhitespaces(child);\n    }\n  }\n  return node;\n};\nfunction elementFromString(value) {\n  // add a wrapper to preserve leading and trailing whitespace\n  var wrappedValue = \"<body>\".concat(value, \"</body>\");\n  var html = new window.DOMParser().parseFromString(wrappedValue, 'text/html').body;\n  return _removeWhitespaces(html);\n}\n\n/**\n * Takes a JSON or HTML content and creates a Prosemirror node or fragment from it.\n * @param content The JSON or HTML content to create the node from\n * @param schema The Prosemirror schema to use for the node\n * @param options Options for the parser\n * @returns The created Prosemirror node or fragment\n */\nfunction createNodeFromContent(content, schema, options) {\n  if (content instanceof _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.Node || content instanceof _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.Fragment) {\n    return content;\n  }\n  options = _objectSpread({\n    slice: true,\n    parseOptions: {}\n  }, options);\n  var isJSONContent = _typeof(content) === 'object' && content !== null;\n  var isTextContent = typeof content === 'string';\n  if (isJSONContent) {\n    try {\n      var isArrayContent = Array.isArray(content) && content.length > 0;\n      // if the JSON Content is an array of nodes, create a fragment for each node\n      if (isArrayContent) {\n        return _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.Fragment.fromArray(content.map(function (item) {\n          return schema.nodeFromJSON(item);\n        }));\n      }\n      var node = schema.nodeFromJSON(content);\n      if (options.errorOnInvalidContent) {\n        node.check();\n      }\n      return node;\n    } catch (error) {\n      if (options.errorOnInvalidContent) {\n        throw new Error('[tiptap error]: Invalid JSON content', {\n          cause: error\n        });\n      }\n      console.warn('[tiptap warn]: Invalid content.', 'Passed value:', content, 'Error:', error);\n      return createNodeFromContent('', schema, options);\n    }\n  }\n  if (isTextContent) {\n    // Check for invalid content\n    if (options.errorOnInvalidContent) {\n      var hasInvalidContent = false;\n      var invalidContent = '';\n      // A copy of the current schema with a catch-all node at the end\n      var contentCheckSchema = new _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.Schema({\n        topNode: schema.spec.topNode,\n        marks: schema.spec.marks,\n        // Prosemirror's schemas are executed such that: the last to execute, matches last\n        // This means that we can add a catch-all node at the end of the schema to catch any content that we don't know how to handle\n        nodes: schema.spec.nodes.append({\n          __tiptap__private__unknown__catch__all__node: {\n            content: 'inline*',\n            group: 'block',\n            parseDOM: [{\n              tag: '*',\n              getAttrs: function getAttrs(e) {\n                // If this is ever called, we know that the content has something that we don't know how to handle in the schema\n                hasInvalidContent = true;\n                // Try to stringify the element for a more helpful error message\n                invalidContent = typeof e === 'string' ? e : e.outerHTML;\n                return null;\n              }\n            }]\n          }\n        })\n      });\n      if (options.slice) {\n        _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.DOMParser.fromSchema(contentCheckSchema).parseSlice(elementFromString(content), options.parseOptions);\n      } else {\n        _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.DOMParser.fromSchema(contentCheckSchema).parse(elementFromString(content), options.parseOptions);\n      }\n      if (options.errorOnInvalidContent && hasInvalidContent) {\n        throw new Error('[tiptap error]: Invalid HTML content', {\n          cause: new Error(\"Invalid element found: \".concat(invalidContent))\n        });\n      }\n    }\n    var parser = _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.DOMParser.fromSchema(schema);\n    if (options.slice) {\n      return parser.parseSlice(elementFromString(content), options.parseOptions).content;\n    }\n    return parser.parse(elementFromString(content), options.parseOptions);\n  }\n  return createNodeFromContent('', schema, options);\n}\n\n// source: https://github.com/ProseMirror/prosemirror-state/blob/master/src/selection.js#L466\nfunction selectionToInsertionEnd(tr, startLen, bias) {\n  var last = tr.steps.length - 1;\n  if (last < startLen) {\n    return;\n  }\n  var step = tr.steps[last];\n  if (!(step instanceof _tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.ReplaceStep || step instanceof _tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.ReplaceAroundStep)) {\n    return;\n  }\n  var map = tr.mapping.maps[last];\n  var end = 0;\n  map.forEach(function (_from, _to, _newFrom, newTo) {\n    if (end === 0) {\n      end = newTo;\n    }\n  });\n  tr.setSelection(_tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Selection.near(tr.doc.resolve(end), bias));\n}\nvar isFragment = function isFragment(nodeOrFragment) {\n  return !('type' in nodeOrFragment);\n};\nvar insertContentAt = function insertContentAt(position, value, options) {\n  return function (_ref44) {\n    var tr = _ref44.tr,\n      dispatch = _ref44.dispatch,\n      editor = _ref44.editor;\n    var _a;\n    if (dispatch) {\n      options = _objectSpread({\n        parseOptions: editor.options.parseOptions,\n        updateSelection: true,\n        applyInputRules: false,\n        applyPasteRules: false\n      }, options);\n      var content;\n      try {\n        content = createNodeFromContent(value, editor.schema, {\n          parseOptions: _objectSpread({\n            preserveWhitespace: 'full'\n          }, options.parseOptions),\n          errorOnInvalidContent: (_a = options.errorOnInvalidContent) !== null && _a !== void 0 ? _a : editor.options.enableContentCheck\n        });\n      } catch (e) {\n        editor.emit('contentError', {\n          editor: editor,\n          error: e,\n          disableCollaboration: function disableCollaboration() {\n            if (editor.storage.collaboration) {\n              editor.storage.collaboration.isDisabled = true;\n            }\n          }\n        });\n        return false;\n      }\n      var _ref45 = typeof position === 'number' ? {\n          from: position,\n          to: position\n        } : {\n          from: position.from,\n          to: position.to\n        },\n        from = _ref45.from,\n        to = _ref45.to;\n      var isOnlyTextContent = true;\n      var isOnlyBlockContent = true;\n      var nodes = isFragment(content) ? content : [content];\n      nodes.forEach(function (node) {\n        // check if added node is valid\n        node.check();\n        isOnlyTextContent = isOnlyTextContent ? node.isText && node.marks.length === 0 : false;\n        isOnlyBlockContent = isOnlyBlockContent ? node.isBlock : false;\n      });\n      // check if we can replace the wrapping node by\n      // the newly inserted content\n      // example:\n      // replace an empty paragraph by an inserted image\n      // instead of inserting the image below the paragraph\n      if (from === to && isOnlyBlockContent) {\n        var _tr$doc$resolve = tr.doc.resolve(from),\n          parent = _tr$doc$resolve.parent;\n        var isEmptyTextBlock = parent.isTextblock && !parent.type.spec.code && !parent.childCount;\n        if (isEmptyTextBlock) {\n          from -= 1;\n          to += 1;\n        }\n      }\n      var newContent;\n      // if there is only plain text we have to use `insertText`\n      // because this will keep the current marks\n      if (isOnlyTextContent) {\n        // if value is string, we can use it directly\n        // otherwise if it is an array, we have to join it\n        if (Array.isArray(value)) {\n          newContent = value.map(function (v) {\n            return v.text || '';\n          }).join('');\n        } else if (value instanceof _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.Fragment) {\n          var text = '';\n          value.forEach(function (node) {\n            if (node.text) {\n              text += node.text;\n            }\n          });\n          newContent = text;\n        } else if (_typeof(value) === 'object' && !!value && !!value.text) {\n          newContent = value.text;\n        } else {\n          newContent = value;\n        }\n        tr.insertText(newContent, from, to);\n      } else {\n        newContent = content;\n        tr.replaceWith(from, to, newContent);\n      }\n      // set cursor at end of inserted content\n      if (options.updateSelection) {\n        selectionToInsertionEnd(tr, tr.steps.length - 1, -1);\n      }\n      if (options.applyInputRules) {\n        tr.setMeta('applyInputRules', {\n          from: from,\n          text: newContent\n        });\n      }\n      if (options.applyPasteRules) {\n        tr.setMeta('applyPasteRules', {\n          from: from,\n          text: newContent\n        });\n      }\n    }\n    return true;\n  };\n};\nvar joinUp = function joinUp() {\n  return function (_ref46) {\n    var state = _ref46.state,\n      dispatch = _ref46.dispatch;\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.joinUp)(state, dispatch);\n  };\n};\nvar joinDown = function joinDown() {\n  return function (_ref47) {\n    var state = _ref47.state,\n      dispatch = _ref47.dispatch;\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.joinDown)(state, dispatch);\n  };\n};\nvar joinBackward = function joinBackward() {\n  return function (_ref48) {\n    var state = _ref48.state,\n      dispatch = _ref48.dispatch;\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.joinBackward)(state, dispatch);\n  };\n};\nvar joinForward = function joinForward() {\n  return function (_ref49) {\n    var state = _ref49.state,\n      dispatch = _ref49.dispatch;\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.joinForward)(state, dispatch);\n  };\n};\nvar joinItemBackward = function joinItemBackward() {\n  return function (_ref50) {\n    var state = _ref50.state,\n      dispatch = _ref50.dispatch,\n      tr = _ref50.tr;\n    try {\n      var point = (0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.joinPoint)(state.doc, state.selection.$from.pos, -1);\n      if (point === null || point === undefined) {\n        return false;\n      }\n      tr.join(point, 2);\n      if (dispatch) {\n        dispatch(tr);\n      }\n      return true;\n    } catch (_unused3) {\n      return false;\n    }\n  };\n};\nvar joinItemForward = function joinItemForward() {\n  return function (_ref51) {\n    var state = _ref51.state,\n      dispatch = _ref51.dispatch,\n      tr = _ref51.tr;\n    try {\n      var point = (0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.joinPoint)(state.doc, state.selection.$from.pos, +1);\n      if (point === null || point === undefined) {\n        return false;\n      }\n      tr.join(point, 2);\n      if (dispatch) {\n        dispatch(tr);\n      }\n      return true;\n    } catch (_unused4) {\n      return false;\n    }\n  };\n};\nvar joinTextblockBackward = function joinTextblockBackward() {\n  return function (_ref52) {\n    var state = _ref52.state,\n      dispatch = _ref52.dispatch;\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.joinTextblockBackward)(state, dispatch);\n  };\n};\nvar joinTextblockForward = function joinTextblockForward() {\n  return function (_ref53) {\n    var state = _ref53.state,\n      dispatch = _ref53.dispatch;\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.joinTextblockForward)(state, dispatch);\n  };\n};\nfunction isMacOS() {\n  return typeof navigator !== 'undefined' ? /Mac/.test(navigator.platform) : false;\n}\nfunction normalizeKeyName(name) {\n  var parts = name.split(/-(?!$)/);\n  var result = parts[parts.length - 1];\n  if (result === 'Space') {\n    result = ' ';\n  }\n  var alt;\n  var ctrl;\n  var shift;\n  var meta;\n  for (var i = 0; i < parts.length - 1; i += 1) {\n    var mod = parts[i];\n    if (/^(cmd|meta|m)$/i.test(mod)) {\n      meta = true;\n    } else if (/^a(lt)?$/i.test(mod)) {\n      alt = true;\n    } else if (/^(c|ctrl|control)$/i.test(mod)) {\n      ctrl = true;\n    } else if (/^s(hift)?$/i.test(mod)) {\n      shift = true;\n    } else if (/^mod$/i.test(mod)) {\n      if (isiOS() || isMacOS()) {\n        meta = true;\n      } else {\n        ctrl = true;\n      }\n    } else {\n      throw new Error(\"Unrecognized modifier name: \".concat(mod));\n    }\n  }\n  if (alt) {\n    result = \"Alt-\".concat(result);\n  }\n  if (ctrl) {\n    result = \"Ctrl-\".concat(result);\n  }\n  if (meta) {\n    result = \"Meta-\".concat(result);\n  }\n  if (shift) {\n    result = \"Shift-\".concat(result);\n  }\n  return result;\n}\nvar keyboardShortcut = function keyboardShortcut(name) {\n  return function (_ref54) {\n    var editor = _ref54.editor,\n      view = _ref54.view,\n      tr = _ref54.tr,\n      dispatch = _ref54.dispatch;\n    var keys = normalizeKeyName(name).split(/-(?!$)/);\n    var key = keys.find(function (item) {\n      return !['Alt', 'Ctrl', 'Meta', 'Shift'].includes(item);\n    });\n    var event = new KeyboardEvent('keydown', {\n      key: key === 'Space' ? ' ' : key,\n      altKey: keys.includes('Alt'),\n      ctrlKey: keys.includes('Ctrl'),\n      metaKey: keys.includes('Meta'),\n      shiftKey: keys.includes('Shift'),\n      bubbles: true,\n      cancelable: true\n    });\n    var capturedTransaction = editor.captureTransaction(function () {\n      view.someProp('handleKeyDown', function (f) {\n        return f(view, event);\n      });\n    });\n    capturedTransaction === null || capturedTransaction === void 0 ? void 0 : capturedTransaction.steps.forEach(function (step) {\n      var newStep = step.map(tr.mapping);\n      if (newStep && dispatch) {\n        tr.maybeStep(newStep);\n      }\n    });\n    return true;\n  };\n};\nfunction isNodeActive(state, typeOrName) {\n  var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var _state$selection = state.selection,\n    from = _state$selection.from,\n    to = _state$selection.to,\n    empty = _state$selection.empty;\n  var type = typeOrName ? getNodeType(typeOrName, state.schema) : null;\n  var nodeRanges = [];\n  state.doc.nodesBetween(from, to, function (node, pos) {\n    if (node.isText) {\n      return;\n    }\n    var relativeFrom = Math.max(from, pos);\n    var relativeTo = Math.min(to, pos + node.nodeSize);\n    nodeRanges.push({\n      node: node,\n      from: relativeFrom,\n      to: relativeTo\n    });\n  });\n  var selectionRange = to - from;\n  var matchedNodeRanges = nodeRanges.filter(function (nodeRange) {\n    if (!type) {\n      return true;\n    }\n    return type.name === nodeRange.node.type.name;\n  }).filter(function (nodeRange) {\n    return objectIncludes(nodeRange.node.attrs, attributes, {\n      strict: false\n    });\n  });\n  if (empty) {\n    return !!matchedNodeRanges.length;\n  }\n  var range = matchedNodeRanges.reduce(function (sum, nodeRange) {\n    return sum + nodeRange.to - nodeRange.from;\n  }, 0);\n  return range >= selectionRange;\n}\nvar lift = function lift(typeOrName) {\n  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return function (_ref55) {\n    var state = _ref55.state,\n      dispatch = _ref55.dispatch;\n    var type = getNodeType(typeOrName, state.schema);\n    var isActive = isNodeActive(state, type, attributes);\n    if (!isActive) {\n      return false;\n    }\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.lift)(state, dispatch);\n  };\n};\nvar liftEmptyBlock = function liftEmptyBlock() {\n  return function (_ref56) {\n    var state = _ref56.state,\n      dispatch = _ref56.dispatch;\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.liftEmptyBlock)(state, dispatch);\n  };\n};\nvar liftListItem = function liftListItem(typeOrName) {\n  return function (_ref57) {\n    var state = _ref57.state,\n      dispatch = _ref57.dispatch;\n    var type = getNodeType(typeOrName, state.schema);\n    return (0,_tiptap_pm_schema_list__WEBPACK_IMPORTED_MODULE_6__.liftListItem)(type)(state, dispatch);\n  };\n};\nvar newlineInCode = function newlineInCode() {\n  return function (_ref58) {\n    var state = _ref58.state,\n      dispatch = _ref58.dispatch;\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.newlineInCode)(state, dispatch);\n  };\n};\n\n/**\n * Get the type of a schema item by its name.\n * @param name The name of the schema item\n * @param schema The Prosemiror schema to search in\n * @returns The type of the schema item (`node` or `mark`), or null if it doesn't exist\n */\nfunction getSchemaTypeNameByName(name, schema) {\n  if (schema.nodes[name]) {\n    return 'node';\n  }\n  if (schema.marks[name]) {\n    return 'mark';\n  }\n  return null;\n}\n\n/**\n * Remove a property or an array of properties from an object\n * @param obj Object\n * @param key Key to remove\n */\nfunction deleteProps(obj, propOrProps) {\n  var props = typeof propOrProps === 'string' ? [propOrProps] : propOrProps;\n  return Object.keys(obj).reduce(function (newObj, prop) {\n    if (!props.includes(prop)) {\n      newObj[prop] = obj[prop];\n    }\n    return newObj;\n  }, {});\n}\nvar resetAttributes = function resetAttributes(typeOrName, attributes) {\n  return function (_ref59) {\n    var tr = _ref59.tr,\n      state = _ref59.state,\n      dispatch = _ref59.dispatch;\n    var nodeType = null;\n    var markType = null;\n    var schemaType = getSchemaTypeNameByName(typeof typeOrName === 'string' ? typeOrName : typeOrName.name, state.schema);\n    if (!schemaType) {\n      return false;\n    }\n    if (schemaType === 'node') {\n      nodeType = getNodeType(typeOrName, state.schema);\n    }\n    if (schemaType === 'mark') {\n      markType = getMarkType(typeOrName, state.schema);\n    }\n    if (dispatch) {\n      tr.selection.ranges.forEach(function (range) {\n        state.doc.nodesBetween(range.$from.pos, range.$to.pos, function (node, pos) {\n          if (nodeType && nodeType === node.type) {\n            tr.setNodeMarkup(pos, undefined, deleteProps(node.attrs, attributes));\n          }\n          if (markType && node.marks.length) {\n            node.marks.forEach(function (mark) {\n              if (markType === mark.type) {\n                tr.addMark(pos, pos + node.nodeSize, markType.create(deleteProps(mark.attrs, attributes)));\n              }\n            });\n          }\n        });\n      });\n    }\n    return true;\n  };\n};\nvar scrollIntoView = function scrollIntoView() {\n  return function (_ref60) {\n    var tr = _ref60.tr,\n      dispatch = _ref60.dispatch;\n    if (dispatch) {\n      tr.scrollIntoView();\n    }\n    return true;\n  };\n};\nvar selectAll = function selectAll() {\n  return function (_ref61) {\n    var tr = _ref61.tr,\n      dispatch = _ref61.dispatch;\n    if (dispatch) {\n      var selection = new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.AllSelection(tr.doc);\n      tr.setSelection(selection);\n    }\n    return true;\n  };\n};\nvar selectNodeBackward = function selectNodeBackward() {\n  return function (_ref62) {\n    var state = _ref62.state,\n      dispatch = _ref62.dispatch;\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.selectNodeBackward)(state, dispatch);\n  };\n};\nvar selectNodeForward = function selectNodeForward() {\n  return function (_ref63) {\n    var state = _ref63.state,\n      dispatch = _ref63.dispatch;\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.selectNodeForward)(state, dispatch);\n  };\n};\nvar selectParentNode = function selectParentNode() {\n  return function (_ref64) {\n    var state = _ref64.state,\n      dispatch = _ref64.dispatch;\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.selectParentNode)(state, dispatch);\n  };\n};\n\n// @ts-ignore\n// TODO: add types to @types/prosemirror-commands\nvar selectTextblockEnd = function selectTextblockEnd() {\n  return function (_ref65) {\n    var state = _ref65.state,\n      dispatch = _ref65.dispatch;\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.selectTextblockEnd)(state, dispatch);\n  };\n};\n\n// @ts-ignore\n// TODO: add types to @types/prosemirror-commands\nvar selectTextblockStart = function selectTextblockStart() {\n  return function (_ref66) {\n    var state = _ref66.state,\n      dispatch = _ref66.dispatch;\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.selectTextblockStart)(state, dispatch);\n  };\n};\n\n/**\n * Create a new Prosemirror document node from content.\n * @param content The JSON or HTML content to create the document from\n * @param schema The Prosemirror schema to use for the document\n * @param parseOptions Options for the parser\n * @returns The created Prosemirror document node\n */\nfunction createDocument(content, schema) {\n  var parseOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  return createNodeFromContent(content, schema, {\n    slice: false,\n    parseOptions: parseOptions,\n    errorOnInvalidContent: options.errorOnInvalidContent\n  });\n}\nvar setContent = function setContent(content) {\n  var emitUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var parseOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  return function (_ref67) {\n    var editor = _ref67.editor,\n      tr = _ref67.tr,\n      dispatch = _ref67.dispatch,\n      commands = _ref67.commands;\n    var _a, _b;\n    var doc = tr.doc;\n    // This is to keep backward compatibility with the previous behavior\n    // TODO remove this in the next major version\n    if (parseOptions.preserveWhitespace !== 'full') {\n      var _document = createDocument(content, editor.schema, parseOptions, {\n        errorOnInvalidContent: (_a = options.errorOnInvalidContent) !== null && _a !== void 0 ? _a : editor.options.enableContentCheck\n      });\n      if (dispatch) {\n        tr.replaceWith(0, doc.content.size, _document).setMeta('preventUpdate', !emitUpdate);\n      }\n      return true;\n    }\n    if (dispatch) {\n      tr.setMeta('preventUpdate', !emitUpdate);\n    }\n    return commands.insertContentAt({\n      from: 0,\n      to: doc.content.size\n    }, content, {\n      parseOptions: parseOptions,\n      errorOnInvalidContent: (_b = options.errorOnInvalidContent) !== null && _b !== void 0 ? _b : editor.options.enableContentCheck\n    });\n  };\n};\nfunction getMarkAttributes(state, typeOrName) {\n  var type = getMarkType(typeOrName, state.schema);\n  var _state$selection2 = state.selection,\n    from = _state$selection2.from,\n    to = _state$selection2.to,\n    empty = _state$selection2.empty;\n  var marks = [];\n  if (empty) {\n    if (state.storedMarks) {\n      marks.push.apply(marks, _toConsumableArray(state.storedMarks));\n    }\n    marks.push.apply(marks, _toConsumableArray(state.selection.$head.marks()));\n  } else {\n    state.doc.nodesBetween(from, to, function (node) {\n      marks.push.apply(marks, _toConsumableArray(node.marks));\n    });\n  }\n  var mark = marks.find(function (markItem) {\n    return markItem.type.name === type.name;\n  });\n  if (!mark) {\n    return {};\n  }\n  return _objectSpread({}, mark.attrs);\n}\n\n/**\n * Returns a new `Transform` based on all steps of the passed transactions.\n * @param oldDoc The Prosemirror node to start from\n * @param transactions The transactions to combine\n * @returns A new `Transform` with all steps of the passed transactions\n */\nfunction combineTransactionSteps(oldDoc, transactions) {\n  var transform = new _tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.Transform(oldDoc);\n  transactions.forEach(function (transaction) {\n    transaction.steps.forEach(function (step) {\n      transform.step(step);\n    });\n  });\n  return transform;\n}\n\n/**\n * Gets the default block type at a given match\n * @param match The content match to get the default block type from\n * @returns The default block type or null\n */\nfunction defaultBlockAt(match) {\n  for (var i = 0; i < match.edgeCount; i += 1) {\n    var _match$edge = match.edge(i),\n      type = _match$edge.type;\n    if (type.isTextblock && !type.hasRequiredAttrs()) {\n      return type;\n    }\n  }\n  return null;\n}\n\n/**\n * Find children inside a Prosemirror node that match a predicate.\n * @param node The Prosemirror node to search in\n * @param predicate The predicate to match\n * @returns An array of nodes with their positions\n */\nfunction findChildren(node, predicate) {\n  var nodesWithPos = [];\n  node.descendants(function (child, pos) {\n    if (predicate(child)) {\n      nodesWithPos.push({\n        node: child,\n        pos: pos\n      });\n    }\n  });\n  return nodesWithPos;\n}\n\n/**\n * Same as `findChildren` but searches only within a `range`.\n * @param node The Prosemirror node to search in\n * @param range The range to search in\n * @param predicate The predicate to match\n * @returns An array of nodes with their positions\n */\nfunction findChildrenInRange(node, range, predicate) {\n  var nodesWithPos = [];\n  // if (range.from === range.to) {\n  //   const nodeAt = node.nodeAt(range.from)\n  //   if (nodeAt) {\n  //     nodesWithPos.push({\n  //       node: nodeAt,\n  //       pos: range.from,\n  //     })\n  //   }\n  // }\n  node.nodesBetween(range.from, range.to, function (child, pos) {\n    if (predicate(child)) {\n      nodesWithPos.push({\n        node: child,\n        pos: pos\n      });\n    }\n  });\n  return nodesWithPos;\n}\n\n/**\n * Finds the closest parent node to a resolved position that matches a predicate.\n * @param $pos The resolved position to search from\n * @param predicate The predicate to match\n * @returns The closest parent node to the resolved position that matches the predicate\n * @example ```js\n * findParentNodeClosestToPos($from, node => node.type.name === 'paragraph')\n * ```\n */\nfunction findParentNodeClosestToPos($pos, predicate) {\n  for (var i = $pos.depth; i > 0; i -= 1) {\n    var node = $pos.node(i);\n    if (predicate(node)) {\n      return {\n        pos: i > 0 ? $pos.before(i) : 0,\n        start: $pos.start(i),\n        depth: i,\n        node: node\n      };\n    }\n  }\n}\n\n/**\n * Finds the closest parent node to the current selection that matches a predicate.\n * @param predicate The predicate to match\n * @returns A command that finds the closest parent node to the current selection that matches the predicate\n * @example ```js\n * findParentNode(node => node.type.name === 'paragraph')\n * ```\n */\nfunction findParentNode(predicate) {\n  return function (selection) {\n    return findParentNodeClosestToPos(selection.$from, predicate);\n  };\n}\nfunction getSchema(extensions, editor) {\n  var resolvedExtensions = ExtensionManager.resolve(extensions);\n  return getSchemaByResolvedExtensions(resolvedExtensions, editor);\n}\n\n/**\n * Generate HTML from a JSONContent\n * @param doc The JSONContent to generate HTML from\n * @param extensions The extensions to use for the schema\n * @returns The generated HTML\n */\nfunction generateHTML(doc, extensions) {\n  var schema = getSchema(extensions);\n  var contentNode = _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.Node.fromJSON(schema, doc);\n  return getHTMLFromFragment(contentNode.content, schema);\n}\n\n/**\n * Generate JSONContent from HTML\n * @param html The HTML to generate JSONContent from\n * @param extensions The extensions to use for the schema\n * @returns The generated JSONContent\n */\nfunction generateJSON(html, extensions) {\n  var schema = getSchema(extensions);\n  var dom = elementFromString(html);\n  return _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.DOMParser.fromSchema(schema).parse(dom).toJSON();\n}\n\n/**\n * Gets the text of a Prosemirror node\n * @param node The Prosemirror node\n * @param options Options for the text serializer & block separator\n * @returns The text of the node\n * @example ```js\n * const text = getText(node, { blockSeparator: '\\n' })\n * ```\n */\nfunction _getText(node, options) {\n  var range = {\n    from: 0,\n    to: node.content.size\n  };\n  return getTextBetween(node, range, options);\n}\n\n/**\n * Generate raw text from a JSONContent\n * @param doc The JSONContent to generate text from\n * @param extensions The extensions to use for the schema\n * @param options Options for the text generation f.e. blockSeparator or textSerializers\n * @returns The generated text\n */\nfunction generateText(doc, extensions, options) {\n  var _ref68 = options || {},\n    _ref68$blockSeparator = _ref68.blockSeparator,\n    blockSeparator = _ref68$blockSeparator === void 0 ? '\\n\\n' : _ref68$blockSeparator,\n    _ref68$textSerializer = _ref68.textSerializers,\n    textSerializers = _ref68$textSerializer === void 0 ? {} : _ref68$textSerializer;\n  var schema = getSchema(extensions);\n  var contentNode = _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.Node.fromJSON(schema, doc);\n  return _getText(contentNode, {\n    blockSeparator: blockSeparator,\n    textSerializers: _objectSpread(_objectSpread({}, getTextSerializersFromSchema(schema)), textSerializers)\n  });\n}\nfunction getNodeAttributes(state, typeOrName) {\n  var type = getNodeType(typeOrName, state.schema);\n  var _state$selection3 = state.selection,\n    from = _state$selection3.from,\n    to = _state$selection3.to;\n  var nodes = [];\n  state.doc.nodesBetween(from, to, function (node) {\n    nodes.push(node);\n  });\n  var node = nodes.reverse().find(function (nodeItem) {\n    return nodeItem.type.name === type.name;\n  });\n  if (!node) {\n    return {};\n  }\n  return _objectSpread({}, node.attrs);\n}\n\n/**\n * Get node or mark attributes by type or name on the current editor state\n * @param state The current editor state\n * @param typeOrName The node or mark type or name\n * @returns The attributes of the node or mark or an empty object\n */\nfunction _getAttributes(state, typeOrName) {\n  var schemaType = getSchemaTypeNameByName(typeof typeOrName === 'string' ? typeOrName : typeOrName.name, state.schema);\n  if (schemaType === 'node') {\n    return getNodeAttributes(state, typeOrName);\n  }\n  if (schemaType === 'mark') {\n    return getMarkAttributes(state, typeOrName);\n  }\n  return {};\n}\n\n/**\n * Removes duplicated values within an array.\n * Supports numbers, strings and objects.\n */\nfunction removeDuplicates(array) {\n  var by = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : JSON.stringify;\n  var seen = {};\n  return array.filter(function (item) {\n    var key = by(item);\n    return Object.prototype.hasOwnProperty.call(seen, key) ? false : seen[key] = true;\n  });\n}\n\n/**\n * Removes duplicated ranges and ranges that are\n * fully captured by other ranges.\n */\nfunction simplifyChangedRanges(changes) {\n  var uniqueChanges = removeDuplicates(changes);\n  return uniqueChanges.length === 1 ? uniqueChanges : uniqueChanges.filter(function (change, index) {\n    var rest = uniqueChanges.filter(function (_, i) {\n      return i !== index;\n    });\n    return !rest.some(function (otherChange) {\n      return change.oldRange.from >= otherChange.oldRange.from && change.oldRange.to <= otherChange.oldRange.to && change.newRange.from >= otherChange.newRange.from && change.newRange.to <= otherChange.newRange.to;\n    });\n  });\n}\n/**\n * Returns a list of changed ranges\n * based on the first and last state of all steps.\n */\nfunction getChangedRanges(transform) {\n  var mapping = transform.mapping,\n    steps = transform.steps;\n  var changes = [];\n  mapping.maps.forEach(function (stepMap, index) {\n    var ranges = [];\n    // This accounts for step changes where no range was actually altered\n    // e.g. when setting a mark, node attribute, etc.\n    // @ts-ignore\n    if (!stepMap.ranges.length) {\n      var _steps$index = steps[index],\n        from = _steps$index.from,\n        to = _steps$index.to;\n      if (from === undefined || to === undefined) {\n        return;\n      }\n      ranges.push({\n        from: from,\n        to: to\n      });\n    } else {\n      stepMap.forEach(function (from, to) {\n        ranges.push({\n          from: from,\n          to: to\n        });\n      });\n    }\n    ranges.forEach(function (_ref69) {\n      var from = _ref69.from,\n        to = _ref69.to;\n      var newStart = mapping.slice(index).map(from, -1);\n      var newEnd = mapping.slice(index).map(to);\n      var oldStart = mapping.invert().map(newStart, -1);\n      var oldEnd = mapping.invert().map(newEnd);\n      changes.push({\n        oldRange: {\n          from: oldStart,\n          to: oldEnd\n        },\n        newRange: {\n          from: newStart,\n          to: newEnd\n        }\n      });\n    });\n  });\n  return simplifyChangedRanges(changes);\n}\nfunction getDebugJSON(node) {\n  var startOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var isTopNode = node.type === node.type.schema.topNodeType;\n  var increment = isTopNode ? 0 : 1;\n  var from = startOffset;\n  var to = from + node.nodeSize;\n  var marks = node.marks.map(function (mark) {\n    var output = {\n      type: mark.type.name\n    };\n    if (Object.keys(mark.attrs).length) {\n      output.attrs = _objectSpread({}, mark.attrs);\n    }\n    return output;\n  });\n  var attrs = _objectSpread({}, node.attrs);\n  var output = {\n    type: node.type.name,\n    from: from,\n    to: to\n  };\n  if (Object.keys(attrs).length) {\n    output.attrs = attrs;\n  }\n  if (marks.length) {\n    output.marks = marks;\n  }\n  if (node.content.childCount) {\n    output.content = [];\n    node.forEach(function (child, offset) {\n      var _a;\n      (_a = output.content) === null || _a === void 0 ? void 0 : _a.push(getDebugJSON(child, startOffset + offset + increment));\n    });\n  }\n  if (node.text) {\n    output.text = node.text;\n  }\n  return output;\n}\nfunction getMarksBetween(from, to, doc) {\n  var marks = [];\n  // get all inclusive marks on empty selection\n  if (from === to) {\n    doc.resolve(from).marks().forEach(function (mark) {\n      var $pos = doc.resolve(from);\n      var range = getMarkRange($pos, mark.type);\n      if (!range) {\n        return;\n      }\n      marks.push(_objectSpread({\n        mark: mark\n      }, range));\n    });\n  } else {\n    doc.nodesBetween(from, to, function (node, pos) {\n      if (!node || (node === null || node === void 0 ? void 0 : node.nodeSize) === undefined) {\n        return;\n      }\n      marks.push.apply(marks, _toConsumableArray(node.marks.map(function (mark) {\n        return {\n          from: pos,\n          to: pos + node.nodeSize,\n          mark: mark\n        };\n      })));\n    });\n  }\n  return marks;\n}\n\n/**\n * Finds the first node of a given type or name in the current selection.\n * @param state The editor state.\n * @param typeOrName The node type or name.\n * @param pos The position to start searching from.\n * @param maxDepth The maximum depth to search.\n * @returns The node and the depth as an array.\n */\nvar getNodeAtPosition = function getNodeAtPosition(state, typeOrName, pos) {\n  var maxDepth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 20;\n  var $pos = state.doc.resolve(pos);\n  var currentDepth = maxDepth;\n  var node = null;\n  while (currentDepth > 0 && node === null) {\n    var currentNode = $pos.node(currentDepth);\n    if ((currentNode === null || currentNode === void 0 ? void 0 : currentNode.type.name) === typeOrName) {\n      node = currentNode;\n    } else {\n      currentDepth -= 1;\n    }\n  }\n  return [node, currentDepth];\n};\n\n/**\n * Return attributes of an extension that should be splitted by keepOnSplit flag\n * @param extensionAttributes Array of extension attributes\n * @param typeName The type of the extension\n * @param attributes The attributes of the extension\n * @returns The splitted attributes\n */\nfunction getSplittedAttributes(extensionAttributes, typeName, attributes) {\n  return Object.fromEntries(Object.entries(attributes).filter(function (_ref70) {\n    var _ref71 = _slicedToArray(_ref70, 1),\n      name = _ref71[0];\n    var extensionAttribute = extensionAttributes.find(function (item) {\n      return item.type === typeName && item.name === name;\n    });\n    if (!extensionAttribute) {\n      return false;\n    }\n    return extensionAttribute.attribute.keepOnSplit;\n  }));\n}\nfunction isMarkActive(state, typeOrName) {\n  var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var _state$selection4 = state.selection,\n    empty = _state$selection4.empty,\n    ranges = _state$selection4.ranges;\n  var type = typeOrName ? getMarkType(typeOrName, state.schema) : null;\n  if (empty) {\n    return !!(state.storedMarks || state.selection.$from.marks()).filter(function (mark) {\n      if (!type) {\n        return true;\n      }\n      return type.name === mark.type.name;\n    }).find(function (mark) {\n      return objectIncludes(mark.attrs, attributes, {\n        strict: false\n      });\n    });\n  }\n  var selectionRange = 0;\n  var markRanges = [];\n  ranges.forEach(function (_ref72) {\n    var $from = _ref72.$from,\n      $to = _ref72.$to;\n    var from = $from.pos;\n    var to = $to.pos;\n    state.doc.nodesBetween(from, to, function (node, pos) {\n      if (!node.isText && !node.marks.length) {\n        return;\n      }\n      var relativeFrom = Math.max(from, pos);\n      var relativeTo = Math.min(to, pos + node.nodeSize);\n      var range = relativeTo - relativeFrom;\n      selectionRange += range;\n      markRanges.push.apply(markRanges, _toConsumableArray(node.marks.map(function (mark) {\n        return {\n          mark: mark,\n          from: relativeFrom,\n          to: relativeTo\n        };\n      })));\n    });\n  });\n  if (selectionRange === 0) {\n    return false;\n  }\n  // calculate range of matched mark\n  var matchedRange = markRanges.filter(function (markRange) {\n    if (!type) {\n      return true;\n    }\n    return type.name === markRange.mark.type.name;\n  }).filter(function (markRange) {\n    return objectIncludes(markRange.mark.attrs, attributes, {\n      strict: false\n    });\n  }).reduce(function (sum, markRange) {\n    return sum + markRange.to - markRange.from;\n  }, 0);\n  // calculate range of marks that excludes the searched mark\n  // for example `code` doesn’t allow any other marks\n  var excludedRange = markRanges.filter(function (markRange) {\n    if (!type) {\n      return true;\n    }\n    return markRange.mark.type !== type && markRange.mark.type.excludes(type);\n  }).reduce(function (sum, markRange) {\n    return sum + markRange.to - markRange.from;\n  }, 0);\n  // we only include the result of `excludedRange`\n  // if there is a match at all\n  var range = matchedRange > 0 ? matchedRange + excludedRange : matchedRange;\n  return range >= selectionRange;\n}\nfunction _isActive(state, name) {\n  var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (!name) {\n    return isNodeActive(state, null, attributes) || isMarkActive(state, null, attributes);\n  }\n  var schemaType = getSchemaTypeNameByName(name, state.schema);\n  if (schemaType === 'node') {\n    return isNodeActive(state, name, attributes);\n  }\n  if (schemaType === 'mark') {\n    return isMarkActive(state, name, attributes);\n  }\n  return false;\n}\nvar isAtEndOfNode = function isAtEndOfNode(state, nodeType) {\n  var _state$selection5 = state.selection,\n    $from = _state$selection5.$from,\n    $to = _state$selection5.$to,\n    $anchor = _state$selection5.$anchor;\n  if (nodeType) {\n    var parentNode = findParentNode(function (node) {\n      return node.type.name === nodeType;\n    })(state.selection);\n    if (!parentNode) {\n      return false;\n    }\n    var $parentPos = state.doc.resolve(parentNode.pos + 1);\n    if ($anchor.pos + 1 === $parentPos.end()) {\n      return true;\n    }\n    return false;\n  }\n  if ($to.parentOffset < $to.parent.nodeSize - 2 || $from.pos !== $to.pos) {\n    return false;\n  }\n  return true;\n};\nvar isAtStartOfNode = function isAtStartOfNode(state) {\n  var _state$selection6 = state.selection,\n    $from = _state$selection6.$from,\n    $to = _state$selection6.$to;\n  if ($from.parentOffset > 0 || $from.pos !== $to.pos) {\n    return false;\n  }\n  return true;\n};\nfunction isList(name, extensions) {\n  var _splitExtensions4 = splitExtensions(extensions),\n    nodeExtensions = _splitExtensions4.nodeExtensions;\n  var extension = nodeExtensions.find(function (item) {\n    return item.name === name;\n  });\n  if (!extension) {\n    return false;\n  }\n  var context = {\n    name: extension.name,\n    options: extension.options,\n    storage: extension.storage\n  };\n  var group = callOrReturn(getExtensionField(extension, 'group', context));\n  if (typeof group !== 'string') {\n    return false;\n  }\n  return group.split(' ').includes('list');\n}\n\n/**\n * Returns true if the given prosemirror node is empty.\n */\nfunction isNodeEmpty(node) {\n  var _ref73 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    _ref73$checkChildren = _ref73.checkChildren,\n    checkChildren = _ref73$checkChildren === void 0 ? true : _ref73$checkChildren,\n    _ref73$ignoreWhitespa = _ref73.ignoreWhitespace,\n    ignoreWhitespace = _ref73$ignoreWhitespa === void 0 ? false : _ref73$ignoreWhitespa;\n  var _a;\n  if (ignoreWhitespace) {\n    if (node.type.name === 'hardBreak') {\n      // Hard breaks are considered empty\n      return true;\n    }\n    if (node.isText) {\n      return /^\\s*$/m.test((_a = node.text) !== null && _a !== void 0 ? _a : '');\n    }\n  }\n  if (node.isText) {\n    return !node.text;\n  }\n  if (node.isAtom || node.isLeaf) {\n    return false;\n  }\n  if (node.content.childCount === 0) {\n    return true;\n  }\n  if (checkChildren) {\n    var isContentEmpty = true;\n    node.content.forEach(function (childNode) {\n      if (isContentEmpty === false) {\n        // Exit early for perf\n        return;\n      }\n      if (!isNodeEmpty(childNode, {\n        ignoreWhitespace: ignoreWhitespace,\n        checkChildren: checkChildren\n      })) {\n        isContentEmpty = false;\n      }\n    });\n    return isContentEmpty;\n  }\n  return false;\n}\nfunction isNodeSelection(value) {\n  return value instanceof _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.NodeSelection;\n}\nfunction posToDOMRect(view, from, to) {\n  var minPos = 0;\n  var maxPos = view.state.doc.content.size;\n  var resolvedFrom = minMax(from, minPos, maxPos);\n  var resolvedEnd = minMax(to, minPos, maxPos);\n  var start = view.coordsAtPos(resolvedFrom);\n  var end = view.coordsAtPos(resolvedEnd, -1);\n  var top = Math.min(start.top, end.top);\n  var bottom = Math.max(start.bottom, end.bottom);\n  var left = Math.min(start.left, end.left);\n  var right = Math.max(start.right, end.right);\n  var width = right - left;\n  var height = bottom - top;\n  var x = left;\n  var y = top;\n  var data = {\n    top: top,\n    bottom: bottom,\n    left: left,\n    right: right,\n    width: width,\n    height: height,\n    x: x,\n    y: y\n  };\n  return _objectSpread(_objectSpread({}, data), {}, {\n    toJSON: function toJSON() {\n      return data;\n    }\n  });\n}\n\n/**\n * The actual implementation of the rewriteUnknownContent function\n */\nfunction rewriteUnknownContentInner(_ref74) {\n  var json = _ref74.json,\n    validMarks = _ref74.validMarks,\n    validNodes = _ref74.validNodes,\n    options = _ref74.options,\n    _ref74$rewrittenConte = _ref74.rewrittenContent,\n    rewrittenContent = _ref74$rewrittenConte === void 0 ? [] : _ref74$rewrittenConte;\n  if (json.marks && Array.isArray(json.marks)) {\n    json.marks = json.marks.filter(function (mark) {\n      var name = typeof mark === 'string' ? mark : mark.type;\n      if (validMarks.has(name)) {\n        return true;\n      }\n      rewrittenContent.push({\n        original: JSON.parse(JSON.stringify(mark)),\n        unsupported: name\n      });\n      // Just ignore any unknown marks\n      return false;\n    });\n  }\n  if (json.content && Array.isArray(json.content)) {\n    json.content = json.content.map(function (value) {\n      return rewriteUnknownContentInner({\n        json: value,\n        validMarks: validMarks,\n        validNodes: validNodes,\n        options: options,\n        rewrittenContent: rewrittenContent\n      }).json;\n    }).filter(function (a) {\n      return a !== null && a !== undefined;\n    });\n  }\n  if (json.type && !validNodes.has(json.type)) {\n    rewrittenContent.push({\n      original: JSON.parse(JSON.stringify(json)),\n      unsupported: json.type\n    });\n    if (json.content && Array.isArray(json.content) && (options === null || options === void 0 ? void 0 : options.fallbackToParagraph) !== false) {\n      // Just treat it like a paragraph and hope for the best\n      json.type = 'paragraph';\n      return {\n        json: json,\n        rewrittenContent: rewrittenContent\n      };\n    }\n    // or just omit it entirely\n    return {\n      json: null,\n      rewrittenContent: rewrittenContent\n    };\n  }\n  return {\n    json: json,\n    rewrittenContent: rewrittenContent\n  };\n}\n/**\n * Rewrite unknown nodes and marks within JSON content\n * Allowing for user within the editor\n */\nfunction rewriteUnknownContent(\n/**\n * The JSON content to clean of unknown nodes and marks\n */\njson,\n/**\n * The schema to use for validation\n */\nschema,\n/**\n * Options for the cleaning process\n */\noptions) {\n  return rewriteUnknownContentInner({\n    json: json,\n    validNodes: new Set(Object.keys(schema.nodes)),\n    validMarks: new Set(Object.keys(schema.marks)),\n    options: options\n  });\n}\nfunction canSetMark(state, tr, newMarkType) {\n  var _a;\n  var selection = tr.selection;\n  var cursor = null;\n  if (isTextSelection(selection)) {\n    cursor = selection.$cursor;\n  }\n  if (cursor) {\n    var currentMarks = (_a = state.storedMarks) !== null && _a !== void 0 ? _a : cursor.marks();\n    // There can be no current marks that exclude the new mark\n    return !!newMarkType.isInSet(currentMarks) || !currentMarks.some(function (mark) {\n      return mark.type.excludes(newMarkType);\n    });\n  }\n  var ranges = selection.ranges;\n  return ranges.some(function (_ref75) {\n    var $from = _ref75.$from,\n      $to = _ref75.$to;\n    var someNodeSupportsMark = $from.depth === 0 ? state.doc.inlineContent && state.doc.type.allowsMarkType(newMarkType) : false;\n    state.doc.nodesBetween($from.pos, $to.pos, function (node, _pos, parent) {\n      // If we already found a mark that we can enable, return false to bypass the remaining search\n      if (someNodeSupportsMark) {\n        return false;\n      }\n      if (node.isInline) {\n        var parentAllowsMarkType = !parent || parent.type.allowsMarkType(newMarkType);\n        var currentMarksAllowMarkType = !!newMarkType.isInSet(node.marks) || !node.marks.some(function (otherMark) {\n          return otherMark.type.excludes(newMarkType);\n        });\n        someNodeSupportsMark = parentAllowsMarkType && currentMarksAllowMarkType;\n      }\n      return !someNodeSupportsMark;\n    });\n    return someNodeSupportsMark;\n  });\n}\nvar setMark = function setMark(typeOrName) {\n  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return function (_ref76) {\n    var tr = _ref76.tr,\n      state = _ref76.state,\n      dispatch = _ref76.dispatch;\n    var selection = tr.selection;\n    var empty = selection.empty,\n      ranges = selection.ranges;\n    var type = getMarkType(typeOrName, state.schema);\n    if (dispatch) {\n      if (empty) {\n        var oldAttributes = getMarkAttributes(state, type);\n        tr.addStoredMark(type.create(_objectSpread(_objectSpread({}, oldAttributes), attributes)));\n      } else {\n        ranges.forEach(function (range) {\n          var from = range.$from.pos;\n          var to = range.$to.pos;\n          state.doc.nodesBetween(from, to, function (node, pos) {\n            var trimmedFrom = Math.max(pos, from);\n            var trimmedTo = Math.min(pos + node.nodeSize, to);\n            var someHasMark = node.marks.find(function (mark) {\n              return mark.type === type;\n            });\n            // if there is already a mark of this type\n            // we know that we have to merge its attributes\n            // otherwise we add a fresh new mark\n            if (someHasMark) {\n              node.marks.forEach(function (mark) {\n                if (type === mark.type) {\n                  tr.addMark(trimmedFrom, trimmedTo, type.create(_objectSpread(_objectSpread({}, mark.attrs), attributes)));\n                }\n              });\n            } else {\n              tr.addMark(trimmedFrom, trimmedTo, type.create(attributes));\n            }\n          });\n        });\n      }\n    }\n    return canSetMark(state, tr, type);\n  };\n};\nvar setMeta = function setMeta(key, value) {\n  return function (_ref77) {\n    var tr = _ref77.tr;\n    tr.setMeta(key, value);\n    return true;\n  };\n};\nvar setNode = function setNode(typeOrName) {\n  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return function (_ref78) {\n    var state = _ref78.state,\n      dispatch = _ref78.dispatch,\n      chain = _ref78.chain;\n    var type = getNodeType(typeOrName, state.schema);\n    var attributesToCopy;\n    if (state.selection.$anchor.sameParent(state.selection.$head)) {\n      // only copy attributes if the selection is pointing to a node of the same type\n      attributesToCopy = state.selection.$anchor.parent.attrs;\n    }\n    // TODO: use a fallback like insertContent?\n    if (!type.isTextblock) {\n      console.warn('[tiptap warn]: Currently \"setNode()\" only supports text block nodes.');\n      return false;\n    }\n    return chain()\n    // try to convert node to default node if needed\n    .command(function (_ref79) {\n      var commands = _ref79.commands;\n      var canSetBlock = (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.setBlockType)(type, _objectSpread(_objectSpread({}, attributesToCopy), attributes))(state);\n      if (canSetBlock) {\n        return true;\n      }\n      return commands.clearNodes();\n    }).command(function (_ref80) {\n      var updatedState = _ref80.state;\n      return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.setBlockType)(type, _objectSpread(_objectSpread({}, attributesToCopy), attributes))(updatedState, dispatch);\n    }).run();\n  };\n};\nvar setNodeSelection = function setNodeSelection(position) {\n  return function (_ref81) {\n    var tr = _ref81.tr,\n      dispatch = _ref81.dispatch;\n    if (dispatch) {\n      var doc = tr.doc;\n      var from = minMax(position, 0, doc.content.size);\n      var selection = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.NodeSelection.create(doc, from);\n      tr.setSelection(selection);\n    }\n    return true;\n  };\n};\nvar setTextSelection = function setTextSelection(position) {\n  return function (_ref82) {\n    var tr = _ref82.tr,\n      dispatch = _ref82.dispatch;\n    if (dispatch) {\n      var doc = tr.doc;\n      var _ref83 = typeof position === 'number' ? {\n          from: position,\n          to: position\n        } : position,\n        from = _ref83.from,\n        to = _ref83.to;\n      var minPos = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.atStart(doc).from;\n      var maxPos = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.atEnd(doc).to;\n      var resolvedFrom = minMax(from, minPos, maxPos);\n      var resolvedEnd = minMax(to, minPos, maxPos);\n      var selection = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.create(doc, resolvedFrom, resolvedEnd);\n      tr.setSelection(selection);\n    }\n    return true;\n  };\n};\nvar sinkListItem = function sinkListItem(typeOrName) {\n  return function (_ref84) {\n    var state = _ref84.state,\n      dispatch = _ref84.dispatch;\n    var type = getNodeType(typeOrName, state.schema);\n    return (0,_tiptap_pm_schema_list__WEBPACK_IMPORTED_MODULE_6__.sinkListItem)(type)(state, dispatch);\n  };\n};\nfunction ensureMarks(state, splittableMarks) {\n  var marks = state.storedMarks || state.selection.$to.parentOffset && state.selection.$from.marks();\n  if (marks) {\n    var filteredMarks = marks.filter(function (mark) {\n      return splittableMarks === null || splittableMarks === void 0 ? void 0 : splittableMarks.includes(mark.type.name);\n    });\n    state.tr.ensureMarks(filteredMarks);\n  }\n}\nvar splitBlock = function splitBlock() {\n  var _ref85 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    _ref85$keepMarks = _ref85.keepMarks,\n    keepMarks = _ref85$keepMarks === void 0 ? true : _ref85$keepMarks;\n  return function (_ref86) {\n    var tr = _ref86.tr,\n      state = _ref86.state,\n      dispatch = _ref86.dispatch,\n      editor = _ref86.editor;\n    var selection = tr.selection,\n      doc = tr.doc;\n    var $from = selection.$from,\n      $to = selection.$to;\n    var extensionAttributes = editor.extensionManager.attributes;\n    var newAttributes = getSplittedAttributes(extensionAttributes, $from.node().type.name, $from.node().attrs);\n    if (selection instanceof _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.NodeSelection && selection.node.isBlock) {\n      if (!$from.parentOffset || !(0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.canSplit)(doc, $from.pos)) {\n        return false;\n      }\n      if (dispatch) {\n        if (keepMarks) {\n          ensureMarks(state, editor.extensionManager.splittableMarks);\n        }\n        tr.split($from.pos).scrollIntoView();\n      }\n      return true;\n    }\n    if (!$from.parent.isBlock) {\n      return false;\n    }\n    var atEnd = $to.parentOffset === $to.parent.content.size;\n    var deflt = $from.depth === 0 ? undefined : defaultBlockAt($from.node(-1).contentMatchAt($from.indexAfter(-1)));\n    var types = atEnd && deflt ? [{\n      type: deflt,\n      attrs: newAttributes\n    }] : undefined;\n    var can = (0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.canSplit)(tr.doc, tr.mapping.map($from.pos), 1, types);\n    if (!types && !can && (0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.canSplit)(tr.doc, tr.mapping.map($from.pos), 1, deflt ? [{\n      type: deflt\n    }] : undefined)) {\n      can = true;\n      types = deflt ? [{\n        type: deflt,\n        attrs: newAttributes\n      }] : undefined;\n    }\n    if (dispatch) {\n      if (can) {\n        if (selection instanceof _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection) {\n          tr.deleteSelection();\n        }\n        tr.split(tr.mapping.map($from.pos), 1, types);\n        if (deflt && !atEnd && !$from.parentOffset && $from.parent.type !== deflt) {\n          var _first = tr.mapping.map($from.before());\n          var $first = tr.doc.resolve(_first);\n          if ($from.node(-1).canReplaceWith($first.index(), $first.index() + 1, deflt)) {\n            tr.setNodeMarkup(tr.mapping.map($from.before()), deflt);\n          }\n        }\n      }\n      if (keepMarks) {\n        ensureMarks(state, editor.extensionManager.splittableMarks);\n      }\n      tr.scrollIntoView();\n    }\n    return can;\n  };\n};\nvar splitListItem = function splitListItem(typeOrName) {\n  var overrideAttrs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return function (_ref87) {\n    var tr = _ref87.tr,\n      state = _ref87.state,\n      dispatch = _ref87.dispatch,\n      editor = _ref87.editor;\n    var _a;\n    var type = getNodeType(typeOrName, state.schema);\n    var _state$selection7 = state.selection,\n      $from = _state$selection7.$from,\n      $to = _state$selection7.$to;\n    // @ts-ignore\n    // eslint-disable-next-line\n    var node = state.selection.node;\n    if (node && node.isBlock || $from.depth < 2 || !$from.sameParent($to)) {\n      return false;\n    }\n    var grandParent = $from.node(-1);\n    if (grandParent.type !== type) {\n      return false;\n    }\n    var extensionAttributes = editor.extensionManager.attributes;\n    if ($from.parent.content.size === 0 && $from.node(-1).childCount === $from.indexAfter(-1)) {\n      // In an empty block. If this is a nested list, the wrapping\n      // list item should be split. Otherwise, bail out and let next\n      // command handle lifting.\n      if ($from.depth === 2 || $from.node(-3).type !== type || $from.index(-2) !== $from.node(-2).childCount - 1) {\n        return false;\n      }\n      if (dispatch) {\n        var wrap = _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.Fragment.empty;\n        // eslint-disable-next-line\n        var depthBefore = $from.index(-1) ? 1 : $from.index(-2) ? 2 : 3;\n        // Build a fragment containing empty versions of the structure\n        // from the outer list item to the parent node of the cursor\n        for (var d = $from.depth - depthBefore; d >= $from.depth - 3; d -= 1) {\n          wrap = _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.Fragment.from($from.node(d).copy(wrap));\n        }\n        // eslint-disable-next-line\n        var depthAfter = $from.indexAfter(-1) < $from.node(-2).childCount ? 1 : $from.indexAfter(-2) < $from.node(-3).childCount ? 2 : 3;\n        // Add a second list item with an empty default start node\n        var _newNextTypeAttributes = _objectSpread(_objectSpread({}, getSplittedAttributes(extensionAttributes, $from.node().type.name, $from.node().attrs)), overrideAttrs);\n        var _nextType = ((_a = type.contentMatch.defaultType) === null || _a === void 0 ? void 0 : _a.createAndFill(_newNextTypeAttributes)) || undefined;\n        wrap = wrap.append(_tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.Fragment.from(type.createAndFill(null, _nextType) || undefined));\n        var start = $from.before($from.depth - (depthBefore - 1));\n        tr.replace(start, $from.after(-depthAfter), new _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.Slice(wrap, 4 - depthBefore, 0));\n        var sel = -1;\n        tr.doc.nodesBetween(start, tr.doc.content.size, function (n, pos) {\n          if (sel > -1) {\n            return false;\n          }\n          if (n.isTextblock && n.content.size === 0) {\n            sel = pos + 1;\n          }\n        });\n        if (sel > -1) {\n          tr.setSelection(_tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.near(tr.doc.resolve(sel)));\n        }\n        tr.scrollIntoView();\n      }\n      return true;\n    }\n    var nextType = $to.pos === $from.end() ? grandParent.contentMatchAt(0).defaultType : null;\n    var newTypeAttributes = _objectSpread(_objectSpread({}, getSplittedAttributes(extensionAttributes, grandParent.type.name, grandParent.attrs)), overrideAttrs);\n    var newNextTypeAttributes = _objectSpread(_objectSpread({}, getSplittedAttributes(extensionAttributes, $from.node().type.name, $from.node().attrs)), overrideAttrs);\n    tr[\"delete\"]($from.pos, $to.pos);\n    var types = nextType ? [{\n      type: type,\n      attrs: newTypeAttributes\n    }, {\n      type: nextType,\n      attrs: newNextTypeAttributes\n    }] : [{\n      type: type,\n      attrs: newTypeAttributes\n    }];\n    if (!(0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.canSplit)(tr.doc, $from.pos, 2)) {\n      return false;\n    }\n    if (dispatch) {\n      var selection = state.selection,\n        storedMarks = state.storedMarks;\n      var splittableMarks = editor.extensionManager.splittableMarks;\n      var marks = storedMarks || selection.$to.parentOffset && selection.$from.marks();\n      tr.split($from.pos, 2, types).scrollIntoView();\n      if (!marks || !dispatch) {\n        return true;\n      }\n      var filteredMarks = marks.filter(function (mark) {\n        return splittableMarks.includes(mark.type.name);\n      });\n      tr.ensureMarks(filteredMarks);\n    }\n    return true;\n  };\n};\nvar joinListBackwards = function joinListBackwards(tr, listType) {\n  var list = findParentNode(function (node) {\n    return node.type === listType;\n  })(tr.selection);\n  if (!list) {\n    return true;\n  }\n  var before = tr.doc.resolve(Math.max(0, list.pos - 1)).before(list.depth);\n  if (before === undefined) {\n    return true;\n  }\n  var nodeBefore = tr.doc.nodeAt(before);\n  var canJoinBackwards = list.node.type === (nodeBefore === null || nodeBefore === void 0 ? void 0 : nodeBefore.type) && (0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.canJoin)(tr.doc, list.pos);\n  if (!canJoinBackwards) {\n    return true;\n  }\n  tr.join(list.pos);\n  return true;\n};\nvar joinListForwards = function joinListForwards(tr, listType) {\n  var list = findParentNode(function (node) {\n    return node.type === listType;\n  })(tr.selection);\n  if (!list) {\n    return true;\n  }\n  var after = tr.doc.resolve(list.start).after(list.depth);\n  if (after === undefined) {\n    return true;\n  }\n  var nodeAfter = tr.doc.nodeAt(after);\n  var canJoinForwards = list.node.type === (nodeAfter === null || nodeAfter === void 0 ? void 0 : nodeAfter.type) && (0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.canJoin)(tr.doc, after);\n  if (!canJoinForwards) {\n    return true;\n  }\n  tr.join(after);\n  return true;\n};\nvar toggleList = function toggleList(listTypeOrName, itemTypeOrName, keepMarks) {\n  var attributes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  return function (_ref88) {\n    var editor = _ref88.editor,\n      tr = _ref88.tr,\n      state = _ref88.state,\n      dispatch = _ref88.dispatch,\n      chain = _ref88.chain,\n      commands = _ref88.commands,\n      can = _ref88.can;\n    var _editor$extensionMana = editor.extensionManager,\n      extensions = _editor$extensionMana.extensions,\n      splittableMarks = _editor$extensionMana.splittableMarks;\n    var listType = getNodeType(listTypeOrName, state.schema);\n    var itemType = getNodeType(itemTypeOrName, state.schema);\n    var selection = state.selection,\n      storedMarks = state.storedMarks;\n    var $from = selection.$from,\n      $to = selection.$to;\n    var range = $from.blockRange($to);\n    var marks = storedMarks || selection.$to.parentOffset && selection.$from.marks();\n    if (!range) {\n      return false;\n    }\n    var parentList = findParentNode(function (node) {\n      return isList(node.type.name, extensions);\n    })(selection);\n    if (range.depth >= 1 && parentList && range.depth - parentList.depth <= 1) {\n      // remove list\n      if (parentList.node.type === listType) {\n        return commands.liftListItem(itemType);\n      }\n      // change list type\n      if (isList(parentList.node.type.name, extensions) && listType.validContent(parentList.node.content) && dispatch) {\n        return chain().command(function () {\n          tr.setNodeMarkup(parentList.pos, listType);\n          return true;\n        }).command(function () {\n          return joinListBackwards(tr, listType);\n        }).command(function () {\n          return joinListForwards(tr, listType);\n        }).run();\n      }\n    }\n    if (!keepMarks || !marks || !dispatch) {\n      return chain()\n      // try to convert node to default node if needed\n      .command(function () {\n        var canWrapInList = can().wrapInList(listType, attributes);\n        if (canWrapInList) {\n          return true;\n        }\n        return commands.clearNodes();\n      }).wrapInList(listType, attributes).command(function () {\n        return joinListBackwards(tr, listType);\n      }).command(function () {\n        return joinListForwards(tr, listType);\n      }).run();\n    }\n    return chain()\n    // try to convert node to default node if needed\n    .command(function () {\n      var canWrapInList = can().wrapInList(listType, attributes);\n      var filteredMarks = marks.filter(function (mark) {\n        return splittableMarks.includes(mark.type.name);\n      });\n      tr.ensureMarks(filteredMarks);\n      if (canWrapInList) {\n        return true;\n      }\n      return commands.clearNodes();\n    }).wrapInList(listType, attributes).command(function () {\n      return joinListBackwards(tr, listType);\n    }).command(function () {\n      return joinListForwards(tr, listType);\n    }).run();\n  };\n};\nvar toggleMark = function toggleMark(typeOrName) {\n  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return function (_ref89) {\n    var state = _ref89.state,\n      commands = _ref89.commands;\n    var _options$extendEmptyM = options.extendEmptyMarkRange,\n      extendEmptyMarkRange = _options$extendEmptyM === void 0 ? false : _options$extendEmptyM;\n    var type = getMarkType(typeOrName, state.schema);\n    var isActive = isMarkActive(state, type, attributes);\n    if (isActive) {\n      return commands.unsetMark(type, {\n        extendEmptyMarkRange: extendEmptyMarkRange\n      });\n    }\n    return commands.setMark(type, attributes);\n  };\n};\nvar toggleNode = function toggleNode(typeOrName, toggleTypeOrName) {\n  var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return function (_ref90) {\n    var state = _ref90.state,\n      commands = _ref90.commands;\n    var type = getNodeType(typeOrName, state.schema);\n    var toggleType = getNodeType(toggleTypeOrName, state.schema);\n    var isActive = isNodeActive(state, type, attributes);\n    var attributesToCopy;\n    if (state.selection.$anchor.sameParent(state.selection.$head)) {\n      // only copy attributes if the selection is pointing to a node of the same type\n      attributesToCopy = state.selection.$anchor.parent.attrs;\n    }\n    if (isActive) {\n      return commands.setNode(toggleType, attributesToCopy);\n    }\n    // If the node is not active, we want to set the new node type with the given attributes\n    // Copying over the attributes from the current node if the selection is pointing to a node of the same type\n    return commands.setNode(type, _objectSpread(_objectSpread({}, attributesToCopy), attributes));\n  };\n};\nvar toggleWrap = function toggleWrap(typeOrName) {\n  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return function (_ref91) {\n    var state = _ref91.state,\n      commands = _ref91.commands;\n    var type = getNodeType(typeOrName, state.schema);\n    var isActive = isNodeActive(state, type, attributes);\n    if (isActive) {\n      return commands.lift(type);\n    }\n    return commands.wrapIn(type, attributes);\n  };\n};\nvar undoInputRule = function undoInputRule() {\n  return function (_ref92) {\n    var state = _ref92.state,\n      dispatch = _ref92.dispatch;\n    var plugins = state.plugins;\n    for (var i = 0; i < plugins.length; i += 1) {\n      var plugin = plugins[i];\n      var undoable = void 0;\n      // @ts-ignore\n      // eslint-disable-next-line\n      if (plugin.spec.isInputRules && (undoable = plugin.getState(state))) {\n        if (dispatch) {\n          var tr = state.tr;\n          var toUndo = undoable.transform;\n          for (var j = toUndo.steps.length - 1; j >= 0; j -= 1) {\n            tr.step(toUndo.steps[j].invert(toUndo.docs[j]));\n          }\n          if (undoable.text) {\n            var marks = tr.doc.resolve(undoable.from).marks();\n            tr.replaceWith(undoable.from, undoable.to, state.schema.text(undoable.text, marks));\n          } else {\n            tr[\"delete\"](undoable.from, undoable.to);\n          }\n        }\n        return true;\n      }\n    }\n    return false;\n  };\n};\nvar unsetAllMarks = function unsetAllMarks() {\n  return function (_ref93) {\n    var tr = _ref93.tr,\n      dispatch = _ref93.dispatch;\n    var selection = tr.selection;\n    var empty = selection.empty,\n      ranges = selection.ranges;\n    if (empty) {\n      return true;\n    }\n    if (dispatch) {\n      ranges.forEach(function (range) {\n        tr.removeMark(range.$from.pos, range.$to.pos);\n      });\n    }\n    return true;\n  };\n};\nvar unsetMark = function unsetMark(typeOrName) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return function (_ref94) {\n    var tr = _ref94.tr,\n      state = _ref94.state,\n      dispatch = _ref94.dispatch;\n    var _a;\n    var _options$extendEmptyM2 = options.extendEmptyMarkRange,\n      extendEmptyMarkRange = _options$extendEmptyM2 === void 0 ? false : _options$extendEmptyM2;\n    var selection = tr.selection;\n    var type = getMarkType(typeOrName, state.schema);\n    var $from = selection.$from,\n      empty = selection.empty,\n      ranges = selection.ranges;\n    if (!dispatch) {\n      return true;\n    }\n    if (empty && extendEmptyMarkRange) {\n      var from = selection.from,\n        to = selection.to;\n      var attrs = (_a = $from.marks().find(function (mark) {\n        return mark.type === type;\n      })) === null || _a === void 0 ? void 0 : _a.attrs;\n      var range = getMarkRange($from, type, attrs);\n      if (range) {\n        from = range.from;\n        to = range.to;\n      }\n      tr.removeMark(from, to, type);\n    } else {\n      ranges.forEach(function (range) {\n        tr.removeMark(range.$from.pos, range.$to.pos, type);\n      });\n    }\n    tr.removeStoredMark(type);\n    return true;\n  };\n};\nvar updateAttributes = function updateAttributes(typeOrName) {\n  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return function (_ref95) {\n    var tr = _ref95.tr,\n      state = _ref95.state,\n      dispatch = _ref95.dispatch;\n    var nodeType = null;\n    var markType = null;\n    var schemaType = getSchemaTypeNameByName(typeof typeOrName === 'string' ? typeOrName : typeOrName.name, state.schema);\n    if (!schemaType) {\n      return false;\n    }\n    if (schemaType === 'node') {\n      nodeType = getNodeType(typeOrName, state.schema);\n    }\n    if (schemaType === 'mark') {\n      markType = getMarkType(typeOrName, state.schema);\n    }\n    if (dispatch) {\n      tr.selection.ranges.forEach(function (range) {\n        var from = range.$from.pos;\n        var to = range.$to.pos;\n        var lastPos;\n        var lastNode;\n        var trimmedFrom;\n        var trimmedTo;\n        if (tr.selection.empty) {\n          state.doc.nodesBetween(from, to, function (node, pos) {\n            if (nodeType && nodeType === node.type) {\n              trimmedFrom = Math.max(pos, from);\n              trimmedTo = Math.min(pos + node.nodeSize, to);\n              lastPos = pos;\n              lastNode = node;\n            }\n          });\n        } else {\n          state.doc.nodesBetween(from, to, function (node, pos) {\n            if (pos < from && nodeType && nodeType === node.type) {\n              trimmedFrom = Math.max(pos, from);\n              trimmedTo = Math.min(pos + node.nodeSize, to);\n              lastPos = pos;\n              lastNode = node;\n            }\n            if (pos >= from && pos <= to) {\n              if (nodeType && nodeType === node.type) {\n                tr.setNodeMarkup(pos, undefined, _objectSpread(_objectSpread({}, node.attrs), attributes));\n              }\n              if (markType && node.marks.length) {\n                node.marks.forEach(function (mark) {\n                  if (markType === mark.type) {\n                    var trimmedFrom2 = Math.max(pos, from);\n                    var trimmedTo2 = Math.min(pos + node.nodeSize, to);\n                    tr.addMark(trimmedFrom2, trimmedTo2, markType.create(_objectSpread(_objectSpread({}, mark.attrs), attributes)));\n                  }\n                });\n              }\n            }\n          });\n        }\n        if (lastNode) {\n          if (lastPos !== undefined) {\n            tr.setNodeMarkup(lastPos, undefined, _objectSpread(_objectSpread({}, lastNode.attrs), attributes));\n          }\n          if (markType && lastNode.marks.length) {\n            lastNode.marks.forEach(function (mark) {\n              if (markType === mark.type) {\n                tr.addMark(trimmedFrom, trimmedTo, markType.create(_objectSpread(_objectSpread({}, mark.attrs), attributes)));\n              }\n            });\n          }\n        }\n      });\n    }\n    return true;\n  };\n};\nvar wrapIn = function wrapIn(typeOrName) {\n  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return function (_ref96) {\n    var state = _ref96.state,\n      dispatch = _ref96.dispatch;\n    var type = getNodeType(typeOrName, state.schema);\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.wrapIn)(type, attributes)(state, dispatch);\n  };\n};\nvar wrapInList = function wrapInList(typeOrName) {\n  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return function (_ref97) {\n    var state = _ref97.state,\n      dispatch = _ref97.dispatch;\n    var type = getNodeType(typeOrName, state.schema);\n    return (0,_tiptap_pm_schema_list__WEBPACK_IMPORTED_MODULE_6__.wrapInList)(type, attributes)(state, dispatch);\n  };\n};\nvar commands = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  blur: blur,\n  clearContent: clearContent,\n  clearNodes: clearNodes,\n  command: command,\n  createParagraphNear: createParagraphNear,\n  cut: cut,\n  deleteCurrentNode: deleteCurrentNode,\n  deleteNode: deleteNode,\n  deleteRange: deleteRange,\n  deleteSelection: deleteSelection,\n  enter: enter,\n  exitCode: exitCode,\n  extendMarkRange: extendMarkRange,\n  first: first,\n  focus: focus,\n  forEach: forEach,\n  insertContent: insertContent,\n  insertContentAt: insertContentAt,\n  joinBackward: joinBackward,\n  joinDown: joinDown,\n  joinForward: joinForward,\n  joinItemBackward: joinItemBackward,\n  joinItemForward: joinItemForward,\n  joinTextblockBackward: joinTextblockBackward,\n  joinTextblockForward: joinTextblockForward,\n  joinUp: joinUp,\n  keyboardShortcut: keyboardShortcut,\n  lift: lift,\n  liftEmptyBlock: liftEmptyBlock,\n  liftListItem: liftListItem,\n  newlineInCode: newlineInCode,\n  resetAttributes: resetAttributes,\n  scrollIntoView: scrollIntoView,\n  selectAll: selectAll,\n  selectNodeBackward: selectNodeBackward,\n  selectNodeForward: selectNodeForward,\n  selectParentNode: selectParentNode,\n  selectTextblockEnd: selectTextblockEnd,\n  selectTextblockStart: selectTextblockStart,\n  setContent: setContent,\n  setMark: setMark,\n  setMeta: setMeta,\n  setNode: setNode,\n  setNodeSelection: setNodeSelection,\n  setTextSelection: setTextSelection,\n  sinkListItem: sinkListItem,\n  splitBlock: splitBlock,\n  splitListItem: splitListItem,\n  toggleList: toggleList,\n  toggleMark: toggleMark,\n  toggleNode: toggleNode,\n  toggleWrap: toggleWrap,\n  undoInputRule: undoInputRule,\n  unsetAllMarks: unsetAllMarks,\n  unsetMark: unsetMark,\n  updateAttributes: updateAttributes,\n  wrapIn: wrapIn,\n  wrapInList: wrapInList\n});\nvar Commands = Extension.create({\n  name: 'commands',\n  addCommands: function addCommands() {\n    return _objectSpread({}, commands);\n  }\n});\nvar Drop = Extension.create({\n  name: 'drop',\n  addProseMirrorPlugins: function addProseMirrorPlugins() {\n    var _this17 = this;\n    return [new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n      key: new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey('tiptapDrop'),\n      props: {\n        handleDrop: function handleDrop(_, e, slice, moved) {\n          _this17.editor.emit('drop', {\n            editor: _this17.editor,\n            event: e,\n            slice: slice,\n            moved: moved\n          });\n        }\n      }\n    })];\n  }\n});\nvar Editable = Extension.create({\n  name: 'editable',\n  addProseMirrorPlugins: function addProseMirrorPlugins() {\n    var _this18 = this;\n    return [new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n      key: new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey('editable'),\n      props: {\n        editable: function editable() {\n          return _this18.editor.options.editable;\n        }\n      }\n    })];\n  }\n});\nvar FocusEvents = Extension.create({\n  name: 'focusEvents',\n  addProseMirrorPlugins: function addProseMirrorPlugins() {\n    var editor = this.editor;\n    return [new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n      key: new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey('focusEvents'),\n      props: {\n        handleDOMEvents: {\n          focus: function focus(view, event) {\n            editor.isFocused = true;\n            var transaction = editor.state.tr.setMeta('focus', {\n              event: event\n            }).setMeta('addToHistory', false);\n            view.dispatch(transaction);\n            return false;\n          },\n          blur: function blur(view, event) {\n            editor.isFocused = false;\n            var transaction = editor.state.tr.setMeta('blur', {\n              event: event\n            }).setMeta('addToHistory', false);\n            view.dispatch(transaction);\n            return false;\n          }\n        }\n      }\n    })];\n  }\n});\nvar Keymap = Extension.create({\n  name: 'keymap',\n  addKeyboardShortcuts: function addKeyboardShortcuts() {\n    var _this19 = this;\n    var handleBackspace = function handleBackspace() {\n      return _this19.editor.commands.first(function (_ref98) {\n        var commands = _ref98.commands;\n        return [function () {\n          return commands.undoInputRule();\n        },\n        // maybe convert first text block node to default node\n        function () {\n          return commands.command(function (_ref99) {\n            var tr = _ref99.tr;\n            var selection = tr.selection,\n              doc = tr.doc;\n            var empty = selection.empty,\n              $anchor = selection.$anchor;\n            var pos = $anchor.pos,\n              parent = $anchor.parent;\n            var $parentPos = $anchor.parent.isTextblock && pos > 0 ? tr.doc.resolve(pos - 1) : $anchor;\n            var parentIsIsolating = $parentPos.parent.type.spec.isolating;\n            var parentPos = $anchor.pos - $anchor.parentOffset;\n            var isAtStart = parentIsIsolating && $parentPos.parent.childCount === 1 ? parentPos === $anchor.pos : _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Selection.atStart(doc).from === pos;\n            if (!empty || !parent.type.isTextblock || parent.textContent.length || !isAtStart || isAtStart && $anchor.parent.type.name === 'paragraph' // prevent clearNodes when no nodes to clear, otherwise history stack is appended\n            ) {\n              return false;\n            }\n            return commands.clearNodes();\n          });\n        }, function () {\n          return commands.deleteSelection();\n        }, function () {\n          return commands.joinBackward();\n        }, function () {\n          return commands.selectNodeBackward();\n        }];\n      });\n    };\n    var handleDelete = function handleDelete() {\n      return _this19.editor.commands.first(function (_ref100) {\n        var commands = _ref100.commands;\n        return [function () {\n          return commands.deleteSelection();\n        }, function () {\n          return commands.deleteCurrentNode();\n        }, function () {\n          return commands.joinForward();\n        }, function () {\n          return commands.selectNodeForward();\n        }];\n      });\n    };\n    var handleEnter = function handleEnter() {\n      return _this19.editor.commands.first(function (_ref101) {\n        var commands = _ref101.commands;\n        return [function () {\n          return commands.newlineInCode();\n        }, function () {\n          return commands.createParagraphNear();\n        }, function () {\n          return commands.liftEmptyBlock();\n        }, function () {\n          return commands.splitBlock();\n        }];\n      });\n    };\n    var baseKeymap = {\n      Enter: handleEnter,\n      'Mod-Enter': function ModEnter() {\n        return _this19.editor.commands.exitCode();\n      },\n      Backspace: handleBackspace,\n      'Mod-Backspace': handleBackspace,\n      'Shift-Backspace': handleBackspace,\n      Delete: handleDelete,\n      'Mod-Delete': handleDelete,\n      'Mod-a': function ModA() {\n        return _this19.editor.commands.selectAll();\n      }\n    };\n    var pcKeymap = _objectSpread({}, baseKeymap);\n    var macKeymap = _objectSpread(_objectSpread({}, baseKeymap), {}, {\n      'Ctrl-h': handleBackspace,\n      'Alt-Backspace': handleBackspace,\n      'Ctrl-d': handleDelete,\n      'Ctrl-Alt-Backspace': handleDelete,\n      'Alt-Delete': handleDelete,\n      'Alt-d': handleDelete,\n      'Ctrl-a': function CtrlA() {\n        return _this19.editor.commands.selectTextblockStart();\n      },\n      'Ctrl-e': function CtrlE() {\n        return _this19.editor.commands.selectTextblockEnd();\n      }\n    });\n    if (isiOS() || isMacOS()) {\n      return macKeymap;\n    }\n    return pcKeymap;\n  },\n  addProseMirrorPlugins: function addProseMirrorPlugins() {\n    var _this20 = this;\n    return [\n    // With this plugin we check if the whole document was selected and deleted.\n    // In this case we will additionally call `clearNodes()` to convert e.g. a heading\n    // to a paragraph if necessary.\n    // This is an alternative to ProseMirror's `AllSelection`, which doesn’t work well\n    // with many other commands.\n    new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n      key: new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey('clearDocument'),\n      appendTransaction: function appendTransaction(transactions, oldState, newState) {\n        if (transactions.some(function (tr) {\n          return tr.getMeta('composition');\n        })) {\n          return;\n        }\n        var docChanges = transactions.some(function (transaction) {\n          return transaction.docChanged;\n        }) && !oldState.doc.eq(newState.doc);\n        var ignoreTr = transactions.some(function (transaction) {\n          return transaction.getMeta('preventClearDocument');\n        });\n        if (!docChanges || ignoreTr) {\n          return;\n        }\n        var _oldState$selection = oldState.selection,\n          empty = _oldState$selection.empty,\n          from = _oldState$selection.from,\n          to = _oldState$selection.to;\n        var allFrom = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Selection.atStart(oldState.doc).from;\n        var allEnd = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Selection.atEnd(oldState.doc).to;\n        var allWasSelected = from === allFrom && to === allEnd;\n        if (empty || !allWasSelected) {\n          return;\n        }\n        var isEmpty = isNodeEmpty(newState.doc);\n        if (!isEmpty) {\n          return;\n        }\n        var tr = newState.tr;\n        var state = createChainableState({\n          state: newState,\n          transaction: tr\n        });\n        var _CommandManager3 = new CommandManager({\n            editor: _this20.editor,\n            state: state\n          }),\n          commands = _CommandManager3.commands;\n        commands.clearNodes();\n        if (!tr.steps.length) {\n          return;\n        }\n        return tr;\n      }\n    })];\n  }\n});\nvar Paste = Extension.create({\n  name: 'paste',\n  addProseMirrorPlugins: function addProseMirrorPlugins() {\n    var _this21 = this;\n    return [new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n      key: new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey('tiptapPaste'),\n      props: {\n        handlePaste: function handlePaste(_view, e, slice) {\n          _this21.editor.emit('paste', {\n            editor: _this21.editor,\n            event: e,\n            slice: slice\n          });\n        }\n      }\n    })];\n  }\n});\nvar Tabindex = Extension.create({\n  name: 'tabindex',\n  addProseMirrorPlugins: function addProseMirrorPlugins() {\n    var _this22 = this;\n    return [new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n      key: new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey('tabindex'),\n      props: {\n        attributes: function attributes() {\n          return _this22.editor.isEditable ? {\n            tabindex: '0'\n          } : {};\n        }\n      }\n    })];\n  }\n});\nvar index = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ClipboardTextSerializer: ClipboardTextSerializer,\n  Commands: Commands,\n  Drop: Drop,\n  Editable: Editable,\n  FocusEvents: FocusEvents,\n  Keymap: Keymap,\n  Paste: Paste,\n  Tabindex: Tabindex\n});\nvar NodePos = /*#__PURE__*/function () {\n  function NodePos(pos, editor) {\n    var isBlock = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var node = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    _classCallCheck(this, NodePos);\n    this.currentNode = null;\n    this.actualDepth = null;\n    this.isBlock = isBlock;\n    this.resolvedPos = pos;\n    this.editor = editor;\n    this.currentNode = node;\n  }\n  return _createClass(NodePos, [{\n    key: \"name\",\n    get: function get() {\n      return this.node.type.name;\n    }\n  }, {\n    key: \"node\",\n    get: function get() {\n      return this.currentNode || this.resolvedPos.node();\n    }\n  }, {\n    key: \"element\",\n    get: function get() {\n      return this.editor.view.domAtPos(this.pos).node;\n    }\n  }, {\n    key: \"depth\",\n    get: function get() {\n      var _a;\n      return (_a = this.actualDepth) !== null && _a !== void 0 ? _a : this.resolvedPos.depth;\n    }\n  }, {\n    key: \"pos\",\n    get: function get() {\n      return this.resolvedPos.pos;\n    }\n  }, {\n    key: \"content\",\n    get: function get() {\n      return this.node.content;\n    },\n    set: function set(content) {\n      var from = this.from;\n      var to = this.to;\n      if (this.isBlock) {\n        if (this.content.size === 0) {\n          console.error(\"You can\\u2019t set content on a block node. Tried to set content on \".concat(this.name, \" at \").concat(this.pos));\n          return;\n        }\n        from = this.from + 1;\n        to = this.to - 1;\n      }\n      this.editor.commands.insertContentAt({\n        from: from,\n        to: to\n      }, content);\n    }\n  }, {\n    key: \"attributes\",\n    get: function get() {\n      return this.node.attrs;\n    }\n  }, {\n    key: \"textContent\",\n    get: function get() {\n      return this.node.textContent;\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this.node.nodeSize;\n    }\n  }, {\n    key: \"from\",\n    get: function get() {\n      if (this.isBlock) {\n        return this.pos;\n      }\n      return this.resolvedPos.start(this.resolvedPos.depth);\n    }\n  }, {\n    key: \"range\",\n    get: function get() {\n      return {\n        from: this.from,\n        to: this.to\n      };\n    }\n  }, {\n    key: \"to\",\n    get: function get() {\n      if (this.isBlock) {\n        return this.pos + this.size;\n      }\n      return this.resolvedPos.end(this.resolvedPos.depth) + (this.node.isText ? 0 : 1);\n    }\n  }, {\n    key: \"parent\",\n    get: function get() {\n      if (this.depth === 0) {\n        return null;\n      }\n      var parentPos = this.resolvedPos.start(this.resolvedPos.depth - 1);\n      var $pos = this.resolvedPos.doc.resolve(parentPos);\n      return new NodePos($pos, this.editor);\n    }\n  }, {\n    key: \"before\",\n    get: function get() {\n      var $pos = this.resolvedPos.doc.resolve(this.from - (this.isBlock ? 1 : 2));\n      if ($pos.depth !== this.depth) {\n        $pos = this.resolvedPos.doc.resolve(this.from - 3);\n      }\n      return new NodePos($pos, this.editor);\n    }\n  }, {\n    key: \"after\",\n    get: function get() {\n      var $pos = this.resolvedPos.doc.resolve(this.to + (this.isBlock ? 2 : 1));\n      if ($pos.depth !== this.depth) {\n        $pos = this.resolvedPos.doc.resolve(this.to + 3);\n      }\n      return new NodePos($pos, this.editor);\n    }\n  }, {\n    key: \"children\",\n    get: function get() {\n      var _this23 = this;\n      var children = [];\n      this.node.content.forEach(function (node, offset) {\n        var isBlock = node.isBlock && !node.isTextblock;\n        var isNonTextAtom = node.isAtom && !node.isText;\n        var targetPos = _this23.pos + offset + (isNonTextAtom ? 0 : 1);\n        var $pos = _this23.resolvedPos.doc.resolve(targetPos);\n        if (!isBlock && $pos.depth <= _this23.depth) {\n          return;\n        }\n        var childNodePos = new NodePos($pos, _this23.editor, isBlock, isBlock ? node : null);\n        if (isBlock) {\n          childNodePos.actualDepth = _this23.depth + 1;\n        }\n        children.push(new NodePos($pos, _this23.editor, isBlock, isBlock ? node : null));\n      });\n      return children;\n    }\n  }, {\n    key: \"firstChild\",\n    get: function get() {\n      return this.children[0] || null;\n    }\n  }, {\n    key: \"lastChild\",\n    get: function get() {\n      var children = this.children;\n      return children[children.length - 1] || null;\n    }\n  }, {\n    key: \"closest\",\n    value: function closest(selector) {\n      var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var node = null;\n      var currentNode = this.parent;\n      while (currentNode && !node) {\n        if (currentNode.node.type.name === selector) {\n          if (Object.keys(attributes).length > 0) {\n            var nodeAttributes = currentNode.node.attrs;\n            var attrKeys = Object.keys(attributes);\n            for (var _index = 0; _index < attrKeys.length; _index += 1) {\n              var key = attrKeys[_index];\n              if (nodeAttributes[key] !== attributes[key]) {\n                break;\n              }\n            }\n          } else {\n            node = currentNode;\n          }\n        }\n        currentNode = currentNode.parent;\n      }\n      return node;\n    }\n  }, {\n    key: \"querySelector\",\n    value: function querySelector(selector) {\n      var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.querySelectorAll(selector, attributes, true)[0] || null;\n    }\n  }, {\n    key: \"querySelectorAll\",\n    value: function querySelectorAll(selector) {\n      var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var firstItemOnly = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var nodes = [];\n      if (!this.children || this.children.length === 0) {\n        return nodes;\n      }\n      var attrKeys = Object.keys(attributes);\n      /**\n       * Finds all children recursively that match the selector and attributes\n       * If firstItemOnly is true, it will return the first item found\n       */\n      this.children.forEach(function (childPos) {\n        // If we already found a node and we only want the first item, we dont need to keep going\n        if (firstItemOnly && nodes.length > 0) {\n          return;\n        }\n        if (childPos.node.type.name === selector) {\n          var doesAllAttributesMatch = attrKeys.every(function (key) {\n            return attributes[key] === childPos.node.attrs[key];\n          });\n          if (doesAllAttributesMatch) {\n            nodes.push(childPos);\n          }\n        }\n        // If we already found a node and we only want the first item, we can stop here and skip the recursion\n        if (firstItemOnly && nodes.length > 0) {\n          return;\n        }\n        nodes = nodes.concat(childPos.querySelectorAll(selector, attributes, firstItemOnly));\n      });\n      return nodes;\n    }\n  }, {\n    key: \"setAttribute\",\n    value: function setAttribute(attributes) {\n      var tr = this.editor.state.tr;\n      tr.setNodeMarkup(this.from, undefined, _objectSpread(_objectSpread({}, this.node.attrs), attributes));\n      this.editor.view.dispatch(tr);\n    }\n  }]);\n}();\nvar style = \".ProseMirror {\\n  position: relative;\\n}\\n\\n.ProseMirror {\\n  word-wrap: break-word;\\n  white-space: pre-wrap;\\n  white-space: break-spaces;\\n  -webkit-font-variant-ligatures: none;\\n  font-variant-ligatures: none;\\n  font-feature-settings: \\\"liga\\\" 0; /* the above doesn't seem to work in Edge */\\n}\\n\\n.ProseMirror [contenteditable=\\\"false\\\"] {\\n  white-space: normal;\\n}\\n\\n.ProseMirror [contenteditable=\\\"false\\\"] [contenteditable=\\\"true\\\"] {\\n  white-space: pre-wrap;\\n}\\n\\n.ProseMirror pre {\\n  white-space: pre-wrap;\\n}\\n\\nimg.ProseMirror-separator {\\n  display: inline !important;\\n  border: none !important;\\n  margin: 0 !important;\\n  width: 0 !important;\\n  height: 0 !important;\\n}\\n\\n.ProseMirror-gapcursor {\\n  display: none;\\n  pointer-events: none;\\n  position: absolute;\\n  margin: 0;\\n}\\n\\n.ProseMirror-gapcursor:after {\\n  content: \\\"\\\";\\n  display: block;\\n  position: absolute;\\n  top: -2px;\\n  width: 20px;\\n  border-top: 1px solid black;\\n  animation: ProseMirror-cursor-blink 1.1s steps(2, start) infinite;\\n}\\n\\n@keyframes ProseMirror-cursor-blink {\\n  to {\\n    visibility: hidden;\\n  }\\n}\\n\\n.ProseMirror-hideselection *::selection {\\n  background: transparent;\\n}\\n\\n.ProseMirror-hideselection *::-moz-selection {\\n  background: transparent;\\n}\\n\\n.ProseMirror-hideselection * {\\n  caret-color: transparent;\\n}\\n\\n.ProseMirror-focused .ProseMirror-gapcursor {\\n  display: block;\\n}\\n\\n.tippy-box[data-animation=fade][data-state=hidden] {\\n  opacity: 0\\n}\";\nfunction createStyleTag(style, nonce, suffix) {\n  var tiptapStyleTag = document.querySelector(\"style[data-tiptap-style\".concat(suffix ? \"-\".concat(suffix) : '', \"]\"));\n  if (tiptapStyleTag !== null) {\n    return tiptapStyleTag;\n  }\n  var styleNode = document.createElement('style');\n  if (nonce) {\n    styleNode.setAttribute('nonce', nonce);\n  }\n  styleNode.setAttribute(\"data-tiptap-style\".concat(suffix ? \"-\".concat(suffix) : ''), '');\n  styleNode.innerHTML = style;\n  document.getElementsByTagName('head')[0].appendChild(styleNode);\n  return styleNode;\n}\nvar Editor = /*#__PURE__*/function (_EventEmitter) {\n  function Editor() {\n    var _this24;\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, Editor);\n    _this24 = _callSuper(this, Editor);\n    _this24.isFocused = false;\n    /**\n     * The editor is considered initialized after the `create` event has been emitted.\n     */\n    _this24.isInitialized = false;\n    _this24.extensionStorage = {};\n    _this24.options = {\n      element: document.createElement('div'),\n      content: '',\n      injectCSS: true,\n      injectNonce: undefined,\n      extensions: [],\n      autofocus: false,\n      editable: true,\n      editorProps: {},\n      parseOptions: {},\n      coreExtensionOptions: {},\n      enableInputRules: true,\n      enablePasteRules: true,\n      enableCoreExtensions: true,\n      enableContentCheck: false,\n      onBeforeCreate: function onBeforeCreate() {\n        return null;\n      },\n      onCreate: function onCreate() {\n        return null;\n      },\n      onUpdate: function onUpdate() {\n        return null;\n      },\n      onSelectionUpdate: function onSelectionUpdate() {\n        return null;\n      },\n      onTransaction: function onTransaction() {\n        return null;\n      },\n      onFocus: function onFocus() {\n        return null;\n      },\n      onBlur: function onBlur() {\n        return null;\n      },\n      onDestroy: function onDestroy() {\n        return null;\n      },\n      onContentError: function onContentError(_ref102) {\n        var error = _ref102.error;\n        throw error;\n      },\n      onPaste: function onPaste() {\n        return null;\n      },\n      onDrop: function onDrop() {\n        return null;\n      }\n    };\n    _this24.isCapturingTransaction = false;\n    _this24.capturedTransaction = null;\n    _this24.setOptions(options);\n    _this24.createExtensionManager();\n    _this24.createCommandManager();\n    _this24.createSchema();\n    _this24.on('beforeCreate', _this24.options.onBeforeCreate);\n    _this24.emit('beforeCreate', {\n      editor: _this24\n    });\n    _this24.on('contentError', _this24.options.onContentError);\n    _this24.createView();\n    _this24.injectCSS();\n    _this24.on('create', _this24.options.onCreate);\n    _this24.on('update', _this24.options.onUpdate);\n    _this24.on('selectionUpdate', _this24.options.onSelectionUpdate);\n    _this24.on('transaction', _this24.options.onTransaction);\n    _this24.on('focus', _this24.options.onFocus);\n    _this24.on('blur', _this24.options.onBlur);\n    _this24.on('destroy', _this24.options.onDestroy);\n    _this24.on('drop', function (_ref103) {\n      var event = _ref103.event,\n        slice = _ref103.slice,\n        moved = _ref103.moved;\n      return _this24.options.onDrop(event, slice, moved);\n    });\n    _this24.on('paste', function (_ref104) {\n      var event = _ref104.event,\n        slice = _ref104.slice;\n      return _this24.options.onPaste(event, slice);\n    });\n    window.setTimeout(function () {\n      if (_this24.isDestroyed) {\n        return;\n      }\n      _this24.commands.focus(_this24.options.autofocus);\n      _this24.emit('create', {\n        editor: _this24\n      });\n      _this24.isInitialized = true;\n    }, 0);\n    return _this24;\n  }\n  /**\n   * Returns the editor storage.\n   */\n  _inherits(Editor, _EventEmitter);\n  return _createClass(Editor, [{\n    key: \"storage\",\n    get: function get() {\n      return this.extensionStorage;\n    }\n    /**\n     * An object of all registered commands.\n     */\n  }, {\n    key: \"commands\",\n    get: function get() {\n      return this.commandManager.commands;\n    }\n    /**\n     * Create a command chain to call multiple commands at once.\n     */\n  }, {\n    key: \"chain\",\n    value: function chain() {\n      return this.commandManager.chain();\n    }\n    /**\n     * Check if a command or a command chain can be executed. Without executing it.\n     */\n  }, {\n    key: \"can\",\n    value: function can() {\n      return this.commandManager.can();\n    }\n    /**\n     * Inject CSS styles.\n     */\n  }, {\n    key: \"injectCSS\",\n    value: function injectCSS() {\n      if (this.options.injectCSS && document) {\n        this.css = createStyleTag(style, this.options.injectNonce);\n      }\n    }\n    /**\n     * Update editor options.\n     *\n     * @param options A list of options\n     */\n  }, {\n    key: \"setOptions\",\n    value: function setOptions() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.options = _objectSpread(_objectSpread({}, this.options), options);\n      if (!this.view || !this.state || this.isDestroyed) {\n        return;\n      }\n      if (this.options.editorProps) {\n        this.view.setProps(this.options.editorProps);\n      }\n      this.view.updateState(this.state);\n    }\n    /**\n     * Update editable state of the editor.\n     */\n  }, {\n    key: \"setEditable\",\n    value: function setEditable(editable) {\n      var emitUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      this.setOptions({\n        editable: editable\n      });\n      if (emitUpdate) {\n        this.emit('update', {\n          editor: this,\n          transaction: this.state.tr\n        });\n      }\n    }\n    /**\n     * Returns whether the editor is editable.\n     */\n  }, {\n    key: \"isEditable\",\n    get: function get() {\n      // since plugins are applied after creating the view\n      // `editable` is always `true` for one tick.\n      // that’s why we also have to check for `options.editable`\n      return this.options.editable && this.view && this.view.editable;\n    }\n    /**\n     * Returns the editor state.\n     */\n  }, {\n    key: \"state\",\n    get: function get() {\n      return this.view.state;\n    }\n    /**\n     * Register a ProseMirror plugin.\n     *\n     * @param plugin A ProseMirror plugin\n     * @param handlePlugins Control how to merge the plugin into the existing plugins.\n     * @returns The new editor state\n     */\n  }, {\n    key: \"registerPlugin\",\n    value: function registerPlugin(plugin, handlePlugins) {\n      var plugins = isFunction(handlePlugins) ? handlePlugins(plugin, _toConsumableArray(this.state.plugins)) : [].concat(_toConsumableArray(this.state.plugins), [plugin]);\n      var state = this.state.reconfigure({\n        plugins: plugins\n      });\n      this.view.updateState(state);\n      return state;\n    }\n    /**\n     * Unregister a ProseMirror plugin.\n     *\n     * @param nameOrPluginKeyToRemove The plugins name\n     * @returns The new editor state or undefined if the editor is destroyed\n     */\n  }, {\n    key: \"unregisterPlugin\",\n    value: function unregisterPlugin(nameOrPluginKeyToRemove) {\n      if (this.isDestroyed) {\n        return undefined;\n      }\n      var prevPlugins = this.state.plugins;\n      var plugins = prevPlugins;\n      [].concat(nameOrPluginKeyToRemove).forEach(function (nameOrPluginKey) {\n        // @ts-ignore\n        var name = typeof nameOrPluginKey === 'string' ? \"\".concat(nameOrPluginKey, \"$\") : nameOrPluginKey.key;\n        // @ts-ignore\n        plugins = prevPlugins.filter(function (plugin) {\n          return !plugin.key.startsWith(name);\n        });\n      });\n      if (prevPlugins.length === plugins.length) {\n        // No plugin was removed, so we don’t need to update the state\n        return undefined;\n      }\n      var state = this.state.reconfigure({\n        plugins: plugins\n      });\n      this.view.updateState(state);\n      return state;\n    }\n    /**\n     * Creates an extension manager.\n     */\n  }, {\n    key: \"createExtensionManager\",\n    value: function createExtensionManager() {\n      var _this25 = this;\n      var _a, _b;\n      var coreExtensions = this.options.enableCoreExtensions ? [Editable, ClipboardTextSerializer.configure({\n        blockSeparator: (_b = (_a = this.options.coreExtensionOptions) === null || _a === void 0 ? void 0 : _a.clipboardTextSerializer) === null || _b === void 0 ? void 0 : _b.blockSeparator\n      }), Commands, FocusEvents, Keymap, Tabindex, Drop, Paste].filter(function (ext) {\n        if (_typeof(_this25.options.enableCoreExtensions) === 'object') {\n          return _this25.options.enableCoreExtensions[ext.name] !== false;\n        }\n        return true;\n      }) : [];\n      var allExtensions = [].concat(_toConsumableArray(coreExtensions), _toConsumableArray(this.options.extensions)).filter(function (extension) {\n        return ['extension', 'node', 'mark'].includes(extension === null || extension === void 0 ? void 0 : extension.type);\n      });\n      this.extensionManager = new ExtensionManager(allExtensions, this);\n    }\n    /**\n     * Creates an command manager.\n     */\n  }, {\n    key: \"createCommandManager\",\n    value: function createCommandManager() {\n      this.commandManager = new CommandManager({\n        editor: this\n      });\n    }\n    /**\n     * Creates a ProseMirror schema.\n     */\n  }, {\n    key: \"createSchema\",\n    value: function createSchema() {\n      this.schema = this.extensionManager.schema;\n    }\n    /**\n     * Creates a ProseMirror view.\n     */\n  }, {\n    key: \"createView\",\n    value: function createView() {\n      var _this26 = this;\n      var _a;\n      var doc;\n      try {\n        doc = createDocument(this.options.content, this.schema, this.options.parseOptions, {\n          errorOnInvalidContent: this.options.enableContentCheck\n        });\n      } catch (e) {\n        if (!(e instanceof Error) || !['[tiptap error]: Invalid JSON content', '[tiptap error]: Invalid HTML content'].includes(e.message)) {\n          // Not the content error we were expecting\n          throw e;\n        }\n        this.emit('contentError', {\n          editor: this,\n          error: e,\n          disableCollaboration: function disableCollaboration() {\n            if (_this26.storage.collaboration) {\n              _this26.storage.collaboration.isDisabled = true;\n            }\n            // To avoid syncing back invalid content, reinitialize the extensions without the collaboration extension\n            _this26.options.extensions = _this26.options.extensions.filter(function (extension) {\n              return extension.name !== 'collaboration';\n            });\n            // Restart the initialization process by recreating the extension manager with the new set of extensions\n            _this26.createExtensionManager();\n          }\n        });\n        // Content is invalid, but attempt to create it anyway, stripping out the invalid parts\n        doc = createDocument(this.options.content, this.schema, this.options.parseOptions, {\n          errorOnInvalidContent: false\n        });\n      }\n      var selection = resolveFocusPosition(doc, this.options.autofocus);\n      this.view = new _tiptap_pm_view__WEBPACK_IMPORTED_MODULE_1__.EditorView(this.options.element, _objectSpread(_objectSpread({}, this.options.editorProps), {}, {\n        attributes: _objectSpread({\n          // add `role=\"textbox\"` to the editor element\n          role: 'textbox'\n        }, (_a = this.options.editorProps) === null || _a === void 0 ? void 0 : _a.attributes),\n        dispatchTransaction: this.dispatchTransaction.bind(this),\n        state: _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.EditorState.create({\n          doc: doc,\n          selection: selection || undefined\n        })\n      }));\n      // `editor.view` is not yet available at this time.\n      // Therefore we will add all plugins and node views directly afterwards.\n      var newState = this.state.reconfigure({\n        plugins: this.extensionManager.plugins\n      });\n      this.view.updateState(newState);\n      this.createNodeViews();\n      this.prependClass();\n      // Let’s store the editor instance in the DOM element.\n      // So we’ll have access to it for tests.\n      // @ts-ignore\n      var dom = this.view.dom;\n      dom.editor = this;\n    }\n    /**\n     * Creates all node views.\n     */\n  }, {\n    key: \"createNodeViews\",\n    value: function createNodeViews() {\n      if (this.view.isDestroyed) {\n        return;\n      }\n      this.view.setProps({\n        nodeViews: this.extensionManager.nodeViews\n      });\n    }\n    /**\n     * Prepend class name to element.\n     */\n  }, {\n    key: \"prependClass\",\n    value: function prependClass() {\n      this.view.dom.className = \"tiptap \".concat(this.view.dom.className);\n    }\n  }, {\n    key: \"captureTransaction\",\n    value: function captureTransaction(fn) {\n      this.isCapturingTransaction = true;\n      fn();\n      this.isCapturingTransaction = false;\n      var tr = this.capturedTransaction;\n      this.capturedTransaction = null;\n      return tr;\n    }\n    /**\n     * The callback over which to send transactions (state updates) produced by the view.\n     *\n     * @param transaction An editor state transaction\n     */\n  }, {\n    key: \"dispatchTransaction\",\n    value: function dispatchTransaction(transaction) {\n      var _this27 = this;\n      // if the editor / the view of the editor was destroyed\n      // the transaction should not be dispatched as there is no view anymore.\n      if (this.view.isDestroyed) {\n        return;\n      }\n      if (this.isCapturingTransaction) {\n        if (!this.capturedTransaction) {\n          this.capturedTransaction = transaction;\n          return;\n        }\n        transaction.steps.forEach(function (step) {\n          var _a;\n          return (_a = _this27.capturedTransaction) === null || _a === void 0 ? void 0 : _a.step(step);\n        });\n        return;\n      }\n      var state = this.state.apply(transaction);\n      var selectionHasChanged = !this.state.selection.eq(state.selection);\n      this.emit('beforeTransaction', {\n        editor: this,\n        transaction: transaction,\n        nextState: state\n      });\n      this.view.updateState(state);\n      this.emit('transaction', {\n        editor: this,\n        transaction: transaction\n      });\n      if (selectionHasChanged) {\n        this.emit('selectionUpdate', {\n          editor: this,\n          transaction: transaction\n        });\n      }\n      var focus = transaction.getMeta('focus');\n      var blur = transaction.getMeta('blur');\n      if (focus) {\n        this.emit('focus', {\n          editor: this,\n          event: focus.event,\n          transaction: transaction\n        });\n      }\n      if (blur) {\n        this.emit('blur', {\n          editor: this,\n          event: blur.event,\n          transaction: transaction\n        });\n      }\n      if (!transaction.docChanged || transaction.getMeta('preventUpdate')) {\n        return;\n      }\n      this.emit('update', {\n        editor: this,\n        transaction: transaction\n      });\n    }\n    /**\n     * Get attributes of the currently selected node or mark.\n     */\n  }, {\n    key: \"getAttributes\",\n    value: function getAttributes(nameOrType) {\n      return _getAttributes(this.state, nameOrType);\n    }\n  }, {\n    key: \"isActive\",\n    value: function isActive(nameOrAttributes, attributesOrUndefined) {\n      var name = typeof nameOrAttributes === 'string' ? nameOrAttributes : null;\n      var attributes = typeof nameOrAttributes === 'string' ? attributesOrUndefined : nameOrAttributes;\n      return _isActive(this.state, name, attributes);\n    }\n    /**\n     * Get the document as JSON.\n     */\n  }, {\n    key: \"getJSON\",\n    value: function getJSON() {\n      return this.state.doc.toJSON();\n    }\n    /**\n     * Get the document as HTML.\n     */\n  }, {\n    key: \"getHTML\",\n    value: function getHTML() {\n      return getHTMLFromFragment(this.state.doc.content, this.schema);\n    }\n    /**\n     * Get the document as text.\n     */\n  }, {\n    key: \"getText\",\n    value: function getText(options) {\n      var _ref105 = options || {},\n        _ref105$blockSeparato = _ref105.blockSeparator,\n        blockSeparator = _ref105$blockSeparato === void 0 ? '\\n\\n' : _ref105$blockSeparato,\n        _ref105$textSerialize = _ref105.textSerializers,\n        textSerializers = _ref105$textSerialize === void 0 ? {} : _ref105$textSerialize;\n      return _getText(this.state.doc, {\n        blockSeparator: blockSeparator,\n        textSerializers: _objectSpread(_objectSpread({}, getTextSerializersFromSchema(this.schema)), textSerializers)\n      });\n    }\n    /**\n     * Check if there is no content.\n     */\n  }, {\n    key: \"isEmpty\",\n    get: function get() {\n      return isNodeEmpty(this.state.doc);\n    }\n    /**\n     * Get the number of characters for the current document.\n     *\n     * @deprecated\n     */\n  }, {\n    key: \"getCharacterCount\",\n    value: function getCharacterCount() {\n      console.warn('[tiptap warn]: \"editor.getCharacterCount()\" is deprecated. Please use \"editor.storage.characterCount.characters()\" instead.');\n      return this.state.doc.content.size - 2;\n    }\n    /**\n     * Destroy the editor.\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.emit('destroy');\n      if (this.view) {\n        // Cleanup our reference to prevent circular references which caused memory leaks\n        // @ts-ignore\n        var dom = this.view.dom;\n        if (dom && dom.editor) {\n          delete dom.editor;\n        }\n        this.view.destroy();\n      }\n      this.removeAllListeners();\n    }\n    /**\n     * Check if the editor is already destroyed.\n     */\n  }, {\n    key: \"isDestroyed\",\n    get: function get() {\n      var _a;\n      // @ts-ignore\n      return !((_a = this.view) === null || _a === void 0 ? void 0 : _a.docView);\n    }\n  }, {\n    key: \"$node\",\n    value: function $node(selector, attributes) {\n      var _a;\n      return ((_a = this.$doc) === null || _a === void 0 ? void 0 : _a.querySelector(selector, attributes)) || null;\n    }\n  }, {\n    key: \"$nodes\",\n    value: function $nodes(selector, attributes) {\n      var _a;\n      return ((_a = this.$doc) === null || _a === void 0 ? void 0 : _a.querySelectorAll(selector, attributes)) || null;\n    }\n  }, {\n    key: \"$pos\",\n    value: function $pos(pos) {\n      var $pos = this.state.doc.resolve(pos);\n      return new NodePos($pos, this);\n    }\n  }, {\n    key: \"$doc\",\n    get: function get() {\n      return this.$pos(0);\n    }\n  }]);\n}(EventEmitter);\n/**\n * Build an input rule that adds a mark when the\n * matched text is typed into it.\n * @see https://tiptap.dev/docs/editor/extensions/custom-extensions/extend-existing#input-rules\n */\nfunction markInputRule(config) {\n  return new InputRule({\n    find: config.find,\n    handler: function handler(_ref106) {\n      var state = _ref106.state,\n        range = _ref106.range,\n        match = _ref106.match;\n      var attributes = callOrReturn(config.getAttributes, undefined, match);\n      if (attributes === false || attributes === null) {\n        return null;\n      }\n      var tr = state.tr;\n      var captureGroup = match[match.length - 1];\n      var fullMatch = match[0];\n      if (captureGroup) {\n        var startSpaces = fullMatch.search(/\\S/);\n        var textStart = range.from + fullMatch.indexOf(captureGroup);\n        var textEnd = textStart + captureGroup.length;\n        var excludedMarks = getMarksBetween(range.from, range.to, state.doc).filter(function (item) {\n          // @ts-ignore\n          var excluded = item.mark.type.excluded;\n          return excluded.find(function (type) {\n            return type === config.type && type !== item.mark.type;\n          });\n        }).filter(function (item) {\n          return item.to > textStart;\n        });\n        if (excludedMarks.length) {\n          return null;\n        }\n        if (textEnd < range.to) {\n          tr[\"delete\"](textEnd, range.to);\n        }\n        if (textStart > range.from) {\n          tr[\"delete\"](range.from + startSpaces, textStart);\n        }\n        var markEnd = range.from + startSpaces + captureGroup.length;\n        tr.addMark(range.from + startSpaces, markEnd, config.type.create(attributes || {}));\n        tr.removeStoredMark(config.type);\n      }\n    }\n  });\n}\n\n/**\n * Build an input rule that adds a node when the\n * matched text is typed into it.\n * @see https://tiptap.dev/docs/editor/extensions/custom-extensions/extend-existing#input-rules\n */\nfunction nodeInputRule(config) {\n  return new InputRule({\n    find: config.find,\n    handler: function handler(_ref107) {\n      var state = _ref107.state,\n        range = _ref107.range,\n        match = _ref107.match;\n      var attributes = callOrReturn(config.getAttributes, undefined, match) || {};\n      var tr = state.tr;\n      var start = range.from;\n      var end = range.to;\n      var newNode = config.type.create(attributes);\n      if (match[1]) {\n        var offset = match[0].lastIndexOf(match[1]);\n        var matchStart = start + offset;\n        if (matchStart > end) {\n          matchStart = end;\n        } else {\n          end = matchStart + match[1].length;\n        }\n        // insert last typed character\n        var lastChar = match[0][match[0].length - 1];\n        tr.insertText(lastChar, start + match[0].length - 1);\n        // insert node from input rule\n        tr.replaceWith(matchStart, end, newNode);\n      } else if (match[0]) {\n        var insertionStart = config.type.isInline ? start : start - 1;\n        tr.insert(insertionStart, config.type.create(attributes))[\"delete\"](tr.mapping.map(start), tr.mapping.map(end));\n      }\n      tr.scrollIntoView();\n    }\n  });\n}\n\n/**\n * Build an input rule that changes the type of a textblock when the\n * matched text is typed into it. When using a regular expresion you’ll\n * probably want the regexp to start with `^`, so that the pattern can\n * only occur at the start of a textblock.\n * @see https://tiptap.dev/docs/editor/extensions/custom-extensions/extend-existing#input-rules\n */\nfunction textblockTypeInputRule(config) {\n  return new InputRule({\n    find: config.find,\n    handler: function handler(_ref108) {\n      var state = _ref108.state,\n        range = _ref108.range,\n        match = _ref108.match;\n      var $start = state.doc.resolve(range.from);\n      var attributes = callOrReturn(config.getAttributes, undefined, match) || {};\n      if (!$start.node(-1).canReplaceWith($start.index(-1), $start.indexAfter(-1), config.type)) {\n        return null;\n      }\n      state.tr[\"delete\"](range.from, range.to).setBlockType(range.from, range.from, config.type, attributes);\n    }\n  });\n}\n\n/**\n * Build an input rule that replaces text when the\n * matched text is typed into it.\n * @see https://tiptap.dev/docs/editor/extensions/custom-extensions/extend-existing#input-rules\n */\nfunction textInputRule(config) {\n  return new InputRule({\n    find: config.find,\n    handler: function handler(_ref109) {\n      var state = _ref109.state,\n        range = _ref109.range,\n        match = _ref109.match;\n      var insert = config.replace;\n      var start = range.from;\n      var end = range.to;\n      if (match[1]) {\n        var offset = match[0].lastIndexOf(match[1]);\n        insert += match[0].slice(offset + match[1].length);\n        start += offset;\n        var cutOff = start - end;\n        if (cutOff > 0) {\n          insert = match[0].slice(offset - cutOff, offset) + insert;\n          start = end;\n        }\n      }\n      state.tr.insertText(insert, start, end);\n    }\n  });\n}\n\n/**\n * Build an input rule for automatically wrapping a textblock when a\n * given string is typed. When using a regular expresion you’ll\n * probably want the regexp to start with `^`, so that the pattern can\n * only occur at the start of a textblock.\n *\n * `type` is the type of node to wrap in.\n *\n * By default, if there’s a node with the same type above the newly\n * wrapped node, the rule will try to join those\n * two nodes. You can pass a join predicate, which takes a regular\n * expression match and the node before the wrapped node, and can\n * return a boolean to indicate whether a join should happen.\n * @see https://tiptap.dev/docs/editor/extensions/custom-extensions/extend-existing#input-rules\n */\nfunction wrappingInputRule(config) {\n  return new InputRule({\n    find: config.find,\n    handler: function handler(_ref110) {\n      var state = _ref110.state,\n        range = _ref110.range,\n        match = _ref110.match,\n        chain = _ref110.chain;\n      var attributes = callOrReturn(config.getAttributes, undefined, match) || {};\n      var tr = state.tr[\"delete\"](range.from, range.to);\n      var $start = tr.doc.resolve(range.from);\n      var blockRange = $start.blockRange();\n      var wrapping = blockRange && (0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.findWrapping)(blockRange, config.type, attributes);\n      if (!wrapping) {\n        return null;\n      }\n      tr.wrap(blockRange, wrapping);\n      if (config.keepMarks && config.editor) {\n        var selection = state.selection,\n          storedMarks = state.storedMarks;\n        var splittableMarks = config.editor.extensionManager.splittableMarks;\n        var marks = storedMarks || selection.$to.parentOffset && selection.$from.marks();\n        if (marks) {\n          var filteredMarks = marks.filter(function (mark) {\n            return splittableMarks.includes(mark.type.name);\n          });\n          tr.ensureMarks(filteredMarks);\n        }\n      }\n      if (config.keepAttributes) {\n        /** If the nodeType is `bulletList` or `orderedList` set the `nodeType` as `listItem` */\n        var nodeType = config.type.name === 'bulletList' || config.type.name === 'orderedList' ? 'listItem' : 'taskList';\n        chain().updateAttributes(nodeType, attributes).run();\n      }\n      var before = tr.doc.resolve(range.from - 1).nodeBefore;\n      if (before && before.type === config.type && (0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.canJoin)(tr.doc, range.from - 1) && (!config.joinPredicate || config.joinPredicate(match, before))) {\n        tr.join(range.from - 1);\n      }\n    }\n  });\n}\n\n/**\n * The Node class is used to create custom node extensions.\n * @see https://tiptap.dev/api/extensions#create-a-new-extension\n */\nvar Node = /*#__PURE__*/function () {\n  function Node() {\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, Node);\n    this.type = 'node';\n    this.name = 'node';\n    this.parent = null;\n    this.child = null;\n    this.config = {\n      name: this.name,\n      defaultOptions: {}\n    };\n    this.config = _objectSpread(_objectSpread({}, this.config), config);\n    this.name = this.config.name;\n    if (config.defaultOptions && Object.keys(config.defaultOptions).length > 0) {\n      console.warn(\"[tiptap warn]: BREAKING CHANGE: \\\"defaultOptions\\\" is deprecated. Please use \\\"addOptions\\\" instead. Found in extension: \\\"\".concat(this.name, \"\\\".\"));\n    }\n    // TODO: remove `addOptions` fallback\n    this.options = this.config.defaultOptions;\n    if (this.config.addOptions) {\n      this.options = callOrReturn(getExtensionField(this, 'addOptions', {\n        name: this.name\n      }));\n    }\n    this.storage = callOrReturn(getExtensionField(this, 'addStorage', {\n      name: this.name,\n      options: this.options\n    })) || {};\n  }\n  return _createClass(Node, [{\n    key: \"configure\",\n    value: function configure() {\n      var _this28 = this;\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      // return a new instance so we can use the same extension\n      // with different calls of `configure`\n      var extension = this.extend(_objectSpread(_objectSpread({}, this.config), {}, {\n        addOptions: function addOptions() {\n          return mergeDeep(_this28.options, options);\n        }\n      }));\n      // Always preserve the current name\n      extension.name = this.name;\n      // Set the parent to be our parent\n      extension.parent = this.parent;\n      return extension;\n    }\n  }, {\n    key: \"extend\",\n    value: function extend() {\n      var extendedConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var extension = new Node(extendedConfig);\n      extension.parent = this;\n      this.child = extension;\n      extension.name = extendedConfig.name ? extendedConfig.name : extension.parent.name;\n      if (extendedConfig.defaultOptions && Object.keys(extendedConfig.defaultOptions).length > 0) {\n        console.warn(\"[tiptap warn]: BREAKING CHANGE: \\\"defaultOptions\\\" is deprecated. Please use \\\"addOptions\\\" instead. Found in extension: \\\"\".concat(extension.name, \"\\\".\"));\n      }\n      extension.options = callOrReturn(getExtensionField(extension, 'addOptions', {\n        name: extension.name\n      }));\n      extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {\n        name: extension.name,\n        options: extension.options\n      }));\n      return extension;\n    }\n  }], [{\n    key: \"create\",\n    value: function create() {\n      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return new Node(config);\n    }\n  }]);\n}();\n/**\n * Node views are used to customize the rendered DOM structure of a node.\n * @see https://tiptap.dev/guide/node-views\n */\nvar NodeView = /*#__PURE__*/function () {\n  function NodeView(component, props, options) {\n    _classCallCheck(this, NodeView);\n    this.isDragging = false;\n    this.component = component;\n    this.editor = props.editor;\n    this.options = _objectSpread({\n      stopEvent: null,\n      ignoreMutation: null\n    }, options);\n    this.extension = props.extension;\n    this.node = props.node;\n    this.decorations = props.decorations;\n    this.innerDecorations = props.innerDecorations;\n    this.view = props.view;\n    this.HTMLAttributes = props.HTMLAttributes;\n    this.getPos = props.getPos;\n    this.mount();\n  }\n  return _createClass(NodeView, [{\n    key: \"mount\",\n    value: function mount() {\n      // eslint-disable-next-line\n      return;\n    }\n  }, {\n    key: \"dom\",\n    get: function get() {\n      return this.editor.view.dom;\n    }\n  }, {\n    key: \"contentDOM\",\n    get: function get() {\n      return null;\n    }\n  }, {\n    key: \"onDragStart\",\n    value: function onDragStart(event) {\n      var _a, _b, _c, _d, _e, _f, _g;\n      var view = this.editor.view;\n      var target = event.target;\n      // get the drag handle element\n      // `closest` is not available for text nodes so we may have to use its parent\n      var dragHandle = target.nodeType === 3 ? (_a = target.parentElement) === null || _a === void 0 ? void 0 : _a.closest('[data-drag-handle]') : target.closest('[data-drag-handle]');\n      if (!this.dom || ((_b = this.contentDOM) === null || _b === void 0 ? void 0 : _b.contains(target)) || !dragHandle) {\n        return;\n      }\n      var x = 0;\n      var y = 0;\n      // calculate offset for drag element if we use a different drag handle element\n      if (this.dom !== dragHandle) {\n        var domBox = this.dom.getBoundingClientRect();\n        var handleBox = dragHandle.getBoundingClientRect();\n        // In React, we have to go through nativeEvent to reach offsetX/offsetY.\n        var offsetX = (_c = event.offsetX) !== null && _c !== void 0 ? _c : (_d = event.nativeEvent) === null || _d === void 0 ? void 0 : _d.offsetX;\n        var offsetY = (_e = event.offsetY) !== null && _e !== void 0 ? _e : (_f = event.nativeEvent) === null || _f === void 0 ? void 0 : _f.offsetY;\n        x = handleBox.x - domBox.x + offsetX;\n        y = handleBox.y - domBox.y + offsetY;\n      }\n      (_g = event.dataTransfer) === null || _g === void 0 ? void 0 : _g.setDragImage(this.dom, x, y);\n      var pos = this.getPos();\n      if (typeof pos !== 'number') {\n        return;\n      }\n      // we need to tell ProseMirror that we want to move the whole node\n      // so we create a NodeSelection\n      var selection = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.NodeSelection.create(view.state.doc, pos);\n      var transaction = view.state.tr.setSelection(selection);\n      view.dispatch(transaction);\n    }\n  }, {\n    key: \"stopEvent\",\n    value: function stopEvent(event) {\n      var _this29 = this;\n      var _a;\n      if (!this.dom) {\n        return false;\n      }\n      if (typeof this.options.stopEvent === 'function') {\n        return this.options.stopEvent({\n          event: event\n        });\n      }\n      var target = event.target;\n      var isInElement = this.dom.contains(target) && !((_a = this.contentDOM) === null || _a === void 0 ? void 0 : _a.contains(target));\n      // any event from child nodes should be handled by ProseMirror\n      if (!isInElement) {\n        return false;\n      }\n      var isDragEvent = event.type.startsWith('drag');\n      var isDropEvent = event.type === 'drop';\n      var isInput = ['INPUT', 'BUTTON', 'SELECT', 'TEXTAREA'].includes(target.tagName) || target.isContentEditable;\n      // any input event within node views should be ignored by ProseMirror\n      if (isInput && !isDropEvent && !isDragEvent) {\n        return true;\n      }\n      var isEditable = this.editor.isEditable;\n      var isDragging = this.isDragging;\n      var isDraggable = !!this.node.type.spec.draggable;\n      var isSelectable = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.NodeSelection.isSelectable(this.node);\n      var isCopyEvent = event.type === 'copy';\n      var isPasteEvent = event.type === 'paste';\n      var isCutEvent = event.type === 'cut';\n      var isClickEvent = event.type === 'mousedown';\n      // ProseMirror tries to drag selectable nodes\n      // even if `draggable` is set to `false`\n      // this fix prevents that\n      if (!isDraggable && isSelectable && isDragEvent && event.target === this.dom) {\n        event.preventDefault();\n      }\n      if (isDraggable && isDragEvent && !isDragging && event.target === this.dom) {\n        event.preventDefault();\n        return false;\n      }\n      // we have to store that dragging started\n      if (isDraggable && isEditable && !isDragging && isClickEvent) {\n        var dragHandle = target.closest('[data-drag-handle]');\n        var isValidDragHandle = dragHandle && (this.dom === dragHandle || this.dom.contains(dragHandle));\n        if (isValidDragHandle) {\n          this.isDragging = true;\n          document.addEventListener('dragend', function () {\n            _this29.isDragging = false;\n          }, {\n            once: true\n          });\n          document.addEventListener('drop', function () {\n            _this29.isDragging = false;\n          }, {\n            once: true\n          });\n          document.addEventListener('mouseup', function () {\n            _this29.isDragging = false;\n          }, {\n            once: true\n          });\n        }\n      }\n      // these events are handled by prosemirror\n      if (isDragging || isDropEvent || isCopyEvent || isPasteEvent || isCutEvent || isClickEvent && isSelectable) {\n        return false;\n      }\n      return true;\n    }\n    /**\n     * Called when a DOM [mutation](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver) or a selection change happens within the view.\n     * @return `false` if the editor should re-read the selection or re-parse the range around the mutation\n     * @return `true` if it can safely be ignored.\n     */\n  }, {\n    key: \"ignoreMutation\",\n    value: function ignoreMutation(mutation) {\n      if (!this.dom || !this.contentDOM) {\n        return true;\n      }\n      if (typeof this.options.ignoreMutation === 'function') {\n        return this.options.ignoreMutation({\n          mutation: mutation\n        });\n      }\n      // a leaf/atom node is like a black box for ProseMirror\n      // and should be fully handled by the node view\n      if (this.node.isLeaf || this.node.isAtom) {\n        return true;\n      }\n      // ProseMirror should handle any selections\n      if (mutation.type === 'selection') {\n        return false;\n      }\n      // try to prevent a bug on iOS and Android that will break node views on enter\n      // this is because ProseMirror can’t preventDispatch on enter\n      // this will lead to a re-render of the node view on enter\n      // see: https://github.com/ueberdosis/tiptap/issues/1214\n      // see: https://github.com/ueberdosis/tiptap/issues/2534\n      if (this.dom.contains(mutation.target) && mutation.type === 'childList' && (isiOS() || isAndroid()) && this.editor.isFocused) {\n        var changedNodes = [].concat(_toConsumableArray(Array.from(mutation.addedNodes)), _toConsumableArray(Array.from(mutation.removedNodes)));\n        // we’ll check if every changed node is contentEditable\n        // to make sure it’s probably mutated by ProseMirror\n        if (changedNodes.every(function (node) {\n          return node.isContentEditable;\n        })) {\n          return false;\n        }\n      }\n      // we will allow mutation contentDOM with attributes\n      // so we can for example adding classes within our node view\n      if (this.contentDOM === mutation.target && mutation.type === 'attributes') {\n        return true;\n      }\n      // ProseMirror should handle any changes within contentDOM\n      if (this.contentDOM.contains(mutation.target)) {\n        return false;\n      }\n      return true;\n    }\n    /**\n     * Update the attributes of the prosemirror node.\n     */\n  }, {\n    key: \"updateAttributes\",\n    value: function updateAttributes(attributes) {\n      var _this30 = this;\n      this.editor.commands.command(function (_ref111) {\n        var tr = _ref111.tr;\n        var pos = _this30.getPos();\n        if (typeof pos !== 'number') {\n          return false;\n        }\n        tr.setNodeMarkup(pos, undefined, _objectSpread(_objectSpread({}, _this30.node.attrs), attributes));\n        return true;\n      });\n    }\n    /**\n     * Delete the node.\n     */\n  }, {\n    key: \"deleteNode\",\n    value: function deleteNode() {\n      var from = this.getPos();\n      if (typeof from !== 'number') {\n        return;\n      }\n      var to = from + this.node.nodeSize;\n      this.editor.commands.deleteRange({\n        from: from,\n        to: to\n      });\n    }\n  }]);\n}();\n/**\n * Build an paste rule that adds a mark when the\n * matched text is pasted into it.\n * @see https://tiptap.dev/docs/editor/extensions/custom-extensions/extend-existing#paste-rules\n */\nfunction markPasteRule(config) {\n  return new PasteRule({\n    find: config.find,\n    handler: function handler(_ref112) {\n      var state = _ref112.state,\n        range = _ref112.range,\n        match = _ref112.match,\n        pasteEvent = _ref112.pasteEvent;\n      var attributes = callOrReturn(config.getAttributes, undefined, match, pasteEvent);\n      if (attributes === false || attributes === null) {\n        return null;\n      }\n      var tr = state.tr;\n      var captureGroup = match[match.length - 1];\n      var fullMatch = match[0];\n      var markEnd = range.to;\n      if (captureGroup) {\n        var startSpaces = fullMatch.search(/\\S/);\n        var textStart = range.from + fullMatch.indexOf(captureGroup);\n        var textEnd = textStart + captureGroup.length;\n        var excludedMarks = getMarksBetween(range.from, range.to, state.doc).filter(function (item) {\n          // @ts-ignore\n          var excluded = item.mark.type.excluded;\n          return excluded.find(function (type) {\n            return type === config.type && type !== item.mark.type;\n          });\n        }).filter(function (item) {\n          return item.to > textStart;\n        });\n        if (excludedMarks.length) {\n          return null;\n        }\n        if (textEnd < range.to) {\n          tr[\"delete\"](textEnd, range.to);\n        }\n        if (textStart > range.from) {\n          tr[\"delete\"](range.from + startSpaces, textStart);\n        }\n        markEnd = range.from + startSpaces + captureGroup.length;\n        tr.addMark(range.from + startSpaces, markEnd, config.type.create(attributes || {}));\n        tr.removeStoredMark(config.type);\n      }\n    }\n  });\n}\n\n// source: https://stackoverflow.com/a/6969486\nfunction escapeForRegEx(string) {\n  return string.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n}\nfunction isString(value) {\n  return typeof value === 'string';\n}\n\n/**\n * Build an paste rule that adds a node when the\n * matched text is pasted into it.\n * @see https://tiptap.dev/docs/editor/extensions/custom-extensions/extend-existing#paste-rules\n */\nfunction nodePasteRule(config) {\n  return new PasteRule({\n    find: config.find,\n    handler: function handler(_ref113) {\n      var match = _ref113.match,\n        chain = _ref113.chain,\n        range = _ref113.range,\n        pasteEvent = _ref113.pasteEvent;\n      var attributes = callOrReturn(config.getAttributes, undefined, match, pasteEvent);\n      var content = callOrReturn(config.getContent, undefined, attributes);\n      if (attributes === false || attributes === null) {\n        return null;\n      }\n      var node = {\n        type: config.type.name,\n        attrs: attributes\n      };\n      if (content) {\n        node.content = content;\n      }\n      if (match.input) {\n        chain().deleteRange(range).insertContentAt(range.from, node);\n      }\n    }\n  });\n}\n\n/**\n * Build an paste rule that replaces text when the\n * matched text is pasted into it.\n * @see https://tiptap.dev/docs/editor/extensions/custom-extensions/extend-existing#paste-rules\n */\nfunction textPasteRule(config) {\n  return new PasteRule({\n    find: config.find,\n    handler: function handler(_ref114) {\n      var state = _ref114.state,\n        range = _ref114.range,\n        match = _ref114.match;\n      var insert = config.replace;\n      var start = range.from;\n      var end = range.to;\n      if (match[1]) {\n        var offset = match[0].lastIndexOf(match[1]);\n        insert += match[0].slice(offset + match[1].length);\n        start += offset;\n        var cutOff = start - end;\n        if (cutOff > 0) {\n          insert = match[0].slice(offset - cutOff, offset) + insert;\n          start = end;\n        }\n      }\n      state.tr.insertText(insert, start, end);\n    }\n  });\n}\nvar Tracker = /*#__PURE__*/function () {\n  function Tracker(transaction) {\n    _classCallCheck(this, Tracker);\n    this.transaction = transaction;\n    this.currentStep = this.transaction.steps.length;\n  }\n  return _createClass(Tracker, [{\n    key: \"map\",\n    value: function map(position) {\n      var deleted = false;\n      var mappedPosition = this.transaction.steps.slice(this.currentStep).reduce(function (newPosition, step) {\n        var mapResult = step.getMap().mapResult(newPosition);\n        if (mapResult.deleted) {\n          deleted = true;\n        }\n        return mapResult.pos;\n      }, position);\n      return {\n        position: mappedPosition,\n        deleted: deleted\n      };\n    }\n  }]);\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/core/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-blockquote/dist/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tiptap/extension-blockquote/dist/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Blockquote: () => (/* binding */ Blockquote),\n/* harmony export */   \"default\": () => (/* binding */ Blockquote),\n/* harmony export */   inputRegex: () => (/* binding */ inputRegex)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\n\n/**\n * Matches a blockquote to a `>` as input.\n */\nvar inputRegex = /^\\s*>\\s$/;\n/**\n * This extension allows you to create blockquotes.\n * @see https://tiptap.dev/api/nodes/blockquote\n */\nvar Blockquote = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({\n  name: 'blockquote',\n  addOptions: function addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n  content: 'block+',\n  group: 'block',\n  defining: true,\n  parseHTML: function parseHTML() {\n    return [{\n      tag: 'blockquote'\n    }];\n  },\n  renderHTML: function renderHTML(_ref) {\n    var HTMLAttributes = _ref.HTMLAttributes;\n    return ['blockquote', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands: function addCommands() {\n    var _this = this;\n    return {\n      setBlockquote: function setBlockquote() {\n        return function (_ref2) {\n          var commands = _ref2.commands;\n          return commands.wrapIn(_this.name);\n        };\n      },\n      toggleBlockquote: function toggleBlockquote() {\n        return function (_ref3) {\n          var commands = _ref3.commands;\n          return commands.toggleWrap(_this.name);\n        };\n      },\n      unsetBlockquote: function unsetBlockquote() {\n        return function (_ref4) {\n          var commands = _ref4.commands;\n          return commands.lift(_this.name);\n        };\n      }\n    };\n  },\n  addKeyboardShortcuts: function addKeyboardShortcuts() {\n    var _this2 = this;\n    return {\n      'Mod-Shift-b': function ModShiftB() {\n        return _this2.editor.commands.toggleBlockquote();\n      }\n    };\n  },\n  addInputRules: function addInputRules() {\n    return [(0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.wrappingInputRule)({\n      find: inputRegex,\n      type: this.type\n    })];\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tYmxvY2txdW90ZS9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBd0U7O0FBRXhFO0FBQ0E7QUFDQTtBQUNBLElBQU1HLFVBQVUsR0FBRyxVQUFVO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBTUMsVUFBVSxHQUFHSiw4Q0FBSSxDQUFDSyxNQUFNLENBQUM7RUFDM0JDLElBQUksRUFBRSxZQUFZO0VBQ2xCQyxVQUFVLFdBQVZBLFVBQVVBLENBQUEsRUFBRztJQUNULE9BQU87TUFDSEMsY0FBYyxFQUFFLENBQUM7SUFDckIsQ0FBQztFQUNMLENBQUM7RUFDREMsT0FBTyxFQUFFLFFBQVE7RUFDakJDLEtBQUssRUFBRSxPQUFPO0VBQ2RDLFFBQVEsRUFBRSxJQUFJO0VBQ2RDLFNBQVMsV0FBVEEsU0FBU0EsQ0FBQSxFQUFHO0lBQ1IsT0FBTyxDQUNIO01BQUVDLEdBQUcsRUFBRTtJQUFhLENBQUMsQ0FDeEI7RUFDTCxDQUFDO0VBQ0RDLFVBQVUsV0FBVkEsVUFBVUEsQ0FBQUMsSUFBQSxFQUFxQjtJQUFBLElBQWxCUCxjQUFjLEdBQUFPLElBQUEsQ0FBZFAsY0FBYztJQUN2QixPQUFPLENBQUMsWUFBWSxFQUFFUCw2REFBZSxDQUFDLElBQUksQ0FBQ2UsT0FBTyxDQUFDUixjQUFjLEVBQUVBLGNBQWMsQ0FBQyxFQUFFLENBQUMsQ0FBQztFQUMxRixDQUFDO0VBQ0RTLFdBQVcsV0FBWEEsV0FBV0EsQ0FBQSxFQUFHO0lBQUEsSUFBQUMsS0FBQTtJQUNWLE9BQU87TUFDSEMsYUFBYSxFQUFFLFNBQWZBLGFBQWFBLENBQUE7UUFBQSxPQUFRLFVBQUFDLEtBQUEsRUFBa0I7VUFBQSxJQUFmQyxRQUFRLEdBQUFELEtBQUEsQ0FBUkMsUUFBUTtVQUM1QixPQUFPQSxRQUFRLENBQUNDLE1BQU0sQ0FBQ0osS0FBSSxDQUFDWixJQUFJLENBQUM7UUFDckMsQ0FBQztNQUFBO01BQ0RpQixnQkFBZ0IsRUFBRSxTQUFsQkEsZ0JBQWdCQSxDQUFBO1FBQUEsT0FBUSxVQUFBQyxLQUFBLEVBQWtCO1VBQUEsSUFBZkgsUUFBUSxHQUFBRyxLQUFBLENBQVJILFFBQVE7VUFDL0IsT0FBT0EsUUFBUSxDQUFDSSxVQUFVLENBQUNQLEtBQUksQ0FBQ1osSUFBSSxDQUFDO1FBQ3pDLENBQUM7TUFBQTtNQUNEb0IsZUFBZSxFQUFFLFNBQWpCQSxlQUFlQSxDQUFBO1FBQUEsT0FBUSxVQUFBQyxLQUFBLEVBQWtCO1VBQUEsSUFBZk4sUUFBUSxHQUFBTSxLQUFBLENBQVJOLFFBQVE7VUFDOUIsT0FBT0EsUUFBUSxDQUFDTyxJQUFJLENBQUNWLEtBQUksQ0FBQ1osSUFBSSxDQUFDO1FBQ25DLENBQUM7TUFBQTtJQUNMLENBQUM7RUFDTCxDQUFDO0VBQ0R1QixvQkFBb0IsV0FBcEJBLG9CQUFvQkEsQ0FBQSxFQUFHO0lBQUEsSUFBQUMsTUFBQTtJQUNuQixPQUFPO01BQ0gsYUFBYSxFQUFFLFNBQWZDLFNBQWFBLENBQUE7UUFBQSxPQUFRRCxNQUFJLENBQUNFLE1BQU0sQ0FBQ1gsUUFBUSxDQUFDRSxnQkFBZ0IsQ0FBQyxDQUFDO01BQUE7SUFDaEUsQ0FBQztFQUNMLENBQUM7RUFDRFUsYUFBYSxXQUFiQSxhQUFhQSxDQUFBLEVBQUc7SUFDWixPQUFPLENBQ0gvQiwrREFBaUIsQ0FBQztNQUNkZ0MsSUFBSSxFQUFFL0IsVUFBVTtNQUNoQmdDLElBQUksRUFBRSxJQUFJLENBQUNBO0lBQ2YsQ0FBQyxDQUFDLENBQ0w7RUFDTDtBQUNKLENBQUMsQ0FBQyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxAdGlwdGFwXFxleHRlbnNpb24tYmxvY2txdW90ZVxcZGlzdFxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTm9kZSwgbWVyZ2VBdHRyaWJ1dGVzLCB3cmFwcGluZ0lucHV0UnVsZSB9IGZyb20gJ0B0aXB0YXAvY29yZSc7XG5cbi8qKlxuICogTWF0Y2hlcyBhIGJsb2NrcXVvdGUgdG8gYSBgPmAgYXMgaW5wdXQuXG4gKi9cbmNvbnN0IGlucHV0UmVnZXggPSAvXlxccyo+XFxzJC87XG4vKipcbiAqIFRoaXMgZXh0ZW5zaW9uIGFsbG93cyB5b3UgdG8gY3JlYXRlIGJsb2NrcXVvdGVzLlxuICogQHNlZSBodHRwczovL3RpcHRhcC5kZXYvYXBpL25vZGVzL2Jsb2NrcXVvdGVcbiAqL1xuY29uc3QgQmxvY2txdW90ZSA9IE5vZGUuY3JlYXRlKHtcbiAgICBuYW1lOiAnYmxvY2txdW90ZScsXG4gICAgYWRkT3B0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIEhUTUxBdHRyaWJ1dGVzOiB7fSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIGNvbnRlbnQ6ICdibG9jaysnLFxuICAgIGdyb3VwOiAnYmxvY2snLFxuICAgIGRlZmluaW5nOiB0cnVlLFxuICAgIHBhcnNlSFRNTCgpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHsgdGFnOiAnYmxvY2txdW90ZScgfSxcbiAgICAgICAgXTtcbiAgICB9LFxuICAgIHJlbmRlckhUTUwoeyBIVE1MQXR0cmlidXRlcyB9KSB7XG4gICAgICAgIHJldHVybiBbJ2Jsb2NrcXVvdGUnLCBtZXJnZUF0dHJpYnV0ZXModGhpcy5vcHRpb25zLkhUTUxBdHRyaWJ1dGVzLCBIVE1MQXR0cmlidXRlcyksIDBdO1xuICAgIH0sXG4gICAgYWRkQ29tbWFuZHMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzZXRCbG9ja3F1b3RlOiAoKSA9PiAoeyBjb21tYW5kcyB9KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1hbmRzLndyYXBJbih0aGlzLm5hbWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRvZ2dsZUJsb2NrcXVvdGU6ICgpID0+ICh7IGNvbW1hbmRzIH0pID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWFuZHMudG9nZ2xlV3JhcCh0aGlzLm5hbWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHVuc2V0QmxvY2txdW90ZTogKCkgPT4gKHsgY29tbWFuZHMgfSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb21tYW5kcy5saWZ0KHRoaXMubmFtZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgYWRkS2V5Ym9hcmRTaG9ydGN1dHMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnTW9kLVNoaWZ0LWInOiAoKSA9PiB0aGlzLmVkaXRvci5jb21tYW5kcy50b2dnbGVCbG9ja3F1b3RlKCksXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBhZGRJbnB1dFJ1bGVzKCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgd3JhcHBpbmdJbnB1dFJ1bGUoe1xuICAgICAgICAgICAgICAgIGZpbmQ6IGlucHV0UmVnZXgsXG4gICAgICAgICAgICAgICAgdHlwZTogdGhpcy50eXBlLFxuICAgICAgICAgICAgfSksXG4gICAgICAgIF07XG4gICAgfSxcbn0pO1xuXG5leHBvcnQgeyBCbG9ja3F1b3RlLCBCbG9ja3F1b3RlIGFzIGRlZmF1bHQsIGlucHV0UmVnZXggfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbIk5vZGUiLCJtZXJnZUF0dHJpYnV0ZXMiLCJ3cmFwcGluZ0lucHV0UnVsZSIsImlucHV0UmVnZXgiLCJCbG9ja3F1b3RlIiwiY3JlYXRlIiwibmFtZSIsImFkZE9wdGlvbnMiLCJIVE1MQXR0cmlidXRlcyIsImNvbnRlbnQiLCJncm91cCIsImRlZmluaW5nIiwicGFyc2VIVE1MIiwidGFnIiwicmVuZGVySFRNTCIsIl9yZWYiLCJvcHRpb25zIiwiYWRkQ29tbWFuZHMiLCJfdGhpcyIsInNldEJsb2NrcXVvdGUiLCJfcmVmMiIsImNvbW1hbmRzIiwid3JhcEluIiwidG9nZ2xlQmxvY2txdW90ZSIsIl9yZWYzIiwidG9nZ2xlV3JhcCIsInVuc2V0QmxvY2txdW90ZSIsIl9yZWY0IiwibGlmdCIsImFkZEtleWJvYXJkU2hvcnRjdXRzIiwiX3RoaXMyIiwiTW9kU2hpZnRCIiwiZWRpdG9yIiwiYWRkSW5wdXRSdWxlcyIsImZpbmQiLCJ0eXBlIiwiZGVmYXVsdCJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-blockquote/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-bold/dist/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@tiptap/extension-bold/dist/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Bold: () => (/* binding */ Bold),\n/* harmony export */   \"default\": () => (/* binding */ Bold),\n/* harmony export */   starInputRegex: () => (/* binding */ starInputRegex),\n/* harmony export */   starPasteRegex: () => (/* binding */ starPasteRegex),\n/* harmony export */   underscoreInputRegex: () => (/* binding */ underscoreInputRegex),\n/* harmony export */   underscorePasteRegex: () => (/* binding */ underscorePasteRegex)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\n\n/**\n * Matches bold text via `**` as input.\n */\nvar starInputRegex = /(?:^|\\s)(\\*\\*(?!\\s+\\*\\*)((?:[^*]+))\\*\\*(?!\\s+\\*\\*))$/;\n/**\n * Matches bold text via `**` while pasting.\n */\nvar starPasteRegex = /(?:^|\\s)(\\*\\*(?!\\s+\\*\\*)((?:[^*]+))\\*\\*(?!\\s+\\*\\*))/g;\n/**\n * Matches bold text via `__` as input.\n */\nvar underscoreInputRegex = /(?:^|\\s)(__(?!\\s+__)((?:[^_]+))__(?!\\s+__))$/;\n/**\n * Matches bold text via `__` while pasting.\n */\nvar underscorePasteRegex = /(?:^|\\s)(__(?!\\s+__)((?:[^_]+))__(?!\\s+__))/g;\n/**\n * This extension allows you to mark text as bold.\n * @see https://tiptap.dev/api/marks/bold\n */\nvar Bold = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Mark.create({\n  name: 'bold',\n  addOptions: function addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n  parseHTML: function parseHTML() {\n    var _this = this;\n    return [{\n      tag: 'strong'\n    }, {\n      tag: 'b',\n      getAttrs: function getAttrs(node) {\n        return node.style.fontWeight !== 'normal' && null;\n      }\n    }, {\n      style: 'font-weight=400',\n      clearMark: function clearMark(mark) {\n        return mark.type.name === _this.name;\n      }\n    }, {\n      style: 'font-weight',\n      getAttrs: function getAttrs(value) {\n        return /^(bold(er)?|[5-9]\\d{2,})$/.test(value) && null;\n      }\n    }];\n  },\n  renderHTML: function renderHTML(_ref) {\n    var HTMLAttributes = _ref.HTMLAttributes;\n    return ['strong', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands: function addCommands() {\n    var _this2 = this;\n    return {\n      setBold: function setBold() {\n        return function (_ref2) {\n          var commands = _ref2.commands;\n          return commands.setMark(_this2.name);\n        };\n      },\n      toggleBold: function toggleBold() {\n        return function (_ref3) {\n          var commands = _ref3.commands;\n          return commands.toggleMark(_this2.name);\n        };\n      },\n      unsetBold: function unsetBold() {\n        return function (_ref4) {\n          var commands = _ref4.commands;\n          return commands.unsetMark(_this2.name);\n        };\n      }\n    };\n  },\n  addKeyboardShortcuts: function addKeyboardShortcuts() {\n    var _this3 = this;\n    return {\n      'Mod-b': function ModB() {\n        return _this3.editor.commands.toggleBold();\n      },\n      'Mod-B': function ModB() {\n        return _this3.editor.commands.toggleBold();\n      }\n    };\n  },\n  addInputRules: function addInputRules() {\n    return [(0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markInputRule)({\n      find: starInputRegex,\n      type: this.type\n    }), (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markInputRule)({\n      find: underscoreInputRegex,\n      type: this.type\n    })];\n  },\n  addPasteRules: function addPasteRules() {\n    return [(0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markPasteRule)({\n      find: starPasteRegex,\n      type: this.type\n    }), (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markPasteRule)({\n      find: underscorePasteRegex,\n      type: this.type\n    })];\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-bold/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-bubble-menu/dist/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tiptap/extension-bubble-menu/dist/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BubbleMenu: () => (/* binding */ BubbleMenu),\n/* harmony export */   BubbleMenuPlugin: () => (/* binding */ BubbleMenuPlugin),\n/* harmony export */   BubbleMenuView: () => (/* binding */ BubbleMenuView),\n/* harmony export */   \"default\": () => (/* binding */ BubbleMenu)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/pm/state */ \"(ssr)/./node_modules/@tiptap/pm/state/dist/index.js\");\n/* harmony import */ var tippy_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tippy.js */ \"(ssr)/./node_modules/tippy.js/dist/tippy.esm.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\n\n\nvar BubbleMenuView = /*#__PURE__*/function () {\n  function BubbleMenuView(_ref) {\n    var _this = this;\n    var editor = _ref.editor,\n      element = _ref.element,\n      view = _ref.view,\n      _ref$tippyOptions = _ref.tippyOptions,\n      tippyOptions = _ref$tippyOptions === void 0 ? {} : _ref$tippyOptions,\n      _ref$updateDelay = _ref.updateDelay,\n      updateDelay = _ref$updateDelay === void 0 ? 250 : _ref$updateDelay,\n      shouldShow = _ref.shouldShow;\n    _classCallCheck(this, BubbleMenuView);\n    this.preventHide = false;\n    this.shouldShow = function (_ref2) {\n      var view = _ref2.view,\n        state = _ref2.state,\n        from = _ref2.from,\n        to = _ref2.to;\n      var doc = state.doc,\n        selection = state.selection;\n      var empty = selection.empty;\n      // Sometime check for `empty` is not enough.\n      // Doubleclick an empty paragraph returns a node size of 2.\n      // So we check also for an empty text size.\n      var isEmptyTextBlock = !doc.textBetween(from, to).length && (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_1__.isTextSelection)(state.selection);\n      // When clicking on a element inside the bubble menu the editor \"blur\" event\n      // is called and the bubble menu item is focussed. In this case we should\n      // consider the menu as part of the editor and keep showing the menu\n      var isChildOfMenu = _this.element.contains(document.activeElement);\n      var hasEditorFocus = view.hasFocus() || isChildOfMenu;\n      if (!hasEditorFocus || empty || isEmptyTextBlock || !_this.editor.isEditable) {\n        return false;\n      }\n      return true;\n    };\n    this.mousedownHandler = function () {\n      _this.preventHide = true;\n    };\n    this.dragstartHandler = function () {\n      _this.hide();\n    };\n    this.focusHandler = function () {\n      // we use `setTimeout` to make sure `selection` is already updated\n      setTimeout(function () {\n        return _this.update(_this.editor.view);\n      });\n    };\n    this.blurHandler = function (_ref3) {\n      var event = _ref3.event;\n      var _a;\n      if (_this.preventHide) {\n        _this.preventHide = false;\n        return;\n      }\n      if ((event === null || event === void 0 ? void 0 : event.relatedTarget) && ((_a = _this.element.parentNode) === null || _a === void 0 ? void 0 : _a.contains(event.relatedTarget))) {\n        return;\n      }\n      if ((event === null || event === void 0 ? void 0 : event.relatedTarget) === _this.editor.view.dom) {\n        return;\n      }\n      _this.hide();\n    };\n    this.tippyBlurHandler = function (event) {\n      _this.blurHandler({\n        event: event\n      });\n    };\n    this.handleDebouncedUpdate = function (view, oldState) {\n      var selectionChanged = !(oldState === null || oldState === void 0 ? void 0 : oldState.selection.eq(view.state.selection));\n      var docChanged = !(oldState === null || oldState === void 0 ? void 0 : oldState.doc.eq(view.state.doc));\n      if (!selectionChanged && !docChanged) {\n        return;\n      }\n      if (_this.updateDebounceTimer) {\n        clearTimeout(_this.updateDebounceTimer);\n      }\n      _this.updateDebounceTimer = window.setTimeout(function () {\n        _this.updateHandler(view, selectionChanged, docChanged, oldState);\n      }, _this.updateDelay);\n    };\n    this.updateHandler = function (view, selectionChanged, docChanged, oldState) {\n      var _a, _b, _c;\n      var state = view.state,\n        composing = view.composing;\n      var selection = state.selection;\n      var isSame = !selectionChanged && !docChanged;\n      if (composing || isSame) {\n        return;\n      }\n      _this.createTooltip();\n      // support for CellSelections\n      var ranges = selection.ranges;\n      var from = Math.min.apply(Math, _toConsumableArray(ranges.map(function (range) {\n        return range.$from.pos;\n      })));\n      var to = Math.max.apply(Math, _toConsumableArray(ranges.map(function (range) {\n        return range.$to.pos;\n      })));\n      var shouldShow = (_a = _this.shouldShow) === null || _a === void 0 ? void 0 : _a.call(_this, {\n        editor: _this.editor,\n        element: _this.element,\n        view: view,\n        state: state,\n        oldState: oldState,\n        from: from,\n        to: to\n      });\n      if (!shouldShow) {\n        _this.hide();\n        return;\n      }\n      (_b = _this.tippy) === null || _b === void 0 ? void 0 : _b.setProps({\n        getReferenceClientRect: ((_c = _this.tippyOptions) === null || _c === void 0 ? void 0 : _c.getReferenceClientRect) || function () {\n          if ((0,_tiptap_core__WEBPACK_IMPORTED_MODULE_1__.isNodeSelection)(state.selection)) {\n            var node = view.nodeDOM(from);\n            if (node) {\n              var nodeViewWrapper = node.dataset.nodeViewWrapper ? node : node.querySelector('[data-node-view-wrapper]');\n              if (nodeViewWrapper) {\n                node = nodeViewWrapper.firstChild;\n              }\n              if (node) {\n                return node.getBoundingClientRect();\n              }\n            }\n          }\n          return (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_1__.posToDOMRect)(view, from, to);\n        }\n      });\n      _this.show();\n    };\n    this.editor = editor;\n    this.element = element;\n    this.view = view;\n    this.updateDelay = updateDelay;\n    if (shouldShow) {\n      this.shouldShow = shouldShow;\n    }\n    this.element.addEventListener('mousedown', this.mousedownHandler, {\n      capture: true\n    });\n    this.view.dom.addEventListener('dragstart', this.dragstartHandler);\n    this.editor.on('focus', this.focusHandler);\n    this.editor.on('blur', this.blurHandler);\n    this.tippyOptions = tippyOptions;\n    // Detaches menu content from its current parent\n    this.element.remove();\n    this.element.style.visibility = 'visible';\n  }\n  return _createClass(BubbleMenuView, [{\n    key: \"createTooltip\",\n    value: function createTooltip() {\n      var editorElement = this.editor.options.element;\n      var editorIsAttached = !!editorElement.parentElement;\n      if (this.tippy || !editorIsAttached) {\n        return;\n      }\n      this.tippy = (0,tippy_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(editorElement, _objectSpread({\n        duration: 0,\n        getReferenceClientRect: null,\n        content: this.element,\n        interactive: true,\n        trigger: 'manual',\n        placement: 'top',\n        hideOnClick: 'toggle'\n      }, this.tippyOptions));\n      // maybe we have to hide tippy on its own blur event as well\n      if (this.tippy.popper.firstChild) {\n        this.tippy.popper.firstChild.addEventListener('blur', this.tippyBlurHandler);\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update(view, oldState) {\n      var state = view.state;\n      var hasValidSelection = state.selection.from !== state.selection.to;\n      if (this.updateDelay > 0 && hasValidSelection) {\n        this.handleDebouncedUpdate(view, oldState);\n        return;\n      }\n      var selectionChanged = !(oldState === null || oldState === void 0 ? void 0 : oldState.selection.eq(view.state.selection));\n      var docChanged = !(oldState === null || oldState === void 0 ? void 0 : oldState.doc.eq(view.state.doc));\n      this.updateHandler(view, selectionChanged, docChanged, oldState);\n    }\n  }, {\n    key: \"show\",\n    value: function show() {\n      var _a;\n      (_a = this.tippy) === null || _a === void 0 ? void 0 : _a.show();\n    }\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      var _a;\n      (_a = this.tippy) === null || _a === void 0 ? void 0 : _a.hide();\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var _a, _b;\n      if ((_a = this.tippy) === null || _a === void 0 ? void 0 : _a.popper.firstChild) {\n        this.tippy.popper.firstChild.removeEventListener('blur', this.tippyBlurHandler);\n      }\n      (_b = this.tippy) === null || _b === void 0 ? void 0 : _b.destroy();\n      this.element.removeEventListener('mousedown', this.mousedownHandler, {\n        capture: true\n      });\n      this.view.dom.removeEventListener('dragstart', this.dragstartHandler);\n      this.editor.off('focus', this.focusHandler);\n      this.editor.off('blur', this.blurHandler);\n    }\n  }]);\n}();\nvar BubbleMenuPlugin = function BubbleMenuPlugin(options) {\n  return new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n    key: typeof options.pluginKey === 'string' ? new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey(options.pluginKey) : options.pluginKey,\n    view: function view(_view) {\n      return new BubbleMenuView(_objectSpread({\n        view: _view\n      }, options));\n    }\n  });\n};\n\n/**\n * This extension allows you to create a bubble menu.\n * @see https://tiptap.dev/api/extensions/bubble-menu\n */\nvar BubbleMenu = _tiptap_core__WEBPACK_IMPORTED_MODULE_1__.Extension.create({\n  name: 'bubbleMenu',\n  addOptions: function addOptions() {\n    return {\n      element: null,\n      tippyOptions: {},\n      pluginKey: 'bubbleMenu',\n      updateDelay: undefined,\n      shouldShow: null\n    };\n  },\n  addProseMirrorPlugins: function addProseMirrorPlugins() {\n    if (!this.options.element) {\n      return [];\n    }\n    return [BubbleMenuPlugin({\n      pluginKey: this.options.pluginKey,\n      editor: this.editor,\n      element: this.options.element,\n      tippyOptions: this.options.tippyOptions,\n      updateDelay: this.options.updateDelay,\n      shouldShow: this.options.shouldShow\n    })];\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-bubble-menu/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-bullet-list/dist/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tiptap/extension-bullet-list/dist/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BulletList: () => (/* binding */ BulletList),\n/* harmony export */   \"default\": () => (/* binding */ BulletList),\n/* harmony export */   inputRegex: () => (/* binding */ inputRegex)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\nvar ListItemName = 'listItem';\nvar TextStyleName = 'textStyle';\n/**\n * Matches a bullet list to a dash or asterisk.\n */\nvar inputRegex = /^\\s*([-+*])\\s$/;\n/**\n * This extension allows you to create bullet lists.\n * This requires the ListItem extension\n * @see https://tiptap.dev/api/nodes/bullet-list\n * @see https://tiptap.dev/api/nodes/list-item.\n */\nvar BulletList = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({\n  name: 'bulletList',\n  addOptions: function addOptions() {\n    return {\n      itemTypeName: 'listItem',\n      HTMLAttributes: {},\n      keepMarks: false,\n      keepAttributes: false\n    };\n  },\n  group: 'block list',\n  content: function content() {\n    return \"\".concat(this.options.itemTypeName, \"+\");\n  },\n  parseHTML: function parseHTML() {\n    return [{\n      tag: 'ul'\n    }];\n  },\n  renderHTML: function renderHTML(_ref) {\n    var HTMLAttributes = _ref.HTMLAttributes;\n    return ['ul', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands: function addCommands() {\n    var _this = this;\n    return {\n      toggleBulletList: function toggleBulletList() {\n        return function (_ref2) {\n          var commands = _ref2.commands,\n            chain = _ref2.chain;\n          if (_this.options.keepAttributes) {\n            return chain().toggleList(_this.name, _this.options.itemTypeName, _this.options.keepMarks).updateAttributes(ListItemName, _this.editor.getAttributes(TextStyleName)).run();\n          }\n          return commands.toggleList(_this.name, _this.options.itemTypeName, _this.options.keepMarks);\n        };\n      }\n    };\n  },\n  addKeyboardShortcuts: function addKeyboardShortcuts() {\n    var _this2 = this;\n    return {\n      'Mod-Shift-8': function ModShift8() {\n        return _this2.editor.commands.toggleBulletList();\n      }\n    };\n  },\n  addInputRules: function addInputRules() {\n    var _this3 = this;\n    var inputRule = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.wrappingInputRule)({\n      find: inputRegex,\n      type: this.type\n    });\n    if (this.options.keepMarks || this.options.keepAttributes) {\n      inputRule = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.wrappingInputRule)({\n        find: inputRegex,\n        type: this.type,\n        keepMarks: this.options.keepMarks,\n        keepAttributes: this.options.keepAttributes,\n        getAttributes: function getAttributes() {\n          return _this3.editor.getAttributes(TextStyleName);\n        },\n        editor: this.editor\n      });\n    }\n    return [inputRule];\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tYnVsbGV0LWxpc3QvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXdFO0FBRXhFLElBQU1HLFlBQVksR0FBRyxVQUFVO0FBQy9CLElBQU1DLGFBQWEsR0FBRyxXQUFXO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBLElBQU1DLFVBQVUsR0FBRyxnQkFBZ0I7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBTUMsVUFBVSxHQUFHTiw4Q0FBSSxDQUFDTyxNQUFNLENBQUM7RUFDM0JDLElBQUksRUFBRSxZQUFZO0VBQ2xCQyxVQUFVLFdBQVZBLFVBQVVBLENBQUEsRUFBRztJQUNULE9BQU87TUFDSEMsWUFBWSxFQUFFLFVBQVU7TUFDeEJDLGNBQWMsRUFBRSxDQUFDLENBQUM7TUFDbEJDLFNBQVMsRUFBRSxLQUFLO01BQ2hCQyxjQUFjLEVBQUU7SUFDcEIsQ0FBQztFQUNMLENBQUM7RUFDREMsS0FBSyxFQUFFLFlBQVk7RUFDbkJDLE9BQU8sV0FBUEEsT0FBT0EsQ0FBQSxFQUFHO0lBQ04sVUFBQUMsTUFBQSxDQUFVLElBQUksQ0FBQ0MsT0FBTyxDQUFDUCxZQUFZO0VBQ3ZDLENBQUM7RUFDRFEsU0FBUyxXQUFUQSxTQUFTQSxDQUFBLEVBQUc7SUFDUixPQUFPLENBQ0g7TUFBRUMsR0FBRyxFQUFFO0lBQUssQ0FBQyxDQUNoQjtFQUNMLENBQUM7RUFDREMsVUFBVSxXQUFWQSxVQUFVQSxDQUFBQyxJQUFBLEVBQXFCO0lBQUEsSUFBbEJWLGNBQWMsR0FBQVUsSUFBQSxDQUFkVixjQUFjO0lBQ3ZCLE9BQU8sQ0FBQyxJQUFJLEVBQUVWLDZEQUFlLENBQUMsSUFBSSxDQUFDZ0IsT0FBTyxDQUFDTixjQUFjLEVBQUVBLGNBQWMsQ0FBQyxFQUFFLENBQUMsQ0FBQztFQUNsRixDQUFDO0VBQ0RXLFdBQVcsV0FBWEEsV0FBV0EsQ0FBQSxFQUFHO0lBQUEsSUFBQUMsS0FBQTtJQUNWLE9BQU87TUFDSEMsZ0JBQWdCLEVBQUUsU0FBbEJBLGdCQUFnQkEsQ0FBQTtRQUFBLE9BQVEsVUFBQUMsS0FBQSxFQUF5QjtVQUFBLElBQXRCQyxRQUFRLEdBQUFELEtBQUEsQ0FBUkMsUUFBUTtZQUFFQyxLQUFLLEdBQUFGLEtBQUEsQ0FBTEUsS0FBSztVQUN0QyxJQUFJSixLQUFJLENBQUNOLE9BQU8sQ0FBQ0osY0FBYyxFQUFFO1lBQzdCLE9BQU9jLEtBQUssQ0FBQyxDQUFDLENBQUNDLFVBQVUsQ0FBQ0wsS0FBSSxDQUFDZixJQUFJLEVBQUVlLEtBQUksQ0FBQ04sT0FBTyxDQUFDUCxZQUFZLEVBQUVhLEtBQUksQ0FBQ04sT0FBTyxDQUFDTCxTQUFTLENBQUMsQ0FBQ2lCLGdCQUFnQixDQUFDMUIsWUFBWSxFQUFFb0IsS0FBSSxDQUFDTyxNQUFNLENBQUNDLGFBQWEsQ0FBQzNCLGFBQWEsQ0FBQyxDQUFDLENBQUM0QixHQUFHLENBQUMsQ0FBQztVQUMxSztVQUNBLE9BQU9OLFFBQVEsQ0FBQ0UsVUFBVSxDQUFDTCxLQUFJLENBQUNmLElBQUksRUFBRWUsS0FBSSxDQUFDTixPQUFPLENBQUNQLFlBQVksRUFBRWEsS0FBSSxDQUFDTixPQUFPLENBQUNMLFNBQVMsQ0FBQztRQUM1RixDQUFDO01BQUE7SUFDTCxDQUFDO0VBQ0wsQ0FBQztFQUNEcUIsb0JBQW9CLFdBQXBCQSxvQkFBb0JBLENBQUEsRUFBRztJQUFBLElBQUFDLE1BQUE7SUFDbkIsT0FBTztNQUNILGFBQWEsRUFBRSxTQUFmQyxTQUFhQSxDQUFBO1FBQUEsT0FBUUQsTUFBSSxDQUFDSixNQUFNLENBQUNKLFFBQVEsQ0FBQ0YsZ0JBQWdCLENBQUMsQ0FBQztNQUFBO0lBQ2hFLENBQUM7RUFDTCxDQUFDO0VBQ0RZLGFBQWEsV0FBYkEsYUFBYUEsQ0FBQSxFQUFHO0lBQUEsSUFBQUMsTUFBQTtJQUNaLElBQUlDLFNBQVMsR0FBR3BDLCtEQUFpQixDQUFDO01BQzlCcUMsSUFBSSxFQUFFbEMsVUFBVTtNQUNoQm1DLElBQUksRUFBRSxJQUFJLENBQUNBO0lBQ2YsQ0FBQyxDQUFDO0lBQ0YsSUFBSSxJQUFJLENBQUN2QixPQUFPLENBQUNMLFNBQVMsSUFBSSxJQUFJLENBQUNLLE9BQU8sQ0FBQ0osY0FBYyxFQUFFO01BQ3ZEeUIsU0FBUyxHQUFHcEMsK0RBQWlCLENBQUM7UUFDMUJxQyxJQUFJLEVBQUVsQyxVQUFVO1FBQ2hCbUMsSUFBSSxFQUFFLElBQUksQ0FBQ0EsSUFBSTtRQUNmNUIsU0FBUyxFQUFFLElBQUksQ0FBQ0ssT0FBTyxDQUFDTCxTQUFTO1FBQ2pDQyxjQUFjLEVBQUUsSUFBSSxDQUFDSSxPQUFPLENBQUNKLGNBQWM7UUFDM0NrQixhQUFhLEVBQUUsU0FBZkEsYUFBYUEsQ0FBQSxFQUFRO1VBQUUsT0FBT00sTUFBSSxDQUFDUCxNQUFNLENBQUNDLGFBQWEsQ0FBQzNCLGFBQWEsQ0FBQztRQUFFLENBQUM7UUFDekUwQixNQUFNLEVBQUUsSUFBSSxDQUFDQTtNQUNqQixDQUFDLENBQUM7SUFDTjtJQUNBLE9BQU8sQ0FDSFEsU0FBUyxDQUNaO0VBQ0w7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xcQHRpcHRhcFxcZXh0ZW5zaW9uLWJ1bGxldC1saXN0XFxkaXN0XFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOb2RlLCBtZXJnZUF0dHJpYnV0ZXMsIHdyYXBwaW5nSW5wdXRSdWxlIH0gZnJvbSAnQHRpcHRhcC9jb3JlJztcblxuY29uc3QgTGlzdEl0ZW1OYW1lID0gJ2xpc3RJdGVtJztcbmNvbnN0IFRleHRTdHlsZU5hbWUgPSAndGV4dFN0eWxlJztcbi8qKlxuICogTWF0Y2hlcyBhIGJ1bGxldCBsaXN0IHRvIGEgZGFzaCBvciBhc3Rlcmlzay5cbiAqL1xuY29uc3QgaW5wdXRSZWdleCA9IC9eXFxzKihbLSsqXSlcXHMkLztcbi8qKlxuICogVGhpcyBleHRlbnNpb24gYWxsb3dzIHlvdSB0byBjcmVhdGUgYnVsbGV0IGxpc3RzLlxuICogVGhpcyByZXF1aXJlcyB0aGUgTGlzdEl0ZW0gZXh0ZW5zaW9uXG4gKiBAc2VlIGh0dHBzOi8vdGlwdGFwLmRldi9hcGkvbm9kZXMvYnVsbGV0LWxpc3RcbiAqIEBzZWUgaHR0cHM6Ly90aXB0YXAuZGV2L2FwaS9ub2Rlcy9saXN0LWl0ZW0uXG4gKi9cbmNvbnN0IEJ1bGxldExpc3QgPSBOb2RlLmNyZWF0ZSh7XG4gICAgbmFtZTogJ2J1bGxldExpc3QnLFxuICAgIGFkZE9wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpdGVtVHlwZU5hbWU6ICdsaXN0SXRlbScsXG4gICAgICAgICAgICBIVE1MQXR0cmlidXRlczoge30sXG4gICAgICAgICAgICBrZWVwTWFya3M6IGZhbHNlLFxuICAgICAgICAgICAga2VlcEF0dHJpYnV0ZXM6IGZhbHNlLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgZ3JvdXA6ICdibG9jayBsaXN0JyxcbiAgICBjb250ZW50KCkge1xuICAgICAgICByZXR1cm4gYCR7dGhpcy5vcHRpb25zLml0ZW1UeXBlTmFtZX0rYDtcbiAgICB9LFxuICAgIHBhcnNlSFRNTCgpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHsgdGFnOiAndWwnIH0sXG4gICAgICAgIF07XG4gICAgfSxcbiAgICByZW5kZXJIVE1MKHsgSFRNTEF0dHJpYnV0ZXMgfSkge1xuICAgICAgICByZXR1cm4gWyd1bCcsIG1lcmdlQXR0cmlidXRlcyh0aGlzLm9wdGlvbnMuSFRNTEF0dHJpYnV0ZXMsIEhUTUxBdHRyaWJ1dGVzKSwgMF07XG4gICAgfSxcbiAgICBhZGRDb21tYW5kcygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRvZ2dsZUJ1bGxldExpc3Q6ICgpID0+ICh7IGNvbW1hbmRzLCBjaGFpbiB9KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5rZWVwQXR0cmlidXRlcykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2hhaW4oKS50b2dnbGVMaXN0KHRoaXMubmFtZSwgdGhpcy5vcHRpb25zLml0ZW1UeXBlTmFtZSwgdGhpcy5vcHRpb25zLmtlZXBNYXJrcykudXBkYXRlQXR0cmlidXRlcyhMaXN0SXRlbU5hbWUsIHRoaXMuZWRpdG9yLmdldEF0dHJpYnV0ZXMoVGV4dFN0eWxlTmFtZSkpLnJ1bigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWFuZHMudG9nZ2xlTGlzdCh0aGlzLm5hbWUsIHRoaXMub3B0aW9ucy5pdGVtVHlwZU5hbWUsIHRoaXMub3B0aW9ucy5rZWVwTWFya3MpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIGFkZEtleWJvYXJkU2hvcnRjdXRzKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ01vZC1TaGlmdC04JzogKCkgPT4gdGhpcy5lZGl0b3IuY29tbWFuZHMudG9nZ2xlQnVsbGV0TGlzdCgpLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgYWRkSW5wdXRSdWxlcygpIHtcbiAgICAgICAgbGV0IGlucHV0UnVsZSA9IHdyYXBwaW5nSW5wdXRSdWxlKHtcbiAgICAgICAgICAgIGZpbmQ6IGlucHV0UmVnZXgsXG4gICAgICAgICAgICB0eXBlOiB0aGlzLnR5cGUsXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmtlZXBNYXJrcyB8fCB0aGlzLm9wdGlvbnMua2VlcEF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgIGlucHV0UnVsZSA9IHdyYXBwaW5nSW5wdXRSdWxlKHtcbiAgICAgICAgICAgICAgICBmaW5kOiBpbnB1dFJlZ2V4LFxuICAgICAgICAgICAgICAgIHR5cGU6IHRoaXMudHlwZSxcbiAgICAgICAgICAgICAgICBrZWVwTWFya3M6IHRoaXMub3B0aW9ucy5rZWVwTWFya3MsXG4gICAgICAgICAgICAgICAga2VlcEF0dHJpYnV0ZXM6IHRoaXMub3B0aW9ucy5rZWVwQXR0cmlidXRlcyxcbiAgICAgICAgICAgICAgICBnZXRBdHRyaWJ1dGVzOiAoKSA9PiB7IHJldHVybiB0aGlzLmVkaXRvci5nZXRBdHRyaWJ1dGVzKFRleHRTdHlsZU5hbWUpOyB9LFxuICAgICAgICAgICAgICAgIGVkaXRvcjogdGhpcy5lZGl0b3IsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgaW5wdXRSdWxlLFxuICAgICAgICBdO1xuICAgIH0sXG59KTtcblxuZXhwb3J0IHsgQnVsbGV0TGlzdCwgQnVsbGV0TGlzdCBhcyBkZWZhdWx0LCBpbnB1dFJlZ2V4IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJOb2RlIiwibWVyZ2VBdHRyaWJ1dGVzIiwid3JhcHBpbmdJbnB1dFJ1bGUiLCJMaXN0SXRlbU5hbWUiLCJUZXh0U3R5bGVOYW1lIiwiaW5wdXRSZWdleCIsIkJ1bGxldExpc3QiLCJjcmVhdGUiLCJuYW1lIiwiYWRkT3B0aW9ucyIsIml0ZW1UeXBlTmFtZSIsIkhUTUxBdHRyaWJ1dGVzIiwia2VlcE1hcmtzIiwia2VlcEF0dHJpYnV0ZXMiLCJncm91cCIsImNvbnRlbnQiLCJjb25jYXQiLCJvcHRpb25zIiwicGFyc2VIVE1MIiwidGFnIiwicmVuZGVySFRNTCIsIl9yZWYiLCJhZGRDb21tYW5kcyIsIl90aGlzIiwidG9nZ2xlQnVsbGV0TGlzdCIsIl9yZWYyIiwiY29tbWFuZHMiLCJjaGFpbiIsInRvZ2dsZUxpc3QiLCJ1cGRhdGVBdHRyaWJ1dGVzIiwiZWRpdG9yIiwiZ2V0QXR0cmlidXRlcyIsInJ1biIsImFkZEtleWJvYXJkU2hvcnRjdXRzIiwiX3RoaXMyIiwiTW9kU2hpZnQ4IiwiYWRkSW5wdXRSdWxlcyIsIl90aGlzMyIsImlucHV0UnVsZSIsImZpbmQiLCJ0eXBlIiwiZGVmYXVsdCJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-bullet-list/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-character-count/dist/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@tiptap/extension-character-count/dist/index.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CharacterCount: () => (/* binding */ CharacterCount),\n/* harmony export */   \"default\": () => (/* binding */ CharacterCount)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/pm/state */ \"(ssr)/./node_modules/@tiptap/pm/state/dist/index.js\");\n\n\n\n/**\n * This extension allows you to count the characters and words of your document.\n * @see https://tiptap.dev/api/extensions/character-count\n */\nvar CharacterCount = _tiptap_core__WEBPACK_IMPORTED_MODULE_1__.Extension.create({\n  name: 'characterCount',\n  addOptions: function addOptions() {\n    return {\n      limit: null,\n      mode: 'textSize',\n      textCounter: function textCounter(text) {\n        return text.length;\n      },\n      wordCounter: function wordCounter(text) {\n        return text.split(' ').filter(function (word) {\n          return word !== '';\n        }).length;\n      }\n    };\n  },\n  addStorage: function addStorage() {\n    return {\n      characters: function characters() {\n        return 0;\n      },\n      words: function words() {\n        return 0;\n      }\n    };\n  },\n  onBeforeCreate: function onBeforeCreate() {\n    var _this = this;\n    this.storage.characters = function (options) {\n      var node = (options === null || options === void 0 ? void 0 : options.node) || _this.editor.state.doc;\n      var mode = (options === null || options === void 0 ? void 0 : options.mode) || _this.options.mode;\n      if (mode === 'textSize') {\n        var text = node.textBetween(0, node.content.size, undefined, ' ');\n        return _this.options.textCounter(text);\n      }\n      return node.nodeSize;\n    };\n    this.storage.words = function (options) {\n      var node = (options === null || options === void 0 ? void 0 : options.node) || _this.editor.state.doc;\n      var text = node.textBetween(0, node.content.size, ' ', ' ');\n      return _this.options.wordCounter(text);\n    };\n  },\n  addProseMirrorPlugins: function addProseMirrorPlugins() {\n    var _this2 = this;\n    var initialEvaluationDone = false;\n    return [new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n      key: new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey('characterCount'),\n      appendTransaction: function appendTransaction(transactions, oldState, newState) {\n        if (initialEvaluationDone) {\n          return;\n        }\n        var limit = _this2.options.limit;\n        if (limit === null || limit === undefined || limit === 0) {\n          initialEvaluationDone = true;\n          return;\n        }\n        var initialContentSize = _this2.storage.characters({\n          node: newState.doc\n        });\n        if (initialContentSize > limit) {\n          var over = initialContentSize - limit;\n          var from = 0;\n          var to = over;\n          console.warn(\"[CharacterCount] Initial content exceeded limit of \".concat(limit, \" characters. Content was automatically trimmed.\"));\n          var tr = newState.tr.deleteRange(from, to);\n          initialEvaluationDone = true;\n          return tr;\n        }\n        initialEvaluationDone = true;\n      },\n      filterTransaction: function filterTransaction(transaction, state) {\n        var limit = _this2.options.limit;\n        // Nothing has changed or no limit is defined. Ignore it.\n        if (!transaction.docChanged || limit === 0 || limit === null || limit === undefined) {\n          return true;\n        }\n        var oldSize = _this2.storage.characters({\n          node: state.doc\n        });\n        var newSize = _this2.storage.characters({\n          node: transaction.doc\n        });\n        // Everything is in the limit. Good.\n        if (newSize <= limit) {\n          return true;\n        }\n        // The limit has already been exceeded but will be reduced.\n        if (oldSize > limit && newSize > limit && newSize <= oldSize) {\n          return true;\n        }\n        // The limit has already been exceeded and will be increased further.\n        if (oldSize > limit && newSize > limit && newSize > oldSize) {\n          return false;\n        }\n        var isPaste = transaction.getMeta('paste');\n        // Block all exceeding transactions that were not pasted.\n        if (!isPaste) {\n          return false;\n        }\n        // For pasted content, we try to remove the exceeding content.\n        var pos = transaction.selection.$head.pos;\n        var over = newSize - limit;\n        var from = pos - over;\n        var to = pos;\n        // It’s probably a bad idea to mutate transactions within `filterTransaction`\n        // but for now this is working fine.\n        transaction.deleteRange(from, to);\n        // In some situations, the limit will continue to be exceeded after trimming.\n        // This happens e.g. when truncating within a complex node (e.g. table)\n        // and ProseMirror has to close this node again.\n        // If this is the case, we prevent the transaction completely.\n        var updatedSize = _this2.storage.characters({\n          node: transaction.doc\n        });\n        if (updatedSize > limit) {\n          return false;\n        }\n        return true;\n      }\n    })];\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-character-count/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-code-block/dist/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tiptap/extension-code-block/dist/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CodeBlock: () => (/* binding */ CodeBlock),\n/* harmony export */   backtickInputRegex: () => (/* binding */ backtickInputRegex),\n/* harmony export */   \"default\": () => (/* binding */ CodeBlock),\n/* harmony export */   tildeInputRegex: () => (/* binding */ tildeInputRegex)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/pm/state */ \"(ssr)/./node_modules/@tiptap/pm/state/dist/index.js\");\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n\n\n\n/**\n * Matches a code block with backticks.\n */\nvar backtickInputRegex = /^```([a-z]+)?[\\s\\n]$/;\n/**\n * Matches a code block with tildes.\n */\nvar tildeInputRegex = /^~~~([a-z]+)?[\\s\\n]$/;\n/**\n * This extension allows you to create code blocks.\n * @see https://tiptap.dev/api/nodes/code-block\n */\nvar CodeBlock = _tiptap_core__WEBPACK_IMPORTED_MODULE_1__.Node.create({\n  name: 'codeBlock',\n  addOptions: function addOptions() {\n    return {\n      languageClassPrefix: 'language-',\n      exitOnTripleEnter: true,\n      exitOnArrowDown: true,\n      defaultLanguage: null,\n      HTMLAttributes: {}\n    };\n  },\n  content: 'text*',\n  marks: '',\n  group: 'block',\n  code: true,\n  defining: true,\n  addAttributes: function addAttributes() {\n    var _this = this;\n    return {\n      language: {\n        \"default\": this.options.defaultLanguage,\n        parseHTML: function parseHTML(element) {\n          var _a;\n          var languageClassPrefix = _this.options.languageClassPrefix;\n          var classNames = _toConsumableArray(((_a = element.firstElementChild) === null || _a === void 0 ? void 0 : _a.classList) || []);\n          var languages = classNames.filter(function (className) {\n            return className.startsWith(languageClassPrefix);\n          }).map(function (className) {\n            return className.replace(languageClassPrefix, '');\n          });\n          var language = languages[0];\n          if (!language) {\n            return null;\n          }\n          return language;\n        },\n        rendered: false\n      }\n    };\n  },\n  parseHTML: function parseHTML() {\n    return [{\n      tag: 'pre',\n      preserveWhitespace: 'full'\n    }];\n  },\n  renderHTML: function renderHTML(_ref) {\n    var node = _ref.node,\n      HTMLAttributes = _ref.HTMLAttributes;\n    return ['pre', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_1__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), ['code', {\n      \"class\": node.attrs.language ? this.options.languageClassPrefix + node.attrs.language : null\n    }, 0]];\n  },\n  addCommands: function addCommands() {\n    var _this2 = this;\n    return {\n      setCodeBlock: function setCodeBlock(attributes) {\n        return function (_ref2) {\n          var commands = _ref2.commands;\n          return commands.setNode(_this2.name, attributes);\n        };\n      },\n      toggleCodeBlock: function toggleCodeBlock(attributes) {\n        return function (_ref3) {\n          var commands = _ref3.commands;\n          return commands.toggleNode(_this2.name, 'paragraph', attributes);\n        };\n      }\n    };\n  },\n  addKeyboardShortcuts: function addKeyboardShortcuts() {\n    var _this3 = this;\n    return {\n      'Mod-Alt-c': function ModAltC() {\n        return _this3.editor.commands.toggleCodeBlock();\n      },\n      // remove code block when at start of document or code block is empty\n      Backspace: function Backspace() {\n        var _this3$editor$state$s = _this3.editor.state.selection,\n          empty = _this3$editor$state$s.empty,\n          $anchor = _this3$editor$state$s.$anchor;\n        var isAtStart = $anchor.pos === 1;\n        if (!empty || $anchor.parent.type.name !== _this3.name) {\n          return false;\n        }\n        if (isAtStart || !$anchor.parent.textContent.length) {\n          return _this3.editor.commands.clearNodes();\n        }\n        return false;\n      },\n      // exit node on triple enter\n      Enter: function Enter(_ref4) {\n        var editor = _ref4.editor;\n        if (!_this3.options.exitOnTripleEnter) {\n          return false;\n        }\n        var state = editor.state;\n        var selection = state.selection;\n        var $from = selection.$from,\n          empty = selection.empty;\n        if (!empty || $from.parent.type !== _this3.type) {\n          return false;\n        }\n        var isAtEnd = $from.parentOffset === $from.parent.nodeSize - 2;\n        var endsWithDoubleNewline = $from.parent.textContent.endsWith('\\n\\n');\n        if (!isAtEnd || !endsWithDoubleNewline) {\n          return false;\n        }\n        return editor.chain().command(function (_ref5) {\n          var tr = _ref5.tr;\n          tr[\"delete\"]($from.pos - 2, $from.pos);\n          return true;\n        }).exitCode().run();\n      },\n      // exit node on arrow down\n      ArrowDown: function ArrowDown(_ref6) {\n        var editor = _ref6.editor;\n        if (!_this3.options.exitOnArrowDown) {\n          return false;\n        }\n        var state = editor.state;\n        var selection = state.selection,\n          doc = state.doc;\n        var $from = selection.$from,\n          empty = selection.empty;\n        if (!empty || $from.parent.type !== _this3.type) {\n          return false;\n        }\n        var isAtEnd = $from.parentOffset === $from.parent.nodeSize - 2;\n        if (!isAtEnd) {\n          return false;\n        }\n        var after = $from.after();\n        if (after === undefined) {\n          return false;\n        }\n        var nodeAfter = doc.nodeAt(after);\n        if (nodeAfter) {\n          return editor.commands.command(function (_ref7) {\n            var tr = _ref7.tr;\n            tr.setSelection(_tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Selection.near(doc.resolve(after)));\n            return true;\n          });\n        }\n        return editor.commands.exitCode();\n      }\n    };\n  },\n  addInputRules: function addInputRules() {\n    return [(0,_tiptap_core__WEBPACK_IMPORTED_MODULE_1__.textblockTypeInputRule)({\n      find: backtickInputRegex,\n      type: this.type,\n      getAttributes: function getAttributes(match) {\n        return {\n          language: match[1]\n        };\n      }\n    }), (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_1__.textblockTypeInputRule)({\n      find: tildeInputRegex,\n      type: this.type,\n      getAttributes: function getAttributes(match) {\n        return {\n          language: match[1]\n        };\n      }\n    })];\n  },\n  addProseMirrorPlugins: function addProseMirrorPlugins() {\n    var _this4 = this;\n    return [\n    // this plugin creates a code block for pasted content from VS Code\n    // we can also detect the copied code language\n    new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n      key: new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey('codeBlockVSCodeHandler'),\n      props: {\n        handlePaste: function handlePaste(view, event) {\n          if (!event.clipboardData) {\n            return false;\n          }\n          // don’t create a new code block within code blocks\n          if (_this4.editor.isActive(_this4.type.name)) {\n            return false;\n          }\n          var text = event.clipboardData.getData('text/plain');\n          var vscode = event.clipboardData.getData('vscode-editor-data');\n          var vscodeData = vscode ? JSON.parse(vscode) : undefined;\n          var language = vscodeData === null || vscodeData === void 0 ? void 0 : vscodeData.mode;\n          if (!text || !language) {\n            return false;\n          }\n          var _view$state = view.state,\n            tr = _view$state.tr,\n            schema = _view$state.schema;\n          // prepare a text node\n          // strip carriage return chars from text pasted as code\n          // see: https://github.com/ProseMirror/prosemirror-view/commit/a50a6bcceb4ce52ac8fcc6162488d8875613aacd\n          var textNode = schema.text(text.replace(/\\r\\n?/g, '\\n'));\n          // create a code block with the text node\n          // replace selection with the code block\n          tr.replaceSelectionWith(_this4.type.create({\n            language: language\n          }, textNode));\n          if (tr.selection.$from.parent.type !== _this4.type) {\n            // put cursor inside the newly created code block\n            tr.setSelection(_tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.near(tr.doc.resolve(Math.max(0, tr.selection.from - 2))));\n          }\n          // store meta information\n          // this is useful for other plugins that depends on the paste event\n          // like the paste rule plugin\n          tr.setMeta('paste', true);\n          view.dispatch(tr);\n          return true;\n        }\n      }\n    })];\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-code-block/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-code/dist/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@tiptap/extension-code/dist/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Code: () => (/* binding */ Code),\n/* harmony export */   \"default\": () => (/* binding */ Code),\n/* harmony export */   inputRegex: () => (/* binding */ inputRegex),\n/* harmony export */   pasteRegex: () => (/* binding */ pasteRegex)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\n\n/**\n * Regular expressions to match inline code blocks enclosed in backticks.\n *  It matches:\n *     - An opening backtick, followed by\n *     - Any text that doesn't include a backtick (captured for marking), followed by\n *     - A closing backtick.\n *  This ensures that any text between backticks is formatted as code,\n *  regardless of the surrounding characters (exception being another backtick).\n */\nvar inputRegex = /(^|[^`])`([^`]+)`(?!`)/;\n/**\n * Matches inline code while pasting.\n */\nvar pasteRegex = /(^|[^`])`([^`]+)`(?!`)/g;\n/**\n * This extension allows you to mark text as inline code.\n * @see https://tiptap.dev/api/marks/code\n */\nvar Code = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Mark.create({\n  name: 'code',\n  addOptions: function addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n  excludes: '_',\n  code: true,\n  exitable: true,\n  parseHTML: function parseHTML() {\n    return [{\n      tag: 'code'\n    }];\n  },\n  renderHTML: function renderHTML(_ref) {\n    var HTMLAttributes = _ref.HTMLAttributes;\n    return ['code', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands: function addCommands() {\n    var _this = this;\n    return {\n      setCode: function setCode() {\n        return function (_ref2) {\n          var commands = _ref2.commands;\n          return commands.setMark(_this.name);\n        };\n      },\n      toggleCode: function toggleCode() {\n        return function (_ref3) {\n          var commands = _ref3.commands;\n          return commands.toggleMark(_this.name);\n        };\n      },\n      unsetCode: function unsetCode() {\n        return function (_ref4) {\n          var commands = _ref4.commands;\n          return commands.unsetMark(_this.name);\n        };\n      }\n    };\n  },\n  addKeyboardShortcuts: function addKeyboardShortcuts() {\n    var _this2 = this;\n    return {\n      'Mod-e': function ModE() {\n        return _this2.editor.commands.toggleCode();\n      }\n    };\n  },\n  addInputRules: function addInputRules() {\n    return [(0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markInputRule)({\n      find: inputRegex,\n      type: this.type\n    })];\n  },\n  addPasteRules: function addPasteRules() {\n    return [(0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markPasteRule)({\n      find: pasteRegex,\n      type: this.type\n    })];\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tY29kZS9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQW1GOztBQUVuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFNSSxVQUFVLEdBQUcsd0JBQXdCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBLElBQU1DLFVBQVUsR0FBRyx5QkFBeUI7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFNQyxJQUFJLEdBQUdOLDhDQUFJLENBQUNPLE1BQU0sQ0FBQztFQUNyQkMsSUFBSSxFQUFFLE1BQU07RUFDWkMsVUFBVSxXQUFWQSxVQUFVQSxDQUFBLEVBQUc7SUFDVCxPQUFPO01BQ0hDLGNBQWMsRUFBRSxDQUFDO0lBQ3JCLENBQUM7RUFDTCxDQUFDO0VBQ0RDLFFBQVEsRUFBRSxHQUFHO0VBQ2JDLElBQUksRUFBRSxJQUFJO0VBQ1ZDLFFBQVEsRUFBRSxJQUFJO0VBQ2RDLFNBQVMsV0FBVEEsU0FBU0EsQ0FBQSxFQUFHO0lBQ1IsT0FBTyxDQUNIO01BQUVDLEdBQUcsRUFBRTtJQUFPLENBQUMsQ0FDbEI7RUFDTCxDQUFDO0VBQ0RDLFVBQVUsV0FBVkEsVUFBVUEsQ0FBQUMsSUFBQSxFQUFxQjtJQUFBLElBQWxCUCxjQUFjLEdBQUFPLElBQUEsQ0FBZFAsY0FBYztJQUN2QixPQUFPLENBQUMsTUFBTSxFQUFFVCw2REFBZSxDQUFDLElBQUksQ0FBQ2lCLE9BQU8sQ0FBQ1IsY0FBYyxFQUFFQSxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7RUFDcEYsQ0FBQztFQUNEUyxXQUFXLFdBQVhBLFdBQVdBLENBQUEsRUFBRztJQUFBLElBQUFDLEtBQUE7SUFDVixPQUFPO01BQ0hDLE9BQU8sRUFBRSxTQUFUQSxPQUFPQSxDQUFBO1FBQUEsT0FBUSxVQUFBQyxLQUFBLEVBQWtCO1VBQUEsSUFBZkMsUUFBUSxHQUFBRCxLQUFBLENBQVJDLFFBQVE7VUFDdEIsT0FBT0EsUUFBUSxDQUFDQyxPQUFPLENBQUNKLEtBQUksQ0FBQ1osSUFBSSxDQUFDO1FBQ3RDLENBQUM7TUFBQTtNQUNEaUIsVUFBVSxFQUFFLFNBQVpBLFVBQVVBLENBQUE7UUFBQSxPQUFRLFVBQUFDLEtBQUEsRUFBa0I7VUFBQSxJQUFmSCxRQUFRLEdBQUFHLEtBQUEsQ0FBUkgsUUFBUTtVQUN6QixPQUFPQSxRQUFRLENBQUNJLFVBQVUsQ0FBQ1AsS0FBSSxDQUFDWixJQUFJLENBQUM7UUFDekMsQ0FBQztNQUFBO01BQ0RvQixTQUFTLEVBQUUsU0FBWEEsU0FBU0EsQ0FBQTtRQUFBLE9BQVEsVUFBQUMsS0FBQSxFQUFrQjtVQUFBLElBQWZOLFFBQVEsR0FBQU0sS0FBQSxDQUFSTixRQUFRO1VBQ3hCLE9BQU9BLFFBQVEsQ0FBQ08sU0FBUyxDQUFDVixLQUFJLENBQUNaLElBQUksQ0FBQztRQUN4QyxDQUFDO01BQUE7SUFDTCxDQUFDO0VBQ0wsQ0FBQztFQUNEdUIsb0JBQW9CLFdBQXBCQSxvQkFBb0JBLENBQUEsRUFBRztJQUFBLElBQUFDLE1BQUE7SUFDbkIsT0FBTztNQUNILE9BQU8sRUFBRSxTQUFUQyxJQUFPQSxDQUFBO1FBQUEsT0FBUUQsTUFBSSxDQUFDRSxNQUFNLENBQUNYLFFBQVEsQ0FBQ0UsVUFBVSxDQUFDLENBQUM7TUFBQTtJQUNwRCxDQUFDO0VBQ0wsQ0FBQztFQUNEVSxhQUFhLFdBQWJBLGFBQWFBLENBQUEsRUFBRztJQUNaLE9BQU8sQ0FDSGpDLDJEQUFhLENBQUM7TUFDVmtDLElBQUksRUFBRWhDLFVBQVU7TUFDaEJpQyxJQUFJLEVBQUUsSUFBSSxDQUFDQTtJQUNmLENBQUMsQ0FBQyxDQUNMO0VBQ0wsQ0FBQztFQUNEQyxhQUFhLFdBQWJBLGFBQWFBLENBQUEsRUFBRztJQUNaLE9BQU8sQ0FDSG5DLDJEQUFhLENBQUM7TUFDVmlDLElBQUksRUFBRS9CLFVBQVU7TUFDaEJnQyxJQUFJLEVBQUUsSUFBSSxDQUFDQTtJQUNmLENBQUMsQ0FBQyxDQUNMO0VBQ0w7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xcQHRpcHRhcFxcZXh0ZW5zaW9uLWNvZGVcXGRpc3RcXGluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1hcmssIG1lcmdlQXR0cmlidXRlcywgbWFya0lucHV0UnVsZSwgbWFya1Bhc3RlUnVsZSB9IGZyb20gJ0B0aXB0YXAvY29yZSc7XG5cbi8qKlxuICogUmVndWxhciBleHByZXNzaW9ucyB0byBtYXRjaCBpbmxpbmUgY29kZSBibG9ja3MgZW5jbG9zZWQgaW4gYmFja3RpY2tzLlxuICogIEl0IG1hdGNoZXM6XG4gKiAgICAgLSBBbiBvcGVuaW5nIGJhY2t0aWNrLCBmb2xsb3dlZCBieVxuICogICAgIC0gQW55IHRleHQgdGhhdCBkb2Vzbid0IGluY2x1ZGUgYSBiYWNrdGljayAoY2FwdHVyZWQgZm9yIG1hcmtpbmcpLCBmb2xsb3dlZCBieVxuICogICAgIC0gQSBjbG9zaW5nIGJhY2t0aWNrLlxuICogIFRoaXMgZW5zdXJlcyB0aGF0IGFueSB0ZXh0IGJldHdlZW4gYmFja3RpY2tzIGlzIGZvcm1hdHRlZCBhcyBjb2RlLFxuICogIHJlZ2FyZGxlc3Mgb2YgdGhlIHN1cnJvdW5kaW5nIGNoYXJhY3RlcnMgKGV4Y2VwdGlvbiBiZWluZyBhbm90aGVyIGJhY2t0aWNrKS5cbiAqL1xuY29uc3QgaW5wdXRSZWdleCA9IC8oXnxbXmBdKWAoW15gXSspYCg/IWApLztcbi8qKlxuICogTWF0Y2hlcyBpbmxpbmUgY29kZSB3aGlsZSBwYXN0aW5nLlxuICovXG5jb25zdCBwYXN0ZVJlZ2V4ID0gLyhefFteYF0pYChbXmBdKylgKD8hYCkvZztcbi8qKlxuICogVGhpcyBleHRlbnNpb24gYWxsb3dzIHlvdSB0byBtYXJrIHRleHQgYXMgaW5saW5lIGNvZGUuXG4gKiBAc2VlIGh0dHBzOi8vdGlwdGFwLmRldi9hcGkvbWFya3MvY29kZVxuICovXG5jb25zdCBDb2RlID0gTWFyay5jcmVhdGUoe1xuICAgIG5hbWU6ICdjb2RlJyxcbiAgICBhZGRPcHRpb25zKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgSFRNTEF0dHJpYnV0ZXM6IHt9LFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgZXhjbHVkZXM6ICdfJyxcbiAgICBjb2RlOiB0cnVlLFxuICAgIGV4aXRhYmxlOiB0cnVlLFxuICAgIHBhcnNlSFRNTCgpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHsgdGFnOiAnY29kZScgfSxcbiAgICAgICAgXTtcbiAgICB9LFxuICAgIHJlbmRlckhUTUwoeyBIVE1MQXR0cmlidXRlcyB9KSB7XG4gICAgICAgIHJldHVybiBbJ2NvZGUnLCBtZXJnZUF0dHJpYnV0ZXModGhpcy5vcHRpb25zLkhUTUxBdHRyaWJ1dGVzLCBIVE1MQXR0cmlidXRlcyksIDBdO1xuICAgIH0sXG4gICAgYWRkQ29tbWFuZHMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzZXRDb2RlOiAoKSA9PiAoeyBjb21tYW5kcyB9KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1hbmRzLnNldE1hcmsodGhpcy5uYW1lKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0b2dnbGVDb2RlOiAoKSA9PiAoeyBjb21tYW5kcyB9KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1hbmRzLnRvZ2dsZU1hcmsodGhpcy5uYW1lKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB1bnNldENvZGU6ICgpID0+ICh7IGNvbW1hbmRzIH0pID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWFuZHMudW5zZXRNYXJrKHRoaXMubmFtZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgYWRkS2V5Ym9hcmRTaG9ydGN1dHMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnTW9kLWUnOiAoKSA9PiB0aGlzLmVkaXRvci5jb21tYW5kcy50b2dnbGVDb2RlKCksXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBhZGRJbnB1dFJ1bGVzKCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgbWFya0lucHV0UnVsZSh7XG4gICAgICAgICAgICAgICAgZmluZDogaW5wdXRSZWdleCxcbiAgICAgICAgICAgICAgICB0eXBlOiB0aGlzLnR5cGUsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgXTtcbiAgICB9LFxuICAgIGFkZFBhc3RlUnVsZXMoKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBtYXJrUGFzdGVSdWxlKHtcbiAgICAgICAgICAgICAgICBmaW5kOiBwYXN0ZVJlZ2V4LFxuICAgICAgICAgICAgICAgIHR5cGU6IHRoaXMudHlwZSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICBdO1xuICAgIH0sXG59KTtcblxuZXhwb3J0IHsgQ29kZSwgQ29kZSBhcyBkZWZhdWx0LCBpbnB1dFJlZ2V4LCBwYXN0ZVJlZ2V4IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJNYXJrIiwibWVyZ2VBdHRyaWJ1dGVzIiwibWFya0lucHV0UnVsZSIsIm1hcmtQYXN0ZVJ1bGUiLCJpbnB1dFJlZ2V4IiwicGFzdGVSZWdleCIsIkNvZGUiLCJjcmVhdGUiLCJuYW1lIiwiYWRkT3B0aW9ucyIsIkhUTUxBdHRyaWJ1dGVzIiwiZXhjbHVkZXMiLCJjb2RlIiwiZXhpdGFibGUiLCJwYXJzZUhUTUwiLCJ0YWciLCJyZW5kZXJIVE1MIiwiX3JlZiIsIm9wdGlvbnMiLCJhZGRDb21tYW5kcyIsIl90aGlzIiwic2V0Q29kZSIsIl9yZWYyIiwiY29tbWFuZHMiLCJzZXRNYXJrIiwidG9nZ2xlQ29kZSIsIl9yZWYzIiwidG9nZ2xlTWFyayIsInVuc2V0Q29kZSIsIl9yZWY0IiwidW5zZXRNYXJrIiwiYWRkS2V5Ym9hcmRTaG9ydGN1dHMiLCJfdGhpczIiLCJNb2RFIiwiZWRpdG9yIiwiYWRkSW5wdXRSdWxlcyIsImZpbmQiLCJ0eXBlIiwiYWRkUGFzdGVSdWxlcyIsImRlZmF1bHQiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-code/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-document/dist/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@tiptap/extension-document/dist/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Document: () => (/* binding */ Document),\n/* harmony export */   \"default\": () => (/* binding */ Document)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\n\n/**\n * The default document node which represents the top level node of the editor.\n * @see https://tiptap.dev/api/nodes/document\n */\nvar Document = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({\n  name: 'doc',\n  topNode: true,\n  content: 'block+'\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tZG9jdW1lbnQvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBb0M7O0FBRXBDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBTUMsUUFBUSxHQUFHRCw4Q0FBSSxDQUFDRSxNQUFNLENBQUM7RUFDekJDLElBQUksRUFBRSxLQUFLO0VBQ1hDLE9BQU8sRUFBRSxJQUFJO0VBQ2JDLE9BQU8sRUFBRTtBQUNiLENBQUMsQ0FBQyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxAdGlwdGFwXFxleHRlbnNpb24tZG9jdW1lbnRcXGRpc3RcXGluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5vZGUgfSBmcm9tICdAdGlwdGFwL2NvcmUnO1xuXG4vKipcbiAqIFRoZSBkZWZhdWx0IGRvY3VtZW50IG5vZGUgd2hpY2ggcmVwcmVzZW50cyB0aGUgdG9wIGxldmVsIG5vZGUgb2YgdGhlIGVkaXRvci5cbiAqIEBzZWUgaHR0cHM6Ly90aXB0YXAuZGV2L2FwaS9ub2Rlcy9kb2N1bWVudFxuICovXG5jb25zdCBEb2N1bWVudCA9IE5vZGUuY3JlYXRlKHtcbiAgICBuYW1lOiAnZG9jJyxcbiAgICB0b3BOb2RlOiB0cnVlLFxuICAgIGNvbnRlbnQ6ICdibG9jaysnLFxufSk7XG5cbmV4cG9ydCB7IERvY3VtZW50LCBEb2N1bWVudCBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJOb2RlIiwiRG9jdW1lbnQiLCJjcmVhdGUiLCJuYW1lIiwidG9wTm9kZSIsImNvbnRlbnQiLCJkZWZhdWx0Il0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-document/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-dropcursor/dist/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tiptap/extension-dropcursor/dist/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Dropcursor: () => (/* binding */ Dropcursor),\n/* harmony export */   \"default\": () => (/* binding */ Dropcursor)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var _tiptap_pm_dropcursor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/pm/dropcursor */ \"(ssr)/./node_modules/@tiptap/pm/dropcursor/dist/index.js\");\n\n\n\n/**\n * This extension allows you to add a drop cursor to your editor.\n * A drop cursor is a line that appears when you drag and drop content\n * inbetween nodes.\n * @see https://tiptap.dev/api/extensions/dropcursor\n */\nvar Dropcursor = _tiptap_core__WEBPACK_IMPORTED_MODULE_1__.Extension.create({\n  name: 'dropCursor',\n  addOptions: function addOptions() {\n    return {\n      color: 'currentColor',\n      width: 1,\n      \"class\": undefined\n    };\n  },\n  addProseMirrorPlugins: function addProseMirrorPlugins() {\n    return [(0,_tiptap_pm_dropcursor__WEBPACK_IMPORTED_MODULE_0__.dropCursor)(this.options)];\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tZHJvcGN1cnNvci9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBeUM7QUFDVTs7QUFFbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBTUUsVUFBVSxHQUFHRixtREFBUyxDQUFDRyxNQUFNLENBQUM7RUFDaENDLElBQUksRUFBRSxZQUFZO0VBQ2xCQyxVQUFVLFdBQVZBLFVBQVVBLENBQUEsRUFBRztJQUNULE9BQU87TUFDSEMsS0FBSyxFQUFFLGNBQWM7TUFDckJDLEtBQUssRUFBRSxDQUFDO01BQ1IsU0FBT0M7SUFDWCxDQUFDO0VBQ0wsQ0FBQztFQUNEQyxxQkFBcUIsV0FBckJBLHFCQUFxQkEsQ0FBQSxFQUFHO0lBQ3BCLE9BQU8sQ0FDSFIsaUVBQVUsQ0FBQyxJQUFJLENBQUNTLE9BQU8sQ0FBQyxDQUMzQjtFQUNMO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXEB0aXB0YXBcXGV4dGVuc2lvbi1kcm9wY3Vyc29yXFxkaXN0XFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFeHRlbnNpb24gfSBmcm9tICdAdGlwdGFwL2NvcmUnO1xuaW1wb3J0IHsgZHJvcEN1cnNvciB9IGZyb20gJ0B0aXB0YXAvcG0vZHJvcGN1cnNvcic7XG5cbi8qKlxuICogVGhpcyBleHRlbnNpb24gYWxsb3dzIHlvdSB0byBhZGQgYSBkcm9wIGN1cnNvciB0byB5b3VyIGVkaXRvci5cbiAqIEEgZHJvcCBjdXJzb3IgaXMgYSBsaW5lIHRoYXQgYXBwZWFycyB3aGVuIHlvdSBkcmFnIGFuZCBkcm9wIGNvbnRlbnRcbiAqIGluYmV0d2VlbiBub2Rlcy5cbiAqIEBzZWUgaHR0cHM6Ly90aXB0YXAuZGV2L2FwaS9leHRlbnNpb25zL2Ryb3BjdXJzb3JcbiAqL1xuY29uc3QgRHJvcGN1cnNvciA9IEV4dGVuc2lvbi5jcmVhdGUoe1xuICAgIG5hbWU6ICdkcm9wQ3Vyc29yJyxcbiAgICBhZGRPcHRpb25zKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29sb3I6ICdjdXJyZW50Q29sb3InLFxuICAgICAgICAgICAgd2lkdGg6IDEsXG4gICAgICAgICAgICBjbGFzczogdW5kZWZpbmVkLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgYWRkUHJvc2VNaXJyb3JQbHVnaW5zKCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgZHJvcEN1cnNvcih0aGlzLm9wdGlvbnMpLFxuICAgICAgICBdO1xuICAgIH0sXG59KTtcblxuZXhwb3J0IHsgRHJvcGN1cnNvciwgRHJvcGN1cnNvciBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJFeHRlbnNpb24iLCJkcm9wQ3Vyc29yIiwiRHJvcGN1cnNvciIsImNyZWF0ZSIsIm5hbWUiLCJhZGRPcHRpb25zIiwiY29sb3IiLCJ3aWR0aCIsInVuZGVmaW5lZCIsImFkZFByb3NlTWlycm9yUGx1Z2lucyIsIm9wdGlvbnMiLCJkZWZhdWx0Il0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-dropcursor/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-floating-menu/dist/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tiptap/extension-floating-menu/dist/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FloatingMenu: () => (/* binding */ FloatingMenu),\n/* harmony export */   FloatingMenuPlugin: () => (/* binding */ FloatingMenuPlugin),\n/* harmony export */   FloatingMenuView: () => (/* binding */ FloatingMenuView),\n/* harmony export */   \"default\": () => (/* binding */ FloatingMenu)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/pm/state */ \"(ssr)/./node_modules/@tiptap/pm/state/dist/index.js\");\n/* harmony import */ var tippy_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tippy.js */ \"(ssr)/./node_modules/tippy.js/dist/tippy.esm.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\n\n\nvar FloatingMenuView = /*#__PURE__*/function () {\n  function FloatingMenuView(_ref) {\n    var _this = this;\n    var editor = _ref.editor,\n      element = _ref.element,\n      view = _ref.view,\n      _ref$tippyOptions = _ref.tippyOptions,\n      tippyOptions = _ref$tippyOptions === void 0 ? {} : _ref$tippyOptions,\n      shouldShow = _ref.shouldShow;\n    _classCallCheck(this, FloatingMenuView);\n    this.preventHide = false;\n    this.shouldShow = function (_ref2) {\n      var view = _ref2.view,\n        state = _ref2.state;\n      var selection = state.selection;\n      var $anchor = selection.$anchor,\n        empty = selection.empty;\n      var isRootDepth = $anchor.depth === 1;\n      var isEmptyTextBlock = $anchor.parent.isTextblock && !$anchor.parent.type.spec.code && !$anchor.parent.textContent && $anchor.parent.childCount === 0 && !_this.getTextContent($anchor.parent);\n      if (!view.hasFocus() || !empty || !isRootDepth || !isEmptyTextBlock || !_this.editor.isEditable) {\n        return false;\n      }\n      return true;\n    };\n    this.mousedownHandler = function () {\n      _this.preventHide = true;\n    };\n    this.focusHandler = function () {\n      // we use `setTimeout` to make sure `selection` is already updated\n      setTimeout(function () {\n        return _this.update(_this.editor.view);\n      });\n    };\n    this.blurHandler = function (_ref3) {\n      var event = _ref3.event;\n      var _a;\n      if (_this.preventHide) {\n        _this.preventHide = false;\n        return;\n      }\n      if ((event === null || event === void 0 ? void 0 : event.relatedTarget) && ((_a = _this.element.parentNode) === null || _a === void 0 ? void 0 : _a.contains(event.relatedTarget))) {\n        return;\n      }\n      if ((event === null || event === void 0 ? void 0 : event.relatedTarget) === _this.editor.view.dom) {\n        return;\n      }\n      _this.hide();\n    };\n    this.tippyBlurHandler = function (event) {\n      _this.blurHandler({\n        event: event\n      });\n    };\n    this.editor = editor;\n    this.element = element;\n    this.view = view;\n    if (shouldShow) {\n      this.shouldShow = shouldShow;\n    }\n    this.element.addEventListener('mousedown', this.mousedownHandler, {\n      capture: true\n    });\n    this.editor.on('focus', this.focusHandler);\n    this.editor.on('blur', this.blurHandler);\n    this.tippyOptions = tippyOptions;\n    // Detaches menu content from its current parent\n    this.element.remove();\n    this.element.style.visibility = 'visible';\n  }\n  return _createClass(FloatingMenuView, [{\n    key: \"getTextContent\",\n    value: function getTextContent(node) {\n      return (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_1__.getText)(node, {\n        textSerializers: (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_1__.getTextSerializersFromSchema)(this.editor.schema)\n      });\n    }\n  }, {\n    key: \"createTooltip\",\n    value: function createTooltip() {\n      var editorElement = this.editor.options.element;\n      var editorIsAttached = !!editorElement.parentElement;\n      if (this.tippy || !editorIsAttached) {\n        return;\n      }\n      this.tippy = (0,tippy_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(editorElement, _objectSpread({\n        duration: 0,\n        getReferenceClientRect: null,\n        content: this.element,\n        interactive: true,\n        trigger: 'manual',\n        placement: 'right',\n        hideOnClick: 'toggle'\n      }, this.tippyOptions));\n      // maybe we have to hide tippy on its own blur event as well\n      if (this.tippy.popper.firstChild) {\n        this.tippy.popper.firstChild.addEventListener('blur', this.tippyBlurHandler);\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update(view, oldState) {\n      var _a, _b, _c;\n      var state = view.state;\n      var doc = state.doc,\n        selection = state.selection;\n      var from = selection.from,\n        to = selection.to;\n      var isSame = oldState && oldState.doc.eq(doc) && oldState.selection.eq(selection);\n      if (isSame) {\n        return;\n      }\n      this.createTooltip();\n      var shouldShow = (_a = this.shouldShow) === null || _a === void 0 ? void 0 : _a.call(this, {\n        editor: this.editor,\n        view: view,\n        state: state,\n        oldState: oldState\n      });\n      if (!shouldShow) {\n        this.hide();\n        return;\n      }\n      (_b = this.tippy) === null || _b === void 0 ? void 0 : _b.setProps({\n        getReferenceClientRect: ((_c = this.tippyOptions) === null || _c === void 0 ? void 0 : _c.getReferenceClientRect) || function () {\n          return (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_1__.posToDOMRect)(view, from, to);\n        }\n      });\n      this.show();\n    }\n  }, {\n    key: \"show\",\n    value: function show() {\n      var _a;\n      (_a = this.tippy) === null || _a === void 0 ? void 0 : _a.show();\n    }\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      var _a;\n      (_a = this.tippy) === null || _a === void 0 ? void 0 : _a.hide();\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var _a, _b;\n      if ((_a = this.tippy) === null || _a === void 0 ? void 0 : _a.popper.firstChild) {\n        this.tippy.popper.firstChild.removeEventListener('blur', this.tippyBlurHandler);\n      }\n      (_b = this.tippy) === null || _b === void 0 ? void 0 : _b.destroy();\n      this.element.removeEventListener('mousedown', this.mousedownHandler, {\n        capture: true\n      });\n      this.editor.off('focus', this.focusHandler);\n      this.editor.off('blur', this.blurHandler);\n    }\n  }]);\n}();\nvar FloatingMenuPlugin = function FloatingMenuPlugin(options) {\n  return new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n    key: typeof options.pluginKey === 'string' ? new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey(options.pluginKey) : options.pluginKey,\n    view: function view(_view) {\n      return new FloatingMenuView(_objectSpread({\n        view: _view\n      }, options));\n    }\n  });\n};\n\n/**\n * This extension allows you to create a floating menu.\n * @see https://tiptap.dev/api/extensions/floating-menu\n */\nvar FloatingMenu = _tiptap_core__WEBPACK_IMPORTED_MODULE_1__.Extension.create({\n  name: 'floatingMenu',\n  addOptions: function addOptions() {\n    return {\n      element: null,\n      tippyOptions: {},\n      pluginKey: 'floatingMenu',\n      shouldShow: null\n    };\n  },\n  addProseMirrorPlugins: function addProseMirrorPlugins() {\n    if (!this.options.element) {\n      return [];\n    }\n    return [FloatingMenuPlugin({\n      pluginKey: this.options.pluginKey,\n      editor: this.editor,\n      element: this.options.element,\n      tippyOptions: this.options.tippyOptions,\n      shouldShow: this.options.shouldShow\n    })];\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-floating-menu/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-gapcursor/dist/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tiptap/extension-gapcursor/dist/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Gapcursor: () => (/* binding */ Gapcursor),\n/* harmony export */   \"default\": () => (/* binding */ Gapcursor)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var _tiptap_pm_gapcursor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/pm/gapcursor */ \"(ssr)/./node_modules/@tiptap/pm/gapcursor/dist/index.js\");\n\n\n\n/**\n * This extension allows you to add a gap cursor to your editor.\n * A gap cursor is a cursor that appears when you click on a place\n * where no content is present, for example inbetween nodes.\n * @see https://tiptap.dev/api/extensions/gapcursor\n */\nvar Gapcursor = _tiptap_core__WEBPACK_IMPORTED_MODULE_1__.Extension.create({\n  name: 'gapCursor',\n  addProseMirrorPlugins: function addProseMirrorPlugins() {\n    return [(0,_tiptap_pm_gapcursor__WEBPACK_IMPORTED_MODULE_0__.gapCursor)()];\n  },\n  extendNodeSchema: function extendNodeSchema(extension) {\n    var _a;\n    var context = {\n      name: extension.name,\n      options: extension.options,\n      storage: extension.storage\n    };\n    return {\n      allowGapCursor: (_a = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_1__.callOrReturn)((0,_tiptap_core__WEBPACK_IMPORTED_MODULE_1__.getExtensionField)(extension, 'allowGapCursor', context))) !== null && _a !== void 0 ? _a : null\n    };\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tZ2FwY3Vyc29yL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUEwRTtBQUN6Qjs7QUFFakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBTUksU0FBUyxHQUFHSixtREFBUyxDQUFDSyxNQUFNLENBQUM7RUFDL0JDLElBQUksRUFBRSxXQUFXO0VBQ2pCQyxxQkFBcUIsV0FBckJBLHFCQUFxQkEsQ0FBQSxFQUFHO0lBQ3BCLE9BQU8sQ0FDSEosK0RBQVMsQ0FBQyxDQUFDLENBQ2Q7RUFDTCxDQUFDO0VBQ0RLLGdCQUFnQixXQUFoQkEsZ0JBQWdCQSxDQUFDQyxTQUFTLEVBQUU7SUFDeEIsSUFBSUMsRUFBRTtJQUNOLElBQU1DLE9BQU8sR0FBRztNQUNaTCxJQUFJLEVBQUVHLFNBQVMsQ0FBQ0gsSUFBSTtNQUNwQk0sT0FBTyxFQUFFSCxTQUFTLENBQUNHLE9BQU87TUFDMUJDLE9BQU8sRUFBRUosU0FBUyxDQUFDSTtJQUN2QixDQUFDO0lBQ0QsT0FBTztNQUNIQyxjQUFjLEVBQUUsQ0FBQ0osRUFBRSxHQUFHVCwwREFBWSxDQUFDQywrREFBaUIsQ0FBQ08sU0FBUyxFQUFFLGdCQUFnQixFQUFFRSxPQUFPLENBQUMsQ0FBQyxNQUFNLElBQUksSUFBSUQsRUFBRSxLQUFLLEtBQUssQ0FBQyxHQUFHQSxFQUFFLEdBQUc7SUFDbEksQ0FBQztFQUNMO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXEB0aXB0YXBcXGV4dGVuc2lvbi1nYXBjdXJzb3JcXGRpc3RcXGluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV4dGVuc2lvbiwgY2FsbE9yUmV0dXJuLCBnZXRFeHRlbnNpb25GaWVsZCB9IGZyb20gJ0B0aXB0YXAvY29yZSc7XG5pbXBvcnQgeyBnYXBDdXJzb3IgfSBmcm9tICdAdGlwdGFwL3BtL2dhcGN1cnNvcic7XG5cbi8qKlxuICogVGhpcyBleHRlbnNpb24gYWxsb3dzIHlvdSB0byBhZGQgYSBnYXAgY3Vyc29yIHRvIHlvdXIgZWRpdG9yLlxuICogQSBnYXAgY3Vyc29yIGlzIGEgY3Vyc29yIHRoYXQgYXBwZWFycyB3aGVuIHlvdSBjbGljayBvbiBhIHBsYWNlXG4gKiB3aGVyZSBubyBjb250ZW50IGlzIHByZXNlbnQsIGZvciBleGFtcGxlIGluYmV0d2VlbiBub2Rlcy5cbiAqIEBzZWUgaHR0cHM6Ly90aXB0YXAuZGV2L2FwaS9leHRlbnNpb25zL2dhcGN1cnNvclxuICovXG5jb25zdCBHYXBjdXJzb3IgPSBFeHRlbnNpb24uY3JlYXRlKHtcbiAgICBuYW1lOiAnZ2FwQ3Vyc29yJyxcbiAgICBhZGRQcm9zZU1pcnJvclBsdWdpbnMoKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBnYXBDdXJzb3IoKSxcbiAgICAgICAgXTtcbiAgICB9LFxuICAgIGV4dGVuZE5vZGVTY2hlbWEoZXh0ZW5zaW9uKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3QgY29udGV4dCA9IHtcbiAgICAgICAgICAgIG5hbWU6IGV4dGVuc2lvbi5uYW1lLFxuICAgICAgICAgICAgb3B0aW9uczogZXh0ZW5zaW9uLm9wdGlvbnMsXG4gICAgICAgICAgICBzdG9yYWdlOiBleHRlbnNpb24uc3RvcmFnZSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFsbG93R2FwQ3Vyc29yOiAoX2EgPSBjYWxsT3JSZXR1cm4oZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnYWxsb3dHYXBDdXJzb3InLCBjb250ZXh0KSkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IG51bGwsXG4gICAgICAgIH07XG4gICAgfSxcbn0pO1xuXG5leHBvcnQgeyBHYXBjdXJzb3IsIEdhcGN1cnNvciBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJFeHRlbnNpb24iLCJjYWxsT3JSZXR1cm4iLCJnZXRFeHRlbnNpb25GaWVsZCIsImdhcEN1cnNvciIsIkdhcGN1cnNvciIsImNyZWF0ZSIsIm5hbWUiLCJhZGRQcm9zZU1pcnJvclBsdWdpbnMiLCJleHRlbmROb2RlU2NoZW1hIiwiZXh0ZW5zaW9uIiwiX2EiLCJjb250ZXh0Iiwib3B0aW9ucyIsInN0b3JhZ2UiLCJhbGxvd0dhcEN1cnNvciIsImRlZmF1bHQiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-gapcursor/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-hard-break/dist/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tiptap/extension-hard-break/dist/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HardBreak: () => (/* binding */ HardBreak),\n/* harmony export */   \"default\": () => (/* binding */ HardBreak)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\n\n/**\n * This extension allows you to insert hard breaks.\n * @see https://www.tiptap.dev/api/nodes/hard-break\n */\nvar HardBreak = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({\n  name: 'hardBreak',\n  addOptions: function addOptions() {\n    return {\n      keepMarks: true,\n      HTMLAttributes: {}\n    };\n  },\n  inline: true,\n  group: 'inline',\n  selectable: false,\n  linebreakReplacement: true,\n  parseHTML: function parseHTML() {\n    return [{\n      tag: 'br'\n    }];\n  },\n  renderHTML: function renderHTML(_ref) {\n    var HTMLAttributes = _ref.HTMLAttributes;\n    return ['br', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes)];\n  },\n  renderText: function renderText() {\n    return '\\n';\n  },\n  addCommands: function addCommands() {\n    var _this = this;\n    return {\n      setHardBreak: function setHardBreak() {\n        return function (_ref2) {\n          var commands = _ref2.commands,\n            chain = _ref2.chain,\n            state = _ref2.state,\n            editor = _ref2.editor;\n          return commands.first([function () {\n            return commands.exitCode();\n          }, function () {\n            return commands.command(function () {\n              var selection = state.selection,\n                storedMarks = state.storedMarks;\n              if (selection.$from.parent.type.spec.isolating) {\n                return false;\n              }\n              var keepMarks = _this.options.keepMarks;\n              var splittableMarks = editor.extensionManager.splittableMarks;\n              var marks = storedMarks || selection.$to.parentOffset && selection.$from.marks();\n              return chain().insertContent({\n                type: _this.name\n              }).command(function (_ref3) {\n                var tr = _ref3.tr,\n                  dispatch = _ref3.dispatch;\n                if (dispatch && marks && keepMarks) {\n                  var filteredMarks = marks.filter(function (mark) {\n                    return splittableMarks.includes(mark.type.name);\n                  });\n                  tr.ensureMarks(filteredMarks);\n                }\n                return true;\n              }).run();\n            });\n          }]);\n        };\n      }\n    };\n  },\n  addKeyboardShortcuts: function addKeyboardShortcuts() {\n    var _this2 = this;\n    return {\n      'Mod-Enter': function ModEnter() {\n        return _this2.editor.commands.setHardBreak();\n      },\n      'Shift-Enter': function ShiftEnter() {\n        return _this2.editor.commands.setHardBreak();\n      }\n    };\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24taGFyZC1icmVhay9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFxRDs7QUFFckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFNRSxTQUFTLEdBQUdGLDhDQUFJLENBQUNHLE1BQU0sQ0FBQztFQUMxQkMsSUFBSSxFQUFFLFdBQVc7RUFDakJDLFVBQVUsV0FBVkEsVUFBVUEsQ0FBQSxFQUFHO0lBQ1QsT0FBTztNQUNIQyxTQUFTLEVBQUUsSUFBSTtNQUNmQyxjQUFjLEVBQUUsQ0FBQztJQUNyQixDQUFDO0VBQ0wsQ0FBQztFQUNEQyxNQUFNLEVBQUUsSUFBSTtFQUNaQyxLQUFLLEVBQUUsUUFBUTtFQUNmQyxVQUFVLEVBQUUsS0FBSztFQUNqQkMsb0JBQW9CLEVBQUUsSUFBSTtFQUMxQkMsU0FBUyxXQUFUQSxTQUFTQSxDQUFBLEVBQUc7SUFDUixPQUFPLENBQ0g7TUFBRUMsR0FBRyxFQUFFO0lBQUssQ0FBQyxDQUNoQjtFQUNMLENBQUM7RUFDREMsVUFBVSxXQUFWQSxVQUFVQSxDQUFBQyxJQUFBLEVBQXFCO0lBQUEsSUFBbEJSLGNBQWMsR0FBQVEsSUFBQSxDQUFkUixjQUFjO0lBQ3ZCLE9BQU8sQ0FBQyxJQUFJLEVBQUVOLDZEQUFlLENBQUMsSUFBSSxDQUFDZSxPQUFPLENBQUNULGNBQWMsRUFBRUEsY0FBYyxDQUFDLENBQUM7RUFDL0UsQ0FBQztFQUNEVSxVQUFVLFdBQVZBLFVBQVVBLENBQUEsRUFBRztJQUNULE9BQU8sSUFBSTtFQUNmLENBQUM7RUFDREMsV0FBVyxXQUFYQSxXQUFXQSxDQUFBLEVBQUc7SUFBQSxJQUFBQyxLQUFBO0lBQ1YsT0FBTztNQUNIQyxZQUFZLEVBQUUsU0FBZEEsWUFBWUEsQ0FBQTtRQUFBLE9BQVEsVUFBQUMsS0FBQSxFQUF5QztVQUFBLElBQXRDQyxRQUFRLEdBQUFELEtBQUEsQ0FBUkMsUUFBUTtZQUFFQyxLQUFLLEdBQUFGLEtBQUEsQ0FBTEUsS0FBSztZQUFFQyxLQUFLLEdBQUFILEtBQUEsQ0FBTEcsS0FBSztZQUFFQyxNQUFNLEdBQUFKLEtBQUEsQ0FBTkksTUFBTTtVQUNqRCxPQUFPSCxRQUFRLENBQUNJLEtBQUssQ0FBQyxDQUNsQjtZQUFBLE9BQU1KLFFBQVEsQ0FBQ0ssUUFBUSxDQUFDLENBQUM7VUFBQSxHQUN6QjtZQUFBLE9BQU1MLFFBQVEsQ0FBQ00sT0FBTyxDQUFDLFlBQU07Y0FDekIsSUFBUUMsU0FBUyxHQUFrQkwsS0FBSyxDQUFoQ0ssU0FBUztnQkFBRUMsV0FBVyxHQUFLTixLQUFLLENBQXJCTSxXQUFXO2NBQzlCLElBQUlELFNBQVMsQ0FBQ0UsS0FBSyxDQUFDQyxNQUFNLENBQUNDLElBQUksQ0FBQ0MsSUFBSSxDQUFDQyxTQUFTLEVBQUU7Z0JBQzVDLE9BQU8sS0FBSztjQUNoQjtjQUNBLElBQVE3QixTQUFTLEdBQUthLEtBQUksQ0FBQ0gsT0FBTyxDQUExQlYsU0FBUztjQUNqQixJQUFROEIsZUFBZSxHQUFLWCxNQUFNLENBQUNZLGdCQUFnQixDQUEzQ0QsZUFBZTtjQUN2QixJQUFNRSxLQUFLLEdBQUdSLFdBQVcsSUFDakJELFNBQVMsQ0FBQ1UsR0FBRyxDQUFDQyxZQUFZLElBQUlYLFNBQVMsQ0FBQ0UsS0FBSyxDQUFDTyxLQUFLLENBQUMsQ0FBRTtjQUM5RCxPQUFPZixLQUFLLENBQUMsQ0FBQyxDQUNUa0IsYUFBYSxDQUFDO2dCQUFFUixJQUFJLEVBQUVkLEtBQUksQ0FBQ2Y7Y0FBSyxDQUFDLENBQUMsQ0FDbEN3QixPQUFPLENBQUMsVUFBQWMsS0FBQSxFQUFzQjtnQkFBQSxJQUFuQkMsRUFBRSxHQUFBRCxLQUFBLENBQUZDLEVBQUU7a0JBQUVDLFFBQVEsR0FBQUYsS0FBQSxDQUFSRSxRQUFRO2dCQUN4QixJQUFJQSxRQUFRLElBQUlOLEtBQUssSUFBSWhDLFNBQVMsRUFBRTtrQkFDaEMsSUFBTXVDLGFBQWEsR0FBR1AsS0FBSyxDQUN0QlEsTUFBTSxDQUFDLFVBQUFDLElBQUk7b0JBQUEsT0FBSVgsZUFBZSxDQUFDWSxRQUFRLENBQUNELElBQUksQ0FBQ2QsSUFBSSxDQUFDN0IsSUFBSSxDQUFDO2tCQUFBLEVBQUM7a0JBQzdEdUMsRUFBRSxDQUFDTSxXQUFXLENBQUNKLGFBQWEsQ0FBQztnQkFDakM7Z0JBQ0EsT0FBTyxJQUFJO2NBQ2YsQ0FBQyxDQUFDLENBQ0dLLEdBQUcsQ0FBQyxDQUFDO1lBQ2QsQ0FBQyxDQUFDO1VBQUEsRUFDTCxDQUFDO1FBQ04sQ0FBQztNQUFBO0lBQ0wsQ0FBQztFQUNMLENBQUM7RUFDREMsb0JBQW9CLFdBQXBCQSxvQkFBb0JBLENBQUEsRUFBRztJQUFBLElBQUFDLE1BQUE7SUFDbkIsT0FBTztNQUNILFdBQVcsRUFBRSxTQUFiQyxRQUFXQSxDQUFBO1FBQUEsT0FBUUQsTUFBSSxDQUFDM0IsTUFBTSxDQUFDSCxRQUFRLENBQUNGLFlBQVksQ0FBQyxDQUFDO01BQUE7TUFDdEQsYUFBYSxFQUFFLFNBQWZrQyxVQUFhQSxDQUFBO1FBQUEsT0FBUUYsTUFBSSxDQUFDM0IsTUFBTSxDQUFDSCxRQUFRLENBQUNGLFlBQVksQ0FBQyxDQUFDO01BQUE7SUFDNUQsQ0FBQztFQUNMO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXEB0aXB0YXBcXGV4dGVuc2lvbi1oYXJkLWJyZWFrXFxkaXN0XFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOb2RlLCBtZXJnZUF0dHJpYnV0ZXMgfSBmcm9tICdAdGlwdGFwL2NvcmUnO1xuXG4vKipcbiAqIFRoaXMgZXh0ZW5zaW9uIGFsbG93cyB5b3UgdG8gaW5zZXJ0IGhhcmQgYnJlYWtzLlxuICogQHNlZSBodHRwczovL3d3dy50aXB0YXAuZGV2L2FwaS9ub2Rlcy9oYXJkLWJyZWFrXG4gKi9cbmNvbnN0IEhhcmRCcmVhayA9IE5vZGUuY3JlYXRlKHtcbiAgICBuYW1lOiAnaGFyZEJyZWFrJyxcbiAgICBhZGRPcHRpb25zKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAga2VlcE1hcmtzOiB0cnVlLFxuICAgICAgICAgICAgSFRNTEF0dHJpYnV0ZXM6IHt9LFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgaW5saW5lOiB0cnVlLFxuICAgIGdyb3VwOiAnaW5saW5lJyxcbiAgICBzZWxlY3RhYmxlOiBmYWxzZSxcbiAgICBsaW5lYnJlYWtSZXBsYWNlbWVudDogdHJ1ZSxcbiAgICBwYXJzZUhUTUwoKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICB7IHRhZzogJ2JyJyB9LFxuICAgICAgICBdO1xuICAgIH0sXG4gICAgcmVuZGVySFRNTCh7IEhUTUxBdHRyaWJ1dGVzIH0pIHtcbiAgICAgICAgcmV0dXJuIFsnYnInLCBtZXJnZUF0dHJpYnV0ZXModGhpcy5vcHRpb25zLkhUTUxBdHRyaWJ1dGVzLCBIVE1MQXR0cmlidXRlcyldO1xuICAgIH0sXG4gICAgcmVuZGVyVGV4dCgpIHtcbiAgICAgICAgcmV0dXJuICdcXG4nO1xuICAgIH0sXG4gICAgYWRkQ29tbWFuZHMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzZXRIYXJkQnJlYWs6ICgpID0+ICh7IGNvbW1hbmRzLCBjaGFpbiwgc3RhdGUsIGVkaXRvciwgfSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb21tYW5kcy5maXJzdChbXG4gICAgICAgICAgICAgICAgICAgICgpID0+IGNvbW1hbmRzLmV4aXRDb2RlKCksXG4gICAgICAgICAgICAgICAgICAgICgpID0+IGNvbW1hbmRzLmNvbW1hbmQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBzZWxlY3Rpb24sIHN0b3JlZE1hcmtzIH0gPSBzdGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3Rpb24uJGZyb20ucGFyZW50LnR5cGUuc3BlYy5pc29sYXRpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7IGtlZXBNYXJrcyB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBzcGxpdHRhYmxlTWFya3MgfSA9IGVkaXRvci5leHRlbnNpb25NYW5hZ2VyO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWFya3MgPSBzdG9yZWRNYXJrc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IChzZWxlY3Rpb24uJHRvLnBhcmVudE9mZnNldCAmJiBzZWxlY3Rpb24uJGZyb20ubWFya3MoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2hhaW4oKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5pbnNlcnRDb250ZW50KHsgdHlwZTogdGhpcy5uYW1lIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNvbW1hbmQoKHsgdHIsIGRpc3BhdGNoIH0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGlzcGF0Y2ggJiYgbWFya3MgJiYga2VlcE1hcmtzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbHRlcmVkTWFya3MgPSBtYXJrc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihtYXJrID0+IHNwbGl0dGFibGVNYXJrcy5pbmNsdWRlcyhtYXJrLnR5cGUubmFtZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ci5lbnN1cmVNYXJrcyhmaWx0ZXJlZE1hcmtzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5ydW4oKTtcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgYWRkS2V5Ym9hcmRTaG9ydGN1dHMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnTW9kLUVudGVyJzogKCkgPT4gdGhpcy5lZGl0b3IuY29tbWFuZHMuc2V0SGFyZEJyZWFrKCksXG4gICAgICAgICAgICAnU2hpZnQtRW50ZXInOiAoKSA9PiB0aGlzLmVkaXRvci5jb21tYW5kcy5zZXRIYXJkQnJlYWsoKSxcbiAgICAgICAgfTtcbiAgICB9LFxufSk7XG5cbmV4cG9ydCB7IEhhcmRCcmVhaywgSGFyZEJyZWFrIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbIk5vZGUiLCJtZXJnZUF0dHJpYnV0ZXMiLCJIYXJkQnJlYWsiLCJjcmVhdGUiLCJuYW1lIiwiYWRkT3B0aW9ucyIsImtlZXBNYXJrcyIsIkhUTUxBdHRyaWJ1dGVzIiwiaW5saW5lIiwiZ3JvdXAiLCJzZWxlY3RhYmxlIiwibGluZWJyZWFrUmVwbGFjZW1lbnQiLCJwYXJzZUhUTUwiLCJ0YWciLCJyZW5kZXJIVE1MIiwiX3JlZiIsIm9wdGlvbnMiLCJyZW5kZXJUZXh0IiwiYWRkQ29tbWFuZHMiLCJfdGhpcyIsInNldEhhcmRCcmVhayIsIl9yZWYyIiwiY29tbWFuZHMiLCJjaGFpbiIsInN0YXRlIiwiZWRpdG9yIiwiZmlyc3QiLCJleGl0Q29kZSIsImNvbW1hbmQiLCJzZWxlY3Rpb24iLCJzdG9yZWRNYXJrcyIsIiRmcm9tIiwicGFyZW50IiwidHlwZSIsInNwZWMiLCJpc29sYXRpbmciLCJzcGxpdHRhYmxlTWFya3MiLCJleHRlbnNpb25NYW5hZ2VyIiwibWFya3MiLCIkdG8iLCJwYXJlbnRPZmZzZXQiLCJpbnNlcnRDb250ZW50IiwiX3JlZjMiLCJ0ciIsImRpc3BhdGNoIiwiZmlsdGVyZWRNYXJrcyIsImZpbHRlciIsIm1hcmsiLCJpbmNsdWRlcyIsImVuc3VyZU1hcmtzIiwicnVuIiwiYWRkS2V5Ym9hcmRTaG9ydGN1dHMiLCJfdGhpczIiLCJNb2RFbnRlciIsIlNoaWZ0RW50ZXIiLCJkZWZhdWx0Il0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-hard-break/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-heading/dist/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tiptap/extension-heading/dist/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Heading: () => (/* binding */ Heading),\n/* harmony export */   \"default\": () => (/* binding */ Heading)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\n\n/**\n * This extension allows you to create headings.\n * @see https://www.tiptap.dev/api/nodes/heading\n */\nvar Heading = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({\n  name: 'heading',\n  addOptions: function addOptions() {\n    return {\n      levels: [1, 2, 3, 4, 5, 6],\n      HTMLAttributes: {}\n    };\n  },\n  content: 'inline*',\n  group: 'block',\n  defining: true,\n  addAttributes: function addAttributes() {\n    return {\n      level: {\n        \"default\": 1,\n        rendered: false\n      }\n    };\n  },\n  parseHTML: function parseHTML() {\n    return this.options.levels.map(function (level) {\n      return {\n        tag: \"h\".concat(level),\n        attrs: {\n          level: level\n        }\n      };\n    });\n  },\n  renderHTML: function renderHTML(_ref) {\n    var node = _ref.node,\n      HTMLAttributes = _ref.HTMLAttributes;\n    var hasLevel = this.options.levels.includes(node.attrs.level);\n    var level = hasLevel ? node.attrs.level : this.options.levels[0];\n    return [\"h\".concat(level), (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands: function addCommands() {\n    var _this = this;\n    return {\n      setHeading: function setHeading(attributes) {\n        return function (_ref2) {\n          var commands = _ref2.commands;\n          if (!_this.options.levels.includes(attributes.level)) {\n            return false;\n          }\n          return commands.setNode(_this.name, attributes);\n        };\n      },\n      toggleHeading: function toggleHeading(attributes) {\n        return function (_ref3) {\n          var commands = _ref3.commands;\n          if (!_this.options.levels.includes(attributes.level)) {\n            return false;\n          }\n          return commands.toggleNode(_this.name, 'paragraph', attributes);\n        };\n      }\n    };\n  },\n  addKeyboardShortcuts: function addKeyboardShortcuts() {\n    var _this2 = this;\n    return this.options.levels.reduce(function (items, level) {\n      return _objectSpread(_objectSpread({}, items), _defineProperty({}, \"Mod-Alt-\".concat(level), function ModAlt() {\n        return _this2.editor.commands.toggleHeading({\n          level: level\n        });\n      }));\n    }, {});\n  },\n  addInputRules: function addInputRules() {\n    var _this3 = this;\n    return this.options.levels.map(function (level) {\n      return (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.textblockTypeInputRule)({\n        find: new RegExp(\"^(#{\".concat(Math.min.apply(Math, _toConsumableArray(_this3.options.levels)), \",\").concat(level, \"})\\\\s$\")),\n        type: _this3.type,\n        getAttributes: {\n          level: level\n        }\n      });\n    });\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24taGVhZGluZy9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUE2RTs7QUFFN0U7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFNRyxPQUFPLEdBQUdILDhDQUFJLENBQUNJLE1BQU0sQ0FBQztFQUN4QkMsSUFBSSxFQUFFLFNBQVM7RUFDZkMsVUFBVSxXQUFWQSxVQUFVQSxDQUFBLEVBQUc7SUFDVCxPQUFPO01BQ0hDLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO01BQzFCQyxjQUFjLEVBQUUsQ0FBQztJQUNyQixDQUFDO0VBQ0wsQ0FBQztFQUNEQyxPQUFPLEVBQUUsU0FBUztFQUNsQkMsS0FBSyxFQUFFLE9BQU87RUFDZEMsUUFBUSxFQUFFLElBQUk7RUFDZEMsYUFBYSxXQUFiQSxhQUFhQSxDQUFBLEVBQUc7SUFDWixPQUFPO01BQ0hDLEtBQUssRUFBRTtRQUNILFdBQVMsQ0FBQztRQUNWQyxRQUFRLEVBQUU7TUFDZDtJQUNKLENBQUM7RUFDTCxDQUFDO0VBQ0RDLFNBQVMsV0FBVEEsU0FBU0EsQ0FBQSxFQUFHO0lBQ1IsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ1QsTUFBTSxDQUNyQlUsR0FBRyxDQUFDLFVBQUNKLEtBQUs7TUFBQSxPQUFNO1FBQ2pCSyxHQUFHLE1BQUFDLE1BQUEsQ0FBTU4sS0FBSyxDQUFFO1FBQ2hCTyxLQUFLLEVBQUU7VUFBRVAsS0FBSyxFQUFMQTtRQUFNO01BQ25CLENBQUM7SUFBQSxDQUFDLENBQUM7RUFDUCxDQUFDO0VBQ0RRLFVBQVUsV0FBVkEsVUFBVUEsQ0FBQUMsSUFBQSxFQUEyQjtJQUFBLElBQXhCQyxJQUFJLEdBQUFELElBQUEsQ0FBSkMsSUFBSTtNQUFFZixjQUFjLEdBQUFjLElBQUEsQ0FBZGQsY0FBYztJQUM3QixJQUFNZ0IsUUFBUSxHQUFHLElBQUksQ0FBQ1IsT0FBTyxDQUFDVCxNQUFNLENBQUNrQixRQUFRLENBQUNGLElBQUksQ0FBQ0gsS0FBSyxDQUFDUCxLQUFLLENBQUM7SUFDL0QsSUFBTUEsS0FBSyxHQUFHVyxRQUFRLEdBQ2hCRCxJQUFJLENBQUNILEtBQUssQ0FBQ1AsS0FBSyxHQUNoQixJQUFJLENBQUNHLE9BQU8sQ0FBQ1QsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUM1QixPQUFPLEtBQUFZLE1BQUEsQ0FBS04sS0FBSyxHQUFJWiw2REFBZSxDQUFDLElBQUksQ0FBQ2UsT0FBTyxDQUFDUixjQUFjLEVBQUVBLGNBQWMsQ0FBQyxFQUFFLENBQUMsQ0FBQztFQUN6RixDQUFDO0VBQ0RrQixXQUFXLFdBQVhBLFdBQVdBLENBQUEsRUFBRztJQUFBLElBQUFDLEtBQUE7SUFDVixPQUFPO01BQ0hDLFVBQVUsRUFBRSxTQUFaQSxVQUFVQSxDQUFFQyxVQUFVO1FBQUEsT0FBSSxVQUFBQyxLQUFBLEVBQWtCO1VBQUEsSUFBZkMsUUFBUSxHQUFBRCxLQUFBLENBQVJDLFFBQVE7VUFDakMsSUFBSSxDQUFDSixLQUFJLENBQUNYLE9BQU8sQ0FBQ1QsTUFBTSxDQUFDa0IsUUFBUSxDQUFDSSxVQUFVLENBQUNoQixLQUFLLENBQUMsRUFBRTtZQUNqRCxPQUFPLEtBQUs7VUFDaEI7VUFDQSxPQUFPa0IsUUFBUSxDQUFDQyxPQUFPLENBQUNMLEtBQUksQ0FBQ3RCLElBQUksRUFBRXdCLFVBQVUsQ0FBQztRQUNsRCxDQUFDO01BQUE7TUFDREksYUFBYSxFQUFFLFNBQWZBLGFBQWFBLENBQUVKLFVBQVU7UUFBQSxPQUFJLFVBQUFLLEtBQUEsRUFBa0I7VUFBQSxJQUFmSCxRQUFRLEdBQUFHLEtBQUEsQ0FBUkgsUUFBUTtVQUNwQyxJQUFJLENBQUNKLEtBQUksQ0FBQ1gsT0FBTyxDQUFDVCxNQUFNLENBQUNrQixRQUFRLENBQUNJLFVBQVUsQ0FBQ2hCLEtBQUssQ0FBQyxFQUFFO1lBQ2pELE9BQU8sS0FBSztVQUNoQjtVQUNBLE9BQU9rQixRQUFRLENBQUNJLFVBQVUsQ0FBQ1IsS0FBSSxDQUFDdEIsSUFBSSxFQUFFLFdBQVcsRUFBRXdCLFVBQVUsQ0FBQztRQUNsRSxDQUFDO01BQUE7SUFDTCxDQUFDO0VBQ0wsQ0FBQztFQUNETyxvQkFBb0IsV0FBcEJBLG9CQUFvQkEsQ0FBQSxFQUFHO0lBQUEsSUFBQUMsTUFBQTtJQUNuQixPQUFPLElBQUksQ0FBQ3JCLE9BQU8sQ0FBQ1QsTUFBTSxDQUFDK0IsTUFBTSxDQUFDLFVBQUNDLEtBQUssRUFBRTFCLEtBQUs7TUFBQSxPQUFBMkIsYUFBQSxDQUFBQSxhQUFBLEtBQ3hDRCxLQUFLLEdBQUFFLGVBQUEsZ0JBQUF0QixNQUFBLENBRVFOLEtBQUssR0FBSyxTQUFyQjZCLE1BQWtCQSxDQUFBO1FBQUEsT0FBU0wsTUFBSSxDQUFDTSxNQUFNLENBQUNaLFFBQVEsQ0FBQ0UsYUFBYSxDQUFDO1VBQUVwQixLQUFLLEVBQUxBO1FBQU0sQ0FBQyxDQUFDO01BQUE7SUFBQSxDQUUvRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0VBQ1gsQ0FBQztFQUNEK0IsYUFBYSxXQUFiQSxhQUFhQSxDQUFBLEVBQUc7SUFBQSxJQUFBQyxNQUFBO0lBQ1osT0FBTyxJQUFJLENBQUM3QixPQUFPLENBQUNULE1BQU0sQ0FBQ1UsR0FBRyxDQUFDLFVBQUFKLEtBQUssRUFBSTtNQUNwQyxPQUFPWCxvRUFBc0IsQ0FBQztRQUMxQjRDLElBQUksRUFBRSxJQUFJQyxNQUFNLFFBQUE1QixNQUFBLENBQVE2QixJQUFJLENBQUNDLEdBQUcsQ0FBQUMsS0FBQSxDQUFSRixJQUFJLEVBQUFHLGtCQUFBLENBQVFOLE1BQUksQ0FBQzdCLE9BQU8sQ0FBQ1QsTUFBTSxFQUFDLE9BQUFZLE1BQUEsQ0FBSU4sS0FBSyxXQUFRLENBQUM7UUFDMUV1QyxJQUFJLEVBQUVQLE1BQUksQ0FBQ08sSUFBSTtRQUNmQyxhQUFhLEVBQUU7VUFDWHhDLEtBQUssRUFBTEE7UUFDSjtNQUNKLENBQUMsQ0FBQztJQUNOLENBQUMsQ0FBQztFQUNOO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXEB0aXB0YXBcXGV4dGVuc2lvbi1oZWFkaW5nXFxkaXN0XFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOb2RlLCBtZXJnZUF0dHJpYnV0ZXMsIHRleHRibG9ja1R5cGVJbnB1dFJ1bGUgfSBmcm9tICdAdGlwdGFwL2NvcmUnO1xuXG4vKipcbiAqIFRoaXMgZXh0ZW5zaW9uIGFsbG93cyB5b3UgdG8gY3JlYXRlIGhlYWRpbmdzLlxuICogQHNlZSBodHRwczovL3d3dy50aXB0YXAuZGV2L2FwaS9ub2Rlcy9oZWFkaW5nXG4gKi9cbmNvbnN0IEhlYWRpbmcgPSBOb2RlLmNyZWF0ZSh7XG4gICAgbmFtZTogJ2hlYWRpbmcnLFxuICAgIGFkZE9wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsZXZlbHM6IFsxLCAyLCAzLCA0LCA1LCA2XSxcbiAgICAgICAgICAgIEhUTUxBdHRyaWJ1dGVzOiB7fSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIGNvbnRlbnQ6ICdpbmxpbmUqJyxcbiAgICBncm91cDogJ2Jsb2NrJyxcbiAgICBkZWZpbmluZzogdHJ1ZSxcbiAgICBhZGRBdHRyaWJ1dGVzKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGV2ZWw6IHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiAxLFxuICAgICAgICAgICAgICAgIHJlbmRlcmVkOiBmYWxzZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBwYXJzZUhUTUwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMubGV2ZWxzXG4gICAgICAgICAgICAubWFwKChsZXZlbCkgPT4gKHtcbiAgICAgICAgICAgIHRhZzogYGgke2xldmVsfWAsXG4gICAgICAgICAgICBhdHRyczogeyBsZXZlbCB9LFxuICAgICAgICB9KSk7XG4gICAgfSxcbiAgICByZW5kZXJIVE1MKHsgbm9kZSwgSFRNTEF0dHJpYnV0ZXMgfSkge1xuICAgICAgICBjb25zdCBoYXNMZXZlbCA9IHRoaXMub3B0aW9ucy5sZXZlbHMuaW5jbHVkZXMobm9kZS5hdHRycy5sZXZlbCk7XG4gICAgICAgIGNvbnN0IGxldmVsID0gaGFzTGV2ZWxcbiAgICAgICAgICAgID8gbm9kZS5hdHRycy5sZXZlbFxuICAgICAgICAgICAgOiB0aGlzLm9wdGlvbnMubGV2ZWxzWzBdO1xuICAgICAgICByZXR1cm4gW2BoJHtsZXZlbH1gLCBtZXJnZUF0dHJpYnV0ZXModGhpcy5vcHRpb25zLkhUTUxBdHRyaWJ1dGVzLCBIVE1MQXR0cmlidXRlcyksIDBdO1xuICAgIH0sXG4gICAgYWRkQ29tbWFuZHMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzZXRIZWFkaW5nOiBhdHRyaWJ1dGVzID0+ICh7IGNvbW1hbmRzIH0pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5sZXZlbHMuaW5jbHVkZXMoYXR0cmlidXRlcy5sZXZlbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWFuZHMuc2V0Tm9kZSh0aGlzLm5hbWUsIGF0dHJpYnV0ZXMpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRvZ2dsZUhlYWRpbmc6IGF0dHJpYnV0ZXMgPT4gKHsgY29tbWFuZHMgfSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLmxldmVscy5pbmNsdWRlcyhhdHRyaWJ1dGVzLmxldmVsKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBjb21tYW5kcy50b2dnbGVOb2RlKHRoaXMubmFtZSwgJ3BhcmFncmFwaCcsIGF0dHJpYnV0ZXMpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIGFkZEtleWJvYXJkU2hvcnRjdXRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmxldmVscy5yZWR1Y2UoKGl0ZW1zLCBsZXZlbCkgPT4gKHtcbiAgICAgICAgICAgIC4uLml0ZW1zLFxuICAgICAgICAgICAgLi4ue1xuICAgICAgICAgICAgICAgIFtgTW9kLUFsdC0ke2xldmVsfWBdOiAoKSA9PiB0aGlzLmVkaXRvci5jb21tYW5kcy50b2dnbGVIZWFkaW5nKHsgbGV2ZWwgfSksXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KSwge30pO1xuICAgIH0sXG4gICAgYWRkSW5wdXRSdWxlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5sZXZlbHMubWFwKGxldmVsID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0ZXh0YmxvY2tUeXBlSW5wdXRSdWxlKHtcbiAgICAgICAgICAgICAgICBmaW5kOiBuZXcgUmVnRXhwKGBeKCN7JHtNYXRoLm1pbiguLi50aGlzLm9wdGlvbnMubGV2ZWxzKX0sJHtsZXZlbH19KVxcXFxzJGApLFxuICAgICAgICAgICAgICAgIHR5cGU6IHRoaXMudHlwZSxcbiAgICAgICAgICAgICAgICBnZXRBdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgICAgICAgICAgIGxldmVsLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSxcbn0pO1xuXG5leHBvcnQgeyBIZWFkaW5nLCBIZWFkaW5nIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbIk5vZGUiLCJtZXJnZUF0dHJpYnV0ZXMiLCJ0ZXh0YmxvY2tUeXBlSW5wdXRSdWxlIiwiSGVhZGluZyIsImNyZWF0ZSIsIm5hbWUiLCJhZGRPcHRpb25zIiwibGV2ZWxzIiwiSFRNTEF0dHJpYnV0ZXMiLCJjb250ZW50IiwiZ3JvdXAiLCJkZWZpbmluZyIsImFkZEF0dHJpYnV0ZXMiLCJsZXZlbCIsInJlbmRlcmVkIiwicGFyc2VIVE1MIiwib3B0aW9ucyIsIm1hcCIsInRhZyIsImNvbmNhdCIsImF0dHJzIiwicmVuZGVySFRNTCIsIl9yZWYiLCJub2RlIiwiaGFzTGV2ZWwiLCJpbmNsdWRlcyIsImFkZENvbW1hbmRzIiwiX3RoaXMiLCJzZXRIZWFkaW5nIiwiYXR0cmlidXRlcyIsIl9yZWYyIiwiY29tbWFuZHMiLCJzZXROb2RlIiwidG9nZ2xlSGVhZGluZyIsIl9yZWYzIiwidG9nZ2xlTm9kZSIsImFkZEtleWJvYXJkU2hvcnRjdXRzIiwiX3RoaXMyIiwicmVkdWNlIiwiaXRlbXMiLCJfb2JqZWN0U3ByZWFkIiwiX2RlZmluZVByb3BlcnR5IiwiTW9kQWx0IiwiZWRpdG9yIiwiYWRkSW5wdXRSdWxlcyIsIl90aGlzMyIsImZpbmQiLCJSZWdFeHAiLCJNYXRoIiwibWluIiwiYXBwbHkiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJ0eXBlIiwiZ2V0QXR0cmlidXRlcyIsImRlZmF1bHQiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-heading/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-highlight/dist/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tiptap/extension-highlight/dist/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Highlight: () => (/* binding */ Highlight),\n/* harmony export */   \"default\": () => (/* binding */ Highlight),\n/* harmony export */   inputRegex: () => (/* binding */ inputRegex),\n/* harmony export */   pasteRegex: () => (/* binding */ pasteRegex)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\n\n/**\n * Matches a highlight to a ==highlight== on input.\n */\nvar inputRegex = /(?:^|\\s)(==(?!\\s+==)((?:[^=]+))==(?!\\s+==))$/;\n/**\n * Matches a highlight to a ==highlight== on paste.\n */\nvar pasteRegex = /(?:^|\\s)(==(?!\\s+==)((?:[^=]+))==(?!\\s+==))/g;\n/**\n * This extension allows you to highlight text.\n * @see https://www.tiptap.dev/api/marks/highlight\n */\nvar Highlight = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Mark.create({\n  name: 'highlight',\n  addOptions: function addOptions() {\n    return {\n      multicolor: false,\n      HTMLAttributes: {}\n    };\n  },\n  addAttributes: function addAttributes() {\n    if (!this.options.multicolor) {\n      return {};\n    }\n    return {\n      color: {\n        \"default\": null,\n        parseHTML: function parseHTML(element) {\n          return element.getAttribute('data-color') || element.style.backgroundColor;\n        },\n        renderHTML: function renderHTML(attributes) {\n          if (!attributes.color) {\n            return {};\n          }\n          return {\n            'data-color': attributes.color,\n            style: \"background-color: \".concat(attributes.color, \"; color: inherit\")\n          };\n        }\n      }\n    };\n  },\n  parseHTML: function parseHTML() {\n    return [{\n      tag: 'mark'\n    }];\n  },\n  renderHTML: function renderHTML(_ref) {\n    var HTMLAttributes = _ref.HTMLAttributes;\n    return ['mark', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands: function addCommands() {\n    var _this = this;\n    return {\n      setHighlight: function setHighlight(attributes) {\n        return function (_ref2) {\n          var commands = _ref2.commands;\n          return commands.setMark(_this.name, attributes);\n        };\n      },\n      toggleHighlight: function toggleHighlight(attributes) {\n        return function (_ref3) {\n          var commands = _ref3.commands;\n          return commands.toggleMark(_this.name, attributes);\n        };\n      },\n      unsetHighlight: function unsetHighlight() {\n        return function (_ref4) {\n          var commands = _ref4.commands;\n          return commands.unsetMark(_this.name);\n        };\n      }\n    };\n  },\n  addKeyboardShortcuts: function addKeyboardShortcuts() {\n    var _this2 = this;\n    return {\n      'Mod-Shift-h': function ModShiftH() {\n        return _this2.editor.commands.toggleHighlight();\n      }\n    };\n  },\n  addInputRules: function addInputRules() {\n    return [(0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markInputRule)({\n      find: inputRegex,\n      type: this.type\n    })];\n  },\n  addPasteRules: function addPasteRules() {\n    return [(0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markPasteRule)({\n      find: pasteRegex,\n      type: this.type\n    })];\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24taGlnaGxpZ2h0L2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBbUY7O0FBRW5GO0FBQ0E7QUFDQTtBQUNBLElBQU1JLFVBQVUsR0FBRyw4Q0FBOEM7QUFDakU7QUFDQTtBQUNBO0FBQ0EsSUFBTUMsVUFBVSxHQUFHLDhDQUE4QztBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQU1DLFNBQVMsR0FBR04sOENBQUksQ0FBQ08sTUFBTSxDQUFDO0VBQzFCQyxJQUFJLEVBQUUsV0FBVztFQUNqQkMsVUFBVSxXQUFWQSxVQUFVQSxDQUFBLEVBQUc7SUFDVCxPQUFPO01BQ0hDLFVBQVUsRUFBRSxLQUFLO01BQ2pCQyxjQUFjLEVBQUUsQ0FBQztJQUNyQixDQUFDO0VBQ0wsQ0FBQztFQUNEQyxhQUFhLFdBQWJBLGFBQWFBLENBQUEsRUFBRztJQUNaLElBQUksQ0FBQyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0gsVUFBVSxFQUFFO01BQzFCLE9BQU8sQ0FBQyxDQUFDO0lBQ2I7SUFDQSxPQUFPO01BQ0hJLEtBQUssRUFBRTtRQUNILFdBQVMsSUFBSTtRQUNiQyxTQUFTLEVBQUUsU0FBWEEsU0FBU0EsQ0FBRUMsT0FBTztVQUFBLE9BQUlBLE9BQU8sQ0FBQ0MsWUFBWSxDQUFDLFlBQVksQ0FBQyxJQUFJRCxPQUFPLENBQUNFLEtBQUssQ0FBQ0MsZUFBZTtRQUFBO1FBQ3pGQyxVQUFVLEVBQUUsU0FBWkEsVUFBVUEsQ0FBRUMsVUFBVSxFQUFJO1VBQ3RCLElBQUksQ0FBQ0EsVUFBVSxDQUFDUCxLQUFLLEVBQUU7WUFDbkIsT0FBTyxDQUFDLENBQUM7VUFDYjtVQUNBLE9BQU87WUFDSCxZQUFZLEVBQUVPLFVBQVUsQ0FBQ1AsS0FBSztZQUM5QkksS0FBSyx1QkFBQUksTUFBQSxDQUF1QkQsVUFBVSxDQUFDUCxLQUFLO1VBQ2hELENBQUM7UUFDTDtNQUNKO0lBQ0osQ0FBQztFQUNMLENBQUM7RUFDREMsU0FBUyxXQUFUQSxTQUFTQSxDQUFBLEVBQUc7SUFDUixPQUFPLENBQ0g7TUFDSVEsR0FBRyxFQUFFO0lBQ1QsQ0FBQyxDQUNKO0VBQ0wsQ0FBQztFQUNESCxVQUFVLFdBQVZBLFVBQVVBLENBQUFJLElBQUEsRUFBcUI7SUFBQSxJQUFsQmIsY0FBYyxHQUFBYSxJQUFBLENBQWRiLGNBQWM7SUFDdkIsT0FBTyxDQUFDLE1BQU0sRUFBRVYsNkRBQWUsQ0FBQyxJQUFJLENBQUNZLE9BQU8sQ0FBQ0YsY0FBYyxFQUFFQSxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7RUFDcEYsQ0FBQztFQUNEYyxXQUFXLFdBQVhBLFdBQVdBLENBQUEsRUFBRztJQUFBLElBQUFDLEtBQUE7SUFDVixPQUFPO01BQ0hDLFlBQVksRUFBRSxTQUFkQSxZQUFZQSxDQUFFTixVQUFVO1FBQUEsT0FBSSxVQUFBTyxLQUFBLEVBQWtCO1VBQUEsSUFBZkMsUUFBUSxHQUFBRCxLQUFBLENBQVJDLFFBQVE7VUFDbkMsT0FBT0EsUUFBUSxDQUFDQyxPQUFPLENBQUNKLEtBQUksQ0FBQ2xCLElBQUksRUFBRWEsVUFBVSxDQUFDO1FBQ2xELENBQUM7TUFBQTtNQUNEVSxlQUFlLEVBQUUsU0FBakJBLGVBQWVBLENBQUVWLFVBQVU7UUFBQSxPQUFJLFVBQUFXLEtBQUEsRUFBa0I7VUFBQSxJQUFmSCxRQUFRLEdBQUFHLEtBQUEsQ0FBUkgsUUFBUTtVQUN0QyxPQUFPQSxRQUFRLENBQUNJLFVBQVUsQ0FBQ1AsS0FBSSxDQUFDbEIsSUFBSSxFQUFFYSxVQUFVLENBQUM7UUFDckQsQ0FBQztNQUFBO01BQ0RhLGNBQWMsRUFBRSxTQUFoQkEsY0FBY0EsQ0FBQTtRQUFBLE9BQVEsVUFBQUMsS0FBQSxFQUFrQjtVQUFBLElBQWZOLFFBQVEsR0FBQU0sS0FBQSxDQUFSTixRQUFRO1VBQzdCLE9BQU9BLFFBQVEsQ0FBQ08sU0FBUyxDQUFDVixLQUFJLENBQUNsQixJQUFJLENBQUM7UUFDeEMsQ0FBQztNQUFBO0lBQ0wsQ0FBQztFQUNMLENBQUM7RUFDRDZCLG9CQUFvQixXQUFwQkEsb0JBQW9CQSxDQUFBLEVBQUc7SUFBQSxJQUFBQyxNQUFBO0lBQ25CLE9BQU87TUFDSCxhQUFhLEVBQUUsU0FBZkMsU0FBYUEsQ0FBQTtRQUFBLE9BQVFELE1BQUksQ0FBQ0UsTUFBTSxDQUFDWCxRQUFRLENBQUNFLGVBQWUsQ0FBQyxDQUFDO01BQUE7SUFDL0QsQ0FBQztFQUNMLENBQUM7RUFDRFUsYUFBYSxXQUFiQSxhQUFhQSxDQUFBLEVBQUc7SUFDWixPQUFPLENBQ0h2QywyREFBYSxDQUFDO01BQ1Z3QyxJQUFJLEVBQUV0QyxVQUFVO01BQ2hCdUMsSUFBSSxFQUFFLElBQUksQ0FBQ0E7SUFDZixDQUFDLENBQUMsQ0FDTDtFQUNMLENBQUM7RUFDREMsYUFBYSxXQUFiQSxhQUFhQSxDQUFBLEVBQUc7SUFDWixPQUFPLENBQ0h6QywyREFBYSxDQUFDO01BQ1Z1QyxJQUFJLEVBQUVyQyxVQUFVO01BQ2hCc0MsSUFBSSxFQUFFLElBQUksQ0FBQ0E7SUFDZixDQUFDLENBQUMsQ0FDTDtFQUNMO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXEB0aXB0YXBcXGV4dGVuc2lvbi1oaWdobGlnaHRcXGRpc3RcXGluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1hcmssIG1lcmdlQXR0cmlidXRlcywgbWFya0lucHV0UnVsZSwgbWFya1Bhc3RlUnVsZSB9IGZyb20gJ0B0aXB0YXAvY29yZSc7XG5cbi8qKlxuICogTWF0Y2hlcyBhIGhpZ2hsaWdodCB0byBhID09aGlnaGxpZ2h0PT0gb24gaW5wdXQuXG4gKi9cbmNvbnN0IGlucHV0UmVnZXggPSAvKD86XnxcXHMpKD09KD8hXFxzKz09KSgoPzpbXj1dKykpPT0oPyFcXHMrPT0pKSQvO1xuLyoqXG4gKiBNYXRjaGVzIGEgaGlnaGxpZ2h0IHRvIGEgPT1oaWdobGlnaHQ9PSBvbiBwYXN0ZS5cbiAqL1xuY29uc3QgcGFzdGVSZWdleCA9IC8oPzpefFxccykoPT0oPyFcXHMrPT0pKCg/OltePV0rKSk9PSg/IVxccys9PSkpL2c7XG4vKipcbiAqIFRoaXMgZXh0ZW5zaW9uIGFsbG93cyB5b3UgdG8gaGlnaGxpZ2h0IHRleHQuXG4gKiBAc2VlIGh0dHBzOi8vd3d3LnRpcHRhcC5kZXYvYXBpL21hcmtzL2hpZ2hsaWdodFxuICovXG5jb25zdCBIaWdobGlnaHQgPSBNYXJrLmNyZWF0ZSh7XG4gICAgbmFtZTogJ2hpZ2hsaWdodCcsXG4gICAgYWRkT3B0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG11bHRpY29sb3I6IGZhbHNlLFxuICAgICAgICAgICAgSFRNTEF0dHJpYnV0ZXM6IHt9LFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgYWRkQXR0cmlidXRlcygpIHtcbiAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMubXVsdGljb2xvcikge1xuICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjb2xvcjoge1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgICAgICAgICAgICAgcGFyc2VIVE1MOiBlbGVtZW50ID0+IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbG9yJykgfHwgZWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICAgICAgcmVuZGVySFRNTDogYXR0cmlidXRlcyA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghYXR0cmlidXRlcy5jb2xvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnZGF0YS1jb2xvcic6IGF0dHJpYnV0ZXMuY29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogYGJhY2tncm91bmQtY29sb3I6ICR7YXR0cmlidXRlcy5jb2xvcn07IGNvbG9yOiBpbmhlcml0YCxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHBhcnNlSFRNTCgpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0YWc6ICdtYXJrJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF07XG4gICAgfSxcbiAgICByZW5kZXJIVE1MKHsgSFRNTEF0dHJpYnV0ZXMgfSkge1xuICAgICAgICByZXR1cm4gWydtYXJrJywgbWVyZ2VBdHRyaWJ1dGVzKHRoaXMub3B0aW9ucy5IVE1MQXR0cmlidXRlcywgSFRNTEF0dHJpYnV0ZXMpLCAwXTtcbiAgICB9LFxuICAgIGFkZENvbW1hbmRzKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2V0SGlnaGxpZ2h0OiBhdHRyaWJ1dGVzID0+ICh7IGNvbW1hbmRzIH0pID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWFuZHMuc2V0TWFyayh0aGlzLm5hbWUsIGF0dHJpYnV0ZXMpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRvZ2dsZUhpZ2hsaWdodDogYXR0cmlidXRlcyA9PiAoeyBjb21tYW5kcyB9KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1hbmRzLnRvZ2dsZU1hcmsodGhpcy5uYW1lLCBhdHRyaWJ1dGVzKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB1bnNldEhpZ2hsaWdodDogKCkgPT4gKHsgY29tbWFuZHMgfSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb21tYW5kcy51bnNldE1hcmsodGhpcy5uYW1lKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBhZGRLZXlib2FyZFNob3J0Y3V0cygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdNb2QtU2hpZnQtaCc6ICgpID0+IHRoaXMuZWRpdG9yLmNvbW1hbmRzLnRvZ2dsZUhpZ2hsaWdodCgpLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgYWRkSW5wdXRSdWxlcygpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIG1hcmtJbnB1dFJ1bGUoe1xuICAgICAgICAgICAgICAgIGZpbmQ6IGlucHV0UmVnZXgsXG4gICAgICAgICAgICAgICAgdHlwZTogdGhpcy50eXBlLFxuICAgICAgICAgICAgfSksXG4gICAgICAgIF07XG4gICAgfSxcbiAgICBhZGRQYXN0ZVJ1bGVzKCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgbWFya1Bhc3RlUnVsZSh7XG4gICAgICAgICAgICAgICAgZmluZDogcGFzdGVSZWdleCxcbiAgICAgICAgICAgICAgICB0eXBlOiB0aGlzLnR5cGUsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgXTtcbiAgICB9LFxufSk7XG5cbmV4cG9ydCB7IEhpZ2hsaWdodCwgSGlnaGxpZ2h0IGFzIGRlZmF1bHQsIGlucHV0UmVnZXgsIHBhc3RlUmVnZXggfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbIk1hcmsiLCJtZXJnZUF0dHJpYnV0ZXMiLCJtYXJrSW5wdXRSdWxlIiwibWFya1Bhc3RlUnVsZSIsImlucHV0UmVnZXgiLCJwYXN0ZVJlZ2V4IiwiSGlnaGxpZ2h0IiwiY3JlYXRlIiwibmFtZSIsImFkZE9wdGlvbnMiLCJtdWx0aWNvbG9yIiwiSFRNTEF0dHJpYnV0ZXMiLCJhZGRBdHRyaWJ1dGVzIiwib3B0aW9ucyIsImNvbG9yIiwicGFyc2VIVE1MIiwiZWxlbWVudCIsImdldEF0dHJpYnV0ZSIsInN0eWxlIiwiYmFja2dyb3VuZENvbG9yIiwicmVuZGVySFRNTCIsImF0dHJpYnV0ZXMiLCJjb25jYXQiLCJ0YWciLCJfcmVmIiwiYWRkQ29tbWFuZHMiLCJfdGhpcyIsInNldEhpZ2hsaWdodCIsIl9yZWYyIiwiY29tbWFuZHMiLCJzZXRNYXJrIiwidG9nZ2xlSGlnaGxpZ2h0IiwiX3JlZjMiLCJ0b2dnbGVNYXJrIiwidW5zZXRIaWdobGlnaHQiLCJfcmVmNCIsInVuc2V0TWFyayIsImFkZEtleWJvYXJkU2hvcnRjdXRzIiwiX3RoaXMyIiwiTW9kU2hpZnRIIiwiZWRpdG9yIiwiYWRkSW5wdXRSdWxlcyIsImZpbmQiLCJ0eXBlIiwiYWRkUGFzdGVSdWxlcyIsImRlZmF1bHQiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-highlight/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-history/dist/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tiptap/extension-history/dist/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   History: () => (/* binding */ History),\n/* harmony export */   \"default\": () => (/* binding */ History)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var _tiptap_pm_history__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/pm/history */ \"(ssr)/./node_modules/@tiptap/pm/history/dist/index.js\");\n\n\n\n/**\n * This extension allows you to undo and redo recent changes.\n * @see https://www.tiptap.dev/api/extensions/history\n *\n * **Important**: If the `@tiptap/extension-collaboration` package is used, make sure to remove\n * the `history` extension, as it is not compatible with the `collaboration` extension.\n *\n * `@tiptap/extension-collaboration` uses its own history implementation.\n */\nvar History = _tiptap_core__WEBPACK_IMPORTED_MODULE_1__.Extension.create({\n  name: 'history',\n  addOptions: function addOptions() {\n    return {\n      depth: 100,\n      newGroupDelay: 500\n    };\n  },\n  addCommands: function addCommands() {\n    return {\n      undo: function undo() {\n        return function (_ref) {\n          var state = _ref.state,\n            dispatch = _ref.dispatch;\n          return (0,_tiptap_pm_history__WEBPACK_IMPORTED_MODULE_0__.undo)(state, dispatch);\n        };\n      },\n      redo: function redo() {\n        return function (_ref2) {\n          var state = _ref2.state,\n            dispatch = _ref2.dispatch;\n          return (0,_tiptap_pm_history__WEBPACK_IMPORTED_MODULE_0__.redo)(state, dispatch);\n        };\n      }\n    };\n  },\n  addProseMirrorPlugins: function addProseMirrorPlugins() {\n    return [(0,_tiptap_pm_history__WEBPACK_IMPORTED_MODULE_0__.history)(this.options)];\n  },\n  addKeyboardShortcuts: function addKeyboardShortcuts() {\n    var _this = this;\n    return {\n      'Mod-z': function ModZ() {\n        return _this.editor.commands.undo();\n      },\n      'Shift-Mod-z': function ShiftModZ() {\n        return _this.editor.commands.redo();\n      },\n      'Mod-y': function ModY() {\n        return _this.editor.commands.redo();\n      },\n      // Russian keyboard layouts\n      'Mod-я': function ModЯ() {\n        return _this.editor.commands.undo();\n      },\n      'Shift-Mod-я': function ShiftModЯ() {\n        return _this.editor.commands.redo();\n      }\n    };\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24taGlzdG9yeS9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBeUM7QUFDZ0I7O0FBRXpEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQU1JLE9BQU8sR0FBR0osbURBQVMsQ0FBQ0ssTUFBTSxDQUFDO0VBQzdCQyxJQUFJLEVBQUUsU0FBUztFQUNmQyxVQUFVLFdBQVZBLFVBQVVBLENBQUEsRUFBRztJQUNULE9BQU87TUFDSEMsS0FBSyxFQUFFLEdBQUc7TUFDVkMsYUFBYSxFQUFFO0lBQ25CLENBQUM7RUFDTCxDQUFDO0VBQ0RDLFdBQVcsV0FBWEEsV0FBV0EsQ0FBQSxFQUFHO0lBQ1YsT0FBTztNQUNIVCxJQUFJLEVBQUUsU0FBTkEsSUFBSUEsQ0FBQTtRQUFBLE9BQVEsVUFBQVUsSUFBQSxFQUF5QjtVQUFBLElBQXRCQyxLQUFLLEdBQUFELElBQUEsQ0FBTEMsS0FBSztZQUFFQyxRQUFRLEdBQUFGLElBQUEsQ0FBUkUsUUFBUTtVQUMxQixPQUFPWix3REFBSSxDQUFDVyxLQUFLLEVBQUVDLFFBQVEsQ0FBQztRQUNoQyxDQUFDO01BQUE7TUFDRFgsSUFBSSxFQUFFLFNBQU5BLElBQUlBLENBQUE7UUFBQSxPQUFRLFVBQUFZLEtBQUEsRUFBeUI7VUFBQSxJQUF0QkYsS0FBSyxHQUFBRSxLQUFBLENBQUxGLEtBQUs7WUFBRUMsUUFBUSxHQUFBQyxLQUFBLENBQVJELFFBQVE7VUFDMUIsT0FBT1gsd0RBQUksQ0FBQ1UsS0FBSyxFQUFFQyxRQUFRLENBQUM7UUFDaEMsQ0FBQztNQUFBO0lBQ0wsQ0FBQztFQUNMLENBQUM7RUFDREUscUJBQXFCLFdBQXJCQSxxQkFBcUJBLENBQUEsRUFBRztJQUNwQixPQUFPLENBQ0haLDJEQUFPLENBQUMsSUFBSSxDQUFDYSxPQUFPLENBQUMsQ0FDeEI7RUFDTCxDQUFDO0VBQ0RDLG9CQUFvQixXQUFwQkEsb0JBQW9CQSxDQUFBLEVBQUc7SUFBQSxJQUFBQyxLQUFBO0lBQ25CLE9BQU87TUFDSCxPQUFPLEVBQUUsU0FBVEMsSUFBT0EsQ0FBQTtRQUFBLE9BQVFELEtBQUksQ0FBQ0UsTUFBTSxDQUFDQyxRQUFRLENBQUNwQixJQUFJLENBQUMsQ0FBQztNQUFBO01BQzFDLGFBQWEsRUFBRSxTQUFmcUIsU0FBYUEsQ0FBQTtRQUFBLE9BQVFKLEtBQUksQ0FBQ0UsTUFBTSxDQUFDQyxRQUFRLENBQUNuQixJQUFJLENBQUMsQ0FBQztNQUFBO01BQ2hELE9BQU8sRUFBRSxTQUFUcUIsSUFBT0EsQ0FBQTtRQUFBLE9BQVFMLEtBQUksQ0FBQ0UsTUFBTSxDQUFDQyxRQUFRLENBQUNuQixJQUFJLENBQUMsQ0FBQztNQUFBO01BQzFDO01BQ0EsT0FBTyxFQUFFLFNBQVRzQixJQUFPQSxDQUFBO1FBQUEsT0FBUU4sS0FBSSxDQUFDRSxNQUFNLENBQUNDLFFBQVEsQ0FBQ3BCLElBQUksQ0FBQyxDQUFDO01BQUE7TUFDMUMsYUFBYSxFQUFFLFNBQWZ3QixTQUFhQSxDQUFBO1FBQUEsT0FBUVAsS0FBSSxDQUFDRSxNQUFNLENBQUNDLFFBQVEsQ0FBQ25CLElBQUksQ0FBQyxDQUFDO01BQUE7SUFDcEQsQ0FBQztFQUNMO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXEB0aXB0YXBcXGV4dGVuc2lvbi1oaXN0b3J5XFxkaXN0XFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFeHRlbnNpb24gfSBmcm9tICdAdGlwdGFwL2NvcmUnO1xuaW1wb3J0IHsgdW5kbywgcmVkbywgaGlzdG9yeSB9IGZyb20gJ0B0aXB0YXAvcG0vaGlzdG9yeSc7XG5cbi8qKlxuICogVGhpcyBleHRlbnNpb24gYWxsb3dzIHlvdSB0byB1bmRvIGFuZCByZWRvIHJlY2VudCBjaGFuZ2VzLlxuICogQHNlZSBodHRwczovL3d3dy50aXB0YXAuZGV2L2FwaS9leHRlbnNpb25zL2hpc3RvcnlcbiAqXG4gKiAqKkltcG9ydGFudCoqOiBJZiB0aGUgYEB0aXB0YXAvZXh0ZW5zaW9uLWNvbGxhYm9yYXRpb25gIHBhY2thZ2UgaXMgdXNlZCwgbWFrZSBzdXJlIHRvIHJlbW92ZVxuICogdGhlIGBoaXN0b3J5YCBleHRlbnNpb24sIGFzIGl0IGlzIG5vdCBjb21wYXRpYmxlIHdpdGggdGhlIGBjb2xsYWJvcmF0aW9uYCBleHRlbnNpb24uXG4gKlxuICogYEB0aXB0YXAvZXh0ZW5zaW9uLWNvbGxhYm9yYXRpb25gIHVzZXMgaXRzIG93biBoaXN0b3J5IGltcGxlbWVudGF0aW9uLlxuICovXG5jb25zdCBIaXN0b3J5ID0gRXh0ZW5zaW9uLmNyZWF0ZSh7XG4gICAgbmFtZTogJ2hpc3RvcnknLFxuICAgIGFkZE9wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkZXB0aDogMTAwLFxuICAgICAgICAgICAgbmV3R3JvdXBEZWxheTogNTAwLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgYWRkQ29tbWFuZHMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB1bmRvOiAoKSA9PiAoeyBzdGF0ZSwgZGlzcGF0Y2ggfSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB1bmRvKHN0YXRlLCBkaXNwYXRjaCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVkbzogKCkgPT4gKHsgc3RhdGUsIGRpc3BhdGNoIH0pID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVkbyhzdGF0ZSwgZGlzcGF0Y2gpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIGFkZFByb3NlTWlycm9yUGx1Z2lucygpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIGhpc3RvcnkodGhpcy5vcHRpb25zKSxcbiAgICAgICAgXTtcbiAgICB9LFxuICAgIGFkZEtleWJvYXJkU2hvcnRjdXRzKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ01vZC16JzogKCkgPT4gdGhpcy5lZGl0b3IuY29tbWFuZHMudW5kbygpLFxuICAgICAgICAgICAgJ1NoaWZ0LU1vZC16JzogKCkgPT4gdGhpcy5lZGl0b3IuY29tbWFuZHMucmVkbygpLFxuICAgICAgICAgICAgJ01vZC15JzogKCkgPT4gdGhpcy5lZGl0b3IuY29tbWFuZHMucmVkbygpLFxuICAgICAgICAgICAgLy8gUnVzc2lhbiBrZXlib2FyZCBsYXlvdXRzXG4gICAgICAgICAgICAnTW9kLdGPJzogKCkgPT4gdGhpcy5lZGl0b3IuY29tbWFuZHMudW5kbygpLFxuICAgICAgICAgICAgJ1NoaWZ0LU1vZC3Rjyc6ICgpID0+IHRoaXMuZWRpdG9yLmNvbW1hbmRzLnJlZG8oKSxcbiAgICAgICAgfTtcbiAgICB9LFxufSk7XG5cbmV4cG9ydCB7IEhpc3RvcnksIEhpc3RvcnkgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOlsiRXh0ZW5zaW9uIiwidW5kbyIsInJlZG8iLCJoaXN0b3J5IiwiSGlzdG9yeSIsImNyZWF0ZSIsIm5hbWUiLCJhZGRPcHRpb25zIiwiZGVwdGgiLCJuZXdHcm91cERlbGF5IiwiYWRkQ29tbWFuZHMiLCJfcmVmIiwic3RhdGUiLCJkaXNwYXRjaCIsIl9yZWYyIiwiYWRkUHJvc2VNaXJyb3JQbHVnaW5zIiwib3B0aW9ucyIsImFkZEtleWJvYXJkU2hvcnRjdXRzIiwiX3RoaXMiLCJNb2RaIiwiZWRpdG9yIiwiY29tbWFuZHMiLCJTaGlmdE1vZFoiLCJNb2RZIiwiTW9k0K8iLCJTaGlmdE1vZNCvIiwiZGVmYXVsdCJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-history/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-horizontal-rule/dist/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@tiptap/extension-horizontal-rule/dist/index.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HorizontalRule: () => (/* binding */ HorizontalRule),\n/* harmony export */   \"default\": () => (/* binding */ HorizontalRule)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/pm/state */ \"(ssr)/./node_modules/@tiptap/pm/state/dist/index.js\");\n\n\n\n/**\n * This extension allows you to insert horizontal rules.\n * @see https://www.tiptap.dev/api/nodes/horizontal-rule\n */\nvar HorizontalRule = _tiptap_core__WEBPACK_IMPORTED_MODULE_1__.Node.create({\n  name: 'horizontalRule',\n  addOptions: function addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n  group: 'block',\n  parseHTML: function parseHTML() {\n    return [{\n      tag: 'hr'\n    }];\n  },\n  renderHTML: function renderHTML(_ref) {\n    var HTMLAttributes = _ref.HTMLAttributes;\n    return ['hr', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_1__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes)];\n  },\n  addCommands: function addCommands() {\n    var _this = this;\n    return {\n      setHorizontalRule: function setHorizontalRule() {\n        return function (_ref2) {\n          var chain = _ref2.chain,\n            state = _ref2.state;\n          var selection = state.selection;\n          var $originFrom = selection.$from,\n            $originTo = selection.$to;\n          var currentChain = chain();\n          if ($originFrom.parentOffset === 0) {\n            currentChain.insertContentAt({\n              from: Math.max($originFrom.pos - 1, 0),\n              to: $originTo.pos\n            }, {\n              type: _this.name\n            });\n          } else if ((0,_tiptap_core__WEBPACK_IMPORTED_MODULE_1__.isNodeSelection)(selection)) {\n            currentChain.insertContentAt($originTo.pos, {\n              type: _this.name\n            });\n          } else {\n            currentChain.insertContent({\n              type: _this.name\n            });\n          }\n          return currentChain\n          // set cursor after horizontal rule\n          .command(function (_ref3) {\n            var tr = _ref3.tr,\n              dispatch = _ref3.dispatch;\n            var _a;\n            if (dispatch) {\n              var $to = tr.selection.$to;\n              var posAfter = $to.end();\n              if ($to.nodeAfter) {\n                if ($to.nodeAfter.isTextblock) {\n                  tr.setSelection(_tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.create(tr.doc, $to.pos + 1));\n                } else if ($to.nodeAfter.isBlock) {\n                  tr.setSelection(_tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.NodeSelection.create(tr.doc, $to.pos));\n                } else {\n                  tr.setSelection(_tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.create(tr.doc, $to.pos));\n                }\n              } else {\n                // add node after horizontal rule if it’s the end of the document\n                var node = (_a = $to.parent.type.contentMatch.defaultType) === null || _a === void 0 ? void 0 : _a.create();\n                if (node) {\n                  tr.insert(posAfter, node);\n                  tr.setSelection(_tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.create(tr.doc, posAfter + 1));\n                }\n              }\n              tr.scrollIntoView();\n            }\n            return true;\n          }).run();\n        };\n      }\n    };\n  },\n  addInputRules: function addInputRules() {\n    return [(0,_tiptap_core__WEBPACK_IMPORTED_MODULE_1__.nodeInputRule)({\n      find: /^(?:---|—-|___\\s|\\*\\*\\*\\s)$/,\n      type: this.type\n    })];\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-horizontal-rule/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-image/dist/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@tiptap/extension-image/dist/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Image: () => (/* binding */ Image),\n/* harmony export */   \"default\": () => (/* binding */ Image),\n/* harmony export */   inputRegex: () => (/* binding */ inputRegex)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n/**\n * Matches an image to a ![image](src \"title\") on input.\n */\nvar inputRegex = /(?:^|\\s)(!\\[(.+|:?)]\\((\\S+)(?:(?:\\s+)[\"'](\\S+)[\"'])?\\))$/;\n/**\n * This extension allows you to insert images.\n * @see https://www.tiptap.dev/api/nodes/image\n */\nvar Image = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({\n  name: 'image',\n  addOptions: function addOptions() {\n    return {\n      inline: false,\n      allowBase64: false,\n      HTMLAttributes: {}\n    };\n  },\n  inline: function inline() {\n    return this.options.inline;\n  },\n  group: function group() {\n    return this.options.inline ? 'inline' : 'block';\n  },\n  draggable: true,\n  addAttributes: function addAttributes() {\n    return {\n      src: {\n        \"default\": null\n      },\n      alt: {\n        \"default\": null\n      },\n      title: {\n        \"default\": null\n      }\n    };\n  },\n  parseHTML: function parseHTML() {\n    return [{\n      tag: this.options.allowBase64 ? 'img[src]' : 'img[src]:not([src^=\"data:\"])'\n    }];\n  },\n  renderHTML: function renderHTML(_ref) {\n    var HTMLAttributes = _ref.HTMLAttributes;\n    return ['img', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes)];\n  },\n  addCommands: function addCommands() {\n    var _this = this;\n    return {\n      setImage: function setImage(options) {\n        return function (_ref2) {\n          var commands = _ref2.commands;\n          return commands.insertContent({\n            type: _this.name,\n            attrs: options\n          });\n        };\n      }\n    };\n  },\n  addInputRules: function addInputRules() {\n    return [(0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.nodeInputRule)({\n      find: inputRegex,\n      type: this.type,\n      getAttributes: function getAttributes(match) {\n        var _match = _slicedToArray(match, 5),\n          alt = _match[2],\n          src = _match[3],\n          title = _match[4];\n        return {\n          src: src,\n          alt: alt,\n          title: title\n        };\n      }\n    })];\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24taW1hZ2UvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQW9FOztBQUVwRTtBQUNBO0FBQ0E7QUFDQSxJQUFNRyxVQUFVLEdBQUcsMERBQTBEO0FBQzdFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBTUMsS0FBSyxHQUFHSiw4Q0FBSSxDQUFDSyxNQUFNLENBQUM7RUFDdEJDLElBQUksRUFBRSxPQUFPO0VBQ2JDLFVBQVUsV0FBVkEsVUFBVUEsQ0FBQSxFQUFHO0lBQ1QsT0FBTztNQUNIQyxNQUFNLEVBQUUsS0FBSztNQUNiQyxXQUFXLEVBQUUsS0FBSztNQUNsQkMsY0FBYyxFQUFFLENBQUM7SUFDckIsQ0FBQztFQUNMLENBQUM7RUFDREYsTUFBTSxXQUFOQSxNQUFNQSxDQUFBLEVBQUc7SUFDTCxPQUFPLElBQUksQ0FBQ0csT0FBTyxDQUFDSCxNQUFNO0VBQzlCLENBQUM7RUFDREksS0FBSyxXQUFMQSxLQUFLQSxDQUFBLEVBQUc7SUFDSixPQUFPLElBQUksQ0FBQ0QsT0FBTyxDQUFDSCxNQUFNLEdBQUcsUUFBUSxHQUFHLE9BQU87RUFDbkQsQ0FBQztFQUNESyxTQUFTLEVBQUUsSUFBSTtFQUNmQyxhQUFhLFdBQWJBLGFBQWFBLENBQUEsRUFBRztJQUNaLE9BQU87TUFDSEMsR0FBRyxFQUFFO1FBQ0QsV0FBUztNQUNiLENBQUM7TUFDREMsR0FBRyxFQUFFO1FBQ0QsV0FBUztNQUNiLENBQUM7TUFDREMsS0FBSyxFQUFFO1FBQ0gsV0FBUztNQUNiO0lBQ0osQ0FBQztFQUNMLENBQUM7RUFDREMsU0FBUyxXQUFUQSxTQUFTQSxDQUFBLEVBQUc7SUFDUixPQUFPLENBQ0g7TUFDSUMsR0FBRyxFQUFFLElBQUksQ0FBQ1IsT0FBTyxDQUFDRixXQUFXLEdBQ3ZCLFVBQVUsR0FDVjtJQUNWLENBQUMsQ0FDSjtFQUNMLENBQUM7RUFDRFcsVUFBVSxXQUFWQSxVQUFVQSxDQUFBQyxJQUFBLEVBQXFCO0lBQUEsSUFBbEJYLGNBQWMsR0FBQVcsSUFBQSxDQUFkWCxjQUFjO0lBQ3ZCLE9BQU8sQ0FBQyxLQUFLLEVBQUVULDZEQUFlLENBQUMsSUFBSSxDQUFDVSxPQUFPLENBQUNELGNBQWMsRUFBRUEsY0FBYyxDQUFDLENBQUM7RUFDaEYsQ0FBQztFQUNEWSxXQUFXLFdBQVhBLFdBQVdBLENBQUEsRUFBRztJQUFBLElBQUFDLEtBQUE7SUFDVixPQUFPO01BQ0hDLFFBQVEsRUFBRSxTQUFWQSxRQUFRQSxDQUFFYixPQUFPO1FBQUEsT0FBSSxVQUFBYyxLQUFBLEVBQWtCO1VBQUEsSUFBZkMsUUFBUSxHQUFBRCxLQUFBLENBQVJDLFFBQVE7VUFDNUIsT0FBT0EsUUFBUSxDQUFDQyxhQUFhLENBQUM7WUFDMUJDLElBQUksRUFBRUwsS0FBSSxDQUFDakIsSUFBSTtZQUNmdUIsS0FBSyxFQUFFbEI7VUFDWCxDQUFDLENBQUM7UUFDTixDQUFDO01BQUE7SUFDTCxDQUFDO0VBQ0wsQ0FBQztFQUNEbUIsYUFBYSxXQUFiQSxhQUFhQSxDQUFBLEVBQUc7SUFDWixPQUFPLENBQ0g1QiwyREFBYSxDQUFDO01BQ1Y2QixJQUFJLEVBQUU1QixVQUFVO01BQ2hCeUIsSUFBSSxFQUFFLElBQUksQ0FBQ0EsSUFBSTtNQUNmSSxhQUFhLEVBQUUsU0FBZkEsYUFBYUEsQ0FBRUMsS0FBSyxFQUFJO1FBQ3BCLElBQUFDLE1BQUEsR0FBQUMsY0FBQSxDQUE4QkYsS0FBSztVQUF4QmpCLEdBQUcsR0FBQWtCLE1BQUE7VUFBRW5CLEdBQUcsR0FBQW1CLE1BQUE7VUFBRWpCLEtBQUssR0FBQWlCLE1BQUE7UUFDMUIsT0FBTztVQUFFbkIsR0FBRyxFQUFIQSxHQUFHO1VBQUVDLEdBQUcsRUFBSEEsR0FBRztVQUFFQyxLQUFLLEVBQUxBO1FBQU0sQ0FBQztNQUM5QjtJQUNKLENBQUMsQ0FBQyxDQUNMO0VBQ0w7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xcQHRpcHRhcFxcZXh0ZW5zaW9uLWltYWdlXFxkaXN0XFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOb2RlLCBtZXJnZUF0dHJpYnV0ZXMsIG5vZGVJbnB1dFJ1bGUgfSBmcm9tICdAdGlwdGFwL2NvcmUnO1xuXG4vKipcbiAqIE1hdGNoZXMgYW4gaW1hZ2UgdG8gYSAhW2ltYWdlXShzcmMgXCJ0aXRsZVwiKSBvbiBpbnB1dC5cbiAqL1xuY29uc3QgaW5wdXRSZWdleCA9IC8oPzpefFxccykoIVxcWyguK3w6PyldXFwoKFxcUyspKD86KD86XFxzKylbXCInXShcXFMrKVtcIiddKT9cXCkpJC87XG4vKipcbiAqIFRoaXMgZXh0ZW5zaW9uIGFsbG93cyB5b3UgdG8gaW5zZXJ0IGltYWdlcy5cbiAqIEBzZWUgaHR0cHM6Ly93d3cudGlwdGFwLmRldi9hcGkvbm9kZXMvaW1hZ2VcbiAqL1xuY29uc3QgSW1hZ2UgPSBOb2RlLmNyZWF0ZSh7XG4gICAgbmFtZTogJ2ltYWdlJyxcbiAgICBhZGRPcHRpb25zKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaW5saW5lOiBmYWxzZSxcbiAgICAgICAgICAgIGFsbG93QmFzZTY0OiBmYWxzZSxcbiAgICAgICAgICAgIEhUTUxBdHRyaWJ1dGVzOiB7fSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIGlubGluZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5pbmxpbmU7XG4gICAgfSxcbiAgICBncm91cCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5pbmxpbmUgPyAnaW5saW5lJyA6ICdibG9jayc7XG4gICAgfSxcbiAgICBkcmFnZ2FibGU6IHRydWUsXG4gICAgYWRkQXR0cmlidXRlcygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNyYzoge1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYWx0OiB7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDogbnVsbCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0aXRsZToge1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgcGFyc2VIVE1MKCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRhZzogdGhpcy5vcHRpb25zLmFsbG93QmFzZTY0XG4gICAgICAgICAgICAgICAgICAgID8gJ2ltZ1tzcmNdJ1xuICAgICAgICAgICAgICAgICAgICA6ICdpbWdbc3JjXTpub3QoW3NyY149XCJkYXRhOlwiXSknLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXTtcbiAgICB9LFxuICAgIHJlbmRlckhUTUwoeyBIVE1MQXR0cmlidXRlcyB9KSB7XG4gICAgICAgIHJldHVybiBbJ2ltZycsIG1lcmdlQXR0cmlidXRlcyh0aGlzLm9wdGlvbnMuSFRNTEF0dHJpYnV0ZXMsIEhUTUxBdHRyaWJ1dGVzKV07XG4gICAgfSxcbiAgICBhZGRDb21tYW5kcygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNldEltYWdlOiBvcHRpb25zID0+ICh7IGNvbW1hbmRzIH0pID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWFuZHMuaW5zZXJ0Q29udGVudCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IHRoaXMubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IG9wdGlvbnMsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgYWRkSW5wdXRSdWxlcygpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIG5vZGVJbnB1dFJ1bGUoe1xuICAgICAgICAgICAgICAgIGZpbmQ6IGlucHV0UmVnZXgsXG4gICAgICAgICAgICAgICAgdHlwZTogdGhpcy50eXBlLFxuICAgICAgICAgICAgICAgIGdldEF0dHJpYnV0ZXM6IG1hdGNoID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgWywgLCBhbHQsIHNyYywgdGl0bGVdID0gbWF0Y2g7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHNyYywgYWx0LCB0aXRsZSB9O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgXTtcbiAgICB9LFxufSk7XG5cbmV4cG9ydCB7IEltYWdlLCBJbWFnZSBhcyBkZWZhdWx0LCBpbnB1dFJlZ2V4IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJOb2RlIiwibWVyZ2VBdHRyaWJ1dGVzIiwibm9kZUlucHV0UnVsZSIsImlucHV0UmVnZXgiLCJJbWFnZSIsImNyZWF0ZSIsIm5hbWUiLCJhZGRPcHRpb25zIiwiaW5saW5lIiwiYWxsb3dCYXNlNjQiLCJIVE1MQXR0cmlidXRlcyIsIm9wdGlvbnMiLCJncm91cCIsImRyYWdnYWJsZSIsImFkZEF0dHJpYnV0ZXMiLCJzcmMiLCJhbHQiLCJ0aXRsZSIsInBhcnNlSFRNTCIsInRhZyIsInJlbmRlckhUTUwiLCJfcmVmIiwiYWRkQ29tbWFuZHMiLCJfdGhpcyIsInNldEltYWdlIiwiX3JlZjIiLCJjb21tYW5kcyIsImluc2VydENvbnRlbnQiLCJ0eXBlIiwiYXR0cnMiLCJhZGRJbnB1dFJ1bGVzIiwiZmluZCIsImdldEF0dHJpYnV0ZXMiLCJtYXRjaCIsIl9tYXRjaCIsIl9zbGljZWRUb0FycmF5IiwiZGVmYXVsdCJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-image/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-italic/dist/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tiptap/extension-italic/dist/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Italic: () => (/* binding */ Italic),\n/* harmony export */   \"default\": () => (/* binding */ Italic),\n/* harmony export */   starInputRegex: () => (/* binding */ starInputRegex),\n/* harmony export */   starPasteRegex: () => (/* binding */ starPasteRegex),\n/* harmony export */   underscoreInputRegex: () => (/* binding */ underscoreInputRegex),\n/* harmony export */   underscorePasteRegex: () => (/* binding */ underscorePasteRegex)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\n\n/**\n * Matches an italic to a *italic* on input.\n */\nvar starInputRegex = /(?:^|\\s)(\\*(?!\\s+\\*)((?:[^*]+))\\*(?!\\s+\\*))$/;\n/**\n * Matches an italic to a *italic* on paste.\n */\nvar starPasteRegex = /(?:^|\\s)(\\*(?!\\s+\\*)((?:[^*]+))\\*(?!\\s+\\*))/g;\n/**\n * Matches an italic to a _italic_ on input.\n */\nvar underscoreInputRegex = /(?:^|\\s)(_(?!\\s+_)((?:[^_]+))_(?!\\s+_))$/;\n/**\n * Matches an italic to a _italic_ on paste.\n */\nvar underscorePasteRegex = /(?:^|\\s)(_(?!\\s+_)((?:[^_]+))_(?!\\s+_))/g;\n/**\n * This extension allows you to create italic text.\n * @see https://www.tiptap.dev/api/marks/italic\n */\nvar Italic = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Mark.create({\n  name: 'italic',\n  addOptions: function addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n  parseHTML: function parseHTML() {\n    var _this = this;\n    return [{\n      tag: 'em'\n    }, {\n      tag: 'i',\n      getAttrs: function getAttrs(node) {\n        return node.style.fontStyle !== 'normal' && null;\n      }\n    }, {\n      style: 'font-style=normal',\n      clearMark: function clearMark(mark) {\n        return mark.type.name === _this.name;\n      }\n    }, {\n      style: 'font-style=italic'\n    }];\n  },\n  renderHTML: function renderHTML(_ref) {\n    var HTMLAttributes = _ref.HTMLAttributes;\n    return ['em', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands: function addCommands() {\n    var _this2 = this;\n    return {\n      setItalic: function setItalic() {\n        return function (_ref2) {\n          var commands = _ref2.commands;\n          return commands.setMark(_this2.name);\n        };\n      },\n      toggleItalic: function toggleItalic() {\n        return function (_ref3) {\n          var commands = _ref3.commands;\n          return commands.toggleMark(_this2.name);\n        };\n      },\n      unsetItalic: function unsetItalic() {\n        return function (_ref4) {\n          var commands = _ref4.commands;\n          return commands.unsetMark(_this2.name);\n        };\n      }\n    };\n  },\n  addKeyboardShortcuts: function addKeyboardShortcuts() {\n    var _this3 = this;\n    return {\n      'Mod-i': function ModI() {\n        return _this3.editor.commands.toggleItalic();\n      },\n      'Mod-I': function ModI() {\n        return _this3.editor.commands.toggleItalic();\n      }\n    };\n  },\n  addInputRules: function addInputRules() {\n    return [(0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markInputRule)({\n      find: starInputRegex,\n      type: this.type\n    }), (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markInputRule)({\n      find: underscoreInputRegex,\n      type: this.type\n    })];\n  },\n  addPasteRules: function addPasteRules() {\n    return [(0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markPasteRule)({\n      find: starPasteRegex,\n      type: this.type\n    }), (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markPasteRule)({\n      find: underscorePasteRegex,\n      type: this.type\n    })];\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-italic/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-link/dist/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@tiptap/extension-link/dist/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Link: () => (/* binding */ Link),\n/* harmony export */   \"default\": () => (/* binding */ Link),\n/* harmony export */   isAllowedUri: () => (/* binding */ _isAllowedUri),\n/* harmony export */   pasteRegex: () => (/* binding */ pasteRegex)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var linkifyjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! linkifyjs */ \"(ssr)/./node_modules/linkifyjs/dist/linkify.es.js\");\n/* harmony import */ var _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tiptap/pm/state */ \"(ssr)/./node_modules/@tiptap/pm/state/dist/index.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n\n\n\n\n/**\n * Check if the provided tokens form a valid link structure, which can either be a single link token\n * or a link token surrounded by parentheses or square brackets.\n *\n * This ensures that only complete and valid text is hyperlinked, preventing cases where a valid\n * top-level domain (TLD) is immediately followed by an invalid character, like a number. For\n * example, with the `find` method from Linkify, entering `example.com1` would result in\n * `example.com` being linked and the trailing `1` left as plain text. By using the `tokenize`\n * method, we can perform more comprehensive validation on the input text.\n */\nfunction isValidLinkStructure(tokens) {\n  if (tokens.length === 1) {\n    return tokens[0].isLink;\n  }\n  if (tokens.length === 3 && tokens[1].isLink) {\n    return ['()', '[]'].includes(tokens[0].value + tokens[2].value);\n  }\n  return false;\n}\n/**\n * This plugin allows you to automatically add links to your editor.\n * @param options The plugin options\n * @returns The plugin instance\n */\nfunction autolink(options) {\n  return new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_1__.Plugin({\n    key: new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_1__.PluginKey('autolink'),\n    appendTransaction: function appendTransaction(transactions, oldState, newState) {\n      /**\n       * Does the transaction change the document?\n       */\n      var docChanges = transactions.some(function (transaction) {\n        return transaction.docChanged;\n      }) && !oldState.doc.eq(newState.doc);\n      /**\n       * Prevent autolink if the transaction is not a document change or if the transaction has the meta `preventAutolink`.\n       */\n      var preventAutolink = transactions.some(function (transaction) {\n        return transaction.getMeta('preventAutolink');\n      });\n      /**\n       * Prevent autolink if the transaction is not a document change\n       * or if the transaction has the meta `preventAutolink`.\n       */\n      if (!docChanges || preventAutolink) {\n        return;\n      }\n      var tr = newState.tr;\n      var transform = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_2__.combineTransactionSteps)(oldState.doc, _toConsumableArray(transactions));\n      var changes = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getChangedRanges)(transform);\n      changes.forEach(function (_ref) {\n        var newRange = _ref.newRange;\n        // Now let’s see if we can add new links.\n        var nodesInChangedRanges = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_2__.findChildrenInRange)(newState.doc, newRange, function (node) {\n          return node.isTextblock;\n        });\n        var textBlock;\n        var textBeforeWhitespace;\n        if (nodesInChangedRanges.length > 1) {\n          // Grab the first node within the changed ranges (ex. the first of two paragraphs when hitting enter).\n          textBlock = nodesInChangedRanges[0];\n          textBeforeWhitespace = newState.doc.textBetween(textBlock.pos, textBlock.pos + textBlock.node.nodeSize, undefined, ' ');\n        } else if (nodesInChangedRanges.length\n        // We want to make sure to include the block seperator argument to treat hard breaks like spaces.\n        && newState.doc.textBetween(newRange.from, newRange.to, ' ', ' ').endsWith(' ')) {\n          textBlock = nodesInChangedRanges[0];\n          textBeforeWhitespace = newState.doc.textBetween(textBlock.pos, newRange.to, undefined, ' ');\n        }\n        if (textBlock && textBeforeWhitespace) {\n          var wordsBeforeWhitespace = textBeforeWhitespace.split(' ').filter(function (s) {\n            return s !== '';\n          });\n          if (wordsBeforeWhitespace.length <= 0) {\n            return false;\n          }\n          var lastWordBeforeSpace = wordsBeforeWhitespace[wordsBeforeWhitespace.length - 1];\n          var lastWordAndBlockOffset = textBlock.pos + textBeforeWhitespace.lastIndexOf(lastWordBeforeSpace);\n          if (!lastWordBeforeSpace) {\n            return false;\n          }\n          var linksBeforeSpace = (0,linkifyjs__WEBPACK_IMPORTED_MODULE_0__.tokenize)(lastWordBeforeSpace).map(function (t) {\n            return t.toObject(options.defaultProtocol);\n          });\n          if (!isValidLinkStructure(linksBeforeSpace)) {\n            return false;\n          }\n          linksBeforeSpace.filter(function (link) {\n            return link.isLink;\n          })\n          // Calculate link position.\n          .map(function (link) {\n            return _objectSpread(_objectSpread({}, link), {}, {\n              from: lastWordAndBlockOffset + link.start + 1,\n              to: lastWordAndBlockOffset + link.end + 1\n            });\n          })\n          // ignore link inside code mark\n          .filter(function (link) {\n            if (!newState.schema.marks.code) {\n              return true;\n            }\n            return !newState.doc.rangeHasMark(link.from, link.to, newState.schema.marks.code);\n          })\n          // validate link\n          .filter(function (link) {\n            return options.validate(link.value);\n          })\n          // check whether should autolink\n          .filter(function (link) {\n            return options.shouldAutoLink(link.value);\n          })\n          // Add link mark.\n          .forEach(function (link) {\n            if ((0,_tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getMarksBetween)(link.from, link.to, newState.doc).some(function (item) {\n              return item.mark.type === options.type;\n            })) {\n              return;\n            }\n            tr.addMark(link.from, link.to, options.type.create({\n              href: link.href\n            }));\n          });\n        }\n      });\n      if (!tr.steps.length) {\n        return;\n      }\n      return tr;\n    }\n  });\n}\nfunction clickHandler(options) {\n  return new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_1__.Plugin({\n    key: new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_1__.PluginKey('handleClickLink'),\n    props: {\n      handleClick: function handleClick(view, pos, event) {\n        var _a, _b;\n        if (event.button !== 0) {\n          return false;\n        }\n        if (!view.editable) {\n          return false;\n        }\n        var a = event.target;\n        var els = [];\n        while (a.nodeName !== 'DIV') {\n          els.push(a);\n          a = a.parentNode;\n        }\n        if (!els.find(function (value) {\n          return value.nodeName === 'A';\n        })) {\n          return false;\n        }\n        var attrs = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getAttributes)(view.state, options.type.name);\n        var link = event.target;\n        var href = (_a = link === null || link === void 0 ? void 0 : link.href) !== null && _a !== void 0 ? _a : attrs.href;\n        var target = (_b = link === null || link === void 0 ? void 0 : link.target) !== null && _b !== void 0 ? _b : attrs.target;\n        if (link && href) {\n          window.open(href, target);\n          return true;\n        }\n        return false;\n      }\n    }\n  });\n}\nfunction pasteHandler(options) {\n  return new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_1__.Plugin({\n    key: new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_1__.PluginKey('handlePasteLink'),\n    props: {\n      handlePaste: function handlePaste(view, event, slice) {\n        var state = view.state;\n        var selection = state.selection;\n        var empty = selection.empty;\n        if (empty) {\n          return false;\n        }\n        var textContent = '';\n        slice.content.forEach(function (node) {\n          textContent += node.textContent;\n        });\n        var link = (0,linkifyjs__WEBPACK_IMPORTED_MODULE_0__.find)(textContent, {\n          defaultProtocol: options.defaultProtocol\n        }).find(function (item) {\n          return item.isLink && item.value === textContent;\n        });\n        if (!textContent || !link) {\n          return false;\n        }\n        return options.editor.commands.setMark(options.type, {\n          href: link.href\n        });\n      }\n    }\n  });\n}\nvar pasteRegex = /https?:\\/\\/(?:www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z]{2,}\\b(?:[-a-zA-Z0-9@:%._+~#=?!&/]*)(?:[-a-zA-Z0-9@:%._+~#=?!&/]*)/gi;\n// From DOMPurify\n// https://github.com/cure53/DOMPurify/blob/main/src/regexp.js\n// eslint-disable-next-line no-control-regex\nvar ATTR_WHITESPACE = /[\\u0000-\\u0020\\u00A0\\u1680\\u180E\\u2000-\\u2029\\u205F\\u3000]/g;\nfunction _isAllowedUri(uri, protocols) {\n  var allowedProtocols = ['http', 'https', 'ftp', 'ftps', 'mailto', 'tel', 'callto', 'sms', 'cid', 'xmpp'];\n  if (protocols) {\n    protocols.forEach(function (protocol) {\n      var nextProtocol = typeof protocol === 'string' ? protocol : protocol.scheme;\n      if (nextProtocol) {\n        allowedProtocols.push(nextProtocol);\n      }\n    });\n  }\n  return !uri || uri.replace(ATTR_WHITESPACE, '').match(new RegExp( // eslint-disable-next-line no-useless-escape\n  \"^(?:(?:\".concat(allowedProtocols.join('|'), \"):|[^a-z]|[a-z0-9+.-]+(?:[^a-z+.-:]|$))\"), 'i'));\n}\n/**\n * This extension allows you to create links.\n * @see https://www.tiptap.dev/api/marks/link\n */\nvar Link = _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.Mark.create({\n  name: 'link',\n  priority: 1000,\n  keepOnSplit: false,\n  exitable: true,\n  onCreate: function onCreate() {\n    if (this.options.validate && !this.options.shouldAutoLink) {\n      // Copy the validate function to the shouldAutoLink option\n      this.options.shouldAutoLink = this.options.validate;\n      console.warn('The `validate` option is deprecated. Rename to the `shouldAutoLink` option instead.');\n    }\n    this.options.protocols.forEach(function (protocol) {\n      if (typeof protocol === 'string') {\n        (0,linkifyjs__WEBPACK_IMPORTED_MODULE_0__.registerCustomProtocol)(protocol);\n        return;\n      }\n      (0,linkifyjs__WEBPACK_IMPORTED_MODULE_0__.registerCustomProtocol)(protocol.scheme, protocol.optionalSlashes);\n    });\n  },\n  onDestroy: function onDestroy() {\n    (0,linkifyjs__WEBPACK_IMPORTED_MODULE_0__.reset)();\n  },\n  inclusive: function inclusive() {\n    return this.options.autolink;\n  },\n  addOptions: function addOptions() {\n    return {\n      openOnClick: true,\n      linkOnPaste: true,\n      autolink: true,\n      protocols: [],\n      defaultProtocol: 'http',\n      HTMLAttributes: {\n        target: '_blank',\n        rel: 'noopener noreferrer nofollow',\n        \"class\": null\n      },\n      isAllowedUri: function isAllowedUri(url, ctx) {\n        return !!_isAllowedUri(url, ctx.protocols);\n      },\n      validate: function validate(url) {\n        return !!url;\n      },\n      shouldAutoLink: function shouldAutoLink(url) {\n        return !!url;\n      }\n    };\n  },\n  addAttributes: function addAttributes() {\n    return {\n      href: {\n        \"default\": null,\n        parseHTML: function parseHTML(element) {\n          return element.getAttribute('href');\n        }\n      },\n      target: {\n        \"default\": this.options.HTMLAttributes.target\n      },\n      rel: {\n        \"default\": this.options.HTMLAttributes.rel\n      },\n      \"class\": {\n        \"default\": this.options.HTMLAttributes[\"class\"]\n      }\n    };\n  },\n  parseHTML: function parseHTML() {\n    var _this = this;\n    return [{\n      tag: 'a[href]',\n      getAttrs: function getAttrs(dom) {\n        var href = dom.getAttribute('href');\n        // prevent XSS attacks\n        if (!href || !_this.options.isAllowedUri(href, {\n          defaultValidate: function defaultValidate(url) {\n            return !!_isAllowedUri(url, _this.options.protocols);\n          },\n          protocols: _this.options.protocols,\n          defaultProtocol: _this.options.defaultProtocol\n        })) {\n          return false;\n        }\n        return null;\n      }\n    }];\n  },\n  renderHTML: function renderHTML(_ref2) {\n    var _this2 = this;\n    var HTMLAttributes = _ref2.HTMLAttributes;\n    // prevent XSS attacks\n    if (!this.options.isAllowedUri(HTMLAttributes.href, {\n      defaultValidate: function defaultValidate(href) {\n        return !!_isAllowedUri(href, _this2.options.protocols);\n      },\n      protocols: this.options.protocols,\n      defaultProtocol: this.options.defaultProtocol\n    })) {\n      // strip out the href\n      return ['a', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_2__.mergeAttributes)(this.options.HTMLAttributes, _objectSpread(_objectSpread({}, HTMLAttributes), {}, {\n        href: ''\n      })), 0];\n    }\n    return ['a', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_2__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands: function addCommands() {\n    var _this3 = this;\n    return {\n      setLink: function setLink(attributes) {\n        return function (_ref3) {\n          var chain = _ref3.chain;\n          var href = attributes.href;\n          if (!_this3.options.isAllowedUri(href, {\n            defaultValidate: function defaultValidate(url) {\n              return !!_isAllowedUri(url, _this3.options.protocols);\n            },\n            protocols: _this3.options.protocols,\n            defaultProtocol: _this3.options.defaultProtocol\n          })) {\n            return false;\n          }\n          return chain().setMark(_this3.name, attributes).setMeta('preventAutolink', true).run();\n        };\n      },\n      toggleLink: function toggleLink(attributes) {\n        return function (_ref4) {\n          var chain = _ref4.chain;\n          var href = attributes.href;\n          if (!_this3.options.isAllowedUri(href, {\n            defaultValidate: function defaultValidate(url) {\n              return !!_isAllowedUri(url, _this3.options.protocols);\n            },\n            protocols: _this3.options.protocols,\n            defaultProtocol: _this3.options.defaultProtocol\n          })) {\n            return false;\n          }\n          return chain().toggleMark(_this3.name, attributes, {\n            extendEmptyMarkRange: true\n          }).setMeta('preventAutolink', true).run();\n        };\n      },\n      unsetLink: function unsetLink() {\n        return function (_ref5) {\n          var chain = _ref5.chain;\n          return chain().unsetMark(_this3.name, {\n            extendEmptyMarkRange: true\n          }).setMeta('preventAutolink', true).run();\n        };\n      }\n    };\n  },\n  addPasteRules: function addPasteRules() {\n    var _this4 = this;\n    return [(0,_tiptap_core__WEBPACK_IMPORTED_MODULE_2__.markPasteRule)({\n      find: function find(text) {\n        var foundLinks = [];\n        if (text) {\n          var _this4$options = _this4.options,\n            protocols = _this4$options.protocols,\n            defaultProtocol = _this4$options.defaultProtocol;\n          var links = (0,linkifyjs__WEBPACK_IMPORTED_MODULE_0__.find)(text).filter(function (item) {\n            return item.isLink && _this4.options.isAllowedUri(item.value, {\n              defaultValidate: function defaultValidate(href) {\n                return !!_isAllowedUri(href, protocols);\n              },\n              protocols: protocols,\n              defaultProtocol: defaultProtocol\n            });\n          });\n          if (links.length) {\n            links.forEach(function (link) {\n              return foundLinks.push({\n                text: link.value,\n                data: {\n                  href: link.href\n                },\n                index: link.start\n              });\n            });\n          }\n        }\n        return foundLinks;\n      },\n      type: this.type,\n      getAttributes: function getAttributes(match) {\n        var _a;\n        return {\n          href: (_a = match.data) === null || _a === void 0 ? void 0 : _a.href\n        };\n      }\n    })];\n  },\n  addProseMirrorPlugins: function addProseMirrorPlugins() {\n    var _this5 = this;\n    var plugins = [];\n    var _this$options = this.options,\n      protocols = _this$options.protocols,\n      defaultProtocol = _this$options.defaultProtocol;\n    if (this.options.autolink) {\n      plugins.push(autolink({\n        type: this.type,\n        defaultProtocol: this.options.defaultProtocol,\n        validate: function validate(url) {\n          return _this5.options.isAllowedUri(url, {\n            defaultValidate: function defaultValidate(href) {\n              return !!_isAllowedUri(href, protocols);\n            },\n            protocols: protocols,\n            defaultProtocol: defaultProtocol\n          });\n        },\n        shouldAutoLink: this.options.shouldAutoLink\n      }));\n    }\n    if (this.options.openOnClick === true) {\n      plugins.push(clickHandler({\n        type: this.type\n      }));\n    }\n    if (this.options.linkOnPaste) {\n      plugins.push(pasteHandler({\n        editor: this.editor,\n        defaultProtocol: this.options.defaultProtocol,\n        type: this.type\n      }));\n    }\n    return plugins;\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-link/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-list-item/dist/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tiptap/extension-list-item/dist/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ListItem: () => (/* binding */ ListItem),\n/* harmony export */   \"default\": () => (/* binding */ ListItem)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\n\n/**\n * This extension allows you to create list items.\n * @see https://www.tiptap.dev/api/nodes/list-item\n */\nvar ListItem = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({\n  name: 'listItem',\n  addOptions: function addOptions() {\n    return {\n      HTMLAttributes: {},\n      bulletListTypeName: 'bulletList',\n      orderedListTypeName: 'orderedList'\n    };\n  },\n  content: 'paragraph block*',\n  defining: true,\n  parseHTML: function parseHTML() {\n    return [{\n      tag: 'li'\n    }];\n  },\n  renderHTML: function renderHTML(_ref) {\n    var HTMLAttributes = _ref.HTMLAttributes;\n    return ['li', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addKeyboardShortcuts: function addKeyboardShortcuts() {\n    var _this = this;\n    return {\n      Enter: function Enter() {\n        return _this.editor.commands.splitListItem(_this.name);\n      },\n      Tab: function Tab() {\n        return _this.editor.commands.sinkListItem(_this.name);\n      },\n      'Shift-Tab': function ShiftTab() {\n        return _this.editor.commands.liftListItem(_this.name);\n      }\n    };\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tbGlzdC1pdGVtL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXFEOztBQUVyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQU1FLFFBQVEsR0FBR0YsOENBQUksQ0FBQ0csTUFBTSxDQUFDO0VBQ3pCQyxJQUFJLEVBQUUsVUFBVTtFQUNoQkMsVUFBVSxXQUFWQSxVQUFVQSxDQUFBLEVBQUc7SUFDVCxPQUFPO01BQ0hDLGNBQWMsRUFBRSxDQUFDLENBQUM7TUFDbEJDLGtCQUFrQixFQUFFLFlBQVk7TUFDaENDLG1CQUFtQixFQUFFO0lBQ3pCLENBQUM7RUFDTCxDQUFDO0VBQ0RDLE9BQU8sRUFBRSxrQkFBa0I7RUFDM0JDLFFBQVEsRUFBRSxJQUFJO0VBQ2RDLFNBQVMsV0FBVEEsU0FBU0EsQ0FBQSxFQUFHO0lBQ1IsT0FBTyxDQUNIO01BQ0lDLEdBQUcsRUFBRTtJQUNULENBQUMsQ0FDSjtFQUNMLENBQUM7RUFDREMsVUFBVSxXQUFWQSxVQUFVQSxDQUFBQyxJQUFBLEVBQXFCO0lBQUEsSUFBbEJSLGNBQWMsR0FBQVEsSUFBQSxDQUFkUixjQUFjO0lBQ3ZCLE9BQU8sQ0FBQyxJQUFJLEVBQUVMLDZEQUFlLENBQUMsSUFBSSxDQUFDYyxPQUFPLENBQUNULGNBQWMsRUFBRUEsY0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0VBQ2xGLENBQUM7RUFDRFUsb0JBQW9CLFdBQXBCQSxvQkFBb0JBLENBQUEsRUFBRztJQUFBLElBQUFDLEtBQUE7SUFDbkIsT0FBTztNQUNIQyxLQUFLLEVBQUUsU0FBUEEsS0FBS0EsQ0FBQTtRQUFBLE9BQVFELEtBQUksQ0FBQ0UsTUFBTSxDQUFDQyxRQUFRLENBQUNDLGFBQWEsQ0FBQ0osS0FBSSxDQUFDYixJQUFJLENBQUM7TUFBQTtNQUMxRGtCLEdBQUcsRUFBRSxTQUFMQSxHQUFHQSxDQUFBO1FBQUEsT0FBUUwsS0FBSSxDQUFDRSxNQUFNLENBQUNDLFFBQVEsQ0FBQ0csWUFBWSxDQUFDTixLQUFJLENBQUNiLElBQUksQ0FBQztNQUFBO01BQ3ZELFdBQVcsRUFBRSxTQUFib0IsUUFBV0EsQ0FBQTtRQUFBLE9BQVFQLEtBQUksQ0FBQ0UsTUFBTSxDQUFDQyxRQUFRLENBQUNLLFlBQVksQ0FBQ1IsS0FBSSxDQUFDYixJQUFJLENBQUM7TUFBQTtJQUNuRSxDQUFDO0VBQ0w7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xcQHRpcHRhcFxcZXh0ZW5zaW9uLWxpc3QtaXRlbVxcZGlzdFxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTm9kZSwgbWVyZ2VBdHRyaWJ1dGVzIH0gZnJvbSAnQHRpcHRhcC9jb3JlJztcblxuLyoqXG4gKiBUaGlzIGV4dGVuc2lvbiBhbGxvd3MgeW91IHRvIGNyZWF0ZSBsaXN0IGl0ZW1zLlxuICogQHNlZSBodHRwczovL3d3dy50aXB0YXAuZGV2L2FwaS9ub2Rlcy9saXN0LWl0ZW1cbiAqL1xuY29uc3QgTGlzdEl0ZW0gPSBOb2RlLmNyZWF0ZSh7XG4gICAgbmFtZTogJ2xpc3RJdGVtJyxcbiAgICBhZGRPcHRpb25zKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgSFRNTEF0dHJpYnV0ZXM6IHt9LFxuICAgICAgICAgICAgYnVsbGV0TGlzdFR5cGVOYW1lOiAnYnVsbGV0TGlzdCcsXG4gICAgICAgICAgICBvcmRlcmVkTGlzdFR5cGVOYW1lOiAnb3JkZXJlZExpc3QnLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgY29udGVudDogJ3BhcmFncmFwaCBibG9jayonLFxuICAgIGRlZmluaW5nOiB0cnVlLFxuICAgIHBhcnNlSFRNTCgpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0YWc6ICdsaScsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdO1xuICAgIH0sXG4gICAgcmVuZGVySFRNTCh7IEhUTUxBdHRyaWJ1dGVzIH0pIHtcbiAgICAgICAgcmV0dXJuIFsnbGknLCBtZXJnZUF0dHJpYnV0ZXModGhpcy5vcHRpb25zLkhUTUxBdHRyaWJ1dGVzLCBIVE1MQXR0cmlidXRlcyksIDBdO1xuICAgIH0sXG4gICAgYWRkS2V5Ym9hcmRTaG9ydGN1dHMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBFbnRlcjogKCkgPT4gdGhpcy5lZGl0b3IuY29tbWFuZHMuc3BsaXRMaXN0SXRlbSh0aGlzLm5hbWUpLFxuICAgICAgICAgICAgVGFiOiAoKSA9PiB0aGlzLmVkaXRvci5jb21tYW5kcy5zaW5rTGlzdEl0ZW0odGhpcy5uYW1lKSxcbiAgICAgICAgICAgICdTaGlmdC1UYWInOiAoKSA9PiB0aGlzLmVkaXRvci5jb21tYW5kcy5saWZ0TGlzdEl0ZW0odGhpcy5uYW1lKSxcbiAgICAgICAgfTtcbiAgICB9LFxufSk7XG5cbmV4cG9ydCB7IExpc3RJdGVtLCBMaXN0SXRlbSBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJOb2RlIiwibWVyZ2VBdHRyaWJ1dGVzIiwiTGlzdEl0ZW0iLCJjcmVhdGUiLCJuYW1lIiwiYWRkT3B0aW9ucyIsIkhUTUxBdHRyaWJ1dGVzIiwiYnVsbGV0TGlzdFR5cGVOYW1lIiwib3JkZXJlZExpc3RUeXBlTmFtZSIsImNvbnRlbnQiLCJkZWZpbmluZyIsInBhcnNlSFRNTCIsInRhZyIsInJlbmRlckhUTUwiLCJfcmVmIiwib3B0aW9ucyIsImFkZEtleWJvYXJkU2hvcnRjdXRzIiwiX3RoaXMiLCJFbnRlciIsImVkaXRvciIsImNvbW1hbmRzIiwic3BsaXRMaXN0SXRlbSIsIlRhYiIsInNpbmtMaXN0SXRlbSIsIlNoaWZ0VGFiIiwibGlmdExpc3RJdGVtIiwiZGVmYXVsdCJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-list-item/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-ordered-list/dist/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tiptap/extension-ordered-list/dist/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OrderedList: () => (/* binding */ OrderedList),\n/* harmony export */   \"default\": () => (/* binding */ OrderedList),\n/* harmony export */   inputRegex: () => (/* binding */ inputRegex)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nvar _excluded = [\"start\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nvar ListItemName = 'listItem';\nvar TextStyleName = 'textStyle';\n/**\n * Matches an ordered list to a 1. on input (or any number followed by a dot).\n */\nvar inputRegex = /^(\\d+)\\.\\s$/;\n/**\n * This extension allows you to create ordered lists.\n * This requires the ListItem extension\n * @see https://www.tiptap.dev/api/nodes/ordered-list\n * @see https://www.tiptap.dev/api/nodes/list-item\n */\nvar OrderedList = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({\n  name: 'orderedList',\n  addOptions: function addOptions() {\n    return {\n      itemTypeName: 'listItem',\n      HTMLAttributes: {},\n      keepMarks: false,\n      keepAttributes: false\n    };\n  },\n  group: 'block list',\n  content: function content() {\n    return \"\".concat(this.options.itemTypeName, \"+\");\n  },\n  addAttributes: function addAttributes() {\n    return {\n      start: {\n        \"default\": 1,\n        parseHTML: function parseHTML(element) {\n          return element.hasAttribute('start') ? parseInt(element.getAttribute('start') || '', 10) : 1;\n        }\n      },\n      type: {\n        \"default\": undefined,\n        parseHTML: function parseHTML(element) {\n          return element.getAttribute('type');\n        }\n      }\n    };\n  },\n  parseHTML: function parseHTML() {\n    return [{\n      tag: 'ol'\n    }];\n  },\n  renderHTML: function renderHTML(_ref) {\n    var HTMLAttributes = _ref.HTMLAttributes;\n    var start = HTMLAttributes.start,\n      attributesWithoutStart = _objectWithoutProperties(HTMLAttributes, _excluded);\n    return start === 1 ? ['ol', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, attributesWithoutStart), 0] : ['ol', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands: function addCommands() {\n    var _this = this;\n    return {\n      toggleOrderedList: function toggleOrderedList() {\n        return function (_ref2) {\n          var commands = _ref2.commands,\n            chain = _ref2.chain;\n          if (_this.options.keepAttributes) {\n            return chain().toggleList(_this.name, _this.options.itemTypeName, _this.options.keepMarks).updateAttributes(ListItemName, _this.editor.getAttributes(TextStyleName)).run();\n          }\n          return commands.toggleList(_this.name, _this.options.itemTypeName, _this.options.keepMarks);\n        };\n      }\n    };\n  },\n  addKeyboardShortcuts: function addKeyboardShortcuts() {\n    var _this2 = this;\n    return {\n      'Mod-Shift-7': function ModShift7() {\n        return _this2.editor.commands.toggleOrderedList();\n      }\n    };\n  },\n  addInputRules: function addInputRules() {\n    var _this3 = this;\n    var inputRule = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.wrappingInputRule)({\n      find: inputRegex,\n      type: this.type,\n      getAttributes: function getAttributes(match) {\n        return {\n          start: +match[1]\n        };\n      },\n      joinPredicate: function joinPredicate(match, node) {\n        return node.childCount + node.attrs.start === +match[1];\n      }\n    });\n    if (this.options.keepMarks || this.options.keepAttributes) {\n      inputRule = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.wrappingInputRule)({\n        find: inputRegex,\n        type: this.type,\n        keepMarks: this.options.keepMarks,\n        keepAttributes: this.options.keepAttributes,\n        getAttributes: function getAttributes(match) {\n          return _objectSpread({\n            start: +match[1]\n          }, _this3.editor.getAttributes(TextStyleName));\n        },\n        joinPredicate: function joinPredicate(match, node) {\n          return node.childCount + node.attrs.start === +match[1];\n        },\n        editor: this.editor\n      });\n    }\n    return [inputRule];\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tb3JkZXJlZC1saXN0L2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUF3RTtBQUV4RSxJQUFNRyxZQUFZLEdBQUcsVUFBVTtBQUMvQixJQUFNQyxhQUFhLEdBQUcsV0FBVztBQUNqQztBQUNBO0FBQ0E7QUFDQSxJQUFNQyxVQUFVLEdBQUcsYUFBYTtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFNQyxXQUFXLEdBQUdOLDhDQUFJLENBQUNPLE1BQU0sQ0FBQztFQUM1QkMsSUFBSSxFQUFFLGFBQWE7RUFDbkJDLFVBQVUsV0FBVkEsVUFBVUEsQ0FBQSxFQUFHO0lBQ1QsT0FBTztNQUNIQyxZQUFZLEVBQUUsVUFBVTtNQUN4QkMsY0FBYyxFQUFFLENBQUMsQ0FBQztNQUNsQkMsU0FBUyxFQUFFLEtBQUs7TUFDaEJDLGNBQWMsRUFBRTtJQUNwQixDQUFDO0VBQ0wsQ0FBQztFQUNEQyxLQUFLLEVBQUUsWUFBWTtFQUNuQkMsT0FBTyxXQUFQQSxPQUFPQSxDQUFBLEVBQUc7SUFDTixVQUFBQyxNQUFBLENBQVUsSUFBSSxDQUFDQyxPQUFPLENBQUNQLFlBQVk7RUFDdkMsQ0FBQztFQUNEUSxhQUFhLFdBQWJBLGFBQWFBLENBQUEsRUFBRztJQUNaLE9BQU87TUFDSEMsS0FBSyxFQUFFO1FBQ0gsV0FBUyxDQUFDO1FBQ1ZDLFNBQVMsRUFBRSxTQUFYQSxTQUFTQSxDQUFFQyxPQUFPLEVBQUk7VUFDbEIsT0FBT0EsT0FBTyxDQUFDQyxZQUFZLENBQUMsT0FBTyxDQUFDLEdBQzlCQyxRQUFRLENBQUNGLE9BQU8sQ0FBQ0csWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUMsR0FDakQsQ0FBQztRQUNYO01BQ0osQ0FBQztNQUNEQyxJQUFJLEVBQUU7UUFDRixXQUFTQyxTQUFTO1FBQ2xCTixTQUFTLEVBQUUsU0FBWEEsU0FBU0EsQ0FBRUMsT0FBTztVQUFBLE9BQUlBLE9BQU8sQ0FBQ0csWUFBWSxDQUFDLE1BQU0sQ0FBQztRQUFBO01BQ3REO0lBQ0osQ0FBQztFQUNMLENBQUM7RUFDREosU0FBUyxXQUFUQSxTQUFTQSxDQUFBLEVBQUc7SUFDUixPQUFPLENBQ0g7TUFDSU8sR0FBRyxFQUFFO0lBQ1QsQ0FBQyxDQUNKO0VBQ0wsQ0FBQztFQUNEQyxVQUFVLFdBQVZBLFVBQVVBLENBQUFDLElBQUEsRUFBcUI7SUFBQSxJQUFsQmxCLGNBQWMsR0FBQWtCLElBQUEsQ0FBZGxCLGNBQWM7SUFDdkIsSUFBUVEsS0FBSyxHQUFnQ1IsY0FBYyxDQUFuRFEsS0FBSztNQUFLVyxzQkFBc0IsR0FBQUMsd0JBQUEsQ0FBS3BCLGNBQWMsRUFBQXFCLFNBQUE7SUFDM0QsT0FBT2IsS0FBSyxLQUFLLENBQUMsR0FDWixDQUFDLElBQUksRUFBRWxCLDZEQUFlLENBQUMsSUFBSSxDQUFDZ0IsT0FBTyxDQUFDTixjQUFjLEVBQUVtQixzQkFBc0IsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUMvRSxDQUFDLElBQUksRUFBRTdCLDZEQUFlLENBQUMsSUFBSSxDQUFDZ0IsT0FBTyxDQUFDTixjQUFjLEVBQUVBLGNBQWMsQ0FBQyxFQUFFLENBQUMsQ0FBQztFQUNqRixDQUFDO0VBQ0RzQixXQUFXLFdBQVhBLFdBQVdBLENBQUEsRUFBRztJQUFBLElBQUFDLEtBQUE7SUFDVixPQUFPO01BQ0hDLGlCQUFpQixFQUFFLFNBQW5CQSxpQkFBaUJBLENBQUE7UUFBQSxPQUFRLFVBQUFDLEtBQUEsRUFBeUI7VUFBQSxJQUF0QkMsUUFBUSxHQUFBRCxLQUFBLENBQVJDLFFBQVE7WUFBRUMsS0FBSyxHQUFBRixLQUFBLENBQUxFLEtBQUs7VUFDdkMsSUFBSUosS0FBSSxDQUFDakIsT0FBTyxDQUFDSixjQUFjLEVBQUU7WUFDN0IsT0FBT3lCLEtBQUssQ0FBQyxDQUFDLENBQUNDLFVBQVUsQ0FBQ0wsS0FBSSxDQUFDMUIsSUFBSSxFQUFFMEIsS0FBSSxDQUFDakIsT0FBTyxDQUFDUCxZQUFZLEVBQUV3QixLQUFJLENBQUNqQixPQUFPLENBQUNMLFNBQVMsQ0FBQyxDQUFDNEIsZ0JBQWdCLENBQUNyQyxZQUFZLEVBQUUrQixLQUFJLENBQUNPLE1BQU0sQ0FBQ0MsYUFBYSxDQUFDdEMsYUFBYSxDQUFDLENBQUMsQ0FBQ3VDLEdBQUcsQ0FBQyxDQUFDO1VBQzFLO1VBQ0EsT0FBT04sUUFBUSxDQUFDRSxVQUFVLENBQUNMLEtBQUksQ0FBQzFCLElBQUksRUFBRTBCLEtBQUksQ0FBQ2pCLE9BQU8sQ0FBQ1AsWUFBWSxFQUFFd0IsS0FBSSxDQUFDakIsT0FBTyxDQUFDTCxTQUFTLENBQUM7UUFDNUYsQ0FBQztNQUFBO0lBQ0wsQ0FBQztFQUNMLENBQUM7RUFDRGdDLG9CQUFvQixXQUFwQkEsb0JBQW9CQSxDQUFBLEVBQUc7SUFBQSxJQUFBQyxNQUFBO0lBQ25CLE9BQU87TUFDSCxhQUFhLEVBQUUsU0FBZkMsU0FBYUEsQ0FBQTtRQUFBLE9BQVFELE1BQUksQ0FBQ0osTUFBTSxDQUFDSixRQUFRLENBQUNGLGlCQUFpQixDQUFDLENBQUM7TUFBQTtJQUNqRSxDQUFDO0VBQ0wsQ0FBQztFQUNEWSxhQUFhLFdBQWJBLGFBQWFBLENBQUEsRUFBRztJQUFBLElBQUFDLE1BQUE7SUFDWixJQUFJQyxTQUFTLEdBQUcvQywrREFBaUIsQ0FBQztNQUM5QmdELElBQUksRUFBRTdDLFVBQVU7TUFDaEJvQixJQUFJLEVBQUUsSUFBSSxDQUFDQSxJQUFJO01BQ2ZpQixhQUFhLEVBQUUsU0FBZkEsYUFBYUEsQ0FBRVMsS0FBSztRQUFBLE9BQUs7VUFBRWhDLEtBQUssRUFBRSxDQUFDZ0MsS0FBSyxDQUFDLENBQUM7UUFBRSxDQUFDO01BQUEsQ0FBQztNQUM5Q0MsYUFBYSxFQUFFLFNBQWZBLGFBQWFBLENBQUdELEtBQUssRUFBRUUsSUFBSTtRQUFBLE9BQUtBLElBQUksQ0FBQ0MsVUFBVSxHQUFHRCxJQUFJLENBQUNFLEtBQUssQ0FBQ3BDLEtBQUssS0FBSyxDQUFDZ0MsS0FBSyxDQUFDLENBQUMsQ0FBQztNQUFBO0lBQ3BGLENBQUMsQ0FBQztJQUNGLElBQUksSUFBSSxDQUFDbEMsT0FBTyxDQUFDTCxTQUFTLElBQUksSUFBSSxDQUFDSyxPQUFPLENBQUNKLGNBQWMsRUFBRTtNQUN2RG9DLFNBQVMsR0FBRy9DLCtEQUFpQixDQUFDO1FBQzFCZ0QsSUFBSSxFQUFFN0MsVUFBVTtRQUNoQm9CLElBQUksRUFBRSxJQUFJLENBQUNBLElBQUk7UUFDZmIsU0FBUyxFQUFFLElBQUksQ0FBQ0ssT0FBTyxDQUFDTCxTQUFTO1FBQ2pDQyxjQUFjLEVBQUUsSUFBSSxDQUFDSSxPQUFPLENBQUNKLGNBQWM7UUFDM0M2QixhQUFhLEVBQUUsU0FBZkEsYUFBYUEsQ0FBRVMsS0FBSztVQUFBLE9BQUFLLGFBQUE7WUFBT3JDLEtBQUssRUFBRSxDQUFDZ0MsS0FBSyxDQUFDLENBQUM7VUFBQyxHQUFLSCxNQUFJLENBQUNQLE1BQU0sQ0FBQ0MsYUFBYSxDQUFDdEMsYUFBYSxDQUFDO1FBQUEsQ0FBRztRQUMzRmdELGFBQWEsRUFBRSxTQUFmQSxhQUFhQSxDQUFHRCxLQUFLLEVBQUVFLElBQUk7VUFBQSxPQUFLQSxJQUFJLENBQUNDLFVBQVUsR0FBR0QsSUFBSSxDQUFDRSxLQUFLLENBQUNwQyxLQUFLLEtBQUssQ0FBQ2dDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFBQTtRQUNoRlYsTUFBTSxFQUFFLElBQUksQ0FBQ0E7TUFDakIsQ0FBQyxDQUFDO0lBQ047SUFDQSxPQUFPLENBQ0hRLFNBQVMsQ0FDWjtFQUNMO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXEB0aXB0YXBcXGV4dGVuc2lvbi1vcmRlcmVkLWxpc3RcXGRpc3RcXGluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5vZGUsIG1lcmdlQXR0cmlidXRlcywgd3JhcHBpbmdJbnB1dFJ1bGUgfSBmcm9tICdAdGlwdGFwL2NvcmUnO1xuXG5jb25zdCBMaXN0SXRlbU5hbWUgPSAnbGlzdEl0ZW0nO1xuY29uc3QgVGV4dFN0eWxlTmFtZSA9ICd0ZXh0U3R5bGUnO1xuLyoqXG4gKiBNYXRjaGVzIGFuIG9yZGVyZWQgbGlzdCB0byBhIDEuIG9uIGlucHV0IChvciBhbnkgbnVtYmVyIGZvbGxvd2VkIGJ5IGEgZG90KS5cbiAqL1xuY29uc3QgaW5wdXRSZWdleCA9IC9eKFxcZCspXFwuXFxzJC87XG4vKipcbiAqIFRoaXMgZXh0ZW5zaW9uIGFsbG93cyB5b3UgdG8gY3JlYXRlIG9yZGVyZWQgbGlzdHMuXG4gKiBUaGlzIHJlcXVpcmVzIHRoZSBMaXN0SXRlbSBleHRlbnNpb25cbiAqIEBzZWUgaHR0cHM6Ly93d3cudGlwdGFwLmRldi9hcGkvbm9kZXMvb3JkZXJlZC1saXN0XG4gKiBAc2VlIGh0dHBzOi8vd3d3LnRpcHRhcC5kZXYvYXBpL25vZGVzL2xpc3QtaXRlbVxuICovXG5jb25zdCBPcmRlcmVkTGlzdCA9IE5vZGUuY3JlYXRlKHtcbiAgICBuYW1lOiAnb3JkZXJlZExpc3QnLFxuICAgIGFkZE9wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpdGVtVHlwZU5hbWU6ICdsaXN0SXRlbScsXG4gICAgICAgICAgICBIVE1MQXR0cmlidXRlczoge30sXG4gICAgICAgICAgICBrZWVwTWFya3M6IGZhbHNlLFxuICAgICAgICAgICAga2VlcEF0dHJpYnV0ZXM6IGZhbHNlLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgZ3JvdXA6ICdibG9jayBsaXN0JyxcbiAgICBjb250ZW50KCkge1xuICAgICAgICByZXR1cm4gYCR7dGhpcy5vcHRpb25zLml0ZW1UeXBlTmFtZX0rYDtcbiAgICB9LFxuICAgIGFkZEF0dHJpYnV0ZXMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGFydDoge1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IDEsXG4gICAgICAgICAgICAgICAgcGFyc2VIVE1MOiBlbGVtZW50ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQuaGFzQXR0cmlidXRlKCdzdGFydCcpXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHBhcnNlSW50KGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdzdGFydCcpIHx8ICcnLCAxMClcbiAgICAgICAgICAgICAgICAgICAgICAgIDogMTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgcGFyc2VIVE1MOiBlbGVtZW50ID0+IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCd0eXBlJyksXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgcGFyc2VIVE1MKCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRhZzogJ29sJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF07XG4gICAgfSxcbiAgICByZW5kZXJIVE1MKHsgSFRNTEF0dHJpYnV0ZXMgfSkge1xuICAgICAgICBjb25zdCB7IHN0YXJ0LCAuLi5hdHRyaWJ1dGVzV2l0aG91dFN0YXJ0IH0gPSBIVE1MQXR0cmlidXRlcztcbiAgICAgICAgcmV0dXJuIHN0YXJ0ID09PSAxXG4gICAgICAgICAgICA/IFsnb2wnLCBtZXJnZUF0dHJpYnV0ZXModGhpcy5vcHRpb25zLkhUTUxBdHRyaWJ1dGVzLCBhdHRyaWJ1dGVzV2l0aG91dFN0YXJ0KSwgMF1cbiAgICAgICAgICAgIDogWydvbCcsIG1lcmdlQXR0cmlidXRlcyh0aGlzLm9wdGlvbnMuSFRNTEF0dHJpYnV0ZXMsIEhUTUxBdHRyaWJ1dGVzKSwgMF07XG4gICAgfSxcbiAgICBhZGRDb21tYW5kcygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRvZ2dsZU9yZGVyZWRMaXN0OiAoKSA9PiAoeyBjb21tYW5kcywgY2hhaW4gfSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMua2VlcEF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNoYWluKCkudG9nZ2xlTGlzdCh0aGlzLm5hbWUsIHRoaXMub3B0aW9ucy5pdGVtVHlwZU5hbWUsIHRoaXMub3B0aW9ucy5rZWVwTWFya3MpLnVwZGF0ZUF0dHJpYnV0ZXMoTGlzdEl0ZW1OYW1lLCB0aGlzLmVkaXRvci5nZXRBdHRyaWJ1dGVzKFRleHRTdHlsZU5hbWUpKS5ydW4oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1hbmRzLnRvZ2dsZUxpc3QodGhpcy5uYW1lLCB0aGlzLm9wdGlvbnMuaXRlbVR5cGVOYW1lLCB0aGlzLm9wdGlvbnMua2VlcE1hcmtzKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBhZGRLZXlib2FyZFNob3J0Y3V0cygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdNb2QtU2hpZnQtNyc6ICgpID0+IHRoaXMuZWRpdG9yLmNvbW1hbmRzLnRvZ2dsZU9yZGVyZWRMaXN0KCksXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBhZGRJbnB1dFJ1bGVzKCkge1xuICAgICAgICBsZXQgaW5wdXRSdWxlID0gd3JhcHBpbmdJbnB1dFJ1bGUoe1xuICAgICAgICAgICAgZmluZDogaW5wdXRSZWdleCxcbiAgICAgICAgICAgIHR5cGU6IHRoaXMudHlwZSxcbiAgICAgICAgICAgIGdldEF0dHJpYnV0ZXM6IG1hdGNoID0+ICh7IHN0YXJ0OiArbWF0Y2hbMV0gfSksXG4gICAgICAgICAgICBqb2luUHJlZGljYXRlOiAobWF0Y2gsIG5vZGUpID0+IG5vZGUuY2hpbGRDb3VudCArIG5vZGUuYXR0cnMuc3RhcnQgPT09ICttYXRjaFsxXSxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMua2VlcE1hcmtzIHx8IHRoaXMub3B0aW9ucy5rZWVwQXR0cmlidXRlcykge1xuICAgICAgICAgICAgaW5wdXRSdWxlID0gd3JhcHBpbmdJbnB1dFJ1bGUoe1xuICAgICAgICAgICAgICAgIGZpbmQ6IGlucHV0UmVnZXgsXG4gICAgICAgICAgICAgICAgdHlwZTogdGhpcy50eXBlLFxuICAgICAgICAgICAgICAgIGtlZXBNYXJrczogdGhpcy5vcHRpb25zLmtlZXBNYXJrcyxcbiAgICAgICAgICAgICAgICBrZWVwQXR0cmlidXRlczogdGhpcy5vcHRpb25zLmtlZXBBdHRyaWJ1dGVzLFxuICAgICAgICAgICAgICAgIGdldEF0dHJpYnV0ZXM6IG1hdGNoID0+ICh7IHN0YXJ0OiArbWF0Y2hbMV0sIC4uLnRoaXMuZWRpdG9yLmdldEF0dHJpYnV0ZXMoVGV4dFN0eWxlTmFtZSkgfSksXG4gICAgICAgICAgICAgICAgam9pblByZWRpY2F0ZTogKG1hdGNoLCBub2RlKSA9PiBub2RlLmNoaWxkQ291bnQgKyBub2RlLmF0dHJzLnN0YXJ0ID09PSArbWF0Y2hbMV0sXG4gICAgICAgICAgICAgICAgZWRpdG9yOiB0aGlzLmVkaXRvcixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBpbnB1dFJ1bGUsXG4gICAgICAgIF07XG4gICAgfSxcbn0pO1xuXG5leHBvcnQgeyBPcmRlcmVkTGlzdCwgT3JkZXJlZExpc3QgYXMgZGVmYXVsdCwgaW5wdXRSZWdleCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOlsiTm9kZSIsIm1lcmdlQXR0cmlidXRlcyIsIndyYXBwaW5nSW5wdXRSdWxlIiwiTGlzdEl0ZW1OYW1lIiwiVGV4dFN0eWxlTmFtZSIsImlucHV0UmVnZXgiLCJPcmRlcmVkTGlzdCIsImNyZWF0ZSIsIm5hbWUiLCJhZGRPcHRpb25zIiwiaXRlbVR5cGVOYW1lIiwiSFRNTEF0dHJpYnV0ZXMiLCJrZWVwTWFya3MiLCJrZWVwQXR0cmlidXRlcyIsImdyb3VwIiwiY29udGVudCIsImNvbmNhdCIsIm9wdGlvbnMiLCJhZGRBdHRyaWJ1dGVzIiwic3RhcnQiLCJwYXJzZUhUTUwiLCJlbGVtZW50IiwiaGFzQXR0cmlidXRlIiwicGFyc2VJbnQiLCJnZXRBdHRyaWJ1dGUiLCJ0eXBlIiwidW5kZWZpbmVkIiwidGFnIiwicmVuZGVySFRNTCIsIl9yZWYiLCJhdHRyaWJ1dGVzV2l0aG91dFN0YXJ0IiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiX2V4Y2x1ZGVkIiwiYWRkQ29tbWFuZHMiLCJfdGhpcyIsInRvZ2dsZU9yZGVyZWRMaXN0IiwiX3JlZjIiLCJjb21tYW5kcyIsImNoYWluIiwidG9nZ2xlTGlzdCIsInVwZGF0ZUF0dHJpYnV0ZXMiLCJlZGl0b3IiLCJnZXRBdHRyaWJ1dGVzIiwicnVuIiwiYWRkS2V5Ym9hcmRTaG9ydGN1dHMiLCJfdGhpczIiLCJNb2RTaGlmdDciLCJhZGRJbnB1dFJ1bGVzIiwiX3RoaXMzIiwiaW5wdXRSdWxlIiwiZmluZCIsIm1hdGNoIiwiam9pblByZWRpY2F0ZSIsIm5vZGUiLCJjaGlsZENvdW50IiwiYXR0cnMiLCJfb2JqZWN0U3ByZWFkIiwiZGVmYXVsdCJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-ordered-list/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-paragraph/dist/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tiptap/extension-paragraph/dist/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Paragraph: () => (/* binding */ Paragraph),\n/* harmony export */   \"default\": () => (/* binding */ Paragraph)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\n\n/**\n * This extension allows you to create paragraphs.\n * @see https://www.tiptap.dev/api/nodes/paragraph\n */\nvar Paragraph = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({\n  name: 'paragraph',\n  priority: 1000,\n  addOptions: function addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n  group: 'block',\n  content: 'inline*',\n  parseHTML: function parseHTML() {\n    return [{\n      tag: 'p'\n    }];\n  },\n  renderHTML: function renderHTML(_ref) {\n    var HTMLAttributes = _ref.HTMLAttributes;\n    return ['p', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands: function addCommands() {\n    var _this = this;\n    return {\n      setParagraph: function setParagraph() {\n        return function (_ref2) {\n          var commands = _ref2.commands;\n          return commands.setNode(_this.name);\n        };\n      }\n    };\n  },\n  addKeyboardShortcuts: function addKeyboardShortcuts() {\n    var _this2 = this;\n    return {\n      'Mod-Alt-0': function ModAlt0() {\n        return _this2.editor.commands.setParagraph();\n      }\n    };\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tcGFyYWdyYXBoL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXFEOztBQUVyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQU1FLFNBQVMsR0FBR0YsOENBQUksQ0FBQ0csTUFBTSxDQUFDO0VBQzFCQyxJQUFJLEVBQUUsV0FBVztFQUNqQkMsUUFBUSxFQUFFLElBQUk7RUFDZEMsVUFBVSxXQUFWQSxVQUFVQSxDQUFBLEVBQUc7SUFDVCxPQUFPO01BQ0hDLGNBQWMsRUFBRSxDQUFDO0lBQ3JCLENBQUM7RUFDTCxDQUFDO0VBQ0RDLEtBQUssRUFBRSxPQUFPO0VBQ2RDLE9BQU8sRUFBRSxTQUFTO0VBQ2xCQyxTQUFTLFdBQVRBLFNBQVNBLENBQUEsRUFBRztJQUNSLE9BQU8sQ0FDSDtNQUFFQyxHQUFHLEVBQUU7SUFBSSxDQUFDLENBQ2Y7RUFDTCxDQUFDO0VBQ0RDLFVBQVUsV0FBVkEsVUFBVUEsQ0FBQUMsSUFBQSxFQUFxQjtJQUFBLElBQWxCTixjQUFjLEdBQUFNLElBQUEsQ0FBZE4sY0FBYztJQUN2QixPQUFPLENBQUMsR0FBRyxFQUFFTiw2REFBZSxDQUFDLElBQUksQ0FBQ2EsT0FBTyxDQUFDUCxjQUFjLEVBQUVBLGNBQWMsQ0FBQyxFQUFFLENBQUMsQ0FBQztFQUNqRixDQUFDO0VBQ0RRLFdBQVcsV0FBWEEsV0FBV0EsQ0FBQSxFQUFHO0lBQUEsSUFBQUMsS0FBQTtJQUNWLE9BQU87TUFDSEMsWUFBWSxFQUFFLFNBQWRBLFlBQVlBLENBQUE7UUFBQSxPQUFRLFVBQUFDLEtBQUEsRUFBa0I7VUFBQSxJQUFmQyxRQUFRLEdBQUFELEtBQUEsQ0FBUkMsUUFBUTtVQUMzQixPQUFPQSxRQUFRLENBQUNDLE9BQU8sQ0FBQ0osS0FBSSxDQUFDWixJQUFJLENBQUM7UUFDdEMsQ0FBQztNQUFBO0lBQ0wsQ0FBQztFQUNMLENBQUM7RUFDRGlCLG9CQUFvQixXQUFwQkEsb0JBQW9CQSxDQUFBLEVBQUc7SUFBQSxJQUFBQyxNQUFBO0lBQ25CLE9BQU87TUFDSCxXQUFXLEVBQUUsU0FBYkMsT0FBV0EsQ0FBQTtRQUFBLE9BQVFELE1BQUksQ0FBQ0UsTUFBTSxDQUFDTCxRQUFRLENBQUNGLFlBQVksQ0FBQyxDQUFDO01BQUE7SUFDMUQsQ0FBQztFQUNMO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXEB0aXB0YXBcXGV4dGVuc2lvbi1wYXJhZ3JhcGhcXGRpc3RcXGluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5vZGUsIG1lcmdlQXR0cmlidXRlcyB9IGZyb20gJ0B0aXB0YXAvY29yZSc7XG5cbi8qKlxuICogVGhpcyBleHRlbnNpb24gYWxsb3dzIHlvdSB0byBjcmVhdGUgcGFyYWdyYXBocy5cbiAqIEBzZWUgaHR0cHM6Ly93d3cudGlwdGFwLmRldi9hcGkvbm9kZXMvcGFyYWdyYXBoXG4gKi9cbmNvbnN0IFBhcmFncmFwaCA9IE5vZGUuY3JlYXRlKHtcbiAgICBuYW1lOiAncGFyYWdyYXBoJyxcbiAgICBwcmlvcml0eTogMTAwMCxcbiAgICBhZGRPcHRpb25zKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgSFRNTEF0dHJpYnV0ZXM6IHt9LFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgZ3JvdXA6ICdibG9jaycsXG4gICAgY29udGVudDogJ2lubGluZSonLFxuICAgIHBhcnNlSFRNTCgpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHsgdGFnOiAncCcgfSxcbiAgICAgICAgXTtcbiAgICB9LFxuICAgIHJlbmRlckhUTUwoeyBIVE1MQXR0cmlidXRlcyB9KSB7XG4gICAgICAgIHJldHVybiBbJ3AnLCBtZXJnZUF0dHJpYnV0ZXModGhpcy5vcHRpb25zLkhUTUxBdHRyaWJ1dGVzLCBIVE1MQXR0cmlidXRlcyksIDBdO1xuICAgIH0sXG4gICAgYWRkQ29tbWFuZHMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzZXRQYXJhZ3JhcGg6ICgpID0+ICh7IGNvbW1hbmRzIH0pID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWFuZHMuc2V0Tm9kZSh0aGlzLm5hbWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIGFkZEtleWJvYXJkU2hvcnRjdXRzKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ01vZC1BbHQtMCc6ICgpID0+IHRoaXMuZWRpdG9yLmNvbW1hbmRzLnNldFBhcmFncmFwaCgpLFxuICAgICAgICB9O1xuICAgIH0sXG59KTtcblxuZXhwb3J0IHsgUGFyYWdyYXBoLCBQYXJhZ3JhcGggYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOlsiTm9kZSIsIm1lcmdlQXR0cmlidXRlcyIsIlBhcmFncmFwaCIsImNyZWF0ZSIsIm5hbWUiLCJwcmlvcml0eSIsImFkZE9wdGlvbnMiLCJIVE1MQXR0cmlidXRlcyIsImdyb3VwIiwiY29udGVudCIsInBhcnNlSFRNTCIsInRhZyIsInJlbmRlckhUTUwiLCJfcmVmIiwib3B0aW9ucyIsImFkZENvbW1hbmRzIiwiX3RoaXMiLCJzZXRQYXJhZ3JhcGgiLCJfcmVmMiIsImNvbW1hbmRzIiwic2V0Tm9kZSIsImFkZEtleWJvYXJkU2hvcnRjdXRzIiwiX3RoaXMyIiwiTW9kQWx0MCIsImVkaXRvciIsImRlZmF1bHQiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-paragraph/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-placeholder/dist/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tiptap/extension-placeholder/dist/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Placeholder: () => (/* binding */ Placeholder),\n/* harmony export */   \"default\": () => (/* binding */ Placeholder)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/pm/state */ \"(ssr)/./node_modules/@tiptap/pm/state/dist/index.js\");\n/* harmony import */ var _tiptap_pm_view__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tiptap/pm/view */ \"(ssr)/./node_modules/@tiptap/pm/view/dist/index.js\");\nfunction _readOnlyError(name) { throw new TypeError(\"\\\"\" + name + \"\\\" is read-only\"); }\n\n\n\n\n/**\n * This extension allows you to add a placeholder to your editor.\n * A placeholder is a text that appears when the editor or a node is empty.\n * @see https://www.tiptap.dev/api/extensions/placeholder\n */\nvar Placeholder = _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.Extension.create({\n  name: 'placeholder',\n  addOptions: function addOptions() {\n    return {\n      emptyEditorClass: 'is-editor-empty',\n      emptyNodeClass: 'is-empty',\n      placeholder: 'Write something …',\n      showOnlyWhenEditable: true,\n      showOnlyCurrent: true,\n      includeChildren: false\n    };\n  },\n  addProseMirrorPlugins: function addProseMirrorPlugins() {\n    var _this = this;\n    return [new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n      key: new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey('placeholder'),\n      props: {\n        decorations: function decorations(_ref) {\n          var doc = _ref.doc,\n            selection = _ref.selection;\n          var active = _this.editor.isEditable || !_this.options.showOnlyWhenEditable;\n          var anchor = selection.anchor;\n          var decorations = [];\n          if (!active) {\n            return null;\n          }\n          var isEmptyDoc = _this.editor.isEmpty;\n          doc.descendants(function (node, pos) {\n            var hasAnchor = anchor >= pos && anchor <= pos + node.nodeSize;\n            var isEmpty = !node.isLeaf && (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isNodeEmpty)(node);\n            if ((hasAnchor || !_this.options.showOnlyCurrent) && isEmpty) {\n              var classes = [_this.options.emptyNodeClass];\n              if (isEmptyDoc) {\n                classes.push(_this.options.emptyEditorClass);\n              }\n              var decoration = _tiptap_pm_view__WEBPACK_IMPORTED_MODULE_1__.Decoration.node(pos, pos + node.nodeSize, {\n                \"class\": classes.join(' '),\n                'data-placeholder': typeof _this.options.placeholder === 'function' ? _this.options.placeholder({\n                  editor: _this.editor,\n                  node: node,\n                  pos: pos,\n                  hasAnchor: hasAnchor\n                }) : _this.options.placeholder\n              });\n              decorations.push(decoration);\n            }\n            return _this.options.includeChildren;\n          });\n          return _tiptap_pm_view__WEBPACK_IMPORTED_MODULE_1__.DecorationSet.create(doc, decorations);\n        }\n      }\n    })];\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tcGxhY2Vob2xkZXIvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBc0Q7QUFDRDtBQUNPOztBQUU1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBTU0sV0FBVyxHQUFHTixtREFBUyxDQUFDTyxNQUFNLENBQUM7RUFDakNDLElBQUksRUFBRSxhQUFhO0VBQ25CQyxVQUFVLFdBQVZBLFVBQVVBLENBQUEsRUFBRztJQUNULE9BQU87TUFDSEMsZ0JBQWdCLEVBQUUsaUJBQWlCO01BQ25DQyxjQUFjLEVBQUUsVUFBVTtNQUMxQkMsV0FBVyxFQUFFLG1CQUFtQjtNQUNoQ0Msb0JBQW9CLEVBQUUsSUFBSTtNQUMxQkMsZUFBZSxFQUFFLElBQUk7TUFDckJDLGVBQWUsRUFBRTtJQUNyQixDQUFDO0VBQ0wsQ0FBQztFQUNEQyxxQkFBcUIsV0FBckJBLHFCQUFxQkEsQ0FBQSxFQUFHO0lBQUEsSUFBQUMsS0FBQTtJQUNwQixPQUFPLENBQ0gsSUFBSWYsb0RBQU0sQ0FBQztNQUNQZ0IsR0FBRyxFQUFFLElBQUlmLHVEQUFTLENBQUMsYUFBYSxDQUFDO01BQ2pDZ0IsS0FBSyxFQUFFO1FBQ0hDLFdBQVcsRUFBRSxTQUFiQSxXQUFXQSxDQUFBQyxJQUFBLEVBQTBCO1VBQUEsSUFBckJDLEdBQUcsR0FBQUQsSUFBQSxDQUFIQyxHQUFHO1lBQUVDLFNBQVMsR0FBQUYsSUFBQSxDQUFURSxTQUFTO1VBQzFCLElBQU1DLE1BQU0sR0FBR1AsS0FBSSxDQUFDUSxNQUFNLENBQUNDLFVBQVUsSUFBSSxDQUFDVCxLQUFJLENBQUNVLE9BQU8sQ0FBQ2Qsb0JBQW9CO1VBQzNFLElBQVFlLE1BQU0sR0FBS0wsU0FBUyxDQUFwQkssTUFBTTtVQUNkLElBQU1SLFdBQVcsR0FBRyxFQUFFO1VBQ3RCLElBQUksQ0FBQ0ksTUFBTSxFQUFFO1lBQ1QsT0FBTyxJQUFJO1VBQ2Y7VUFDQSxJQUFNSyxVQUFVLEdBQUdaLEtBQUksQ0FBQ1EsTUFBTSxDQUFDSyxPQUFPO1VBQ3RDUixHQUFHLENBQUNTLFdBQVcsQ0FBQyxVQUFDQyxJQUFJLEVBQUVDLEdBQUcsRUFBSztZQUMzQixJQUFNQyxTQUFTLEdBQUdOLE1BQU0sSUFBSUssR0FBRyxJQUFJTCxNQUFNLElBQUlLLEdBQUcsR0FBR0QsSUFBSSxDQUFDRyxRQUFRO1lBQ2hFLElBQU1MLE9BQU8sR0FBRyxDQUFDRSxJQUFJLENBQUNJLE1BQU0sSUFBSW5DLHlEQUFXLENBQUMrQixJQUFJLENBQUM7WUFDakQsSUFBSSxDQUFDRSxTQUFTLElBQUksQ0FBQ2pCLEtBQUksQ0FBQ1UsT0FBTyxDQUFDYixlQUFlLEtBQUtnQixPQUFPLEVBQUU7Y0FDekQsSUFBTU8sT0FBTyxHQUFHLENBQUNwQixLQUFJLENBQUNVLE9BQU8sQ0FBQ2hCLGNBQWMsQ0FBQztjQUM3QyxJQUFJa0IsVUFBVSxFQUFFO2dCQUNaUSxPQUFPLENBQUNDLElBQUksQ0FBQ3JCLEtBQUksQ0FBQ1UsT0FBTyxDQUFDakIsZ0JBQWdCLENBQUM7Y0FDL0M7Y0FDQSxJQUFNNkIsVUFBVSxHQUFHbkMsdURBQVUsQ0FBQzRCLElBQUksQ0FBQ0MsR0FBRyxFQUFFQSxHQUFHLEdBQUdELElBQUksQ0FBQ0csUUFBUSxFQUFFO2dCQUN6RCxTQUFPRSxPQUFPLENBQUNHLElBQUksQ0FBQyxHQUFHLENBQUM7Z0JBQ3hCLGtCQUFrQixFQUFFLE9BQU92QixLQUFJLENBQUNVLE9BQU8sQ0FBQ2YsV0FBVyxLQUFLLFVBQVUsR0FDNURLLEtBQUksQ0FBQ1UsT0FBTyxDQUFDZixXQUFXLENBQUM7a0JBQ3ZCYSxNQUFNLEVBQUVSLEtBQUksQ0FBQ1EsTUFBTTtrQkFDbkJPLElBQUksRUFBSkEsSUFBSTtrQkFDSkMsR0FBRyxFQUFIQSxHQUFHO2tCQUNIQyxTQUFTLEVBQVRBO2dCQUNKLENBQUMsQ0FBQyxHQUNBakIsS0FBSSxDQUFDVSxPQUFPLENBQUNmO2NBQ3ZCLENBQUMsQ0FBQztjQUNGUSxXQUFXLENBQUNrQixJQUFJLENBQUNDLFVBQVUsQ0FBQztZQUNoQztZQUNBLE9BQU90QixLQUFJLENBQUNVLE9BQU8sQ0FBQ1osZUFBZTtVQUN2QyxDQUFDLENBQUM7VUFDRixPQUFPViwwREFBYSxDQUFDRSxNQUFNLENBQUNlLEdBQUcsRUFBRUYsV0FBVyxDQUFDO1FBQ2pEO01BQ0o7SUFDSixDQUFDLENBQUMsQ0FDTDtFQUNMO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXEB0aXB0YXBcXGV4dGVuc2lvbi1wbGFjZWhvbGRlclxcZGlzdFxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXh0ZW5zaW9uLCBpc05vZGVFbXB0eSB9IGZyb20gJ0B0aXB0YXAvY29yZSc7XG5pbXBvcnQgeyBQbHVnaW4sIFBsdWdpbktleSB9IGZyb20gJ0B0aXB0YXAvcG0vc3RhdGUnO1xuaW1wb3J0IHsgRGVjb3JhdGlvbiwgRGVjb3JhdGlvblNldCB9IGZyb20gJ0B0aXB0YXAvcG0vdmlldyc7XG5cbi8qKlxuICogVGhpcyBleHRlbnNpb24gYWxsb3dzIHlvdSB0byBhZGQgYSBwbGFjZWhvbGRlciB0byB5b3VyIGVkaXRvci5cbiAqIEEgcGxhY2Vob2xkZXIgaXMgYSB0ZXh0IHRoYXQgYXBwZWFycyB3aGVuIHRoZSBlZGl0b3Igb3IgYSBub2RlIGlzIGVtcHR5LlxuICogQHNlZSBodHRwczovL3d3dy50aXB0YXAuZGV2L2FwaS9leHRlbnNpb25zL3BsYWNlaG9sZGVyXG4gKi9cbmNvbnN0IFBsYWNlaG9sZGVyID0gRXh0ZW5zaW9uLmNyZWF0ZSh7XG4gICAgbmFtZTogJ3BsYWNlaG9sZGVyJyxcbiAgICBhZGRPcHRpb25zKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZW1wdHlFZGl0b3JDbGFzczogJ2lzLWVkaXRvci1lbXB0eScsXG4gICAgICAgICAgICBlbXB0eU5vZGVDbGFzczogJ2lzLWVtcHR5JyxcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnV3JpdGUgc29tZXRoaW5nIOKApicsXG4gICAgICAgICAgICBzaG93T25seVdoZW5FZGl0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHNob3dPbmx5Q3VycmVudDogdHJ1ZSxcbiAgICAgICAgICAgIGluY2x1ZGVDaGlsZHJlbjogZmFsc2UsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBhZGRQcm9zZU1pcnJvclBsdWdpbnMoKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBuZXcgUGx1Z2luKHtcbiAgICAgICAgICAgICAgICBrZXk6IG5ldyBQbHVnaW5LZXkoJ3BsYWNlaG9sZGVyJyksXG4gICAgICAgICAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgICAgICAgICAgZGVjb3JhdGlvbnM6ICh7IGRvYywgc2VsZWN0aW9uIH0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFjdGl2ZSA9IHRoaXMuZWRpdG9yLmlzRWRpdGFibGUgfHwgIXRoaXMub3B0aW9ucy5zaG93T25seVdoZW5FZGl0YWJsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgYW5jaG9yIH0gPSBzZWxlY3Rpb247XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkZWNvcmF0aW9ucyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFhY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzRW1wdHlEb2MgPSB0aGlzLmVkaXRvci5pc0VtcHR5O1xuICAgICAgICAgICAgICAgICAgICAgICAgZG9jLmRlc2NlbmRhbnRzKChub2RlLCBwb3MpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBoYXNBbmNob3IgPSBhbmNob3IgPj0gcG9zICYmIGFuY2hvciA8PSBwb3MgKyBub2RlLm5vZGVTaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzRW1wdHkgPSAhbm9kZS5pc0xlYWYgJiYgaXNOb2RlRW1wdHkobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChoYXNBbmNob3IgfHwgIXRoaXMub3B0aW9ucy5zaG93T25seUN1cnJlbnQpICYmIGlzRW1wdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2xhc3NlcyA9IFt0aGlzLm9wdGlvbnMuZW1wdHlOb2RlQ2xhc3NdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNFbXB0eURvYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3Nlcy5wdXNoKHRoaXMub3B0aW9ucy5lbXB0eUVkaXRvckNsYXNzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkZWNvcmF0aW9uID0gRGVjb3JhdGlvbi5ub2RlKHBvcywgcG9zICsgbm9kZS5ub2RlU2l6ZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IGNsYXNzZXMuam9pbignICcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhdGEtcGxhY2Vob2xkZXInOiB0eXBlb2YgdGhpcy5vcHRpb25zLnBsYWNlaG9sZGVyID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLm9wdGlvbnMucGxhY2Vob2xkZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZGl0b3I6IHRoaXMuZWRpdG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc0FuY2hvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5vcHRpb25zLnBsYWNlaG9sZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVjb3JhdGlvbnMucHVzaChkZWNvcmF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5pbmNsdWRlQ2hpbGRyZW47XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBEZWNvcmF0aW9uU2V0LmNyZWF0ZShkb2MsIGRlY29yYXRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSksXG4gICAgICAgIF07XG4gICAgfSxcbn0pO1xuXG5leHBvcnQgeyBQbGFjZWhvbGRlciwgUGxhY2Vob2xkZXIgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOlsiRXh0ZW5zaW9uIiwiaXNOb2RlRW1wdHkiLCJQbHVnaW4iLCJQbHVnaW5LZXkiLCJEZWNvcmF0aW9uIiwiRGVjb3JhdGlvblNldCIsIlBsYWNlaG9sZGVyIiwiY3JlYXRlIiwibmFtZSIsImFkZE9wdGlvbnMiLCJlbXB0eUVkaXRvckNsYXNzIiwiZW1wdHlOb2RlQ2xhc3MiLCJwbGFjZWhvbGRlciIsInNob3dPbmx5V2hlbkVkaXRhYmxlIiwic2hvd09ubHlDdXJyZW50IiwiaW5jbHVkZUNoaWxkcmVuIiwiYWRkUHJvc2VNaXJyb3JQbHVnaW5zIiwiX3RoaXMiLCJrZXkiLCJwcm9wcyIsImRlY29yYXRpb25zIiwiX3JlZiIsImRvYyIsInNlbGVjdGlvbiIsImFjdGl2ZSIsImVkaXRvciIsImlzRWRpdGFibGUiLCJvcHRpb25zIiwiYW5jaG9yIiwiaXNFbXB0eURvYyIsImlzRW1wdHkiLCJkZXNjZW5kYW50cyIsIm5vZGUiLCJwb3MiLCJoYXNBbmNob3IiLCJub2RlU2l6ZSIsImlzTGVhZiIsImNsYXNzZXMiLCJwdXNoIiwiZGVjb3JhdGlvbiIsImpvaW4iLCJkZWZhdWx0Il0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-placeholder/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-strike/dist/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tiptap/extension-strike/dist/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Strike: () => (/* binding */ Strike),\n/* harmony export */   \"default\": () => (/* binding */ Strike),\n/* harmony export */   inputRegex: () => (/* binding */ inputRegex),\n/* harmony export */   pasteRegex: () => (/* binding */ pasteRegex)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\n\n/**\n * Matches a strike to a ~~strike~~ on input.\n */\nvar inputRegex = /(?:^|\\s)(~~(?!\\s+~~)((?:[^~]+))~~(?!\\s+~~))$/;\n/**\n * Matches a strike to a ~~strike~~ on paste.\n */\nvar pasteRegex = /(?:^|\\s)(~~(?!\\s+~~)((?:[^~]+))~~(?!\\s+~~))/g;\n/**\n * This extension allows you to create strike text.\n * @see https://www.tiptap.dev/api/marks/strike\n */\nvar Strike = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Mark.create({\n  name: 'strike',\n  addOptions: function addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n  parseHTML: function parseHTML() {\n    return [{\n      tag: 's'\n    }, {\n      tag: 'del'\n    }, {\n      tag: 'strike'\n    }, {\n      style: 'text-decoration',\n      consuming: false,\n      getAttrs: function getAttrs(style) {\n        return style.includes('line-through') ? {} : false;\n      }\n    }];\n  },\n  renderHTML: function renderHTML(_ref) {\n    var HTMLAttributes = _ref.HTMLAttributes;\n    return ['s', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands: function addCommands() {\n    var _this = this;\n    return {\n      setStrike: function setStrike() {\n        return function (_ref2) {\n          var commands = _ref2.commands;\n          return commands.setMark(_this.name);\n        };\n      },\n      toggleStrike: function toggleStrike() {\n        return function (_ref3) {\n          var commands = _ref3.commands;\n          return commands.toggleMark(_this.name);\n        };\n      },\n      unsetStrike: function unsetStrike() {\n        return function (_ref4) {\n          var commands = _ref4.commands;\n          return commands.unsetMark(_this.name);\n        };\n      }\n    };\n  },\n  addKeyboardShortcuts: function addKeyboardShortcuts() {\n    var _this2 = this;\n    return {\n      'Mod-Shift-s': function ModShiftS() {\n        return _this2.editor.commands.toggleStrike();\n      }\n    };\n  },\n  addInputRules: function addInputRules() {\n    return [(0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markInputRule)({\n      find: inputRegex,\n      type: this.type\n    })];\n  },\n  addPasteRules: function addPasteRules() {\n    return [(0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markPasteRule)({\n      find: pasteRegex,\n      type: this.type\n    })];\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tc3RyaWtlL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBbUY7O0FBRW5GO0FBQ0E7QUFDQTtBQUNBLElBQU1JLFVBQVUsR0FBRyw4Q0FBOEM7QUFDakU7QUFDQTtBQUNBO0FBQ0EsSUFBTUMsVUFBVSxHQUFHLDhDQUE4QztBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQU1DLE1BQU0sR0FBR04sOENBQUksQ0FBQ08sTUFBTSxDQUFDO0VBQ3ZCQyxJQUFJLEVBQUUsUUFBUTtFQUNkQyxVQUFVLFdBQVZBLFVBQVVBLENBQUEsRUFBRztJQUNULE9BQU87TUFDSEMsY0FBYyxFQUFFLENBQUM7SUFDckIsQ0FBQztFQUNMLENBQUM7RUFDREMsU0FBUyxXQUFUQSxTQUFTQSxDQUFBLEVBQUc7SUFDUixPQUFPLENBQ0g7TUFDSUMsR0FBRyxFQUFFO0lBQ1QsQ0FBQyxFQUNEO01BQ0lBLEdBQUcsRUFBRTtJQUNULENBQUMsRUFDRDtNQUNJQSxHQUFHLEVBQUU7SUFDVCxDQUFDLEVBQ0Q7TUFDSUMsS0FBSyxFQUFFLGlCQUFpQjtNQUN4QkMsU0FBUyxFQUFFLEtBQUs7TUFDaEJDLFFBQVEsRUFBRSxTQUFWQSxRQUFRQSxDQUFFRixLQUFLO1FBQUEsT0FBS0EsS0FBSyxDQUFDRyxRQUFRLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsS0FBSztNQUFBO0lBQ25FLENBQUMsQ0FDSjtFQUNMLENBQUM7RUFDREMsVUFBVSxXQUFWQSxVQUFVQSxDQUFBQyxJQUFBLEVBQXFCO0lBQUEsSUFBbEJSLGNBQWMsR0FBQVEsSUFBQSxDQUFkUixjQUFjO0lBQ3ZCLE9BQU8sQ0FBQyxHQUFHLEVBQUVULDZEQUFlLENBQUMsSUFBSSxDQUFDa0IsT0FBTyxDQUFDVCxjQUFjLEVBQUVBLGNBQWMsQ0FBQyxFQUFFLENBQUMsQ0FBQztFQUNqRixDQUFDO0VBQ0RVLFdBQVcsV0FBWEEsV0FBV0EsQ0FBQSxFQUFHO0lBQUEsSUFBQUMsS0FBQTtJQUNWLE9BQU87TUFDSEMsU0FBUyxFQUFFLFNBQVhBLFNBQVNBLENBQUE7UUFBQSxPQUFRLFVBQUFDLEtBQUEsRUFBa0I7VUFBQSxJQUFmQyxRQUFRLEdBQUFELEtBQUEsQ0FBUkMsUUFBUTtVQUN4QixPQUFPQSxRQUFRLENBQUNDLE9BQU8sQ0FBQ0osS0FBSSxDQUFDYixJQUFJLENBQUM7UUFDdEMsQ0FBQztNQUFBO01BQ0RrQixZQUFZLEVBQUUsU0FBZEEsWUFBWUEsQ0FBQTtRQUFBLE9BQVEsVUFBQUMsS0FBQSxFQUFrQjtVQUFBLElBQWZILFFBQVEsR0FBQUcsS0FBQSxDQUFSSCxRQUFRO1VBQzNCLE9BQU9BLFFBQVEsQ0FBQ0ksVUFBVSxDQUFDUCxLQUFJLENBQUNiLElBQUksQ0FBQztRQUN6QyxDQUFDO01BQUE7TUFDRHFCLFdBQVcsRUFBRSxTQUFiQSxXQUFXQSxDQUFBO1FBQUEsT0FBUSxVQUFBQyxLQUFBLEVBQWtCO1VBQUEsSUFBZk4sUUFBUSxHQUFBTSxLQUFBLENBQVJOLFFBQVE7VUFDMUIsT0FBT0EsUUFBUSxDQUFDTyxTQUFTLENBQUNWLEtBQUksQ0FBQ2IsSUFBSSxDQUFDO1FBQ3hDLENBQUM7TUFBQTtJQUNMLENBQUM7RUFDTCxDQUFDO0VBQ0R3QixvQkFBb0IsV0FBcEJBLG9CQUFvQkEsQ0FBQSxFQUFHO0lBQUEsSUFBQUMsTUFBQTtJQUNuQixPQUFPO01BQ0gsYUFBYSxFQUFFLFNBQWZDLFNBQWFBLENBQUE7UUFBQSxPQUFRRCxNQUFJLENBQUNFLE1BQU0sQ0FBQ1gsUUFBUSxDQUFDRSxZQUFZLENBQUMsQ0FBQztNQUFBO0lBQzVELENBQUM7RUFDTCxDQUFDO0VBQ0RVLGFBQWEsV0FBYkEsYUFBYUEsQ0FBQSxFQUFHO0lBQ1osT0FBTyxDQUNIbEMsMkRBQWEsQ0FBQztNQUNWbUMsSUFBSSxFQUFFakMsVUFBVTtNQUNoQmtDLElBQUksRUFBRSxJQUFJLENBQUNBO0lBQ2YsQ0FBQyxDQUFDLENBQ0w7RUFDTCxDQUFDO0VBQ0RDLGFBQWEsV0FBYkEsYUFBYUEsQ0FBQSxFQUFHO0lBQ1osT0FBTyxDQUNIcEMsMkRBQWEsQ0FBQztNQUNWa0MsSUFBSSxFQUFFaEMsVUFBVTtNQUNoQmlDLElBQUksRUFBRSxJQUFJLENBQUNBO0lBQ2YsQ0FBQyxDQUFDLENBQ0w7RUFDTDtBQUNKLENBQUMsQ0FBQyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxAdGlwdGFwXFxleHRlbnNpb24tc3RyaWtlXFxkaXN0XFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNYXJrLCBtZXJnZUF0dHJpYnV0ZXMsIG1hcmtJbnB1dFJ1bGUsIG1hcmtQYXN0ZVJ1bGUgfSBmcm9tICdAdGlwdGFwL2NvcmUnO1xuXG4vKipcbiAqIE1hdGNoZXMgYSBzdHJpa2UgdG8gYSB+fnN0cmlrZX5+IG9uIGlucHV0LlxuICovXG5jb25zdCBpbnB1dFJlZ2V4ID0gLyg/Ol58XFxzKSh+fig/IVxccyt+fikoKD86W15+XSspKX5+KD8hXFxzK35+KSkkLztcbi8qKlxuICogTWF0Y2hlcyBhIHN0cmlrZSB0byBhIH5+c3RyaWtlfn4gb24gcGFzdGUuXG4gKi9cbmNvbnN0IHBhc3RlUmVnZXggPSAvKD86XnxcXHMpKH5+KD8hXFxzK35+KSgoPzpbXn5dKykpfn4oPyFcXHMrfn4pKS9nO1xuLyoqXG4gKiBUaGlzIGV4dGVuc2lvbiBhbGxvd3MgeW91IHRvIGNyZWF0ZSBzdHJpa2UgdGV4dC5cbiAqIEBzZWUgaHR0cHM6Ly93d3cudGlwdGFwLmRldi9hcGkvbWFya3Mvc3RyaWtlXG4gKi9cbmNvbnN0IFN0cmlrZSA9IE1hcmsuY3JlYXRlKHtcbiAgICBuYW1lOiAnc3RyaWtlJyxcbiAgICBhZGRPcHRpb25zKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgSFRNTEF0dHJpYnV0ZXM6IHt9LFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgcGFyc2VIVE1MKCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRhZzogJ3MnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0YWc6ICdkZWwnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0YWc6ICdzdHJpa2UnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdHlsZTogJ3RleHQtZGVjb3JhdGlvbicsXG4gICAgICAgICAgICAgICAgY29uc3VtaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBnZXRBdHRyczogc3R5bGUgPT4gKHN0eWxlLmluY2x1ZGVzKCdsaW5lLXRocm91Z2gnKSA/IHt9IDogZmFsc2UpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXTtcbiAgICB9LFxuICAgIHJlbmRlckhUTUwoeyBIVE1MQXR0cmlidXRlcyB9KSB7XG4gICAgICAgIHJldHVybiBbJ3MnLCBtZXJnZUF0dHJpYnV0ZXModGhpcy5vcHRpb25zLkhUTUxBdHRyaWJ1dGVzLCBIVE1MQXR0cmlidXRlcyksIDBdO1xuICAgIH0sXG4gICAgYWRkQ29tbWFuZHMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzZXRTdHJpa2U6ICgpID0+ICh7IGNvbW1hbmRzIH0pID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWFuZHMuc2V0TWFyayh0aGlzLm5hbWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRvZ2dsZVN0cmlrZTogKCkgPT4gKHsgY29tbWFuZHMgfSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb21tYW5kcy50b2dnbGVNYXJrKHRoaXMubmFtZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdW5zZXRTdHJpa2U6ICgpID0+ICh7IGNvbW1hbmRzIH0pID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWFuZHMudW5zZXRNYXJrKHRoaXMubmFtZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgYWRkS2V5Ym9hcmRTaG9ydGN1dHMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnTW9kLVNoaWZ0LXMnOiAoKSA9PiB0aGlzLmVkaXRvci5jb21tYW5kcy50b2dnbGVTdHJpa2UoKSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIGFkZElucHV0UnVsZXMoKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBtYXJrSW5wdXRSdWxlKHtcbiAgICAgICAgICAgICAgICBmaW5kOiBpbnB1dFJlZ2V4LFxuICAgICAgICAgICAgICAgIHR5cGU6IHRoaXMudHlwZSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICBdO1xuICAgIH0sXG4gICAgYWRkUGFzdGVSdWxlcygpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIG1hcmtQYXN0ZVJ1bGUoe1xuICAgICAgICAgICAgICAgIGZpbmQ6IHBhc3RlUmVnZXgsXG4gICAgICAgICAgICAgICAgdHlwZTogdGhpcy50eXBlLFxuICAgICAgICAgICAgfSksXG4gICAgICAgIF07XG4gICAgfSxcbn0pO1xuXG5leHBvcnQgeyBTdHJpa2UsIFN0cmlrZSBhcyBkZWZhdWx0LCBpbnB1dFJlZ2V4LCBwYXN0ZVJlZ2V4IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJNYXJrIiwibWVyZ2VBdHRyaWJ1dGVzIiwibWFya0lucHV0UnVsZSIsIm1hcmtQYXN0ZVJ1bGUiLCJpbnB1dFJlZ2V4IiwicGFzdGVSZWdleCIsIlN0cmlrZSIsImNyZWF0ZSIsIm5hbWUiLCJhZGRPcHRpb25zIiwiSFRNTEF0dHJpYnV0ZXMiLCJwYXJzZUhUTUwiLCJ0YWciLCJzdHlsZSIsImNvbnN1bWluZyIsImdldEF0dHJzIiwiaW5jbHVkZXMiLCJyZW5kZXJIVE1MIiwiX3JlZiIsIm9wdGlvbnMiLCJhZGRDb21tYW5kcyIsIl90aGlzIiwic2V0U3RyaWtlIiwiX3JlZjIiLCJjb21tYW5kcyIsInNldE1hcmsiLCJ0b2dnbGVTdHJpa2UiLCJfcmVmMyIsInRvZ2dsZU1hcmsiLCJ1bnNldFN0cmlrZSIsIl9yZWY0IiwidW5zZXRNYXJrIiwiYWRkS2V5Ym9hcmRTaG9ydGN1dHMiLCJfdGhpczIiLCJNb2RTaGlmdFMiLCJlZGl0b3IiLCJhZGRJbnB1dFJ1bGVzIiwiZmluZCIsInR5cGUiLCJhZGRQYXN0ZVJ1bGVzIiwiZGVmYXVsdCJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-strike/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-table-cell/dist/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tiptap/extension-table-cell/dist/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TableCell: () => (/* binding */ TableCell),\n/* harmony export */   \"default\": () => (/* binding */ TableCell)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\n\n/**\n * This extension allows you to create table cells.\n * @see https://www.tiptap.dev/api/nodes/table-cell\n */\nvar TableCell = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({\n  name: 'tableCell',\n  addOptions: function addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n  content: 'block+',\n  addAttributes: function addAttributes() {\n    return {\n      colspan: {\n        \"default\": 1\n      },\n      rowspan: {\n        \"default\": 1\n      },\n      colwidth: {\n        \"default\": null,\n        parseHTML: function parseHTML(element) {\n          var colwidth = element.getAttribute('colwidth');\n          var value = colwidth ? colwidth.split(',').map(function (width) {\n            return parseInt(width, 10);\n          }) : null;\n          return value;\n        }\n      }\n    };\n  },\n  tableRole: 'cell',\n  isolating: true,\n  parseHTML: function parseHTML() {\n    return [{\n      tag: 'td'\n    }];\n  },\n  renderHTML: function renderHTML(_ref) {\n    var HTMLAttributes = _ref.HTMLAttributes;\n    return ['td', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tdGFibGUtY2VsbC9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFxRDs7QUFFckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFNRSxTQUFTLEdBQUdGLDhDQUFJLENBQUNHLE1BQU0sQ0FBQztFQUMxQkMsSUFBSSxFQUFFLFdBQVc7RUFDakJDLFVBQVUsV0FBVkEsVUFBVUEsQ0FBQSxFQUFHO0lBQ1QsT0FBTztNQUNIQyxjQUFjLEVBQUUsQ0FBQztJQUNyQixDQUFDO0VBQ0wsQ0FBQztFQUNEQyxPQUFPLEVBQUUsUUFBUTtFQUNqQkMsYUFBYSxXQUFiQSxhQUFhQSxDQUFBLEVBQUc7SUFDWixPQUFPO01BQ0hDLE9BQU8sRUFBRTtRQUNMLFdBQVM7TUFDYixDQUFDO01BQ0RDLE9BQU8sRUFBRTtRQUNMLFdBQVM7TUFDYixDQUFDO01BQ0RDLFFBQVEsRUFBRTtRQUNOLFdBQVMsSUFBSTtRQUNiQyxTQUFTLEVBQUUsU0FBWEEsU0FBU0EsQ0FBRUMsT0FBTyxFQUFJO1VBQ2xCLElBQU1GLFFBQVEsR0FBR0UsT0FBTyxDQUFDQyxZQUFZLENBQUMsVUFBVSxDQUFDO1VBQ2pELElBQU1DLEtBQUssR0FBR0osUUFBUSxHQUNoQkEsUUFBUSxDQUFDSyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUNDLEdBQUcsQ0FBQyxVQUFBQyxLQUFLO1lBQUEsT0FBSUMsUUFBUSxDQUFDRCxLQUFLLEVBQUUsRUFBRSxDQUFDO1VBQUEsRUFBQyxHQUNyRCxJQUFJO1VBQ1YsT0FBT0gsS0FBSztRQUNoQjtNQUNKO0lBQ0osQ0FBQztFQUNMLENBQUM7RUFDREssU0FBUyxFQUFFLE1BQU07RUFDakJDLFNBQVMsRUFBRSxJQUFJO0VBQ2ZULFNBQVMsV0FBVEEsU0FBU0EsQ0FBQSxFQUFHO0lBQ1IsT0FBTyxDQUNIO01BQUVVLEdBQUcsRUFBRTtJQUFLLENBQUMsQ0FDaEI7RUFDTCxDQUFDO0VBQ0RDLFVBQVUsV0FBVkEsVUFBVUEsQ0FBQUMsSUFBQSxFQUFxQjtJQUFBLElBQWxCbEIsY0FBYyxHQUFBa0IsSUFBQSxDQUFkbEIsY0FBYztJQUN2QixPQUFPLENBQUMsSUFBSSxFQUFFTCw2REFBZSxDQUFDLElBQUksQ0FBQ3dCLE9BQU8sQ0FBQ25CLGNBQWMsRUFBRUEsY0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0VBQ2xGO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXEB0aXB0YXBcXGV4dGVuc2lvbi10YWJsZS1jZWxsXFxkaXN0XFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOb2RlLCBtZXJnZUF0dHJpYnV0ZXMgfSBmcm9tICdAdGlwdGFwL2NvcmUnO1xuXG4vKipcbiAqIFRoaXMgZXh0ZW5zaW9uIGFsbG93cyB5b3UgdG8gY3JlYXRlIHRhYmxlIGNlbGxzLlxuICogQHNlZSBodHRwczovL3d3dy50aXB0YXAuZGV2L2FwaS9ub2Rlcy90YWJsZS1jZWxsXG4gKi9cbmNvbnN0IFRhYmxlQ2VsbCA9IE5vZGUuY3JlYXRlKHtcbiAgICBuYW1lOiAndGFibGVDZWxsJyxcbiAgICBhZGRPcHRpb25zKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgSFRNTEF0dHJpYnV0ZXM6IHt9LFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgY29udGVudDogJ2Jsb2NrKycsXG4gICAgYWRkQXR0cmlidXRlcygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNvbHNwYW46IHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiAxLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJvd3NwYW46IHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiAxLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbHdpZHRoOiB7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDogbnVsbCxcbiAgICAgICAgICAgICAgICBwYXJzZUhUTUw6IGVsZW1lbnQgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb2x3aWR0aCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdjb2x3aWR0aCcpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGNvbHdpZHRoXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGNvbHdpZHRoLnNwbGl0KCcsJykubWFwKHdpZHRoID0+IHBhcnNlSW50KHdpZHRoLCAxMCkpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRhYmxlUm9sZTogJ2NlbGwnLFxuICAgIGlzb2xhdGluZzogdHJ1ZSxcbiAgICBwYXJzZUhUTUwoKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICB7IHRhZzogJ3RkJyB9LFxuICAgICAgICBdO1xuICAgIH0sXG4gICAgcmVuZGVySFRNTCh7IEhUTUxBdHRyaWJ1dGVzIH0pIHtcbiAgICAgICAgcmV0dXJuIFsndGQnLCBtZXJnZUF0dHJpYnV0ZXModGhpcy5vcHRpb25zLkhUTUxBdHRyaWJ1dGVzLCBIVE1MQXR0cmlidXRlcyksIDBdO1xuICAgIH0sXG59KTtcblxuZXhwb3J0IHsgVGFibGVDZWxsLCBUYWJsZUNlbGwgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOlsiTm9kZSIsIm1lcmdlQXR0cmlidXRlcyIsIlRhYmxlQ2VsbCIsImNyZWF0ZSIsIm5hbWUiLCJhZGRPcHRpb25zIiwiSFRNTEF0dHJpYnV0ZXMiLCJjb250ZW50IiwiYWRkQXR0cmlidXRlcyIsImNvbHNwYW4iLCJyb3dzcGFuIiwiY29sd2lkdGgiLCJwYXJzZUhUTUwiLCJlbGVtZW50IiwiZ2V0QXR0cmlidXRlIiwidmFsdWUiLCJzcGxpdCIsIm1hcCIsIndpZHRoIiwicGFyc2VJbnQiLCJ0YWJsZVJvbGUiLCJpc29sYXRpbmciLCJ0YWciLCJyZW5kZXJIVE1MIiwiX3JlZiIsIm9wdGlvbnMiLCJkZWZhdWx0Il0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-table-cell/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-table-header/dist/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tiptap/extension-table-header/dist/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TableHeader: () => (/* binding */ TableHeader),\n/* harmony export */   \"default\": () => (/* binding */ TableHeader)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\n\n/**\n * This extension allows you to create table headers.\n * @see https://www.tiptap.dev/api/nodes/table-header\n */\nvar TableHeader = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({\n  name: 'tableHeader',\n  addOptions: function addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n  content: 'block+',\n  addAttributes: function addAttributes() {\n    return {\n      colspan: {\n        \"default\": 1\n      },\n      rowspan: {\n        \"default\": 1\n      },\n      colwidth: {\n        \"default\": null,\n        parseHTML: function parseHTML(element) {\n          var colwidth = element.getAttribute('colwidth');\n          var value = colwidth ? colwidth.split(',').map(function (width) {\n            return parseInt(width, 10);\n          }) : null;\n          return value;\n        }\n      }\n    };\n  },\n  tableRole: 'header_cell',\n  isolating: true,\n  parseHTML: function parseHTML() {\n    return [{\n      tag: 'th'\n    }];\n  },\n  renderHTML: function renderHTML(_ref) {\n    var HTMLAttributes = _ref.HTMLAttributes;\n    return ['th', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tdGFibGUtaGVhZGVyL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXFEOztBQUVyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQU1FLFdBQVcsR0FBR0YsOENBQUksQ0FBQ0csTUFBTSxDQUFDO0VBQzVCQyxJQUFJLEVBQUUsYUFBYTtFQUNuQkMsVUFBVSxXQUFWQSxVQUFVQSxDQUFBLEVBQUc7SUFDVCxPQUFPO01BQ0hDLGNBQWMsRUFBRSxDQUFDO0lBQ3JCLENBQUM7RUFDTCxDQUFDO0VBQ0RDLE9BQU8sRUFBRSxRQUFRO0VBQ2pCQyxhQUFhLFdBQWJBLGFBQWFBLENBQUEsRUFBRztJQUNaLE9BQU87TUFDSEMsT0FBTyxFQUFFO1FBQ0wsV0FBUztNQUNiLENBQUM7TUFDREMsT0FBTyxFQUFFO1FBQ0wsV0FBUztNQUNiLENBQUM7TUFDREMsUUFBUSxFQUFFO1FBQ04sV0FBUyxJQUFJO1FBQ2JDLFNBQVMsRUFBRSxTQUFYQSxTQUFTQSxDQUFFQyxPQUFPLEVBQUk7VUFDbEIsSUFBTUYsUUFBUSxHQUFHRSxPQUFPLENBQUNDLFlBQVksQ0FBQyxVQUFVLENBQUM7VUFDakQsSUFBTUMsS0FBSyxHQUFHSixRQUFRLEdBQ2hCQSxRQUFRLENBQUNLLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQ0MsR0FBRyxDQUFDLFVBQUFDLEtBQUs7WUFBQSxPQUFJQyxRQUFRLENBQUNELEtBQUssRUFBRSxFQUFFLENBQUM7VUFBQSxFQUFDLEdBQ3JELElBQUk7VUFDVixPQUFPSCxLQUFLO1FBQ2hCO01BQ0o7SUFDSixDQUFDO0VBQ0wsQ0FBQztFQUNESyxTQUFTLEVBQUUsYUFBYTtFQUN4QkMsU0FBUyxFQUFFLElBQUk7RUFDZlQsU0FBUyxXQUFUQSxTQUFTQSxDQUFBLEVBQUc7SUFDUixPQUFPLENBQ0g7TUFBRVUsR0FBRyxFQUFFO0lBQUssQ0FBQyxDQUNoQjtFQUNMLENBQUM7RUFDREMsVUFBVSxXQUFWQSxVQUFVQSxDQUFBQyxJQUFBLEVBQXFCO0lBQUEsSUFBbEJsQixjQUFjLEdBQUFrQixJQUFBLENBQWRsQixjQUFjO0lBQ3ZCLE9BQU8sQ0FBQyxJQUFJLEVBQUVMLDZEQUFlLENBQUMsSUFBSSxDQUFDd0IsT0FBTyxDQUFDbkIsY0FBYyxFQUFFQSxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7RUFDbEY7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xcQHRpcHRhcFxcZXh0ZW5zaW9uLXRhYmxlLWhlYWRlclxcZGlzdFxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTm9kZSwgbWVyZ2VBdHRyaWJ1dGVzIH0gZnJvbSAnQHRpcHRhcC9jb3JlJztcblxuLyoqXG4gKiBUaGlzIGV4dGVuc2lvbiBhbGxvd3MgeW91IHRvIGNyZWF0ZSB0YWJsZSBoZWFkZXJzLlxuICogQHNlZSBodHRwczovL3d3dy50aXB0YXAuZGV2L2FwaS9ub2Rlcy90YWJsZS1oZWFkZXJcbiAqL1xuY29uc3QgVGFibGVIZWFkZXIgPSBOb2RlLmNyZWF0ZSh7XG4gICAgbmFtZTogJ3RhYmxlSGVhZGVyJyxcbiAgICBhZGRPcHRpb25zKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgSFRNTEF0dHJpYnV0ZXM6IHt9LFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgY29udGVudDogJ2Jsb2NrKycsXG4gICAgYWRkQXR0cmlidXRlcygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNvbHNwYW46IHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiAxLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJvd3NwYW46IHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiAxLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbHdpZHRoOiB7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDogbnVsbCxcbiAgICAgICAgICAgICAgICBwYXJzZUhUTUw6IGVsZW1lbnQgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb2x3aWR0aCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdjb2x3aWR0aCcpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGNvbHdpZHRoXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGNvbHdpZHRoLnNwbGl0KCcsJykubWFwKHdpZHRoID0+IHBhcnNlSW50KHdpZHRoLCAxMCkpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRhYmxlUm9sZTogJ2hlYWRlcl9jZWxsJyxcbiAgICBpc29sYXRpbmc6IHRydWUsXG4gICAgcGFyc2VIVE1MKCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgeyB0YWc6ICd0aCcgfSxcbiAgICAgICAgXTtcbiAgICB9LFxuICAgIHJlbmRlckhUTUwoeyBIVE1MQXR0cmlidXRlcyB9KSB7XG4gICAgICAgIHJldHVybiBbJ3RoJywgbWVyZ2VBdHRyaWJ1dGVzKHRoaXMub3B0aW9ucy5IVE1MQXR0cmlidXRlcywgSFRNTEF0dHJpYnV0ZXMpLCAwXTtcbiAgICB9LFxufSk7XG5cbmV4cG9ydCB7IFRhYmxlSGVhZGVyLCBUYWJsZUhlYWRlciBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJOb2RlIiwibWVyZ2VBdHRyaWJ1dGVzIiwiVGFibGVIZWFkZXIiLCJjcmVhdGUiLCJuYW1lIiwiYWRkT3B0aW9ucyIsIkhUTUxBdHRyaWJ1dGVzIiwiY29udGVudCIsImFkZEF0dHJpYnV0ZXMiLCJjb2xzcGFuIiwicm93c3BhbiIsImNvbHdpZHRoIiwicGFyc2VIVE1MIiwiZWxlbWVudCIsImdldEF0dHJpYnV0ZSIsInZhbHVlIiwic3BsaXQiLCJtYXAiLCJ3aWR0aCIsInBhcnNlSW50IiwidGFibGVSb2xlIiwiaXNvbGF0aW5nIiwidGFnIiwicmVuZGVySFRNTCIsIl9yZWYiLCJvcHRpb25zIiwiZGVmYXVsdCJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-table-header/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-table-row/dist/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tiptap/extension-table-row/dist/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TableRow: () => (/* binding */ TableRow),\n/* harmony export */   \"default\": () => (/* binding */ TableRow)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\n\n/**\n * This extension allows you to create table rows.\n * @see https://www.tiptap.dev/api/nodes/table-row\n */\nvar TableRow = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({\n  name: 'tableRow',\n  addOptions: function addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n  content: '(tableCell | tableHeader)*',\n  tableRole: 'row',\n  parseHTML: function parseHTML() {\n    return [{\n      tag: 'tr'\n    }];\n  },\n  renderHTML: function renderHTML(_ref) {\n    var HTMLAttributes = _ref.HTMLAttributes;\n    return ['tr', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tdGFibGUtcm93L2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXFEOztBQUVyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQU1FLFFBQVEsR0FBR0YsOENBQUksQ0FBQ0csTUFBTSxDQUFDO0VBQ3pCQyxJQUFJLEVBQUUsVUFBVTtFQUNoQkMsVUFBVSxXQUFWQSxVQUFVQSxDQUFBLEVBQUc7SUFDVCxPQUFPO01BQ0hDLGNBQWMsRUFBRSxDQUFDO0lBQ3JCLENBQUM7RUFDTCxDQUFDO0VBQ0RDLE9BQU8sRUFBRSw0QkFBNEI7RUFDckNDLFNBQVMsRUFBRSxLQUFLO0VBQ2hCQyxTQUFTLFdBQVRBLFNBQVNBLENBQUEsRUFBRztJQUNSLE9BQU8sQ0FDSDtNQUFFQyxHQUFHLEVBQUU7SUFBSyxDQUFDLENBQ2hCO0VBQ0wsQ0FBQztFQUNEQyxVQUFVLFdBQVZBLFVBQVVBLENBQUFDLElBQUEsRUFBcUI7SUFBQSxJQUFsQk4sY0FBYyxHQUFBTSxJQUFBLENBQWROLGNBQWM7SUFDdkIsT0FBTyxDQUFDLElBQUksRUFBRUwsNkRBQWUsQ0FBQyxJQUFJLENBQUNZLE9BQU8sQ0FBQ1AsY0FBYyxFQUFFQSxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7RUFDbEY7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xcQHRpcHRhcFxcZXh0ZW5zaW9uLXRhYmxlLXJvd1xcZGlzdFxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTm9kZSwgbWVyZ2VBdHRyaWJ1dGVzIH0gZnJvbSAnQHRpcHRhcC9jb3JlJztcblxuLyoqXG4gKiBUaGlzIGV4dGVuc2lvbiBhbGxvd3MgeW91IHRvIGNyZWF0ZSB0YWJsZSByb3dzLlxuICogQHNlZSBodHRwczovL3d3dy50aXB0YXAuZGV2L2FwaS9ub2Rlcy90YWJsZS1yb3dcbiAqL1xuY29uc3QgVGFibGVSb3cgPSBOb2RlLmNyZWF0ZSh7XG4gICAgbmFtZTogJ3RhYmxlUm93JyxcbiAgICBhZGRPcHRpb25zKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgSFRNTEF0dHJpYnV0ZXM6IHt9LFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgY29udGVudDogJyh0YWJsZUNlbGwgfCB0YWJsZUhlYWRlcikqJyxcbiAgICB0YWJsZVJvbGU6ICdyb3cnLFxuICAgIHBhcnNlSFRNTCgpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHsgdGFnOiAndHInIH0sXG4gICAgICAgIF07XG4gICAgfSxcbiAgICByZW5kZXJIVE1MKHsgSFRNTEF0dHJpYnV0ZXMgfSkge1xuICAgICAgICByZXR1cm4gWyd0cicsIG1lcmdlQXR0cmlidXRlcyh0aGlzLm9wdGlvbnMuSFRNTEF0dHJpYnV0ZXMsIEhUTUxBdHRyaWJ1dGVzKSwgMF07XG4gICAgfSxcbn0pO1xuXG5leHBvcnQgeyBUYWJsZVJvdywgVGFibGVSb3cgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOlsiTm9kZSIsIm1lcmdlQXR0cmlidXRlcyIsIlRhYmxlUm93IiwiY3JlYXRlIiwibmFtZSIsImFkZE9wdGlvbnMiLCJIVE1MQXR0cmlidXRlcyIsImNvbnRlbnQiLCJ0YWJsZVJvbGUiLCJwYXJzZUhUTUwiLCJ0YWciLCJyZW5kZXJIVE1MIiwiX3JlZiIsIm9wdGlvbnMiLCJkZWZhdWx0Il0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-table-row/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-table/dist/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@tiptap/extension-table/dist/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Table: () => (/* binding */ Table),\n/* harmony export */   createColGroup: () => (/* binding */ createColGroup),\n/* harmony export */   createTable: () => (/* binding */ createTable),\n/* harmony export */   \"default\": () => (/* binding */ Table)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/pm/state */ \"(ssr)/./node_modules/@tiptap/pm/state/dist/index.js\");\n/* harmony import */ var _tiptap_pm_tables__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tiptap/pm/tables */ \"(ssr)/./node_modules/@tiptap/pm/tables/dist/index.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\nfunction getColStyleDeclaration(minWidth, width) {\n  if (width) {\n    // apply the stored width unless it is below the configured minimum cell width\n    return ['width', \"\".concat(Math.max(width, minWidth), \"px\")];\n  }\n  // set the minimum with on the column if it has no stored width\n  return ['min-width', \"\".concat(minWidth, \"px\")];\n}\nfunction updateColumns(node, colgroup,\n// <colgroup> has the same prototype as <col>\ntable, cellMinWidth, overrideCol, overrideValue) {\n  var _a;\n  var totalWidth = 0;\n  var fixedWidth = true;\n  var nextDOM = colgroup.firstChild;\n  var row = node.firstChild;\n  if (row !== null) {\n    for (var i = 0, col = 0; i < row.childCount; i += 1) {\n      var _row$child$attrs = row.child(i).attrs,\n        colspan = _row$child$attrs.colspan,\n        colwidth = _row$child$attrs.colwidth;\n      for (var j = 0; j < colspan; j += 1, col += 1) {\n        var hasWidth = overrideCol === col ? overrideValue : colwidth && colwidth[j];\n        var cssWidth = hasWidth ? \"\".concat(hasWidth, \"px\") : '';\n        totalWidth += hasWidth || cellMinWidth;\n        if (!hasWidth) {\n          fixedWidth = false;\n        }\n        if (!nextDOM) {\n          var colElement = document.createElement('col');\n          var _getColStyleDeclarati = getColStyleDeclaration(cellMinWidth, hasWidth),\n            _getColStyleDeclarati2 = _slicedToArray(_getColStyleDeclarati, 2),\n            propertyKey = _getColStyleDeclarati2[0],\n            propertyValue = _getColStyleDeclarati2[1];\n          colElement.style.setProperty(propertyKey, propertyValue);\n          colgroup.appendChild(colElement);\n        } else {\n          if (nextDOM.style.width !== cssWidth) {\n            var _getColStyleDeclarati3 = getColStyleDeclaration(cellMinWidth, hasWidth),\n              _getColStyleDeclarati4 = _slicedToArray(_getColStyleDeclarati3, 2),\n              _propertyKey = _getColStyleDeclarati4[0],\n              _propertyValue = _getColStyleDeclarati4[1];\n            nextDOM.style.setProperty(_propertyKey, _propertyValue);\n          }\n          nextDOM = nextDOM.nextSibling;\n        }\n      }\n    }\n  }\n  while (nextDOM) {\n    var after = nextDOM.nextSibling;\n    (_a = nextDOM.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(nextDOM);\n    nextDOM = after;\n  }\n  if (fixedWidth) {\n    table.style.width = \"\".concat(totalWidth, \"px\");\n    table.style.minWidth = '';\n  } else {\n    table.style.width = '';\n    table.style.minWidth = \"\".concat(totalWidth, \"px\");\n  }\n}\nvar TableView = /*#__PURE__*/function () {\n  function TableView(node, cellMinWidth) {\n    _classCallCheck(this, TableView);\n    this.node = node;\n    this.cellMinWidth = cellMinWidth;\n    this.dom = document.createElement('div');\n    this.dom.className = 'tableWrapper';\n    this.table = this.dom.appendChild(document.createElement('table'));\n    this.colgroup = this.table.appendChild(document.createElement('colgroup'));\n    updateColumns(node, this.colgroup, this.table, cellMinWidth);\n    this.contentDOM = this.table.appendChild(document.createElement('tbody'));\n  }\n  return _createClass(TableView, [{\n    key: \"update\",\n    value: function update(node) {\n      if (node.type !== this.node.type) {\n        return false;\n      }\n      this.node = node;\n      updateColumns(node, this.colgroup, this.table, this.cellMinWidth);\n      return true;\n    }\n  }, {\n    key: \"ignoreMutation\",\n    value: function ignoreMutation(mutation) {\n      return mutation.type === 'attributes' && (mutation.target === this.table || this.colgroup.contains(mutation.target));\n    }\n  }]);\n}();\nfunction createColGroup(node, cellMinWidth, overrideCol, overrideValue) {\n  var totalWidth = 0;\n  var fixedWidth = true;\n  var cols = [];\n  var row = node.firstChild;\n  if (!row) {\n    return {};\n  }\n  for (var i = 0, col = 0; i < row.childCount; i += 1) {\n    var _row$child$attrs2 = row.child(i).attrs,\n      colspan = _row$child$attrs2.colspan,\n      colwidth = _row$child$attrs2.colwidth;\n    for (var j = 0; j < colspan; j += 1, col += 1) {\n      var hasWidth = overrideCol === col ? overrideValue : colwidth && colwidth[j];\n      totalWidth += hasWidth || cellMinWidth;\n      if (!hasWidth) {\n        fixedWidth = false;\n      }\n      var _getColStyleDeclarati5 = getColStyleDeclaration(cellMinWidth, hasWidth),\n        _getColStyleDeclarati6 = _slicedToArray(_getColStyleDeclarati5, 2),\n        property = _getColStyleDeclarati6[0],\n        value = _getColStyleDeclarati6[1];\n      cols.push(['col', {\n        style: \"\".concat(property, \": \").concat(value)\n      }]);\n    }\n  }\n  var tableWidth = fixedWidth ? \"\".concat(totalWidth, \"px\") : '';\n  var tableMinWidth = fixedWidth ? '' : \"\".concat(totalWidth, \"px\");\n  var colgroup = ['colgroup', {}].concat(cols);\n  return {\n    colgroup: colgroup,\n    tableWidth: tableWidth,\n    tableMinWidth: tableMinWidth\n  };\n}\nfunction createCell(cellType, cellContent) {\n  if (cellContent) {\n    return cellType.createChecked(null, cellContent);\n  }\n  return cellType.createAndFill();\n}\nfunction getTableNodeTypes(schema) {\n  if (schema.cached.tableNodeTypes) {\n    return schema.cached.tableNodeTypes;\n  }\n  var roles = {};\n  Object.keys(schema.nodes).forEach(function (type) {\n    var nodeType = schema.nodes[type];\n    if (nodeType.spec.tableRole) {\n      roles[nodeType.spec.tableRole] = nodeType;\n    }\n  });\n  schema.cached.tableNodeTypes = roles;\n  return roles;\n}\nfunction createTable(schema, rowsCount, colsCount, withHeaderRow, cellContent) {\n  var types = getTableNodeTypes(schema);\n  var headerCells = [];\n  var cells = [];\n  for (var index = 0; index < colsCount; index += 1) {\n    var cell = createCell(types.cell, cellContent);\n    if (cell) {\n      cells.push(cell);\n    }\n    if (withHeaderRow) {\n      var headerCell = createCell(types.header_cell, cellContent);\n      if (headerCell) {\n        headerCells.push(headerCell);\n      }\n    }\n  }\n  var rows = [];\n  for (var _index = 0; _index < rowsCount; _index += 1) {\n    rows.push(types.row.createChecked(null, withHeaderRow && _index === 0 ? headerCells : cells));\n  }\n  return types.table.createChecked(null, rows);\n}\nfunction isCellSelection(value) {\n  return value instanceof _tiptap_pm_tables__WEBPACK_IMPORTED_MODULE_1__.CellSelection;\n}\nvar deleteTableWhenAllCellsSelected = function deleteTableWhenAllCellsSelected(_ref) {\n  var editor = _ref.editor;\n  var selection = editor.state.selection;\n  if (!isCellSelection(selection)) {\n    return false;\n  }\n  var cellCount = 0;\n  var table = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_2__.findParentNodeClosestToPos)(selection.ranges[0].$from, function (node) {\n    return node.type.name === 'table';\n  });\n  table === null || table === void 0 ? void 0 : table.node.descendants(function (node) {\n    if (node.type.name === 'table') {\n      return false;\n    }\n    if (['tableCell', 'tableHeader'].includes(node.type.name)) {\n      cellCount += 1;\n    }\n  });\n  var allCellsSelected = cellCount === selection.ranges.length;\n  if (!allCellsSelected) {\n    return false;\n  }\n  editor.commands.deleteTable();\n  return true;\n};\n\n/**\n * This extension allows you to create tables.\n * @see https://www.tiptap.dev/api/nodes/table\n */\nvar Table = _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.Node.create({\n  name: 'table',\n  // @ts-ignore\n  addOptions: function addOptions() {\n    return {\n      HTMLAttributes: {},\n      resizable: false,\n      handleWidth: 5,\n      cellMinWidth: 25,\n      // TODO: fix\n      View: TableView,\n      lastColumnResizable: true,\n      allowTableNodeSelection: false\n    };\n  },\n  content: 'tableRow+',\n  tableRole: 'table',\n  isolating: true,\n  group: 'block',\n  parseHTML: function parseHTML() {\n    return [{\n      tag: 'table'\n    }];\n  },\n  renderHTML: function renderHTML(_ref2) {\n    var node = _ref2.node,\n      HTMLAttributes = _ref2.HTMLAttributes;\n    var _createColGroup = createColGroup(node, this.options.cellMinWidth),\n      colgroup = _createColGroup.colgroup,\n      tableWidth = _createColGroup.tableWidth,\n      tableMinWidth = _createColGroup.tableMinWidth;\n    var table = ['table', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_2__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes, {\n      style: tableWidth ? \"width: \".concat(tableWidth) : \"min-width: \".concat(tableMinWidth)\n    }), colgroup, ['tbody', 0]];\n    return table;\n  },\n  addCommands: function addCommands() {\n    return {\n      insertTable: function insertTable() {\n        var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref3$rows = _ref3.rows,\n          rows = _ref3$rows === void 0 ? 3 : _ref3$rows,\n          _ref3$cols = _ref3.cols,\n          cols = _ref3$cols === void 0 ? 3 : _ref3$cols,\n          _ref3$withHeaderRow = _ref3.withHeaderRow,\n          withHeaderRow = _ref3$withHeaderRow === void 0 ? true : _ref3$withHeaderRow;\n        return function (_ref4) {\n          var tr = _ref4.tr,\n            dispatch = _ref4.dispatch,\n            editor = _ref4.editor;\n          var node = createTable(editor.schema, rows, cols, withHeaderRow);\n          if (dispatch) {\n            var offset = tr.selection.from + 1;\n            tr.replaceSelectionWith(node).scrollIntoView().setSelection(_tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.near(tr.doc.resolve(offset)));\n          }\n          return true;\n        };\n      },\n      addColumnBefore: function addColumnBefore() {\n        return function (_ref5) {\n          var state = _ref5.state,\n            dispatch = _ref5.dispatch;\n          return (0,_tiptap_pm_tables__WEBPACK_IMPORTED_MODULE_1__.addColumnBefore)(state, dispatch);\n        };\n      },\n      addColumnAfter: function addColumnAfter() {\n        return function (_ref6) {\n          var state = _ref6.state,\n            dispatch = _ref6.dispatch;\n          return (0,_tiptap_pm_tables__WEBPACK_IMPORTED_MODULE_1__.addColumnAfter)(state, dispatch);\n        };\n      },\n      deleteColumn: function deleteColumn() {\n        return function (_ref7) {\n          var state = _ref7.state,\n            dispatch = _ref7.dispatch;\n          return (0,_tiptap_pm_tables__WEBPACK_IMPORTED_MODULE_1__.deleteColumn)(state, dispatch);\n        };\n      },\n      addRowBefore: function addRowBefore() {\n        return function (_ref8) {\n          var state = _ref8.state,\n            dispatch = _ref8.dispatch;\n          return (0,_tiptap_pm_tables__WEBPACK_IMPORTED_MODULE_1__.addRowBefore)(state, dispatch);\n        };\n      },\n      addRowAfter: function addRowAfter() {\n        return function (_ref9) {\n          var state = _ref9.state,\n            dispatch = _ref9.dispatch;\n          return (0,_tiptap_pm_tables__WEBPACK_IMPORTED_MODULE_1__.addRowAfter)(state, dispatch);\n        };\n      },\n      deleteRow: function deleteRow() {\n        return function (_ref10) {\n          var state = _ref10.state,\n            dispatch = _ref10.dispatch;\n          return (0,_tiptap_pm_tables__WEBPACK_IMPORTED_MODULE_1__.deleteRow)(state, dispatch);\n        };\n      },\n      deleteTable: function deleteTable() {\n        return function (_ref11) {\n          var state = _ref11.state,\n            dispatch = _ref11.dispatch;\n          return (0,_tiptap_pm_tables__WEBPACK_IMPORTED_MODULE_1__.deleteTable)(state, dispatch);\n        };\n      },\n      mergeCells: function mergeCells() {\n        return function (_ref12) {\n          var state = _ref12.state,\n            dispatch = _ref12.dispatch;\n          return (0,_tiptap_pm_tables__WEBPACK_IMPORTED_MODULE_1__.mergeCells)(state, dispatch);\n        };\n      },\n      splitCell: function splitCell() {\n        return function (_ref13) {\n          var state = _ref13.state,\n            dispatch = _ref13.dispatch;\n          return (0,_tiptap_pm_tables__WEBPACK_IMPORTED_MODULE_1__.splitCell)(state, dispatch);\n        };\n      },\n      toggleHeaderColumn: function toggleHeaderColumn() {\n        return function (_ref14) {\n          var state = _ref14.state,\n            dispatch = _ref14.dispatch;\n          return (0,_tiptap_pm_tables__WEBPACK_IMPORTED_MODULE_1__.toggleHeader)('column')(state, dispatch);\n        };\n      },\n      toggleHeaderRow: function toggleHeaderRow() {\n        return function (_ref15) {\n          var state = _ref15.state,\n            dispatch = _ref15.dispatch;\n          return (0,_tiptap_pm_tables__WEBPACK_IMPORTED_MODULE_1__.toggleHeader)('row')(state, dispatch);\n        };\n      },\n      toggleHeaderCell: function toggleHeaderCell() {\n        return function (_ref16) {\n          var state = _ref16.state,\n            dispatch = _ref16.dispatch;\n          return (0,_tiptap_pm_tables__WEBPACK_IMPORTED_MODULE_1__.toggleHeaderCell)(state, dispatch);\n        };\n      },\n      mergeOrSplit: function mergeOrSplit() {\n        return function (_ref17) {\n          var state = _ref17.state,\n            dispatch = _ref17.dispatch;\n          if ((0,_tiptap_pm_tables__WEBPACK_IMPORTED_MODULE_1__.mergeCells)(state, dispatch)) {\n            return true;\n          }\n          return (0,_tiptap_pm_tables__WEBPACK_IMPORTED_MODULE_1__.splitCell)(state, dispatch);\n        };\n      },\n      setCellAttribute: function setCellAttribute(name, value) {\n        return function (_ref18) {\n          var state = _ref18.state,\n            dispatch = _ref18.dispatch;\n          return (0,_tiptap_pm_tables__WEBPACK_IMPORTED_MODULE_1__.setCellAttr)(name, value)(state, dispatch);\n        };\n      },\n      goToNextCell: function goToNextCell() {\n        return function (_ref19) {\n          var state = _ref19.state,\n            dispatch = _ref19.dispatch;\n          return (0,_tiptap_pm_tables__WEBPACK_IMPORTED_MODULE_1__.goToNextCell)(1)(state, dispatch);\n        };\n      },\n      goToPreviousCell: function goToPreviousCell() {\n        return function (_ref20) {\n          var state = _ref20.state,\n            dispatch = _ref20.dispatch;\n          return (0,_tiptap_pm_tables__WEBPACK_IMPORTED_MODULE_1__.goToNextCell)(-1)(state, dispatch);\n        };\n      },\n      fixTables: function fixTables() {\n        return function (_ref21) {\n          var state = _ref21.state,\n            dispatch = _ref21.dispatch;\n          if (dispatch) {\n            (0,_tiptap_pm_tables__WEBPACK_IMPORTED_MODULE_1__.fixTables)(state);\n          }\n          return true;\n        };\n      },\n      setCellSelection: function setCellSelection(position) {\n        return function (_ref22) {\n          var tr = _ref22.tr,\n            dispatch = _ref22.dispatch;\n          if (dispatch) {\n            var selection = _tiptap_pm_tables__WEBPACK_IMPORTED_MODULE_1__.CellSelection.create(tr.doc, position.anchorCell, position.headCell);\n            // @ts-ignore\n            tr.setSelection(selection);\n          }\n          return true;\n        };\n      }\n    };\n  },\n  addKeyboardShortcuts: function addKeyboardShortcuts() {\n    var _this = this;\n    return {\n      Tab: function Tab() {\n        if (_this.editor.commands.goToNextCell()) {\n          return true;\n        }\n        if (!_this.editor.can().addRowAfter()) {\n          return false;\n        }\n        return _this.editor.chain().addRowAfter().goToNextCell().run();\n      },\n      'Shift-Tab': function ShiftTab() {\n        return _this.editor.commands.goToPreviousCell();\n      },\n      Backspace: deleteTableWhenAllCellsSelected,\n      'Mod-Backspace': deleteTableWhenAllCellsSelected,\n      Delete: deleteTableWhenAllCellsSelected,\n      'Mod-Delete': deleteTableWhenAllCellsSelected\n    };\n  },\n  addProseMirrorPlugins: function addProseMirrorPlugins() {\n    var isResizable = this.options.resizable && this.editor.isEditable;\n    return [].concat(_toConsumableArray(isResizable ? [(0,_tiptap_pm_tables__WEBPACK_IMPORTED_MODULE_1__.columnResizing)({\n      handleWidth: this.options.handleWidth,\n      cellMinWidth: this.options.cellMinWidth,\n      defaultCellMinWidth: this.options.cellMinWidth,\n      View: this.options.View,\n      lastColumnResizable: this.options.lastColumnResizable\n    })] : []), [(0,_tiptap_pm_tables__WEBPACK_IMPORTED_MODULE_1__.tableEditing)({\n      allowTableNodeSelection: this.options.allowTableNodeSelection\n    })]);\n  },\n  extendNodeSchema: function extendNodeSchema(extension) {\n    var context = {\n      name: extension.name,\n      options: extension.options,\n      storage: extension.storage\n    };\n    return {\n      tableRole: (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_2__.callOrReturn)((0,_tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getExtensionField)(extension, 'tableRole', context))\n    };\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-table/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-task-item/dist/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tiptap/extension-task-item/dist/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TaskItem: () => (/* binding */ TaskItem),\n/* harmony export */   \"default\": () => (/* binding */ TaskItem),\n/* harmony export */   inputRegex: () => (/* binding */ inputRegex)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\n\n/**\n * Matches a task item to a - [ ] on input.\n */\nvar inputRegex = /^\\s*(\\[([( |x])?\\])\\s$/;\n/**\n * This extension allows you to create task items.\n * @see https://www.tiptap.dev/api/nodes/task-item\n */\nvar TaskItem = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({\n  name: 'taskItem',\n  addOptions: function addOptions() {\n    return {\n      nested: false,\n      HTMLAttributes: {},\n      taskListTypeName: 'taskList'\n    };\n  },\n  content: function content() {\n    return this.options.nested ? 'paragraph block*' : 'paragraph+';\n  },\n  defining: true,\n  addAttributes: function addAttributes() {\n    return {\n      checked: {\n        \"default\": false,\n        keepOnSplit: false,\n        parseHTML: function parseHTML(element) {\n          var dataChecked = element.getAttribute('data-checked');\n          return dataChecked === '' || dataChecked === 'true';\n        },\n        renderHTML: function renderHTML(attributes) {\n          return {\n            'data-checked': attributes.checked\n          };\n        }\n      }\n    };\n  },\n  parseHTML: function parseHTML() {\n    return [{\n      tag: \"li[data-type=\\\"\".concat(this.name, \"\\\"]\"),\n      priority: 51\n    }];\n  },\n  renderHTML: function renderHTML(_ref) {\n    var node = _ref.node,\n      HTMLAttributes = _ref.HTMLAttributes;\n    return ['li', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes, {\n      'data-type': this.name\n    }), ['label', ['input', {\n      type: 'checkbox',\n      checked: node.attrs.checked ? 'checked' : null\n    }], ['span']], ['div', 0]];\n  },\n  addKeyboardShortcuts: function addKeyboardShortcuts() {\n    var _this = this;\n    var shortcuts = {\n      Enter: function Enter() {\n        return _this.editor.commands.splitListItem(_this.name);\n      },\n      'Shift-Tab': function ShiftTab() {\n        return _this.editor.commands.liftListItem(_this.name);\n      }\n    };\n    if (!this.options.nested) {\n      return shortcuts;\n    }\n    return _objectSpread(_objectSpread({}, shortcuts), {}, {\n      Tab: function Tab() {\n        return _this.editor.commands.sinkListItem(_this.name);\n      }\n    });\n  },\n  addNodeView: function addNodeView() {\n    var _this2 = this;\n    return function (_ref2) {\n      var node = _ref2.node,\n        HTMLAttributes = _ref2.HTMLAttributes,\n        getPos = _ref2.getPos,\n        editor = _ref2.editor;\n      var listItem = document.createElement('li');\n      var checkboxWrapper = document.createElement('label');\n      var checkboxStyler = document.createElement('span');\n      var checkbox = document.createElement('input');\n      var content = document.createElement('div');\n      checkboxWrapper.contentEditable = 'false';\n      checkbox.type = 'checkbox';\n      checkbox.addEventListener('mousedown', function (event) {\n        return event.preventDefault();\n      });\n      checkbox.addEventListener('change', function (event) {\n        // if the editor isn’t editable and we don't have a handler for\n        // readonly checks we have to undo the latest change\n        if (!editor.isEditable && !_this2.options.onReadOnlyChecked) {\n          checkbox.checked = !checkbox.checked;\n          return;\n        }\n        var checked = event.target.checked;\n        if (editor.isEditable && typeof getPos === 'function') {\n          editor.chain().focus(undefined, {\n            scrollIntoView: false\n          }).command(function (_ref3) {\n            var tr = _ref3.tr;\n            var position = getPos();\n            if (typeof position !== 'number') {\n              return false;\n            }\n            var currentNode = tr.doc.nodeAt(position);\n            tr.setNodeMarkup(position, undefined, _objectSpread(_objectSpread({}, currentNode === null || currentNode === void 0 ? void 0 : currentNode.attrs), {}, {\n              checked: checked\n            }));\n            return true;\n          }).run();\n        }\n        if (!editor.isEditable && _this2.options.onReadOnlyChecked) {\n          // Reset state if onReadOnlyChecked returns false\n          if (!_this2.options.onReadOnlyChecked(node, checked)) {\n            checkbox.checked = !checkbox.checked;\n          }\n        }\n      });\n      Object.entries(_this2.options.HTMLAttributes).forEach(function (_ref4) {\n        var _ref5 = _slicedToArray(_ref4, 2),\n          key = _ref5[0],\n          value = _ref5[1];\n        listItem.setAttribute(key, value);\n      });\n      listItem.dataset.checked = node.attrs.checked;\n      checkbox.checked = node.attrs.checked;\n      checkboxWrapper.append(checkbox, checkboxStyler);\n      listItem.append(checkboxWrapper, content);\n      Object.entries(HTMLAttributes).forEach(function (_ref6) {\n        var _ref7 = _slicedToArray(_ref6, 2),\n          key = _ref7[0],\n          value = _ref7[1];\n        listItem.setAttribute(key, value);\n      });\n      return {\n        dom: listItem,\n        contentDOM: content,\n        update: function update(updatedNode) {\n          if (updatedNode.type !== _this2.type) {\n            return false;\n          }\n          listItem.dataset.checked = updatedNode.attrs.checked;\n          checkbox.checked = updatedNode.attrs.checked;\n          return true;\n        }\n      };\n    };\n  },\n  addInputRules: function addInputRules() {\n    return [(0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.wrappingInputRule)({\n      find: inputRegex,\n      type: this.type,\n      getAttributes: function getAttributes(match) {\n        return {\n          checked: match[match.length - 1] === 'x'\n        };\n      }\n    })];\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tdGFzay1pdGVtL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUF3RTs7QUFFeEU7QUFDQTtBQUNBO0FBQ0EsSUFBTUcsVUFBVSxHQUFHLHdCQUF3QjtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQU1DLFFBQVEsR0FBR0osOENBQUksQ0FBQ0ssTUFBTSxDQUFDO0VBQ3pCQyxJQUFJLEVBQUUsVUFBVTtFQUNoQkMsVUFBVSxXQUFWQSxVQUFVQSxDQUFBLEVBQUc7SUFDVCxPQUFPO01BQ0hDLE1BQU0sRUFBRSxLQUFLO01BQ2JDLGNBQWMsRUFBRSxDQUFDLENBQUM7TUFDbEJDLGdCQUFnQixFQUFFO0lBQ3RCLENBQUM7RUFDTCxDQUFDO0VBQ0RDLE9BQU8sV0FBUEEsT0FBT0EsQ0FBQSxFQUFHO0lBQ04sT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0osTUFBTSxHQUFHLGtCQUFrQixHQUFHLFlBQVk7RUFDbEUsQ0FBQztFQUNESyxRQUFRLEVBQUUsSUFBSTtFQUNkQyxhQUFhLFdBQWJBLGFBQWFBLENBQUEsRUFBRztJQUNaLE9BQU87TUFDSEMsT0FBTyxFQUFFO1FBQ0wsV0FBUyxLQUFLO1FBQ2RDLFdBQVcsRUFBRSxLQUFLO1FBQ2xCQyxTQUFTLEVBQUUsU0FBWEEsU0FBU0EsQ0FBRUMsT0FBTyxFQUFJO1VBQ2xCLElBQU1DLFdBQVcsR0FBR0QsT0FBTyxDQUFDRSxZQUFZLENBQUMsY0FBYyxDQUFDO1VBQ3hELE9BQU9ELFdBQVcsS0FBSyxFQUFFLElBQUlBLFdBQVcsS0FBSyxNQUFNO1FBQ3ZELENBQUM7UUFDREUsVUFBVSxFQUFFLFNBQVpBLFVBQVVBLENBQUVDLFVBQVU7VUFBQSxPQUFLO1lBQ3ZCLGNBQWMsRUFBRUEsVUFBVSxDQUFDUDtVQUMvQixDQUFDO1FBQUE7TUFDTDtJQUNKLENBQUM7RUFDTCxDQUFDO0VBQ0RFLFNBQVMsV0FBVEEsU0FBU0EsQ0FBQSxFQUFHO0lBQ1IsT0FBTyxDQUNIO01BQ0lNLEdBQUcsb0JBQUFDLE1BQUEsQ0FBbUIsSUFBSSxDQUFDbEIsSUFBSSxRQUFJO01BQ25DbUIsUUFBUSxFQUFFO0lBQ2QsQ0FBQyxDQUNKO0VBQ0wsQ0FBQztFQUNESixVQUFVLFdBQVZBLFVBQVVBLENBQUFLLElBQUEsRUFBMkI7SUFBQSxJQUF4QkMsSUFBSSxHQUFBRCxJQUFBLENBQUpDLElBQUk7TUFBRWxCLGNBQWMsR0FBQWlCLElBQUEsQ0FBZGpCLGNBQWM7SUFDN0IsT0FBTyxDQUNILElBQUksRUFDSlIsNkRBQWUsQ0FBQyxJQUFJLENBQUNXLE9BQU8sQ0FBQ0gsY0FBYyxFQUFFQSxjQUFjLEVBQUU7TUFDekQsV0FBVyxFQUFFLElBQUksQ0FBQ0g7SUFDdEIsQ0FBQyxDQUFDLEVBQ0YsQ0FDSSxPQUFPLEVBQ1AsQ0FDSSxPQUFPLEVBQ1A7TUFDSXNCLElBQUksRUFBRSxVQUFVO01BQ2hCYixPQUFPLEVBQUVZLElBQUksQ0FBQ0UsS0FBSyxDQUFDZCxPQUFPLEdBQUcsU0FBUyxHQUFHO0lBQzlDLENBQUMsQ0FDSixFQUNELENBQUMsTUFBTSxDQUFDLENBQ1gsRUFDRCxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FDYjtFQUNMLENBQUM7RUFDRGUsb0JBQW9CLFdBQXBCQSxvQkFBb0JBLENBQUEsRUFBRztJQUFBLElBQUFDLEtBQUE7SUFDbkIsSUFBTUMsU0FBUyxHQUFHO01BQ2RDLEtBQUssRUFBRSxTQUFQQSxLQUFLQSxDQUFBO1FBQUEsT0FBUUYsS0FBSSxDQUFDRyxNQUFNLENBQUNDLFFBQVEsQ0FBQ0MsYUFBYSxDQUFDTCxLQUFJLENBQUN6QixJQUFJLENBQUM7TUFBQTtNQUMxRCxXQUFXLEVBQUUsU0FBYitCLFFBQVdBLENBQUE7UUFBQSxPQUFRTixLQUFJLENBQUNHLE1BQU0sQ0FBQ0MsUUFBUSxDQUFDRyxZQUFZLENBQUNQLEtBQUksQ0FBQ3pCLElBQUksQ0FBQztNQUFBO0lBQ25FLENBQUM7SUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDTSxPQUFPLENBQUNKLE1BQU0sRUFBRTtNQUN0QixPQUFPd0IsU0FBUztJQUNwQjtJQUNBLE9BQUFPLGFBQUEsQ0FBQUEsYUFBQSxLQUNPUCxTQUFTO01BQ1pRLEdBQUcsRUFBRSxTQUFMQSxHQUFHQSxDQUFBO1FBQUEsT0FBUVQsS0FBSSxDQUFDRyxNQUFNLENBQUNDLFFBQVEsQ0FBQ00sWUFBWSxDQUFDVixLQUFJLENBQUN6QixJQUFJLENBQUM7TUFBQTtJQUFBO0VBRS9ELENBQUM7RUFDRG9DLFdBQVcsV0FBWEEsV0FBV0EsQ0FBQSxFQUFHO0lBQUEsSUFBQUMsTUFBQTtJQUNWLE9BQU8sVUFBQUMsS0FBQSxFQUErQztNQUFBLElBQTVDakIsSUFBSSxHQUFBaUIsS0FBQSxDQUFKakIsSUFBSTtRQUFFbEIsY0FBYyxHQUFBbUMsS0FBQSxDQUFkbkMsY0FBYztRQUFFb0MsTUFBTSxHQUFBRCxLQUFBLENBQU5DLE1BQU07UUFBRVgsTUFBTSxHQUFBVSxLQUFBLENBQU5WLE1BQU07TUFDMUMsSUFBTVksUUFBUSxHQUFHQyxRQUFRLENBQUNDLGFBQWEsQ0FBQyxJQUFJLENBQUM7TUFDN0MsSUFBTUMsZUFBZSxHQUFHRixRQUFRLENBQUNDLGFBQWEsQ0FBQyxPQUFPLENBQUM7TUFDdkQsSUFBTUUsY0FBYyxHQUFHSCxRQUFRLENBQUNDLGFBQWEsQ0FBQyxNQUFNLENBQUM7TUFDckQsSUFBTUcsUUFBUSxHQUFHSixRQUFRLENBQUNDLGFBQWEsQ0FBQyxPQUFPLENBQUM7TUFDaEQsSUFBTXJDLE9BQU8sR0FBR29DLFFBQVEsQ0FBQ0MsYUFBYSxDQUFDLEtBQUssQ0FBQztNQUM3Q0MsZUFBZSxDQUFDRyxlQUFlLEdBQUcsT0FBTztNQUN6Q0QsUUFBUSxDQUFDdkIsSUFBSSxHQUFHLFVBQVU7TUFDMUJ1QixRQUFRLENBQUNFLGdCQUFnQixDQUFDLFdBQVcsRUFBRSxVQUFBQyxLQUFLO1FBQUEsT0FBSUEsS0FBSyxDQUFDQyxjQUFjLENBQUMsQ0FBQztNQUFBLEVBQUM7TUFDdkVKLFFBQVEsQ0FBQ0UsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLFVBQUFDLEtBQUssRUFBSTtRQUN6QztRQUNBO1FBQ0EsSUFBSSxDQUFDcEIsTUFBTSxDQUFDc0IsVUFBVSxJQUFJLENBQUNiLE1BQUksQ0FBQy9CLE9BQU8sQ0FBQzZDLGlCQUFpQixFQUFFO1VBQ3ZETixRQUFRLENBQUNwQyxPQUFPLEdBQUcsQ0FBQ29DLFFBQVEsQ0FBQ3BDLE9BQU87VUFDcEM7UUFDSjtRQUNBLElBQVFBLE9BQU8sR0FBS3VDLEtBQUssQ0FBQ0ksTUFBTSxDQUF4QjNDLE9BQU87UUFDZixJQUFJbUIsTUFBTSxDQUFDc0IsVUFBVSxJQUFJLE9BQU9YLE1BQU0sS0FBSyxVQUFVLEVBQUU7VUFDbkRYLE1BQU0sQ0FDRHlCLEtBQUssQ0FBQyxDQUFDLENBQ1BDLEtBQUssQ0FBQ0MsU0FBUyxFQUFFO1lBQUVDLGNBQWMsRUFBRTtVQUFNLENBQUMsQ0FBQyxDQUMzQ0MsT0FBTyxDQUFDLFVBQUFDLEtBQUEsRUFBWTtZQUFBLElBQVRDLEVBQUUsR0FBQUQsS0FBQSxDQUFGQyxFQUFFO1lBQ2QsSUFBTUMsUUFBUSxHQUFHckIsTUFBTSxDQUFDLENBQUM7WUFDekIsSUFBSSxPQUFPcUIsUUFBUSxLQUFLLFFBQVEsRUFBRTtjQUM5QixPQUFPLEtBQUs7WUFDaEI7WUFDQSxJQUFNQyxXQUFXLEdBQUdGLEVBQUUsQ0FBQ0csR0FBRyxDQUFDQyxNQUFNLENBQUNILFFBQVEsQ0FBQztZQUMzQ0QsRUFBRSxDQUFDSyxhQUFhLENBQUNKLFFBQVEsRUFBRUwsU0FBUyxFQUFBdEIsYUFBQSxDQUFBQSxhQUFBLEtBQzdCNEIsV0FBVyxLQUFLLElBQUksSUFBSUEsV0FBVyxLQUFLLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHQSxXQUFXLENBQUN0QyxLQUFLO2NBQzlFZCxPQUFPLEVBQVBBO1lBQU8sRUFDVixDQUFDO1lBQ0YsT0FBTyxJQUFJO1VBQ2YsQ0FBQyxDQUFDLENBQ0d3RCxHQUFHLENBQUMsQ0FBQztRQUNkO1FBQ0EsSUFBSSxDQUFDckMsTUFBTSxDQUFDc0IsVUFBVSxJQUFJYixNQUFJLENBQUMvQixPQUFPLENBQUM2QyxpQkFBaUIsRUFBRTtVQUN0RDtVQUNBLElBQUksQ0FBQ2QsTUFBSSxDQUFDL0IsT0FBTyxDQUFDNkMsaUJBQWlCLENBQUM5QixJQUFJLEVBQUVaLE9BQU8sQ0FBQyxFQUFFO1lBQ2hEb0MsUUFBUSxDQUFDcEMsT0FBTyxHQUFHLENBQUNvQyxRQUFRLENBQUNwQyxPQUFPO1VBQ3hDO1FBQ0o7TUFDSixDQUFDLENBQUM7TUFDRnlELE1BQU0sQ0FBQ0MsT0FBTyxDQUFDOUIsTUFBSSxDQUFDL0IsT0FBTyxDQUFDSCxjQUFjLENBQUMsQ0FBQ2lFLE9BQU8sQ0FBQyxVQUFBQyxLQUFBLEVBQWtCO1FBQUEsSUFBQUMsS0FBQSxHQUFBQyxjQUFBLENBQUFGLEtBQUE7VUFBaEJHLEdBQUcsR0FBQUYsS0FBQTtVQUFFRyxLQUFLLEdBQUFILEtBQUE7UUFDNUQ5QixRQUFRLENBQUNrQyxZQUFZLENBQUNGLEdBQUcsRUFBRUMsS0FBSyxDQUFDO01BQ3JDLENBQUMsQ0FBQztNQUNGakMsUUFBUSxDQUFDbUMsT0FBTyxDQUFDbEUsT0FBTyxHQUFHWSxJQUFJLENBQUNFLEtBQUssQ0FBQ2QsT0FBTztNQUM3Q29DLFFBQVEsQ0FBQ3BDLE9BQU8sR0FBR1ksSUFBSSxDQUFDRSxLQUFLLENBQUNkLE9BQU87TUFDckNrQyxlQUFlLENBQUNpQyxNQUFNLENBQUMvQixRQUFRLEVBQUVELGNBQWMsQ0FBQztNQUNoREosUUFBUSxDQUFDb0MsTUFBTSxDQUFDakMsZUFBZSxFQUFFdEMsT0FBTyxDQUFDO01BQ3pDNkQsTUFBTSxDQUFDQyxPQUFPLENBQUNoRSxjQUFjLENBQUMsQ0FBQ2lFLE9BQU8sQ0FBQyxVQUFBUyxLQUFBLEVBQWtCO1FBQUEsSUFBQUMsS0FBQSxHQUFBUCxjQUFBLENBQUFNLEtBQUE7VUFBaEJMLEdBQUcsR0FBQU0sS0FBQTtVQUFFTCxLQUFLLEdBQUFLLEtBQUE7UUFDL0N0QyxRQUFRLENBQUNrQyxZQUFZLENBQUNGLEdBQUcsRUFBRUMsS0FBSyxDQUFDO01BQ3JDLENBQUMsQ0FBQztNQUNGLE9BQU87UUFDSE0sR0FBRyxFQUFFdkMsUUFBUTtRQUNid0MsVUFBVSxFQUFFM0UsT0FBTztRQUNuQjRFLE1BQU0sRUFBRSxTQUFSQSxNQUFNQSxDQUFFQyxXQUFXLEVBQUk7VUFDbkIsSUFBSUEsV0FBVyxDQUFDNUQsSUFBSSxLQUFLZSxNQUFJLENBQUNmLElBQUksRUFBRTtZQUNoQyxPQUFPLEtBQUs7VUFDaEI7VUFDQWtCLFFBQVEsQ0FBQ21DLE9BQU8sQ0FBQ2xFLE9BQU8sR0FBR3lFLFdBQVcsQ0FBQzNELEtBQUssQ0FBQ2QsT0FBTztVQUNwRG9DLFFBQVEsQ0FBQ3BDLE9BQU8sR0FBR3lFLFdBQVcsQ0FBQzNELEtBQUssQ0FBQ2QsT0FBTztVQUM1QyxPQUFPLElBQUk7UUFDZjtNQUNKLENBQUM7SUFDTCxDQUFDO0VBQ0wsQ0FBQztFQUNEMEUsYUFBYSxXQUFiQSxhQUFhQSxDQUFBLEVBQUc7SUFDWixPQUFPLENBQ0h2RiwrREFBaUIsQ0FBQztNQUNkd0YsSUFBSSxFQUFFdkYsVUFBVTtNQUNoQnlCLElBQUksRUFBRSxJQUFJLENBQUNBLElBQUk7TUFDZitELGFBQWEsRUFBRSxTQUFmQSxhQUFhQSxDQUFFQyxLQUFLO1FBQUEsT0FBSztVQUNyQjdFLE9BQU8sRUFBRTZFLEtBQUssQ0FBQ0EsS0FBSyxDQUFDQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEtBQUs7UUFDekMsQ0FBQztNQUFBO0lBQ0wsQ0FBQyxDQUFDLENBQ0w7RUFDTDtBQUNKLENBQUMsQ0FBQyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxAdGlwdGFwXFxleHRlbnNpb24tdGFzay1pdGVtXFxkaXN0XFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOb2RlLCBtZXJnZUF0dHJpYnV0ZXMsIHdyYXBwaW5nSW5wdXRSdWxlIH0gZnJvbSAnQHRpcHRhcC9jb3JlJztcblxuLyoqXG4gKiBNYXRjaGVzIGEgdGFzayBpdGVtIHRvIGEgLSBbIF0gb24gaW5wdXQuXG4gKi9cbmNvbnN0IGlucHV0UmVnZXggPSAvXlxccyooXFxbKFsoIHx4XSk/XFxdKVxccyQvO1xuLyoqXG4gKiBUaGlzIGV4dGVuc2lvbiBhbGxvd3MgeW91IHRvIGNyZWF0ZSB0YXNrIGl0ZW1zLlxuICogQHNlZSBodHRwczovL3d3dy50aXB0YXAuZGV2L2FwaS9ub2Rlcy90YXNrLWl0ZW1cbiAqL1xuY29uc3QgVGFza0l0ZW0gPSBOb2RlLmNyZWF0ZSh7XG4gICAgbmFtZTogJ3Rhc2tJdGVtJyxcbiAgICBhZGRPcHRpb25zKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmVzdGVkOiBmYWxzZSxcbiAgICAgICAgICAgIEhUTUxBdHRyaWJ1dGVzOiB7fSxcbiAgICAgICAgICAgIHRhc2tMaXN0VHlwZU5hbWU6ICd0YXNrTGlzdCcsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBjb250ZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLm5lc3RlZCA/ICdwYXJhZ3JhcGggYmxvY2sqJyA6ICdwYXJhZ3JhcGgrJztcbiAgICB9LFxuICAgIGRlZmluaW5nOiB0cnVlLFxuICAgIGFkZEF0dHJpYnV0ZXMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjaGVja2VkOiB7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDogZmFsc2UsXG4gICAgICAgICAgICAgICAga2VlcE9uU3BsaXQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHBhcnNlSFRNTDogZWxlbWVudCA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGFDaGVja2VkID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtY2hlY2tlZCcpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YUNoZWNrZWQgPT09ICcnIHx8IGRhdGFDaGVja2VkID09PSAndHJ1ZSc7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICByZW5kZXJIVE1MOiBhdHRyaWJ1dGVzID0+ICh7XG4gICAgICAgICAgICAgICAgICAgICdkYXRhLWNoZWNrZWQnOiBhdHRyaWJ1dGVzLmNoZWNrZWQsXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgcGFyc2VIVE1MKCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRhZzogYGxpW2RhdGEtdHlwZT1cIiR7dGhpcy5uYW1lfVwiXWAsXG4gICAgICAgICAgICAgICAgcHJpb3JpdHk6IDUxLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXTtcbiAgICB9LFxuICAgIHJlbmRlckhUTUwoeyBub2RlLCBIVE1MQXR0cmlidXRlcyB9KSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAnbGknLFxuICAgICAgICAgICAgbWVyZ2VBdHRyaWJ1dGVzKHRoaXMub3B0aW9ucy5IVE1MQXR0cmlidXRlcywgSFRNTEF0dHJpYnV0ZXMsIHtcbiAgICAgICAgICAgICAgICAnZGF0YS10eXBlJzogdGhpcy5uYW1lLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgJ2xhYmVsJyxcbiAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICdpbnB1dCcsXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdjaGVja2JveCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVja2VkOiBub2RlLmF0dHJzLmNoZWNrZWQgPyAnY2hlY2tlZCcgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgWydzcGFuJ10sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgWydkaXYnLCAwXSxcbiAgICAgICAgXTtcbiAgICB9LFxuICAgIGFkZEtleWJvYXJkU2hvcnRjdXRzKCkge1xuICAgICAgICBjb25zdCBzaG9ydGN1dHMgPSB7XG4gICAgICAgICAgICBFbnRlcjogKCkgPT4gdGhpcy5lZGl0b3IuY29tbWFuZHMuc3BsaXRMaXN0SXRlbSh0aGlzLm5hbWUpLFxuICAgICAgICAgICAgJ1NoaWZ0LVRhYic6ICgpID0+IHRoaXMuZWRpdG9yLmNvbW1hbmRzLmxpZnRMaXN0SXRlbSh0aGlzLm5hbWUpLFxuICAgICAgICB9O1xuICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5uZXN0ZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBzaG9ydGN1dHM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnNob3J0Y3V0cyxcbiAgICAgICAgICAgIFRhYjogKCkgPT4gdGhpcy5lZGl0b3IuY29tbWFuZHMuc2lua0xpc3RJdGVtKHRoaXMubmFtZSksXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBhZGROb2RlVmlldygpIHtcbiAgICAgICAgcmV0dXJuICh7IG5vZGUsIEhUTUxBdHRyaWJ1dGVzLCBnZXRQb3MsIGVkaXRvciwgfSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbGlzdEl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xuICAgICAgICAgICAgY29uc3QgY2hlY2tib3hXcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcbiAgICAgICAgICAgIGNvbnN0IGNoZWNrYm94U3R5bGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgICAgICAgY29uc3QgY2hlY2tib3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgICAgICAgICAgY29uc3QgY29udGVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgY2hlY2tib3hXcmFwcGVyLmNvbnRlbnRFZGl0YWJsZSA9ICdmYWxzZSc7XG4gICAgICAgICAgICBjaGVja2JveC50eXBlID0gJ2NoZWNrYm94JztcbiAgICAgICAgICAgIGNoZWNrYm94LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGV2ZW50ID0+IGV2ZW50LnByZXZlbnREZWZhdWx0KCkpO1xuICAgICAgICAgICAgY2hlY2tib3guYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZXZlbnQgPT4ge1xuICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBlZGl0b3IgaXNu4oCZdCBlZGl0YWJsZSBhbmQgd2UgZG9uJ3QgaGF2ZSBhIGhhbmRsZXIgZm9yXG4gICAgICAgICAgICAgICAgLy8gcmVhZG9ubHkgY2hlY2tzIHdlIGhhdmUgdG8gdW5kbyB0aGUgbGF0ZXN0IGNoYW5nZVxuICAgICAgICAgICAgICAgIGlmICghZWRpdG9yLmlzRWRpdGFibGUgJiYgIXRoaXMub3B0aW9ucy5vblJlYWRPbmx5Q2hlY2tlZCkge1xuICAgICAgICAgICAgICAgICAgICBjaGVja2JveC5jaGVja2VkID0gIWNoZWNrYm94LmNoZWNrZWQ7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgeyBjaGVja2VkIH0gPSBldmVudC50YXJnZXQ7XG4gICAgICAgICAgICAgICAgaWYgKGVkaXRvci5pc0VkaXRhYmxlICYmIHR5cGVvZiBnZXRQb3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgZWRpdG9yXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2hhaW4oKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmZvY3VzKHVuZGVmaW5lZCwgeyBzY3JvbGxJbnRvVmlldzogZmFsc2UgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jb21tYW5kKCh7IHRyIH0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uID0gZ2V0UG9zKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHBvc2l0aW9uICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnROb2RlID0gdHIuZG9jLm5vZGVBdChwb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ci5zZXROb2RlTWFya3VwKHBvc2l0aW9uLCB1bmRlZmluZWQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5jdXJyZW50Tm9kZSA9PT0gbnVsbCB8fCBjdXJyZW50Tm9kZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogY3VycmVudE5vZGUuYXR0cnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAucnVuKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghZWRpdG9yLmlzRWRpdGFibGUgJiYgdGhpcy5vcHRpb25zLm9uUmVhZE9ubHlDaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFJlc2V0IHN0YXRlIGlmIG9uUmVhZE9ubHlDaGVja2VkIHJldHVybnMgZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMub25SZWFkT25seUNoZWNrZWQobm9kZSwgY2hlY2tlZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrYm94LmNoZWNrZWQgPSAhY2hlY2tib3guY2hlY2tlZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgT2JqZWN0LmVudHJpZXModGhpcy5vcHRpb25zLkhUTUxBdHRyaWJ1dGVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgICAgICBsaXN0SXRlbS5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGxpc3RJdGVtLmRhdGFzZXQuY2hlY2tlZCA9IG5vZGUuYXR0cnMuY2hlY2tlZDtcbiAgICAgICAgICAgIGNoZWNrYm94LmNoZWNrZWQgPSBub2RlLmF0dHJzLmNoZWNrZWQ7XG4gICAgICAgICAgICBjaGVja2JveFdyYXBwZXIuYXBwZW5kKGNoZWNrYm94LCBjaGVja2JveFN0eWxlcik7XG4gICAgICAgICAgICBsaXN0SXRlbS5hcHBlbmQoY2hlY2tib3hXcmFwcGVyLCBjb250ZW50KTtcbiAgICAgICAgICAgIE9iamVjdC5lbnRyaWVzKEhUTUxBdHRyaWJ1dGVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgICAgICBsaXN0SXRlbS5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZG9tOiBsaXN0SXRlbSxcbiAgICAgICAgICAgICAgICBjb250ZW50RE9NOiBjb250ZW50LFxuICAgICAgICAgICAgICAgIHVwZGF0ZTogdXBkYXRlZE5vZGUgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodXBkYXRlZE5vZGUudHlwZSAhPT0gdGhpcy50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbGlzdEl0ZW0uZGF0YXNldC5jaGVja2VkID0gdXBkYXRlZE5vZGUuYXR0cnMuY2hlY2tlZDtcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tib3guY2hlY2tlZCA9IHVwZGF0ZWROb2RlLmF0dHJzLmNoZWNrZWQ7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgIH0sXG4gICAgYWRkSW5wdXRSdWxlcygpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHdyYXBwaW5nSW5wdXRSdWxlKHtcbiAgICAgICAgICAgICAgICBmaW5kOiBpbnB1dFJlZ2V4LFxuICAgICAgICAgICAgICAgIHR5cGU6IHRoaXMudHlwZSxcbiAgICAgICAgICAgICAgICBnZXRBdHRyaWJ1dGVzOiBtYXRjaCA9PiAoe1xuICAgICAgICAgICAgICAgICAgICBjaGVja2VkOiBtYXRjaFttYXRjaC5sZW5ndGggLSAxXSA9PT0gJ3gnLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgfSksXG4gICAgICAgIF07XG4gICAgfSxcbn0pO1xuXG5leHBvcnQgeyBUYXNrSXRlbSwgVGFza0l0ZW0gYXMgZGVmYXVsdCwgaW5wdXRSZWdleCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOlsiTm9kZSIsIm1lcmdlQXR0cmlidXRlcyIsIndyYXBwaW5nSW5wdXRSdWxlIiwiaW5wdXRSZWdleCIsIlRhc2tJdGVtIiwiY3JlYXRlIiwibmFtZSIsImFkZE9wdGlvbnMiLCJuZXN0ZWQiLCJIVE1MQXR0cmlidXRlcyIsInRhc2tMaXN0VHlwZU5hbWUiLCJjb250ZW50Iiwib3B0aW9ucyIsImRlZmluaW5nIiwiYWRkQXR0cmlidXRlcyIsImNoZWNrZWQiLCJrZWVwT25TcGxpdCIsInBhcnNlSFRNTCIsImVsZW1lbnQiLCJkYXRhQ2hlY2tlZCIsImdldEF0dHJpYnV0ZSIsInJlbmRlckhUTUwiLCJhdHRyaWJ1dGVzIiwidGFnIiwiY29uY2F0IiwicHJpb3JpdHkiLCJfcmVmIiwibm9kZSIsInR5cGUiLCJhdHRycyIsImFkZEtleWJvYXJkU2hvcnRjdXRzIiwiX3RoaXMiLCJzaG9ydGN1dHMiLCJFbnRlciIsImVkaXRvciIsImNvbW1hbmRzIiwic3BsaXRMaXN0SXRlbSIsIlNoaWZ0VGFiIiwibGlmdExpc3RJdGVtIiwiX29iamVjdFNwcmVhZCIsIlRhYiIsInNpbmtMaXN0SXRlbSIsImFkZE5vZGVWaWV3IiwiX3RoaXMyIiwiX3JlZjIiLCJnZXRQb3MiLCJsaXN0SXRlbSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImNoZWNrYm94V3JhcHBlciIsImNoZWNrYm94U3R5bGVyIiwiY2hlY2tib3giLCJjb250ZW50RWRpdGFibGUiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsImlzRWRpdGFibGUiLCJvblJlYWRPbmx5Q2hlY2tlZCIsInRhcmdldCIsImNoYWluIiwiZm9jdXMiLCJ1bmRlZmluZWQiLCJzY3JvbGxJbnRvVmlldyIsImNvbW1hbmQiLCJfcmVmMyIsInRyIiwicG9zaXRpb24iLCJjdXJyZW50Tm9kZSIsImRvYyIsIm5vZGVBdCIsInNldE5vZGVNYXJrdXAiLCJydW4iLCJPYmplY3QiLCJlbnRyaWVzIiwiZm9yRWFjaCIsIl9yZWY0IiwiX3JlZjUiLCJfc2xpY2VkVG9BcnJheSIsImtleSIsInZhbHVlIiwic2V0QXR0cmlidXRlIiwiZGF0YXNldCIsImFwcGVuZCIsIl9yZWY2IiwiX3JlZjciLCJkb20iLCJjb250ZW50RE9NIiwidXBkYXRlIiwidXBkYXRlZE5vZGUiLCJhZGRJbnB1dFJ1bGVzIiwiZmluZCIsImdldEF0dHJpYnV0ZXMiLCJtYXRjaCIsImxlbmd0aCIsImRlZmF1bHQiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-task-item/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-task-list/dist/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tiptap/extension-task-list/dist/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TaskList: () => (/* binding */ TaskList),\n/* harmony export */   \"default\": () => (/* binding */ TaskList)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\n\n/**\n * This extension allows you to create task lists.\n * @see https://www.tiptap.dev/api/nodes/task-list\n */\nvar TaskList = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({\n  name: 'taskList',\n  addOptions: function addOptions() {\n    return {\n      itemTypeName: 'taskItem',\n      HTMLAttributes: {}\n    };\n  },\n  group: 'block list',\n  content: function content() {\n    return \"\".concat(this.options.itemTypeName, \"+\");\n  },\n  parseHTML: function parseHTML() {\n    return [{\n      tag: \"ul[data-type=\\\"\".concat(this.name, \"\\\"]\"),\n      priority: 51\n    }];\n  },\n  renderHTML: function renderHTML(_ref) {\n    var HTMLAttributes = _ref.HTMLAttributes;\n    return ['ul', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes, {\n      'data-type': this.name\n    }), 0];\n  },\n  addCommands: function addCommands() {\n    var _this = this;\n    return {\n      toggleTaskList: function toggleTaskList() {\n        return function (_ref2) {\n          var commands = _ref2.commands;\n          return commands.toggleList(_this.name, _this.options.itemTypeName);\n        };\n      }\n    };\n  },\n  addKeyboardShortcuts: function addKeyboardShortcuts() {\n    var _this2 = this;\n    return {\n      'Mod-Shift-9': function ModShift9() {\n        return _this2.editor.commands.toggleTaskList();\n      }\n    };\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tdGFzay1saXN0L2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXFEOztBQUVyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQU1FLFFBQVEsR0FBR0YsOENBQUksQ0FBQ0csTUFBTSxDQUFDO0VBQ3pCQyxJQUFJLEVBQUUsVUFBVTtFQUNoQkMsVUFBVSxXQUFWQSxVQUFVQSxDQUFBLEVBQUc7SUFDVCxPQUFPO01BQ0hDLFlBQVksRUFBRSxVQUFVO01BQ3hCQyxjQUFjLEVBQUUsQ0FBQztJQUNyQixDQUFDO0VBQ0wsQ0FBQztFQUNEQyxLQUFLLEVBQUUsWUFBWTtFQUNuQkMsT0FBTyxXQUFQQSxPQUFPQSxDQUFBLEVBQUc7SUFDTixVQUFBQyxNQUFBLENBQVUsSUFBSSxDQUFDQyxPQUFPLENBQUNMLFlBQVk7RUFDdkMsQ0FBQztFQUNETSxTQUFTLFdBQVRBLFNBQVNBLENBQUEsRUFBRztJQUNSLE9BQU8sQ0FDSDtNQUNJQyxHQUFHLG9CQUFBSCxNQUFBLENBQW1CLElBQUksQ0FBQ04sSUFBSSxRQUFJO01BQ25DVSxRQUFRLEVBQUU7SUFDZCxDQUFDLENBQ0o7RUFDTCxDQUFDO0VBQ0RDLFVBQVUsV0FBVkEsVUFBVUEsQ0FBQUMsSUFBQSxFQUFxQjtJQUFBLElBQWxCVCxjQUFjLEdBQUFTLElBQUEsQ0FBZFQsY0FBYztJQUN2QixPQUFPLENBQUMsSUFBSSxFQUFFTiw2REFBZSxDQUFDLElBQUksQ0FBQ1UsT0FBTyxDQUFDSixjQUFjLEVBQUVBLGNBQWMsRUFBRTtNQUFFLFdBQVcsRUFBRSxJQUFJLENBQUNIO0lBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0VBQzlHLENBQUM7RUFDRGEsV0FBVyxXQUFYQSxXQUFXQSxDQUFBLEVBQUc7SUFBQSxJQUFBQyxLQUFBO0lBQ1YsT0FBTztNQUNIQyxjQUFjLEVBQUUsU0FBaEJBLGNBQWNBLENBQUE7UUFBQSxPQUFRLFVBQUFDLEtBQUEsRUFBa0I7VUFBQSxJQUFmQyxRQUFRLEdBQUFELEtBQUEsQ0FBUkMsUUFBUTtVQUM3QixPQUFPQSxRQUFRLENBQUNDLFVBQVUsQ0FBQ0osS0FBSSxDQUFDZCxJQUFJLEVBQUVjLEtBQUksQ0FBQ1AsT0FBTyxDQUFDTCxZQUFZLENBQUM7UUFDcEUsQ0FBQztNQUFBO0lBQ0wsQ0FBQztFQUNMLENBQUM7RUFDRGlCLG9CQUFvQixXQUFwQkEsb0JBQW9CQSxDQUFBLEVBQUc7SUFBQSxJQUFBQyxNQUFBO0lBQ25CLE9BQU87TUFDSCxhQUFhLEVBQUUsU0FBZkMsU0FBYUEsQ0FBQTtRQUFBLE9BQVFELE1BQUksQ0FBQ0UsTUFBTSxDQUFDTCxRQUFRLENBQUNGLGNBQWMsQ0FBQyxDQUFDO01BQUE7SUFDOUQsQ0FBQztFQUNMO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXEB0aXB0YXBcXGV4dGVuc2lvbi10YXNrLWxpc3RcXGRpc3RcXGluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5vZGUsIG1lcmdlQXR0cmlidXRlcyB9IGZyb20gJ0B0aXB0YXAvY29yZSc7XG5cbi8qKlxuICogVGhpcyBleHRlbnNpb24gYWxsb3dzIHlvdSB0byBjcmVhdGUgdGFzayBsaXN0cy5cbiAqIEBzZWUgaHR0cHM6Ly93d3cudGlwdGFwLmRldi9hcGkvbm9kZXMvdGFzay1saXN0XG4gKi9cbmNvbnN0IFRhc2tMaXN0ID0gTm9kZS5jcmVhdGUoe1xuICAgIG5hbWU6ICd0YXNrTGlzdCcsXG4gICAgYWRkT3B0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGl0ZW1UeXBlTmFtZTogJ3Rhc2tJdGVtJyxcbiAgICAgICAgICAgIEhUTUxBdHRyaWJ1dGVzOiB7fSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIGdyb3VwOiAnYmxvY2sgbGlzdCcsXG4gICAgY29udGVudCgpIHtcbiAgICAgICAgcmV0dXJuIGAke3RoaXMub3B0aW9ucy5pdGVtVHlwZU5hbWV9K2A7XG4gICAgfSxcbiAgICBwYXJzZUhUTUwoKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGFnOiBgdWxbZGF0YS10eXBlPVwiJHt0aGlzLm5hbWV9XCJdYCxcbiAgICAgICAgICAgICAgICBwcmlvcml0eTogNTEsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdO1xuICAgIH0sXG4gICAgcmVuZGVySFRNTCh7IEhUTUxBdHRyaWJ1dGVzIH0pIHtcbiAgICAgICAgcmV0dXJuIFsndWwnLCBtZXJnZUF0dHJpYnV0ZXModGhpcy5vcHRpb25zLkhUTUxBdHRyaWJ1dGVzLCBIVE1MQXR0cmlidXRlcywgeyAnZGF0YS10eXBlJzogdGhpcy5uYW1lIH0pLCAwXTtcbiAgICB9LFxuICAgIGFkZENvbW1hbmRzKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdG9nZ2xlVGFza0xpc3Q6ICgpID0+ICh7IGNvbW1hbmRzIH0pID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWFuZHMudG9nZ2xlTGlzdCh0aGlzLm5hbWUsIHRoaXMub3B0aW9ucy5pdGVtVHlwZU5hbWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIGFkZEtleWJvYXJkU2hvcnRjdXRzKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ01vZC1TaGlmdC05JzogKCkgPT4gdGhpcy5lZGl0b3IuY29tbWFuZHMudG9nZ2xlVGFza0xpc3QoKSxcbiAgICAgICAgfTtcbiAgICB9LFxufSk7XG5cbmV4cG9ydCB7IFRhc2tMaXN0LCBUYXNrTGlzdCBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJOb2RlIiwibWVyZ2VBdHRyaWJ1dGVzIiwiVGFza0xpc3QiLCJjcmVhdGUiLCJuYW1lIiwiYWRkT3B0aW9ucyIsIml0ZW1UeXBlTmFtZSIsIkhUTUxBdHRyaWJ1dGVzIiwiZ3JvdXAiLCJjb250ZW50IiwiY29uY2F0Iiwib3B0aW9ucyIsInBhcnNlSFRNTCIsInRhZyIsInByaW9yaXR5IiwicmVuZGVySFRNTCIsIl9yZWYiLCJhZGRDb21tYW5kcyIsIl90aGlzIiwidG9nZ2xlVGFza0xpc3QiLCJfcmVmMiIsImNvbW1hbmRzIiwidG9nZ2xlTGlzdCIsImFkZEtleWJvYXJkU2hvcnRjdXRzIiwiX3RoaXMyIiwiTW9kU2hpZnQ5IiwiZWRpdG9yIiwiZGVmYXVsdCJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-task-list/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-text/dist/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@tiptap/extension-text/dist/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Text: () => (/* binding */ Text),\n/* harmony export */   \"default\": () => (/* binding */ Text)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\n\n/**\n * This extension allows you to create text nodes.\n * @see https://www.tiptap.dev/api/nodes/text\n */\nvar Text = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({\n  name: 'text',\n  group: 'inline'\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tdGV4dC9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFvQzs7QUFFcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFNQyxJQUFJLEdBQUdELDhDQUFJLENBQUNFLE1BQU0sQ0FBQztFQUNyQkMsSUFBSSxFQUFFLE1BQU07RUFDWkMsS0FBSyxFQUFFO0FBQ1gsQ0FBQyxDQUFDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXEB0aXB0YXBcXGV4dGVuc2lvbi10ZXh0XFxkaXN0XFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOb2RlIH0gZnJvbSAnQHRpcHRhcC9jb3JlJztcblxuLyoqXG4gKiBUaGlzIGV4dGVuc2lvbiBhbGxvd3MgeW91IHRvIGNyZWF0ZSB0ZXh0IG5vZGVzLlxuICogQHNlZSBodHRwczovL3d3dy50aXB0YXAuZGV2L2FwaS9ub2Rlcy90ZXh0XG4gKi9cbmNvbnN0IFRleHQgPSBOb2RlLmNyZWF0ZSh7XG4gICAgbmFtZTogJ3RleHQnLFxuICAgIGdyb3VwOiAnaW5saW5lJyxcbn0pO1xuXG5leHBvcnQgeyBUZXh0LCBUZXh0IGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbIk5vZGUiLCJUZXh0IiwiY3JlYXRlIiwibmFtZSIsImdyb3VwIiwiZGVmYXVsdCJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-text/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/pm/commands/dist/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@tiptap/pm/commands/dist/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   autoJoin: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.autoJoin),\n/* harmony export */   baseKeymap: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.baseKeymap),\n/* harmony export */   chainCommands: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.chainCommands),\n/* harmony export */   createParagraphNear: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.createParagraphNear),\n/* harmony export */   deleteSelection: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.deleteSelection),\n/* harmony export */   exitCode: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.exitCode),\n/* harmony export */   joinBackward: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.joinBackward),\n/* harmony export */   joinDown: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.joinDown),\n/* harmony export */   joinForward: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.joinForward),\n/* harmony export */   joinTextblockBackward: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.joinTextblockBackward),\n/* harmony export */   joinTextblockForward: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.joinTextblockForward),\n/* harmony export */   joinUp: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.joinUp),\n/* harmony export */   lift: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.lift),\n/* harmony export */   liftEmptyBlock: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.liftEmptyBlock),\n/* harmony export */   macBaseKeymap: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.macBaseKeymap),\n/* harmony export */   newlineInCode: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.newlineInCode),\n/* harmony export */   pcBaseKeymap: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.pcBaseKeymap),\n/* harmony export */   selectAll: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.selectAll),\n/* harmony export */   selectNodeBackward: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.selectNodeBackward),\n/* harmony export */   selectNodeForward: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.selectNodeForward),\n/* harmony export */   selectParentNode: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.selectParentNode),\n/* harmony export */   selectTextblockEnd: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.selectTextblockEnd),\n/* harmony export */   selectTextblockStart: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.selectTextblockStart),\n/* harmony export */   setBlockType: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.setBlockType),\n/* harmony export */   splitBlock: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.splitBlock),\n/* harmony export */   splitBlockAs: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.splitBlockAs),\n/* harmony export */   splitBlockKeepMarks: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.splitBlockKeepMarks),\n/* harmony export */   toggleMark: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.toggleMark),\n/* harmony export */   wrapIn: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.wrapIn)\n/* harmony export */ });\n/* harmony import */ var prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-commands */ \"(ssr)/./node_modules/prosemirror-commands/dist/index.js\");\n// commands/index.ts\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS9jb21tYW5kcy9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluc3RpbmN0aHViXFxjb2RlX3Byb2plY3RzXFxucG1cXGluc3RpbmN0aHViLXJlYWN0LXVpXFxub2RlX21vZHVsZXNcXEB0aXB0YXBcXHBtXFxjb21tYW5kc1xcZGlzdFxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gY29tbWFuZHMvaW5kZXgudHNcbmV4cG9ydCAqIGZyb20gXCJwcm9zZW1pcnJvci1jb21tYW5kc1wiO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/pm/commands/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/pm/dropcursor/dist/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@tiptap/pm/dropcursor/dist/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dropCursor: () => (/* reexport safe */ prosemirror_dropcursor__WEBPACK_IMPORTED_MODULE_0__.dropCursor)\n/* harmony export */ });\n/* harmony import */ var prosemirror_dropcursor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-dropcursor */ \"(ssr)/./node_modules/prosemirror-dropcursor/dist/index.js\");\n// dropcursor/index.ts\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS9kcm9wY3Vyc29yL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxAdGlwdGFwXFxwbVxcZHJvcGN1cnNvclxcZGlzdFxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZHJvcGN1cnNvci9pbmRleC50c1xuZXhwb3J0ICogZnJvbSBcInByb3NlbWlycm9yLWRyb3BjdXJzb3JcIjtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/pm/dropcursor/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/pm/gapcursor/dist/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@tiptap/pm/gapcursor/dist/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GapCursor: () => (/* reexport safe */ prosemirror_gapcursor__WEBPACK_IMPORTED_MODULE_0__.GapCursor),\n/* harmony export */   gapCursor: () => (/* reexport safe */ prosemirror_gapcursor__WEBPACK_IMPORTED_MODULE_0__.gapCursor)\n/* harmony export */ });\n/* harmony import */ var prosemirror_gapcursor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-gapcursor */ \"(ssr)/./node_modules/prosemirror-gapcursor/dist/index.js\");\n// gapcursor/index.ts\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS9nYXBjdXJzb3IvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxAdGlwdGFwXFxwbVxcZ2FwY3Vyc29yXFxkaXN0XFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBnYXBjdXJzb3IvaW5kZXgudHNcbmV4cG9ydCAqIGZyb20gXCJwcm9zZW1pcnJvci1nYXBjdXJzb3JcIjtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/pm/gapcursor/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/pm/history/dist/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@tiptap/pm/history/dist/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   closeHistory: () => (/* reexport safe */ prosemirror_history__WEBPACK_IMPORTED_MODULE_0__.closeHistory),\n/* harmony export */   history: () => (/* reexport safe */ prosemirror_history__WEBPACK_IMPORTED_MODULE_0__.history),\n/* harmony export */   redo: () => (/* reexport safe */ prosemirror_history__WEBPACK_IMPORTED_MODULE_0__.redo),\n/* harmony export */   redoDepth: () => (/* reexport safe */ prosemirror_history__WEBPACK_IMPORTED_MODULE_0__.redoDepth),\n/* harmony export */   redoNoScroll: () => (/* reexport safe */ prosemirror_history__WEBPACK_IMPORTED_MODULE_0__.redoNoScroll),\n/* harmony export */   undo: () => (/* reexport safe */ prosemirror_history__WEBPACK_IMPORTED_MODULE_0__.undo),\n/* harmony export */   undoDepth: () => (/* reexport safe */ prosemirror_history__WEBPACK_IMPORTED_MODULE_0__.undoDepth),\n/* harmony export */   undoNoScroll: () => (/* reexport safe */ prosemirror_history__WEBPACK_IMPORTED_MODULE_0__.undoNoScroll)\n/* harmony export */ });\n/* harmony import */ var prosemirror_history__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-history */ \"(ssr)/./node_modules/prosemirror-history/dist/index.js\");\n// history/index.ts\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS9oaXN0b3J5L2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xcQHRpcHRhcFxccG1cXGhpc3RvcnlcXGRpc3RcXGluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGhpc3RvcnkvaW5kZXgudHNcbmV4cG9ydCAqIGZyb20gXCJwcm9zZW1pcnJvci1oaXN0b3J5XCI7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/pm/history/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/pm/keymap/dist/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@tiptap/pm/keymap/dist/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   keydownHandler: () => (/* reexport safe */ prosemirror_keymap__WEBPACK_IMPORTED_MODULE_0__.keydownHandler),\n/* harmony export */   keymap: () => (/* reexport safe */ prosemirror_keymap__WEBPACK_IMPORTED_MODULE_0__.keymap)\n/* harmony export */ });\n/* harmony import */ var prosemirror_keymap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-keymap */ \"(ssr)/./node_modules/prosemirror-keymap/dist/index.js\");\n// keymap/index.ts\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS9rZXltYXAvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxAdGlwdGFwXFxwbVxca2V5bWFwXFxkaXN0XFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBrZXltYXAvaW5kZXgudHNcbmV4cG9ydCAqIGZyb20gXCJwcm9zZW1pcnJvci1rZXltYXBcIjtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/pm/keymap/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/pm/model/dist/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@tiptap/pm/model/dist/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContentMatch: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.ContentMatch),\n/* harmony export */   DOMParser: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.DOMParser),\n/* harmony export */   DOMSerializer: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.DOMSerializer),\n/* harmony export */   Fragment: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment),\n/* harmony export */   Mark: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Mark),\n/* harmony export */   MarkType: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.MarkType),\n/* harmony export */   Node: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Node),\n/* harmony export */   NodeRange: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.NodeRange),\n/* harmony export */   NodeType: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.NodeType),\n/* harmony export */   ReplaceError: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.ReplaceError),\n/* harmony export */   ResolvedPos: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.ResolvedPos),\n/* harmony export */   Schema: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Schema),\n/* harmony export */   Slice: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice)\n/* harmony export */ });\n/* harmony import */ var prosemirror_model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-model */ \"(ssr)/./node_modules/prosemirror-model/dist/index.js\");\n// model/index.ts\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS9tb2RlbC9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xcQHRpcHRhcFxccG1cXG1vZGVsXFxkaXN0XFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBtb2RlbC9pbmRleC50c1xuZXhwb3J0ICogZnJvbSBcInByb3NlbWlycm9yLW1vZGVsXCI7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/pm/model/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/pm/schema-list/dist/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@tiptap/pm/schema-list/dist/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addListNodes: () => (/* reexport safe */ prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_0__.addListNodes),\n/* harmony export */   bulletList: () => (/* reexport safe */ prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_0__.bulletList),\n/* harmony export */   liftListItem: () => (/* reexport safe */ prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_0__.liftListItem),\n/* harmony export */   listItem: () => (/* reexport safe */ prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_0__.listItem),\n/* harmony export */   orderedList: () => (/* reexport safe */ prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_0__.orderedList),\n/* harmony export */   sinkListItem: () => (/* reexport safe */ prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_0__.sinkListItem),\n/* harmony export */   splitListItem: () => (/* reexport safe */ prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_0__.splitListItem),\n/* harmony export */   splitListItemKeepMarks: () => (/* reexport safe */ prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_0__.splitListItemKeepMarks),\n/* harmony export */   wrapInList: () => (/* reexport safe */ prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_0__.wrapInList),\n/* harmony export */   wrapRangeInList: () => (/* reexport safe */ prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_0__.wrapRangeInList)\n/* harmony export */ });\n/* harmony import */ var prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-schema-list */ \"(ssr)/./node_modules/prosemirror-schema-list/dist/index.js\");\n// schema-list/index.ts\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS9zY2hlbWEtbGlzdC9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQUEiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xcQHRpcHRhcFxccG1cXHNjaGVtYS1saXN0XFxkaXN0XFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzY2hlbWEtbGlzdC9pbmRleC50c1xuZXhwb3J0ICogZnJvbSBcInByb3NlbWlycm9yLXNjaGVtYS1saXN0XCI7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/pm/schema-list/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/pm/state/dist/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@tiptap/pm/state/dist/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AllSelection: () => (/* reexport safe */ prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.AllSelection),\n/* harmony export */   EditorState: () => (/* reexport safe */ prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.EditorState),\n/* harmony export */   NodeSelection: () => (/* reexport safe */ prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.NodeSelection),\n/* harmony export */   Plugin: () => (/* reexport safe */ prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Plugin),\n/* harmony export */   PluginKey: () => (/* reexport safe */ prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey),\n/* harmony export */   Selection: () => (/* reexport safe */ prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Selection),\n/* harmony export */   SelectionRange: () => (/* reexport safe */ prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.SelectionRange),\n/* harmony export */   TextSelection: () => (/* reexport safe */ prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection),\n/* harmony export */   Transaction: () => (/* reexport safe */ prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Transaction)\n/* harmony export */ });\n/* harmony import */ var prosemirror_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-state */ \"(ssr)/./node_modules/prosemirror-state/dist/index.js\");\n// state/index.ts\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS9zdGF0ZS9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxAdGlwdGFwXFxwbVxcc3RhdGVcXGRpc3RcXGluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHN0YXRlL2luZGV4LnRzXG5leHBvcnQgKiBmcm9tIFwicHJvc2VtaXJyb3Itc3RhdGVcIjtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/pm/state/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/pm/tables/dist/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@tiptap/pm/tables/dist/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CellBookmark: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.CellBookmark),\n/* harmony export */   CellSelection: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.CellSelection),\n/* harmony export */   ResizeState: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.ResizeState),\n/* harmony export */   TableMap: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.TableMap),\n/* harmony export */   TableView: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.TableView),\n/* harmony export */   __clipCells: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.__clipCells),\n/* harmony export */   __insertCells: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.__insertCells),\n/* harmony export */   __pastedCells: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.__pastedCells),\n/* harmony export */   addColSpan: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.addColSpan),\n/* harmony export */   addColumn: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.addColumn),\n/* harmony export */   addColumnAfter: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.addColumnAfter),\n/* harmony export */   addColumnBefore: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.addColumnBefore),\n/* harmony export */   addRow: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.addRow),\n/* harmony export */   addRowAfter: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.addRowAfter),\n/* harmony export */   addRowBefore: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.addRowBefore),\n/* harmony export */   cellAround: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.cellAround),\n/* harmony export */   cellNear: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.cellNear),\n/* harmony export */   colCount: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.colCount),\n/* harmony export */   columnIsHeader: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.columnIsHeader),\n/* harmony export */   columnResizing: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.columnResizing),\n/* harmony export */   columnResizingPluginKey: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.columnResizingPluginKey),\n/* harmony export */   deleteCellSelection: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.deleteCellSelection),\n/* harmony export */   deleteColumn: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.deleteColumn),\n/* harmony export */   deleteRow: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.deleteRow),\n/* harmony export */   deleteTable: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.deleteTable),\n/* harmony export */   findCell: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.findCell),\n/* harmony export */   fixTables: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.fixTables),\n/* harmony export */   fixTablesKey: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.fixTablesKey),\n/* harmony export */   goToNextCell: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.goToNextCell),\n/* harmony export */   handlePaste: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.handlePaste),\n/* harmony export */   inSameTable: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.inSameTable),\n/* harmony export */   isInTable: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.isInTable),\n/* harmony export */   mergeCells: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.mergeCells),\n/* harmony export */   moveCellForward: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.moveCellForward),\n/* harmony export */   nextCell: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.nextCell),\n/* harmony export */   pointsAtCell: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.pointsAtCell),\n/* harmony export */   removeColSpan: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.removeColSpan),\n/* harmony export */   removeColumn: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.removeColumn),\n/* harmony export */   removeRow: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.removeRow),\n/* harmony export */   rowIsHeader: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.rowIsHeader),\n/* harmony export */   selectedRect: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.selectedRect),\n/* harmony export */   selectionCell: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.selectionCell),\n/* harmony export */   setCellAttr: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.setCellAttr),\n/* harmony export */   splitCell: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.splitCell),\n/* harmony export */   splitCellWithType: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.splitCellWithType),\n/* harmony export */   tableEditing: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.tableEditing),\n/* harmony export */   tableEditingKey: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.tableEditingKey),\n/* harmony export */   tableNodeTypes: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.tableNodeTypes),\n/* harmony export */   tableNodes: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.tableNodes),\n/* harmony export */   toggleHeader: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.toggleHeader),\n/* harmony export */   toggleHeaderCell: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.toggleHeaderCell),\n/* harmony export */   toggleHeaderColumn: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.toggleHeaderColumn),\n/* harmony export */   toggleHeaderRow: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.toggleHeaderRow),\n/* harmony export */   updateColumnsOnResize: () => (/* reexport safe */ prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.updateColumnsOnResize)\n/* harmony export */ });\n/* harmony import */ var prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-tables */ \"(ssr)/./node_modules/prosemirror-tables/dist/index.js\");\n// tables/index.ts\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS90YWJsZXMvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xcQHRpcHRhcFxccG1cXHRhYmxlc1xcZGlzdFxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gdGFibGVzL2luZGV4LnRzXG5leHBvcnQgKiBmcm9tIFwicHJvc2VtaXJyb3ItdGFibGVzXCI7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/pm/tables/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/pm/transform/dist/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@tiptap/pm/transform/dist/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AddMarkStep: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.AddMarkStep),\n/* harmony export */   AddNodeMarkStep: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.AddNodeMarkStep),\n/* harmony export */   AttrStep: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.AttrStep),\n/* harmony export */   DocAttrStep: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.DocAttrStep),\n/* harmony export */   MapResult: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.MapResult),\n/* harmony export */   Mapping: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.Mapping),\n/* harmony export */   RemoveMarkStep: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.RemoveMarkStep),\n/* harmony export */   RemoveNodeMarkStep: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.RemoveNodeMarkStep),\n/* harmony export */   ReplaceAroundStep: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.ReplaceAroundStep),\n/* harmony export */   ReplaceStep: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.ReplaceStep),\n/* harmony export */   Step: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.Step),\n/* harmony export */   StepMap: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.StepMap),\n/* harmony export */   StepResult: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.StepResult),\n/* harmony export */   Transform: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.Transform),\n/* harmony export */   TransformError: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.TransformError),\n/* harmony export */   canJoin: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.canJoin),\n/* harmony export */   canSplit: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.canSplit),\n/* harmony export */   dropPoint: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.dropPoint),\n/* harmony export */   findWrapping: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.findWrapping),\n/* harmony export */   insertPoint: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.insertPoint),\n/* harmony export */   joinPoint: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.joinPoint),\n/* harmony export */   liftTarget: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.liftTarget),\n/* harmony export */   replaceStep: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.replaceStep)\n/* harmony export */ });\n/* harmony import */ var prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-transform */ \"(ssr)/./node_modules/prosemirror-transform/dist/index.js\");\n// transform/index.ts\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS90cmFuc2Zvcm0vZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpbnN0aW5jdGh1YlxcY29kZV9wcm9qZWN0c1xcbnBtXFxpbnN0aW5jdGh1Yi1yZWFjdC11aVxcbm9kZV9tb2R1bGVzXFxAdGlwdGFwXFxwbVxcdHJhbnNmb3JtXFxkaXN0XFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0cmFuc2Zvcm0vaW5kZXgudHNcbmV4cG9ydCAqIGZyb20gXCJwcm9zZW1pcnJvci10cmFuc2Zvcm1cIjtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/pm/transform/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/pm/view/dist/index.js":
/*!****************************************************!*\
  !*** ./node_modules/@tiptap/pm/view/dist/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Decoration: () => (/* reexport safe */ prosemirror_view__WEBPACK_IMPORTED_MODULE_0__.Decoration),\n/* harmony export */   DecorationSet: () => (/* reexport safe */ prosemirror_view__WEBPACK_IMPORTED_MODULE_0__.DecorationSet),\n/* harmony export */   EditorView: () => (/* reexport safe */ prosemirror_view__WEBPACK_IMPORTED_MODULE_0__.EditorView),\n/* harmony export */   __endComposition: () => (/* reexport safe */ prosemirror_view__WEBPACK_IMPORTED_MODULE_0__.__endComposition),\n/* harmony export */   __parseFromClipboard: () => (/* reexport safe */ prosemirror_view__WEBPACK_IMPORTED_MODULE_0__.__parseFromClipboard)\n/* harmony export */ });\n/* harmony import */ var prosemirror_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-view */ \"(ssr)/./node_modules/prosemirror-view/dist/index.js\");\n// view/index.ts\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS92aWV3L2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xcQHRpcHRhcFxccG1cXHZpZXdcXGRpc3RcXGluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHZpZXcvaW5kZXgudHNcbmV4cG9ydCAqIGZyb20gXCJwcm9zZW1pcnJvci12aWV3XCI7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/pm/view/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/react/dist/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@tiptap/react/dist/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BubbleMenu: () => (/* binding */ BubbleMenu),\n/* harmony export */   CommandManager: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.CommandManager),\n/* harmony export */   Editor: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.Editor),\n/* harmony export */   EditorConsumer: () => (/* binding */ EditorConsumer),\n/* harmony export */   EditorContent: () => (/* binding */ EditorContent),\n/* harmony export */   EditorContext: () => (/* binding */ EditorContext),\n/* harmony export */   EditorProvider: () => (/* binding */ EditorProvider),\n/* harmony export */   Extension: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.Extension),\n/* harmony export */   FloatingMenu: () => (/* binding */ FloatingMenu),\n/* harmony export */   InputRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.InputRule),\n/* harmony export */   Mark: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.Mark),\n/* harmony export */   Node: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.Node),\n/* harmony export */   NodePos: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.NodePos),\n/* harmony export */   NodeView: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.NodeView),\n/* harmony export */   NodeViewContent: () => (/* binding */ NodeViewContent),\n/* harmony export */   NodeViewWrapper: () => (/* binding */ NodeViewWrapper),\n/* harmony export */   PasteRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.PasteRule),\n/* harmony export */   PureEditorContent: () => (/* binding */ PureEditorContent),\n/* harmony export */   ReactNodeView: () => (/* binding */ ReactNodeView),\n/* harmony export */   ReactNodeViewContext: () => (/* binding */ ReactNodeViewContext),\n/* harmony export */   ReactNodeViewRenderer: () => (/* binding */ ReactNodeViewRenderer),\n/* harmony export */   ReactRenderer: () => (/* binding */ ReactRenderer),\n/* harmony export */   Tracker: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.Tracker),\n/* harmony export */   callOrReturn: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.callOrReturn),\n/* harmony export */   combineTransactionSteps: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.combineTransactionSteps),\n/* harmony export */   createChainableState: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.createChainableState),\n/* harmony export */   createDocument: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.createDocument),\n/* harmony export */   createNodeFromContent: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.createNodeFromContent),\n/* harmony export */   createStyleTag: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.createStyleTag),\n/* harmony export */   defaultBlockAt: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.defaultBlockAt),\n/* harmony export */   deleteProps: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.deleteProps),\n/* harmony export */   elementFromString: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.elementFromString),\n/* harmony export */   escapeForRegEx: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.escapeForRegEx),\n/* harmony export */   extensions: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.extensions),\n/* harmony export */   findChildren: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.findChildren),\n/* harmony export */   findChildrenInRange: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.findChildrenInRange),\n/* harmony export */   findDuplicates: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.findDuplicates),\n/* harmony export */   findParentNode: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.findParentNode),\n/* harmony export */   findParentNodeClosestToPos: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.findParentNodeClosestToPos),\n/* harmony export */   fromString: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.fromString),\n/* harmony export */   generateHTML: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.generateHTML),\n/* harmony export */   generateJSON: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.generateJSON),\n/* harmony export */   generateText: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.generateText),\n/* harmony export */   getAttributes: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getAttributes),\n/* harmony export */   getAttributesFromExtensions: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getAttributesFromExtensions),\n/* harmony export */   getChangedRanges: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getChangedRanges),\n/* harmony export */   getDebugJSON: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getDebugJSON),\n/* harmony export */   getExtensionField: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getExtensionField),\n/* harmony export */   getHTMLFromFragment: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getHTMLFromFragment),\n/* harmony export */   getMarkAttributes: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getMarkAttributes),\n/* harmony export */   getMarkRange: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getMarkRange),\n/* harmony export */   getMarkType: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getMarkType),\n/* harmony export */   getMarksBetween: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getMarksBetween),\n/* harmony export */   getNodeAtPosition: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getNodeAtPosition),\n/* harmony export */   getNodeAttributes: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getNodeAttributes),\n/* harmony export */   getNodeType: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getNodeType),\n/* harmony export */   getRenderedAttributes: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getRenderedAttributes),\n/* harmony export */   getSchema: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getSchema),\n/* harmony export */   getSchemaByResolvedExtensions: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getSchemaByResolvedExtensions),\n/* harmony export */   getSchemaTypeByName: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getSchemaTypeByName),\n/* harmony export */   getSchemaTypeNameByName: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getSchemaTypeNameByName),\n/* harmony export */   getSplittedAttributes: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getSplittedAttributes),\n/* harmony export */   getText: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getText),\n/* harmony export */   getTextBetween: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getTextBetween),\n/* harmony export */   getTextContentFromNodes: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getTextContentFromNodes),\n/* harmony export */   getTextSerializersFromSchema: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getTextSerializersFromSchema),\n/* harmony export */   injectExtensionAttributesToParseRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.injectExtensionAttributesToParseRule),\n/* harmony export */   inputRulesPlugin: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.inputRulesPlugin),\n/* harmony export */   isActive: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isActive),\n/* harmony export */   isAtEndOfNode: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isAtEndOfNode),\n/* harmony export */   isAtStartOfNode: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isAtStartOfNode),\n/* harmony export */   isEmptyObject: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isEmptyObject),\n/* harmony export */   isExtensionRulesEnabled: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isExtensionRulesEnabled),\n/* harmony export */   isFunction: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isFunction),\n/* harmony export */   isList: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isList),\n/* harmony export */   isMacOS: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isMacOS),\n/* harmony export */   isMarkActive: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isMarkActive),\n/* harmony export */   isNodeActive: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isNodeActive),\n/* harmony export */   isNodeEmpty: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isNodeEmpty),\n/* harmony export */   isNodeSelection: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isNodeSelection),\n/* harmony export */   isNumber: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isNumber),\n/* harmony export */   isPlainObject: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isPlainObject),\n/* harmony export */   isRegExp: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isRegExp),\n/* harmony export */   isString: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isString),\n/* harmony export */   isTextSelection: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isTextSelection),\n/* harmony export */   isiOS: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isiOS),\n/* harmony export */   markInputRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.markInputRule),\n/* harmony export */   markPasteRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.markPasteRule),\n/* harmony export */   mergeAttributes: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.mergeAttributes),\n/* harmony export */   mergeDeep: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.mergeDeep),\n/* harmony export */   minMax: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.minMax),\n/* harmony export */   nodeInputRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.nodeInputRule),\n/* harmony export */   nodePasteRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.nodePasteRule),\n/* harmony export */   objectIncludes: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.objectIncludes),\n/* harmony export */   pasteRulesPlugin: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.pasteRulesPlugin),\n/* harmony export */   posToDOMRect: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.posToDOMRect),\n/* harmony export */   removeDuplicates: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.removeDuplicates),\n/* harmony export */   resolveFocusPosition: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.resolveFocusPosition),\n/* harmony export */   rewriteUnknownContent: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.rewriteUnknownContent),\n/* harmony export */   selectionToInsertionEnd: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.selectionToInsertionEnd),\n/* harmony export */   splitExtensions: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.splitExtensions),\n/* harmony export */   textInputRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.textInputRule),\n/* harmony export */   textPasteRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.textPasteRule),\n/* harmony export */   textblockTypeInputRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.textblockTypeInputRule),\n/* harmony export */   useCurrentEditor: () => (/* binding */ useCurrentEditor),\n/* harmony export */   useEditor: () => (/* binding */ useEditor),\n/* harmony export */   useEditorState: () => (/* binding */ useEditorState),\n/* harmony export */   useReactNodeView: () => (/* binding */ useReactNodeView),\n/* harmony export */   wrappingInputRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.wrappingInputRule)\n/* harmony export */ });\n/* harmony import */ var _tiptap_extension_bubble_menu__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @tiptap/extension-bubble-menu */ \"(ssr)/./node_modules/@tiptap/extension-bubble-menu/dist/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var _tiptap_extension_floating_menu__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @tiptap/extension-floating-menu */ \"(ssr)/./node_modules/@tiptap/extension-floating-menu/dist/index.js\");\nvar _excluded = [\"editor\", \"innerRef\"],\n  _excluded2 = [\"children\", \"slotAfter\", \"slotBefore\", \"editorContainerProps\"];\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _callSuper(_this, derived, args) {\n  function isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n      return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    } catch (e) {\n      return false;\n    }\n  }\n  derived = _getPrototypeOf(derived);\n  return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));\n}\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\n\n\n\n\n\nfunction getDefaultExportFromCjs(x) {\n  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\nvar shim = {\n  exports: {}\n};\nvar useSyncExternalStoreShim_production_min = {};\n\n/**\n * @license React\n * use-sync-external-store-shim.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar hasRequiredUseSyncExternalStoreShim_production_min;\nfunction requireUseSyncExternalStoreShim_production_min() {\n  if (hasRequiredUseSyncExternalStoreShim_production_min) return useSyncExternalStoreShim_production_min;\n  hasRequiredUseSyncExternalStoreShim_production_min = 1;\n  var e = react__WEBPACK_IMPORTED_MODULE_0__;\n  function h(a, b) {\n    return a === b && (0 !== a || 1 / a === 1 / b) || a !== a && b !== b;\n  }\n  var k = \"function\" === typeof Object.is ? Object.is : h,\n    l = e.useState,\n    m = e.useEffect,\n    n = e.useLayoutEffect,\n    p = e.useDebugValue;\n  function q(a, b) {\n    var d = b(),\n      f = l({\n        inst: {\n          value: d,\n          getSnapshot: b\n        }\n      }),\n      c = f[0].inst,\n      g = f[1];\n    n(function () {\n      c.value = d;\n      c.getSnapshot = b;\n      r(c) && g({\n        inst: c\n      });\n    }, [a, d, b]);\n    m(function () {\n      r(c) && g({\n        inst: c\n      });\n      return a(function () {\n        r(c) && g({\n          inst: c\n        });\n      });\n    }, [a]);\n    p(d);\n    return d;\n  }\n  function r(a) {\n    var b = a.getSnapshot;\n    a = a.value;\n    try {\n      var d = b();\n      return !k(a, d);\n    } catch (f) {\n      return !0;\n    }\n  }\n  function t(a, b) {\n    return b();\n  }\n  var u =  true ? t : 0;\n  useSyncExternalStoreShim_production_min.useSyncExternalStore = void 0 !== e.useSyncExternalStore ? e.useSyncExternalStore : u;\n  return useSyncExternalStoreShim_production_min;\n}\nvar useSyncExternalStoreShim_development = {};\n\n/**\n * @license React\n * use-sync-external-store-shim.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar hasRequiredUseSyncExternalStoreShim_development;\nfunction requireUseSyncExternalStoreShim_development() {\n  if (hasRequiredUseSyncExternalStoreShim_development) return useSyncExternalStoreShim_development;\n  hasRequiredUseSyncExternalStoreShim_development = 1;\n  if (true) {\n    (function () {\n      /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === 'function') {\n        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());\n      }\n      var React$1 = react__WEBPACK_IMPORTED_MODULE_0__;\n      var ReactSharedInternals = React$1.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n      function error(format) {\n        {\n          {\n            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n              args[_key2 - 1] = arguments[_key2];\n            }\n            printWarning('error', format, args);\n          }\n        }\n      }\n      function printWarning(level, format, args) {\n        // When changing this logic, you might want to also\n        // update consoleWithStackDev.www.js as well.\n        {\n          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n          var stack = ReactDebugCurrentFrame.getStackAddendum();\n          if (stack !== '') {\n            format += '%s';\n            args = args.concat([stack]);\n          } // eslint-disable-next-line react-internal/safe-string-coercion\n\n          var argsWithFormat = args.map(function (item) {\n            return String(item);\n          }); // Careful: RN currently depends on this prefix\n\n          argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n          // breaks IE9: https://github.com/facebook/react/issues/13610\n          // eslint-disable-next-line react-internal/no-production-logging\n\n          Function.prototype.apply.call(console[level], console, argsWithFormat);\n        }\n      }\n\n      /**\n       * inlined Object.is polyfill to avoid requiring consumers ship their own\n       * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n       */\n      function is(x, y) {\n        return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare\n        ;\n      }\n\n      var objectIs = typeof Object.is === 'function' ? Object.is : is;\n\n      // dispatch for CommonJS interop named imports.\n\n      var useState = React$1.useState,\n        useEffect = React$1.useEffect,\n        useLayoutEffect = React$1.useLayoutEffect,\n        useDebugValue = React$1.useDebugValue;\n      var didWarnOld18Alpha = false;\n      var didWarnUncachedGetSnapshot = false; // Disclaimer: This shim breaks many of the rules of React, and only works\n      // because of a very particular set of implementation details and assumptions\n      // -- change any one of them and it will break. The most important assumption\n      // is that updates are always synchronous, because concurrent rendering is\n      // only available in versions of React that also have a built-in\n      // useSyncExternalStore API. And we only use this shim when the built-in API\n      // does not exist.\n      //\n      // Do not assume that the clever hacks used by this hook also work in general.\n      // The point of this shim is to replace the need for hacks by other libraries.\n\n      function useSyncExternalStore(subscribe, getSnapshot,\n      // Note: The shim does not use getServerSnapshot, because pre-18 versions of\n      // React do not expose a way to check if we're hydrating. So users of the shim\n      // will need to track that themselves and return the correct value\n      // from `getSnapshot`.\n      getServerSnapshot) {\n        {\n          if (!didWarnOld18Alpha) {\n            if (React$1.startTransition !== undefined) {\n              didWarnOld18Alpha = true;\n              error('You are using an outdated, pre-release alpha of React 18 that ' + 'does not support useSyncExternalStore. The ' + 'use-sync-external-store shim will not work correctly. Upgrade ' + 'to a newer pre-release.');\n            }\n          }\n        } // Read the current snapshot from the store on every render. Again, this\n        // breaks the rules of React, and only works here because of specific\n        // implementation details, most importantly that updates are\n        // always synchronous.\n\n        var value = getSnapshot();\n        {\n          if (!didWarnUncachedGetSnapshot) {\n            var cachedValue = getSnapshot();\n            if (!objectIs(value, cachedValue)) {\n              error('The result of getSnapshot should be cached to avoid an infinite loop');\n              didWarnUncachedGetSnapshot = true;\n            }\n          }\n        } // Because updates are synchronous, we don't queue them. Instead we force a\n        // re-render whenever the subscribed state changes by updating an some\n        // arbitrary useState hook. Then, during render, we call getSnapshot to read\n        // the current value.\n        //\n        // Because we don't actually use the state returned by the useState hook, we\n        // can save a bit of memory by storing other stuff in that slot.\n        //\n        // To implement the early bailout, we need to track some things on a mutable\n        // object. Usually, we would put that in a useRef hook, but we can stash it in\n        // our useState hook instead.\n        //\n        // To force a re-render, we call forceUpdate({inst}). That works because the\n        // new object always fails an equality check.\n\n        var _useState = useState({\n            inst: {\n              value: value,\n              getSnapshot: getSnapshot\n            }\n          }),\n          inst = _useState[0].inst,\n          forceUpdate = _useState[1]; // Track the latest getSnapshot function with a ref. This needs to be updated\n        // in the layout phase so we can access it during the tearing check that\n        // happens on subscribe.\n\n        useLayoutEffect(function () {\n          inst.value = value;\n          inst.getSnapshot = getSnapshot; // Whenever getSnapshot or subscribe changes, we need to check in the\n          // commit phase if there was an interleaved mutation. In concurrent mode\n          // this can happen all the time, but even in synchronous mode, an earlier\n          // effect may have mutated the store.\n\n          if (checkIfSnapshotChanged(inst)) {\n            // Force a re-render.\n            forceUpdate({\n              inst: inst\n            });\n          }\n        }, [subscribe, value, getSnapshot]);\n        useEffect(function () {\n          // Check for changes right before subscribing. Subsequent changes will be\n          // detected in the subscription handler.\n          if (checkIfSnapshotChanged(inst)) {\n            // Force a re-render.\n            forceUpdate({\n              inst: inst\n            });\n          }\n          var handleStoreChange = function handleStoreChange() {\n            // TODO: Because there is no cross-renderer API for batching updates, it's\n            // up to the consumer of this library to wrap their subscription event\n            // with unstable_batchedUpdates. Should we try to detect when this isn't\n            // the case and print a warning in development?\n            // The store changed. Check if the snapshot changed since the last time we\n            // read from the store.\n            if (checkIfSnapshotChanged(inst)) {\n              // Force a re-render.\n              forceUpdate({\n                inst: inst\n              });\n            }\n          }; // Subscribe to the store and return a clean-up function.\n\n          return subscribe(handleStoreChange);\n        }, [subscribe]);\n        useDebugValue(value);\n        return value;\n      }\n      function checkIfSnapshotChanged(inst) {\n        var latestGetSnapshot = inst.getSnapshot;\n        var prevValue = inst.value;\n        try {\n          var nextValue = latestGetSnapshot();\n          return !objectIs(prevValue, nextValue);\n        } catch (error) {\n          return true;\n        }\n      }\n      function useSyncExternalStore$1(subscribe, getSnapshot, getServerSnapshot) {\n        // Note: The shim does not use getServerSnapshot, because pre-18 versions of\n        // React do not expose a way to check if we're hydrating. So users of the shim\n        // will need to track that themselves and return the correct value\n        // from `getSnapshot`.\n        return getSnapshot();\n      }\n      var canUseDOM = !!( false && 0);\n      var isServerEnvironment = !canUseDOM;\n      var shim = isServerEnvironment ? useSyncExternalStore$1 : useSyncExternalStore;\n      var useSyncExternalStore$2 = React$1.useSyncExternalStore !== undefined ? React$1.useSyncExternalStore : shim;\n      useSyncExternalStoreShim_development.useSyncExternalStore = useSyncExternalStore$2;\n      /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === 'function') {\n        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());\n      }\n    })();\n  }\n  return useSyncExternalStoreShim_development;\n}\nif (false) {} else {\n  shim.exports = requireUseSyncExternalStoreShim_development();\n}\nvar shimExports = shim.exports;\nvar mergeRefs = function mergeRefs() {\n  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {\n    refs[_key] = arguments[_key];\n  }\n  return function (node) {\n    refs.forEach(function (ref) {\n      if (typeof ref === 'function') {\n        ref(node);\n      } else if (ref) {\n        ref.current = node;\n      }\n    });\n  };\n};\n/**\n * This component renders all of the editor's node views.\n */\nvar Portals = function Portals(_ref) {\n  var contentComponent = _ref.contentComponent;\n  // For performance reasons, we render the node view portals on state changes only\n  var renderers = shimExports.useSyncExternalStore(contentComponent.subscribe, contentComponent.getSnapshot, contentComponent.getServerSnapshot);\n  // This allows us to directly render the portals without any additional wrapper\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, Object.values(renderers));\n};\nfunction getInstance() {\n  var subscribers = new Set();\n  var renderers = {};\n  return {\n    /**\n     * Subscribe to the editor instance's changes.\n     */\n    subscribe: function subscribe(callback) {\n      subscribers.add(callback);\n      return function () {\n        subscribers[\"delete\"](callback);\n      };\n    },\n    getSnapshot: function getSnapshot() {\n      return renderers;\n    },\n    getServerSnapshot: function getServerSnapshot() {\n      return renderers;\n    },\n    /**\n     * Adds a new NodeView Renderer to the editor.\n     */\n    setRenderer: function setRenderer(id, renderer) {\n      renderers = _objectSpread(_objectSpread({}, renderers), {}, _defineProperty({}, id, /*#__PURE__*/react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal(renderer.reactElement, renderer.element, id)));\n      subscribers.forEach(function (subscriber) {\n        return subscriber();\n      });\n    },\n    /**\n     * Removes a NodeView Renderer from the editor.\n     */\n    removeRenderer: function removeRenderer(id) {\n      var nextRenderers = _objectSpread({}, renderers);\n      delete nextRenderers[id];\n      renderers = nextRenderers;\n      subscribers.forEach(function (subscriber) {\n        return subscriber();\n      });\n    }\n  };\n}\nvar PureEditorContent = /*#__PURE__*/function (_React$Component) {\n  function PureEditorContent(props) {\n    var _this2;\n    _classCallCheck(this, PureEditorContent);\n    var _a;\n    _this2 = _callSuper(this, PureEditorContent, [props]);\n    _this2.editorContentRef = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createRef();\n    _this2.initialized = false;\n    _this2.state = {\n      hasContentComponentInitialized: Boolean((_a = props.editor) === null || _a === void 0 ? void 0 : _a.contentComponent)\n    };\n    return _this2;\n  }\n  _inherits(PureEditorContent, _React$Component);\n  return _createClass(PureEditorContent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.init();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.init();\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var _this3 = this;\n      var editor = this.props.editor;\n      if (editor && !editor.isDestroyed && editor.options.element) {\n        if (editor.contentComponent) {\n          return;\n        }\n        var element = this.editorContentRef.current;\n        element.append.apply(element, _toConsumableArray(editor.options.element.childNodes));\n        editor.setOptions({\n          element: element\n        });\n        editor.contentComponent = getInstance();\n        // Has the content component been initialized?\n        if (!this.state.hasContentComponentInitialized) {\n          // Subscribe to the content component\n          this.unsubscribeToContentComponent = editor.contentComponent.subscribe(function () {\n            _this3.setState(function (prevState) {\n              if (!prevState.hasContentComponentInitialized) {\n                return {\n                  hasContentComponentInitialized: true\n                };\n              }\n              return prevState;\n            });\n            // Unsubscribe to previous content component\n            if (_this3.unsubscribeToContentComponent) {\n              _this3.unsubscribeToContentComponent();\n            }\n          });\n        }\n        editor.createNodeViews();\n        this.initialized = true;\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var editor = this.props.editor;\n      if (!editor) {\n        return;\n      }\n      this.initialized = false;\n      if (!editor.isDestroyed) {\n        editor.view.setProps({\n          nodeViews: {}\n        });\n      }\n      if (this.unsubscribeToContentComponent) {\n        this.unsubscribeToContentComponent();\n      }\n      editor.contentComponent = null;\n      if (!editor.options.element.firstChild) {\n        return;\n      }\n      var newElement = document.createElement('div');\n      newElement.append.apply(newElement, _toConsumableArray(editor.options.element.childNodes));\n      editor.setOptions({\n        element: newElement\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n        editor = _this$props.editor,\n        innerRef = _this$props.innerRef,\n        rest = _objectWithoutProperties(_this$props, _excluded);\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", _objectSpread({\n        ref: mergeRefs(innerRef, this.editorContentRef)\n      }, rest)), (editor === null || editor === void 0 ? void 0 : editor.contentComponent) && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(Portals, {\n        contentComponent: editor.contentComponent\n      }));\n    }\n  }]);\n}(react__WEBPACK_IMPORTED_MODULE_0__.Component); // EditorContent should be re-created whenever the Editor instance changes\nvar EditorContentWithKey = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (props, ref) {\n  var key = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(function () {\n    return Math.floor(Math.random() * 0xffffffff).toString();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.editor]);\n  // Can't use JSX here because it conflicts with the type definition of Vue's JSX, so use createElement\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(PureEditorContent, _objectSpread({\n    key: key,\n    innerRef: ref\n  }, props));\n});\nvar EditorContent = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.memo(EditorContentWithKey);\nvar react = function equal(a, b) {\n  if (a === b) return true;\n  if (a && b && _typeof(a) == 'object' && _typeof(b) == 'object') {\n    if (a.constructor !== b.constructor) return false;\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;) if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n    if (a instanceof Map && b instanceof Map) {\n      if (a.size !== b.size) return false;\n      var _iterator = _createForOfIteratorHelper(a.entries()),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          i = _step.value;\n          if (!b.has(i[0])) return false;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      var _iterator2 = _createForOfIteratorHelper(a.entries()),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          i = _step2.value;\n          if (!equal(i[1], b.get(i[0]))) return false;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      return true;\n    }\n    if (a instanceof Set && b instanceof Set) {\n      if (a.size !== b.size) return false;\n      var _iterator3 = _createForOfIteratorHelper(a.entries()),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          i = _step3.value;\n          if (!b.has(i[0])) return false;\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      return true;\n    }\n    if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;) if (a[i] !== b[i]) return false;\n      return true;\n    }\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n    for (i = length; i-- !== 0;) if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n      if (key === '_owner' && a.$$typeof) {\n        // React-specific: avoid traversing React elements' _owner.\n        //  _owner contains circular references\n        // and is not needed when comparing the actual elements (and not their owners)\n        continue;\n      }\n      if (!equal(a[key], b[key])) return false;\n    }\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a !== a && b !== b;\n};\nvar deepEqual = /*@__PURE__*/getDefaultExportFromCjs(react);\nvar withSelector = {\n  exports: {}\n};\nvar withSelector_production_min = {};\n\n/**\n * @license React\n * use-sync-external-store-shim/with-selector.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar hasRequiredWithSelector_production_min;\nfunction requireWithSelector_production_min() {\n  if (hasRequiredWithSelector_production_min) return withSelector_production_min;\n  hasRequiredWithSelector_production_min = 1;\n  var h = react__WEBPACK_IMPORTED_MODULE_0__,\n    n = shimExports;\n  function p(a, b) {\n    return a === b && (0 !== a || 1 / a === 1 / b) || a !== a && b !== b;\n  }\n  var q = \"function\" === typeof Object.is ? Object.is : p,\n    r = n.useSyncExternalStore,\n    t = h.useRef,\n    u = h.useEffect,\n    v = h.useMemo,\n    w = h.useDebugValue;\n  withSelector_production_min.useSyncExternalStoreWithSelector = function (a, b, e, l, g) {\n    var c = t(null);\n    if (null === c.current) {\n      var f = {\n        hasValue: !1,\n        value: null\n      };\n      c.current = f;\n    } else f = c.current;\n    c = v(function () {\n      function a(a) {\n        if (!c) {\n          c = !0;\n          d = a;\n          a = l(a);\n          if (void 0 !== g && f.hasValue) {\n            var b = f.value;\n            if (g(b, a)) return k = b;\n          }\n          return k = a;\n        }\n        b = k;\n        if (q(d, a)) return b;\n        var e = l(a);\n        if (void 0 !== g && g(b, e)) return b;\n        d = a;\n        return k = e;\n      }\n      var c = !1,\n        d,\n        k,\n        m = void 0 === e ? null : e;\n      return [function () {\n        return a(b());\n      }, null === m ? void 0 : function () {\n        return a(m());\n      }];\n    }, [b, e, l, g]);\n    var d = r(a, c[0], c[1]);\n    u(function () {\n      f.hasValue = !0;\n      f.value = d;\n    }, [d]);\n    w(d);\n    return d;\n  };\n  return withSelector_production_min;\n}\nvar withSelector_development = {};\n\n/**\n * @license React\n * use-sync-external-store-shim/with-selector.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar hasRequiredWithSelector_development;\nfunction requireWithSelector_development() {\n  if (hasRequiredWithSelector_development) return withSelector_development;\n  hasRequiredWithSelector_development = 1;\n  if (true) {\n    (function () {\n      /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === 'function') {\n        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());\n      }\n      var React$1 = react__WEBPACK_IMPORTED_MODULE_0__;\n      var shim = shimExports;\n\n      /**\n       * inlined Object.is polyfill to avoid requiring consumers ship their own\n       * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n       */\n      function is(x, y) {\n        return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare\n        ;\n      }\n\n      var objectIs = typeof Object.is === 'function' ? Object.is : is;\n      var useSyncExternalStore = shim.useSyncExternalStore;\n\n      // for CommonJS interop.\n\n      var useRef = React$1.useRef,\n        useEffect = React$1.useEffect,\n        useMemo = React$1.useMemo,\n        useDebugValue = React$1.useDebugValue; // Same as useSyncExternalStore, but supports selector and isEqual arguments.\n\n      function useSyncExternalStoreWithSelector(subscribe, getSnapshot, getServerSnapshot, selector, isEqual) {\n        // Use this to track the rendered snapshot.\n        var instRef = useRef(null);\n        var inst;\n        if (instRef.current === null) {\n          inst = {\n            hasValue: false,\n            value: null\n          };\n          instRef.current = inst;\n        } else {\n          inst = instRef.current;\n        }\n        var _useMemo = useMemo(function () {\n            // Track the memoized state using closure variables that are local to this\n            // memoized instance of a getSnapshot function. Intentionally not using a\n            // useRef hook, because that state would be shared across all concurrent\n            // copies of the hook/component.\n            var hasMemo = false;\n            var memoizedSnapshot;\n            var memoizedSelection;\n            var memoizedSelector = function memoizedSelector(nextSnapshot) {\n              if (!hasMemo) {\n                // The first time the hook is called, there is no memoized result.\n                hasMemo = true;\n                memoizedSnapshot = nextSnapshot;\n                var _nextSelection = selector(nextSnapshot);\n                if (isEqual !== undefined) {\n                  // Even if the selector has changed, the currently rendered selection\n                  // may be equal to the new selection. We should attempt to reuse the\n                  // current value if possible, to preserve downstream memoizations.\n                  if (inst.hasValue) {\n                    var currentSelection = inst.value;\n                    if (isEqual(currentSelection, _nextSelection)) {\n                      memoizedSelection = currentSelection;\n                      return currentSelection;\n                    }\n                  }\n                }\n                memoizedSelection = _nextSelection;\n                return _nextSelection;\n              } // We may be able to reuse the previous invocation's result.\n\n              // We may be able to reuse the previous invocation's result.\n              var prevSnapshot = memoizedSnapshot;\n              var prevSelection = memoizedSelection;\n              if (objectIs(prevSnapshot, nextSnapshot)) {\n                // The snapshot is the same as last time. Reuse the previous selection.\n                return prevSelection;\n              } // The snapshot has changed, so we need to compute a new selection.\n\n              // The snapshot has changed, so we need to compute a new selection.\n              var nextSelection = selector(nextSnapshot); // If a custom isEqual function is provided, use that to check if the data\n              // has changed. If it hasn't, return the previous selection. That signals\n              // to React that the selections are conceptually equal, and we can bail\n              // out of rendering.\n\n              // If a custom isEqual function is provided, use that to check if the data\n              // has changed. If it hasn't, return the previous selection. That signals\n              // to React that the selections are conceptually equal, and we can bail\n              // out of rendering.\n              if (isEqual !== undefined && isEqual(prevSelection, nextSelection)) {\n                return prevSelection;\n              }\n              memoizedSnapshot = nextSnapshot;\n              memoizedSelection = nextSelection;\n              return nextSelection;\n            }; // Assigning this to a constant so that Flow knows it can't change.\n\n            // Assigning this to a constant so that Flow knows it can't change.\n            var maybeGetServerSnapshot = getServerSnapshot === undefined ? null : getServerSnapshot;\n            var getSnapshotWithSelector = function getSnapshotWithSelector() {\n              return memoizedSelector(getSnapshot());\n            };\n            var getServerSnapshotWithSelector = maybeGetServerSnapshot === null ? undefined : function () {\n              return memoizedSelector(maybeGetServerSnapshot());\n            };\n            return [getSnapshotWithSelector, getServerSnapshotWithSelector];\n          }, [getSnapshot, getServerSnapshot, selector, isEqual]),\n          getSelection = _useMemo[0],\n          getServerSelection = _useMemo[1];\n        var value = useSyncExternalStore(subscribe, getSelection, getServerSelection);\n        useEffect(function () {\n          inst.hasValue = true;\n          inst.value = value;\n        }, [value]);\n        useDebugValue(value);\n        return value;\n      }\n      withSelector_development.useSyncExternalStoreWithSelector = useSyncExternalStoreWithSelector;\n      /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === 'function') {\n        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());\n      }\n    })();\n  }\n  return withSelector_development;\n}\nif (false) {} else {\n  withSelector.exports = requireWithSelector_development();\n}\nvar withSelectorExports = withSelector.exports;\nvar useIsomorphicLayoutEffect =  false ? 0 : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\n/**\n * To synchronize the editor instance with the component state,\n * we need to create a separate instance that is not affected by the component re-renders.\n */\nvar EditorStateManager = /*#__PURE__*/function () {\n  function EditorStateManager(initialEditor) {\n    _classCallCheck(this, EditorStateManager);\n    this.transactionNumber = 0;\n    this.lastTransactionNumber = 0;\n    this.subscribers = new Set();\n    this.editor = initialEditor;\n    this.lastSnapshot = {\n      editor: initialEditor,\n      transactionNumber: 0\n    };\n    this.getSnapshot = this.getSnapshot.bind(this);\n    this.getServerSnapshot = this.getServerSnapshot.bind(this);\n    this.watch = this.watch.bind(this);\n    this.subscribe = this.subscribe.bind(this);\n  }\n  /**\n   * Get the current editor instance.\n   */\n  return _createClass(EditorStateManager, [{\n    key: \"getSnapshot\",\n    value: function getSnapshot() {\n      if (this.transactionNumber === this.lastTransactionNumber) {\n        return this.lastSnapshot;\n      }\n      this.lastTransactionNumber = this.transactionNumber;\n      this.lastSnapshot = {\n        editor: this.editor,\n        transactionNumber: this.transactionNumber\n      };\n      return this.lastSnapshot;\n    }\n    /**\n     * Always disable the editor on the server-side.\n     */\n  }, {\n    key: \"getServerSnapshot\",\n    value: function getServerSnapshot() {\n      return {\n        editor: null,\n        transactionNumber: 0\n      };\n    }\n    /**\n     * Subscribe to the editor instance's changes.\n     */\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(callback) {\n      var _this4 = this;\n      this.subscribers.add(callback);\n      return function () {\n        _this4.subscribers[\"delete\"](callback);\n      };\n    }\n    /**\n     * Watch the editor instance for changes.\n     */\n  }, {\n    key: \"watch\",\n    value: function watch(nextEditor) {\n      var _this5 = this;\n      this.editor = nextEditor;\n      if (this.editor) {\n        /**\n         * This will force a re-render when the editor state changes.\n         * This is to support things like `editor.can().toggleBold()` in components that `useEditor`.\n         * This could be more efficient, but it's a good trade-off for now.\n         */\n        var fn = function fn() {\n          _this5.transactionNumber += 1;\n          _this5.subscribers.forEach(function (callback) {\n            return callback();\n          });\n        };\n        var currentEditor = this.editor;\n        currentEditor.on('transaction', fn);\n        return function () {\n          currentEditor.off('transaction', fn);\n        };\n      }\n      return undefined;\n    }\n  }]);\n}();\n/**\n * This hook allows you to watch for changes on the editor instance.\n * It will allow you to select a part of the editor state and re-render the component when it changes.\n * @example\n * ```tsx\n * const editor = useEditor({...options})\n * const { currentSelection } = useEditorState({\n *  editor,\n *  selector: snapshot => ({ currentSelection: snapshot.editor.state.selection }),\n * })\n */\nfunction useEditorState(options) {\n  var _a;\n  var _useState2 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(function () {\n      return new EditorStateManager(options.editor);\n    }),\n    _useState3 = _slicedToArray(_useState2, 1),\n    editorStateManager = _useState3[0];\n  // Using the `useSyncExternalStore` hook to sync the editor instance with the component state\n  var selectedState = withSelectorExports.useSyncExternalStoreWithSelector(editorStateManager.subscribe, editorStateManager.getSnapshot, editorStateManager.getServerSnapshot, options.selector, (_a = options.equalityFn) !== null && _a !== void 0 ? _a : deepEqual);\n  useIsomorphicLayoutEffect(function () {\n    return editorStateManager.watch(options.editor);\n  }, [options.editor, editorStateManager]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useDebugValue)(selectedState);\n  return selectedState;\n}\nvar isDev = true;\nvar isSSR = true;\nvar isNext = isSSR || Boolean( false && 0);\n/**\n * This class handles the creation, destruction, and re-creation of the editor instance.\n */\nvar EditorInstanceManager = /*#__PURE__*/function () {\n  function EditorInstanceManager(options) {\n    _classCallCheck(this, EditorInstanceManager);\n    /**\n     * The current editor instance.\n     */\n    this.editor = null;\n    /**\n     * The subscriptions to notify when the editor instance\n     * has been created or destroyed.\n     */\n    this.subscriptions = new Set();\n    /**\n     * Whether the editor has been mounted.\n     */\n    this.isComponentMounted = false;\n    /**\n     * The most recent dependencies array.\n     */\n    this.previousDeps = null;\n    /**\n     * The unique instance ID. This is used to identify the editor instance. And will be re-generated for each new instance.\n     */\n    this.instanceId = '';\n    this.options = options;\n    this.subscriptions = new Set();\n    this.setEditor(this.getInitialEditor());\n    this.scheduleDestroy();\n    this.getEditor = this.getEditor.bind(this);\n    this.getServerSnapshot = this.getServerSnapshot.bind(this);\n    this.subscribe = this.subscribe.bind(this);\n    this.refreshEditorInstance = this.refreshEditorInstance.bind(this);\n    this.scheduleDestroy = this.scheduleDestroy.bind(this);\n    this.onRender = this.onRender.bind(this);\n    this.createEditor = this.createEditor.bind(this);\n  }\n  return _createClass(EditorInstanceManager, [{\n    key: \"setEditor\",\n    value: function setEditor(editor) {\n      this.editor = editor;\n      this.instanceId = Math.random().toString(36).slice(2, 9);\n      // Notify all subscribers that the editor instance has been created\n      this.subscriptions.forEach(function (cb) {\n        return cb();\n      });\n    }\n  }, {\n    key: \"getInitialEditor\",\n    value: function getInitialEditor() {\n      if (this.options.current.immediatelyRender === undefined) {\n        if (isSSR || isNext) {\n          // TODO in the next major release, we should throw an error here\n          if (isDev) {\n            /**\n             * Throw an error in development, to make sure the developer is aware that tiptap cannot be SSR'd\n             * and that they need to set `immediatelyRender` to `false` to avoid hydration mismatches.\n             */\n            console.warn('Tiptap Error: SSR has been detected, please set `immediatelyRender` explicitly to `false` to avoid hydration mismatches.');\n          }\n          // Best faith effort in production, run the code in the legacy mode to avoid hydration mismatches and errors in production\n          return null;\n        }\n        // Default to immediately rendering when client-side rendering\n        return this.createEditor();\n      }\n      if (this.options.current.immediatelyRender && isSSR && isDev) {\n        // Warn in development, to make sure the developer is aware that tiptap cannot be SSR'd, set `immediatelyRender` to `false` to avoid hydration mismatches.\n        throw new Error('Tiptap Error: SSR has been detected, and `immediatelyRender` has been set to `true` this is an unsupported configuration that may result in errors, explicitly set `immediatelyRender` to `false` to avoid hydration mismatches.');\n      }\n      if (this.options.current.immediatelyRender) {\n        return this.createEditor();\n      }\n      return null;\n    }\n    /**\n     * Create a new editor instance. And attach event listeners.\n     */\n  }, {\n    key: \"createEditor\",\n    value: function createEditor() {\n      var _this6 = this;\n      var optionsToApply = _objectSpread(_objectSpread({}, this.options.current), {}, {\n        // Always call the most recent version of the callback function by default\n        onBeforeCreate: function onBeforeCreate() {\n          var _b2;\n          var _a, _b;\n          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n            args[_key3] = arguments[_key3];\n          }\n          return (_b = (_a = _this6.options.current).onBeforeCreate) === null || _b === void 0 ? void 0 : (_b2 = _b).call.apply(_b2, [_a].concat(args));\n        },\n        onBlur: function onBlur() {\n          var _b3;\n          var _a, _b;\n          for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n            args[_key4] = arguments[_key4];\n          }\n          return (_b = (_a = _this6.options.current).onBlur) === null || _b === void 0 ? void 0 : (_b3 = _b).call.apply(_b3, [_a].concat(args));\n        },\n        onCreate: function onCreate() {\n          var _b4;\n          var _a, _b;\n          for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n            args[_key5] = arguments[_key5];\n          }\n          return (_b = (_a = _this6.options.current).onCreate) === null || _b === void 0 ? void 0 : (_b4 = _b).call.apply(_b4, [_a].concat(args));\n        },\n        onDestroy: function onDestroy() {\n          var _b5;\n          var _a, _b;\n          for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n            args[_key6] = arguments[_key6];\n          }\n          return (_b = (_a = _this6.options.current).onDestroy) === null || _b === void 0 ? void 0 : (_b5 = _b).call.apply(_b5, [_a].concat(args));\n        },\n        onFocus: function onFocus() {\n          var _b6;\n          var _a, _b;\n          for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n            args[_key7] = arguments[_key7];\n          }\n          return (_b = (_a = _this6.options.current).onFocus) === null || _b === void 0 ? void 0 : (_b6 = _b).call.apply(_b6, [_a].concat(args));\n        },\n        onSelectionUpdate: function onSelectionUpdate() {\n          var _b7;\n          var _a, _b;\n          for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n            args[_key8] = arguments[_key8];\n          }\n          return (_b = (_a = _this6.options.current).onSelectionUpdate) === null || _b === void 0 ? void 0 : (_b7 = _b).call.apply(_b7, [_a].concat(args));\n        },\n        onTransaction: function onTransaction() {\n          var _b8;\n          var _a, _b;\n          for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n            args[_key9] = arguments[_key9];\n          }\n          return (_b = (_a = _this6.options.current).onTransaction) === null || _b === void 0 ? void 0 : (_b8 = _b).call.apply(_b8, [_a].concat(args));\n        },\n        onUpdate: function onUpdate() {\n          var _b9;\n          var _a, _b;\n          for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n            args[_key10] = arguments[_key10];\n          }\n          return (_b = (_a = _this6.options.current).onUpdate) === null || _b === void 0 ? void 0 : (_b9 = _b).call.apply(_b9, [_a].concat(args));\n        },\n        onContentError: function onContentError() {\n          var _b10;\n          var _a, _b;\n          for (var _len11 = arguments.length, args = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {\n            args[_key11] = arguments[_key11];\n          }\n          return (_b = (_a = _this6.options.current).onContentError) === null || _b === void 0 ? void 0 : (_b10 = _b).call.apply(_b10, [_a].concat(args));\n        },\n        onDrop: function onDrop() {\n          var _b11;\n          var _a, _b;\n          for (var _len12 = arguments.length, args = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {\n            args[_key12] = arguments[_key12];\n          }\n          return (_b = (_a = _this6.options.current).onDrop) === null || _b === void 0 ? void 0 : (_b11 = _b).call.apply(_b11, [_a].concat(args));\n        },\n        onPaste: function onPaste() {\n          var _b12;\n          var _a, _b;\n          for (var _len13 = arguments.length, args = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {\n            args[_key13] = arguments[_key13];\n          }\n          return (_b = (_a = _this6.options.current).onPaste) === null || _b === void 0 ? void 0 : (_b12 = _b).call.apply(_b12, [_a].concat(args));\n        }\n      });\n      var editor = new _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.Editor(optionsToApply);\n      // no need to keep track of the event listeners, they will be removed when the editor is destroyed\n      return editor;\n    }\n    /**\n     * Get the current editor instance.\n     */\n  }, {\n    key: \"getEditor\",\n    value: function getEditor() {\n      return this.editor;\n    }\n    /**\n     * Always disable the editor on the server-side.\n     */\n  }, {\n    key: \"getServerSnapshot\",\n    value: function getServerSnapshot() {\n      return null;\n    }\n    /**\n     * Subscribe to the editor instance's changes.\n     */\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(onStoreChange) {\n      var _this7 = this;\n      this.subscriptions.add(onStoreChange);\n      return function () {\n        _this7.subscriptions[\"delete\"](onStoreChange);\n      };\n    }\n  }, {\n    key: \"onRender\",\n    value:\n    /**\n     * On each render, we will create, update, or destroy the editor instance.\n     * @param deps The dependencies to watch for changes\n     * @returns A cleanup function\n     */\n    function onRender(deps) {\n      var _this8 = this;\n      // The returned callback will run on each render\n      return function () {\n        _this8.isComponentMounted = true;\n        // Cleanup any scheduled destructions, since we are currently rendering\n        clearTimeout(_this8.scheduledDestructionTimeout);\n        if (_this8.editor && !_this8.editor.isDestroyed && deps.length === 0) {\n          // if the editor does exist & deps are empty, we don't need to re-initialize the editor generally\n          if (!EditorInstanceManager.compareOptions(_this8.options.current, _this8.editor.options)) {\n            // But, the options are different, so we need to update the editor options\n            // Still, this is faster than re-creating the editor\n            _this8.editor.setOptions(_objectSpread(_objectSpread({}, _this8.options.current), {}, {\n              editable: _this8.editor.isEditable\n            }));\n          }\n        } else {\n          // When the editor:\n          // - does not yet exist\n          // - is destroyed\n          // - the deps array changes\n          // We need to destroy the editor instance and re-initialize it\n          _this8.refreshEditorInstance(deps);\n        }\n        return function () {\n          _this8.isComponentMounted = false;\n          _this8.scheduleDestroy();\n        };\n      };\n    }\n    /**\n     * Recreate the editor instance if the dependencies have changed.\n     */\n  }, {\n    key: \"refreshEditorInstance\",\n    value: function refreshEditorInstance(deps) {\n      if (this.editor && !this.editor.isDestroyed) {\n        // Editor instance already exists\n        if (this.previousDeps === null) {\n          // If lastDeps has not yet been initialized, reuse the current editor instance\n          this.previousDeps = deps;\n          return;\n        }\n        var depsAreEqual = this.previousDeps.length === deps.length && this.previousDeps.every(function (dep, index) {\n          return dep === deps[index];\n        });\n        if (depsAreEqual) {\n          // deps exist and are equal, no need to recreate\n          return;\n        }\n      }\n      if (this.editor && !this.editor.isDestroyed) {\n        // Destroy the editor instance if it exists\n        this.editor.destroy();\n      }\n      this.setEditor(this.createEditor());\n      // Update the lastDeps to the current deps\n      this.previousDeps = deps;\n    }\n    /**\n     * Schedule the destruction of the editor instance.\n     * This will only destroy the editor if it was not mounted on the next tick.\n     * This is to avoid destroying the editor instance when it's actually still mounted.\n     */\n  }, {\n    key: \"scheduleDestroy\",\n    value: function scheduleDestroy() {\n      var _this9 = this;\n      var currentInstanceId = this.instanceId;\n      var currentEditor = this.editor;\n      // Wait two ticks to see if the component is still mounted\n      this.scheduledDestructionTimeout = setTimeout(function () {\n        if (_this9.isComponentMounted && _this9.instanceId === currentInstanceId) {\n          // If still mounted on the following tick, with the same instanceId, do not destroy the editor\n          if (currentEditor) {\n            // just re-apply options as they might have changed\n            currentEditor.setOptions(_this9.options.current);\n          }\n          return;\n        }\n        if (currentEditor && !currentEditor.isDestroyed) {\n          currentEditor.destroy();\n          if (_this9.instanceId === currentInstanceId) {\n            _this9.setEditor(null);\n          }\n        }\n        // This allows the effect to run again between ticks\n        // which may save us from having to re-create the editor\n      }, 1);\n    }\n  }], [{\n    key: \"compareOptions\",\n    value: function compareOptions(a, b) {\n      return Object.keys(a).every(function (key) {\n        if (['onCreate', 'onBeforeCreate', 'onDestroy', 'onUpdate', 'onTransaction', 'onFocus', 'onBlur', 'onSelectionUpdate', 'onContentError', 'onDrop', 'onPaste'].includes(key)) {\n          // we don't want to compare callbacks, they are always different and only registered once\n          return true;\n        }\n        // We often encourage putting extensions inlined in the options object, so we will do a slightly deeper comparison here\n        if (key === 'extensions' && a.extensions && b.extensions) {\n          if (a.extensions.length !== b.extensions.length) {\n            return false;\n          }\n          return a.extensions.every(function (extension, index) {\n            var _a;\n            if (extension !== ((_a = b.extensions) === null || _a === void 0 ? void 0 : _a[index])) {\n              return false;\n            }\n            return true;\n          });\n        }\n        if (a[key] !== b[key]) {\n          // if any of the options have changed, we should update the editor options\n          return false;\n        }\n        return true;\n      });\n    }\n  }]);\n}();\nfunction useEditor() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var deps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var mostRecentOptions = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(options);\n  mostRecentOptions.current = options;\n  var _useState4 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(function () {\n      return new EditorInstanceManager(mostRecentOptions);\n    }),\n    _useState5 = _slicedToArray(_useState4, 1),\n    instanceManager = _useState5[0];\n  var editor = shimExports.useSyncExternalStore(instanceManager.subscribe, instanceManager.getEditor, instanceManager.getServerSnapshot);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useDebugValue)(editor);\n  // This effect will handle creating/updating the editor instance\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(instanceManager.onRender(deps));\n  // The default behavior is to re-render on each transaction\n  // This is legacy behavior that will be removed in future versions\n  useEditorState({\n    editor: editor,\n    selector: function selector(_ref2) {\n      var transactionNumber = _ref2.transactionNumber;\n      if (options.shouldRerenderOnTransaction === false) {\n        // This will prevent the editor from re-rendering on each transaction\n        return null;\n      }\n      // This will avoid re-rendering on the first transaction when `immediatelyRender` is set to `true`\n      if (options.immediatelyRender && transactionNumber === 0) {\n        return 0;\n      }\n      return transactionNumber + 1;\n    }\n  });\n  return editor;\n}\nvar EditorContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n  editor: null\n});\nvar EditorConsumer = EditorContext.Consumer;\n/**\n * A hook to get the current editor instance.\n */\nvar useCurrentEditor = function useCurrentEditor() {\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(EditorContext);\n};\n/**\n * This is the provider component for the editor.\n * It allows the editor to be accessible across the entire component tree\n * with `useCurrentEditor`.\n */\nfunction EditorProvider(_ref3) {\n  var children = _ref3.children,\n    slotAfter = _ref3.slotAfter,\n    slotBefore = _ref3.slotBefore,\n    _ref3$editorContainer = _ref3.editorContainerProps,\n    editorContainerProps = _ref3$editorContainer === void 0 ? {} : _ref3$editorContainer,\n    editorOptions = _objectWithoutProperties(_ref3, _excluded2);\n  var editor = useEditor(editorOptions);\n  if (!editor) {\n    return null;\n  }\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(EditorContext.Provider, {\n    value: {\n      editor: editor\n    }\n  }, slotBefore, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(EditorConsumer, null, function (_ref4) {\n    var currentEditor = _ref4.editor;\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(EditorContent, _objectSpread({\n      editor: currentEditor\n    }, editorContainerProps));\n  }), children, slotAfter);\n}\nvar BubbleMenu = function BubbleMenu(props) {\n  var _useState6 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null),\n    _useState7 = _slicedToArray(_useState6, 2),\n    element = _useState7[0],\n    setElement = _useState7[1];\n  var _useCurrentEditor = useCurrentEditor(),\n    currentEditor = _useCurrentEditor.editor;\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    var _a;\n    if (!element) {\n      return;\n    }\n    if (((_a = props.editor) === null || _a === void 0 ? void 0 : _a.isDestroyed) || (currentEditor === null || currentEditor === void 0 ? void 0 : currentEditor.isDestroyed)) {\n      return;\n    }\n    var _props$pluginKey = props.pluginKey,\n      pluginKey = _props$pluginKey === void 0 ? 'bubbleMenu' : _props$pluginKey,\n      editor = props.editor,\n      _props$tippyOptions = props.tippyOptions,\n      tippyOptions = _props$tippyOptions === void 0 ? {} : _props$tippyOptions,\n      updateDelay = props.updateDelay,\n      _props$shouldShow = props.shouldShow,\n      shouldShow = _props$shouldShow === void 0 ? null : _props$shouldShow;\n    var menuEditor = editor || currentEditor;\n    if (!menuEditor) {\n      console.warn('BubbleMenu component is not rendered inside of an editor component or does not have editor prop.');\n      return;\n    }\n    var plugin = (0,_tiptap_extension_bubble_menu__WEBPACK_IMPORTED_MODULE_3__.BubbleMenuPlugin)({\n      updateDelay: updateDelay,\n      editor: menuEditor,\n      element: element,\n      pluginKey: pluginKey,\n      shouldShow: shouldShow,\n      tippyOptions: tippyOptions\n    });\n    menuEditor.registerPlugin(plugin);\n    return function () {\n      menuEditor.unregisterPlugin(pluginKey);\n    };\n  }, [props.editor, currentEditor, element]);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n    ref: setElement,\n    className: props.className,\n    style: {\n      visibility: 'hidden'\n    }\n  }, props.children);\n};\nvar FloatingMenu = function FloatingMenu(props) {\n  var _useState8 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null),\n    _useState9 = _slicedToArray(_useState8, 2),\n    element = _useState9[0],\n    setElement = _useState9[1];\n  var _useCurrentEditor2 = useCurrentEditor(),\n    currentEditor = _useCurrentEditor2.editor;\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    var _a;\n    if (!element) {\n      return;\n    }\n    if (((_a = props.editor) === null || _a === void 0 ? void 0 : _a.isDestroyed) || (currentEditor === null || currentEditor === void 0 ? void 0 : currentEditor.isDestroyed)) {\n      return;\n    }\n    var _props$pluginKey2 = props.pluginKey,\n      pluginKey = _props$pluginKey2 === void 0 ? 'floatingMenu' : _props$pluginKey2,\n      editor = props.editor,\n      _props$tippyOptions2 = props.tippyOptions,\n      tippyOptions = _props$tippyOptions2 === void 0 ? {} : _props$tippyOptions2,\n      _props$shouldShow2 = props.shouldShow,\n      shouldShow = _props$shouldShow2 === void 0 ? null : _props$shouldShow2;\n    var menuEditor = editor || currentEditor;\n    if (!menuEditor) {\n      console.warn('FloatingMenu component is not rendered inside of an editor component or does not have editor prop.');\n      return;\n    }\n    var plugin = (0,_tiptap_extension_floating_menu__WEBPACK_IMPORTED_MODULE_4__.FloatingMenuPlugin)({\n      pluginKey: pluginKey,\n      editor: menuEditor,\n      element: element,\n      tippyOptions: tippyOptions,\n      shouldShow: shouldShow\n    });\n    menuEditor.registerPlugin(plugin);\n    return function () {\n      menuEditor.unregisterPlugin(pluginKey);\n    };\n  }, [props.editor, currentEditor, element]);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n    ref: setElement,\n    className: props.className,\n    style: {\n      visibility: 'hidden'\n    }\n  }, props.children);\n};\nvar ReactNodeViewContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n  onDragStart: undefined\n});\nvar useReactNodeView = function useReactNodeView() {\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ReactNodeViewContext);\n};\nvar NodeViewContent = function NodeViewContent(props) {\n  var Tag = props.as || 'div';\n  var _useReactNodeView = useReactNodeView(),\n    nodeViewContentRef = _useReactNodeView.nodeViewContentRef;\n  return (\n    /*#__PURE__*/\n    // @ts-ignore\n    react__WEBPACK_IMPORTED_MODULE_0__.createElement(Tag, _objectSpread(_objectSpread({}, props), {}, {\n      ref: nodeViewContentRef,\n      \"data-node-view-content\": \"\",\n      style: _objectSpread({\n        whiteSpace: 'pre-wrap'\n      }, props.style)\n    }))\n  );\n};\nvar NodeViewWrapper = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function (props, ref) {\n  var _useReactNodeView2 = useReactNodeView(),\n    onDragStart = _useReactNodeView2.onDragStart;\n  var Tag = props.as || 'div';\n  return (\n    /*#__PURE__*/\n    // @ts-ignore\n    react__WEBPACK_IMPORTED_MODULE_0__.createElement(Tag, _objectSpread(_objectSpread({}, props), {}, {\n      ref: ref,\n      \"data-node-view-wrapper\": \"\",\n      onDragStart: onDragStart,\n      style: _objectSpread({\n        whiteSpace: 'normal'\n      }, props.style)\n    }))\n  );\n});\n\n/**\n * Check if a component is a class component.\n * @param Component\n * @returns {boolean}\n */\nfunction isClassComponent(Component) {\n  return !!(typeof Component === 'function' && Component.prototype && Component.prototype.isReactComponent);\n}\n/**\n * Check if a component is a forward ref component.\n * @param Component\n * @returns {boolean}\n */\nfunction isForwardRefComponent(Component) {\n  var _a;\n  return !!(_typeof(Component) === 'object' && ((_a = Component.$$typeof) === null || _a === void 0 ? void 0 : _a.toString()) === 'Symbol(react.forward_ref)');\n}\n/**\n * The ReactRenderer class. It's responsible for rendering React components inside the editor.\n * @example\n * new ReactRenderer(MyComponent, {\n *   editor,\n *   props: {\n *     foo: 'bar',\n *   },\n *   as: 'span',\n * })\n*/\nvar ReactRenderer = /*#__PURE__*/function () {\n  /**\n   * Immediately creates element and renders the provided React component.\n   */\n  function ReactRenderer(component, _ref5) {\n    var _this10 = this;\n    var editor = _ref5.editor,\n      _ref5$props = _ref5.props,\n      props = _ref5$props === void 0 ? {} : _ref5$props,\n      _ref5$as = _ref5.as,\n      as = _ref5$as === void 0 ? 'div' : _ref5$as,\n      _ref5$className = _ref5.className,\n      className = _ref5$className === void 0 ? '' : _ref5$className;\n    _classCallCheck(this, ReactRenderer);\n    this.ref = null;\n    this.id = Math.floor(Math.random() * 0xFFFFFFFF).toString();\n    this.component = component;\n    this.editor = editor;\n    this.props = props;\n    this.element = document.createElement(as);\n    this.element.classList.add('react-renderer');\n    if (className) {\n      var _this$element$classLi;\n      (_this$element$classLi = this.element.classList).add.apply(_this$element$classLi, _toConsumableArray(className.split(' ')));\n    }\n    if (this.editor.isInitialized) {\n      // On first render, we need to flush the render synchronously\n      // Renders afterwards can be async, but this fixes a cursor positioning issue\n      (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.flushSync)(function () {\n        _this10.render();\n      });\n    } else {\n      this.render();\n    }\n  }\n  /**\n   * Render the React component.\n   */\n  return _createClass(ReactRenderer, [{\n    key: \"render\",\n    value: function render() {\n      var _this11 = this;\n      var _a;\n      var Component = this.component;\n      var props = this.props;\n      var editor = this.editor;\n      if (isClassComponent(Component) || isForwardRefComponent(Component)) {\n        // @ts-ignore This is a hack to make the ref work\n        props.ref = function (ref) {\n          _this11.ref = ref;\n        };\n      }\n      this.reactElement = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, _objectSpread({}, props));\n      (_a = editor === null || editor === void 0 ? void 0 : editor.contentComponent) === null || _a === void 0 ? void 0 : _a.setRenderer(this.id, this);\n    }\n    /**\n     * Re-renders the React component with new props.\n     */\n  }, {\n    key: \"updateProps\",\n    value: function updateProps() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.props = _objectSpread(_objectSpread({}, this.props), props);\n      this.render();\n    }\n    /**\n     * Destroy the React component.\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var _a;\n      var editor = this.editor;\n      (_a = editor === null || editor === void 0 ? void 0 : editor.contentComponent) === null || _a === void 0 ? void 0 : _a.removeRenderer(this.id);\n    }\n    /**\n     * Update the attributes of the element that holds the React component.\n     */\n  }, {\n    key: \"updateAttributes\",\n    value: function updateAttributes(attributes) {\n      var _this12 = this;\n      Object.keys(attributes).forEach(function (key) {\n        _this12.element.setAttribute(key, attributes[key]);\n      });\n    }\n  }]);\n}();\nvar ReactNodeView = /*#__PURE__*/function (_NodeView) {\n  function ReactNodeView() {\n    _classCallCheck(this, ReactNodeView);\n    return _callSuper(this, ReactNodeView, arguments);\n  }\n  _inherits(ReactNodeView, _NodeView);\n  return _createClass(ReactNodeView, [{\n    key: \"mount\",\n    value:\n    /**\n     * Setup the React component.\n     * Called on initialization.\n     */\n    function mount() {\n      var _this13 = this;\n      var props = {\n        editor: this.editor,\n        node: this.node,\n        decorations: this.decorations,\n        innerDecorations: this.innerDecorations,\n        view: this.view,\n        selected: false,\n        extension: this.extension,\n        HTMLAttributes: this.HTMLAttributes,\n        getPos: function getPos() {\n          return _this13.getPos();\n        },\n        updateAttributes: function updateAttributes() {\n          var attributes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          return _this13.updateAttributes(attributes);\n        },\n        deleteNode: function deleteNode() {\n          return _this13.deleteNode();\n        }\n      };\n      if (!this.component.displayName) {\n        var capitalizeFirstChar = function capitalizeFirstChar(string) {\n          return string.charAt(0).toUpperCase() + string.substring(1);\n        };\n        this.component.displayName = capitalizeFirstChar(this.extension.name);\n      }\n      var onDragStart = this.onDragStart.bind(this);\n      var nodeViewContentRef = function nodeViewContentRef(element) {\n        if (element && _this13.contentDOMElement && element.firstChild !== _this13.contentDOMElement) {\n          element.appendChild(_this13.contentDOMElement);\n        }\n      };\n      var context = {\n        onDragStart: onDragStart,\n        nodeViewContentRef: nodeViewContentRef\n      };\n      var Component = this.component;\n      // For performance reasons, we memoize the provider component\n      // And all of the things it requires are declared outside of the component, so it doesn't need to re-render\n      var ReactNodeViewProvider = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.memo(function (componentProps) {\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(ReactNodeViewContext.Provider, {\n          value: context\n        }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, componentProps));\n      });\n      ReactNodeViewProvider.displayName = 'ReactNodeView';\n      if (this.node.isLeaf) {\n        this.contentDOMElement = null;\n      } else if (this.options.contentDOMElementTag) {\n        this.contentDOMElement = document.createElement(this.options.contentDOMElementTag);\n      } else {\n        this.contentDOMElement = document.createElement(this.node.isInline ? 'span' : 'div');\n      }\n      if (this.contentDOMElement) {\n        this.contentDOMElement.dataset.nodeViewContentReact = '';\n        // For some reason the whiteSpace prop is not inherited properly in Chrome and Safari\n        // With this fix it seems to work fine\n        // See: https://github.com/ueberdosis/tiptap/issues/1197\n        this.contentDOMElement.style.whiteSpace = 'inherit';\n      }\n      var as = this.node.isInline ? 'span' : 'div';\n      if (this.options.as) {\n        as = this.options.as;\n      }\n      var _this$options$classNa = this.options.className,\n        className = _this$options$classNa === void 0 ? '' : _this$options$classNa;\n      this.handleSelectionUpdate = this.handleSelectionUpdate.bind(this);\n      this.renderer = new ReactRenderer(ReactNodeViewProvider, {\n        editor: this.editor,\n        props: props,\n        as: as,\n        className: \"node-\".concat(this.node.type.name, \" \").concat(className).trim()\n      });\n      this.editor.on('selectionUpdate', this.handleSelectionUpdate);\n      this.updateElementAttributes();\n    }\n    /**\n     * Return the DOM element.\n     * This is the element that will be used to display the node view.\n     */\n  }, {\n    key: \"dom\",\n    get: function get() {\n      var _a;\n      if (this.renderer.element.firstElementChild && !((_a = this.renderer.element.firstElementChild) === null || _a === void 0 ? void 0 : _a.hasAttribute('data-node-view-wrapper'))) {\n        throw Error('Please use the NodeViewWrapper component for your node view.');\n      }\n      return this.renderer.element;\n    }\n    /**\n     * Return the content DOM element.\n     * This is the element that will be used to display the rich-text content of the node.\n     */\n  }, {\n    key: \"contentDOM\",\n    get: function get() {\n      if (this.node.isLeaf) {\n        return null;\n      }\n      return this.contentDOMElement;\n    }\n    /**\n     * On editor selection update, check if the node is selected.\n     * If it is, call `selectNode`, otherwise call `deselectNode`.\n     */\n  }, {\n    key: \"handleSelectionUpdate\",\n    value: function handleSelectionUpdate() {\n      var _this$editor$state$se = this.editor.state.selection,\n        from = _this$editor$state$se.from,\n        to = _this$editor$state$se.to;\n      var pos = this.getPos();\n      if (typeof pos !== 'number') {\n        return;\n      }\n      if (from <= pos && to >= pos + this.node.nodeSize) {\n        if (this.renderer.props.selected) {\n          return;\n        }\n        this.selectNode();\n      } else {\n        if (!this.renderer.props.selected) {\n          return;\n        }\n        this.deselectNode();\n      }\n    }\n    /**\n     * On update, update the React component.\n     * To prevent unnecessary updates, the `update` option can be used.\n     */\n  }, {\n    key: \"update\",\n    value: function update(node, decorations, innerDecorations) {\n      var _this14 = this;\n      var rerenderComponent = function rerenderComponent(props) {\n        _this14.renderer.updateProps(props);\n        if (typeof _this14.options.attrs === 'function') {\n          _this14.updateElementAttributes();\n        }\n      };\n      if (node.type !== this.node.type) {\n        return false;\n      }\n      if (typeof this.options.update === 'function') {\n        var oldNode = this.node;\n        var oldDecorations = this.decorations;\n        var oldInnerDecorations = this.innerDecorations;\n        this.node = node;\n        this.decorations = decorations;\n        this.innerDecorations = innerDecorations;\n        return this.options.update({\n          oldNode: oldNode,\n          oldDecorations: oldDecorations,\n          newNode: node,\n          newDecorations: decorations,\n          oldInnerDecorations: oldInnerDecorations,\n          innerDecorations: innerDecorations,\n          updateProps: function updateProps() {\n            return rerenderComponent({\n              node: node,\n              decorations: decorations,\n              innerDecorations: innerDecorations\n            });\n          }\n        });\n      }\n      if (node === this.node && this.decorations === decorations && this.innerDecorations === innerDecorations) {\n        return true;\n      }\n      this.node = node;\n      this.decorations = decorations;\n      this.innerDecorations = innerDecorations;\n      rerenderComponent({\n        node: node,\n        decorations: decorations,\n        innerDecorations: innerDecorations\n      });\n      return true;\n    }\n    /**\n     * Select the node.\n     * Add the `selected` prop and the `ProseMirror-selectednode` class.\n     */\n  }, {\n    key: \"selectNode\",\n    value: function selectNode() {\n      this.renderer.updateProps({\n        selected: true\n      });\n      this.renderer.element.classList.add('ProseMirror-selectednode');\n    }\n    /**\n     * Deselect the node.\n     * Remove the `selected` prop and the `ProseMirror-selectednode` class.\n     */\n  }, {\n    key: \"deselectNode\",\n    value: function deselectNode() {\n      this.renderer.updateProps({\n        selected: false\n      });\n      this.renderer.element.classList.remove('ProseMirror-selectednode');\n    }\n    /**\n     * Destroy the React component instance.\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.renderer.destroy();\n      this.editor.off('selectionUpdate', this.handleSelectionUpdate);\n      this.contentDOMElement = null;\n    }\n    /**\n     * Update the attributes of the top-level element that holds the React component.\n     * Applying the attributes defined in the `attrs` option.\n     */\n  }, {\n    key: \"updateElementAttributes\",\n    value: function updateElementAttributes() {\n      if (this.options.attrs) {\n        var attrsObj = {};\n        if (typeof this.options.attrs === 'function') {\n          var extensionAttributes = this.editor.extensionManager.attributes;\n          var HTMLAttributes = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getRenderedAttributes)(this.node, extensionAttributes);\n          attrsObj = this.options.attrs({\n            node: this.node,\n            HTMLAttributes: HTMLAttributes\n          });\n        } else {\n          attrsObj = this.options.attrs;\n        }\n        this.renderer.updateAttributes(attrsObj);\n      }\n    }\n  }]);\n}(_tiptap_core__WEBPACK_IMPORTED_MODULE_2__.NodeView);\n/**\n * Create a React node view renderer.\n */\nfunction ReactNodeViewRenderer(component, options) {\n  return function (props) {\n    // try to get the parent component\n    // this is important for vue devtools to show the component hierarchy correctly\n    // maybe it’s `undefined` because <editor-content> isn’t rendered yet\n    if (!props.editor.contentComponent) {\n      return {};\n    }\n    return new ReactNodeView(component, props, options);\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/react/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/starter-kit/dist/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@tiptap/starter-kit/dist/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StarterKit: () => (/* binding */ StarterKit),\n/* harmony export */   \"default\": () => (/* binding */ StarterKit)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var _tiptap_extension_blockquote__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/extension-blockquote */ \"(ssr)/./node_modules/@tiptap/extension-blockquote/dist/index.js\");\n/* harmony import */ var _tiptap_extension_bold__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tiptap/extension-bold */ \"(ssr)/./node_modules/@tiptap/extension-bold/dist/index.js\");\n/* harmony import */ var _tiptap_extension_bullet_list__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tiptap/extension-bullet-list */ \"(ssr)/./node_modules/@tiptap/extension-bullet-list/dist/index.js\");\n/* harmony import */ var _tiptap_extension_code__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @tiptap/extension-code */ \"(ssr)/./node_modules/@tiptap/extension-code/dist/index.js\");\n/* harmony import */ var _tiptap_extension_code_block__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @tiptap/extension-code-block */ \"(ssr)/./node_modules/@tiptap/extension-code-block/dist/index.js\");\n/* harmony import */ var _tiptap_extension_document__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @tiptap/extension-document */ \"(ssr)/./node_modules/@tiptap/extension-document/dist/index.js\");\n/* harmony import */ var _tiptap_extension_dropcursor__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @tiptap/extension-dropcursor */ \"(ssr)/./node_modules/@tiptap/extension-dropcursor/dist/index.js\");\n/* harmony import */ var _tiptap_extension_gapcursor__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @tiptap/extension-gapcursor */ \"(ssr)/./node_modules/@tiptap/extension-gapcursor/dist/index.js\");\n/* harmony import */ var _tiptap_extension_hard_break__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @tiptap/extension-hard-break */ \"(ssr)/./node_modules/@tiptap/extension-hard-break/dist/index.js\");\n/* harmony import */ var _tiptap_extension_heading__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @tiptap/extension-heading */ \"(ssr)/./node_modules/@tiptap/extension-heading/dist/index.js\");\n/* harmony import */ var _tiptap_extension_history__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @tiptap/extension-history */ \"(ssr)/./node_modules/@tiptap/extension-history/dist/index.js\");\n/* harmony import */ var _tiptap_extension_horizontal_rule__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @tiptap/extension-horizontal-rule */ \"(ssr)/./node_modules/@tiptap/extension-horizontal-rule/dist/index.js\");\n/* harmony import */ var _tiptap_extension_italic__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @tiptap/extension-italic */ \"(ssr)/./node_modules/@tiptap/extension-italic/dist/index.js\");\n/* harmony import */ var _tiptap_extension_list_item__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @tiptap/extension-list-item */ \"(ssr)/./node_modules/@tiptap/extension-list-item/dist/index.js\");\n/* harmony import */ var _tiptap_extension_ordered_list__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @tiptap/extension-ordered-list */ \"(ssr)/./node_modules/@tiptap/extension-ordered-list/dist/index.js\");\n/* harmony import */ var _tiptap_extension_paragraph__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @tiptap/extension-paragraph */ \"(ssr)/./node_modules/@tiptap/extension-paragraph/dist/index.js\");\n/* harmony import */ var _tiptap_extension_strike__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @tiptap/extension-strike */ \"(ssr)/./node_modules/@tiptap/extension-strike/dist/index.js\");\n/* harmony import */ var _tiptap_extension_text__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @tiptap/extension-text */ \"(ssr)/./node_modules/@tiptap/extension-text/dist/index.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * The starter kit is a collection of essential editor extensions.\n *\n * It’s a good starting point for building your own editor.\n */\nvar StarterKit = _tiptap_core__WEBPACK_IMPORTED_MODULE_18__.Extension.create({\n  name: 'starterKit',\n  addExtensions: function addExtensions() {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;\n    var extensions = [];\n    if (this.options.bold !== false) {\n      extensions.push(_tiptap_extension_bold__WEBPACK_IMPORTED_MODULE_1__.Bold.configure((_a = this.options) === null || _a === void 0 ? void 0 : _a.bold));\n    }\n    if (this.options.blockquote !== false) {\n      extensions.push(_tiptap_extension_blockquote__WEBPACK_IMPORTED_MODULE_0__.Blockquote.configure((_b = this.options) === null || _b === void 0 ? void 0 : _b.blockquote));\n    }\n    if (this.options.bulletList !== false) {\n      extensions.push(_tiptap_extension_bullet_list__WEBPACK_IMPORTED_MODULE_2__.BulletList.configure((_c = this.options) === null || _c === void 0 ? void 0 : _c.bulletList));\n    }\n    if (this.options.code !== false) {\n      extensions.push(_tiptap_extension_code__WEBPACK_IMPORTED_MODULE_3__.Code.configure((_d = this.options) === null || _d === void 0 ? void 0 : _d.code));\n    }\n    if (this.options.codeBlock !== false) {\n      extensions.push(_tiptap_extension_code_block__WEBPACK_IMPORTED_MODULE_4__.CodeBlock.configure((_e = this.options) === null || _e === void 0 ? void 0 : _e.codeBlock));\n    }\n    if (this.options.document !== false) {\n      extensions.push(_tiptap_extension_document__WEBPACK_IMPORTED_MODULE_5__.Document.configure((_f = this.options) === null || _f === void 0 ? void 0 : _f.document));\n    }\n    if (this.options.dropcursor !== false) {\n      extensions.push(_tiptap_extension_dropcursor__WEBPACK_IMPORTED_MODULE_6__.Dropcursor.configure((_g = this.options) === null || _g === void 0 ? void 0 : _g.dropcursor));\n    }\n    if (this.options.gapcursor !== false) {\n      extensions.push(_tiptap_extension_gapcursor__WEBPACK_IMPORTED_MODULE_7__.Gapcursor.configure((_h = this.options) === null || _h === void 0 ? void 0 : _h.gapcursor));\n    }\n    if (this.options.hardBreak !== false) {\n      extensions.push(_tiptap_extension_hard_break__WEBPACK_IMPORTED_MODULE_8__.HardBreak.configure((_j = this.options) === null || _j === void 0 ? void 0 : _j.hardBreak));\n    }\n    if (this.options.heading !== false) {\n      extensions.push(_tiptap_extension_heading__WEBPACK_IMPORTED_MODULE_9__.Heading.configure((_k = this.options) === null || _k === void 0 ? void 0 : _k.heading));\n    }\n    if (this.options.history !== false) {\n      extensions.push(_tiptap_extension_history__WEBPACK_IMPORTED_MODULE_10__.History.configure((_l = this.options) === null || _l === void 0 ? void 0 : _l.history));\n    }\n    if (this.options.horizontalRule !== false) {\n      extensions.push(_tiptap_extension_horizontal_rule__WEBPACK_IMPORTED_MODULE_11__.HorizontalRule.configure((_m = this.options) === null || _m === void 0 ? void 0 : _m.horizontalRule));\n    }\n    if (this.options.italic !== false) {\n      extensions.push(_tiptap_extension_italic__WEBPACK_IMPORTED_MODULE_12__.Italic.configure((_o = this.options) === null || _o === void 0 ? void 0 : _o.italic));\n    }\n    if (this.options.listItem !== false) {\n      extensions.push(_tiptap_extension_list_item__WEBPACK_IMPORTED_MODULE_13__.ListItem.configure((_p = this.options) === null || _p === void 0 ? void 0 : _p.listItem));\n    }\n    if (this.options.orderedList !== false) {\n      extensions.push(_tiptap_extension_ordered_list__WEBPACK_IMPORTED_MODULE_14__.OrderedList.configure((_q = this.options) === null || _q === void 0 ? void 0 : _q.orderedList));\n    }\n    if (this.options.paragraph !== false) {\n      extensions.push(_tiptap_extension_paragraph__WEBPACK_IMPORTED_MODULE_15__.Paragraph.configure((_r = this.options) === null || _r === void 0 ? void 0 : _r.paragraph));\n    }\n    if (this.options.strike !== false) {\n      extensions.push(_tiptap_extension_strike__WEBPACK_IMPORTED_MODULE_16__.Strike.configure((_s = this.options) === null || _s === void 0 ? void 0 : _s.strike));\n    }\n    if (this.options.text !== false) {\n      extensions.push(_tiptap_extension_text__WEBPACK_IMPORTED_MODULE_17__.Text.configure((_t = this.options) === null || _t === void 0 ? void 0 : _t.text));\n    }\n    return extensions;\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/starter-kit/dist/index.js\n");

/***/ })

};
;