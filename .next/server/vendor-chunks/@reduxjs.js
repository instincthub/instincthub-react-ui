"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@reduxjs";
exports.ids = ["vendor-chunks/@reduxjs"];
exports.modules = {

/***/ "(ssr)/./node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ReducerType: () => (/* binding */ ReducerType),\n/* harmony export */   SHOULD_AUTOBATCH: () => (/* binding */ SHOULD_AUTOBATCH),\n/* harmony export */   TaskAbortError: () => (/* binding */ TaskAbortError),\n/* harmony export */   Tuple: () => (/* binding */ Tuple),\n/* harmony export */   __DO_NOT_USE__ActionTypes: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.__DO_NOT_USE__ActionTypes),\n/* harmony export */   addListener: () => (/* binding */ addListener),\n/* harmony export */   applyMiddleware: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.applyMiddleware),\n/* harmony export */   asyncThunkCreator: () => (/* binding */ asyncThunkCreator),\n/* harmony export */   autoBatchEnhancer: () => (/* binding */ autoBatchEnhancer),\n/* harmony export */   bindActionCreators: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.bindActionCreators),\n/* harmony export */   buildCreateSlice: () => (/* binding */ buildCreateSlice),\n/* harmony export */   clearAllListeners: () => (/* binding */ clearAllListeners),\n/* harmony export */   combineReducers: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.combineReducers),\n/* harmony export */   combineSlices: () => (/* binding */ combineSlices),\n/* harmony export */   compose: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.compose),\n/* harmony export */   configureStore: () => (/* binding */ configureStore),\n/* harmony export */   createAction: () => (/* binding */ createAction),\n/* harmony export */   createActionCreatorInvariantMiddleware: () => (/* binding */ createActionCreatorInvariantMiddleware),\n/* harmony export */   createAsyncThunk: () => (/* binding */ createAsyncThunk),\n/* harmony export */   createDraftSafeSelector: () => (/* binding */ createDraftSafeSelector),\n/* harmony export */   createDraftSafeSelectorCreator: () => (/* binding */ createDraftSafeSelectorCreator),\n/* harmony export */   createDynamicMiddleware: () => (/* binding */ createDynamicMiddleware),\n/* harmony export */   createEntityAdapter: () => (/* binding */ createEntityAdapter),\n/* harmony export */   createImmutableStateInvariantMiddleware: () => (/* binding */ createImmutableStateInvariantMiddleware),\n/* harmony export */   createListenerMiddleware: () => (/* binding */ createListenerMiddleware),\n/* harmony export */   createNextState: () => (/* reexport safe */ immer__WEBPACK_IMPORTED_MODULE_2__.produce),\n/* harmony export */   createReducer: () => (/* binding */ createReducer),\n/* harmony export */   createSelector: () => (/* reexport safe */ reselect__WEBPACK_IMPORTED_MODULE_1__.createSelector),\n/* harmony export */   createSelectorCreator: () => (/* reexport safe */ reselect__WEBPACK_IMPORTED_MODULE_1__.createSelectorCreator),\n/* harmony export */   createSerializableStateInvariantMiddleware: () => (/* binding */ createSerializableStateInvariantMiddleware),\n/* harmony export */   createSlice: () => (/* binding */ createSlice),\n/* harmony export */   createStore: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.createStore),\n/* harmony export */   current: () => (/* reexport safe */ immer__WEBPACK_IMPORTED_MODULE_2__.current),\n/* harmony export */   findNonSerializableValue: () => (/* binding */ findNonSerializableValue),\n/* harmony export */   formatProdErrorMessage: () => (/* binding */ formatProdErrorMessage),\n/* harmony export */   freeze: () => (/* reexport safe */ immer__WEBPACK_IMPORTED_MODULE_2__.freeze),\n/* harmony export */   isAction: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.isAction),\n/* harmony export */   isActionCreator: () => (/* binding */ isActionCreator),\n/* harmony export */   isAllOf: () => (/* binding */ isAllOf),\n/* harmony export */   isAnyOf: () => (/* binding */ isAnyOf),\n/* harmony export */   isAsyncThunkAction: () => (/* binding */ isAsyncThunkAction),\n/* harmony export */   isDraft: () => (/* reexport safe */ immer__WEBPACK_IMPORTED_MODULE_2__.isDraft),\n/* harmony export */   isFluxStandardAction: () => (/* binding */ isFSA),\n/* harmony export */   isFulfilled: () => (/* binding */ isFulfilled),\n/* harmony export */   isImmutableDefault: () => (/* binding */ isImmutableDefault),\n/* harmony export */   isPending: () => (/* binding */ isPending),\n/* harmony export */   isPlain: () => (/* binding */ isPlain),\n/* harmony export */   isPlainObject: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.isPlainObject),\n/* harmony export */   isRejected: () => (/* binding */ isRejected),\n/* harmony export */   isRejectedWithValue: () => (/* binding */ isRejectedWithValue),\n/* harmony export */   legacy_createStore: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.legacy_createStore),\n/* harmony export */   lruMemoize: () => (/* reexport safe */ reselect__WEBPACK_IMPORTED_MODULE_1__.lruMemoize),\n/* harmony export */   miniSerializeError: () => (/* binding */ miniSerializeError),\n/* harmony export */   nanoid: () => (/* binding */ nanoid),\n/* harmony export */   original: () => (/* reexport safe */ immer__WEBPACK_IMPORTED_MODULE_2__.original),\n/* harmony export */   prepareAutoBatched: () => (/* binding */ prepareAutoBatched),\n/* harmony export */   removeListener: () => (/* binding */ removeListener),\n/* harmony export */   unwrapResult: () => (/* binding */ unwrapResult),\n/* harmony export */   weakMapMemoize: () => (/* reexport safe */ reselect__WEBPACK_IMPORTED_MODULE_1__.weakMapMemoize)\n/* harmony export */ });\n/* harmony import */ var redux__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! redux */ \"(ssr)/./node_modules/redux/dist/redux.mjs\");\n/* harmony import */ var immer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! immer */ \"(ssr)/./node_modules/immer/dist/immer.mjs\");\n/* harmony import */ var reselect__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! reselect */ \"(ssr)/./node_modules/reselect/dist/reselect.mjs\");\n/* harmony import */ var redux_thunk__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! redux-thunk */ \"(ssr)/./node_modules/redux-thunk/dist/redux-thunk.mjs\");\nvar _excluded = [\"reducerPath\"];\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _callSuper(_this, derived, args) {\n  function isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n      return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    } catch (e) {\n      return false;\n    }\n  }\n  derived = _getPrototypeOf(derived);\n  return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));\n}\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _get() { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct.bind(); } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\n// src/index.ts\n\n\n\n\n// src/createDraftSafeSelector.ts\n\n\nvar createDraftSafeSelectorCreator = function createDraftSafeSelectorCreator() {\n  var createSelector2 = reselect__WEBPACK_IMPORTED_MODULE_1__.createSelectorCreator.apply(void 0, arguments);\n  var createDraftSafeSelector2 = Object.assign(function () {\n    var selector = createSelector2.apply(void 0, arguments);\n    var wrappedSelector = function wrappedSelector(value) {\n      for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        rest[_key - 1] = arguments[_key];\n      }\n      return selector.apply(void 0, [(0,immer__WEBPACK_IMPORTED_MODULE_2__.isDraft)(value) ? (0,immer__WEBPACK_IMPORTED_MODULE_2__.current)(value) : value].concat(rest));\n    };\n    Object.assign(wrappedSelector, selector);\n    return wrappedSelector;\n  }, {\n    withTypes: function withTypes() {\n      return createDraftSafeSelector2;\n    }\n  });\n  return createDraftSafeSelector2;\n};\nvar createDraftSafeSelector = /* @__PURE__ */createDraftSafeSelectorCreator(reselect__WEBPACK_IMPORTED_MODULE_1__.weakMapMemoize);\n\n// src/configureStore.ts\n\n\n// src/devtoolsExtension.ts\n\nvar composeWithDevTools =  false ? 0 : function () {\n  if (arguments.length === 0) return void 0;\n  if (_typeof(arguments[0]) === \"object\") return redux__WEBPACK_IMPORTED_MODULE_0__.compose;\n  return redux__WEBPACK_IMPORTED_MODULE_0__.compose.apply(null, arguments);\n};\nvar devToolsEnhancer =  false ? 0 : function () {\n  return function (noop3) {\n    return noop3;\n  };\n};\n\n// src/getDefaultMiddleware.ts\n\n\n// src/createAction.ts\n\n\n// src/tsHelpers.ts\nvar hasMatchFunction = function hasMatchFunction(v) {\n  return v && typeof v.match === \"function\";\n};\n\n// src/createAction.ts\nfunction createAction(type, prepareAction) {\n  function actionCreator() {\n    if (prepareAction) {\n      var prepared = prepareAction.apply(void 0, arguments);\n      if (!prepared) {\n        throw new Error( false ? 0 : \"prepareAction did not return an object\");\n      }\n      return _objectSpread(_objectSpread({\n        type: type,\n        payload: prepared.payload\n      }, \"meta\" in prepared && {\n        meta: prepared.meta\n      }), \"error\" in prepared && {\n        error: prepared.error\n      });\n    }\n    return {\n      type: type,\n      payload: arguments.length <= 0 ? undefined : arguments[0]\n    };\n  }\n  actionCreator.toString = function () {\n    return \"\".concat(type);\n  };\n  actionCreator.type = type;\n  actionCreator.match = function (action) {\n    return (0,redux__WEBPACK_IMPORTED_MODULE_0__.isAction)(action) && action.type === type;\n  };\n  return actionCreator;\n}\nfunction isActionCreator(action) {\n  return typeof action === \"function\" && \"type\" in action &&\n  // hasMatchFunction only wants Matchers but I don't see the point in rewriting it\n  hasMatchFunction(action);\n}\nfunction isFSA(action) {\n  return (0,redux__WEBPACK_IMPORTED_MODULE_0__.isAction)(action) && Object.keys(action).every(isValidKey);\n}\nfunction isValidKey(key) {\n  return [\"type\", \"payload\", \"error\", \"meta\"].indexOf(key) > -1;\n}\n\n// src/actionCreatorInvariantMiddleware.ts\nfunction getMessage(type) {\n  var splitType = type ? \"\".concat(type).split(\"/\") : [];\n  var actionName = splitType[splitType.length - 1] || \"actionCreator\";\n  return \"Detected an action creator with type \\\"\".concat(type || \"unknown\", \"\\\" being dispatched. \\nMake sure you're calling the action creator before dispatching, i.e. `dispatch(\").concat(actionName, \"())` instead of `dispatch(\").concat(actionName, \")`. This is necessary even if the action has no payload.\");\n}\nfunction createActionCreatorInvariantMiddleware() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (false) {}\n  var _options$isActionCrea = options.isActionCreator,\n    isActionCreator2 = _options$isActionCrea === void 0 ? isActionCreator : _options$isActionCrea;\n  return function () {\n    return function (next) {\n      return function (action) {\n        if (isActionCreator2(action)) {\n          console.warn(getMessage(action.type));\n        }\n        return next(action);\n      };\n    };\n  };\n}\n\n// src/utils.ts\n\nfunction getTimeMeasureUtils(maxDelay, fnName) {\n  var elapsed = 0;\n  return {\n    measureTime: function measureTime(fn) {\n      var started = Date.now();\n      try {\n        return fn();\n      } finally {\n        var finished = Date.now();\n        elapsed += finished - started;\n      }\n    },\n    warnIfExceeded: function warnIfExceeded() {\n      if (elapsed > maxDelay) {\n        console.warn(\"\".concat(fnName, \" took \").concat(elapsed, \"ms, which is more than the warning threshold of \").concat(maxDelay, \"ms. \\nIf your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.\\nIt is disabled in production builds, so you don't need to worry about that.\"));\n      }\n    }\n  };\n}\nvar Tuple = /*#__PURE__*/function (_Array, _Symbol$species) {\n  function _Tuple() {\n    var _this2;\n    _classCallCheck(this, _Tuple);\n    for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      items[_key2] = arguments[_key2];\n    }\n    _this2 = _callSuper(this, _Tuple, [].concat(items));\n    Object.setPrototypeOf(_this2, _Tuple.prototype);\n    return _this2;\n  }\n  _inherits(_Tuple, _Array);\n  return _createClass(_Tuple, [{\n    key: \"concat\",\n    value: function concat() {\n      for (var _len3 = arguments.length, arr = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        arr[_key3] = arguments[_key3];\n      }\n      return _get(_getPrototypeOf(_Tuple.prototype), \"concat\", this).apply(this, arr);\n    }\n  }, {\n    key: \"prepend\",\n    value: function prepend() {\n      for (var _len4 = arguments.length, arr = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        arr[_key4] = arguments[_key4];\n      }\n      if (arr.length === 1 && Array.isArray(arr[0])) {\n        return _construct(_Tuple, _toConsumableArray(arr[0].concat(this)));\n      }\n      return _construct(_Tuple, _toConsumableArray(arr.concat(this)));\n    }\n  }], [{\n    key: _Symbol$species,\n    get: function get() {\n      return _Tuple;\n    }\n  }]);\n}( /*#__PURE__*/_wrapNativeSuper(Array), Symbol.species);\nfunction freezeDraftable(val) {\n  return (0,immer__WEBPACK_IMPORTED_MODULE_2__.isDraftable)(val) ? (0,immer__WEBPACK_IMPORTED_MODULE_2__.produce)(val, function () {}) : val;\n}\nfunction getOrInsertComputed(map, key, compute) {\n  if (map.has(key)) return map.get(key);\n  return map.set(key, compute(key)).get(key);\n}\n\n// src/immutableStateInvariantMiddleware.ts\nfunction isImmutableDefault(value) {\n  return _typeof(value) !== \"object\" || value == null || Object.isFrozen(value);\n}\nfunction trackForMutations(isImmutable, ignorePaths, obj) {\n  var trackedProperties = trackProperties(isImmutable, ignorePaths, obj);\n  return {\n    detectMutations: function detectMutations() {\n      return _detectMutations(isImmutable, ignorePaths, trackedProperties, obj);\n    }\n  };\n}\nfunction trackProperties(isImmutable) {\n  var ignorePaths = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var obj = arguments.length > 2 ? arguments[2] : undefined;\n  var path = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"\";\n  var checkedObjects = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : /* @__PURE__ */new Set();\n  var tracked = {\n    value: obj\n  };\n  if (!isImmutable(obj) && !checkedObjects.has(obj)) {\n    checkedObjects.add(obj);\n    tracked.children = {};\n    for (var key in obj) {\n      var childPath = path ? path + \".\" + key : key;\n      if (ignorePaths.length && ignorePaths.indexOf(childPath) !== -1) {\n        continue;\n      }\n      tracked.children[key] = trackProperties(isImmutable, ignorePaths, obj[key], childPath);\n    }\n  }\n  return tracked;\n}\nfunction _detectMutations(isImmutable) {\n  var ignoredPaths = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var trackedProperty = arguments.length > 2 ? arguments[2] : undefined;\n  var obj = arguments.length > 3 ? arguments[3] : undefined;\n  var sameParentRef = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  var path = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : \"\";\n  var prevObj = trackedProperty ? trackedProperty.value : void 0;\n  var sameRef = prevObj === obj;\n  if (sameParentRef && !sameRef && !Number.isNaN(obj)) {\n    return {\n      wasMutated: true,\n      path: path\n    };\n  }\n  if (isImmutable(prevObj) || isImmutable(obj)) {\n    return {\n      wasMutated: false\n    };\n  }\n  var keysToDetect = {};\n  for (var key in trackedProperty.children) {\n    keysToDetect[key] = true;\n  }\n  for (var _key5 in obj) {\n    keysToDetect[_key5] = true;\n  }\n  var hasIgnoredPaths = ignoredPaths.length > 0;\n  var _loop = function _loop() {\n      var nestedPath = path ? path + \".\" + _key6 : _key6;\n      if (hasIgnoredPaths) {\n        var hasMatches = ignoredPaths.some(function (ignored) {\n          if (ignored instanceof RegExp) {\n            return ignored.test(nestedPath);\n          }\n          return nestedPath === ignored;\n        });\n        if (hasMatches) {\n          return 0; // continue\n        }\n      }\n      var result = _detectMutations(isImmutable, ignoredPaths, trackedProperty.children[_key6], obj[_key6], sameRef, nestedPath);\n      if (result.wasMutated) {\n        return {\n          v: result\n        };\n      }\n    },\n    _ret;\n  for (var _key6 in keysToDetect) {\n    _ret = _loop();\n    if (_ret === 0) continue;\n    if (_ret) return _ret.v;\n  }\n  return {\n    wasMutated: false\n  };\n}\nfunction createImmutableStateInvariantMiddleware() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (false) {} else {\n    var stringify2 = function stringify2(obj, serializer, indent, decycler) {\n        return JSON.stringify(obj, getSerialize2(serializer, decycler), indent);\n      },\n      getSerialize2 = function getSerialize2(serializer, decycler) {\n        var stack = [],\n          keys = [];\n        if (!decycler) decycler = function decycler(_, value) {\n          if (stack[0] === value) return \"[Circular ~]\";\n          return \"[Circular ~.\" + keys.slice(0, stack.indexOf(value)).join(\".\") + \"]\";\n        };\n        return function (key, value) {\n          if (stack.length > 0) {\n            var thisPos = stack.indexOf(this);\n            ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);\n            ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key);\n            if (~stack.indexOf(value)) value = decycler.call(this, key, value);\n          } else stack.push(value);\n          return serializer == null ? value : serializer.call(this, key, value);\n        };\n      };\n    var stringify = stringify2,\n      getSerialize = getSerialize2;\n    var _options$isImmutable = options.isImmutable,\n      isImmutable = _options$isImmutable === void 0 ? isImmutableDefault : _options$isImmutable,\n      ignoredPaths = options.ignoredPaths,\n      _options$warnAfter = options.warnAfter,\n      warnAfter = _options$warnAfter === void 0 ? 32 : _options$warnAfter;\n    var track = trackForMutations.bind(null, isImmutable, ignoredPaths);\n    return function (_ref) {\n      var getState = _ref.getState;\n      var state = getState();\n      var tracker = track(state);\n      var result;\n      return function (next) {\n        return function (action) {\n          var measureUtils = getTimeMeasureUtils(warnAfter, \"ImmutableStateInvariantMiddleware\");\n          measureUtils.measureTime(function () {\n            state = getState();\n            result = tracker.detectMutations();\n            tracker = track(state);\n            if (result.wasMutated) {\n              throw new Error( false ? 0 : \"A state mutation was detected between dispatches, in the path '\".concat(result.path || \"\", \"'.  This may cause incorrect behavior. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)\"));\n            }\n          });\n          var dispatchedAction = next(action);\n          measureUtils.measureTime(function () {\n            state = getState();\n            result = tracker.detectMutations();\n            tracker = track(state);\n            if (result.wasMutated) {\n              throw new Error( false ? 0 : \"A state mutation was detected inside a dispatch, in the path: \".concat(result.path || \"\", \". Take a look at the reducer(s) handling the action \").concat(stringify2(action), \". (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)\"));\n            }\n          });\n          measureUtils.warnIfExceeded();\n          return dispatchedAction;\n        };\n      };\n    };\n  }\n}\n\n// src/serializableStateInvariantMiddleware.ts\n\nfunction isPlain(val) {\n  var type = _typeof(val);\n  return val == null || type === \"string\" || type === \"boolean\" || type === \"number\" || Array.isArray(val) || (0,redux__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(val);\n}\nfunction findNonSerializableValue(value) {\n  var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n  var isSerializable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : isPlain;\n  var getEntries = arguments.length > 3 ? arguments[3] : undefined;\n  var ignoredPaths = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  var cache = arguments.length > 5 ? arguments[5] : undefined;\n  var foundNestedSerializable;\n  if (!isSerializable(value)) {\n    return {\n      keyPath: path || \"<root>\",\n      value: value\n    };\n  }\n  if (_typeof(value) !== \"object\" || value === null) {\n    return false;\n  }\n  if (cache !== null && cache !== void 0 && cache.has(value)) return false;\n  var entries = getEntries != null ? getEntries(value) : Object.entries(value);\n  var hasIgnoredPaths = ignoredPaths.length > 0;\n  var _iterator = _createForOfIteratorHelper(entries),\n    _step;\n  try {\n    var _loop2 = function _loop2() {\n        var _step$value = _slicedToArray(_step.value, 2),\n          key = _step$value[0],\n          nestedValue = _step$value[1];\n        var nestedPath = path ? path + \".\" + key : key;\n        if (hasIgnoredPaths) {\n          var hasMatches = ignoredPaths.some(function (ignored) {\n            if (ignored instanceof RegExp) {\n              return ignored.test(nestedPath);\n            }\n            return nestedPath === ignored;\n          });\n          if (hasMatches) {\n            return 0; // continue\n          }\n        }\n        if (!isSerializable(nestedValue)) {\n          return {\n            v: {\n              keyPath: nestedPath,\n              value: nestedValue\n            }\n          };\n        }\n        if (_typeof(nestedValue) === \"object\") {\n          foundNestedSerializable = findNonSerializableValue(nestedValue, nestedPath, isSerializable, getEntries, ignoredPaths, cache);\n          if (foundNestedSerializable) {\n            return {\n              v: foundNestedSerializable\n            };\n          }\n        }\n      },\n      _ret2;\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      _ret2 = _loop2();\n      if (_ret2 === 0) continue;\n      if (_ret2) return _ret2.v;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  if (cache && isNestedFrozen(value)) cache.add(value);\n  return false;\n}\nfunction isNestedFrozen(value) {\n  if (!Object.isFrozen(value)) return false;\n  for (var _i = 0, _Object$values = Object.values(value); _i < _Object$values.length; _i++) {\n    var nestedValue = _Object$values[_i];\n    if (_typeof(nestedValue) !== \"object\" || nestedValue === null) continue;\n    if (!isNestedFrozen(nestedValue)) return false;\n  }\n  return true;\n}\nfunction createSerializableStateInvariantMiddleware() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (false) {} else {\n    var _options$isSerializab = options.isSerializable,\n      isSerializable = _options$isSerializab === void 0 ? isPlain : _options$isSerializab,\n      getEntries = options.getEntries,\n      _options$ignoredActio = options.ignoredActions,\n      ignoredActions = _options$ignoredActio === void 0 ? [] : _options$ignoredActio,\n      _options$ignoredActio2 = options.ignoredActionPaths,\n      ignoredActionPaths = _options$ignoredActio2 === void 0 ? [\"meta.arg\", \"meta.baseQueryMeta\"] : _options$ignoredActio2,\n      _options$ignoredPaths = options.ignoredPaths,\n      ignoredPaths = _options$ignoredPaths === void 0 ? [] : _options$ignoredPaths,\n      _options$warnAfter2 = options.warnAfter,\n      warnAfter = _options$warnAfter2 === void 0 ? 32 : _options$warnAfter2,\n      _options$ignoreState = options.ignoreState,\n      ignoreState = _options$ignoreState === void 0 ? false : _options$ignoreState,\n      _options$ignoreAction = options.ignoreActions,\n      ignoreActions = _options$ignoreAction === void 0 ? false : _options$ignoreAction,\n      _options$disableCache = options.disableCache,\n      disableCache = _options$disableCache === void 0 ? false : _options$disableCache;\n    var cache = !disableCache && WeakSet ? /* @__PURE__ */new WeakSet() : void 0;\n    return function (storeAPI) {\n      return function (next) {\n        return function (action) {\n          if (!(0,redux__WEBPACK_IMPORTED_MODULE_0__.isAction)(action)) {\n            return next(action);\n          }\n          var result = next(action);\n          var measureUtils = getTimeMeasureUtils(warnAfter, \"SerializableStateInvariantMiddleware\");\n          if (!ignoreActions && !(ignoredActions.length && ignoredActions.indexOf(action.type) !== -1)) {\n            measureUtils.measureTime(function () {\n              var foundActionNonSerializableValue = findNonSerializableValue(action, \"\", isSerializable, getEntries, ignoredActionPaths, cache);\n              if (foundActionNonSerializableValue) {\n                var keyPath = foundActionNonSerializableValue.keyPath,\n                  value = foundActionNonSerializableValue.value;\n                console.error(\"A non-serializable value was detected in an action, in the path: `\".concat(keyPath, \"`. Value:\"), value, \"\\nTake a look at the logic that dispatched this action: \", action, \"\\n(See https://redux.js.org/faq/actions#why-should-type-be-a-string-or-at-least-serializable-why-should-my-action-types-be-constants)\", \"\\n(To allow non-serializable values see: https://redux-toolkit.js.org/usage/usage-guide#working-with-non-serializable-data)\");\n              }\n            });\n          }\n          if (!ignoreState) {\n            measureUtils.measureTime(function () {\n              var state = storeAPI.getState();\n              var foundStateNonSerializableValue = findNonSerializableValue(state, \"\", isSerializable, getEntries, ignoredPaths, cache);\n              if (foundStateNonSerializableValue) {\n                var keyPath = foundStateNonSerializableValue.keyPath,\n                  value = foundStateNonSerializableValue.value;\n                console.error(\"A non-serializable value was detected in the state, in the path: `\".concat(keyPath, \"`. Value:\"), value, \"\\nTake a look at the reducer(s) handling this action type: \".concat(action.type, \".\\n(See https://redux.js.org/faq/organizing-state#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state)\"));\n              }\n            });\n            measureUtils.warnIfExceeded();\n          }\n          return result;\n        };\n      };\n    };\n  }\n}\n\n// src/getDefaultMiddleware.ts\nfunction isBoolean(x) {\n  return typeof x === \"boolean\";\n}\nvar buildGetDefaultMiddleware = function buildGetDefaultMiddleware() {\n  return function getDefaultMiddleware(options) {\n    var _ref2 = options !== null && options !== void 0 ? options : {},\n      _ref2$thunk = _ref2.thunk,\n      thunk = _ref2$thunk === void 0 ? true : _ref2$thunk,\n      _ref2$immutableCheck = _ref2.immutableCheck,\n      immutableCheck = _ref2$immutableCheck === void 0 ? true : _ref2$immutableCheck,\n      _ref2$serializableChe = _ref2.serializableCheck,\n      serializableCheck = _ref2$serializableChe === void 0 ? true : _ref2$serializableChe,\n      _ref2$actionCreatorCh = _ref2.actionCreatorCheck,\n      actionCreatorCheck = _ref2$actionCreatorCh === void 0 ? true : _ref2$actionCreatorCh;\n    var middlewareArray = new Tuple();\n    if (thunk) {\n      if (isBoolean(thunk)) {\n        middlewareArray.push(redux_thunk__WEBPACK_IMPORTED_MODULE_3__.thunk);\n      } else {\n        middlewareArray.push((0,redux_thunk__WEBPACK_IMPORTED_MODULE_3__.withExtraArgument)(thunk.extraArgument));\n      }\n    }\n    if (true) {\n      if (immutableCheck) {\n        var immutableOptions = {};\n        if (!isBoolean(immutableCheck)) {\n          immutableOptions = immutableCheck;\n        }\n        middlewareArray.unshift(createImmutableStateInvariantMiddleware(immutableOptions));\n      }\n      if (serializableCheck) {\n        var serializableOptions = {};\n        if (!isBoolean(serializableCheck)) {\n          serializableOptions = serializableCheck;\n        }\n        middlewareArray.push(createSerializableStateInvariantMiddleware(serializableOptions));\n      }\n      if (actionCreatorCheck) {\n        var actionCreatorOptions = {};\n        if (!isBoolean(actionCreatorCheck)) {\n          actionCreatorOptions = actionCreatorCheck;\n        }\n        middlewareArray.unshift(createActionCreatorInvariantMiddleware(actionCreatorOptions));\n      }\n    }\n    return middlewareArray;\n  };\n};\n\n// src/autoBatchEnhancer.ts\nvar SHOULD_AUTOBATCH = \"RTK_autoBatch\";\nvar prepareAutoBatched = function prepareAutoBatched() {\n  return function (payload) {\n    return {\n      payload: payload,\n      meta: _defineProperty({}, SHOULD_AUTOBATCH, true)\n    };\n  };\n};\nvar createQueueWithTimer = function createQueueWithTimer(timeout) {\n  return function (notify) {\n    setTimeout(notify, timeout);\n  };\n};\nvar autoBatchEnhancer = function autoBatchEnhancer() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    type: \"raf\"\n  };\n  return function (next) {\n    return function () {\n      var store = next.apply(void 0, arguments);\n      var notifying = true;\n      var shouldNotifyAtEndOfTick = false;\n      var notificationQueued = false;\n      var listeners = /* @__PURE__ */new Set();\n      var queueCallback = options.type === \"tick\" ? queueMicrotask : options.type === \"raf\" ?\n      // requestAnimationFrame won't exist in SSR environments. Fall back to a vague approximation just to keep from erroring.\n       false ? 0 : createQueueWithTimer(10) : options.type === \"callback\" ? options.queueNotification : createQueueWithTimer(options.timeout);\n      var notifyListeners = function notifyListeners() {\n        notificationQueued = false;\n        if (shouldNotifyAtEndOfTick) {\n          shouldNotifyAtEndOfTick = false;\n          listeners.forEach(function (l) {\n            return l();\n          });\n        }\n      };\n      return Object.assign({}, store, {\n        // Override the base `store.subscribe` method to keep original listeners\n        // from running if we're delaying notifications\n        subscribe: function subscribe(listener2) {\n          var wrappedListener = function wrappedListener() {\n            return notifying && listener2();\n          };\n          var unsubscribe = store.subscribe(wrappedListener);\n          listeners.add(listener2);\n          return function () {\n            unsubscribe();\n            listeners[\"delete\"](listener2);\n          };\n        },\n        // Override the base `store.dispatch` method so that we can check actions\n        // for the `shouldAutoBatch` flag and determine if batching is active\n        dispatch: function dispatch(action) {\n          try {\n            var _action$meta;\n            notifying = !(action !== null && action !== void 0 && (_action$meta = action.meta) !== null && _action$meta !== void 0 && _action$meta[SHOULD_AUTOBATCH]);\n            shouldNotifyAtEndOfTick = !notifying;\n            if (shouldNotifyAtEndOfTick) {\n              if (!notificationQueued) {\n                notificationQueued = true;\n                queueCallback(notifyListeners);\n              }\n            }\n            return store.dispatch(action);\n          } finally {\n            notifying = true;\n          }\n        }\n      });\n    };\n  };\n};\n\n// src/getDefaultEnhancers.ts\nvar buildGetDefaultEnhancers = function buildGetDefaultEnhancers(middlewareEnhancer) {\n  return function getDefaultEnhancers(options) {\n    var _ref3 = options !== null && options !== void 0 ? options : {},\n      _ref3$autoBatch = _ref3.autoBatch,\n      autoBatch = _ref3$autoBatch === void 0 ? true : _ref3$autoBatch;\n    var enhancerArray = new Tuple(middlewareEnhancer);\n    if (autoBatch) {\n      enhancerArray.push(autoBatchEnhancer(_typeof(autoBatch) === \"object\" ? autoBatch : void 0));\n    }\n    return enhancerArray;\n  };\n};\n\n// src/configureStore.ts\nfunction configureStore(options) {\n  var getDefaultMiddleware = buildGetDefaultMiddleware();\n  var _ref4 = options || {},\n    _ref4$reducer = _ref4.reducer,\n    reducer = _ref4$reducer === void 0 ? void 0 : _ref4$reducer,\n    middleware = _ref4.middleware,\n    _ref4$devTools = _ref4.devTools,\n    devTools = _ref4$devTools === void 0 ? true : _ref4$devTools,\n    _ref4$preloadedState = _ref4.preloadedState,\n    preloadedState = _ref4$preloadedState === void 0 ? void 0 : _ref4$preloadedState,\n    _ref4$enhancers = _ref4.enhancers,\n    enhancers = _ref4$enhancers === void 0 ? void 0 : _ref4$enhancers;\n  var rootReducer;\n  if (typeof reducer === \"function\") {\n    rootReducer = reducer;\n  } else if ((0,redux__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(reducer)) {\n    rootReducer = (0,redux__WEBPACK_IMPORTED_MODULE_0__.combineReducers)(reducer);\n  } else {\n    throw new Error( false ? 0 : \"`reducer` is a required argument, and must be a function or an object of functions that can be passed to combineReducers\");\n  }\n  if ( true && middleware && typeof middleware !== \"function\") {\n    throw new Error( false ? 0 : \"`middleware` field must be a callback\");\n  }\n  var finalMiddleware;\n  if (typeof middleware === \"function\") {\n    finalMiddleware = middleware(getDefaultMiddleware);\n    if ( true && !Array.isArray(finalMiddleware)) {\n      throw new Error( false ? 0 : \"when using a middleware builder function, an array of middleware must be returned\");\n    }\n  } else {\n    finalMiddleware = getDefaultMiddleware();\n  }\n  if ( true && finalMiddleware.some(function (item) {\n    return typeof item !== \"function\";\n  })) {\n    throw new Error( false ? 0 : \"each middleware provided to configureStore must be a function\");\n  }\n  var finalCompose = redux__WEBPACK_IMPORTED_MODULE_0__.compose;\n  if (devTools) {\n    finalCompose = composeWithDevTools(_objectSpread({\n      // Enable capture of stack traces for dispatched Redux actions\n      trace: true\n    }, _typeof(devTools) === \"object\" && devTools));\n  }\n  var middlewareEnhancer = redux__WEBPACK_IMPORTED_MODULE_0__.applyMiddleware.apply(void 0, _toConsumableArray(finalMiddleware));\n  var getDefaultEnhancers = buildGetDefaultEnhancers(middlewareEnhancer);\n  if ( true && enhancers && typeof enhancers !== \"function\") {\n    throw new Error( false ? 0 : \"`enhancers` field must be a callback\");\n  }\n  var storeEnhancers = typeof enhancers === \"function\" ? enhancers(getDefaultEnhancers) : getDefaultEnhancers();\n  if ( true && !Array.isArray(storeEnhancers)) {\n    throw new Error( false ? 0 : \"`enhancers` callback must return an array\");\n  }\n  if ( true && storeEnhancers.some(function (item) {\n    return typeof item !== \"function\";\n  })) {\n    throw new Error( false ? 0 : \"each enhancer provided to configureStore must be a function\");\n  }\n  if ( true && finalMiddleware.length && !storeEnhancers.includes(middlewareEnhancer)) {\n    console.error(\"middlewares were provided, but middleware enhancer was not included in final enhancers - make sure to call `getDefaultEnhancers`\");\n  }\n  var composedEnhancer = finalCompose.apply(void 0, _toConsumableArray(storeEnhancers));\n  return (0,redux__WEBPACK_IMPORTED_MODULE_0__.createStore)(rootReducer, preloadedState, composedEnhancer);\n}\n\n// src/createReducer.ts\n\n\n// src/mapBuilders.ts\nfunction executeReducerBuilderCallback(builderCallback) {\n  var actionsMap = {};\n  var actionMatchers = [];\n  var defaultCaseReducer;\n  var builder = {\n    addCase: function addCase(typeOrActionCreator, reducer) {\n      if (true) {\n        if (actionMatchers.length > 0) {\n          throw new Error( false ? 0 : \"`builder.addCase` should only be called before calling `builder.addMatcher`\");\n        }\n        if (defaultCaseReducer) {\n          throw new Error( false ? 0 : \"`builder.addCase` should only be called before calling `builder.addDefaultCase`\");\n        }\n      }\n      var type = typeof typeOrActionCreator === \"string\" ? typeOrActionCreator : typeOrActionCreator.type;\n      if (!type) {\n        throw new Error( false ? 0 : \"`builder.addCase` cannot be called with an empty action type\");\n      }\n      if (type in actionsMap) {\n        throw new Error( false ? 0 : \"`builder.addCase` cannot be called with two reducers for the same action type '\".concat(type, \"'\"));\n      }\n      actionsMap[type] = reducer;\n      return builder;\n    },\n    addMatcher: function addMatcher(matcher, reducer) {\n      if (true) {\n        if (defaultCaseReducer) {\n          throw new Error( false ? 0 : \"`builder.addMatcher` should only be called before calling `builder.addDefaultCase`\");\n        }\n      }\n      actionMatchers.push({\n        matcher: matcher,\n        reducer: reducer\n      });\n      return builder;\n    },\n    addDefaultCase: function addDefaultCase(reducer) {\n      if (true) {\n        if (defaultCaseReducer) {\n          throw new Error( false ? 0 : \"`builder.addDefaultCase` can only be called once\");\n        }\n      }\n      defaultCaseReducer = reducer;\n      return builder;\n    }\n  };\n  builderCallback(builder);\n  return [actionsMap, actionMatchers, defaultCaseReducer];\n}\n\n// src/createReducer.ts\nfunction isStateFunction(x) {\n  return typeof x === \"function\";\n}\nfunction createReducer(initialState, mapOrBuilderCallback) {\n  if (true) {\n    if (_typeof(mapOrBuilderCallback) === \"object\") {\n      throw new Error( false ? 0 : \"The object notation for `createReducer` has been removed. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createReducer\");\n    }\n  }\n  var _executeReducerBuilde = executeReducerBuilderCallback(mapOrBuilderCallback),\n    _executeReducerBuilde2 = _slicedToArray(_executeReducerBuilde, 3),\n    actionsMap = _executeReducerBuilde2[0],\n    finalActionMatchers = _executeReducerBuilde2[1],\n    finalDefaultCaseReducer = _executeReducerBuilde2[2];\n  var getInitialState;\n  if (isStateFunction(initialState)) {\n    getInitialState = function getInitialState() {\n      return freezeDraftable(initialState());\n    };\n  } else {\n    var frozenInitialState = freezeDraftable(initialState);\n    getInitialState = function getInitialState() {\n      return frozenInitialState;\n    };\n  }\n  function reducer() {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getInitialState();\n    var action = arguments.length > 1 ? arguments[1] : undefined;\n    var caseReducers = [actionsMap[action.type]].concat(_toConsumableArray(finalActionMatchers.filter(function (_ref5) {\n      var matcher = _ref5.matcher;\n      return matcher(action);\n    }).map(function (_ref6) {\n      var reducer2 = _ref6.reducer;\n      return reducer2;\n    })));\n    if (caseReducers.filter(function (cr) {\n      return !!cr;\n    }).length === 0) {\n      caseReducers = [finalDefaultCaseReducer];\n    }\n    return caseReducers.reduce(function (previousState, caseReducer) {\n      if (caseReducer) {\n        if ((0,immer__WEBPACK_IMPORTED_MODULE_2__.isDraft)(previousState)) {\n          var draft = previousState;\n          var result = caseReducer(draft, action);\n          if (result === void 0) {\n            return previousState;\n          }\n          return result;\n        } else if (!(0,immer__WEBPACK_IMPORTED_MODULE_2__.isDraftable)(previousState)) {\n          var _result = caseReducer(previousState, action);\n          if (_result === void 0) {\n            if (previousState === null) {\n              return previousState;\n            }\n            throw Error(\"A case reducer on a non-draftable value must not return undefined\");\n          }\n          return _result;\n        } else {\n          return (0,immer__WEBPACK_IMPORTED_MODULE_2__.produce)(previousState, function (draft) {\n            return caseReducer(draft, action);\n          });\n        }\n      }\n      return previousState;\n    }, state);\n  }\n  reducer.getInitialState = getInitialState;\n  return reducer;\n}\n\n// src/matchers.ts\nvar matches = function matches(matcher, action) {\n  if (hasMatchFunction(matcher)) {\n    return matcher.match(action);\n  } else {\n    return matcher(action);\n  }\n};\nfunction isAnyOf() {\n  for (var _len5 = arguments.length, matchers = new Array(_len5), _key7 = 0; _key7 < _len5; _key7++) {\n    matchers[_key7] = arguments[_key7];\n  }\n  return function (action) {\n    return matchers.some(function (matcher) {\n      return matches(matcher, action);\n    });\n  };\n}\nfunction isAllOf() {\n  for (var _len6 = arguments.length, matchers = new Array(_len6), _key8 = 0; _key8 < _len6; _key8++) {\n    matchers[_key8] = arguments[_key8];\n  }\n  return function (action) {\n    return matchers.every(function (matcher) {\n      return matches(matcher, action);\n    });\n  };\n}\nfunction hasExpectedRequestMetadata(action, validStatus) {\n  if (!action || !action.meta) return false;\n  var hasValidRequestId = typeof action.meta.requestId === \"string\";\n  var hasValidRequestStatus = validStatus.indexOf(action.meta.requestStatus) > -1;\n  return hasValidRequestId && hasValidRequestStatus;\n}\nfunction isAsyncThunkArray(a) {\n  return typeof a[0] === \"function\" && \"pending\" in a[0] && \"fulfilled\" in a[0] && \"rejected\" in a[0];\n}\nfunction isPending() {\n  for (var _len7 = arguments.length, asyncThunks = new Array(_len7), _key9 = 0; _key9 < _len7; _key9++) {\n    asyncThunks[_key9] = arguments[_key9];\n  }\n  if (asyncThunks.length === 0) {\n    return function (action) {\n      return hasExpectedRequestMetadata(action, [\"pending\"]);\n    };\n  }\n  if (!isAsyncThunkArray(asyncThunks)) {\n    return isPending()(asyncThunks[0]);\n  }\n  return isAnyOf.apply(void 0, _toConsumableArray(asyncThunks.map(function (asyncThunk) {\n    return asyncThunk.pending;\n  })));\n}\nfunction isRejected() {\n  for (var _len8 = arguments.length, asyncThunks = new Array(_len8), _key10 = 0; _key10 < _len8; _key10++) {\n    asyncThunks[_key10] = arguments[_key10];\n  }\n  if (asyncThunks.length === 0) {\n    return function (action) {\n      return hasExpectedRequestMetadata(action, [\"rejected\"]);\n    };\n  }\n  if (!isAsyncThunkArray(asyncThunks)) {\n    return isRejected()(asyncThunks[0]);\n  }\n  return isAnyOf.apply(void 0, _toConsumableArray(asyncThunks.map(function (asyncThunk) {\n    return asyncThunk.rejected;\n  })));\n}\nfunction isRejectedWithValue() {\n  var hasFlag = function hasFlag(action) {\n    return action && action.meta && action.meta.rejectedWithValue;\n  };\n  for (var _len9 = arguments.length, asyncThunks = new Array(_len9), _key11 = 0; _key11 < _len9; _key11++) {\n    asyncThunks[_key11] = arguments[_key11];\n  }\n  if (asyncThunks.length === 0) {\n    return isAllOf(isRejected.apply(void 0, asyncThunks), hasFlag);\n  }\n  if (!isAsyncThunkArray(asyncThunks)) {\n    return isRejectedWithValue()(asyncThunks[0]);\n  }\n  return isAllOf(isRejected.apply(void 0, asyncThunks), hasFlag);\n}\nfunction isFulfilled() {\n  for (var _len10 = arguments.length, asyncThunks = new Array(_len10), _key12 = 0; _key12 < _len10; _key12++) {\n    asyncThunks[_key12] = arguments[_key12];\n  }\n  if (asyncThunks.length === 0) {\n    return function (action) {\n      return hasExpectedRequestMetadata(action, [\"fulfilled\"]);\n    };\n  }\n  if (!isAsyncThunkArray(asyncThunks)) {\n    return isFulfilled()(asyncThunks[0]);\n  }\n  return isAnyOf.apply(void 0, _toConsumableArray(asyncThunks.map(function (asyncThunk) {\n    return asyncThunk.fulfilled;\n  })));\n}\nfunction isAsyncThunkAction() {\n  for (var _len11 = arguments.length, asyncThunks = new Array(_len11), _key13 = 0; _key13 < _len11; _key13++) {\n    asyncThunks[_key13] = arguments[_key13];\n  }\n  if (asyncThunks.length === 0) {\n    return function (action) {\n      return hasExpectedRequestMetadata(action, [\"pending\", \"fulfilled\", \"rejected\"]);\n    };\n  }\n  if (!isAsyncThunkArray(asyncThunks)) {\n    return isAsyncThunkAction()(asyncThunks[0]);\n  }\n  return isAnyOf.apply(void 0, _toConsumableArray(asyncThunks.flatMap(function (asyncThunk) {\n    return [asyncThunk.pending, asyncThunk.rejected, asyncThunk.fulfilled];\n  })));\n}\n\n// src/nanoid.ts\nvar urlAlphabet = \"ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW\";\nvar nanoid = function nanoid() {\n  var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 21;\n  var id = \"\";\n  var i = size;\n  while (i--) {\n    id += urlAlphabet[Math.random() * 64 | 0];\n  }\n  return id;\n};\n\n// src/createAsyncThunk.ts\nvar commonProperties = [\"name\", \"message\", \"stack\", \"code\"];\nvar RejectWithValue = /*#__PURE__*/_createClass(function RejectWithValue(payload, meta) {\n  _classCallCheck(this, RejectWithValue);\n  /*\n  type-only property to distinguish between RejectWithValue and FulfillWithMeta\n  does not exist at runtime\n  */\n  _defineProperty(this, \"_type\", void 0);\n  this.payload = payload;\n  this.meta = meta;\n});\nvar FulfillWithMeta = /*#__PURE__*/_createClass(function FulfillWithMeta(payload, meta) {\n  _classCallCheck(this, FulfillWithMeta);\n  /*\n  type-only property to distinguish between RejectWithValue and FulfillWithMeta\n  does not exist at runtime\n  */\n  _defineProperty(this, \"_type\", void 0);\n  this.payload = payload;\n  this.meta = meta;\n});\nvar miniSerializeError = function miniSerializeError(value) {\n  if (_typeof(value) === \"object\" && value !== null) {\n    var simpleError = {};\n    for (var _i2 = 0, _commonProperties = commonProperties; _i2 < _commonProperties.length; _i2++) {\n      var property = _commonProperties[_i2];\n      if (typeof value[property] === \"string\") {\n        simpleError[property] = value[property];\n      }\n    }\n    return simpleError;\n  }\n  return {\n    message: String(value)\n  };\n};\nvar externalAbortMessage = \"External signal was aborted\";\nvar createAsyncThunk = /* @__PURE__ */function () {\n  function createAsyncThunk2(typePrefix, payloadCreator, options) {\n    var fulfilled = createAction(typePrefix + \"/fulfilled\", function (payload, requestId, arg, meta) {\n      return {\n        payload: payload,\n        meta: _objectSpread(_objectSpread({}, meta || {}), {}, {\n          arg: arg,\n          requestId: requestId,\n          requestStatus: \"fulfilled\"\n        })\n      };\n    });\n    var pending = createAction(typePrefix + \"/pending\", function (requestId, arg, meta) {\n      return {\n        payload: void 0,\n        meta: _objectSpread(_objectSpread({}, meta || {}), {}, {\n          arg: arg,\n          requestId: requestId,\n          requestStatus: \"pending\"\n        })\n      };\n    });\n    var rejected = createAction(typePrefix + \"/rejected\", function (error, requestId, arg, payload, meta) {\n      return {\n        payload: payload,\n        error: (options && options.serializeError || miniSerializeError)(error || \"Rejected\"),\n        meta: _objectSpread(_objectSpread({}, meta || {}), {}, {\n          arg: arg,\n          requestId: requestId,\n          rejectedWithValue: !!payload,\n          requestStatus: \"rejected\",\n          aborted: (error === null || error === void 0 ? void 0 : error.name) === \"AbortError\",\n          condition: (error === null || error === void 0 ? void 0 : error.name) === \"ConditionError\"\n        })\n      };\n    });\n    function actionCreator(arg) {\n      var _ref7 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        signal = _ref7.signal;\n      return function (dispatch, getState, extra) {\n        var requestId = options !== null && options !== void 0 && options.idGenerator ? options.idGenerator(arg) : nanoid();\n        var abortController = new AbortController();\n        var abortHandler;\n        var abortReason;\n        function abort(reason) {\n          abortReason = reason;\n          abortController.abort();\n        }\n        if (signal) {\n          if (signal.aborted) {\n            abort(externalAbortMessage);\n          } else {\n            signal.addEventListener(\"abort\", function () {\n              return abort(externalAbortMessage);\n            }, {\n              once: true\n            });\n          }\n        }\n        var promise = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n          var finalAction, _options$condition, _options$getPendingMe, conditionResult, abortedPromise, skipDispatch;\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                conditionResult = options === null || options === void 0 || (_options$condition = options.condition) === null || _options$condition === void 0 ? void 0 : _options$condition.call(options, arg, {\n                  getState: getState,\n                  extra: extra\n                });\n                if (!isThenable(conditionResult)) {\n                  _context.next = 6;\n                  break;\n                }\n                _context.next = 5;\n                return conditionResult;\n              case 5:\n                conditionResult = _context.sent;\n              case 6:\n                if (!(conditionResult === false || abortController.signal.aborted)) {\n                  _context.next = 8;\n                  break;\n                }\n                throw {\n                  name: \"ConditionError\",\n                  message: \"Aborted due to condition callback returning false.\"\n                };\n              case 8:\n                abortedPromise = new Promise(function (_, reject) {\n                  abortHandler = function abortHandler() {\n                    reject({\n                      name: \"AbortError\",\n                      message: abortReason || \"Aborted\"\n                    });\n                  };\n                  abortController.signal.addEventListener(\"abort\", abortHandler);\n                });\n                dispatch(pending(requestId, arg, options === null || options === void 0 || (_options$getPendingMe = options.getPendingMeta) === null || _options$getPendingMe === void 0 ? void 0 : _options$getPendingMe.call(options, {\n                  requestId: requestId,\n                  arg: arg\n                }, {\n                  getState: getState,\n                  extra: extra\n                })));\n                _context.next = 12;\n                return Promise.race([abortedPromise, Promise.resolve(payloadCreator(arg, {\n                  dispatch: dispatch,\n                  getState: getState,\n                  extra: extra,\n                  requestId: requestId,\n                  signal: abortController.signal,\n                  abort: abort,\n                  rejectWithValue: function rejectWithValue(value, meta) {\n                    return new RejectWithValue(value, meta);\n                  },\n                  fulfillWithValue: function fulfillWithValue(value, meta) {\n                    return new FulfillWithMeta(value, meta);\n                  }\n                })).then(function (result) {\n                  if (result instanceof RejectWithValue) {\n                    throw result;\n                  }\n                  if (result instanceof FulfillWithMeta) {\n                    return fulfilled(result.payload, requestId, arg, result.meta);\n                  }\n                  return fulfilled(result, requestId, arg);\n                })]);\n              case 12:\n                finalAction = _context.sent;\n                _context.next = 18;\n                break;\n              case 15:\n                _context.prev = 15;\n                _context.t0 = _context[\"catch\"](0);\n                finalAction = _context.t0 instanceof RejectWithValue ? rejected(null, requestId, arg, _context.t0.payload, _context.t0.meta) : rejected(_context.t0, requestId, arg);\n              case 18:\n                _context.prev = 18;\n                if (abortHandler) {\n                  abortController.signal.removeEventListener(\"abort\", abortHandler);\n                }\n                return _context.finish(18);\n              case 21:\n                skipDispatch = options && !options.dispatchConditionRejection && rejected.match(finalAction) && finalAction.meta.condition;\n                if (!skipDispatch) {\n                  dispatch(finalAction);\n                }\n                return _context.abrupt(\"return\", finalAction);\n              case 24:\n              case \"end\":\n                return _context.stop();\n            }\n          }, _callee, null, [[0, 15, 18, 21]]);\n        }))();\n        return Object.assign(promise, {\n          abort: abort,\n          requestId: requestId,\n          arg: arg,\n          unwrap: function unwrap() {\n            return promise.then(unwrapResult);\n          }\n        });\n      };\n    }\n    return Object.assign(actionCreator, {\n      pending: pending,\n      rejected: rejected,\n      fulfilled: fulfilled,\n      settled: isAnyOf(rejected, fulfilled),\n      typePrefix: typePrefix\n    });\n  }\n  createAsyncThunk2.withTypes = function () {\n    return createAsyncThunk2;\n  };\n  return createAsyncThunk2;\n}();\nfunction unwrapResult(action) {\n  if (action.meta && action.meta.rejectedWithValue) {\n    throw action.payload;\n  }\n  if (action.error) {\n    throw action.error;\n  }\n  return action.payload;\n}\nfunction isThenable(value) {\n  return value !== null && _typeof(value) === \"object\" && typeof value.then === \"function\";\n}\n\n// src/createSlice.ts\nvar asyncThunkSymbol = /* @__PURE__ */Symbol[\"for\"](\"rtk-slice-createasyncthunk\");\nvar asyncThunkCreator = _defineProperty({}, asyncThunkSymbol, createAsyncThunk);\nvar ReducerType = /* @__PURE__ */function (ReducerType2) {\n  ReducerType2[\"reducer\"] = \"reducer\";\n  ReducerType2[\"reducerWithPrepare\"] = \"reducerWithPrepare\";\n  ReducerType2[\"asyncThunk\"] = \"asyncThunk\";\n  return ReducerType2;\n}(ReducerType || {});\nfunction getType(slice, actionKey) {\n  return \"\".concat(slice, \"/\").concat(actionKey);\n}\nfunction buildCreateSlice() {\n  var _creators$asyncThunk;\n  var _ref9 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    creators = _ref9.creators;\n  var cAT = creators === null || creators === void 0 || (_creators$asyncThunk = creators.asyncThunk) === null || _creators$asyncThunk === void 0 ? void 0 : _creators$asyncThunk[asyncThunkSymbol];\n  return function createSlice2(options) {\n    var name = options.name,\n      _options$reducerPath = options.reducerPath,\n      reducerPath = _options$reducerPath === void 0 ? name : _options$reducerPath;\n    if (!name) {\n      throw new Error( false ? 0 : \"`name` is a required option for createSlice\");\n    }\n    if (typeof process !== \"undefined\" && true) {\n      if (options.initialState === void 0) {\n        console.error(\"You must provide an `initialState` value that is not `undefined`. You may have misspelled `initialState`\");\n      }\n    }\n    var reducers = (typeof options.reducers === \"function\" ? options.reducers(buildReducerCreators()) : options.reducers) || {};\n    var reducerNames = Object.keys(reducers);\n    var context = {\n      sliceCaseReducersByName: {},\n      sliceCaseReducersByType: {},\n      actionCreators: {},\n      sliceMatchers: []\n    };\n    var contextMethods = {\n      addCase: function addCase(typeOrActionCreator, reducer2) {\n        var type = typeof typeOrActionCreator === \"string\" ? typeOrActionCreator : typeOrActionCreator.type;\n        if (!type) {\n          throw new Error( false ? 0 : \"`context.addCase` cannot be called with an empty action type\");\n        }\n        if (type in context.sliceCaseReducersByType) {\n          throw new Error( false ? 0 : \"`context.addCase` cannot be called with two reducers for the same action type: \" + type);\n        }\n        context.sliceCaseReducersByType[type] = reducer2;\n        return contextMethods;\n      },\n      addMatcher: function addMatcher(matcher, reducer2) {\n        context.sliceMatchers.push({\n          matcher: matcher,\n          reducer: reducer2\n        });\n        return contextMethods;\n      },\n      exposeAction: function exposeAction(name2, actionCreator) {\n        context.actionCreators[name2] = actionCreator;\n        return contextMethods;\n      },\n      exposeCaseReducer: function exposeCaseReducer(name2, reducer2) {\n        context.sliceCaseReducersByName[name2] = reducer2;\n        return contextMethods;\n      }\n    };\n    reducerNames.forEach(function (reducerName) {\n      var reducerDefinition = reducers[reducerName];\n      var reducerDetails = {\n        reducerName: reducerName,\n        type: getType(name, reducerName),\n        createNotation: typeof options.reducers === \"function\"\n      };\n      if (isAsyncThunkSliceReducerDefinition(reducerDefinition)) {\n        handleThunkCaseReducerDefinition(reducerDetails, reducerDefinition, contextMethods, cAT);\n      } else {\n        handleNormalReducerDefinition(reducerDetails, reducerDefinition, contextMethods);\n      }\n    });\n    function buildReducer() {\n      if (true) {\n        if (_typeof(options.extraReducers) === \"object\") {\n          throw new Error( false ? 0 : \"The object notation for `createSlice.extraReducers` has been removed. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createSlice\");\n        }\n      }\n      var _ref10 = typeof options.extraReducers === \"function\" ? executeReducerBuilderCallback(options.extraReducers) : [options.extraReducers],\n        _ref11 = _slicedToArray(_ref10, 3),\n        _ref11$ = _ref11[0],\n        extraReducers = _ref11$ === void 0 ? {} : _ref11$,\n        _ref11$2 = _ref11[1],\n        actionMatchers = _ref11$2 === void 0 ? [] : _ref11$2,\n        _ref11$3 = _ref11[2],\n        defaultCaseReducer = _ref11$3 === void 0 ? void 0 : _ref11$3;\n      var finalCaseReducers = _objectSpread(_objectSpread({}, extraReducers), context.sliceCaseReducersByType);\n      return createReducer(options.initialState, function (builder) {\n        for (var key in finalCaseReducers) {\n          builder.addCase(key, finalCaseReducers[key]);\n        }\n        var _iterator2 = _createForOfIteratorHelper(context.sliceMatchers),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var sM = _step2.value;\n            builder.addMatcher(sM.matcher, sM.reducer);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n        var _iterator3 = _createForOfIteratorHelper(actionMatchers),\n          _step3;\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var m = _step3.value;\n            builder.addMatcher(m.matcher, m.reducer);\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n        if (defaultCaseReducer) {\n          builder.addDefaultCase(defaultCaseReducer);\n        }\n      });\n    }\n    var selectSelf = function selectSelf(state) {\n      return state;\n    };\n    var injectedSelectorCache = /* @__PURE__ */new Map();\n    var _reducer;\n    function reducer(state, action) {\n      if (!_reducer) _reducer = buildReducer();\n      return _reducer(state, action);\n    }\n    function getInitialState() {\n      if (!_reducer) _reducer = buildReducer();\n      return _reducer.getInitialState();\n    }\n    function makeSelectorProps(reducerPath2) {\n      var injected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      function selectSlice(state) {\n        var sliceState = state[reducerPath2];\n        if (typeof sliceState === \"undefined\") {\n          if (injected) {\n            sliceState = getInitialState();\n          } else if (true) {\n            throw new Error( false ? 0 : \"selectSlice returned undefined for an uninjected slice reducer\");\n          }\n        }\n        return sliceState;\n      }\n      function getSelectors() {\n        var selectState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : selectSelf;\n        var selectorCache = getOrInsertComputed(injectedSelectorCache, injected, function () {\n          return /* @__PURE__ */new WeakMap();\n        });\n        return getOrInsertComputed(selectorCache, selectState, function () {\n          var map = {};\n          for (var _i3 = 0, _Object$entries = Object.entries((_options$selectors = options.selectors) !== null && _options$selectors !== void 0 ? _options$selectors : {}); _i3 < _Object$entries.length; _i3++) {\n            var _options$selectors;\n            var _Object$entries$_i = _slicedToArray(_Object$entries[_i3], 2),\n              name2 = _Object$entries$_i[0],\n              selector = _Object$entries$_i[1];\n            map[name2] = wrapSelector(selector, selectState, getInitialState, injected);\n          }\n          return map;\n        });\n      }\n      return {\n        reducerPath: reducerPath2,\n        getSelectors: getSelectors,\n        get selectors() {\n          return getSelectors(selectSlice);\n        },\n        selectSlice: selectSlice\n      };\n    }\n    var slice = _objectSpread(_objectSpread({\n      name: name,\n      reducer: reducer,\n      actions: context.actionCreators,\n      caseReducers: context.sliceCaseReducersByName,\n      getInitialState: getInitialState\n    }, makeSelectorProps(reducerPath)), {}, {\n      injectInto: function injectInto(injectable) {\n        var _ref12 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          pathOpt = _ref12.reducerPath,\n          config = _objectWithoutProperties(_ref12, _excluded);\n        var newReducerPath = pathOpt !== null && pathOpt !== void 0 ? pathOpt : reducerPath;\n        injectable.inject({\n          reducerPath: newReducerPath,\n          reducer: reducer\n        }, config);\n        return _objectSpread(_objectSpread({}, slice), makeSelectorProps(newReducerPath, true));\n      }\n    });\n    return slice;\n  };\n}\nfunction wrapSelector(selector, selectState, getInitialState, injected) {\n  function wrapper(rootState) {\n    var sliceState = selectState(rootState);\n    if (typeof sliceState === \"undefined\") {\n      if (injected) {\n        sliceState = getInitialState();\n      } else if (true) {\n        throw new Error( false ? 0 : \"selectState returned undefined for an uninjected slice reducer\");\n      }\n    }\n    for (var _len12 = arguments.length, args = new Array(_len12 > 1 ? _len12 - 1 : 0), _key14 = 1; _key14 < _len12; _key14++) {\n      args[_key14 - 1] = arguments[_key14];\n    }\n    return selector.apply(void 0, [sliceState].concat(args));\n  }\n  wrapper.unwrapped = selector;\n  return wrapper;\n}\nvar createSlice = /* @__PURE__ */buildCreateSlice();\nfunction buildReducerCreators() {\n  function asyncThunk(payloadCreator, config) {\n    return _objectSpread({\n      _reducerDefinitionType: \"asyncThunk\" /* asyncThunk */,\n      payloadCreator: payloadCreator\n    }, config);\n  }\n  asyncThunk.withTypes = function () {\n    return asyncThunk;\n  };\n  return {\n    reducer: function reducer(caseReducer) {\n      return Object.assign(_defineProperty({}, caseReducer.name, function () {\n        return caseReducer.apply(void 0, arguments);\n      })[caseReducer.name], {\n        _reducerDefinitionType: \"reducer\" /* reducer */\n      });\n    },\n    preparedReducer: function preparedReducer(prepare, reducer) {\n      return {\n        _reducerDefinitionType: \"reducerWithPrepare\" /* reducerWithPrepare */,\n        prepare: prepare,\n        reducer: reducer\n      };\n    },\n    asyncThunk: asyncThunk\n  };\n}\nfunction handleNormalReducerDefinition(_ref13, maybeReducerWithPrepare, context) {\n  var type = _ref13.type,\n    reducerName = _ref13.reducerName,\n    createNotation = _ref13.createNotation;\n  var caseReducer;\n  var prepareCallback;\n  if (\"reducer\" in maybeReducerWithPrepare) {\n    if (createNotation && !isCaseReducerWithPrepareDefinition(maybeReducerWithPrepare)) {\n      throw new Error( false ? 0 : \"Please use the `create.preparedReducer` notation for prepared action creators with the `create` notation.\");\n    }\n    caseReducer = maybeReducerWithPrepare.reducer;\n    prepareCallback = maybeReducerWithPrepare.prepare;\n  } else {\n    caseReducer = maybeReducerWithPrepare;\n  }\n  context.addCase(type, caseReducer).exposeCaseReducer(reducerName, caseReducer).exposeAction(reducerName, prepareCallback ? createAction(type, prepareCallback) : createAction(type));\n}\nfunction isAsyncThunkSliceReducerDefinition(reducerDefinition) {\n  return reducerDefinition._reducerDefinitionType === \"asyncThunk\" /* asyncThunk */;\n}\n\nfunction isCaseReducerWithPrepareDefinition(reducerDefinition) {\n  return reducerDefinition._reducerDefinitionType === \"reducerWithPrepare\" /* reducerWithPrepare */;\n}\n\nfunction handleThunkCaseReducerDefinition(_ref14, reducerDefinition, context, cAT) {\n  var type = _ref14.type,\n    reducerName = _ref14.reducerName;\n  if (!cAT) {\n    throw new Error( false ? 0 : \"Cannot use `create.asyncThunk` in the built-in `createSlice`. Use `buildCreateSlice({ creators: { asyncThunk: asyncThunkCreator } })` to create a customised version of `createSlice`.\");\n  }\n  var payloadCreator = reducerDefinition.payloadCreator,\n    fulfilled = reducerDefinition.fulfilled,\n    pending = reducerDefinition.pending,\n    rejected = reducerDefinition.rejected,\n    settled = reducerDefinition.settled,\n    options = reducerDefinition.options;\n  var thunk = cAT(type, payloadCreator, options);\n  context.exposeAction(reducerName, thunk);\n  if (fulfilled) {\n    context.addCase(thunk.fulfilled, fulfilled);\n  }\n  if (pending) {\n    context.addCase(thunk.pending, pending);\n  }\n  if (rejected) {\n    context.addCase(thunk.rejected, rejected);\n  }\n  if (settled) {\n    context.addMatcher(thunk.settled, settled);\n  }\n  context.exposeCaseReducer(reducerName, {\n    fulfilled: fulfilled || noop,\n    pending: pending || noop,\n    rejected: rejected || noop,\n    settled: settled || noop\n  });\n}\nfunction noop() {}\n\n// src/entities/entity_state.ts\nfunction getInitialEntityState() {\n  return {\n    ids: [],\n    entities: {}\n  };\n}\nfunction createInitialStateFactory(stateAdapter) {\n  function getInitialState() {\n    var additionalState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var entities = arguments.length > 1 ? arguments[1] : undefined;\n    var state = Object.assign(getInitialEntityState(), additionalState);\n    return entities ? stateAdapter.setAll(state, entities) : state;\n  }\n  return {\n    getInitialState: getInitialState\n  };\n}\n\n// src/entities/state_selectors.ts\nfunction createSelectorsFactory() {\n  function getSelectors(selectState) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var _options$createSelect = options.createSelector,\n      createSelector2 = _options$createSelect === void 0 ? createDraftSafeSelector : _options$createSelect;\n    var selectIds = function selectIds(state) {\n      return state.ids;\n    };\n    var selectEntities = function selectEntities(state) {\n      return state.entities;\n    };\n    var selectAll = createSelector2(selectIds, selectEntities, function (ids, entities) {\n      return ids.map(function (id) {\n        return entities[id];\n      });\n    });\n    var selectId = function selectId(_, id) {\n      return id;\n    };\n    var selectById = function selectById(entities, id) {\n      return entities[id];\n    };\n    var selectTotal = createSelector2(selectIds, function (ids) {\n      return ids.length;\n    });\n    if (!selectState) {\n      return {\n        selectIds: selectIds,\n        selectEntities: selectEntities,\n        selectAll: selectAll,\n        selectTotal: selectTotal,\n        selectById: createSelector2(selectEntities, selectId, selectById)\n      };\n    }\n    var selectGlobalizedEntities = createSelector2(selectState, selectEntities);\n    return {\n      selectIds: createSelector2(selectState, selectIds),\n      selectEntities: selectGlobalizedEntities,\n      selectAll: createSelector2(selectState, selectAll),\n      selectTotal: createSelector2(selectState, selectTotal),\n      selectById: createSelector2(selectGlobalizedEntities, selectId, selectById)\n    };\n  }\n  return {\n    getSelectors: getSelectors\n  };\n}\n\n// src/entities/state_adapter.ts\n\nvar isDraftTyped = immer__WEBPACK_IMPORTED_MODULE_2__.isDraft;\nfunction createSingleArgumentStateOperator(mutator) {\n  var operator = createStateOperator(function (_, state) {\n    return mutator(state);\n  });\n  return function operation(state) {\n    return operator(state, void 0);\n  };\n}\nfunction createStateOperator(mutator) {\n  return function operation(state, arg) {\n    function isPayloadActionArgument(arg2) {\n      return isFSA(arg2);\n    }\n    var runMutator = function runMutator(draft) {\n      if (isPayloadActionArgument(arg)) {\n        mutator(arg.payload, draft);\n      } else {\n        mutator(arg, draft);\n      }\n    };\n    if (isDraftTyped(state)) {\n      runMutator(state);\n      return state;\n    }\n    return (0,immer__WEBPACK_IMPORTED_MODULE_2__.produce)(state, runMutator);\n  };\n}\n\n// src/entities/utils.ts\n\nfunction selectIdValue(entity, selectId) {\n  var key = selectId(entity);\n  if ( true && key === void 0) {\n    console.warn(\"The entity passed to the `selectId` implementation returned undefined.\", \"You should probably provide your own `selectId` implementation.\", \"The entity that was passed:\", entity, \"The `selectId` implementation:\", selectId.toString());\n  }\n  return key;\n}\nfunction ensureEntitiesArray(entities) {\n  if (!Array.isArray(entities)) {\n    entities = Object.values(entities);\n  }\n  return entities;\n}\nfunction getCurrent(value) {\n  return (0,immer__WEBPACK_IMPORTED_MODULE_2__.isDraft)(value) ? (0,immer__WEBPACK_IMPORTED_MODULE_2__.current)(value) : value;\n}\nfunction splitAddedUpdatedEntities(newEntities, selectId, state) {\n  newEntities = ensureEntitiesArray(newEntities);\n  var existingIdsArray = getCurrent(state.ids);\n  var existingIds = new Set(existingIdsArray);\n  var added = [];\n  var updated = [];\n  var _iterator4 = _createForOfIteratorHelper(newEntities),\n    _step4;\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var entity = _step4.value;\n      var id = selectIdValue(entity, selectId);\n      if (existingIds.has(id)) {\n        updated.push({\n          id: id,\n          changes: entity\n        });\n      } else {\n        added.push(entity);\n      }\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n  return [added, updated, existingIdsArray];\n}\n\n// src/entities/unsorted_state_adapter.ts\nfunction createUnsortedStateAdapter(selectId) {\n  function addOneMutably(entity, state) {\n    var key = selectIdValue(entity, selectId);\n    if (key in state.entities) {\n      return;\n    }\n    state.ids.push(key);\n    state.entities[key] = entity;\n  }\n  function addManyMutably(newEntities, state) {\n    newEntities = ensureEntitiesArray(newEntities);\n    var _iterator5 = _createForOfIteratorHelper(newEntities),\n      _step5;\n    try {\n      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n        var entity = _step5.value;\n        addOneMutably(entity, state);\n      }\n    } catch (err) {\n      _iterator5.e(err);\n    } finally {\n      _iterator5.f();\n    }\n  }\n  function setOneMutably(entity, state) {\n    var key = selectIdValue(entity, selectId);\n    if (!(key in state.entities)) {\n      state.ids.push(key);\n    }\n    ;\n    state.entities[key] = entity;\n  }\n  function setManyMutably(newEntities, state) {\n    newEntities = ensureEntitiesArray(newEntities);\n    var _iterator6 = _createForOfIteratorHelper(newEntities),\n      _step6;\n    try {\n      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n        var entity = _step6.value;\n        setOneMutably(entity, state);\n      }\n    } catch (err) {\n      _iterator6.e(err);\n    } finally {\n      _iterator6.f();\n    }\n  }\n  function setAllMutably(newEntities, state) {\n    newEntities = ensureEntitiesArray(newEntities);\n    state.ids = [];\n    state.entities = {};\n    addManyMutably(newEntities, state);\n  }\n  function removeOneMutably(key, state) {\n    return removeManyMutably([key], state);\n  }\n  function removeManyMutably(keys, state) {\n    var didMutate = false;\n    keys.forEach(function (key) {\n      if (key in state.entities) {\n        delete state.entities[key];\n        didMutate = true;\n      }\n    });\n    if (didMutate) {\n      state.ids = state.ids.filter(function (id) {\n        return id in state.entities;\n      });\n    }\n  }\n  function removeAllMutably(state) {\n    Object.assign(state, {\n      ids: [],\n      entities: {}\n    });\n  }\n  function takeNewKey(keys, update, state) {\n    var original3 = state.entities[update.id];\n    if (original3 === void 0) {\n      return false;\n    }\n    var updated = Object.assign({}, original3, update.changes);\n    var newKey = selectIdValue(updated, selectId);\n    var hasNewKey = newKey !== update.id;\n    if (hasNewKey) {\n      keys[update.id] = newKey;\n      delete state.entities[update.id];\n    }\n    ;\n    state.entities[newKey] = updated;\n    return hasNewKey;\n  }\n  function updateOneMutably(update, state) {\n    return updateManyMutably([update], state);\n  }\n  function updateManyMutably(updates, state) {\n    var newKeys = {};\n    var updatesPerEntity = {};\n    updates.forEach(function (update) {\n      if (update.id in state.entities) {\n        var _updatesPerEntity$upd;\n        updatesPerEntity[update.id] = {\n          id: update.id,\n          // Spreads ignore falsy values, so this works even if there isn't\n          // an existing update already at this key\n          changes: _objectSpread(_objectSpread({}, (_updatesPerEntity$upd = updatesPerEntity[update.id]) === null || _updatesPerEntity$upd === void 0 ? void 0 : _updatesPerEntity$upd.changes), update.changes)\n        };\n      }\n    });\n    updates = Object.values(updatesPerEntity);\n    var didMutateEntities = updates.length > 0;\n    if (didMutateEntities) {\n      var didMutateIds = updates.filter(function (update) {\n        return takeNewKey(newKeys, update, state);\n      }).length > 0;\n      if (didMutateIds) {\n        state.ids = Object.values(state.entities).map(function (e) {\n          return selectIdValue(e, selectId);\n        });\n      }\n    }\n  }\n  function upsertOneMutably(entity, state) {\n    return upsertManyMutably([entity], state);\n  }\n  function upsertManyMutably(newEntities, state) {\n    var _splitAddedUpdatedEnt = splitAddedUpdatedEntities(newEntities, selectId, state),\n      _splitAddedUpdatedEnt2 = _slicedToArray(_splitAddedUpdatedEnt, 2),\n      added = _splitAddedUpdatedEnt2[0],\n      updated = _splitAddedUpdatedEnt2[1];\n    updateManyMutably(updated, state);\n    addManyMutably(added, state);\n  }\n  return {\n    removeAll: createSingleArgumentStateOperator(removeAllMutably),\n    addOne: createStateOperator(addOneMutably),\n    addMany: createStateOperator(addManyMutably),\n    setOne: createStateOperator(setOneMutably),\n    setMany: createStateOperator(setManyMutably),\n    setAll: createStateOperator(setAllMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    updateMany: createStateOperator(updateManyMutably),\n    upsertOne: createStateOperator(upsertOneMutably),\n    upsertMany: createStateOperator(upsertManyMutably),\n    removeOne: createStateOperator(removeOneMutably),\n    removeMany: createStateOperator(removeManyMutably)\n  };\n}\n\n// src/entities/sorted_state_adapter.ts\nfunction findInsertIndex(sortedItems, item, comparisonFunction) {\n  var lowIndex = 0;\n  var highIndex = sortedItems.length;\n  while (lowIndex < highIndex) {\n    var middleIndex = lowIndex + highIndex >>> 1;\n    var currentItem = sortedItems[middleIndex];\n    var res = comparisonFunction(item, currentItem);\n    if (res >= 0) {\n      lowIndex = middleIndex + 1;\n    } else {\n      highIndex = middleIndex;\n    }\n  }\n  return lowIndex;\n}\nfunction insert(sortedItems, item, comparisonFunction) {\n  var insertAtIndex = findInsertIndex(sortedItems, item, comparisonFunction);\n  sortedItems.splice(insertAtIndex, 0, item);\n  return sortedItems;\n}\nfunction createSortedStateAdapter(selectId, comparer) {\n  var _createUnsortedStateA = createUnsortedStateAdapter(selectId),\n    removeOne = _createUnsortedStateA.removeOne,\n    removeMany = _createUnsortedStateA.removeMany,\n    removeAll = _createUnsortedStateA.removeAll;\n  function addOneMutably(entity, state) {\n    return addManyMutably([entity], state);\n  }\n  function addManyMutably(newEntities, state, existingIds) {\n    newEntities = ensureEntitiesArray(newEntities);\n    var existingKeys = new Set(existingIds !== null && existingIds !== void 0 ? existingIds : getCurrent(state.ids));\n    var models = newEntities.filter(function (model) {\n      return !existingKeys.has(selectIdValue(model, selectId));\n    });\n    if (models.length !== 0) {\n      mergeFunction(state, models);\n    }\n  }\n  function setOneMutably(entity, state) {\n    return setManyMutably([entity], state);\n  }\n  function setManyMutably(newEntities, state) {\n    newEntities = ensureEntitiesArray(newEntities);\n    if (newEntities.length !== 0) {\n      var _iterator7 = _createForOfIteratorHelper(newEntities),\n        _step7;\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var item = _step7.value;\n          delete state.entities[selectId(item)];\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n      mergeFunction(state, newEntities);\n    }\n  }\n  function setAllMutably(newEntities, state) {\n    newEntities = ensureEntitiesArray(newEntities);\n    state.entities = {};\n    state.ids = [];\n    addManyMutably(newEntities, state, []);\n  }\n  function updateOneMutably(update, state) {\n    return updateManyMutably([update], state);\n  }\n  function updateManyMutably(updates, state) {\n    var appliedUpdates = false;\n    var replacedIds = false;\n    var _iterator8 = _createForOfIteratorHelper(updates),\n      _step8;\n    try {\n      for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n        var update = _step8.value;\n        var entity = state.entities[update.id];\n        if (!entity) {\n          continue;\n        }\n        appliedUpdates = true;\n        Object.assign(entity, update.changes);\n        var newId = selectId(entity);\n        if (update.id !== newId) {\n          replacedIds = true;\n          delete state.entities[update.id];\n          var oldIndex = state.ids.indexOf(update.id);\n          state.ids[oldIndex] = newId;\n          state.entities[newId] = entity;\n        }\n      }\n    } catch (err) {\n      _iterator8.e(err);\n    } finally {\n      _iterator8.f();\n    }\n    if (appliedUpdates) {\n      mergeFunction(state, [], appliedUpdates, replacedIds);\n    }\n  }\n  function upsertOneMutably(entity, state) {\n    return upsertManyMutably([entity], state);\n  }\n  function upsertManyMutably(newEntities, state) {\n    var _splitAddedUpdatedEnt3 = splitAddedUpdatedEntities(newEntities, selectId, state),\n      _splitAddedUpdatedEnt4 = _slicedToArray(_splitAddedUpdatedEnt3, 3),\n      added = _splitAddedUpdatedEnt4[0],\n      updated = _splitAddedUpdatedEnt4[1],\n      existingIdsArray = _splitAddedUpdatedEnt4[2];\n    if (updated.length) {\n      updateManyMutably(updated, state);\n    }\n    if (added.length) {\n      addManyMutably(added, state, existingIdsArray);\n    }\n  }\n  function areArraysEqual(a, b) {\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (var i = 0; i < a.length; i++) {\n      if (a[i] === b[i]) {\n        continue;\n      }\n      return false;\n    }\n    return true;\n  }\n  var mergeFunction = function mergeFunction(state, addedItems, appliedUpdates, replacedIds) {\n    var currentEntities = getCurrent(state.entities);\n    var currentIds = getCurrent(state.ids);\n    var stateEntities = state.entities;\n    var ids = currentIds;\n    if (replacedIds) {\n      ids = new Set(currentIds);\n    }\n    var sortedEntities = [];\n    var _iterator9 = _createForOfIteratorHelper(ids),\n      _step9;\n    try {\n      for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n        var id = _step9.value;\n        var entity = currentEntities[id];\n        if (entity) {\n          sortedEntities.push(entity);\n        }\n      }\n    } catch (err) {\n      _iterator9.e(err);\n    } finally {\n      _iterator9.f();\n    }\n    var wasPreviouslyEmpty = sortedEntities.length === 0;\n    var _iterator10 = _createForOfIteratorHelper(addedItems),\n      _step10;\n    try {\n      for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n        var item = _step10.value;\n        stateEntities[selectId(item)] = item;\n        if (!wasPreviouslyEmpty) {\n          insert(sortedEntities, item, comparer);\n        }\n      }\n    } catch (err) {\n      _iterator10.e(err);\n    } finally {\n      _iterator10.f();\n    }\n    if (wasPreviouslyEmpty) {\n      sortedEntities = addedItems.slice().sort(comparer);\n    } else if (appliedUpdates) {\n      sortedEntities.sort(comparer);\n    }\n    var newSortedIds = sortedEntities.map(selectId);\n    if (!areArraysEqual(currentIds, newSortedIds)) {\n      state.ids = newSortedIds;\n    }\n  };\n  return {\n    removeOne: removeOne,\n    removeMany: removeMany,\n    removeAll: removeAll,\n    addOne: createStateOperator(addOneMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    upsertOne: createStateOperator(upsertOneMutably),\n    setOne: createStateOperator(setOneMutably),\n    setMany: createStateOperator(setManyMutably),\n    setAll: createStateOperator(setAllMutably),\n    addMany: createStateOperator(addManyMutably),\n    updateMany: createStateOperator(updateManyMutably),\n    upsertMany: createStateOperator(upsertManyMutably)\n  };\n}\n\n// src/entities/create_adapter.ts\nfunction createEntityAdapter() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _sortComparer$selectI = _objectSpread({\n      sortComparer: false,\n      selectId: function selectId(instance) {\n        return instance.id;\n      }\n    }, options),\n    selectId = _sortComparer$selectI.selectId,\n    sortComparer = _sortComparer$selectI.sortComparer;\n  var stateAdapter = sortComparer ? createSortedStateAdapter(selectId, sortComparer) : createUnsortedStateAdapter(selectId);\n  var stateFactory = createInitialStateFactory(stateAdapter);\n  var selectorsFactory = createSelectorsFactory();\n  return _objectSpread(_objectSpread(_objectSpread({\n    selectId: selectId,\n    sortComparer: sortComparer\n  }, stateFactory), selectorsFactory), stateAdapter);\n}\n\n// src/listenerMiddleware/index.ts\n\n\n// src/listenerMiddleware/exceptions.ts\nvar task = \"task\";\nvar listener = \"listener\";\nvar completed = \"completed\";\nvar cancelled = \"cancelled\";\nvar taskCancelled = \"task-\".concat(cancelled);\nvar taskCompleted = \"task-\".concat(completed);\nvar listenerCancelled = \"\".concat(listener, \"-\").concat(cancelled);\nvar listenerCompleted = \"\".concat(listener, \"-\").concat(completed);\nvar TaskAbortError = /*#__PURE__*/_createClass(function TaskAbortError(code) {\n  _classCallCheck(this, TaskAbortError);\n  _defineProperty(this, \"name\", \"TaskAbortError\");\n  _defineProperty(this, \"message\", void 0);\n  this.code = code;\n  this.message = \"\".concat(task, \" \").concat(cancelled, \" (reason: \").concat(code, \")\");\n});\n\n// src/listenerMiddleware/utils.ts\nvar assertFunction = function assertFunction(func, expected) {\n  if (typeof func !== \"function\") {\n    throw new TypeError( false ? 0 : \"\".concat(expected, \" is not a function\"));\n  }\n};\nvar noop2 = function noop2() {};\nvar catchRejection = function catchRejection(promise) {\n  var onError = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop2;\n  promise[\"catch\"](onError);\n  return promise;\n};\nvar addAbortSignalListener = function addAbortSignalListener(abortSignal, callback) {\n  abortSignal.addEventListener(\"abort\", callback, {\n    once: true\n  });\n  return function () {\n    return abortSignal.removeEventListener(\"abort\", callback);\n  };\n};\nvar abortControllerWithReason = function abortControllerWithReason(abortController, reason) {\n  var signal = abortController.signal;\n  if (signal.aborted) {\n    return;\n  }\n  if (!(\"reason\" in signal)) {\n    Object.defineProperty(signal, \"reason\", {\n      enumerable: true,\n      value: reason,\n      configurable: true,\n      writable: true\n    });\n  }\n  ;\n  abortController.abort(reason);\n};\n\n// src/listenerMiddleware/task.ts\nvar validateActive = function validateActive(signal) {\n  if (signal.aborted) {\n    var reason = signal.reason;\n    throw new TaskAbortError(reason);\n  }\n};\nfunction raceWithSignal(signal, promise) {\n  var cleanup = noop2;\n  return new Promise(function (resolve, reject) {\n    var notifyRejection = function notifyRejection() {\n      return reject(new TaskAbortError(signal.reason));\n    };\n    if (signal.aborted) {\n      notifyRejection();\n      return;\n    }\n    cleanup = addAbortSignalListener(signal, notifyRejection);\n    promise[\"finally\"](function () {\n      return cleanup();\n    }).then(resolve, reject);\n  })[\"finally\"](function () {\n    cleanup = noop2;\n  });\n}\nvar runTask = /*#__PURE__*/function () {\n  var _ref15 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(task2, cleanUp) {\n    var value;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return Promise.resolve();\n        case 3:\n          _context2.next = 5;\n          return task2();\n        case 5:\n          value = _context2.sent;\n          return _context2.abrupt(\"return\", {\n            status: \"ok\",\n            value: value\n          });\n        case 9:\n          _context2.prev = 9;\n          _context2.t0 = _context2[\"catch\"](0);\n          return _context2.abrupt(\"return\", {\n            status: _context2.t0 instanceof TaskAbortError ? \"cancelled\" : \"rejected\",\n            error: _context2.t0\n          });\n        case 12:\n          _context2.prev = 12;\n          cleanUp === null || cleanUp === void 0 || cleanUp();\n          return _context2.finish(12);\n        case 15:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2, null, [[0, 9, 12, 15]]);\n  }));\n  return function runTask(_x, _x2) {\n    return _ref15.apply(this, arguments);\n  };\n}();\nvar createPause = function createPause(signal) {\n  return function (promise) {\n    return catchRejection(raceWithSignal(signal, promise).then(function (output) {\n      validateActive(signal);\n      return output;\n    }));\n  };\n};\nvar createDelay = function createDelay(signal) {\n  var pause = createPause(signal);\n  return function (timeoutMs) {\n    return pause(new Promise(function (resolve) {\n      return setTimeout(resolve, timeoutMs);\n    }));\n  };\n};\n\n// src/listenerMiddleware/index.ts\nvar assign = Object.assign;\nvar INTERNAL_NIL_TOKEN = {};\nvar alm = \"listenerMiddleware\";\nvar createFork = function createFork(parentAbortSignal, parentBlockingPromises) {\n  var linkControllers = function linkControllers(controller) {\n    return addAbortSignalListener(parentAbortSignal, function () {\n      return abortControllerWithReason(controller, parentAbortSignal.reason);\n    });\n  };\n  return function (taskExecutor, opts) {\n    assertFunction(taskExecutor, \"taskExecutor\");\n    var childAbortController = new AbortController();\n    linkControllers(childAbortController);\n    var result = runTask( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n      var result2;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            validateActive(parentAbortSignal);\n            validateActive(childAbortController.signal);\n            _context3.next = 4;\n            return taskExecutor({\n              pause: createPause(childAbortController.signal),\n              delay: createDelay(childAbortController.signal),\n              signal: childAbortController.signal\n            });\n          case 4:\n            result2 = _context3.sent;\n            validateActive(childAbortController.signal);\n            return _context3.abrupt(\"return\", result2);\n          case 7:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3);\n    })), function () {\n      return abortControllerWithReason(childAbortController, taskCompleted);\n    });\n    if (opts !== null && opts !== void 0 && opts.autoJoin) {\n      parentBlockingPromises.push(result[\"catch\"](noop2));\n    }\n    return {\n      result: createPause(parentAbortSignal)(result),\n      cancel: function cancel() {\n        abortControllerWithReason(childAbortController, taskCancelled);\n      }\n    };\n  };\n};\nvar createTakePattern = function createTakePattern(startListening, signal) {\n  var take = /*#__PURE__*/function () {\n    var _ref16 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(predicate, timeout) {\n      var unsubscribe, tuplePromise, promises, output;\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            validateActive(signal);\n            unsubscribe = function unsubscribe() {};\n            tuplePromise = new Promise(function (resolve, reject) {\n              var stopListening = startListening({\n                predicate: predicate,\n                effect: function effect(action, listenerApi) {\n                  listenerApi.unsubscribe();\n                  resolve([action, listenerApi.getState(), listenerApi.getOriginalState()]);\n                }\n              });\n              unsubscribe = function unsubscribe() {\n                stopListening();\n                reject();\n              };\n            });\n            promises = [tuplePromise];\n            if (timeout != null) {\n              promises.push(new Promise(function (resolve) {\n                return setTimeout(resolve, timeout, null);\n              }));\n            }\n            _context4.prev = 5;\n            _context4.next = 8;\n            return raceWithSignal(signal, Promise.race(promises));\n          case 8:\n            output = _context4.sent;\n            validateActive(signal);\n            return _context4.abrupt(\"return\", output);\n          case 11:\n            _context4.prev = 11;\n            unsubscribe();\n            return _context4.finish(11);\n          case 14:\n          case \"end\":\n            return _context4.stop();\n        }\n      }, _callee4, null, [[5,, 11, 14]]);\n    }));\n    return function take(_x3, _x4) {\n      return _ref16.apply(this, arguments);\n    };\n  }();\n  return function (predicate, timeout) {\n    return catchRejection(take(predicate, timeout));\n  };\n};\nvar getListenerEntryPropsFrom = function getListenerEntryPropsFrom(options) {\n  var type = options.type,\n    actionCreator = options.actionCreator,\n    matcher = options.matcher,\n    predicate = options.predicate,\n    effect = options.effect;\n  if (type) {\n    predicate = createAction(type).match;\n  } else if (actionCreator) {\n    type = actionCreator.type;\n    predicate = actionCreator.match;\n  } else if (matcher) {\n    predicate = matcher;\n  } else if (predicate) {} else {\n    throw new Error( false ? 0 : \"Creating or removing a listener requires one of the known fields for matching an action\");\n  }\n  assertFunction(effect, \"options.listener\");\n  return {\n    predicate: predicate,\n    type: type,\n    effect: effect\n  };\n};\nvar createListenerEntry = /* @__PURE__ */assign(function (options) {\n  var _getListenerEntryProp = getListenerEntryPropsFrom(options),\n    type = _getListenerEntryProp.type,\n    predicate = _getListenerEntryProp.predicate,\n    effect = _getListenerEntryProp.effect;\n  var entry = {\n    id: nanoid(),\n    effect: effect,\n    type: type,\n    predicate: predicate,\n    pending: /* @__PURE__ */new Set(),\n    unsubscribe: function unsubscribe() {\n      throw new Error( false ? 0 : \"Unsubscribe not initialized\");\n    }\n  };\n  return entry;\n}, {\n  withTypes: function withTypes() {\n    return createListenerEntry;\n  }\n});\nvar findListenerEntry = function findListenerEntry(listenerMap, options) {\n  var _getListenerEntryProp2 = getListenerEntryPropsFrom(options),\n    type = _getListenerEntryProp2.type,\n    effect = _getListenerEntryProp2.effect,\n    predicate = _getListenerEntryProp2.predicate;\n  return Array.from(listenerMap.values()).find(function (entry) {\n    var matchPredicateOrType = typeof type === \"string\" ? entry.type === type : entry.predicate === predicate;\n    return matchPredicateOrType && entry.effect === effect;\n  });\n};\nvar cancelActiveListeners = function cancelActiveListeners(entry) {\n  entry.pending.forEach(function (controller) {\n    abortControllerWithReason(controller, listenerCancelled);\n  });\n};\nvar createClearListenerMiddleware = function createClearListenerMiddleware(listenerMap) {\n  return function () {\n    listenerMap.forEach(cancelActiveListeners);\n    listenerMap.clear();\n  };\n};\nvar safelyNotifyError = function safelyNotifyError(errorHandler, errorToNotify, errorInfo) {\n  try {\n    errorHandler(errorToNotify, errorInfo);\n  } catch (errorHandlerError) {\n    setTimeout(function () {\n      throw errorHandlerError;\n    }, 0);\n  }\n};\nvar addListener = /* @__PURE__ */assign( /* @__PURE__ */createAction(\"\".concat(alm, \"/add\")), {\n  withTypes: function withTypes() {\n    return addListener;\n  }\n});\nvar clearAllListeners = /* @__PURE__ */createAction(\"\".concat(alm, \"/removeAll\"));\nvar removeListener = /* @__PURE__ */assign( /* @__PURE__ */createAction(\"\".concat(alm, \"/remove\")), {\n  withTypes: function withTypes() {\n    return removeListener;\n  }\n});\nvar defaultErrorHandler = function defaultErrorHandler() {\n  var _console;\n  for (var _len13 = arguments.length, args = new Array(_len13), _key15 = 0; _key15 < _len13; _key15++) {\n    args[_key15] = arguments[_key15];\n  }\n  (_console = console).error.apply(_console, [\"\".concat(alm, \"/error\")].concat(args));\n};\nvar createListenerMiddleware = function createListenerMiddleware() {\n  var middlewareOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var listenerMap = /* @__PURE__ */new Map();\n  var extra = middlewareOptions.extra,\n    _middlewareOptions$on = middlewareOptions.onError,\n    onError = _middlewareOptions$on === void 0 ? defaultErrorHandler : _middlewareOptions$on;\n  assertFunction(onError, \"onError\");\n  var insertEntry = function insertEntry(entry) {\n    entry.unsubscribe = function () {\n      return listenerMap[\"delete\"](entry.id);\n    };\n    listenerMap.set(entry.id, entry);\n    return function (cancelOptions) {\n      entry.unsubscribe();\n      if (cancelOptions !== null && cancelOptions !== void 0 && cancelOptions.cancelActive) {\n        cancelActiveListeners(entry);\n      }\n    };\n  };\n  var startListening = function startListening(options) {\n    var _findListenerEntry;\n    var entry = (_findListenerEntry = findListenerEntry(listenerMap, options)) !== null && _findListenerEntry !== void 0 ? _findListenerEntry : createListenerEntry(options);\n    return insertEntry(entry);\n  };\n  assign(startListening, {\n    withTypes: function withTypes() {\n      return startListening;\n    }\n  });\n  var stopListening = function stopListening(options) {\n    var entry = findListenerEntry(listenerMap, options);\n    if (entry) {\n      entry.unsubscribe();\n      if (options.cancelActive) {\n        cancelActiveListeners(entry);\n      }\n    }\n    return !!entry;\n  };\n  assign(stopListening, {\n    withTypes: function withTypes() {\n      return stopListening;\n    }\n  });\n  var notifyListener = /*#__PURE__*/function () {\n    var _ref17 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(entry, action, api, getOriginalState) {\n      var internalTaskController, take, autoJoinPromises;\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) switch (_context5.prev = _context5.next) {\n          case 0:\n            internalTaskController = new AbortController();\n            take = createTakePattern(startListening, internalTaskController.signal);\n            autoJoinPromises = [];\n            _context5.prev = 3;\n            entry.pending.add(internalTaskController);\n            _context5.next = 7;\n            return Promise.resolve(entry.effect(action,\n            // Use assign() rather than ... to avoid extra helper functions added to bundle\n            assign({}, api, {\n              getOriginalState: getOriginalState,\n              condition: function condition(predicate, timeout) {\n                return take(predicate, timeout).then(Boolean);\n              },\n              take: take,\n              delay: createDelay(internalTaskController.signal),\n              pause: createPause(internalTaskController.signal),\n              extra: extra,\n              signal: internalTaskController.signal,\n              fork: createFork(internalTaskController.signal, autoJoinPromises),\n              unsubscribe: entry.unsubscribe,\n              subscribe: function subscribe() {\n                listenerMap.set(entry.id, entry);\n              },\n              cancelActiveListeners: function cancelActiveListeners() {\n                entry.pending.forEach(function (controller, _, set) {\n                  if (controller !== internalTaskController) {\n                    abortControllerWithReason(controller, listenerCancelled);\n                    set[\"delete\"](controller);\n                  }\n                });\n              },\n              cancel: function cancel() {\n                abortControllerWithReason(internalTaskController, listenerCancelled);\n                entry.pending[\"delete\"](internalTaskController);\n              },\n              throwIfCancelled: function throwIfCancelled() {\n                validateActive(internalTaskController.signal);\n              }\n            })));\n          case 7:\n            _context5.next = 12;\n            break;\n          case 9:\n            _context5.prev = 9;\n            _context5.t0 = _context5[\"catch\"](3);\n            if (!(_context5.t0 instanceof TaskAbortError)) {\n              safelyNotifyError(onError, _context5.t0, {\n                raisedBy: \"effect\"\n              });\n            }\n          case 12:\n            _context5.prev = 12;\n            _context5.next = 15;\n            return Promise.all(autoJoinPromises);\n          case 15:\n            abortControllerWithReason(internalTaskController, listenerCompleted);\n            entry.pending[\"delete\"](internalTaskController);\n            return _context5.finish(12);\n          case 18:\n          case \"end\":\n            return _context5.stop();\n        }\n      }, _callee5, null, [[3, 9, 12, 18]]);\n    }));\n    return function notifyListener(_x5, _x6, _x7, _x8) {\n      return _ref17.apply(this, arguments);\n    };\n  }();\n  var clearListenerMiddleware = createClearListenerMiddleware(listenerMap);\n  var middleware = function middleware(api) {\n    return function (next) {\n      return function (action) {\n        if (!(0,redux__WEBPACK_IMPORTED_MODULE_0__.isAction)(action)) {\n          return next(action);\n        }\n        if (addListener.match(action)) {\n          return startListening(action.payload);\n        }\n        if (clearAllListeners.match(action)) {\n          clearListenerMiddleware();\n          return;\n        }\n        if (removeListener.match(action)) {\n          return stopListening(action.payload);\n        }\n        var originalState = api.getState();\n        var getOriginalState = function getOriginalState() {\n          if (originalState === INTERNAL_NIL_TOKEN) {\n            throw new Error( false ? 0 : \"\".concat(alm, \": getOriginalState can only be called synchronously\"));\n          }\n          return originalState;\n        };\n        var result;\n        try {\n          result = next(action);\n          if (listenerMap.size > 0) {\n            var currentState = api.getState();\n            var listenerEntries = Array.from(listenerMap.values());\n            for (var _i4 = 0, _listenerEntries = listenerEntries; _i4 < _listenerEntries.length; _i4++) {\n              var entry = _listenerEntries[_i4];\n              var runListener = false;\n              try {\n                runListener = entry.predicate(action, currentState, originalState);\n              } catch (predicateError) {\n                runListener = false;\n                safelyNotifyError(onError, predicateError, {\n                  raisedBy: \"predicate\"\n                });\n              }\n              if (!runListener) {\n                continue;\n              }\n              notifyListener(entry, action, api, getOriginalState);\n            }\n          }\n        } finally {\n          originalState = INTERNAL_NIL_TOKEN;\n        }\n        return result;\n      };\n    };\n  };\n  return {\n    middleware: middleware,\n    startListening: startListening,\n    stopListening: stopListening,\n    clearListeners: clearListenerMiddleware\n  };\n};\n\n// src/dynamicMiddleware/index.ts\n\nvar createMiddlewareEntry = function createMiddlewareEntry(middleware) {\n  return {\n    middleware: middleware,\n    applied: /* @__PURE__ */new Map()\n  };\n};\nvar matchInstance = function matchInstance(instanceId) {\n  return function (action) {\n    var _action$meta2;\n    return (action === null || action === void 0 || (_action$meta2 = action.meta) === null || _action$meta2 === void 0 ? void 0 : _action$meta2.instanceId) === instanceId;\n  };\n};\nvar createDynamicMiddleware = function createDynamicMiddleware() {\n  var instanceId = nanoid();\n  var middlewareMap = /* @__PURE__ */new Map();\n  var withMiddleware = Object.assign(createAction(\"dynamicMiddleware/add\", function () {\n    for (var _len14 = arguments.length, middlewares = new Array(_len14), _key16 = 0; _key16 < _len14; _key16++) {\n      middlewares[_key16] = arguments[_key16];\n    }\n    return {\n      payload: middlewares,\n      meta: {\n        instanceId: instanceId\n      }\n    };\n  }), {\n    withTypes: function withTypes() {\n      return withMiddleware;\n    }\n  });\n  var addMiddleware = Object.assign(function addMiddleware2() {\n    for (var _len15 = arguments.length, middlewares = new Array(_len15), _key17 = 0; _key17 < _len15; _key17++) {\n      middlewares[_key17] = arguments[_key17];\n    }\n    middlewares.forEach(function (middleware2) {\n      getOrInsertComputed(middlewareMap, middleware2, createMiddlewareEntry);\n    });\n  }, {\n    withTypes: function withTypes() {\n      return addMiddleware;\n    }\n  });\n  var getFinalMiddleware = function getFinalMiddleware(api) {\n    var appliedMiddleware = Array.from(middlewareMap.values()).map(function (entry) {\n      return getOrInsertComputed(entry.applied, api, entry.middleware);\n    });\n    return redux__WEBPACK_IMPORTED_MODULE_0__.compose.apply(void 0, _toConsumableArray(appliedMiddleware));\n  };\n  var isWithMiddleware = isAllOf(withMiddleware, matchInstance(instanceId));\n  var middleware = function middleware(api) {\n    return function (next) {\n      return function (action) {\n        if (isWithMiddleware(action)) {\n          addMiddleware.apply(void 0, _toConsumableArray(action.payload));\n          return api.dispatch;\n        }\n        return getFinalMiddleware(api)(next)(action);\n      };\n    };\n  };\n  return {\n    middleware: middleware,\n    addMiddleware: addMiddleware,\n    withMiddleware: withMiddleware,\n    instanceId: instanceId\n  };\n};\n\n// src/combineSlices.ts\n\nvar isSliceLike = function isSliceLike(maybeSliceLike) {\n  return \"reducerPath\" in maybeSliceLike && typeof maybeSliceLike.reducerPath === \"string\";\n};\nvar getReducers = function getReducers(slices) {\n  return slices.flatMap(function (sliceOrMap) {\n    return isSliceLike(sliceOrMap) ? [[sliceOrMap.reducerPath, sliceOrMap.reducer]] : Object.entries(sliceOrMap);\n  });\n};\nvar ORIGINAL_STATE = Symbol[\"for\"](\"rtk-state-proxy-original\");\nvar isStateProxy = function isStateProxy(value) {\n  return !!value && !!value[ORIGINAL_STATE];\n};\nvar stateProxyMap = /* @__PURE__ */new WeakMap();\nvar createStateProxy = function createStateProxy(state, reducerMap) {\n  return getOrInsertComputed(stateProxyMap, state, function () {\n    return new Proxy(state, {\n      get: function get(target, prop, receiver) {\n        if (prop === ORIGINAL_STATE) return target;\n        var result = Reflect.get(target, prop, receiver);\n        if (typeof result === \"undefined\") {\n          var reducer = reducerMap[prop.toString()];\n          if (reducer) {\n            var reducerResult = reducer(void 0, {\n              type: nanoid()\n            });\n            if (typeof reducerResult === \"undefined\") {\n              throw new Error( false ? 0 : \"The slice reducer for key \\\"\".concat(prop.toString(), \"\\\" returned undefined when called for selector(). If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.\"));\n            }\n            return reducerResult;\n          }\n        }\n        return result;\n      }\n    });\n  });\n};\nvar original = function original(state) {\n  if (!isStateProxy(state)) {\n    throw new Error( false ? 0 : \"original must be used on state Proxy\");\n  }\n  return state[ORIGINAL_STATE];\n};\nvar noopReducer = function noopReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return state;\n};\nfunction combineSlices() {\n  for (var _len16 = arguments.length, slices = new Array(_len16), _key18 = 0; _key18 < _len16; _key18++) {\n    slices[_key18] = arguments[_key18];\n  }\n  var reducerMap = Object.fromEntries(getReducers(slices));\n  var getReducer = function getReducer() {\n    return Object.keys(reducerMap).length ? (0,redux__WEBPACK_IMPORTED_MODULE_0__.combineReducers)(reducerMap) : noopReducer;\n  };\n  var reducer = getReducer();\n  function combinedReducer(state, action) {\n    return reducer(state, action);\n  }\n  combinedReducer.withLazyLoadedSlices = function () {\n    return combinedReducer;\n  };\n  var inject = function inject(slice) {\n    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var reducerPath = slice.reducerPath,\n      reducerToInject = slice.reducer;\n    var currentReducer = reducerMap[reducerPath];\n    if (!config.overrideExisting && currentReducer && currentReducer !== reducerToInject) {\n      if (typeof process !== \"undefined\" && true) {\n        console.error(\"called `inject` to override already-existing reducer \".concat(reducerPath, \" without specifying `overrideExisting: true`\"));\n      }\n      return combinedReducer;\n    }\n    reducerMap[reducerPath] = reducerToInject;\n    reducer = getReducer();\n    return combinedReducer;\n  };\n  var selector = Object.assign(function makeSelector(selectorFn, selectState) {\n    return function selector2(state) {\n      for (var _len17 = arguments.length, args = new Array(_len17 > 1 ? _len17 - 1 : 0), _key19 = 1; _key19 < _len17; _key19++) {\n        args[_key19 - 1] = arguments[_key19];\n      }\n      return selectorFn.apply(void 0, [createStateProxy(selectState ? selectState.apply(void 0, [state].concat(args)) : state, reducerMap)].concat(args));\n    };\n  }, {\n    original: original\n  });\n  return Object.assign(combinedReducer, {\n    inject: inject,\n    selector: selector\n  });\n}\n\n// src/formatProdErrorMessage.ts\nfunction formatProdErrorMessage(code) {\n  return \"Minified Redux Toolkit error #\".concat(code, \"; visit https://redux-toolkit.js.org/Errors?code=\").concat(code, \" for the full message or use the non-minified dev environment for full errors. \");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlZHV4anMvdG9vbGtpdC9kaXN0L3JlZHV4LXRvb2xraXQubW9kZXJuLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7K0NBQ0EscUpBQUFBLG1CQUFBLFlBQUFBLG9CQUFBLFdBQUFDLENBQUEsU0FBQUMsQ0FBQSxFQUFBRCxDQUFBLE9BQUFFLENBQUEsR0FBQUMsTUFBQSxDQUFBQyxTQUFBLEVBQUFDLENBQUEsR0FBQUgsQ0FBQSxDQUFBSSxjQUFBLEVBQUFDLENBQUEsR0FBQUosTUFBQSxDQUFBSyxjQUFBLGNBQUFQLENBQUEsRUFBQUQsQ0FBQSxFQUFBRSxDQUFBLElBQUFELENBQUEsQ0FBQUQsQ0FBQSxJQUFBRSxDQUFBLENBQUFPLEtBQUEsS0FBQUMsQ0FBQSx3QkFBQUMsTUFBQSxHQUFBQSxNQUFBLE9BQUFDLENBQUEsR0FBQUYsQ0FBQSxDQUFBRyxRQUFBLGtCQUFBQyxDQUFBLEdBQUFKLENBQUEsQ0FBQUssYUFBQSx1QkFBQUMsQ0FBQSxHQUFBTixDQUFBLENBQUFPLFdBQUEsOEJBQUFDLE9BQUFqQixDQUFBLEVBQUFELENBQUEsRUFBQUUsQ0FBQSxXQUFBQyxNQUFBLENBQUFLLGNBQUEsQ0FBQVAsQ0FBQSxFQUFBRCxDQUFBLElBQUFTLEtBQUEsRUFBQVAsQ0FBQSxFQUFBaUIsVUFBQSxNQUFBQyxZQUFBLE1BQUFDLFFBQUEsU0FBQXBCLENBQUEsQ0FBQUQsQ0FBQSxXQUFBa0IsTUFBQSxtQkFBQWpCLENBQUEsSUFBQWlCLE1BQUEsWUFBQUEsT0FBQWpCLENBQUEsRUFBQUQsQ0FBQSxFQUFBRSxDQUFBLFdBQUFELENBQUEsQ0FBQUQsQ0FBQSxJQUFBRSxDQUFBLGdCQUFBb0IsS0FBQXJCLENBQUEsRUFBQUQsQ0FBQSxFQUFBRSxDQUFBLEVBQUFHLENBQUEsUUFBQUssQ0FBQSxHQUFBVixDQUFBLElBQUFB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dkIsUUFBUSxHQUFHdE8sTUFBTSxDQUFDcU8sTUFBTSxDQUFDLFNBQVN1dkIsWUFBWUEsQ0FBQ0MsVUFBVSxFQUFFalYsV0FBVyxFQUFFO0lBQzVFLE9BQU8sU0FBU2tWLFNBQVNBLENBQUNwbkIsS0FBSyxFQUFXO01BQUEsU0FBQXFuQixNQUFBLEdBQUFoM0IsU0FBQSxDQUFBcEMsTUFBQSxFQUFObUMsSUFBSSxPQUFBVyxLQUFBLENBQUFzMkIsTUFBQSxPQUFBQSxNQUFBLFdBQUFDLE1BQUEsTUFBQUEsTUFBQSxHQUFBRCxNQUFBLEVBQUFDLE1BQUE7UUFBSmwzQixJQUFJLENBQUFrM0IsTUFBQSxRQUFBajNCLFNBQUEsQ0FBQWkzQixNQUFBO01BQUE7TUFDdEMsT0FBT0gsVUFBVSxDQUFBNzJCLEtBQUEsVUFBQzYxQixnQkFBZ0IsQ0FBQ2pVLFdBQVcsR0FBR0EsV0FBVyxDQUFBNWhCLEtBQUEsVUFBQzBQLEtBQUssRUFBQS9ILE1BQUEsQ0FBSzdILElBQUksRUFBQyxHQUFHNFAsS0FBSyxFQUFFb21CLFVBQVUsQ0FBQyxFQUFBbnVCLE1BQUEsQ0FBSzdILElBQUksRUFBQztJQUM3RyxDQUFDO0VBQ0gsQ0FBQyxFQUFFO0lBQ0QwRyxRQUFRLEVBQVJBO0VBQ0YsQ0FBQyxDQUFDO0VBQ0YsT0FBT3hOLE1BQU0sQ0FBQ3FPLE1BQU0sQ0FBQ2t2QixlQUFlLEVBQUU7SUFDcEN6VCxNQUFNLEVBQU5BLE1BQU07SUFDTnhiLFFBQVEsRUFBUkE7RUFDRixDQUFDLENBQUM7QUFDSjs7QUFFQTtBQUNBLFNBQVMrQixzQkFBc0JBLENBQUNvakIsSUFBSSxFQUFFO0VBQ3BDLHdDQUFBOWtCLE1BQUEsQ0FBd0M4a0IsSUFBSSx1REFBQTlrQixNQUFBLENBQW9EOGtCLElBQUk7QUFDdEciLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaW5zdGluY3RodWJcXGNvZGVfcHJvamVjdHNcXG5wbVxcaW5zdGluY3RodWItcmVhY3QtdWlcXG5vZGVfbW9kdWxlc1xcQHJlZHV4anNcXHRvb2xraXRcXGRpc3RcXHJlZHV4LXRvb2xraXQubW9kZXJuLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvaW5kZXgudHNcbmV4cG9ydCAqIGZyb20gXCJyZWR1eFwiO1xuaW1wb3J0IHsgcHJvZHVjZSwgY3VycmVudCBhcyBjdXJyZW50MywgZnJlZXplLCBvcmlnaW5hbCBhcyBvcmlnaW5hbDIsIGlzRHJhZnQgYXMgaXNEcmFmdDUgfSBmcm9tIFwiaW1tZXJcIjtcbmltcG9ydCB7IGNyZWF0ZVNlbGVjdG9yLCBjcmVhdGVTZWxlY3RvckNyZWF0b3IgYXMgY3JlYXRlU2VsZWN0b3JDcmVhdG9yMiwgbHJ1TWVtb2l6ZSwgd2Vha01hcE1lbW9pemUgYXMgd2Vha01hcE1lbW9pemUyIH0gZnJvbSBcInJlc2VsZWN0XCI7XG5cbi8vIHNyYy9jcmVhdGVEcmFmdFNhZmVTZWxlY3Rvci50c1xuaW1wb3J0IHsgY3VycmVudCwgaXNEcmFmdCB9IGZyb20gXCJpbW1lclwiO1xuaW1wb3J0IHsgY3JlYXRlU2VsZWN0b3JDcmVhdG9yLCB3ZWFrTWFwTWVtb2l6ZSB9IGZyb20gXCJyZXNlbGVjdFwiO1xudmFyIGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yQ3JlYXRvciA9ICguLi5hcmdzKSA9PiB7XG4gIGNvbnN0IGNyZWF0ZVNlbGVjdG9yMiA9IGNyZWF0ZVNlbGVjdG9yQ3JlYXRvciguLi5hcmdzKTtcbiAgY29uc3QgY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3IyID0gT2JqZWN0LmFzc2lnbigoLi4uYXJnczIpID0+IHtcbiAgICBjb25zdCBzZWxlY3RvciA9IGNyZWF0ZVNlbGVjdG9yMiguLi5hcmdzMik7XG4gICAgY29uc3Qgd3JhcHBlZFNlbGVjdG9yID0gKHZhbHVlLCAuLi5yZXN0KSA9PiBzZWxlY3Rvcihpc0RyYWZ0KHZhbHVlKSA/IGN1cnJlbnQodmFsdWUpIDogdmFsdWUsIC4uLnJlc3QpO1xuICAgIE9iamVjdC5hc3NpZ24od3JhcHBlZFNlbGVjdG9yLCBzZWxlY3Rvcik7XG4gICAgcmV0dXJuIHdyYXBwZWRTZWxlY3RvcjtcbiAgfSwge1xuICAgIHdpdGhUeXBlczogKCkgPT4gY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3IyXG4gIH0pO1xuICByZXR1cm4gY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3IyO1xufTtcbnZhciBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvciA9IC8qIEBfX1BVUkVfXyAqLyBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvckNyZWF0b3Iod2Vha01hcE1lbW9pemUpO1xuXG4vLyBzcmMvY29uZmlndXJlU3RvcmUudHNcbmltcG9ydCB7IGFwcGx5TWlkZGxld2FyZSwgY3JlYXRlU3RvcmUsIGNvbXBvc2UgYXMgY29tcG9zZTIsIGNvbWJpbmVSZWR1Y2VycywgaXNQbGFpbk9iamVjdCBhcyBpc1BsYWluT2JqZWN0MiB9IGZyb20gXCJyZWR1eFwiO1xuXG4vLyBzcmMvZGV2dG9vbHNFeHRlbnNpb24udHNcbmltcG9ydCB7IGNvbXBvc2UgfSBmcm9tIFwicmVkdXhcIjtcbnZhciBjb21wb3NlV2l0aERldlRvb2xzID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fQ09NUE9TRV9fID8gd2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX0NPTVBPU0VfXyA6IGZ1bmN0aW9uKCkge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHZvaWQgMDtcbiAgaWYgKHR5cGVvZiBhcmd1bWVudHNbMF0gPT09IFwib2JqZWN0XCIpIHJldHVybiBjb21wb3NlO1xuICByZXR1cm4gY29tcG9zZS5hcHBseShudWxsLCBhcmd1bWVudHMpO1xufTtcbnZhciBkZXZUb29sc0VuaGFuY2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fXyA/IHdpbmRvdy5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9fIDogZnVuY3Rpb24oKSB7XG4gIHJldHVybiBmdW5jdGlvbihub29wMykge1xuICAgIHJldHVybiBub29wMztcbiAgfTtcbn07XG5cbi8vIHNyYy9nZXREZWZhdWx0TWlkZGxld2FyZS50c1xuaW1wb3J0IHsgdGh1bmsgYXMgdGh1bmtNaWRkbGV3YXJlLCB3aXRoRXh0cmFBcmd1bWVudCB9IGZyb20gXCJyZWR1eC10aHVua1wiO1xuXG4vLyBzcmMvY3JlYXRlQWN0aW9uLnRzXG5pbXBvcnQgeyBpc0FjdGlvbiB9IGZyb20gXCJyZWR1eFwiO1xuXG4vLyBzcmMvdHNIZWxwZXJzLnRzXG52YXIgaGFzTWF0Y2hGdW5jdGlvbiA9ICh2KSA9PiB7XG4gIHJldHVybiB2ICYmIHR5cGVvZiB2Lm1hdGNoID09PSBcImZ1bmN0aW9uXCI7XG59O1xuXG4vLyBzcmMvY3JlYXRlQWN0aW9uLnRzXG5mdW5jdGlvbiBjcmVhdGVBY3Rpb24odHlwZSwgcHJlcGFyZUFjdGlvbikge1xuICBmdW5jdGlvbiBhY3Rpb25DcmVhdG9yKC4uLmFyZ3MpIHtcbiAgICBpZiAocHJlcGFyZUFjdGlvbikge1xuICAgICAgbGV0IHByZXBhcmVkID0gcHJlcGFyZUFjdGlvbiguLi5hcmdzKTtcbiAgICAgIGlmICghcHJlcGFyZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMCkgOiBcInByZXBhcmVBY3Rpb24gZGlkIG5vdCByZXR1cm4gYW4gb2JqZWN0XCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZSxcbiAgICAgICAgcGF5bG9hZDogcHJlcGFyZWQucGF5bG9hZCxcbiAgICAgICAgLi4uXCJtZXRhXCIgaW4gcHJlcGFyZWQgJiYge1xuICAgICAgICAgIG1ldGE6IHByZXBhcmVkLm1ldGFcbiAgICAgICAgfSxcbiAgICAgICAgLi4uXCJlcnJvclwiIGluIHByZXBhcmVkICYmIHtcbiAgICAgICAgICBlcnJvcjogcHJlcGFyZWQuZXJyb3JcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGUsXG4gICAgICBwYXlsb2FkOiBhcmdzWzBdXG4gICAgfTtcbiAgfVxuICBhY3Rpb25DcmVhdG9yLnRvU3RyaW5nID0gKCkgPT4gYCR7dHlwZX1gO1xuICBhY3Rpb25DcmVhdG9yLnR5cGUgPSB0eXBlO1xuICBhY3Rpb25DcmVhdG9yLm1hdGNoID0gKGFjdGlvbikgPT4gaXNBY3Rpb24oYWN0aW9uKSAmJiBhY3Rpb24udHlwZSA9PT0gdHlwZTtcbiAgcmV0dXJuIGFjdGlvbkNyZWF0b3I7XG59XG5mdW5jdGlvbiBpc0FjdGlvbkNyZWF0b3IoYWN0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgYWN0aW9uID09PSBcImZ1bmN0aW9uXCIgJiYgXCJ0eXBlXCIgaW4gYWN0aW9uICYmIC8vIGhhc01hdGNoRnVuY3Rpb24gb25seSB3YW50cyBNYXRjaGVycyBidXQgSSBkb24ndCBzZWUgdGhlIHBvaW50IGluIHJld3JpdGluZyBpdFxuICBoYXNNYXRjaEZ1bmN0aW9uKGFjdGlvbik7XG59XG5mdW5jdGlvbiBpc0ZTQShhY3Rpb24pIHtcbiAgcmV0dXJuIGlzQWN0aW9uKGFjdGlvbikgJiYgT2JqZWN0LmtleXMoYWN0aW9uKS5ldmVyeShpc1ZhbGlkS2V5KTtcbn1cbmZ1bmN0aW9uIGlzVmFsaWRLZXkoa2V5KSB7XG4gIHJldHVybiBbXCJ0eXBlXCIsIFwicGF5bG9hZFwiLCBcImVycm9yXCIsIFwibWV0YVwiXS5pbmRleE9mKGtleSkgPiAtMTtcbn1cblxuLy8gc3JjL2FjdGlvbkNyZWF0b3JJbnZhcmlhbnRNaWRkbGV3YXJlLnRzXG5mdW5jdGlvbiBnZXRNZXNzYWdlKHR5cGUpIHtcbiAgY29uc3Qgc3BsaXRUeXBlID0gdHlwZSA/IGAke3R5cGV9YC5zcGxpdChcIi9cIikgOiBbXTtcbiAgY29uc3QgYWN0aW9uTmFtZSA9IHNwbGl0VHlwZVtzcGxpdFR5cGUubGVuZ3RoIC0gMV0gfHwgXCJhY3Rpb25DcmVhdG9yXCI7XG4gIHJldHVybiBgRGV0ZWN0ZWQgYW4gYWN0aW9uIGNyZWF0b3Igd2l0aCB0eXBlIFwiJHt0eXBlIHx8IFwidW5rbm93blwifVwiIGJlaW5nIGRpc3BhdGNoZWQuIFxuTWFrZSBzdXJlIHlvdSdyZSBjYWxsaW5nIHRoZSBhY3Rpb24gY3JlYXRvciBiZWZvcmUgZGlzcGF0Y2hpbmcsIGkuZS4gXFxgZGlzcGF0Y2goJHthY3Rpb25OYW1lfSgpKVxcYCBpbnN0ZWFkIG9mIFxcYGRpc3BhdGNoKCR7YWN0aW9uTmFtZX0pXFxgLiBUaGlzIGlzIG5lY2Vzc2FyeSBldmVuIGlmIHRoZSBhY3Rpb24gaGFzIG5vIHBheWxvYWQuYDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUFjdGlvbkNyZWF0b3JJbnZhcmlhbnRNaWRkbGV3YXJlKG9wdGlvbnMgPSB7fSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgcmV0dXJuICgpID0+IChuZXh0KSA9PiAoYWN0aW9uKSA9PiBuZXh0KGFjdGlvbik7XG4gIH1cbiAgY29uc3Qge1xuICAgIGlzQWN0aW9uQ3JlYXRvcjogaXNBY3Rpb25DcmVhdG9yMiA9IGlzQWN0aW9uQ3JlYXRvclxuICB9ID0gb3B0aW9ucztcbiAgcmV0dXJuICgpID0+IChuZXh0KSA9PiAoYWN0aW9uKSA9PiB7XG4gICAgaWYgKGlzQWN0aW9uQ3JlYXRvcjIoYWN0aW9uKSkge1xuICAgICAgY29uc29sZS53YXJuKGdldE1lc3NhZ2UoYWN0aW9uLnR5cGUpKTtcbiAgICB9XG4gICAgcmV0dXJuIG5leHQoYWN0aW9uKTtcbiAgfTtcbn1cblxuLy8gc3JjL3V0aWxzLnRzXG5pbXBvcnQgeyBwcm9kdWNlIGFzIGNyZWF0ZU5leHRTdGF0ZSwgaXNEcmFmdGFibGUgfSBmcm9tIFwiaW1tZXJcIjtcbmZ1bmN0aW9uIGdldFRpbWVNZWFzdXJlVXRpbHMobWF4RGVsYXksIGZuTmFtZSkge1xuICBsZXQgZWxhcHNlZCA9IDA7XG4gIHJldHVybiB7XG4gICAgbWVhc3VyZVRpbWUoZm4pIHtcbiAgICAgIGNvbnN0IHN0YXJ0ZWQgPSBEYXRlLm5vdygpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGZuKCk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBjb25zdCBmaW5pc2hlZCA9IERhdGUubm93KCk7XG4gICAgICAgIGVsYXBzZWQgKz0gZmluaXNoZWQgLSBzdGFydGVkO1xuICAgICAgfVxuICAgIH0sXG4gICAgd2FybklmRXhjZWVkZWQoKSB7XG4gICAgICBpZiAoZWxhcHNlZCA+IG1heERlbGF5KSB7XG4gICAgICAgIGNvbnNvbGUud2FybihgJHtmbk5hbWV9IHRvb2sgJHtlbGFwc2VkfW1zLCB3aGljaCBpcyBtb3JlIHRoYW4gdGhlIHdhcm5pbmcgdGhyZXNob2xkIG9mICR7bWF4RGVsYXl9bXMuIFxuSWYgeW91ciBzdGF0ZSBvciBhY3Rpb25zIGFyZSB2ZXJ5IGxhcmdlLCB5b3UgbWF5IHdhbnQgdG8gZGlzYWJsZSB0aGUgbWlkZGxld2FyZSBhcyBpdCBtaWdodCBjYXVzZSB0b28gbXVjaCBvZiBhIHNsb3dkb3duIGluIGRldmVsb3BtZW50IG1vZGUuIFNlZSBodHRwczovL3JlZHV4LXRvb2xraXQuanMub3JnL2FwaS9nZXREZWZhdWx0TWlkZGxld2FyZSBmb3IgaW5zdHJ1Y3Rpb25zLlxuSXQgaXMgZGlzYWJsZWQgaW4gcHJvZHVjdGlvbiBidWlsZHMsIHNvIHlvdSBkb24ndCBuZWVkIHRvIHdvcnJ5IGFib3V0IHRoYXQuYCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxudmFyIFR1cGxlID0gY2xhc3MgX1R1cGxlIGV4dGVuZHMgQXJyYXkge1xuICBjb25zdHJ1Y3RvciguLi5pdGVtcykge1xuICAgIHN1cGVyKC4uLml0ZW1zKTtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgX1R1cGxlLnByb3RvdHlwZSk7XG4gIH1cbiAgc3RhdGljIGdldCBbU3ltYm9sLnNwZWNpZXNdKCkge1xuICAgIHJldHVybiBfVHVwbGU7XG4gIH1cbiAgY29uY2F0KC4uLmFycikge1xuICAgIHJldHVybiBzdXBlci5jb25jYXQuYXBwbHkodGhpcywgYXJyKTtcbiAgfVxuICBwcmVwZW5kKC4uLmFycikge1xuICAgIGlmIChhcnIubGVuZ3RoID09PSAxICYmIEFycmF5LmlzQXJyYXkoYXJyWzBdKSkge1xuICAgICAgcmV0dXJuIG5ldyBfVHVwbGUoLi4uYXJyWzBdLmNvbmNhdCh0aGlzKSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgX1R1cGxlKC4uLmFyci5jb25jYXQodGhpcykpO1xuICB9XG59O1xuZnVuY3Rpb24gZnJlZXplRHJhZnRhYmxlKHZhbCkge1xuICByZXR1cm4gaXNEcmFmdGFibGUodmFsKSA/IGNyZWF0ZU5leHRTdGF0ZSh2YWwsICgpID0+IHtcbiAgfSkgOiB2YWw7XG59XG5mdW5jdGlvbiBnZXRPckluc2VydENvbXB1dGVkKG1hcCwga2V5LCBjb21wdXRlKSB7XG4gIGlmIChtYXAuaGFzKGtleSkpIHJldHVybiBtYXAuZ2V0KGtleSk7XG4gIHJldHVybiBtYXAuc2V0KGtleSwgY29tcHV0ZShrZXkpKS5nZXQoa2V5KTtcbn1cblxuLy8gc3JjL2ltbXV0YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZS50c1xuZnVuY3Rpb24gaXNJbW11dGFibGVEZWZhdWx0KHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgIT09IFwib2JqZWN0XCIgfHwgdmFsdWUgPT0gbnVsbCB8fCBPYmplY3QuaXNGcm96ZW4odmFsdWUpO1xufVxuZnVuY3Rpb24gdHJhY2tGb3JNdXRhdGlvbnMoaXNJbW11dGFibGUsIGlnbm9yZVBhdGhzLCBvYmopIHtcbiAgY29uc3QgdHJhY2tlZFByb3BlcnRpZXMgPSB0cmFja1Byb3BlcnRpZXMoaXNJbW11dGFibGUsIGlnbm9yZVBhdGhzLCBvYmopO1xuICByZXR1cm4ge1xuICAgIGRldGVjdE11dGF0aW9ucygpIHtcbiAgICAgIHJldHVybiBkZXRlY3RNdXRhdGlvbnMoaXNJbW11dGFibGUsIGlnbm9yZVBhdGhzLCB0cmFja2VkUHJvcGVydGllcywgb2JqKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiB0cmFja1Byb3BlcnRpZXMoaXNJbW11dGFibGUsIGlnbm9yZVBhdGhzID0gW10sIG9iaiwgcGF0aCA9IFwiXCIsIGNoZWNrZWRPYmplY3RzID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKSkge1xuICBjb25zdCB0cmFja2VkID0ge1xuICAgIHZhbHVlOiBvYmpcbiAgfTtcbiAgaWYgKCFpc0ltbXV0YWJsZShvYmopICYmICFjaGVja2VkT2JqZWN0cy5oYXMob2JqKSkge1xuICAgIGNoZWNrZWRPYmplY3RzLmFkZChvYmopO1xuICAgIHRyYWNrZWQuY2hpbGRyZW4gPSB7fTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBvYmopIHtcbiAgICAgIGNvbnN0IGNoaWxkUGF0aCA9IHBhdGggPyBwYXRoICsgXCIuXCIgKyBrZXkgOiBrZXk7XG4gICAgICBpZiAoaWdub3JlUGF0aHMubGVuZ3RoICYmIGlnbm9yZVBhdGhzLmluZGV4T2YoY2hpbGRQYXRoKSAhPT0gLTEpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB0cmFja2VkLmNoaWxkcmVuW2tleV0gPSB0cmFja1Byb3BlcnRpZXMoaXNJbW11dGFibGUsIGlnbm9yZVBhdGhzLCBvYmpba2V5XSwgY2hpbGRQYXRoKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRyYWNrZWQ7XG59XG5mdW5jdGlvbiBkZXRlY3RNdXRhdGlvbnMoaXNJbW11dGFibGUsIGlnbm9yZWRQYXRocyA9IFtdLCB0cmFja2VkUHJvcGVydHksIG9iaiwgc2FtZVBhcmVudFJlZiA9IGZhbHNlLCBwYXRoID0gXCJcIikge1xuICBjb25zdCBwcmV2T2JqID0gdHJhY2tlZFByb3BlcnR5ID8gdHJhY2tlZFByb3BlcnR5LnZhbHVlIDogdm9pZCAwO1xuICBjb25zdCBzYW1lUmVmID0gcHJldk9iaiA9PT0gb2JqO1xuICBpZiAoc2FtZVBhcmVudFJlZiAmJiAhc2FtZVJlZiAmJiAhTnVtYmVyLmlzTmFOKG9iaikpIHtcbiAgICByZXR1cm4ge1xuICAgICAgd2FzTXV0YXRlZDogdHJ1ZSxcbiAgICAgIHBhdGhcbiAgICB9O1xuICB9XG4gIGlmIChpc0ltbXV0YWJsZShwcmV2T2JqKSB8fCBpc0ltbXV0YWJsZShvYmopKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdhc011dGF0ZWQ6IGZhbHNlXG4gICAgfTtcbiAgfVxuICBjb25zdCBrZXlzVG9EZXRlY3QgPSB7fTtcbiAgZm9yIChsZXQga2V5IGluIHRyYWNrZWRQcm9wZXJ0eS5jaGlsZHJlbikge1xuICAgIGtleXNUb0RldGVjdFtrZXldID0gdHJ1ZTtcbiAgfVxuICBmb3IgKGxldCBrZXkgaW4gb2JqKSB7XG4gICAga2V5c1RvRGV0ZWN0W2tleV0gPSB0cnVlO1xuICB9XG4gIGNvbnN0IGhhc0lnbm9yZWRQYXRocyA9IGlnbm9yZWRQYXRocy5sZW5ndGggPiAwO1xuICBmb3IgKGxldCBrZXkgaW4ga2V5c1RvRGV0ZWN0KSB7XG4gICAgY29uc3QgbmVzdGVkUGF0aCA9IHBhdGggPyBwYXRoICsgXCIuXCIgKyBrZXkgOiBrZXk7XG4gICAgaWYgKGhhc0lnbm9yZWRQYXRocykge1xuICAgICAgY29uc3QgaGFzTWF0Y2hlcyA9IGlnbm9yZWRQYXRocy5zb21lKChpZ25vcmVkKSA9PiB7XG4gICAgICAgIGlmIChpZ25vcmVkIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICAgICAgcmV0dXJuIGlnbm9yZWQudGVzdChuZXN0ZWRQYXRoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmVzdGVkUGF0aCA9PT0gaWdub3JlZDtcbiAgICAgIH0pO1xuICAgICAgaWYgKGhhc01hdGNoZXMpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IGRldGVjdE11dGF0aW9ucyhpc0ltbXV0YWJsZSwgaWdub3JlZFBhdGhzLCB0cmFja2VkUHJvcGVydHkuY2hpbGRyZW5ba2V5XSwgb2JqW2tleV0sIHNhbWVSZWYsIG5lc3RlZFBhdGgpO1xuICAgIGlmIChyZXN1bHQud2FzTXV0YXRlZCkge1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB3YXNNdXRhdGVkOiBmYWxzZVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlSW1tdXRhYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlKG9wdGlvbnMgPSB7fSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgcmV0dXJuICgpID0+IChuZXh0KSA9PiAoYWN0aW9uKSA9PiBuZXh0KGFjdGlvbik7XG4gIH0gZWxzZSB7XG4gICAgbGV0IHN0cmluZ2lmeTIgPSBmdW5jdGlvbihvYmosIHNlcmlhbGl6ZXIsIGluZGVudCwgZGVjeWNsZXIpIHtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShvYmosIGdldFNlcmlhbGl6ZTIoc2VyaWFsaXplciwgZGVjeWNsZXIpLCBpbmRlbnQpO1xuICAgIH0sIGdldFNlcmlhbGl6ZTIgPSBmdW5jdGlvbihzZXJpYWxpemVyLCBkZWN5Y2xlcikge1xuICAgICAgbGV0IHN0YWNrID0gW10sIGtleXMgPSBbXTtcbiAgICAgIGlmICghZGVjeWNsZXIpIGRlY3ljbGVyID0gZnVuY3Rpb24oXywgdmFsdWUpIHtcbiAgICAgICAgaWYgKHN0YWNrWzBdID09PSB2YWx1ZSkgcmV0dXJuIFwiW0NpcmN1bGFyIH5dXCI7XG4gICAgICAgIHJldHVybiBcIltDaXJjdWxhciB+LlwiICsga2V5cy5zbGljZSgwLCBzdGFjay5pbmRleE9mKHZhbHVlKSkuam9pbihcIi5cIikgKyBcIl1cIjtcbiAgICAgIH07XG4gICAgICByZXR1cm4gZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAoc3RhY2subGVuZ3RoID4gMCkge1xuICAgICAgICAgIHZhciB0aGlzUG9zID0gc3RhY2suaW5kZXhPZih0aGlzKTtcbiAgICAgICAgICB+dGhpc1BvcyA/IHN0YWNrLnNwbGljZSh0aGlzUG9zICsgMSkgOiBzdGFjay5wdXNoKHRoaXMpO1xuICAgICAgICAgIH50aGlzUG9zID8ga2V5cy5zcGxpY2UodGhpc1BvcywgSW5maW5pdHksIGtleSkgOiBrZXlzLnB1c2goa2V5KTtcbiAgICAgICAgICBpZiAofnN0YWNrLmluZGV4T2YodmFsdWUpKSB2YWx1ZSA9IGRlY3ljbGVyLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSBzdGFjay5wdXNoKHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZXIgPT0gbnVsbCA/IHZhbHVlIDogc2VyaWFsaXplci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgfTtcbiAgICB9O1xuICAgIHZhciBzdHJpbmdpZnkgPSBzdHJpbmdpZnkyLCBnZXRTZXJpYWxpemUgPSBnZXRTZXJpYWxpemUyO1xuICAgIGxldCB7XG4gICAgICBpc0ltbXV0YWJsZSA9IGlzSW1tdXRhYmxlRGVmYXVsdCxcbiAgICAgIGlnbm9yZWRQYXRocyxcbiAgICAgIHdhcm5BZnRlciA9IDMyXG4gICAgfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgdHJhY2sgPSB0cmFja0Zvck11dGF0aW9ucy5iaW5kKG51bGwsIGlzSW1tdXRhYmxlLCBpZ25vcmVkUGF0aHMpO1xuICAgIHJldHVybiAoe1xuICAgICAgZ2V0U3RhdGVcbiAgICB9KSA9PiB7XG4gICAgICBsZXQgc3RhdGUgPSBnZXRTdGF0ZSgpO1xuICAgICAgbGV0IHRyYWNrZXIgPSB0cmFjayhzdGF0ZSk7XG4gICAgICBsZXQgcmVzdWx0O1xuICAgICAgcmV0dXJuIChuZXh0KSA9PiAoYWN0aW9uKSA9PiB7XG4gICAgICAgIGNvbnN0IG1lYXN1cmVVdGlscyA9IGdldFRpbWVNZWFzdXJlVXRpbHMod2FybkFmdGVyLCBcIkltbXV0YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZVwiKTtcbiAgICAgICAgbWVhc3VyZVV0aWxzLm1lYXN1cmVUaW1lKCgpID0+IHtcbiAgICAgICAgICBzdGF0ZSA9IGdldFN0YXRlKCk7XG4gICAgICAgICAgcmVzdWx0ID0gdHJhY2tlci5kZXRlY3RNdXRhdGlvbnMoKTtcbiAgICAgICAgICB0cmFja2VyID0gdHJhY2soc3RhdGUpO1xuICAgICAgICAgIGlmIChyZXN1bHQud2FzTXV0YXRlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTkpIDogYEEgc3RhdGUgbXV0YXRpb24gd2FzIGRldGVjdGVkIGJldHdlZW4gZGlzcGF0Y2hlcywgaW4gdGhlIHBhdGggJyR7cmVzdWx0LnBhdGggfHwgXCJcIn0nLiAgVGhpcyBtYXkgY2F1c2UgaW5jb3JyZWN0IGJlaGF2aW9yLiAoaHR0cHM6Ly9yZWR1eC5qcy5vcmcvc3R5bGUtZ3VpZGUvc3R5bGUtZ3VpZGUjZG8tbm90LW11dGF0ZS1zdGF0ZSlgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBkaXNwYXRjaGVkQWN0aW9uID0gbmV4dChhY3Rpb24pO1xuICAgICAgICBtZWFzdXJlVXRpbHMubWVhc3VyZVRpbWUoKCkgPT4ge1xuICAgICAgICAgIHN0YXRlID0gZ2V0U3RhdGUoKTtcbiAgICAgICAgICByZXN1bHQgPSB0cmFja2VyLmRldGVjdE11dGF0aW9ucygpO1xuICAgICAgICAgIHRyYWNrZXIgPSB0cmFjayhzdGF0ZSk7XG4gICAgICAgICAgaWYgKHJlc3VsdC53YXNNdXRhdGVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgyMCkgOiBgQSBzdGF0ZSBtdXRhdGlvbiB3YXMgZGV0ZWN0ZWQgaW5zaWRlIGEgZGlzcGF0Y2gsIGluIHRoZSBwYXRoOiAke3Jlc3VsdC5wYXRoIHx8IFwiXCJ9LiBUYWtlIGEgbG9vayBhdCB0aGUgcmVkdWNlcihzKSBoYW5kbGluZyB0aGUgYWN0aW9uICR7c3RyaW5naWZ5MihhY3Rpb24pfS4gKGh0dHBzOi8vcmVkdXguanMub3JnL3N0eWxlLWd1aWRlL3N0eWxlLWd1aWRlI2RvLW5vdC1tdXRhdGUtc3RhdGUpYCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgbWVhc3VyZVV0aWxzLndhcm5JZkV4Y2VlZGVkKCk7XG4gICAgICAgIHJldHVybiBkaXNwYXRjaGVkQWN0aW9uO1xuICAgICAgfTtcbiAgICB9O1xuICB9XG59XG5cbi8vIHNyYy9zZXJpYWxpemFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUudHNcbmltcG9ydCB7IGlzQWN0aW9uIGFzIGlzQWN0aW9uMiwgaXNQbGFpbk9iamVjdCB9IGZyb20gXCJyZWR1eFwiO1xuZnVuY3Rpb24gaXNQbGFpbih2YWwpIHtcbiAgY29uc3QgdHlwZSA9IHR5cGVvZiB2YWw7XG4gIHJldHVybiB2YWwgPT0gbnVsbCB8fCB0eXBlID09PSBcInN0cmluZ1wiIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiIHx8IHR5cGUgPT09IFwibnVtYmVyXCIgfHwgQXJyYXkuaXNBcnJheSh2YWwpIHx8IGlzUGxhaW5PYmplY3QodmFsKTtcbn1cbmZ1bmN0aW9uIGZpbmROb25TZXJpYWxpemFibGVWYWx1ZSh2YWx1ZSwgcGF0aCA9IFwiXCIsIGlzU2VyaWFsaXphYmxlID0gaXNQbGFpbiwgZ2V0RW50cmllcywgaWdub3JlZFBhdGhzID0gW10sIGNhY2hlKSB7XG4gIGxldCBmb3VuZE5lc3RlZFNlcmlhbGl6YWJsZTtcbiAgaWYgKCFpc1NlcmlhbGl6YWJsZSh2YWx1ZSkpIHtcbiAgICByZXR1cm4ge1xuICAgICAga2V5UGF0aDogcGF0aCB8fCBcIjxyb290PlwiLFxuICAgICAgdmFsdWVcbiAgICB9O1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwib2JqZWN0XCIgfHwgdmFsdWUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGNhY2hlPy5oYXModmFsdWUpKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IGVudHJpZXMgPSBnZXRFbnRyaWVzICE9IG51bGwgPyBnZXRFbnRyaWVzKHZhbHVlKSA6IE9iamVjdC5lbnRyaWVzKHZhbHVlKTtcbiAgY29uc3QgaGFzSWdub3JlZFBhdGhzID0gaWdub3JlZFBhdGhzLmxlbmd0aCA+IDA7XG4gIGZvciAoY29uc3QgW2tleSwgbmVzdGVkVmFsdWVdIG9mIGVudHJpZXMpIHtcbiAgICBjb25zdCBuZXN0ZWRQYXRoID0gcGF0aCA/IHBhdGggKyBcIi5cIiArIGtleSA6IGtleTtcbiAgICBpZiAoaGFzSWdub3JlZFBhdGhzKSB7XG4gICAgICBjb25zdCBoYXNNYXRjaGVzID0gaWdub3JlZFBhdGhzLnNvbWUoKGlnbm9yZWQpID0+IHtcbiAgICAgICAgaWYgKGlnbm9yZWQgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgICAgICByZXR1cm4gaWdub3JlZC50ZXN0KG5lc3RlZFBhdGgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXN0ZWRQYXRoID09PSBpZ25vcmVkO1xuICAgICAgfSk7XG4gICAgICBpZiAoaGFzTWF0Y2hlcykge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFpc1NlcmlhbGl6YWJsZShuZXN0ZWRWYWx1ZSkpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGtleVBhdGg6IG5lc3RlZFBhdGgsXG4gICAgICAgIHZhbHVlOiBuZXN0ZWRWYWx1ZVxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBuZXN0ZWRWYWx1ZSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgZm91bmROZXN0ZWRTZXJpYWxpemFibGUgPSBmaW5kTm9uU2VyaWFsaXphYmxlVmFsdWUobmVzdGVkVmFsdWUsIG5lc3RlZFBhdGgsIGlzU2VyaWFsaXphYmxlLCBnZXRFbnRyaWVzLCBpZ25vcmVkUGF0aHMsIGNhY2hlKTtcbiAgICAgIGlmIChmb3VuZE5lc3RlZFNlcmlhbGl6YWJsZSkge1xuICAgICAgICByZXR1cm4gZm91bmROZXN0ZWRTZXJpYWxpemFibGU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChjYWNoZSAmJiBpc05lc3RlZEZyb3plbih2YWx1ZSkpIGNhY2hlLmFkZCh2YWx1ZSk7XG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGlzTmVzdGVkRnJvemVuKHZhbHVlKSB7XG4gIGlmICghT2JqZWN0LmlzRnJvemVuKHZhbHVlKSkgcmV0dXJuIGZhbHNlO1xuICBmb3IgKGNvbnN0IG5lc3RlZFZhbHVlIG9mIE9iamVjdC52YWx1ZXModmFsdWUpKSB7XG4gICAgaWYgKHR5cGVvZiBuZXN0ZWRWYWx1ZSAhPT0gXCJvYmplY3RcIiB8fCBuZXN0ZWRWYWx1ZSA9PT0gbnVsbCkgY29udGludWU7XG4gICAgaWYgKCFpc05lc3RlZEZyb3plbihuZXN0ZWRWYWx1ZSkpIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVNlcmlhbGl6YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZShvcHRpb25zID0ge30pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIikge1xuICAgIHJldHVybiAoKSA9PiAobmV4dCkgPT4gKGFjdGlvbikgPT4gbmV4dChhY3Rpb24pO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHtcbiAgICAgIGlzU2VyaWFsaXphYmxlID0gaXNQbGFpbixcbiAgICAgIGdldEVudHJpZXMsXG4gICAgICBpZ25vcmVkQWN0aW9ucyA9IFtdLFxuICAgICAgaWdub3JlZEFjdGlvblBhdGhzID0gW1wibWV0YS5hcmdcIiwgXCJtZXRhLmJhc2VRdWVyeU1ldGFcIl0sXG4gICAgICBpZ25vcmVkUGF0aHMgPSBbXSxcbiAgICAgIHdhcm5BZnRlciA9IDMyLFxuICAgICAgaWdub3JlU3RhdGUgPSBmYWxzZSxcbiAgICAgIGlnbm9yZUFjdGlvbnMgPSBmYWxzZSxcbiAgICAgIGRpc2FibGVDYWNoZSA9IGZhbHNlXG4gICAgfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgY2FjaGUgPSAhZGlzYWJsZUNhY2hlICYmIFdlYWtTZXQgPyAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtTZXQoKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gKHN0b3JlQVBJKSA9PiAobmV4dCkgPT4gKGFjdGlvbikgPT4ge1xuICAgICAgaWYgKCFpc0FjdGlvbjIoYWN0aW9uKSkge1xuICAgICAgICByZXR1cm4gbmV4dChhY3Rpb24pO1xuICAgICAgfVxuICAgICAgY29uc3QgcmVzdWx0ID0gbmV4dChhY3Rpb24pO1xuICAgICAgY29uc3QgbWVhc3VyZVV0aWxzID0gZ2V0VGltZU1lYXN1cmVVdGlscyh3YXJuQWZ0ZXIsIFwiU2VyaWFsaXphYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlXCIpO1xuICAgICAgaWYgKCFpZ25vcmVBY3Rpb25zICYmICEoaWdub3JlZEFjdGlvbnMubGVuZ3RoICYmIGlnbm9yZWRBY3Rpb25zLmluZGV4T2YoYWN0aW9uLnR5cGUpICE9PSAtMSkpIHtcbiAgICAgICAgbWVhc3VyZVV0aWxzLm1lYXN1cmVUaW1lKCgpID0+IHtcbiAgICAgICAgICBjb25zdCBmb3VuZEFjdGlvbk5vblNlcmlhbGl6YWJsZVZhbHVlID0gZmluZE5vblNlcmlhbGl6YWJsZVZhbHVlKGFjdGlvbiwgXCJcIiwgaXNTZXJpYWxpemFibGUsIGdldEVudHJpZXMsIGlnbm9yZWRBY3Rpb25QYXRocywgY2FjaGUpO1xuICAgICAgICAgIGlmIChmb3VuZEFjdGlvbk5vblNlcmlhbGl6YWJsZVZhbHVlKSB7XG4gICAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICAgIGtleVBhdGgsXG4gICAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgICB9ID0gZm91bmRBY3Rpb25Ob25TZXJpYWxpemFibGVWYWx1ZTtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEEgbm9uLXNlcmlhbGl6YWJsZSB2YWx1ZSB3YXMgZGV0ZWN0ZWQgaW4gYW4gYWN0aW9uLCBpbiB0aGUgcGF0aDogXFxgJHtrZXlQYXRofVxcYC4gVmFsdWU6YCwgdmFsdWUsIFwiXFxuVGFrZSBhIGxvb2sgYXQgdGhlIGxvZ2ljIHRoYXQgZGlzcGF0Y2hlZCB0aGlzIGFjdGlvbjogXCIsIGFjdGlvbiwgXCJcXG4oU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2ZhcS9hY3Rpb25zI3doeS1zaG91bGQtdHlwZS1iZS1hLXN0cmluZy1vci1hdC1sZWFzdC1zZXJpYWxpemFibGUtd2h5LXNob3VsZC1teS1hY3Rpb24tdHlwZXMtYmUtY29uc3RhbnRzKVwiLCBcIlxcbihUbyBhbGxvdyBub24tc2VyaWFsaXphYmxlIHZhbHVlcyBzZWU6IGh0dHBzOi8vcmVkdXgtdG9vbGtpdC5qcy5vcmcvdXNhZ2UvdXNhZ2UtZ3VpZGUjd29ya2luZy13aXRoLW5vbi1zZXJpYWxpemFibGUtZGF0YSlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmICghaWdub3JlU3RhdGUpIHtcbiAgICAgICAgbWVhc3VyZVV0aWxzLm1lYXN1cmVUaW1lKCgpID0+IHtcbiAgICAgICAgICBjb25zdCBzdGF0ZSA9IHN0b3JlQVBJLmdldFN0YXRlKCk7XG4gICAgICAgICAgY29uc3QgZm91bmRTdGF0ZU5vblNlcmlhbGl6YWJsZVZhbHVlID0gZmluZE5vblNlcmlhbGl6YWJsZVZhbHVlKHN0YXRlLCBcIlwiLCBpc1NlcmlhbGl6YWJsZSwgZ2V0RW50cmllcywgaWdub3JlZFBhdGhzLCBjYWNoZSk7XG4gICAgICAgICAgaWYgKGZvdW5kU3RhdGVOb25TZXJpYWxpemFibGVWYWx1ZSkge1xuICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICBrZXlQYXRoLFxuICAgICAgICAgICAgICB2YWx1ZVxuICAgICAgICAgICAgfSA9IGZvdW5kU3RhdGVOb25TZXJpYWxpemFibGVWYWx1ZTtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEEgbm9uLXNlcmlhbGl6YWJsZSB2YWx1ZSB3YXMgZGV0ZWN0ZWQgaW4gdGhlIHN0YXRlLCBpbiB0aGUgcGF0aDogXFxgJHtrZXlQYXRofVxcYC4gVmFsdWU6YCwgdmFsdWUsIGBcblRha2UgYSBsb29rIGF0IHRoZSByZWR1Y2VyKHMpIGhhbmRsaW5nIHRoaXMgYWN0aW9uIHR5cGU6ICR7YWN0aW9uLnR5cGV9LlxuKFNlZSBodHRwczovL3JlZHV4LmpzLm9yZy9mYXEvb3JnYW5pemluZy1zdGF0ZSNjYW4taS1wdXQtZnVuY3Rpb25zLXByb21pc2VzLW9yLW90aGVyLW5vbi1zZXJpYWxpemFibGUtaXRlbXMtaW4tbXktc3RvcmUtc3RhdGUpYCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgbWVhc3VyZVV0aWxzLndhcm5JZkV4Y2VlZGVkKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gIH1cbn1cblxuLy8gc3JjL2dldERlZmF1bHRNaWRkbGV3YXJlLnRzXG5mdW5jdGlvbiBpc0Jvb2xlYW4oeCkge1xuICByZXR1cm4gdHlwZW9mIHggPT09IFwiYm9vbGVhblwiO1xufVxudmFyIGJ1aWxkR2V0RGVmYXVsdE1pZGRsZXdhcmUgPSAoKSA9PiBmdW5jdGlvbiBnZXREZWZhdWx0TWlkZGxld2FyZShvcHRpb25zKSB7XG4gIGNvbnN0IHtcbiAgICB0aHVuayA9IHRydWUsXG4gICAgaW1tdXRhYmxlQ2hlY2sgPSB0cnVlLFxuICAgIHNlcmlhbGl6YWJsZUNoZWNrID0gdHJ1ZSxcbiAgICBhY3Rpb25DcmVhdG9yQ2hlY2sgPSB0cnVlXG4gIH0gPSBvcHRpb25zID8/IHt9O1xuICBsZXQgbWlkZGxld2FyZUFycmF5ID0gbmV3IFR1cGxlKCk7XG4gIGlmICh0aHVuaykge1xuICAgIGlmIChpc0Jvb2xlYW4odGh1bmspKSB7XG4gICAgICBtaWRkbGV3YXJlQXJyYXkucHVzaCh0aHVua01pZGRsZXdhcmUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBtaWRkbGV3YXJlQXJyYXkucHVzaCh3aXRoRXh0cmFBcmd1bWVudCh0aHVuay5leHRyYUFyZ3VtZW50KSk7XG4gICAgfVxuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBpZiAoaW1tdXRhYmxlQ2hlY2spIHtcbiAgICAgIGxldCBpbW11dGFibGVPcHRpb25zID0ge307XG4gICAgICBpZiAoIWlzQm9vbGVhbihpbW11dGFibGVDaGVjaykpIHtcbiAgICAgICAgaW1tdXRhYmxlT3B0aW9ucyA9IGltbXV0YWJsZUNoZWNrO1xuICAgICAgfVxuICAgICAgbWlkZGxld2FyZUFycmF5LnVuc2hpZnQoY3JlYXRlSW1tdXRhYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlKGltbXV0YWJsZU9wdGlvbnMpKTtcbiAgICB9XG4gICAgaWYgKHNlcmlhbGl6YWJsZUNoZWNrKSB7XG4gICAgICBsZXQgc2VyaWFsaXphYmxlT3B0aW9ucyA9IHt9O1xuICAgICAgaWYgKCFpc0Jvb2xlYW4oc2VyaWFsaXphYmxlQ2hlY2spKSB7XG4gICAgICAgIHNlcmlhbGl6YWJsZU9wdGlvbnMgPSBzZXJpYWxpemFibGVDaGVjaztcbiAgICAgIH1cbiAgICAgIG1pZGRsZXdhcmVBcnJheS5wdXNoKGNyZWF0ZVNlcmlhbGl6YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZShzZXJpYWxpemFibGVPcHRpb25zKSk7XG4gICAgfVxuICAgIGlmIChhY3Rpb25DcmVhdG9yQ2hlY2spIHtcbiAgICAgIGxldCBhY3Rpb25DcmVhdG9yT3B0aW9ucyA9IHt9O1xuICAgICAgaWYgKCFpc0Jvb2xlYW4oYWN0aW9uQ3JlYXRvckNoZWNrKSkge1xuICAgICAgICBhY3Rpb25DcmVhdG9yT3B0aW9ucyA9IGFjdGlvbkNyZWF0b3JDaGVjaztcbiAgICAgIH1cbiAgICAgIG1pZGRsZXdhcmVBcnJheS51bnNoaWZ0KGNyZWF0ZUFjdGlvbkNyZWF0b3JJbnZhcmlhbnRNaWRkbGV3YXJlKGFjdGlvbkNyZWF0b3JPcHRpb25zKSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBtaWRkbGV3YXJlQXJyYXk7XG59O1xuXG4vLyBzcmMvYXV0b0JhdGNoRW5oYW5jZXIudHNcbnZhciBTSE9VTERfQVVUT0JBVENIID0gXCJSVEtfYXV0b0JhdGNoXCI7XG52YXIgcHJlcGFyZUF1dG9CYXRjaGVkID0gKCkgPT4gKHBheWxvYWQpID0+ICh7XG4gIHBheWxvYWQsXG4gIG1ldGE6IHtcbiAgICBbU0hPVUxEX0FVVE9CQVRDSF06IHRydWVcbiAgfVxufSk7XG52YXIgY3JlYXRlUXVldWVXaXRoVGltZXIgPSAodGltZW91dCkgPT4ge1xuICByZXR1cm4gKG5vdGlmeSkgPT4ge1xuICAgIHNldFRpbWVvdXQobm90aWZ5LCB0aW1lb3V0KTtcbiAgfTtcbn07XG52YXIgYXV0b0JhdGNoRW5oYW5jZXIgPSAob3B0aW9ucyA9IHtcbiAgdHlwZTogXCJyYWZcIlxufSkgPT4gKG5leHQpID0+ICguLi5hcmdzKSA9PiB7XG4gIGNvbnN0IHN0b3JlID0gbmV4dCguLi5hcmdzKTtcbiAgbGV0IG5vdGlmeWluZyA9IHRydWU7XG4gIGxldCBzaG91bGROb3RpZnlBdEVuZE9mVGljayA9IGZhbHNlO1xuICBsZXQgbm90aWZpY2F0aW9uUXVldWVkID0gZmFsc2U7XG4gIGNvbnN0IGxpc3RlbmVycyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gIGNvbnN0IHF1ZXVlQ2FsbGJhY2sgPSBvcHRpb25zLnR5cGUgPT09IFwidGlja1wiID8gcXVldWVNaWNyb3Rhc2sgOiBvcHRpb25zLnR5cGUgPT09IFwicmFmXCIgPyAoXG4gICAgLy8gcmVxdWVzdEFuaW1hdGlvbkZyYW1lIHdvbid0IGV4aXN0IGluIFNTUiBlbnZpcm9ubWVudHMuIEZhbGwgYmFjayB0byBhIHZhZ3VlIGFwcHJveGltYXRpb24ganVzdCB0byBrZWVwIGZyb20gZXJyb3JpbmcuXG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID8gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA6IGNyZWF0ZVF1ZXVlV2l0aFRpbWVyKDEwKVxuICApIDogb3B0aW9ucy50eXBlID09PSBcImNhbGxiYWNrXCIgPyBvcHRpb25zLnF1ZXVlTm90aWZpY2F0aW9uIDogY3JlYXRlUXVldWVXaXRoVGltZXIob3B0aW9ucy50aW1lb3V0KTtcbiAgY29uc3Qgbm90aWZ5TGlzdGVuZXJzID0gKCkgPT4ge1xuICAgIG5vdGlmaWNhdGlvblF1ZXVlZCA9IGZhbHNlO1xuICAgIGlmIChzaG91bGROb3RpZnlBdEVuZE9mVGljaykge1xuICAgICAgc2hvdWxkTm90aWZ5QXRFbmRPZlRpY2sgPSBmYWxzZTtcbiAgICAgIGxpc3RlbmVycy5mb3JFYWNoKChsKSA9PiBsKCkpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHN0b3JlLCB7XG4gICAgLy8gT3ZlcnJpZGUgdGhlIGJhc2UgYHN0b3JlLnN1YnNjcmliZWAgbWV0aG9kIHRvIGtlZXAgb3JpZ2luYWwgbGlzdGVuZXJzXG4gICAgLy8gZnJvbSBydW5uaW5nIGlmIHdlJ3JlIGRlbGF5aW5nIG5vdGlmaWNhdGlvbnNcbiAgICBzdWJzY3JpYmUobGlzdGVuZXIyKSB7XG4gICAgICBjb25zdCB3cmFwcGVkTGlzdGVuZXIgPSAoKSA9PiBub3RpZnlpbmcgJiYgbGlzdGVuZXIyKCk7XG4gICAgICBjb25zdCB1bnN1YnNjcmliZSA9IHN0b3JlLnN1YnNjcmliZSh3cmFwcGVkTGlzdGVuZXIpO1xuICAgICAgbGlzdGVuZXJzLmFkZChsaXN0ZW5lcjIpO1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgdW5zdWJzY3JpYmUoKTtcbiAgICAgICAgbGlzdGVuZXJzLmRlbGV0ZShsaXN0ZW5lcjIpO1xuICAgICAgfTtcbiAgICB9LFxuICAgIC8vIE92ZXJyaWRlIHRoZSBiYXNlIGBzdG9yZS5kaXNwYXRjaGAgbWV0aG9kIHNvIHRoYXQgd2UgY2FuIGNoZWNrIGFjdGlvbnNcbiAgICAvLyBmb3IgdGhlIGBzaG91bGRBdXRvQmF0Y2hgIGZsYWcgYW5kIGRldGVybWluZSBpZiBiYXRjaGluZyBpcyBhY3RpdmVcbiAgICBkaXNwYXRjaChhY3Rpb24pIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIG5vdGlmeWluZyA9ICFhY3Rpb24/Lm1ldGE/LltTSE9VTERfQVVUT0JBVENIXTtcbiAgICAgICAgc2hvdWxkTm90aWZ5QXRFbmRPZlRpY2sgPSAhbm90aWZ5aW5nO1xuICAgICAgICBpZiAoc2hvdWxkTm90aWZ5QXRFbmRPZlRpY2spIHtcbiAgICAgICAgICBpZiAoIW5vdGlmaWNhdGlvblF1ZXVlZCkge1xuICAgICAgICAgICAgbm90aWZpY2F0aW9uUXVldWVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHF1ZXVlQ2FsbGJhY2sobm90aWZ5TGlzdGVuZXJzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0b3JlLmRpc3BhdGNoKGFjdGlvbik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBub3RpZnlpbmcgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59O1xuXG4vLyBzcmMvZ2V0RGVmYXVsdEVuaGFuY2Vycy50c1xudmFyIGJ1aWxkR2V0RGVmYXVsdEVuaGFuY2VycyA9IChtaWRkbGV3YXJlRW5oYW5jZXIpID0+IGZ1bmN0aW9uIGdldERlZmF1bHRFbmhhbmNlcnMob3B0aW9ucykge1xuICBjb25zdCB7XG4gICAgYXV0b0JhdGNoID0gdHJ1ZVxuICB9ID0gb3B0aW9ucyA/PyB7fTtcbiAgbGV0IGVuaGFuY2VyQXJyYXkgPSBuZXcgVHVwbGUobWlkZGxld2FyZUVuaGFuY2VyKTtcbiAgaWYgKGF1dG9CYXRjaCkge1xuICAgIGVuaGFuY2VyQXJyYXkucHVzaChhdXRvQmF0Y2hFbmhhbmNlcih0eXBlb2YgYXV0b0JhdGNoID09PSBcIm9iamVjdFwiID8gYXV0b0JhdGNoIDogdm9pZCAwKSk7XG4gIH1cbiAgcmV0dXJuIGVuaGFuY2VyQXJyYXk7XG59O1xuXG4vLyBzcmMvY29uZmlndXJlU3RvcmUudHNcbmZ1bmN0aW9uIGNvbmZpZ3VyZVN0b3JlKG9wdGlvbnMpIHtcbiAgY29uc3QgZ2V0RGVmYXVsdE1pZGRsZXdhcmUgPSBidWlsZEdldERlZmF1bHRNaWRkbGV3YXJlKCk7XG4gIGNvbnN0IHtcbiAgICByZWR1Y2VyID0gdm9pZCAwLFxuICAgIG1pZGRsZXdhcmUsXG4gICAgZGV2VG9vbHMgPSB0cnVlLFxuICAgIHByZWxvYWRlZFN0YXRlID0gdm9pZCAwLFxuICAgIGVuaGFuY2VycyA9IHZvaWQgMFxuICB9ID0gb3B0aW9ucyB8fCB7fTtcbiAgbGV0IHJvb3RSZWR1Y2VyO1xuICBpZiAodHlwZW9mIHJlZHVjZXIgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHJvb3RSZWR1Y2VyID0gcmVkdWNlcjtcbiAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0MihyZWR1Y2VyKSkge1xuICAgIHJvb3RSZWR1Y2VyID0gY29tYmluZVJlZHVjZXJzKHJlZHVjZXIpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEpIDogXCJgcmVkdWNlcmAgaXMgYSByZXF1aXJlZCBhcmd1bWVudCwgYW5kIG11c3QgYmUgYSBmdW5jdGlvbiBvciBhbiBvYmplY3Qgb2YgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHBhc3NlZCB0byBjb21iaW5lUmVkdWNlcnNcIik7XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiBtaWRkbGV3YXJlICYmIHR5cGVvZiBtaWRkbGV3YXJlICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgyKSA6IFwiYG1pZGRsZXdhcmVgIGZpZWxkIG11c3QgYmUgYSBjYWxsYmFja1wiKTtcbiAgfVxuICBsZXQgZmluYWxNaWRkbGV3YXJlO1xuICBpZiAodHlwZW9mIG1pZGRsZXdhcmUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZpbmFsTWlkZGxld2FyZSA9IG1pZGRsZXdhcmUoZ2V0RGVmYXVsdE1pZGRsZXdhcmUpO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgIUFycmF5LmlzQXJyYXkoZmluYWxNaWRkbGV3YXJlKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMykgOiBcIndoZW4gdXNpbmcgYSBtaWRkbGV3YXJlIGJ1aWxkZXIgZnVuY3Rpb24sIGFuIGFycmF5IG9mIG1pZGRsZXdhcmUgbXVzdCBiZSByZXR1cm5lZFwiKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZmluYWxNaWRkbGV3YXJlID0gZ2V0RGVmYXVsdE1pZGRsZXdhcmUoKTtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIGZpbmFsTWlkZGxld2FyZS5zb21lKChpdGVtKSA9PiB0eXBlb2YgaXRlbSAhPT0gXCJmdW5jdGlvblwiKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQpIDogXCJlYWNoIG1pZGRsZXdhcmUgcHJvdmlkZWQgdG8gY29uZmlndXJlU3RvcmUgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO1xuICB9XG4gIGxldCBmaW5hbENvbXBvc2UgPSBjb21wb3NlMjtcbiAgaWYgKGRldlRvb2xzKSB7XG4gICAgZmluYWxDb21wb3NlID0gY29tcG9zZVdpdGhEZXZUb29scyh7XG4gICAgICAvLyBFbmFibGUgY2FwdHVyZSBvZiBzdGFjayB0cmFjZXMgZm9yIGRpc3BhdGNoZWQgUmVkdXggYWN0aW9uc1xuICAgICAgdHJhY2U6IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIixcbiAgICAgIC4uLnR5cGVvZiBkZXZUb29scyA9PT0gXCJvYmplY3RcIiAmJiBkZXZUb29sc1xuICAgIH0pO1xuICB9XG4gIGNvbnN0IG1pZGRsZXdhcmVFbmhhbmNlciA9IGFwcGx5TWlkZGxld2FyZSguLi5maW5hbE1pZGRsZXdhcmUpO1xuICBjb25zdCBnZXREZWZhdWx0RW5oYW5jZXJzID0gYnVpbGRHZXREZWZhdWx0RW5oYW5jZXJzKG1pZGRsZXdhcmVFbmhhbmNlcik7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgZW5oYW5jZXJzICYmIHR5cGVvZiBlbmhhbmNlcnMgIT09IFwiZnVuY3Rpb25cIikge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDUpIDogXCJgZW5oYW5jZXJzYCBmaWVsZCBtdXN0IGJlIGEgY2FsbGJhY2tcIik7XG4gIH1cbiAgbGV0IHN0b3JlRW5oYW5jZXJzID0gdHlwZW9mIGVuaGFuY2VycyA9PT0gXCJmdW5jdGlvblwiID8gZW5oYW5jZXJzKGdldERlZmF1bHRFbmhhbmNlcnMpIDogZ2V0RGVmYXVsdEVuaGFuY2VycygpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmICFBcnJheS5pc0FycmF5KHN0b3JlRW5oYW5jZXJzKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDYpIDogXCJgZW5oYW5jZXJzYCBjYWxsYmFjayBtdXN0IHJldHVybiBhbiBhcnJheVwiKTtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIHN0b3JlRW5oYW5jZXJzLnNvbWUoKGl0ZW0pID0+IHR5cGVvZiBpdGVtICE9PSBcImZ1bmN0aW9uXCIpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNykgOiBcImVhY2ggZW5oYW5jZXIgcHJvdmlkZWQgdG8gY29uZmlndXJlU3RvcmUgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgZmluYWxNaWRkbGV3YXJlLmxlbmd0aCAmJiAhc3RvcmVFbmhhbmNlcnMuaW5jbHVkZXMobWlkZGxld2FyZUVuaGFuY2VyKSkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJtaWRkbGV3YXJlcyB3ZXJlIHByb3ZpZGVkLCBidXQgbWlkZGxld2FyZSBlbmhhbmNlciB3YXMgbm90IGluY2x1ZGVkIGluIGZpbmFsIGVuaGFuY2VycyAtIG1ha2Ugc3VyZSB0byBjYWxsIGBnZXREZWZhdWx0RW5oYW5jZXJzYFwiKTtcbiAgfVxuICBjb25zdCBjb21wb3NlZEVuaGFuY2VyID0gZmluYWxDb21wb3NlKC4uLnN0b3JlRW5oYW5jZXJzKTtcbiAgcmV0dXJuIGNyZWF0ZVN0b3JlKHJvb3RSZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSwgY29tcG9zZWRFbmhhbmNlcik7XG59XG5cbi8vIHNyYy9jcmVhdGVSZWR1Y2VyLnRzXG5pbXBvcnQgeyBwcm9kdWNlIGFzIGNyZWF0ZU5leHRTdGF0ZTIsIGlzRHJhZnQgYXMgaXNEcmFmdDIsIGlzRHJhZnRhYmxlIGFzIGlzRHJhZnRhYmxlMiB9IGZyb20gXCJpbW1lclwiO1xuXG4vLyBzcmMvbWFwQnVpbGRlcnMudHNcbmZ1bmN0aW9uIGV4ZWN1dGVSZWR1Y2VyQnVpbGRlckNhbGxiYWNrKGJ1aWxkZXJDYWxsYmFjaykge1xuICBjb25zdCBhY3Rpb25zTWFwID0ge307XG4gIGNvbnN0IGFjdGlvbk1hdGNoZXJzID0gW107XG4gIGxldCBkZWZhdWx0Q2FzZVJlZHVjZXI7XG4gIGNvbnN0IGJ1aWxkZXIgPSB7XG4gICAgYWRkQ2FzZSh0eXBlT3JBY3Rpb25DcmVhdG9yLCByZWR1Y2VyKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgIGlmIChhY3Rpb25NYXRjaGVycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMjYpIDogXCJgYnVpbGRlci5hZGRDYXNlYCBzaG91bGQgb25seSBiZSBjYWxsZWQgYmVmb3JlIGNhbGxpbmcgYGJ1aWxkZXIuYWRkTWF0Y2hlcmBcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRlZmF1bHRDYXNlUmVkdWNlcikge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDI3KSA6IFwiYGJ1aWxkZXIuYWRkQ2FzZWAgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIGJlZm9yZSBjYWxsaW5nIGBidWlsZGVyLmFkZERlZmF1bHRDYXNlYFwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29uc3QgdHlwZSA9IHR5cGVvZiB0eXBlT3JBY3Rpb25DcmVhdG9yID09PSBcInN0cmluZ1wiID8gdHlwZU9yQWN0aW9uQ3JlYXRvciA6IHR5cGVPckFjdGlvbkNyZWF0b3IudHlwZTtcbiAgICAgIGlmICghdHlwZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgyOCkgOiBcImBidWlsZGVyLmFkZENhc2VgIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBhbiBlbXB0eSBhY3Rpb24gdHlwZVwiKTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlIGluIGFjdGlvbnNNYXApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMjkpIDogYFxcYGJ1aWxkZXIuYWRkQ2FzZVxcYCBjYW5ub3QgYmUgY2FsbGVkIHdpdGggdHdvIHJlZHVjZXJzIGZvciB0aGUgc2FtZSBhY3Rpb24gdHlwZSAnJHt0eXBlfSdgKTtcbiAgICAgIH1cbiAgICAgIGFjdGlvbnNNYXBbdHlwZV0gPSByZWR1Y2VyO1xuICAgICAgcmV0dXJuIGJ1aWxkZXI7XG4gICAgfSxcbiAgICBhZGRNYXRjaGVyKG1hdGNoZXIsIHJlZHVjZXIpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgaWYgKGRlZmF1bHRDYXNlUmVkdWNlcikge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDMwKSA6IFwiYGJ1aWxkZXIuYWRkTWF0Y2hlcmAgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIGJlZm9yZSBjYWxsaW5nIGBidWlsZGVyLmFkZERlZmF1bHRDYXNlYFwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYWN0aW9uTWF0Y2hlcnMucHVzaCh7XG4gICAgICAgIG1hdGNoZXIsXG4gICAgICAgIHJlZHVjZXJcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGJ1aWxkZXI7XG4gICAgfSxcbiAgICBhZGREZWZhdWx0Q2FzZShyZWR1Y2VyKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgIGlmIChkZWZhdWx0Q2FzZVJlZHVjZXIpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzMSkgOiBcImBidWlsZGVyLmFkZERlZmF1bHRDYXNlYCBjYW4gb25seSBiZSBjYWxsZWQgb25jZVwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZGVmYXVsdENhc2VSZWR1Y2VyID0gcmVkdWNlcjtcbiAgICAgIHJldHVybiBidWlsZGVyO1xuICAgIH1cbiAgfTtcbiAgYnVpbGRlckNhbGxiYWNrKGJ1aWxkZXIpO1xuICByZXR1cm4gW2FjdGlvbnNNYXAsIGFjdGlvbk1hdGNoZXJzLCBkZWZhdWx0Q2FzZVJlZHVjZXJdO1xufVxuXG4vLyBzcmMvY3JlYXRlUmVkdWNlci50c1xuZnVuY3Rpb24gaXNTdGF0ZUZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCI7XG59XG5mdW5jdGlvbiBjcmVhdGVSZWR1Y2VyKGluaXRpYWxTdGF0ZSwgbWFwT3JCdWlsZGVyQ2FsbGJhY2spIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIGlmICh0eXBlb2YgbWFwT3JCdWlsZGVyQ2FsbGJhY2sgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDgpIDogXCJUaGUgb2JqZWN0IG5vdGF0aW9uIGZvciBgY3JlYXRlUmVkdWNlcmAgaGFzIGJlZW4gcmVtb3ZlZC4gUGxlYXNlIHVzZSB0aGUgJ2J1aWxkZXIgY2FsbGJhY2snIG5vdGF0aW9uIGluc3RlYWQ6IGh0dHBzOi8vcmVkdXgtdG9vbGtpdC5qcy5vcmcvYXBpL2NyZWF0ZVJlZHVjZXJcIik7XG4gICAgfVxuICB9XG4gIGxldCBbYWN0aW9uc01hcCwgZmluYWxBY3Rpb25NYXRjaGVycywgZmluYWxEZWZhdWx0Q2FzZVJlZHVjZXJdID0gZXhlY3V0ZVJlZHVjZXJCdWlsZGVyQ2FsbGJhY2sobWFwT3JCdWlsZGVyQ2FsbGJhY2spO1xuICBsZXQgZ2V0SW5pdGlhbFN0YXRlO1xuICBpZiAoaXNTdGF0ZUZ1bmN0aW9uKGluaXRpYWxTdGF0ZSkpIHtcbiAgICBnZXRJbml0aWFsU3RhdGUgPSAoKSA9PiBmcmVlemVEcmFmdGFibGUoaW5pdGlhbFN0YXRlKCkpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGZyb3plbkluaXRpYWxTdGF0ZSA9IGZyZWV6ZURyYWZ0YWJsZShpbml0aWFsU3RhdGUpO1xuICAgIGdldEluaXRpYWxTdGF0ZSA9ICgpID0+IGZyb3plbkluaXRpYWxTdGF0ZTtcbiAgfVxuICBmdW5jdGlvbiByZWR1Y2VyKHN0YXRlID0gZ2V0SW5pdGlhbFN0YXRlKCksIGFjdGlvbikge1xuICAgIGxldCBjYXNlUmVkdWNlcnMgPSBbYWN0aW9uc01hcFthY3Rpb24udHlwZV0sIC4uLmZpbmFsQWN0aW9uTWF0Y2hlcnMuZmlsdGVyKCh7XG4gICAgICBtYXRjaGVyXG4gICAgfSkgPT4gbWF0Y2hlcihhY3Rpb24pKS5tYXAoKHtcbiAgICAgIHJlZHVjZXI6IHJlZHVjZXIyXG4gICAgfSkgPT4gcmVkdWNlcjIpXTtcbiAgICBpZiAoY2FzZVJlZHVjZXJzLmZpbHRlcigoY3IpID0+ICEhY3IpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgY2FzZVJlZHVjZXJzID0gW2ZpbmFsRGVmYXVsdENhc2VSZWR1Y2VyXTtcbiAgICB9XG4gICAgcmV0dXJuIGNhc2VSZWR1Y2Vycy5yZWR1Y2UoKHByZXZpb3VzU3RhdGUsIGNhc2VSZWR1Y2VyKSA9PiB7XG4gICAgICBpZiAoY2FzZVJlZHVjZXIpIHtcbiAgICAgICAgaWYgKGlzRHJhZnQyKHByZXZpb3VzU3RhdGUpKSB7XG4gICAgICAgICAgY29uc3QgZHJhZnQgPSBwcmV2aW91c1N0YXRlO1xuICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGNhc2VSZWR1Y2VyKGRyYWZ0LCBhY3Rpb24pO1xuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgcmV0dXJuIHByZXZpb3VzU3RhdGU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0gZWxzZSBpZiAoIWlzRHJhZnRhYmxlMihwcmV2aW91c1N0YXRlKSkge1xuICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGNhc2VSZWR1Y2VyKHByZXZpb3VzU3RhdGUsIGFjdGlvbik7XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBpZiAocHJldmlvdXNTdGF0ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICByZXR1cm4gcHJldmlvdXNTdGF0ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IEVycm9yKFwiQSBjYXNlIHJlZHVjZXIgb24gYSBub24tZHJhZnRhYmxlIHZhbHVlIG11c3Qgbm90IHJldHVybiB1bmRlZmluZWRcIik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZU5leHRTdGF0ZTIocHJldmlvdXNTdGF0ZSwgKGRyYWZ0KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gY2FzZVJlZHVjZXIoZHJhZnQsIGFjdGlvbik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBwcmV2aW91c1N0YXRlO1xuICAgIH0sIHN0YXRlKTtcbiAgfVxuICByZWR1Y2VyLmdldEluaXRpYWxTdGF0ZSA9IGdldEluaXRpYWxTdGF0ZTtcbiAgcmV0dXJuIHJlZHVjZXI7XG59XG5cbi8vIHNyYy9tYXRjaGVycy50c1xudmFyIG1hdGNoZXMgPSAobWF0Y2hlciwgYWN0aW9uKSA9PiB7XG4gIGlmIChoYXNNYXRjaEZ1bmN0aW9uKG1hdGNoZXIpKSB7XG4gICAgcmV0dXJuIG1hdGNoZXIubWF0Y2goYWN0aW9uKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbWF0Y2hlcihhY3Rpb24pO1xuICB9XG59O1xuZnVuY3Rpb24gaXNBbnlPZiguLi5tYXRjaGVycykge1xuICByZXR1cm4gKGFjdGlvbikgPT4ge1xuICAgIHJldHVybiBtYXRjaGVycy5zb21lKChtYXRjaGVyKSA9PiBtYXRjaGVzKG1hdGNoZXIsIGFjdGlvbikpO1xuICB9O1xufVxuZnVuY3Rpb24gaXNBbGxPZiguLi5tYXRjaGVycykge1xuICByZXR1cm4gKGFjdGlvbikgPT4ge1xuICAgIHJldHVybiBtYXRjaGVycy5ldmVyeSgobWF0Y2hlcikgPT4gbWF0Y2hlcyhtYXRjaGVyLCBhY3Rpb24pKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGhhc0V4cGVjdGVkUmVxdWVzdE1ldGFkYXRhKGFjdGlvbiwgdmFsaWRTdGF0dXMpIHtcbiAgaWYgKCFhY3Rpb24gfHwgIWFjdGlvbi5tZXRhKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IGhhc1ZhbGlkUmVxdWVzdElkID0gdHlwZW9mIGFjdGlvbi5tZXRhLnJlcXVlc3RJZCA9PT0gXCJzdHJpbmdcIjtcbiAgY29uc3QgaGFzVmFsaWRSZXF1ZXN0U3RhdHVzID0gdmFsaWRTdGF0dXMuaW5kZXhPZihhY3Rpb24ubWV0YS5yZXF1ZXN0U3RhdHVzKSA+IC0xO1xuICByZXR1cm4gaGFzVmFsaWRSZXF1ZXN0SWQgJiYgaGFzVmFsaWRSZXF1ZXN0U3RhdHVzO1xufVxuZnVuY3Rpb24gaXNBc3luY1RodW5rQXJyYXkoYSkge1xuICByZXR1cm4gdHlwZW9mIGFbMF0gPT09IFwiZnVuY3Rpb25cIiAmJiBcInBlbmRpbmdcIiBpbiBhWzBdICYmIFwiZnVsZmlsbGVkXCIgaW4gYVswXSAmJiBcInJlamVjdGVkXCIgaW4gYVswXTtcbn1cbmZ1bmN0aW9uIGlzUGVuZGluZyguLi5hc3luY1RodW5rcykge1xuICBpZiAoYXN5bmNUaHVua3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIChhY3Rpb24pID0+IGhhc0V4cGVjdGVkUmVxdWVzdE1ldGFkYXRhKGFjdGlvbiwgW1wicGVuZGluZ1wiXSk7XG4gIH1cbiAgaWYgKCFpc0FzeW5jVGh1bmtBcnJheShhc3luY1RodW5rcykpIHtcbiAgICByZXR1cm4gaXNQZW5kaW5nKCkoYXN5bmNUaHVua3NbMF0pO1xuICB9XG4gIHJldHVybiBpc0FueU9mKC4uLmFzeW5jVGh1bmtzLm1hcCgoYXN5bmNUaHVuaykgPT4gYXN5bmNUaHVuay5wZW5kaW5nKSk7XG59XG5mdW5jdGlvbiBpc1JlamVjdGVkKC4uLmFzeW5jVGh1bmtzKSB7XG4gIGlmIChhc3luY1RodW5rcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gKGFjdGlvbikgPT4gaGFzRXhwZWN0ZWRSZXF1ZXN0TWV0YWRhdGEoYWN0aW9uLCBbXCJyZWplY3RlZFwiXSk7XG4gIH1cbiAgaWYgKCFpc0FzeW5jVGh1bmtBcnJheShhc3luY1RodW5rcykpIHtcbiAgICByZXR1cm4gaXNSZWplY3RlZCgpKGFzeW5jVGh1bmtzWzBdKTtcbiAgfVxuICByZXR1cm4gaXNBbnlPZiguLi5hc3luY1RodW5rcy5tYXAoKGFzeW5jVGh1bmspID0+IGFzeW5jVGh1bmsucmVqZWN0ZWQpKTtcbn1cbmZ1bmN0aW9uIGlzUmVqZWN0ZWRXaXRoVmFsdWUoLi4uYXN5bmNUaHVua3MpIHtcbiAgY29uc3QgaGFzRmxhZyA9IChhY3Rpb24pID0+IHtcbiAgICByZXR1cm4gYWN0aW9uICYmIGFjdGlvbi5tZXRhICYmIGFjdGlvbi5tZXRhLnJlamVjdGVkV2l0aFZhbHVlO1xuICB9O1xuICBpZiAoYXN5bmNUaHVua3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGlzQWxsT2YoaXNSZWplY3RlZCguLi5hc3luY1RodW5rcyksIGhhc0ZsYWcpO1xuICB9XG4gIGlmICghaXNBc3luY1RodW5rQXJyYXkoYXN5bmNUaHVua3MpKSB7XG4gICAgcmV0dXJuIGlzUmVqZWN0ZWRXaXRoVmFsdWUoKShhc3luY1RodW5rc1swXSk7XG4gIH1cbiAgcmV0dXJuIGlzQWxsT2YoaXNSZWplY3RlZCguLi5hc3luY1RodW5rcyksIGhhc0ZsYWcpO1xufVxuZnVuY3Rpb24gaXNGdWxmaWxsZWQoLi4uYXN5bmNUaHVua3MpIHtcbiAgaWYgKGFzeW5jVGh1bmtzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAoYWN0aW9uKSA9PiBoYXNFeHBlY3RlZFJlcXVlc3RNZXRhZGF0YShhY3Rpb24sIFtcImZ1bGZpbGxlZFwiXSk7XG4gIH1cbiAgaWYgKCFpc0FzeW5jVGh1bmtBcnJheShhc3luY1RodW5rcykpIHtcbiAgICByZXR1cm4gaXNGdWxmaWxsZWQoKShhc3luY1RodW5rc1swXSk7XG4gIH1cbiAgcmV0dXJuIGlzQW55T2YoLi4uYXN5bmNUaHVua3MubWFwKChhc3luY1RodW5rKSA9PiBhc3luY1RodW5rLmZ1bGZpbGxlZCkpO1xufVxuZnVuY3Rpb24gaXNBc3luY1RodW5rQWN0aW9uKC4uLmFzeW5jVGh1bmtzKSB7XG4gIGlmIChhc3luY1RodW5rcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gKGFjdGlvbikgPT4gaGFzRXhwZWN0ZWRSZXF1ZXN0TWV0YWRhdGEoYWN0aW9uLCBbXCJwZW5kaW5nXCIsIFwiZnVsZmlsbGVkXCIsIFwicmVqZWN0ZWRcIl0pO1xuICB9XG4gIGlmICghaXNBc3luY1RodW5rQXJyYXkoYXN5bmNUaHVua3MpKSB7XG4gICAgcmV0dXJuIGlzQXN5bmNUaHVua0FjdGlvbigpKGFzeW5jVGh1bmtzWzBdKTtcbiAgfVxuICByZXR1cm4gaXNBbnlPZiguLi5hc3luY1RodW5rcy5mbGF0TWFwKChhc3luY1RodW5rKSA9PiBbYXN5bmNUaHVuay5wZW5kaW5nLCBhc3luY1RodW5rLnJlamVjdGVkLCBhc3luY1RodW5rLmZ1bGZpbGxlZF0pKTtcbn1cblxuLy8gc3JjL25hbm9pZC50c1xudmFyIHVybEFscGhhYmV0ID0gXCJNb2R1bGVTeW1iaGFzT3duUHItMDEyMzQ1Njc4OUFCQ0RFRkdITlJWZmdjdGlVdnpfS3FZVEprTHhwWlhJalFXXCI7XG52YXIgbmFub2lkID0gKHNpemUgPSAyMSkgPT4ge1xuICBsZXQgaWQgPSBcIlwiO1xuICBsZXQgaSA9IHNpemU7XG4gIHdoaWxlIChpLS0pIHtcbiAgICBpZCArPSB1cmxBbHBoYWJldFtNYXRoLnJhbmRvbSgpICogNjQgfCAwXTtcbiAgfVxuICByZXR1cm4gaWQ7XG59O1xuXG4vLyBzcmMvY3JlYXRlQXN5bmNUaHVuay50c1xudmFyIGNvbW1vblByb3BlcnRpZXMgPSBbXCJuYW1lXCIsIFwibWVzc2FnZVwiLCBcInN0YWNrXCIsIFwiY29kZVwiXTtcbnZhciBSZWplY3RXaXRoVmFsdWUgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKHBheWxvYWQsIG1ldGEpIHtcbiAgICB0aGlzLnBheWxvYWQgPSBwYXlsb2FkO1xuICAgIHRoaXMubWV0YSA9IG1ldGE7XG4gIH1cbiAgLypcbiAgdHlwZS1vbmx5IHByb3BlcnR5IHRvIGRpc3Rpbmd1aXNoIGJldHdlZW4gUmVqZWN0V2l0aFZhbHVlIGFuZCBGdWxmaWxsV2l0aE1ldGFcbiAgZG9lcyBub3QgZXhpc3QgYXQgcnVudGltZVxuICAqL1xuICBfdHlwZTtcbn07XG52YXIgRnVsZmlsbFdpdGhNZXRhID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihwYXlsb2FkLCBtZXRhKSB7XG4gICAgdGhpcy5wYXlsb2FkID0gcGF5bG9hZDtcbiAgICB0aGlzLm1ldGEgPSBtZXRhO1xuICB9XG4gIC8qXG4gIHR5cGUtb25seSBwcm9wZXJ0eSB0byBkaXN0aW5ndWlzaCBiZXR3ZWVuIFJlamVjdFdpdGhWYWx1ZSBhbmQgRnVsZmlsbFdpdGhNZXRhXG4gIGRvZXMgbm90IGV4aXN0IGF0IHJ1bnRpbWVcbiAgKi9cbiAgX3R5cGU7XG59O1xudmFyIG1pbmlTZXJpYWxpemVFcnJvciA9ICh2YWx1ZSkgPT4ge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmIHZhbHVlICE9PSBudWxsKSB7XG4gICAgY29uc3Qgc2ltcGxlRXJyb3IgPSB7fTtcbiAgICBmb3IgKGNvbnN0IHByb3BlcnR5IG9mIGNvbW1vblByb3BlcnRpZXMpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWVbcHJvcGVydHldID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHNpbXBsZUVycm9yW3Byb3BlcnR5XSA9IHZhbHVlW3Byb3BlcnR5XTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNpbXBsZUVycm9yO1xuICB9XG4gIHJldHVybiB7XG4gICAgbWVzc2FnZTogU3RyaW5nKHZhbHVlKVxuICB9O1xufTtcbnZhciBleHRlcm5hbEFib3J0TWVzc2FnZSA9IFwiRXh0ZXJuYWwgc2lnbmFsIHdhcyBhYm9ydGVkXCI7XG52YXIgY3JlYXRlQXN5bmNUaHVuayA9IC8qIEBfX1BVUkVfXyAqLyAoKCkgPT4ge1xuICBmdW5jdGlvbiBjcmVhdGVBc3luY1RodW5rMih0eXBlUHJlZml4LCBwYXlsb2FkQ3JlYXRvciwgb3B0aW9ucykge1xuICAgIGNvbnN0IGZ1bGZpbGxlZCA9IGNyZWF0ZUFjdGlvbih0eXBlUHJlZml4ICsgXCIvZnVsZmlsbGVkXCIsIChwYXlsb2FkLCByZXF1ZXN0SWQsIGFyZywgbWV0YSkgPT4gKHtcbiAgICAgIHBheWxvYWQsXG4gICAgICBtZXRhOiB7XG4gICAgICAgIC4uLm1ldGEgfHwge30sXG4gICAgICAgIGFyZyxcbiAgICAgICAgcmVxdWVzdElkLFxuICAgICAgICByZXF1ZXN0U3RhdHVzOiBcImZ1bGZpbGxlZFwiXG4gICAgICB9XG4gICAgfSkpO1xuICAgIGNvbnN0IHBlbmRpbmcgPSBjcmVhdGVBY3Rpb24odHlwZVByZWZpeCArIFwiL3BlbmRpbmdcIiwgKHJlcXVlc3RJZCwgYXJnLCBtZXRhKSA9PiAoe1xuICAgICAgcGF5bG9hZDogdm9pZCAwLFxuICAgICAgbWV0YToge1xuICAgICAgICAuLi5tZXRhIHx8IHt9LFxuICAgICAgICBhcmcsXG4gICAgICAgIHJlcXVlc3RJZCxcbiAgICAgICAgcmVxdWVzdFN0YXR1czogXCJwZW5kaW5nXCJcbiAgICAgIH1cbiAgICB9KSk7XG4gICAgY29uc3QgcmVqZWN0ZWQgPSBjcmVhdGVBY3Rpb24odHlwZVByZWZpeCArIFwiL3JlamVjdGVkXCIsIChlcnJvciwgcmVxdWVzdElkLCBhcmcsIHBheWxvYWQsIG1ldGEpID0+ICh7XG4gICAgICBwYXlsb2FkLFxuICAgICAgZXJyb3I6IChvcHRpb25zICYmIG9wdGlvbnMuc2VyaWFsaXplRXJyb3IgfHwgbWluaVNlcmlhbGl6ZUVycm9yKShlcnJvciB8fCBcIlJlamVjdGVkXCIpLFxuICAgICAgbWV0YToge1xuICAgICAgICAuLi5tZXRhIHx8IHt9LFxuICAgICAgICBhcmcsXG4gICAgICAgIHJlcXVlc3RJZCxcbiAgICAgICAgcmVqZWN0ZWRXaXRoVmFsdWU6ICEhcGF5bG9hZCxcbiAgICAgICAgcmVxdWVzdFN0YXR1czogXCJyZWplY3RlZFwiLFxuICAgICAgICBhYm9ydGVkOiBlcnJvcj8ubmFtZSA9PT0gXCJBYm9ydEVycm9yXCIsXG4gICAgICAgIGNvbmRpdGlvbjogZXJyb3I/Lm5hbWUgPT09IFwiQ29uZGl0aW9uRXJyb3JcIlxuICAgICAgfVxuICAgIH0pKTtcbiAgICBmdW5jdGlvbiBhY3Rpb25DcmVhdG9yKGFyZywge1xuICAgICAgc2lnbmFsXG4gICAgfSA9IHt9KSB7XG4gICAgICByZXR1cm4gKGRpc3BhdGNoLCBnZXRTdGF0ZSwgZXh0cmEpID0+IHtcbiAgICAgICAgY29uc3QgcmVxdWVzdElkID0gb3B0aW9ucz8uaWRHZW5lcmF0b3IgPyBvcHRpb25zLmlkR2VuZXJhdG9yKGFyZykgOiBuYW5vaWQoKTtcbiAgICAgICAgY29uc3QgYWJvcnRDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgICAgICBsZXQgYWJvcnRIYW5kbGVyO1xuICAgICAgICBsZXQgYWJvcnRSZWFzb247XG4gICAgICAgIGZ1bmN0aW9uIGFib3J0KHJlYXNvbikge1xuICAgICAgICAgIGFib3J0UmVhc29uID0gcmVhc29uO1xuICAgICAgICAgIGFib3J0Q29udHJvbGxlci5hYm9ydCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaWduYWwpIHtcbiAgICAgICAgICBpZiAoc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgICAgICAgIGFib3J0KGV4dGVybmFsQWJvcnRNZXNzYWdlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCAoKSA9PiBhYm9ydChleHRlcm5hbEFib3J0TWVzc2FnZSksIHtcbiAgICAgICAgICAgICAgb25jZTogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHByb21pc2UgPSBhc3luYyBmdW5jdGlvbigpIHtcbiAgICAgICAgICBsZXQgZmluYWxBY3Rpb247XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxldCBjb25kaXRpb25SZXN1bHQgPSBvcHRpb25zPy5jb25kaXRpb24/LihhcmcsIHtcbiAgICAgICAgICAgICAgZ2V0U3RhdGUsXG4gICAgICAgICAgICAgIGV4dHJhXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChpc1RoZW5hYmxlKGNvbmRpdGlvblJlc3VsdCkpIHtcbiAgICAgICAgICAgICAgY29uZGl0aW9uUmVzdWx0ID0gYXdhaXQgY29uZGl0aW9uUmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNvbmRpdGlvblJlc3VsdCA9PT0gZmFsc2UgfHwgYWJvcnRDb250cm9sbGVyLnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICAgICAgICAgIHRocm93IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkNvbmRpdGlvbkVycm9yXCIsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogXCJBYm9ydGVkIGR1ZSB0byBjb25kaXRpb24gY2FsbGJhY2sgcmV0dXJuaW5nIGZhbHNlLlwiXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBhYm9ydGVkUHJvbWlzZSA9IG5ldyBQcm9taXNlKChfLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgYWJvcnRIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJlamVjdCh7XG4gICAgICAgICAgICAgICAgICBuYW1lOiBcIkFib3J0RXJyb3JcIixcbiAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGFib3J0UmVhc29uIHx8IFwiQWJvcnRlZFwiXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIGFib3J0Q29udHJvbGxlci5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIGFib3J0SGFuZGxlcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGRpc3BhdGNoKHBlbmRpbmcocmVxdWVzdElkLCBhcmcsIG9wdGlvbnM/LmdldFBlbmRpbmdNZXRhPy4oe1xuICAgICAgICAgICAgICByZXF1ZXN0SWQsXG4gICAgICAgICAgICAgIGFyZ1xuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICBnZXRTdGF0ZSxcbiAgICAgICAgICAgICAgZXh0cmFcbiAgICAgICAgICAgIH0pKSk7XG4gICAgICAgICAgICBmaW5hbEFjdGlvbiA9IGF3YWl0IFByb21pc2UucmFjZShbYWJvcnRlZFByb21pc2UsIFByb21pc2UucmVzb2x2ZShwYXlsb2FkQ3JlYXRvcihhcmcsIHtcbiAgICAgICAgICAgICAgZGlzcGF0Y2gsXG4gICAgICAgICAgICAgIGdldFN0YXRlLFxuICAgICAgICAgICAgICBleHRyYSxcbiAgICAgICAgICAgICAgcmVxdWVzdElkLFxuICAgICAgICAgICAgICBzaWduYWw6IGFib3J0Q29udHJvbGxlci5zaWduYWwsXG4gICAgICAgICAgICAgIGFib3J0LFxuICAgICAgICAgICAgICByZWplY3RXaXRoVmFsdWU6ICh2YWx1ZSwgbWV0YSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVqZWN0V2l0aFZhbHVlKHZhbHVlLCBtZXRhKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZnVsZmlsbFdpdGhWYWx1ZTogKHZhbHVlLCBtZXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBGdWxmaWxsV2l0aE1ldGEodmFsdWUsIG1ldGEpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSkudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBSZWplY3RXaXRoVmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyByZXN1bHQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIEZ1bGZpbGxXaXRoTWV0YSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmdWxmaWxsZWQocmVzdWx0LnBheWxvYWQsIHJlcXVlc3RJZCwgYXJnLCByZXN1bHQubWV0YSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGZ1bGZpbGxlZChyZXN1bHQsIHJlcXVlc3RJZCwgYXJnKTtcbiAgICAgICAgICAgIH0pXSk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBmaW5hbEFjdGlvbiA9IGVyciBpbnN0YW5jZW9mIFJlamVjdFdpdGhWYWx1ZSA/IHJlamVjdGVkKG51bGwsIHJlcXVlc3RJZCwgYXJnLCBlcnIucGF5bG9hZCwgZXJyLm1ldGEpIDogcmVqZWN0ZWQoZXJyLCByZXF1ZXN0SWQsIGFyZyk7XG4gICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIGlmIChhYm9ydEhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgYWJvcnRDb250cm9sbGVyLnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgYWJvcnRIYW5kbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3Qgc2tpcERpc3BhdGNoID0gb3B0aW9ucyAmJiAhb3B0aW9ucy5kaXNwYXRjaENvbmRpdGlvblJlamVjdGlvbiAmJiByZWplY3RlZC5tYXRjaChmaW5hbEFjdGlvbikgJiYgZmluYWxBY3Rpb24ubWV0YS5jb25kaXRpb247XG4gICAgICAgICAgaWYgKCFza2lwRGlzcGF0Y2gpIHtcbiAgICAgICAgICAgIGRpc3BhdGNoKGZpbmFsQWN0aW9uKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGZpbmFsQWN0aW9uO1xuICAgICAgICB9KCk7XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHByb21pc2UsIHtcbiAgICAgICAgICBhYm9ydCxcbiAgICAgICAgICByZXF1ZXN0SWQsXG4gICAgICAgICAgYXJnLFxuICAgICAgICAgIHVud3JhcCgpIHtcbiAgICAgICAgICAgIHJldHVybiBwcm9taXNlLnRoZW4odW53cmFwUmVzdWx0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oYWN0aW9uQ3JlYXRvciwge1xuICAgICAgcGVuZGluZyxcbiAgICAgIHJlamVjdGVkLFxuICAgICAgZnVsZmlsbGVkLFxuICAgICAgc2V0dGxlZDogaXNBbnlPZihyZWplY3RlZCwgZnVsZmlsbGVkKSxcbiAgICAgIHR5cGVQcmVmaXhcbiAgICB9KTtcbiAgfVxuICBjcmVhdGVBc3luY1RodW5rMi53aXRoVHlwZXMgPSAoKSA9PiBjcmVhdGVBc3luY1RodW5rMjtcbiAgcmV0dXJuIGNyZWF0ZUFzeW5jVGh1bmsyO1xufSkoKTtcbmZ1bmN0aW9uIHVud3JhcFJlc3VsdChhY3Rpb24pIHtcbiAgaWYgKGFjdGlvbi5tZXRhICYmIGFjdGlvbi5tZXRhLnJlamVjdGVkV2l0aFZhbHVlKSB7XG4gICAgdGhyb3cgYWN0aW9uLnBheWxvYWQ7XG4gIH1cbiAgaWYgKGFjdGlvbi5lcnJvcikge1xuICAgIHRocm93IGFjdGlvbi5lcnJvcjtcbiAgfVxuICByZXR1cm4gYWN0aW9uLnBheWxvYWQ7XG59XG5mdW5jdGlvbiBpc1RoZW5hYmxlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHZhbHVlLnRoZW4gPT09IFwiZnVuY3Rpb25cIjtcbn1cblxuLy8gc3JjL2NyZWF0ZVNsaWNlLnRzXG52YXIgYXN5bmNUaHVua1N5bWJvbCA9IC8qIEBfX1BVUkVfXyAqLyBTeW1ib2wuZm9yKFwicnRrLXNsaWNlLWNyZWF0ZWFzeW5jdGh1bmtcIik7XG52YXIgYXN5bmNUaHVua0NyZWF0b3IgPSB7XG4gIFthc3luY1RodW5rU3ltYm9sXTogY3JlYXRlQXN5bmNUaHVua1xufTtcbnZhciBSZWR1Y2VyVHlwZSA9IC8qIEBfX1BVUkVfXyAqLyAoKFJlZHVjZXJUeXBlMikgPT4ge1xuICBSZWR1Y2VyVHlwZTJbXCJyZWR1Y2VyXCJdID0gXCJyZWR1Y2VyXCI7XG4gIFJlZHVjZXJUeXBlMltcInJlZHVjZXJXaXRoUHJlcGFyZVwiXSA9IFwicmVkdWNlcldpdGhQcmVwYXJlXCI7XG4gIFJlZHVjZXJUeXBlMltcImFzeW5jVGh1bmtcIl0gPSBcImFzeW5jVGh1bmtcIjtcbiAgcmV0dXJuIFJlZHVjZXJUeXBlMjtcbn0pKFJlZHVjZXJUeXBlIHx8IHt9KTtcbmZ1bmN0aW9uIGdldFR5cGUoc2xpY2UsIGFjdGlvbktleSkge1xuICByZXR1cm4gYCR7c2xpY2V9LyR7YWN0aW9uS2V5fWA7XG59XG5mdW5jdGlvbiBidWlsZENyZWF0ZVNsaWNlKHtcbiAgY3JlYXRvcnNcbn0gPSB7fSkge1xuICBjb25zdCBjQVQgPSBjcmVhdG9ycz8uYXN5bmNUaHVuaz8uW2FzeW5jVGh1bmtTeW1ib2xdO1xuICByZXR1cm4gZnVuY3Rpb24gY3JlYXRlU2xpY2UyKG9wdGlvbnMpIHtcbiAgICBjb25zdCB7XG4gICAgICBuYW1lLFxuICAgICAgcmVkdWNlclBhdGggPSBuYW1lXG4gICAgfSA9IG9wdGlvbnM7XG4gICAgaWYgKCFuYW1lKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxMSkgOiBcImBuYW1lYCBpcyBhIHJlcXVpcmVkIG9wdGlvbiBmb3IgY3JlYXRlU2xpY2VcIik7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJkZXZlbG9wbWVudFwiKSB7XG4gICAgICBpZiAob3B0aW9ucy5pbml0aWFsU3RhdGUgPT09IHZvaWQgMCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiWW91IG11c3QgcHJvdmlkZSBhbiBgaW5pdGlhbFN0YXRlYCB2YWx1ZSB0aGF0IGlzIG5vdCBgdW5kZWZpbmVkYC4gWW91IG1heSBoYXZlIG1pc3NwZWxsZWQgYGluaXRpYWxTdGF0ZWBcIik7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHJlZHVjZXJzID0gKHR5cGVvZiBvcHRpb25zLnJlZHVjZXJzID09PSBcImZ1bmN0aW9uXCIgPyBvcHRpb25zLnJlZHVjZXJzKGJ1aWxkUmVkdWNlckNyZWF0b3JzKCkpIDogb3B0aW9ucy5yZWR1Y2VycykgfHwge307XG4gICAgY29uc3QgcmVkdWNlck5hbWVzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICAgIGNvbnN0IGNvbnRleHQgPSB7XG4gICAgICBzbGljZUNhc2VSZWR1Y2Vyc0J5TmFtZToge30sXG4gICAgICBzbGljZUNhc2VSZWR1Y2Vyc0J5VHlwZToge30sXG4gICAgICBhY3Rpb25DcmVhdG9yczoge30sXG4gICAgICBzbGljZU1hdGNoZXJzOiBbXVxuICAgIH07XG4gICAgY29uc3QgY29udGV4dE1ldGhvZHMgPSB7XG4gICAgICBhZGRDYXNlKHR5cGVPckFjdGlvbkNyZWF0b3IsIHJlZHVjZXIyKSB7XG4gICAgICAgIGNvbnN0IHR5cGUgPSB0eXBlb2YgdHlwZU9yQWN0aW9uQ3JlYXRvciA9PT0gXCJzdHJpbmdcIiA/IHR5cGVPckFjdGlvbkNyZWF0b3IgOiB0eXBlT3JBY3Rpb25DcmVhdG9yLnR5cGU7XG4gICAgICAgIGlmICghdHlwZSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEyKSA6IFwiYGNvbnRleHQuYWRkQ2FzZWAgY2Fubm90IGJlIGNhbGxlZCB3aXRoIGFuIGVtcHR5IGFjdGlvbiB0eXBlXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlIGluIGNvbnRleHQuc2xpY2VDYXNlUmVkdWNlcnNCeVR5cGUpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxMykgOiBcImBjb250ZXh0LmFkZENhc2VgIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCB0d28gcmVkdWNlcnMgZm9yIHRoZSBzYW1lIGFjdGlvbiB0eXBlOiBcIiArIHR5cGUpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRleHQuc2xpY2VDYXNlUmVkdWNlcnNCeVR5cGVbdHlwZV0gPSByZWR1Y2VyMjtcbiAgICAgICAgcmV0dXJuIGNvbnRleHRNZXRob2RzO1xuICAgICAgfSxcbiAgICAgIGFkZE1hdGNoZXIobWF0Y2hlciwgcmVkdWNlcjIpIHtcbiAgICAgICAgY29udGV4dC5zbGljZU1hdGNoZXJzLnB1c2goe1xuICAgICAgICAgIG1hdGNoZXIsXG4gICAgICAgICAgcmVkdWNlcjogcmVkdWNlcjJcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjb250ZXh0TWV0aG9kcztcbiAgICAgIH0sXG4gICAgICBleHBvc2VBY3Rpb24obmFtZTIsIGFjdGlvbkNyZWF0b3IpIHtcbiAgICAgICAgY29udGV4dC5hY3Rpb25DcmVhdG9yc1tuYW1lMl0gPSBhY3Rpb25DcmVhdG9yO1xuICAgICAgICByZXR1cm4gY29udGV4dE1ldGhvZHM7XG4gICAgICB9LFxuICAgICAgZXhwb3NlQ2FzZVJlZHVjZXIobmFtZTIsIHJlZHVjZXIyKSB7XG4gICAgICAgIGNvbnRleHQuc2xpY2VDYXNlUmVkdWNlcnNCeU5hbWVbbmFtZTJdID0gcmVkdWNlcjI7XG4gICAgICAgIHJldHVybiBjb250ZXh0TWV0aG9kcztcbiAgICAgIH1cbiAgICB9O1xuICAgIHJlZHVjZXJOYW1lcy5mb3JFYWNoKChyZWR1Y2VyTmFtZSkgPT4ge1xuICAgICAgY29uc3QgcmVkdWNlckRlZmluaXRpb24gPSByZWR1Y2Vyc1tyZWR1Y2VyTmFtZV07XG4gICAgICBjb25zdCByZWR1Y2VyRGV0YWlscyA9IHtcbiAgICAgICAgcmVkdWNlck5hbWUsXG4gICAgICAgIHR5cGU6IGdldFR5cGUobmFtZSwgcmVkdWNlck5hbWUpLFxuICAgICAgICBjcmVhdGVOb3RhdGlvbjogdHlwZW9mIG9wdGlvbnMucmVkdWNlcnMgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgfTtcbiAgICAgIGlmIChpc0FzeW5jVGh1bmtTbGljZVJlZHVjZXJEZWZpbml0aW9uKHJlZHVjZXJEZWZpbml0aW9uKSkge1xuICAgICAgICBoYW5kbGVUaHVua0Nhc2VSZWR1Y2VyRGVmaW5pdGlvbihyZWR1Y2VyRGV0YWlscywgcmVkdWNlckRlZmluaXRpb24sIGNvbnRleHRNZXRob2RzLCBjQVQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaGFuZGxlTm9ybWFsUmVkdWNlckRlZmluaXRpb24ocmVkdWNlckRldGFpbHMsIHJlZHVjZXJEZWZpbml0aW9uLCBjb250ZXh0TWV0aG9kcyk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgZnVuY3Rpb24gYnVpbGRSZWR1Y2VyKCkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuZXh0cmFSZWR1Y2VycyA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE0KSA6IFwiVGhlIG9iamVjdCBub3RhdGlvbiBmb3IgYGNyZWF0ZVNsaWNlLmV4dHJhUmVkdWNlcnNgIGhhcyBiZWVuIHJlbW92ZWQuIFBsZWFzZSB1c2UgdGhlICdidWlsZGVyIGNhbGxiYWNrJyBub3RhdGlvbiBpbnN0ZWFkOiBodHRwczovL3JlZHV4LXRvb2xraXQuanMub3JnL2FwaS9jcmVhdGVTbGljZVwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29uc3QgW2V4dHJhUmVkdWNlcnMgPSB7fSwgYWN0aW9uTWF0Y2hlcnMgPSBbXSwgZGVmYXVsdENhc2VSZWR1Y2VyID0gdm9pZCAwXSA9IHR5cGVvZiBvcHRpb25zLmV4dHJhUmVkdWNlcnMgPT09IFwiZnVuY3Rpb25cIiA/IGV4ZWN1dGVSZWR1Y2VyQnVpbGRlckNhbGxiYWNrKG9wdGlvbnMuZXh0cmFSZWR1Y2VycykgOiBbb3B0aW9ucy5leHRyYVJlZHVjZXJzXTtcbiAgICAgIGNvbnN0IGZpbmFsQ2FzZVJlZHVjZXJzID0ge1xuICAgICAgICAuLi5leHRyYVJlZHVjZXJzLFxuICAgICAgICAuLi5jb250ZXh0LnNsaWNlQ2FzZVJlZHVjZXJzQnlUeXBlXG4gICAgICB9O1xuICAgICAgcmV0dXJuIGNyZWF0ZVJlZHVjZXIob3B0aW9ucy5pbml0aWFsU3RhdGUsIChidWlsZGVyKSA9PiB7XG4gICAgICAgIGZvciAobGV0IGtleSBpbiBmaW5hbENhc2VSZWR1Y2Vycykge1xuICAgICAgICAgIGJ1aWxkZXIuYWRkQ2FzZShrZXksIGZpbmFsQ2FzZVJlZHVjZXJzW2tleV0pO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IHNNIG9mIGNvbnRleHQuc2xpY2VNYXRjaGVycykge1xuICAgICAgICAgIGJ1aWxkZXIuYWRkTWF0Y2hlcihzTS5tYXRjaGVyLCBzTS5yZWR1Y2VyKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBtIG9mIGFjdGlvbk1hdGNoZXJzKSB7XG4gICAgICAgICAgYnVpbGRlci5hZGRNYXRjaGVyKG0ubWF0Y2hlciwgbS5yZWR1Y2VyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGVmYXVsdENhc2VSZWR1Y2VyKSB7XG4gICAgICAgICAgYnVpbGRlci5hZGREZWZhdWx0Q2FzZShkZWZhdWx0Q2FzZVJlZHVjZXIpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgY29uc3Qgc2VsZWN0U2VsZiA9IChzdGF0ZSkgPT4gc3RhdGU7XG4gICAgY29uc3QgaW5qZWN0ZWRTZWxlY3RvckNhY2hlID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgICBsZXQgX3JlZHVjZXI7XG4gICAgZnVuY3Rpb24gcmVkdWNlcihzdGF0ZSwgYWN0aW9uKSB7XG4gICAgICBpZiAoIV9yZWR1Y2VyKSBfcmVkdWNlciA9IGJ1aWxkUmVkdWNlcigpO1xuICAgICAgcmV0dXJuIF9yZWR1Y2VyKHN0YXRlLCBhY3Rpb24pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRJbml0aWFsU3RhdGUoKSB7XG4gICAgICBpZiAoIV9yZWR1Y2VyKSBfcmVkdWNlciA9IGJ1aWxkUmVkdWNlcigpO1xuICAgICAgcmV0dXJuIF9yZWR1Y2VyLmdldEluaXRpYWxTdGF0ZSgpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBtYWtlU2VsZWN0b3JQcm9wcyhyZWR1Y2VyUGF0aDIsIGluamVjdGVkID0gZmFsc2UpIHtcbiAgICAgIGZ1bmN0aW9uIHNlbGVjdFNsaWNlKHN0YXRlKSB7XG4gICAgICAgIGxldCBzbGljZVN0YXRlID0gc3RhdGVbcmVkdWNlclBhdGgyXTtcbiAgICAgICAgaWYgKHR5cGVvZiBzbGljZVN0YXRlID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaWYgKGluamVjdGVkKSB7XG4gICAgICAgICAgICBzbGljZVN0YXRlID0gZ2V0SW5pdGlhbFN0YXRlKCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE1KSA6IFwic2VsZWN0U2xpY2UgcmV0dXJuZWQgdW5kZWZpbmVkIGZvciBhbiB1bmluamVjdGVkIHNsaWNlIHJlZHVjZXJcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzbGljZVN0YXRlO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gZ2V0U2VsZWN0b3JzKHNlbGVjdFN0YXRlID0gc2VsZWN0U2VsZikge1xuICAgICAgICBjb25zdCBzZWxlY3RvckNhY2hlID0gZ2V0T3JJbnNlcnRDb21wdXRlZChpbmplY3RlZFNlbGVjdG9yQ2FjaGUsIGluamVjdGVkLCAoKSA9PiAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKSk7XG4gICAgICAgIHJldHVybiBnZXRPckluc2VydENvbXB1dGVkKHNlbGVjdG9yQ2FjaGUsIHNlbGVjdFN0YXRlLCAoKSA9PiB7XG4gICAgICAgICAgY29uc3QgbWFwID0ge307XG4gICAgICAgICAgZm9yIChjb25zdCBbbmFtZTIsIHNlbGVjdG9yXSBvZiBPYmplY3QuZW50cmllcyhvcHRpb25zLnNlbGVjdG9ycyA/PyB7fSkpIHtcbiAgICAgICAgICAgIG1hcFtuYW1lMl0gPSB3cmFwU2VsZWN0b3Ioc2VsZWN0b3IsIHNlbGVjdFN0YXRlLCBnZXRJbml0aWFsU3RhdGUsIGluamVjdGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG1hcDtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZWR1Y2VyUGF0aDogcmVkdWNlclBhdGgyLFxuICAgICAgICBnZXRTZWxlY3RvcnMsXG4gICAgICAgIGdldCBzZWxlY3RvcnMoKSB7XG4gICAgICAgICAgcmV0dXJuIGdldFNlbGVjdG9ycyhzZWxlY3RTbGljZSk7XG4gICAgICAgIH0sXG4gICAgICAgIHNlbGVjdFNsaWNlXG4gICAgICB9O1xuICAgIH1cbiAgICBjb25zdCBzbGljZSA9IHtcbiAgICAgIG5hbWUsXG4gICAgICByZWR1Y2VyLFxuICAgICAgYWN0aW9uczogY29udGV4dC5hY3Rpb25DcmVhdG9ycyxcbiAgICAgIGNhc2VSZWR1Y2VyczogY29udGV4dC5zbGljZUNhc2VSZWR1Y2Vyc0J5TmFtZSxcbiAgICAgIGdldEluaXRpYWxTdGF0ZSxcbiAgICAgIC4uLm1ha2VTZWxlY3RvclByb3BzKHJlZHVjZXJQYXRoKSxcbiAgICAgIGluamVjdEludG8oaW5qZWN0YWJsZSwge1xuICAgICAgICByZWR1Y2VyUGF0aDogcGF0aE9wdCxcbiAgICAgICAgLi4uY29uZmlnXG4gICAgICB9ID0ge30pIHtcbiAgICAgICAgY29uc3QgbmV3UmVkdWNlclBhdGggPSBwYXRoT3B0ID8/IHJlZHVjZXJQYXRoO1xuICAgICAgICBpbmplY3RhYmxlLmluamVjdCh7XG4gICAgICAgICAgcmVkdWNlclBhdGg6IG5ld1JlZHVjZXJQYXRoLFxuICAgICAgICAgIHJlZHVjZXJcbiAgICAgICAgfSwgY29uZmlnKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAuLi5zbGljZSxcbiAgICAgICAgICAuLi5tYWtlU2VsZWN0b3JQcm9wcyhuZXdSZWR1Y2VyUGF0aCwgdHJ1ZSlcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBzbGljZTtcbiAgfTtcbn1cbmZ1bmN0aW9uIHdyYXBTZWxlY3RvcihzZWxlY3Rvciwgc2VsZWN0U3RhdGUsIGdldEluaXRpYWxTdGF0ZSwgaW5qZWN0ZWQpIHtcbiAgZnVuY3Rpb24gd3JhcHBlcihyb290U3RhdGUsIC4uLmFyZ3MpIHtcbiAgICBsZXQgc2xpY2VTdGF0ZSA9IHNlbGVjdFN0YXRlKHJvb3RTdGF0ZSk7XG4gICAgaWYgKHR5cGVvZiBzbGljZVN0YXRlID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBpZiAoaW5qZWN0ZWQpIHtcbiAgICAgICAgc2xpY2VTdGF0ZSA9IGdldEluaXRpYWxTdGF0ZSgpO1xuICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTYpIDogXCJzZWxlY3RTdGF0ZSByZXR1cm5lZCB1bmRlZmluZWQgZm9yIGFuIHVuaW5qZWN0ZWQgc2xpY2UgcmVkdWNlclwiKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNlbGVjdG9yKHNsaWNlU3RhdGUsIC4uLmFyZ3MpO1xuICB9XG4gIHdyYXBwZXIudW53cmFwcGVkID0gc2VsZWN0b3I7XG4gIHJldHVybiB3cmFwcGVyO1xufVxudmFyIGNyZWF0ZVNsaWNlID0gLyogQF9fUFVSRV9fICovIGJ1aWxkQ3JlYXRlU2xpY2UoKTtcbmZ1bmN0aW9uIGJ1aWxkUmVkdWNlckNyZWF0b3JzKCkge1xuICBmdW5jdGlvbiBhc3luY1RodW5rKHBheWxvYWRDcmVhdG9yLCBjb25maWcpIHtcbiAgICByZXR1cm4ge1xuICAgICAgX3JlZHVjZXJEZWZpbml0aW9uVHlwZTogXCJhc3luY1RodW5rXCIgLyogYXN5bmNUaHVuayAqLyxcbiAgICAgIHBheWxvYWRDcmVhdG9yLFxuICAgICAgLi4uY29uZmlnXG4gICAgfTtcbiAgfVxuICBhc3luY1RodW5rLndpdGhUeXBlcyA9ICgpID0+IGFzeW5jVGh1bms7XG4gIHJldHVybiB7XG4gICAgcmVkdWNlcihjYXNlUmVkdWNlcikge1xuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe1xuICAgICAgICAvLyBoYWNrIHNvIHRoZSB3cmFwcGluZyBmdW5jdGlvbiBoYXMgdGhlIHNhbWUgbmFtZSBhcyB0aGUgb3JpZ2luYWxcbiAgICAgICAgLy8gd2UgbmVlZCB0byBjcmVhdGUgYSB3cmFwcGVyIHNvIHRoZSBgcmVkdWNlckRlZmluaXRpb25UeXBlYCBpcyBub3QgYXNzaWduZWQgdG8gdGhlIG9yaWdpbmFsXG4gICAgICAgIFtjYXNlUmVkdWNlci5uYW1lXSguLi5hcmdzKSB7XG4gICAgICAgICAgcmV0dXJuIGNhc2VSZWR1Y2VyKC4uLmFyZ3MpO1xuICAgICAgICB9XG4gICAgICB9W2Nhc2VSZWR1Y2VyLm5hbWVdLCB7XG4gICAgICAgIF9yZWR1Y2VyRGVmaW5pdGlvblR5cGU6IFwicmVkdWNlclwiIC8qIHJlZHVjZXIgKi9cbiAgICAgIH0pO1xuICAgIH0sXG4gICAgcHJlcGFyZWRSZWR1Y2VyKHByZXBhcmUsIHJlZHVjZXIpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIF9yZWR1Y2VyRGVmaW5pdGlvblR5cGU6IFwicmVkdWNlcldpdGhQcmVwYXJlXCIgLyogcmVkdWNlcldpdGhQcmVwYXJlICovLFxuICAgICAgICBwcmVwYXJlLFxuICAgICAgICByZWR1Y2VyXG4gICAgICB9O1xuICAgIH0sXG4gICAgYXN5bmNUaHVua1xuICB9O1xufVxuZnVuY3Rpb24gaGFuZGxlTm9ybWFsUmVkdWNlckRlZmluaXRpb24oe1xuICB0eXBlLFxuICByZWR1Y2VyTmFtZSxcbiAgY3JlYXRlTm90YXRpb25cbn0sIG1heWJlUmVkdWNlcldpdGhQcmVwYXJlLCBjb250ZXh0KSB7XG4gIGxldCBjYXNlUmVkdWNlcjtcbiAgbGV0IHByZXBhcmVDYWxsYmFjaztcbiAgaWYgKFwicmVkdWNlclwiIGluIG1heWJlUmVkdWNlcldpdGhQcmVwYXJlKSB7XG4gICAgaWYgKGNyZWF0ZU5vdGF0aW9uICYmICFpc0Nhc2VSZWR1Y2VyV2l0aFByZXBhcmVEZWZpbml0aW9uKG1heWJlUmVkdWNlcldpdGhQcmVwYXJlKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTcpIDogXCJQbGVhc2UgdXNlIHRoZSBgY3JlYXRlLnByZXBhcmVkUmVkdWNlcmAgbm90YXRpb24gZm9yIHByZXBhcmVkIGFjdGlvbiBjcmVhdG9ycyB3aXRoIHRoZSBgY3JlYXRlYCBub3RhdGlvbi5cIik7XG4gICAgfVxuICAgIGNhc2VSZWR1Y2VyID0gbWF5YmVSZWR1Y2VyV2l0aFByZXBhcmUucmVkdWNlcjtcbiAgICBwcmVwYXJlQ2FsbGJhY2sgPSBtYXliZVJlZHVjZXJXaXRoUHJlcGFyZS5wcmVwYXJlO1xuICB9IGVsc2Uge1xuICAgIGNhc2VSZWR1Y2VyID0gbWF5YmVSZWR1Y2VyV2l0aFByZXBhcmU7XG4gIH1cbiAgY29udGV4dC5hZGRDYXNlKHR5cGUsIGNhc2VSZWR1Y2VyKS5leHBvc2VDYXNlUmVkdWNlcihyZWR1Y2VyTmFtZSwgY2FzZVJlZHVjZXIpLmV4cG9zZUFjdGlvbihyZWR1Y2VyTmFtZSwgcHJlcGFyZUNhbGxiYWNrID8gY3JlYXRlQWN0aW9uKHR5cGUsIHByZXBhcmVDYWxsYmFjaykgOiBjcmVhdGVBY3Rpb24odHlwZSkpO1xufVxuZnVuY3Rpb24gaXNBc3luY1RodW5rU2xpY2VSZWR1Y2VyRGVmaW5pdGlvbihyZWR1Y2VyRGVmaW5pdGlvbikge1xuICByZXR1cm4gcmVkdWNlckRlZmluaXRpb24uX3JlZHVjZXJEZWZpbml0aW9uVHlwZSA9PT0gXCJhc3luY1RodW5rXCIgLyogYXN5bmNUaHVuayAqLztcbn1cbmZ1bmN0aW9uIGlzQ2FzZVJlZHVjZXJXaXRoUHJlcGFyZURlZmluaXRpb24ocmVkdWNlckRlZmluaXRpb24pIHtcbiAgcmV0dXJuIHJlZHVjZXJEZWZpbml0aW9uLl9yZWR1Y2VyRGVmaW5pdGlvblR5cGUgPT09IFwicmVkdWNlcldpdGhQcmVwYXJlXCIgLyogcmVkdWNlcldpdGhQcmVwYXJlICovO1xufVxuZnVuY3Rpb24gaGFuZGxlVGh1bmtDYXNlUmVkdWNlckRlZmluaXRpb24oe1xuICB0eXBlLFxuICByZWR1Y2VyTmFtZVxufSwgcmVkdWNlckRlZmluaXRpb24sIGNvbnRleHQsIGNBVCkge1xuICBpZiAoIWNBVCkge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE4KSA6IFwiQ2Fubm90IHVzZSBgY3JlYXRlLmFzeW5jVGh1bmtgIGluIHRoZSBidWlsdC1pbiBgY3JlYXRlU2xpY2VgLiBVc2UgYGJ1aWxkQ3JlYXRlU2xpY2UoeyBjcmVhdG9yczogeyBhc3luY1RodW5rOiBhc3luY1RodW5rQ3JlYXRvciB9IH0pYCB0byBjcmVhdGUgYSBjdXN0b21pc2VkIHZlcnNpb24gb2YgYGNyZWF0ZVNsaWNlYC5cIik7XG4gIH1cbiAgY29uc3Qge1xuICAgIHBheWxvYWRDcmVhdG9yLFxuICAgIGZ1bGZpbGxlZCxcbiAgICBwZW5kaW5nLFxuICAgIHJlamVjdGVkLFxuICAgIHNldHRsZWQsXG4gICAgb3B0aW9uc1xuICB9ID0gcmVkdWNlckRlZmluaXRpb247XG4gIGNvbnN0IHRodW5rID0gY0FUKHR5cGUsIHBheWxvYWRDcmVhdG9yLCBvcHRpb25zKTtcbiAgY29udGV4dC5leHBvc2VBY3Rpb24ocmVkdWNlck5hbWUsIHRodW5rKTtcbiAgaWYgKGZ1bGZpbGxlZCkge1xuICAgIGNvbnRleHQuYWRkQ2FzZSh0aHVuay5mdWxmaWxsZWQsIGZ1bGZpbGxlZCk7XG4gIH1cbiAgaWYgKHBlbmRpbmcpIHtcbiAgICBjb250ZXh0LmFkZENhc2UodGh1bmsucGVuZGluZywgcGVuZGluZyk7XG4gIH1cbiAgaWYgKHJlamVjdGVkKSB7XG4gICAgY29udGV4dC5hZGRDYXNlKHRodW5rLnJlamVjdGVkLCByZWplY3RlZCk7XG4gIH1cbiAgaWYgKHNldHRsZWQpIHtcbiAgICBjb250ZXh0LmFkZE1hdGNoZXIodGh1bmsuc2V0dGxlZCwgc2V0dGxlZCk7XG4gIH1cbiAgY29udGV4dC5leHBvc2VDYXNlUmVkdWNlcihyZWR1Y2VyTmFtZSwge1xuICAgIGZ1bGZpbGxlZDogZnVsZmlsbGVkIHx8IG5vb3AsXG4gICAgcGVuZGluZzogcGVuZGluZyB8fCBub29wLFxuICAgIHJlamVjdGVkOiByZWplY3RlZCB8fCBub29wLFxuICAgIHNldHRsZWQ6IHNldHRsZWQgfHwgbm9vcFxuICB9KTtcbn1cbmZ1bmN0aW9uIG5vb3AoKSB7XG59XG5cbi8vIHNyYy9lbnRpdGllcy9lbnRpdHlfc3RhdGUudHNcbmZ1bmN0aW9uIGdldEluaXRpYWxFbnRpdHlTdGF0ZSgpIHtcbiAgcmV0dXJuIHtcbiAgICBpZHM6IFtdLFxuICAgIGVudGl0aWVzOiB7fVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlSW5pdGlhbFN0YXRlRmFjdG9yeShzdGF0ZUFkYXB0ZXIpIHtcbiAgZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKGFkZGl0aW9uYWxTdGF0ZSA9IHt9LCBlbnRpdGllcykge1xuICAgIGNvbnN0IHN0YXRlID0gT2JqZWN0LmFzc2lnbihnZXRJbml0aWFsRW50aXR5U3RhdGUoKSwgYWRkaXRpb25hbFN0YXRlKTtcbiAgICByZXR1cm4gZW50aXRpZXMgPyBzdGF0ZUFkYXB0ZXIuc2V0QWxsKHN0YXRlLCBlbnRpdGllcykgOiBzdGF0ZTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGdldEluaXRpYWxTdGF0ZVxuICB9O1xufVxuXG4vLyBzcmMvZW50aXRpZXMvc3RhdGVfc2VsZWN0b3JzLnRzXG5mdW5jdGlvbiBjcmVhdGVTZWxlY3RvcnNGYWN0b3J5KCkge1xuICBmdW5jdGlvbiBnZXRTZWxlY3RvcnMoc2VsZWN0U3RhdGUsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHtcbiAgICAgIGNyZWF0ZVNlbGVjdG9yOiBjcmVhdGVTZWxlY3RvcjIgPSBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvclxuICAgIH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IHNlbGVjdElkcyA9IChzdGF0ZSkgPT4gc3RhdGUuaWRzO1xuICAgIGNvbnN0IHNlbGVjdEVudGl0aWVzID0gKHN0YXRlKSA9PiBzdGF0ZS5lbnRpdGllcztcbiAgICBjb25zdCBzZWxlY3RBbGwgPSBjcmVhdGVTZWxlY3RvcjIoc2VsZWN0SWRzLCBzZWxlY3RFbnRpdGllcywgKGlkcywgZW50aXRpZXMpID0+IGlkcy5tYXAoKGlkKSA9PiBlbnRpdGllc1tpZF0pKTtcbiAgICBjb25zdCBzZWxlY3RJZCA9IChfLCBpZCkgPT4gaWQ7XG4gICAgY29uc3Qgc2VsZWN0QnlJZCA9IChlbnRpdGllcywgaWQpID0+IGVudGl0aWVzW2lkXTtcbiAgICBjb25zdCBzZWxlY3RUb3RhbCA9IGNyZWF0ZVNlbGVjdG9yMihzZWxlY3RJZHMsIChpZHMpID0+IGlkcy5sZW5ndGgpO1xuICAgIGlmICghc2VsZWN0U3RhdGUpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNlbGVjdElkcyxcbiAgICAgICAgc2VsZWN0RW50aXRpZXMsXG4gICAgICAgIHNlbGVjdEFsbCxcbiAgICAgICAgc2VsZWN0VG90YWwsXG4gICAgICAgIHNlbGVjdEJ5SWQ6IGNyZWF0ZVNlbGVjdG9yMihzZWxlY3RFbnRpdGllcywgc2VsZWN0SWQsIHNlbGVjdEJ5SWQpXG4gICAgICB9O1xuICAgIH1cbiAgICBjb25zdCBzZWxlY3RHbG9iYWxpemVkRW50aXRpZXMgPSBjcmVhdGVTZWxlY3RvcjIoc2VsZWN0U3RhdGUsIHNlbGVjdEVudGl0aWVzKTtcbiAgICByZXR1cm4ge1xuICAgICAgc2VsZWN0SWRzOiBjcmVhdGVTZWxlY3RvcjIoc2VsZWN0U3RhdGUsIHNlbGVjdElkcyksXG4gICAgICBzZWxlY3RFbnRpdGllczogc2VsZWN0R2xvYmFsaXplZEVudGl0aWVzLFxuICAgICAgc2VsZWN0QWxsOiBjcmVhdGVTZWxlY3RvcjIoc2VsZWN0U3RhdGUsIHNlbGVjdEFsbCksXG4gICAgICBzZWxlY3RUb3RhbDogY3JlYXRlU2VsZWN0b3IyKHNlbGVjdFN0YXRlLCBzZWxlY3RUb3RhbCksXG4gICAgICBzZWxlY3RCeUlkOiBjcmVhdGVTZWxlY3RvcjIoc2VsZWN0R2xvYmFsaXplZEVudGl0aWVzLCBzZWxlY3RJZCwgc2VsZWN0QnlJZClcbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgZ2V0U2VsZWN0b3JzXG4gIH07XG59XG5cbi8vIHNyYy9lbnRpdGllcy9zdGF0ZV9hZGFwdGVyLnRzXG5pbXBvcnQgeyBwcm9kdWNlIGFzIGNyZWF0ZU5leHRTdGF0ZTMsIGlzRHJhZnQgYXMgaXNEcmFmdDMgfSBmcm9tIFwiaW1tZXJcIjtcbnZhciBpc0RyYWZ0VHlwZWQgPSBpc0RyYWZ0MztcbmZ1bmN0aW9uIGNyZWF0ZVNpbmdsZUFyZ3VtZW50U3RhdGVPcGVyYXRvcihtdXRhdG9yKSB7XG4gIGNvbnN0IG9wZXJhdG9yID0gY3JlYXRlU3RhdGVPcGVyYXRvcigoXywgc3RhdGUpID0+IG11dGF0b3Ioc3RhdGUpKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIG9wZXJhdGlvbihzdGF0ZSkge1xuICAgIHJldHVybiBvcGVyYXRvcihzdGF0ZSwgdm9pZCAwKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVN0YXRlT3BlcmF0b3IobXV0YXRvcikge1xuICByZXR1cm4gZnVuY3Rpb24gb3BlcmF0aW9uKHN0YXRlLCBhcmcpIHtcbiAgICBmdW5jdGlvbiBpc1BheWxvYWRBY3Rpb25Bcmd1bWVudChhcmcyKSB7XG4gICAgICByZXR1cm4gaXNGU0EoYXJnMik7XG4gICAgfVxuICAgIGNvbnN0IHJ1bk11dGF0b3IgPSAoZHJhZnQpID0+IHtcbiAgICAgIGlmIChpc1BheWxvYWRBY3Rpb25Bcmd1bWVudChhcmcpKSB7XG4gICAgICAgIG11dGF0b3IoYXJnLnBheWxvYWQsIGRyYWZ0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG11dGF0b3IoYXJnLCBkcmFmdCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBpZiAoaXNEcmFmdFR5cGVkKHN0YXRlKSkge1xuICAgICAgcnVuTXV0YXRvcihzdGF0ZSk7XG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVOZXh0U3RhdGUzKHN0YXRlLCBydW5NdXRhdG9yKTtcbiAgfTtcbn1cblxuLy8gc3JjL2VudGl0aWVzL3V0aWxzLnRzXG5pbXBvcnQgeyBjdXJyZW50IGFzIGN1cnJlbnQyLCBpc0RyYWZ0IGFzIGlzRHJhZnQ0IH0gZnJvbSBcImltbWVyXCI7XG5mdW5jdGlvbiBzZWxlY3RJZFZhbHVlKGVudGl0eSwgc2VsZWN0SWQpIHtcbiAgY29uc3Qga2V5ID0gc2VsZWN0SWQoZW50aXR5KTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiBrZXkgPT09IHZvaWQgMCkge1xuICAgIGNvbnNvbGUud2FybihcIlRoZSBlbnRpdHkgcGFzc2VkIHRvIHRoZSBgc2VsZWN0SWRgIGltcGxlbWVudGF0aW9uIHJldHVybmVkIHVuZGVmaW5lZC5cIiwgXCJZb3Ugc2hvdWxkIHByb2JhYmx5IHByb3ZpZGUgeW91ciBvd24gYHNlbGVjdElkYCBpbXBsZW1lbnRhdGlvbi5cIiwgXCJUaGUgZW50aXR5IHRoYXQgd2FzIHBhc3NlZDpcIiwgZW50aXR5LCBcIlRoZSBgc2VsZWN0SWRgIGltcGxlbWVudGF0aW9uOlwiLCBzZWxlY3RJZC50b1N0cmluZygpKTtcbiAgfVxuICByZXR1cm4ga2V5O1xufVxuZnVuY3Rpb24gZW5zdXJlRW50aXRpZXNBcnJheShlbnRpdGllcykge1xuICBpZiAoIUFycmF5LmlzQXJyYXkoZW50aXRpZXMpKSB7XG4gICAgZW50aXRpZXMgPSBPYmplY3QudmFsdWVzKGVudGl0aWVzKTtcbiAgfVxuICByZXR1cm4gZW50aXRpZXM7XG59XG5mdW5jdGlvbiBnZXRDdXJyZW50KHZhbHVlKSB7XG4gIHJldHVybiBpc0RyYWZ0NCh2YWx1ZSkgPyBjdXJyZW50Mih2YWx1ZSkgOiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIHNwbGl0QWRkZWRVcGRhdGVkRW50aXRpZXMobmV3RW50aXRpZXMsIHNlbGVjdElkLCBzdGF0ZSkge1xuICBuZXdFbnRpdGllcyA9IGVuc3VyZUVudGl0aWVzQXJyYXkobmV3RW50aXRpZXMpO1xuICBjb25zdCBleGlzdGluZ0lkc0FycmF5ID0gZ2V0Q3VycmVudChzdGF0ZS5pZHMpO1xuICBjb25zdCBleGlzdGluZ0lkcyA9IG5ldyBTZXQoZXhpc3RpbmdJZHNBcnJheSk7XG4gIGNvbnN0IGFkZGVkID0gW107XG4gIGNvbnN0IHVwZGF0ZWQgPSBbXTtcbiAgZm9yIChjb25zdCBlbnRpdHkgb2YgbmV3RW50aXRpZXMpIHtcbiAgICBjb25zdCBpZCA9IHNlbGVjdElkVmFsdWUoZW50aXR5LCBzZWxlY3RJZCk7XG4gICAgaWYgKGV4aXN0aW5nSWRzLmhhcyhpZCkpIHtcbiAgICAgIHVwZGF0ZWQucHVzaCh7XG4gICAgICAgIGlkLFxuICAgICAgICBjaGFuZ2VzOiBlbnRpdHlcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBhZGRlZC5wdXNoKGVudGl0eSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBbYWRkZWQsIHVwZGF0ZWQsIGV4aXN0aW5nSWRzQXJyYXldO1xufVxuXG4vLyBzcmMvZW50aXRpZXMvdW5zb3J0ZWRfc3RhdGVfYWRhcHRlci50c1xuZnVuY3Rpb24gY3JlYXRlVW5zb3J0ZWRTdGF0ZUFkYXB0ZXIoc2VsZWN0SWQpIHtcbiAgZnVuY3Rpb24gYWRkT25lTXV0YWJseShlbnRpdHksIHN0YXRlKSB7XG4gICAgY29uc3Qga2V5ID0gc2VsZWN0SWRWYWx1ZShlbnRpdHksIHNlbGVjdElkKTtcbiAgICBpZiAoa2V5IGluIHN0YXRlLmVudGl0aWVzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHN0YXRlLmlkcy5wdXNoKGtleSk7XG4gICAgc3RhdGUuZW50aXRpZXNba2V5XSA9IGVudGl0eTtcbiAgfVxuICBmdW5jdGlvbiBhZGRNYW55TXV0YWJseShuZXdFbnRpdGllcywgc3RhdGUpIHtcbiAgICBuZXdFbnRpdGllcyA9IGVuc3VyZUVudGl0aWVzQXJyYXkobmV3RW50aXRpZXMpO1xuICAgIGZvciAoY29uc3QgZW50aXR5IG9mIG5ld0VudGl0aWVzKSB7XG4gICAgICBhZGRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBzZXRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpIHtcbiAgICBjb25zdCBrZXkgPSBzZWxlY3RJZFZhbHVlKGVudGl0eSwgc2VsZWN0SWQpO1xuICAgIGlmICghKGtleSBpbiBzdGF0ZS5lbnRpdGllcykpIHtcbiAgICAgIHN0YXRlLmlkcy5wdXNoKGtleSk7XG4gICAgfVxuICAgIDtcbiAgICBzdGF0ZS5lbnRpdGllc1trZXldID0gZW50aXR5O1xuICB9XG4gIGZ1bmN0aW9uIHNldE1hbnlNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSkge1xuICAgIG5ld0VudGl0aWVzID0gZW5zdXJlRW50aXRpZXNBcnJheShuZXdFbnRpdGllcyk7XG4gICAgZm9yIChjb25zdCBlbnRpdHkgb2YgbmV3RW50aXRpZXMpIHtcbiAgICAgIHNldE9uZU11dGFibHkoZW50aXR5LCBzdGF0ZSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHNldEFsbE11dGFibHkobmV3RW50aXRpZXMsIHN0YXRlKSB7XG4gICAgbmV3RW50aXRpZXMgPSBlbnN1cmVFbnRpdGllc0FycmF5KG5ld0VudGl0aWVzKTtcbiAgICBzdGF0ZS5pZHMgPSBbXTtcbiAgICBzdGF0ZS5lbnRpdGllcyA9IHt9O1xuICAgIGFkZE1hbnlNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSk7XG4gIH1cbiAgZnVuY3Rpb24gcmVtb3ZlT25lTXV0YWJseShrZXksIHN0YXRlKSB7XG4gICAgcmV0dXJuIHJlbW92ZU1hbnlNdXRhYmx5KFtrZXldLCBzdGF0ZSk7XG4gIH1cbiAgZnVuY3Rpb24gcmVtb3ZlTWFueU11dGFibHkoa2V5cywgc3RhdGUpIHtcbiAgICBsZXQgZGlkTXV0YXRlID0gZmFsc2U7XG4gICAga2V5cy5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGlmIChrZXkgaW4gc3RhdGUuZW50aXRpZXMpIHtcbiAgICAgICAgZGVsZXRlIHN0YXRlLmVudGl0aWVzW2tleV07XG4gICAgICAgIGRpZE11dGF0ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKGRpZE11dGF0ZSkge1xuICAgICAgc3RhdGUuaWRzID0gc3RhdGUuaWRzLmZpbHRlcigoaWQpID0+IGlkIGluIHN0YXRlLmVudGl0aWVzKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gcmVtb3ZlQWxsTXV0YWJseShzdGF0ZSkge1xuICAgIE9iamVjdC5hc3NpZ24oc3RhdGUsIHtcbiAgICAgIGlkczogW10sXG4gICAgICBlbnRpdGllczoge31cbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiB0YWtlTmV3S2V5KGtleXMsIHVwZGF0ZSwgc3RhdGUpIHtcbiAgICBjb25zdCBvcmlnaW5hbDMgPSBzdGF0ZS5lbnRpdGllc1t1cGRhdGUuaWRdO1xuICAgIGlmIChvcmlnaW5hbDMgPT09IHZvaWQgMCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCB1cGRhdGVkID0gT2JqZWN0LmFzc2lnbih7fSwgb3JpZ2luYWwzLCB1cGRhdGUuY2hhbmdlcyk7XG4gICAgY29uc3QgbmV3S2V5ID0gc2VsZWN0SWRWYWx1ZSh1cGRhdGVkLCBzZWxlY3RJZCk7XG4gICAgY29uc3QgaGFzTmV3S2V5ID0gbmV3S2V5ICE9PSB1cGRhdGUuaWQ7XG4gICAgaWYgKGhhc05ld0tleSkge1xuICAgICAga2V5c1t1cGRhdGUuaWRdID0gbmV3S2V5O1xuICAgICAgZGVsZXRlIHN0YXRlLmVudGl0aWVzW3VwZGF0ZS5pZF07XG4gICAgfVxuICAgIDtcbiAgICBzdGF0ZS5lbnRpdGllc1tuZXdLZXldID0gdXBkYXRlZDtcbiAgICByZXR1cm4gaGFzTmV3S2V5O1xuICB9XG4gIGZ1bmN0aW9uIHVwZGF0ZU9uZU11dGFibHkodXBkYXRlLCBzdGF0ZSkge1xuICAgIHJldHVybiB1cGRhdGVNYW55TXV0YWJseShbdXBkYXRlXSwgc3RhdGUpO1xuICB9XG4gIGZ1bmN0aW9uIHVwZGF0ZU1hbnlNdXRhYmx5KHVwZGF0ZXMsIHN0YXRlKSB7XG4gICAgY29uc3QgbmV3S2V5cyA9IHt9O1xuICAgIGNvbnN0IHVwZGF0ZXNQZXJFbnRpdHkgPSB7fTtcbiAgICB1cGRhdGVzLmZvckVhY2goKHVwZGF0ZSkgPT4ge1xuICAgICAgaWYgKHVwZGF0ZS5pZCBpbiBzdGF0ZS5lbnRpdGllcykge1xuICAgICAgICB1cGRhdGVzUGVyRW50aXR5W3VwZGF0ZS5pZF0gPSB7XG4gICAgICAgICAgaWQ6IHVwZGF0ZS5pZCxcbiAgICAgICAgICAvLyBTcHJlYWRzIGlnbm9yZSBmYWxzeSB2YWx1ZXMsIHNvIHRoaXMgd29ya3MgZXZlbiBpZiB0aGVyZSBpc24ndFxuICAgICAgICAgIC8vIGFuIGV4aXN0aW5nIHVwZGF0ZSBhbHJlYWR5IGF0IHRoaXMga2V5XG4gICAgICAgICAgY2hhbmdlczoge1xuICAgICAgICAgICAgLi4udXBkYXRlc1BlckVudGl0eVt1cGRhdGUuaWRdPy5jaGFuZ2VzLFxuICAgICAgICAgICAgLi4udXBkYXRlLmNoYW5nZXNcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSk7XG4gICAgdXBkYXRlcyA9IE9iamVjdC52YWx1ZXModXBkYXRlc1BlckVudGl0eSk7XG4gICAgY29uc3QgZGlkTXV0YXRlRW50aXRpZXMgPSB1cGRhdGVzLmxlbmd0aCA+IDA7XG4gICAgaWYgKGRpZE11dGF0ZUVudGl0aWVzKSB7XG4gICAgICBjb25zdCBkaWRNdXRhdGVJZHMgPSB1cGRhdGVzLmZpbHRlcigodXBkYXRlKSA9PiB0YWtlTmV3S2V5KG5ld0tleXMsIHVwZGF0ZSwgc3RhdGUpKS5sZW5ndGggPiAwO1xuICAgICAgaWYgKGRpZE11dGF0ZUlkcykge1xuICAgICAgICBzdGF0ZS5pZHMgPSBPYmplY3QudmFsdWVzKHN0YXRlLmVudGl0aWVzKS5tYXAoKGUpID0+IHNlbGVjdElkVmFsdWUoZSwgc2VsZWN0SWQpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gdXBzZXJ0T25lTXV0YWJseShlbnRpdHksIHN0YXRlKSB7XG4gICAgcmV0dXJuIHVwc2VydE1hbnlNdXRhYmx5KFtlbnRpdHldLCBzdGF0ZSk7XG4gIH1cbiAgZnVuY3Rpb24gdXBzZXJ0TWFueU11dGFibHkobmV3RW50aXRpZXMsIHN0YXRlKSB7XG4gICAgY29uc3QgW2FkZGVkLCB1cGRhdGVkXSA9IHNwbGl0QWRkZWRVcGRhdGVkRW50aXRpZXMobmV3RW50aXRpZXMsIHNlbGVjdElkLCBzdGF0ZSk7XG4gICAgdXBkYXRlTWFueU11dGFibHkodXBkYXRlZCwgc3RhdGUpO1xuICAgIGFkZE1hbnlNdXRhYmx5KGFkZGVkLCBzdGF0ZSk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICByZW1vdmVBbGw6IGNyZWF0ZVNpbmdsZUFyZ3VtZW50U3RhdGVPcGVyYXRvcihyZW1vdmVBbGxNdXRhYmx5KSxcbiAgICBhZGRPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3IoYWRkT25lTXV0YWJseSksXG4gICAgYWRkTWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcihhZGRNYW55TXV0YWJseSksXG4gICAgc2V0T25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHNldE9uZU11dGFibHkpLFxuICAgIHNldE1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3Ioc2V0TWFueU11dGFibHkpLFxuICAgIHNldEFsbDogY3JlYXRlU3RhdGVPcGVyYXRvcihzZXRBbGxNdXRhYmx5KSxcbiAgICB1cGRhdGVPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3IodXBkYXRlT25lTXV0YWJseSksXG4gICAgdXBkYXRlTWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cGRhdGVNYW55TXV0YWJseSksXG4gICAgdXBzZXJ0T25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHVwc2VydE9uZU11dGFibHkpLFxuICAgIHVwc2VydE1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3IodXBzZXJ0TWFueU11dGFibHkpLFxuICAgIHJlbW92ZU9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcihyZW1vdmVPbmVNdXRhYmx5KSxcbiAgICByZW1vdmVNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHJlbW92ZU1hbnlNdXRhYmx5KVxuICB9O1xufVxuXG4vLyBzcmMvZW50aXRpZXMvc29ydGVkX3N0YXRlX2FkYXB0ZXIudHNcbmZ1bmN0aW9uIGZpbmRJbnNlcnRJbmRleChzb3J0ZWRJdGVtcywgaXRlbSwgY29tcGFyaXNvbkZ1bmN0aW9uKSB7XG4gIGxldCBsb3dJbmRleCA9IDA7XG4gIGxldCBoaWdoSW5kZXggPSBzb3J0ZWRJdGVtcy5sZW5ndGg7XG4gIHdoaWxlIChsb3dJbmRleCA8IGhpZ2hJbmRleCkge1xuICAgIGxldCBtaWRkbGVJbmRleCA9IGxvd0luZGV4ICsgaGlnaEluZGV4ID4+PiAxO1xuICAgIGNvbnN0IGN1cnJlbnRJdGVtID0gc29ydGVkSXRlbXNbbWlkZGxlSW5kZXhdO1xuICAgIGNvbnN0IHJlcyA9IGNvbXBhcmlzb25GdW5jdGlvbihpdGVtLCBjdXJyZW50SXRlbSk7XG4gICAgaWYgKHJlcyA+PSAwKSB7XG4gICAgICBsb3dJbmRleCA9IG1pZGRsZUluZGV4ICsgMTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGlnaEluZGV4ID0gbWlkZGxlSW5kZXg7XG4gICAgfVxuICB9XG4gIHJldHVybiBsb3dJbmRleDtcbn1cbmZ1bmN0aW9uIGluc2VydChzb3J0ZWRJdGVtcywgaXRlbSwgY29tcGFyaXNvbkZ1bmN0aW9uKSB7XG4gIGNvbnN0IGluc2VydEF0SW5kZXggPSBmaW5kSW5zZXJ0SW5kZXgoc29ydGVkSXRlbXMsIGl0ZW0sIGNvbXBhcmlzb25GdW5jdGlvbik7XG4gIHNvcnRlZEl0ZW1zLnNwbGljZShpbnNlcnRBdEluZGV4LCAwLCBpdGVtKTtcbiAgcmV0dXJuIHNvcnRlZEl0ZW1zO1xufVxuZnVuY3Rpb24gY3JlYXRlU29ydGVkU3RhdGVBZGFwdGVyKHNlbGVjdElkLCBjb21wYXJlcikge1xuICBjb25zdCB7XG4gICAgcmVtb3ZlT25lLFxuICAgIHJlbW92ZU1hbnksXG4gICAgcmVtb3ZlQWxsXG4gIH0gPSBjcmVhdGVVbnNvcnRlZFN0YXRlQWRhcHRlcihzZWxlY3RJZCk7XG4gIGZ1bmN0aW9uIGFkZE9uZU11dGFibHkoZW50aXR5LCBzdGF0ZSkge1xuICAgIHJldHVybiBhZGRNYW55TXV0YWJseShbZW50aXR5XSwgc3RhdGUpO1xuICB9XG4gIGZ1bmN0aW9uIGFkZE1hbnlNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSwgZXhpc3RpbmdJZHMpIHtcbiAgICBuZXdFbnRpdGllcyA9IGVuc3VyZUVudGl0aWVzQXJyYXkobmV3RW50aXRpZXMpO1xuICAgIGNvbnN0IGV4aXN0aW5nS2V5cyA9IG5ldyBTZXQoZXhpc3RpbmdJZHMgPz8gZ2V0Q3VycmVudChzdGF0ZS5pZHMpKTtcbiAgICBjb25zdCBtb2RlbHMgPSBuZXdFbnRpdGllcy5maWx0ZXIoKG1vZGVsKSA9PiAhZXhpc3RpbmdLZXlzLmhhcyhzZWxlY3RJZFZhbHVlKG1vZGVsLCBzZWxlY3RJZCkpKTtcbiAgICBpZiAobW9kZWxzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgbWVyZ2VGdW5jdGlvbihzdGF0ZSwgbW9kZWxzKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gc2V0T25lTXV0YWJseShlbnRpdHksIHN0YXRlKSB7XG4gICAgcmV0dXJuIHNldE1hbnlNdXRhYmx5KFtlbnRpdHldLCBzdGF0ZSk7XG4gIH1cbiAgZnVuY3Rpb24gc2V0TWFueU11dGFibHkobmV3RW50aXRpZXMsIHN0YXRlKSB7XG4gICAgbmV3RW50aXRpZXMgPSBlbnN1cmVFbnRpdGllc0FycmF5KG5ld0VudGl0aWVzKTtcbiAgICBpZiAobmV3RW50aXRpZXMubGVuZ3RoICE9PSAwKSB7XG4gICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgbmV3RW50aXRpZXMpIHtcbiAgICAgICAgZGVsZXRlIHN0YXRlLmVudGl0aWVzW3NlbGVjdElkKGl0ZW0pXTtcbiAgICAgIH1cbiAgICAgIG1lcmdlRnVuY3Rpb24oc3RhdGUsIG5ld0VudGl0aWVzKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gc2V0QWxsTXV0YWJseShuZXdFbnRpdGllcywgc3RhdGUpIHtcbiAgICBuZXdFbnRpdGllcyA9IGVuc3VyZUVudGl0aWVzQXJyYXkobmV3RW50aXRpZXMpO1xuICAgIHN0YXRlLmVudGl0aWVzID0ge307XG4gICAgc3RhdGUuaWRzID0gW107XG4gICAgYWRkTWFueU11dGFibHkobmV3RW50aXRpZXMsIHN0YXRlLCBbXSk7XG4gIH1cbiAgZnVuY3Rpb24gdXBkYXRlT25lTXV0YWJseSh1cGRhdGUsIHN0YXRlKSB7XG4gICAgcmV0dXJuIHVwZGF0ZU1hbnlNdXRhYmx5KFt1cGRhdGVdLCBzdGF0ZSk7XG4gIH1cbiAgZnVuY3Rpb24gdXBkYXRlTWFueU11dGFibHkodXBkYXRlcywgc3RhdGUpIHtcbiAgICBsZXQgYXBwbGllZFVwZGF0ZXMgPSBmYWxzZTtcbiAgICBsZXQgcmVwbGFjZWRJZHMgPSBmYWxzZTtcbiAgICBmb3IgKGxldCB1cGRhdGUgb2YgdXBkYXRlcykge1xuICAgICAgY29uc3QgZW50aXR5ID0gc3RhdGUuZW50aXRpZXNbdXBkYXRlLmlkXTtcbiAgICAgIGlmICghZW50aXR5KSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgYXBwbGllZFVwZGF0ZXMgPSB0cnVlO1xuICAgICAgT2JqZWN0LmFzc2lnbihlbnRpdHksIHVwZGF0ZS5jaGFuZ2VzKTtcbiAgICAgIGNvbnN0IG5ld0lkID0gc2VsZWN0SWQoZW50aXR5KTtcbiAgICAgIGlmICh1cGRhdGUuaWQgIT09IG5ld0lkKSB7XG4gICAgICAgIHJlcGxhY2VkSWRzID0gdHJ1ZTtcbiAgICAgICAgZGVsZXRlIHN0YXRlLmVudGl0aWVzW3VwZGF0ZS5pZF07XG4gICAgICAgIGNvbnN0IG9sZEluZGV4ID0gc3RhdGUuaWRzLmluZGV4T2YodXBkYXRlLmlkKTtcbiAgICAgICAgc3RhdGUuaWRzW29sZEluZGV4XSA9IG5ld0lkO1xuICAgICAgICBzdGF0ZS5lbnRpdGllc1tuZXdJZF0gPSBlbnRpdHk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChhcHBsaWVkVXBkYXRlcykge1xuICAgICAgbWVyZ2VGdW5jdGlvbihzdGF0ZSwgW10sIGFwcGxpZWRVcGRhdGVzLCByZXBsYWNlZElkcyk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHVwc2VydE9uZU11dGFibHkoZW50aXR5LCBzdGF0ZSkge1xuICAgIHJldHVybiB1cHNlcnRNYW55TXV0YWJseShbZW50aXR5XSwgc3RhdGUpO1xuICB9XG4gIGZ1bmN0aW9uIHVwc2VydE1hbnlNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSkge1xuICAgIGNvbnN0IFthZGRlZCwgdXBkYXRlZCwgZXhpc3RpbmdJZHNBcnJheV0gPSBzcGxpdEFkZGVkVXBkYXRlZEVudGl0aWVzKG5ld0VudGl0aWVzLCBzZWxlY3RJZCwgc3RhdGUpO1xuICAgIGlmICh1cGRhdGVkLmxlbmd0aCkge1xuICAgICAgdXBkYXRlTWFueU11dGFibHkodXBkYXRlZCwgc3RhdGUpO1xuICAgIH1cbiAgICBpZiAoYWRkZWQubGVuZ3RoKSB7XG4gICAgICBhZGRNYW55TXV0YWJseShhZGRlZCwgc3RhdGUsIGV4aXN0aW5nSWRzQXJyYXkpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBhcmVBcnJheXNFcXVhbChhLCBiKSB7XG4gICAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChhW2ldID09PSBiW2ldKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBjb25zdCBtZXJnZUZ1bmN0aW9uID0gKHN0YXRlLCBhZGRlZEl0ZW1zLCBhcHBsaWVkVXBkYXRlcywgcmVwbGFjZWRJZHMpID0+IHtcbiAgICBjb25zdCBjdXJyZW50RW50aXRpZXMgPSBnZXRDdXJyZW50KHN0YXRlLmVudGl0aWVzKTtcbiAgICBjb25zdCBjdXJyZW50SWRzID0gZ2V0Q3VycmVudChzdGF0ZS5pZHMpO1xuICAgIGNvbnN0IHN0YXRlRW50aXRpZXMgPSBzdGF0ZS5lbnRpdGllcztcbiAgICBsZXQgaWRzID0gY3VycmVudElkcztcbiAgICBpZiAocmVwbGFjZWRJZHMpIHtcbiAgICAgIGlkcyA9IG5ldyBTZXQoY3VycmVudElkcyk7XG4gICAgfVxuICAgIGxldCBzb3J0ZWRFbnRpdGllcyA9IFtdO1xuICAgIGZvciAoY29uc3QgaWQgb2YgaWRzKSB7XG4gICAgICBjb25zdCBlbnRpdHkgPSBjdXJyZW50RW50aXRpZXNbaWRdO1xuICAgICAgaWYgKGVudGl0eSkge1xuICAgICAgICBzb3J0ZWRFbnRpdGllcy5wdXNoKGVudGl0eSk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHdhc1ByZXZpb3VzbHlFbXB0eSA9IHNvcnRlZEVudGl0aWVzLmxlbmd0aCA9PT0gMDtcbiAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgYWRkZWRJdGVtcykge1xuICAgICAgc3RhdGVFbnRpdGllc1tzZWxlY3RJZChpdGVtKV0gPSBpdGVtO1xuICAgICAgaWYgKCF3YXNQcmV2aW91c2x5RW1wdHkpIHtcbiAgICAgICAgaW5zZXJ0KHNvcnRlZEVudGl0aWVzLCBpdGVtLCBjb21wYXJlcik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh3YXNQcmV2aW91c2x5RW1wdHkpIHtcbiAgICAgIHNvcnRlZEVudGl0aWVzID0gYWRkZWRJdGVtcy5zbGljZSgpLnNvcnQoY29tcGFyZXIpO1xuICAgIH0gZWxzZSBpZiAoYXBwbGllZFVwZGF0ZXMpIHtcbiAgICAgIHNvcnRlZEVudGl0aWVzLnNvcnQoY29tcGFyZXIpO1xuICAgIH1cbiAgICBjb25zdCBuZXdTb3J0ZWRJZHMgPSBzb3J0ZWRFbnRpdGllcy5tYXAoc2VsZWN0SWQpO1xuICAgIGlmICghYXJlQXJyYXlzRXF1YWwoY3VycmVudElkcywgbmV3U29ydGVkSWRzKSkge1xuICAgICAgc3RhdGUuaWRzID0gbmV3U29ydGVkSWRzO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHtcbiAgICByZW1vdmVPbmUsXG4gICAgcmVtb3ZlTWFueSxcbiAgICByZW1vdmVBbGwsXG4gICAgYWRkT25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKGFkZE9uZU11dGFibHkpLFxuICAgIHVwZGF0ZU9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cGRhdGVPbmVNdXRhYmx5KSxcbiAgICB1cHNlcnRPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3IodXBzZXJ0T25lTXV0YWJseSksXG4gICAgc2V0T25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHNldE9uZU11dGFibHkpLFxuICAgIHNldE1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3Ioc2V0TWFueU11dGFibHkpLFxuICAgIHNldEFsbDogY3JlYXRlU3RhdGVPcGVyYXRvcihzZXRBbGxNdXRhYmx5KSxcbiAgICBhZGRNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKGFkZE1hbnlNdXRhYmx5KSxcbiAgICB1cGRhdGVNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHVwZGF0ZU1hbnlNdXRhYmx5KSxcbiAgICB1cHNlcnRNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHVwc2VydE1hbnlNdXRhYmx5KVxuICB9O1xufVxuXG4vLyBzcmMvZW50aXRpZXMvY3JlYXRlX2FkYXB0ZXIudHNcbmZ1bmN0aW9uIGNyZWF0ZUVudGl0eUFkYXB0ZXIob3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IHtcbiAgICBzZWxlY3RJZCxcbiAgICBzb3J0Q29tcGFyZXJcbiAgfSA9IHtcbiAgICBzb3J0Q29tcGFyZXI6IGZhbHNlLFxuICAgIHNlbGVjdElkOiAoaW5zdGFuY2UpID0+IGluc3RhbmNlLmlkLFxuICAgIC4uLm9wdGlvbnNcbiAgfTtcbiAgY29uc3Qgc3RhdGVBZGFwdGVyID0gc29ydENvbXBhcmVyID8gY3JlYXRlU29ydGVkU3RhdGVBZGFwdGVyKHNlbGVjdElkLCBzb3J0Q29tcGFyZXIpIDogY3JlYXRlVW5zb3J0ZWRTdGF0ZUFkYXB0ZXIoc2VsZWN0SWQpO1xuICBjb25zdCBzdGF0ZUZhY3RvcnkgPSBjcmVhdGVJbml0aWFsU3RhdGVGYWN0b3J5KHN0YXRlQWRhcHRlcik7XG4gIGNvbnN0IHNlbGVjdG9yc0ZhY3RvcnkgPSBjcmVhdGVTZWxlY3RvcnNGYWN0b3J5KCk7XG4gIHJldHVybiB7XG4gICAgc2VsZWN0SWQsXG4gICAgc29ydENvbXBhcmVyLFxuICAgIC4uLnN0YXRlRmFjdG9yeSxcbiAgICAuLi5zZWxlY3RvcnNGYWN0b3J5LFxuICAgIC4uLnN0YXRlQWRhcHRlclxuICB9O1xufVxuXG4vLyBzcmMvbGlzdGVuZXJNaWRkbGV3YXJlL2luZGV4LnRzXG5pbXBvcnQgeyBpc0FjdGlvbiBhcyBpc0FjdGlvbjMgfSBmcm9tIFwicmVkdXhcIjtcblxuLy8gc3JjL2xpc3RlbmVyTWlkZGxld2FyZS9leGNlcHRpb25zLnRzXG52YXIgdGFzayA9IFwidGFza1wiO1xudmFyIGxpc3RlbmVyID0gXCJsaXN0ZW5lclwiO1xudmFyIGNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG52YXIgY2FuY2VsbGVkID0gXCJjYW5jZWxsZWRcIjtcbnZhciB0YXNrQ2FuY2VsbGVkID0gYHRhc2stJHtjYW5jZWxsZWR9YDtcbnZhciB0YXNrQ29tcGxldGVkID0gYHRhc2stJHtjb21wbGV0ZWR9YDtcbnZhciBsaXN0ZW5lckNhbmNlbGxlZCA9IGAke2xpc3RlbmVyfS0ke2NhbmNlbGxlZH1gO1xudmFyIGxpc3RlbmVyQ29tcGxldGVkID0gYCR7bGlzdGVuZXJ9LSR7Y29tcGxldGVkfWA7XG52YXIgVGFza0Fib3J0RXJyb3IgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGNvZGUpIHtcbiAgICB0aGlzLmNvZGUgPSBjb2RlO1xuICAgIHRoaXMubWVzc2FnZSA9IGAke3Rhc2t9ICR7Y2FuY2VsbGVkfSAocmVhc29uOiAke2NvZGV9KWA7XG4gIH1cbiAgbmFtZSA9IFwiVGFza0Fib3J0RXJyb3JcIjtcbiAgbWVzc2FnZTtcbn07XG5cbi8vIHNyYy9saXN0ZW5lck1pZGRsZXdhcmUvdXRpbHMudHNcbnZhciBhc3NlcnRGdW5jdGlvbiA9IChmdW5jLCBleHBlY3RlZCkgPT4ge1xuICBpZiAodHlwZW9mIGZ1bmMgIT09IFwiZnVuY3Rpb25cIikge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzMikgOiBgJHtleHBlY3RlZH0gaXMgbm90IGEgZnVuY3Rpb25gKTtcbiAgfVxufTtcbnZhciBub29wMiA9ICgpID0+IHtcbn07XG52YXIgY2F0Y2hSZWplY3Rpb24gPSAocHJvbWlzZSwgb25FcnJvciA9IG5vb3AyKSA9PiB7XG4gIHByb21pc2UuY2F0Y2gob25FcnJvcik7XG4gIHJldHVybiBwcm9taXNlO1xufTtcbnZhciBhZGRBYm9ydFNpZ25hbExpc3RlbmVyID0gKGFib3J0U2lnbmFsLCBjYWxsYmFjaykgPT4ge1xuICBhYm9ydFNpZ25hbC5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgY2FsbGJhY2ssIHtcbiAgICBvbmNlOiB0cnVlXG4gIH0pO1xuICByZXR1cm4gKCkgPT4gYWJvcnRTaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIGNhbGxiYWNrKTtcbn07XG52YXIgYWJvcnRDb250cm9sbGVyV2l0aFJlYXNvbiA9IChhYm9ydENvbnRyb2xsZXIsIHJlYXNvbikgPT4ge1xuICBjb25zdCBzaWduYWwgPSBhYm9ydENvbnRyb2xsZXIuc2lnbmFsO1xuICBpZiAoc2lnbmFsLmFib3J0ZWQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKCEoXCJyZWFzb25cIiBpbiBzaWduYWwpKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHNpZ25hbCwgXCJyZWFzb25cIiwge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIHZhbHVlOiByZWFzb24sXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9XG4gIDtcbiAgYWJvcnRDb250cm9sbGVyLmFib3J0KHJlYXNvbik7XG59O1xuXG4vLyBzcmMvbGlzdGVuZXJNaWRkbGV3YXJlL3Rhc2sudHNcbnZhciB2YWxpZGF0ZUFjdGl2ZSA9IChzaWduYWwpID0+IHtcbiAgaWYgKHNpZ25hbC5hYm9ydGVkKSB7XG4gICAgY29uc3Qge1xuICAgICAgcmVhc29uXG4gICAgfSA9IHNpZ25hbDtcbiAgICB0aHJvdyBuZXcgVGFza0Fib3J0RXJyb3IocmVhc29uKTtcbiAgfVxufTtcbmZ1bmN0aW9uIHJhY2VXaXRoU2lnbmFsKHNpZ25hbCwgcHJvbWlzZSkge1xuICBsZXQgY2xlYW51cCA9IG5vb3AyO1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IG5vdGlmeVJlamVjdGlvbiA9ICgpID0+IHJlamVjdChuZXcgVGFza0Fib3J0RXJyb3Ioc2lnbmFsLnJlYXNvbikpO1xuICAgIGlmIChzaWduYWwuYWJvcnRlZCkge1xuICAgICAgbm90aWZ5UmVqZWN0aW9uKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNsZWFudXAgPSBhZGRBYm9ydFNpZ25hbExpc3RlbmVyKHNpZ25hbCwgbm90aWZ5UmVqZWN0aW9uKTtcbiAgICBwcm9taXNlLmZpbmFsbHkoKCkgPT4gY2xlYW51cCgpKS50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gIH0pLmZpbmFsbHkoKCkgPT4ge1xuICAgIGNsZWFudXAgPSBub29wMjtcbiAgfSk7XG59XG52YXIgcnVuVGFzayA9IGFzeW5jICh0YXNrMiwgY2xlYW5VcCkgPT4ge1xuICB0cnkge1xuICAgIGF3YWl0IFByb21pc2UucmVzb2x2ZSgpO1xuICAgIGNvbnN0IHZhbHVlID0gYXdhaXQgdGFzazIoKTtcbiAgICByZXR1cm4ge1xuICAgICAgc3RhdHVzOiBcIm9rXCIsXG4gICAgICB2YWx1ZVxuICAgIH07XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXR1czogZXJyb3IgaW5zdGFuY2VvZiBUYXNrQWJvcnRFcnJvciA/IFwiY2FuY2VsbGVkXCIgOiBcInJlamVjdGVkXCIsXG4gICAgICBlcnJvclxuICAgIH07XG4gIH0gZmluYWxseSB7XG4gICAgY2xlYW5VcD8uKCk7XG4gIH1cbn07XG52YXIgY3JlYXRlUGF1c2UgPSAoc2lnbmFsKSA9PiB7XG4gIHJldHVybiAocHJvbWlzZSkgPT4ge1xuICAgIHJldHVybiBjYXRjaFJlamVjdGlvbihyYWNlV2l0aFNpZ25hbChzaWduYWwsIHByb21pc2UpLnRoZW4oKG91dHB1dCkgPT4ge1xuICAgICAgdmFsaWRhdGVBY3RpdmUoc2lnbmFsKTtcbiAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfSkpO1xuICB9O1xufTtcbnZhciBjcmVhdGVEZWxheSA9IChzaWduYWwpID0+IHtcbiAgY29uc3QgcGF1c2UgPSBjcmVhdGVQYXVzZShzaWduYWwpO1xuICByZXR1cm4gKHRpbWVvdXRNcykgPT4ge1xuICAgIHJldHVybiBwYXVzZShuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCB0aW1lb3V0TXMpKSk7XG4gIH07XG59O1xuXG4vLyBzcmMvbGlzdGVuZXJNaWRkbGV3YXJlL2luZGV4LnRzXG52YXIge1xuICBhc3NpZ25cbn0gPSBPYmplY3Q7XG52YXIgSU5URVJOQUxfTklMX1RPS0VOID0ge307XG52YXIgYWxtID0gXCJsaXN0ZW5lck1pZGRsZXdhcmVcIjtcbnZhciBjcmVhdGVGb3JrID0gKHBhcmVudEFib3J0U2lnbmFsLCBwYXJlbnRCbG9ja2luZ1Byb21pc2VzKSA9PiB7XG4gIGNvbnN0IGxpbmtDb250cm9sbGVycyA9IChjb250cm9sbGVyKSA9PiBhZGRBYm9ydFNpZ25hbExpc3RlbmVyKHBhcmVudEFib3J0U2lnbmFsLCAoKSA9PiBhYm9ydENvbnRyb2xsZXJXaXRoUmVhc29uKGNvbnRyb2xsZXIsIHBhcmVudEFib3J0U2lnbmFsLnJlYXNvbikpO1xuICByZXR1cm4gKHRhc2tFeGVjdXRvciwgb3B0cykgPT4ge1xuICAgIGFzc2VydEZ1bmN0aW9uKHRhc2tFeGVjdXRvciwgXCJ0YXNrRXhlY3V0b3JcIik7XG4gICAgY29uc3QgY2hpbGRBYm9ydENvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgbGlua0NvbnRyb2xsZXJzKGNoaWxkQWJvcnRDb250cm9sbGVyKTtcbiAgICBjb25zdCByZXN1bHQgPSBydW5UYXNrKGFzeW5jICgpID0+IHtcbiAgICAgIHZhbGlkYXRlQWN0aXZlKHBhcmVudEFib3J0U2lnbmFsKTtcbiAgICAgIHZhbGlkYXRlQWN0aXZlKGNoaWxkQWJvcnRDb250cm9sbGVyLnNpZ25hbCk7XG4gICAgICBjb25zdCByZXN1bHQyID0gYXdhaXQgdGFza0V4ZWN1dG9yKHtcbiAgICAgICAgcGF1c2U6IGNyZWF0ZVBhdXNlKGNoaWxkQWJvcnRDb250cm9sbGVyLnNpZ25hbCksXG4gICAgICAgIGRlbGF5OiBjcmVhdGVEZWxheShjaGlsZEFib3J0Q29udHJvbGxlci5zaWduYWwpLFxuICAgICAgICBzaWduYWw6IGNoaWxkQWJvcnRDb250cm9sbGVyLnNpZ25hbFxuICAgICAgfSk7XG4gICAgICB2YWxpZGF0ZUFjdGl2ZShjaGlsZEFib3J0Q29udHJvbGxlci5zaWduYWwpO1xuICAgICAgcmV0dXJuIHJlc3VsdDI7XG4gICAgfSwgKCkgPT4gYWJvcnRDb250cm9sbGVyV2l0aFJlYXNvbihjaGlsZEFib3J0Q29udHJvbGxlciwgdGFza0NvbXBsZXRlZCkpO1xuICAgIGlmIChvcHRzPy5hdXRvSm9pbikge1xuICAgICAgcGFyZW50QmxvY2tpbmdQcm9taXNlcy5wdXNoKHJlc3VsdC5jYXRjaChub29wMikpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgcmVzdWx0OiBjcmVhdGVQYXVzZShwYXJlbnRBYm9ydFNpZ25hbCkocmVzdWx0KSxcbiAgICAgIGNhbmNlbCgpIHtcbiAgICAgICAgYWJvcnRDb250cm9sbGVyV2l0aFJlYXNvbihjaGlsZEFib3J0Q29udHJvbGxlciwgdGFza0NhbmNlbGxlZCk7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcbn07XG52YXIgY3JlYXRlVGFrZVBhdHRlcm4gPSAoc3RhcnRMaXN0ZW5pbmcsIHNpZ25hbCkgPT4ge1xuICBjb25zdCB0YWtlID0gYXN5bmMgKHByZWRpY2F0ZSwgdGltZW91dCkgPT4ge1xuICAgIHZhbGlkYXRlQWN0aXZlKHNpZ25hbCk7XG4gICAgbGV0IHVuc3Vic2NyaWJlID0gKCkgPT4ge1xuICAgIH07XG4gICAgY29uc3QgdHVwbGVQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgbGV0IHN0b3BMaXN0ZW5pbmcgPSBzdGFydExpc3RlbmluZyh7XG4gICAgICAgIHByZWRpY2F0ZSxcbiAgICAgICAgZWZmZWN0OiAoYWN0aW9uLCBsaXN0ZW5lckFwaSkgPT4ge1xuICAgICAgICAgIGxpc3RlbmVyQXBpLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgcmVzb2x2ZShbYWN0aW9uLCBsaXN0ZW5lckFwaS5nZXRTdGF0ZSgpLCBsaXN0ZW5lckFwaS5nZXRPcmlnaW5hbFN0YXRlKCldKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB1bnN1YnNjcmliZSA9ICgpID0+IHtcbiAgICAgICAgc3RvcExpc3RlbmluZygpO1xuICAgICAgICByZWplY3QoKTtcbiAgICAgIH07XG4gICAgfSk7XG4gICAgY29uc3QgcHJvbWlzZXMgPSBbdHVwbGVQcm9taXNlXTtcbiAgICBpZiAodGltZW91dCAhPSBudWxsKSB7XG4gICAgICBwcm9taXNlcy5wdXNoKG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIHRpbWVvdXQsIG51bGwpKSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBjb25zdCBvdXRwdXQgPSBhd2FpdCByYWNlV2l0aFNpZ25hbChzaWduYWwsIFByb21pc2UucmFjZShwcm9taXNlcykpO1xuICAgICAgdmFsaWRhdGVBY3RpdmUoc2lnbmFsKTtcbiAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gKHByZWRpY2F0ZSwgdGltZW91dCkgPT4gY2F0Y2hSZWplY3Rpb24odGFrZShwcmVkaWNhdGUsIHRpbWVvdXQpKTtcbn07XG52YXIgZ2V0TGlzdGVuZXJFbnRyeVByb3BzRnJvbSA9IChvcHRpb25zKSA9PiB7XG4gIGxldCB7XG4gICAgdHlwZSxcbiAgICBhY3Rpb25DcmVhdG9yLFxuICAgIG1hdGNoZXIsXG4gICAgcHJlZGljYXRlLFxuICAgIGVmZmVjdFxuICB9ID0gb3B0aW9ucztcbiAgaWYgKHR5cGUpIHtcbiAgICBwcmVkaWNhdGUgPSBjcmVhdGVBY3Rpb24odHlwZSkubWF0Y2g7XG4gIH0gZWxzZSBpZiAoYWN0aW9uQ3JlYXRvcikge1xuICAgIHR5cGUgPSBhY3Rpb25DcmVhdG9yLnR5cGU7XG4gICAgcHJlZGljYXRlID0gYWN0aW9uQ3JlYXRvci5tYXRjaDtcbiAgfSBlbHNlIGlmIChtYXRjaGVyKSB7XG4gICAgcHJlZGljYXRlID0gbWF0Y2hlcjtcbiAgfSBlbHNlIGlmIChwcmVkaWNhdGUpIHtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgyMSkgOiBcIkNyZWF0aW5nIG9yIHJlbW92aW5nIGEgbGlzdGVuZXIgcmVxdWlyZXMgb25lIG9mIHRoZSBrbm93biBmaWVsZHMgZm9yIG1hdGNoaW5nIGFuIGFjdGlvblwiKTtcbiAgfVxuICBhc3NlcnRGdW5jdGlvbihlZmZlY3QsIFwib3B0aW9ucy5saXN0ZW5lclwiKTtcbiAgcmV0dXJuIHtcbiAgICBwcmVkaWNhdGUsXG4gICAgdHlwZSxcbiAgICBlZmZlY3RcbiAgfTtcbn07XG52YXIgY3JlYXRlTGlzdGVuZXJFbnRyeSA9IC8qIEBfX1BVUkVfXyAqLyBhc3NpZ24oKG9wdGlvbnMpID0+IHtcbiAgY29uc3Qge1xuICAgIHR5cGUsXG4gICAgcHJlZGljYXRlLFxuICAgIGVmZmVjdFxuICB9ID0gZ2V0TGlzdGVuZXJFbnRyeVByb3BzRnJvbShvcHRpb25zKTtcbiAgY29uc3QgZW50cnkgPSB7XG4gICAgaWQ6IG5hbm9pZCgpLFxuICAgIGVmZmVjdCxcbiAgICB0eXBlLFxuICAgIHByZWRpY2F0ZSxcbiAgICBwZW5kaW5nOiAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpLFxuICAgIHVuc3Vic2NyaWJlOiAoKSA9PiB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgyMikgOiBcIlVuc3Vic2NyaWJlIG5vdCBpbml0aWFsaXplZFwiKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBlbnRyeTtcbn0sIHtcbiAgd2l0aFR5cGVzOiAoKSA9PiBjcmVhdGVMaXN0ZW5lckVudHJ5XG59KTtcbnZhciBmaW5kTGlzdGVuZXJFbnRyeSA9IChsaXN0ZW5lck1hcCwgb3B0aW9ucykgPT4ge1xuICBjb25zdCB7XG4gICAgdHlwZSxcbiAgICBlZmZlY3QsXG4gICAgcHJlZGljYXRlXG4gIH0gPSBnZXRMaXN0ZW5lckVudHJ5UHJvcHNGcm9tKG9wdGlvbnMpO1xuICByZXR1cm4gQXJyYXkuZnJvbShsaXN0ZW5lck1hcC52YWx1ZXMoKSkuZmluZCgoZW50cnkpID0+IHtcbiAgICBjb25zdCBtYXRjaFByZWRpY2F0ZU9yVHlwZSA9IHR5cGVvZiB0eXBlID09PSBcInN0cmluZ1wiID8gZW50cnkudHlwZSA9PT0gdHlwZSA6IGVudHJ5LnByZWRpY2F0ZSA9PT0gcHJlZGljYXRlO1xuICAgIHJldHVybiBtYXRjaFByZWRpY2F0ZU9yVHlwZSAmJiBlbnRyeS5lZmZlY3QgPT09IGVmZmVjdDtcbiAgfSk7XG59O1xudmFyIGNhbmNlbEFjdGl2ZUxpc3RlbmVycyA9IChlbnRyeSkgPT4ge1xuICBlbnRyeS5wZW5kaW5nLmZvckVhY2goKGNvbnRyb2xsZXIpID0+IHtcbiAgICBhYm9ydENvbnRyb2xsZXJXaXRoUmVhc29uKGNvbnRyb2xsZXIsIGxpc3RlbmVyQ2FuY2VsbGVkKTtcbiAgfSk7XG59O1xudmFyIGNyZWF0ZUNsZWFyTGlzdGVuZXJNaWRkbGV3YXJlID0gKGxpc3RlbmVyTWFwKSA9PiB7XG4gIHJldHVybiAoKSA9PiB7XG4gICAgbGlzdGVuZXJNYXAuZm9yRWFjaChjYW5jZWxBY3RpdmVMaXN0ZW5lcnMpO1xuICAgIGxpc3RlbmVyTWFwLmNsZWFyKCk7XG4gIH07XG59O1xudmFyIHNhZmVseU5vdGlmeUVycm9yID0gKGVycm9ySGFuZGxlciwgZXJyb3JUb05vdGlmeSwgZXJyb3JJbmZvKSA9PiB7XG4gIHRyeSB7XG4gICAgZXJyb3JIYW5kbGVyKGVycm9yVG9Ob3RpZnksIGVycm9ySW5mbyk7XG4gIH0gY2F0Y2ggKGVycm9ySGFuZGxlckVycm9yKSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aHJvdyBlcnJvckhhbmRsZXJFcnJvcjtcbiAgICB9LCAwKTtcbiAgfVxufTtcbnZhciBhZGRMaXN0ZW5lciA9IC8qIEBfX1BVUkVfXyAqLyBhc3NpZ24oLyogQF9fUFVSRV9fICovIGNyZWF0ZUFjdGlvbihgJHthbG19L2FkZGApLCB7XG4gIHdpdGhUeXBlczogKCkgPT4gYWRkTGlzdGVuZXJcbn0pO1xudmFyIGNsZWFyQWxsTGlzdGVuZXJzID0gLyogQF9fUFVSRV9fICovIGNyZWF0ZUFjdGlvbihgJHthbG19L3JlbW92ZUFsbGApO1xudmFyIHJlbW92ZUxpc3RlbmVyID0gLyogQF9fUFVSRV9fICovIGFzc2lnbigvKiBAX19QVVJFX18gKi8gY3JlYXRlQWN0aW9uKGAke2FsbX0vcmVtb3ZlYCksIHtcbiAgd2l0aFR5cGVzOiAoKSA9PiByZW1vdmVMaXN0ZW5lclxufSk7XG52YXIgZGVmYXVsdEVycm9ySGFuZGxlciA9ICguLi5hcmdzKSA9PiB7XG4gIGNvbnNvbGUuZXJyb3IoYCR7YWxtfS9lcnJvcmAsIC4uLmFyZ3MpO1xufTtcbnZhciBjcmVhdGVMaXN0ZW5lck1pZGRsZXdhcmUgPSAobWlkZGxld2FyZU9wdGlvbnMgPSB7fSkgPT4ge1xuICBjb25zdCBsaXN0ZW5lck1hcCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gIGNvbnN0IHtcbiAgICBleHRyYSxcbiAgICBvbkVycm9yID0gZGVmYXVsdEVycm9ySGFuZGxlclxuICB9ID0gbWlkZGxld2FyZU9wdGlvbnM7XG4gIGFzc2VydEZ1bmN0aW9uKG9uRXJyb3IsIFwib25FcnJvclwiKTtcbiAgY29uc3QgaW5zZXJ0RW50cnkgPSAoZW50cnkpID0+IHtcbiAgICBlbnRyeS51bnN1YnNjcmliZSA9ICgpID0+IGxpc3RlbmVyTWFwLmRlbGV0ZShlbnRyeS5pZCk7XG4gICAgbGlzdGVuZXJNYXAuc2V0KGVudHJ5LmlkLCBlbnRyeSk7XG4gICAgcmV0dXJuIChjYW5jZWxPcHRpb25zKSA9PiB7XG4gICAgICBlbnRyeS51bnN1YnNjcmliZSgpO1xuICAgICAgaWYgKGNhbmNlbE9wdGlvbnM/LmNhbmNlbEFjdGl2ZSkge1xuICAgICAgICBjYW5jZWxBY3RpdmVMaXN0ZW5lcnMoZW50cnkpO1xuICAgICAgfVxuICAgIH07XG4gIH07XG4gIGNvbnN0IHN0YXJ0TGlzdGVuaW5nID0gKG9wdGlvbnMpID0+IHtcbiAgICBjb25zdCBlbnRyeSA9IGZpbmRMaXN0ZW5lckVudHJ5KGxpc3RlbmVyTWFwLCBvcHRpb25zKSA/PyBjcmVhdGVMaXN0ZW5lckVudHJ5KG9wdGlvbnMpO1xuICAgIHJldHVybiBpbnNlcnRFbnRyeShlbnRyeSk7XG4gIH07XG4gIGFzc2lnbihzdGFydExpc3RlbmluZywge1xuICAgIHdpdGhUeXBlczogKCkgPT4gc3RhcnRMaXN0ZW5pbmdcbiAgfSk7XG4gIGNvbnN0IHN0b3BMaXN0ZW5pbmcgPSAob3B0aW9ucykgPT4ge1xuICAgIGNvbnN0IGVudHJ5ID0gZmluZExpc3RlbmVyRW50cnkobGlzdGVuZXJNYXAsIG9wdGlvbnMpO1xuICAgIGlmIChlbnRyeSkge1xuICAgICAgZW50cnkudW5zdWJzY3JpYmUoKTtcbiAgICAgIGlmIChvcHRpb25zLmNhbmNlbEFjdGl2ZSkge1xuICAgICAgICBjYW5jZWxBY3RpdmVMaXN0ZW5lcnMoZW50cnkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gISFlbnRyeTtcbiAgfTtcbiAgYXNzaWduKHN0b3BMaXN0ZW5pbmcsIHtcbiAgICB3aXRoVHlwZXM6ICgpID0+IHN0b3BMaXN0ZW5pbmdcbiAgfSk7XG4gIGNvbnN0IG5vdGlmeUxpc3RlbmVyID0gYXN5bmMgKGVudHJ5LCBhY3Rpb24sIGFwaSwgZ2V0T3JpZ2luYWxTdGF0ZSkgPT4ge1xuICAgIGNvbnN0IGludGVybmFsVGFza0NvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgY29uc3QgdGFrZSA9IGNyZWF0ZVRha2VQYXR0ZXJuKHN0YXJ0TGlzdGVuaW5nLCBpbnRlcm5hbFRhc2tDb250cm9sbGVyLnNpZ25hbCk7XG4gICAgY29uc3QgYXV0b0pvaW5Qcm9taXNlcyA9IFtdO1xuICAgIHRyeSB7XG4gICAgICBlbnRyeS5wZW5kaW5nLmFkZChpbnRlcm5hbFRhc2tDb250cm9sbGVyKTtcbiAgICAgIGF3YWl0IFByb21pc2UucmVzb2x2ZShlbnRyeS5lZmZlY3QoXG4gICAgICAgIGFjdGlvbixcbiAgICAgICAgLy8gVXNlIGFzc2lnbigpIHJhdGhlciB0aGFuIC4uLiB0byBhdm9pZCBleHRyYSBoZWxwZXIgZnVuY3Rpb25zIGFkZGVkIHRvIGJ1bmRsZVxuICAgICAgICBhc3NpZ24oe30sIGFwaSwge1xuICAgICAgICAgIGdldE9yaWdpbmFsU3RhdGUsXG4gICAgICAgICAgY29uZGl0aW9uOiAocHJlZGljYXRlLCB0aW1lb3V0KSA9PiB0YWtlKHByZWRpY2F0ZSwgdGltZW91dCkudGhlbihCb29sZWFuKSxcbiAgICAgICAgICB0YWtlLFxuICAgICAgICAgIGRlbGF5OiBjcmVhdGVEZWxheShpbnRlcm5hbFRhc2tDb250cm9sbGVyLnNpZ25hbCksXG4gICAgICAgICAgcGF1c2U6IGNyZWF0ZVBhdXNlKGludGVybmFsVGFza0NvbnRyb2xsZXIuc2lnbmFsKSxcbiAgICAgICAgICBleHRyYSxcbiAgICAgICAgICBzaWduYWw6IGludGVybmFsVGFza0NvbnRyb2xsZXIuc2lnbmFsLFxuICAgICAgICAgIGZvcms6IGNyZWF0ZUZvcmsoaW50ZXJuYWxUYXNrQ29udHJvbGxlci5zaWduYWwsIGF1dG9Kb2luUHJvbWlzZXMpLFxuICAgICAgICAgIHVuc3Vic2NyaWJlOiBlbnRyeS51bnN1YnNjcmliZSxcbiAgICAgICAgICBzdWJzY3JpYmU6ICgpID0+IHtcbiAgICAgICAgICAgIGxpc3RlbmVyTWFwLnNldChlbnRyeS5pZCwgZW50cnkpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgY2FuY2VsQWN0aXZlTGlzdGVuZXJzOiAoKSA9PiB7XG4gICAgICAgICAgICBlbnRyeS5wZW5kaW5nLmZvckVhY2goKGNvbnRyb2xsZXIsIF8sIHNldCkgPT4ge1xuICAgICAgICAgICAgICBpZiAoY29udHJvbGxlciAhPT0gaW50ZXJuYWxUYXNrQ29udHJvbGxlcikge1xuICAgICAgICAgICAgICAgIGFib3J0Q29udHJvbGxlcldpdGhSZWFzb24oY29udHJvbGxlciwgbGlzdGVuZXJDYW5jZWxsZWQpO1xuICAgICAgICAgICAgICAgIHNldC5kZWxldGUoY29udHJvbGxlcik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgY2FuY2VsOiAoKSA9PiB7XG4gICAgICAgICAgICBhYm9ydENvbnRyb2xsZXJXaXRoUmVhc29uKGludGVybmFsVGFza0NvbnRyb2xsZXIsIGxpc3RlbmVyQ2FuY2VsbGVkKTtcbiAgICAgICAgICAgIGVudHJ5LnBlbmRpbmcuZGVsZXRlKGludGVybmFsVGFza0NvbnRyb2xsZXIpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgdGhyb3dJZkNhbmNlbGxlZDogKCkgPT4ge1xuICAgICAgICAgICAgdmFsaWRhdGVBY3RpdmUoaW50ZXJuYWxUYXNrQ29udHJvbGxlci5zaWduYWwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICkpO1xuICAgIH0gY2F0Y2ggKGxpc3RlbmVyRXJyb3IpIHtcbiAgICAgIGlmICghKGxpc3RlbmVyRXJyb3IgaW5zdGFuY2VvZiBUYXNrQWJvcnRFcnJvcikpIHtcbiAgICAgICAgc2FmZWx5Tm90aWZ5RXJyb3Iob25FcnJvciwgbGlzdGVuZXJFcnJvciwge1xuICAgICAgICAgIHJhaXNlZEJ5OiBcImVmZmVjdFwiXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICBhd2FpdCBQcm9taXNlLmFsbChhdXRvSm9pblByb21pc2VzKTtcbiAgICAgIGFib3J0Q29udHJvbGxlcldpdGhSZWFzb24oaW50ZXJuYWxUYXNrQ29udHJvbGxlciwgbGlzdGVuZXJDb21wbGV0ZWQpO1xuICAgICAgZW50cnkucGVuZGluZy5kZWxldGUoaW50ZXJuYWxUYXNrQ29udHJvbGxlcik7XG4gICAgfVxuICB9O1xuICBjb25zdCBjbGVhckxpc3RlbmVyTWlkZGxld2FyZSA9IGNyZWF0ZUNsZWFyTGlzdGVuZXJNaWRkbGV3YXJlKGxpc3RlbmVyTWFwKTtcbiAgY29uc3QgbWlkZGxld2FyZSA9IChhcGkpID0+IChuZXh0KSA9PiAoYWN0aW9uKSA9PiB7XG4gICAgaWYgKCFpc0FjdGlvbjMoYWN0aW9uKSkge1xuICAgICAgcmV0dXJuIG5leHQoYWN0aW9uKTtcbiAgICB9XG4gICAgaWYgKGFkZExpc3RlbmVyLm1hdGNoKGFjdGlvbikpIHtcbiAgICAgIHJldHVybiBzdGFydExpc3RlbmluZyhhY3Rpb24ucGF5bG9hZCk7XG4gICAgfVxuICAgIGlmIChjbGVhckFsbExpc3RlbmVycy5tYXRjaChhY3Rpb24pKSB7XG4gICAgICBjbGVhckxpc3RlbmVyTWlkZGxld2FyZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAocmVtb3ZlTGlzdGVuZXIubWF0Y2goYWN0aW9uKSkge1xuICAgICAgcmV0dXJuIHN0b3BMaXN0ZW5pbmcoYWN0aW9uLnBheWxvYWQpO1xuICAgIH1cbiAgICBsZXQgb3JpZ2luYWxTdGF0ZSA9IGFwaS5nZXRTdGF0ZSgpO1xuICAgIGNvbnN0IGdldE9yaWdpbmFsU3RhdGUgPSAoKSA9PiB7XG4gICAgICBpZiAob3JpZ2luYWxTdGF0ZSA9PT0gSU5URVJOQUxfTklMX1RPS0VOKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDIzKSA6IGAke2FsbX06IGdldE9yaWdpbmFsU3RhdGUgY2FuIG9ubHkgYmUgY2FsbGVkIHN5bmNocm9ub3VzbHlgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvcmlnaW5hbFN0YXRlO1xuICAgIH07XG4gICAgbGV0IHJlc3VsdDtcbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gbmV4dChhY3Rpb24pO1xuICAgICAgaWYgKGxpc3RlbmVyTWFwLnNpemUgPiAwKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRTdGF0ZSA9IGFwaS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCBsaXN0ZW5lckVudHJpZXMgPSBBcnJheS5mcm9tKGxpc3RlbmVyTWFwLnZhbHVlcygpKTtcbiAgICAgICAgZm9yIChjb25zdCBlbnRyeSBvZiBsaXN0ZW5lckVudHJpZXMpIHtcbiAgICAgICAgICBsZXQgcnVuTGlzdGVuZXIgPSBmYWxzZTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcnVuTGlzdGVuZXIgPSBlbnRyeS5wcmVkaWNhdGUoYWN0aW9uLCBjdXJyZW50U3RhdGUsIG9yaWdpbmFsU3RhdGUpO1xuICAgICAgICAgIH0gY2F0Y2ggKHByZWRpY2F0ZUVycm9yKSB7XG4gICAgICAgICAgICBydW5MaXN0ZW5lciA9IGZhbHNlO1xuICAgICAgICAgICAgc2FmZWx5Tm90aWZ5RXJyb3Iob25FcnJvciwgcHJlZGljYXRlRXJyb3IsIHtcbiAgICAgICAgICAgICAgcmFpc2VkQnk6IFwicHJlZGljYXRlXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIXJ1bkxpc3RlbmVyKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbm90aWZ5TGlzdGVuZXIoZW50cnksIGFjdGlvbiwgYXBpLCBnZXRPcmlnaW5hbFN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICBvcmlnaW5hbFN0YXRlID0gSU5URVJOQUxfTklMX1RPS0VOO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICByZXR1cm4ge1xuICAgIG1pZGRsZXdhcmUsXG4gICAgc3RhcnRMaXN0ZW5pbmcsXG4gICAgc3RvcExpc3RlbmluZyxcbiAgICBjbGVhckxpc3RlbmVyczogY2xlYXJMaXN0ZW5lck1pZGRsZXdhcmVcbiAgfTtcbn07XG5cbi8vIHNyYy9keW5hbWljTWlkZGxld2FyZS9pbmRleC50c1xuaW1wb3J0IHsgY29tcG9zZSBhcyBjb21wb3NlMyB9IGZyb20gXCJyZWR1eFwiO1xudmFyIGNyZWF0ZU1pZGRsZXdhcmVFbnRyeSA9IChtaWRkbGV3YXJlKSA9PiAoe1xuICBtaWRkbGV3YXJlLFxuICBhcHBsaWVkOiAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpXG59KTtcbnZhciBtYXRjaEluc3RhbmNlID0gKGluc3RhbmNlSWQpID0+IChhY3Rpb24pID0+IGFjdGlvbj8ubWV0YT8uaW5zdGFuY2VJZCA9PT0gaW5zdGFuY2VJZDtcbnZhciBjcmVhdGVEeW5hbWljTWlkZGxld2FyZSA9ICgpID0+IHtcbiAgY29uc3QgaW5zdGFuY2VJZCA9IG5hbm9pZCgpO1xuICBjb25zdCBtaWRkbGV3YXJlTWFwID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgY29uc3Qgd2l0aE1pZGRsZXdhcmUgPSBPYmplY3QuYXNzaWduKGNyZWF0ZUFjdGlvbihcImR5bmFtaWNNaWRkbGV3YXJlL2FkZFwiLCAoLi4ubWlkZGxld2FyZXMpID0+ICh7XG4gICAgcGF5bG9hZDogbWlkZGxld2FyZXMsXG4gICAgbWV0YToge1xuICAgICAgaW5zdGFuY2VJZFxuICAgIH1cbiAgfSkpLCB7XG4gICAgd2l0aFR5cGVzOiAoKSA9PiB3aXRoTWlkZGxld2FyZVxuICB9KTtcbiAgY29uc3QgYWRkTWlkZGxld2FyZSA9IE9iamVjdC5hc3NpZ24oZnVuY3Rpb24gYWRkTWlkZGxld2FyZTIoLi4ubWlkZGxld2FyZXMpIHtcbiAgICBtaWRkbGV3YXJlcy5mb3JFYWNoKChtaWRkbGV3YXJlMikgPT4ge1xuICAgICAgZ2V0T3JJbnNlcnRDb21wdXRlZChtaWRkbGV3YXJlTWFwLCBtaWRkbGV3YXJlMiwgY3JlYXRlTWlkZGxld2FyZUVudHJ5KTtcbiAgICB9KTtcbiAgfSwge1xuICAgIHdpdGhUeXBlczogKCkgPT4gYWRkTWlkZGxld2FyZVxuICB9KTtcbiAgY29uc3QgZ2V0RmluYWxNaWRkbGV3YXJlID0gKGFwaSkgPT4ge1xuICAgIGNvbnN0IGFwcGxpZWRNaWRkbGV3YXJlID0gQXJyYXkuZnJvbShtaWRkbGV3YXJlTWFwLnZhbHVlcygpKS5tYXAoKGVudHJ5KSA9PiBnZXRPckluc2VydENvbXB1dGVkKGVudHJ5LmFwcGxpZWQsIGFwaSwgZW50cnkubWlkZGxld2FyZSkpO1xuICAgIHJldHVybiBjb21wb3NlMyguLi5hcHBsaWVkTWlkZGxld2FyZSk7XG4gIH07XG4gIGNvbnN0IGlzV2l0aE1pZGRsZXdhcmUgPSBpc0FsbE9mKHdpdGhNaWRkbGV3YXJlLCBtYXRjaEluc3RhbmNlKGluc3RhbmNlSWQpKTtcbiAgY29uc3QgbWlkZGxld2FyZSA9IChhcGkpID0+IChuZXh0KSA9PiAoYWN0aW9uKSA9PiB7XG4gICAgaWYgKGlzV2l0aE1pZGRsZXdhcmUoYWN0aW9uKSkge1xuICAgICAgYWRkTWlkZGxld2FyZSguLi5hY3Rpb24ucGF5bG9hZCk7XG4gICAgICByZXR1cm4gYXBpLmRpc3BhdGNoO1xuICAgIH1cbiAgICByZXR1cm4gZ2V0RmluYWxNaWRkbGV3YXJlKGFwaSkobmV4dCkoYWN0aW9uKTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBtaWRkbGV3YXJlLFxuICAgIGFkZE1pZGRsZXdhcmUsXG4gICAgd2l0aE1pZGRsZXdhcmUsXG4gICAgaW5zdGFuY2VJZFxuICB9O1xufTtcblxuLy8gc3JjL2NvbWJpbmVTbGljZXMudHNcbmltcG9ydCB7IGNvbWJpbmVSZWR1Y2VycyBhcyBjb21iaW5lUmVkdWNlcnMyIH0gZnJvbSBcInJlZHV4XCI7XG52YXIgaXNTbGljZUxpa2UgPSAobWF5YmVTbGljZUxpa2UpID0+IFwicmVkdWNlclBhdGhcIiBpbiBtYXliZVNsaWNlTGlrZSAmJiB0eXBlb2YgbWF5YmVTbGljZUxpa2UucmVkdWNlclBhdGggPT09IFwic3RyaW5nXCI7XG52YXIgZ2V0UmVkdWNlcnMgPSAoc2xpY2VzKSA9PiBzbGljZXMuZmxhdE1hcCgoc2xpY2VPck1hcCkgPT4gaXNTbGljZUxpa2Uoc2xpY2VPck1hcCkgPyBbW3NsaWNlT3JNYXAucmVkdWNlclBhdGgsIHNsaWNlT3JNYXAucmVkdWNlcl1dIDogT2JqZWN0LmVudHJpZXMoc2xpY2VPck1hcCkpO1xudmFyIE9SSUdJTkFMX1NUQVRFID0gU3ltYm9sLmZvcihcInJ0ay1zdGF0ZS1wcm94eS1vcmlnaW5hbFwiKTtcbnZhciBpc1N0YXRlUHJveHkgPSAodmFsdWUpID0+ICEhdmFsdWUgJiYgISF2YWx1ZVtPUklHSU5BTF9TVEFURV07XG52YXIgc3RhdGVQcm94eU1hcCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpO1xudmFyIGNyZWF0ZVN0YXRlUHJveHkgPSAoc3RhdGUsIHJlZHVjZXJNYXApID0+IGdldE9ySW5zZXJ0Q29tcHV0ZWQoc3RhdGVQcm94eU1hcCwgc3RhdGUsICgpID0+IG5ldyBQcm94eShzdGF0ZSwge1xuICBnZXQ6ICh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSA9PiB7XG4gICAgaWYgKHByb3AgPT09IE9SSUdJTkFMX1NUQVRFKSByZXR1cm4gdGFyZ2V0O1xuICAgIGNvbnN0IHJlc3VsdCA9IFJlZmxlY3QuZ2V0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpO1xuICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjb25zdCByZWR1Y2VyID0gcmVkdWNlck1hcFtwcm9wLnRvU3RyaW5nKCldO1xuICAgICAgaWYgKHJlZHVjZXIpIHtcbiAgICAgICAgY29uc3QgcmVkdWNlclJlc3VsdCA9IHJlZHVjZXIodm9pZCAwLCB7XG4gICAgICAgICAgdHlwZTogbmFub2lkKClcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICh0eXBlb2YgcmVkdWNlclJlc3VsdCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDI0KSA6IGBUaGUgc2xpY2UgcmVkdWNlciBmb3Iga2V5IFwiJHtwcm9wLnRvU3RyaW5nKCl9XCIgcmV0dXJuZWQgdW5kZWZpbmVkIHdoZW4gY2FsbGVkIGZvciBzZWxlY3RvcigpLiBJZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZSByZWR1Y2VyIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgZXhwbGljaXRseSByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBub3QgYmUgdW5kZWZpbmVkLiBJZiB5b3UgZG9uJ3Qgd2FudCB0byBzZXQgYSB2YWx1ZSBmb3IgdGhpcyByZWR1Y2VyLCB5b3UgY2FuIHVzZSBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLmApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWR1Y2VyUmVzdWx0O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KSk7XG52YXIgb3JpZ2luYWwgPSAoc3RhdGUpID0+IHtcbiAgaWYgKCFpc1N0YXRlUHJveHkoc3RhdGUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMjUpIDogXCJvcmlnaW5hbCBtdXN0IGJlIHVzZWQgb24gc3RhdGUgUHJveHlcIik7XG4gIH1cbiAgcmV0dXJuIHN0YXRlW09SSUdJTkFMX1NUQVRFXTtcbn07XG52YXIgbm9vcFJlZHVjZXIgPSAoc3RhdGUgPSB7fSkgPT4gc3RhdGU7XG5mdW5jdGlvbiBjb21iaW5lU2xpY2VzKC4uLnNsaWNlcykge1xuICBjb25zdCByZWR1Y2VyTWFwID0gT2JqZWN0LmZyb21FbnRyaWVzKGdldFJlZHVjZXJzKHNsaWNlcykpO1xuICBjb25zdCBnZXRSZWR1Y2VyID0gKCkgPT4gT2JqZWN0LmtleXMocmVkdWNlck1hcCkubGVuZ3RoID8gY29tYmluZVJlZHVjZXJzMihyZWR1Y2VyTWFwKSA6IG5vb3BSZWR1Y2VyO1xuICBsZXQgcmVkdWNlciA9IGdldFJlZHVjZXIoKTtcbiAgZnVuY3Rpb24gY29tYmluZWRSZWR1Y2VyKHN0YXRlLCBhY3Rpb24pIHtcbiAgICByZXR1cm4gcmVkdWNlcihzdGF0ZSwgYWN0aW9uKTtcbiAgfVxuICBjb21iaW5lZFJlZHVjZXIud2l0aExhenlMb2FkZWRTbGljZXMgPSAoKSA9PiBjb21iaW5lZFJlZHVjZXI7XG4gIGNvbnN0IGluamVjdCA9IChzbGljZSwgY29uZmlnID0ge30pID0+IHtcbiAgICBjb25zdCB7XG4gICAgICByZWR1Y2VyUGF0aCxcbiAgICAgIHJlZHVjZXI6IHJlZHVjZXJUb0luamVjdFxuICAgIH0gPSBzbGljZTtcbiAgICBjb25zdCBjdXJyZW50UmVkdWNlciA9IHJlZHVjZXJNYXBbcmVkdWNlclBhdGhdO1xuICAgIGlmICghY29uZmlnLm92ZXJyaWRlRXhpc3RpbmcgJiYgY3VycmVudFJlZHVjZXIgJiYgY3VycmVudFJlZHVjZXIgIT09IHJlZHVjZXJUb0luamVjdCkge1xuICAgICAgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSBcInVuZGVmaW5lZFwiICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcImRldmVsb3BtZW50XCIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgY2FsbGVkIFxcYGluamVjdFxcYCB0byBvdmVycmlkZSBhbHJlYWR5LWV4aXN0aW5nIHJlZHVjZXIgJHtyZWR1Y2VyUGF0aH0gd2l0aG91dCBzcGVjaWZ5aW5nIFxcYG92ZXJyaWRlRXhpc3Rpbmc6IHRydWVcXGBgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb21iaW5lZFJlZHVjZXI7XG4gICAgfVxuICAgIHJlZHVjZXJNYXBbcmVkdWNlclBhdGhdID0gcmVkdWNlclRvSW5qZWN0O1xuICAgIHJlZHVjZXIgPSBnZXRSZWR1Y2VyKCk7XG4gICAgcmV0dXJuIGNvbWJpbmVkUmVkdWNlcjtcbiAgfTtcbiAgY29uc3Qgc2VsZWN0b3IgPSBPYmplY3QuYXNzaWduKGZ1bmN0aW9uIG1ha2VTZWxlY3RvcihzZWxlY3RvckZuLCBzZWxlY3RTdGF0ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiBzZWxlY3RvcjIoc3RhdGUsIC4uLmFyZ3MpIHtcbiAgICAgIHJldHVybiBzZWxlY3RvckZuKGNyZWF0ZVN0YXRlUHJveHkoc2VsZWN0U3RhdGUgPyBzZWxlY3RTdGF0ZShzdGF0ZSwgLi4uYXJncykgOiBzdGF0ZSwgcmVkdWNlck1hcCksIC4uLmFyZ3MpO1xuICAgIH07XG4gIH0sIHtcbiAgICBvcmlnaW5hbFxuICB9KTtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oY29tYmluZWRSZWR1Y2VyLCB7XG4gICAgaW5qZWN0LFxuICAgIHNlbGVjdG9yXG4gIH0pO1xufVxuXG4vLyBzcmMvZm9ybWF0UHJvZEVycm9yTWVzc2FnZS50c1xuZnVuY3Rpb24gZm9ybWF0UHJvZEVycm9yTWVzc2FnZShjb2RlKSB7XG4gIHJldHVybiBgTWluaWZpZWQgUmVkdXggVG9vbGtpdCBlcnJvciAjJHtjb2RlfTsgdmlzaXQgaHR0cHM6Ly9yZWR1eC10b29sa2l0LmpzLm9yZy9FcnJvcnM/Y29kZT0ke2NvZGV9IGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMuIGA7XG59XG5leHBvcnQge1xuICBSZWR1Y2VyVHlwZSxcbiAgU0hPVUxEX0FVVE9CQVRDSCxcbiAgVGFza0Fib3J0RXJyb3IsXG4gIFR1cGxlLFxuICBhZGRMaXN0ZW5lcixcbiAgYXN5bmNUaHVua0NyZWF0b3IsXG4gIGF1dG9CYXRjaEVuaGFuY2VyLFxuICBidWlsZENyZWF0ZVNsaWNlLFxuICBjbGVhckFsbExpc3RlbmVycyxcbiAgY29tYmluZVNsaWNlcyxcbiAgY29uZmlndXJlU3RvcmUsXG4gIGNyZWF0ZUFjdGlvbixcbiAgY3JlYXRlQWN0aW9uQ3JlYXRvckludmFyaWFudE1pZGRsZXdhcmUsXG4gIGNyZWF0ZUFzeW5jVGh1bmssXG4gIGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yLFxuICBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvckNyZWF0b3IsXG4gIGNyZWF0ZUR5bmFtaWNNaWRkbGV3YXJlLFxuICBjcmVhdGVFbnRpdHlBZGFwdGVyLFxuICBjcmVhdGVJbW11dGFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUsXG4gIGNyZWF0ZUxpc3RlbmVyTWlkZGxld2FyZSxcbiAgcHJvZHVjZSBhcyBjcmVhdGVOZXh0U3RhdGUsXG4gIGNyZWF0ZVJlZHVjZXIsXG4gIGNyZWF0ZVNlbGVjdG9yLFxuICBjcmVhdGVTZWxlY3RvckNyZWF0b3IyIGFzIGNyZWF0ZVNlbGVjdG9yQ3JlYXRvcixcbiAgY3JlYXRlU2VyaWFsaXphYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlLFxuICBjcmVhdGVTbGljZSxcbiAgY3VycmVudDMgYXMgY3VycmVudCxcbiAgZmluZE5vblNlcmlhbGl6YWJsZVZhbHVlLFxuICBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlLFxuICBmcmVlemUsXG4gIGlzQWN0aW9uQ3JlYXRvcixcbiAgaXNBbGxPZixcbiAgaXNBbnlPZixcbiAgaXNBc3luY1RodW5rQWN0aW9uLFxuICBpc0RyYWZ0NSBhcyBpc0RyYWZ0LFxuICBpc0ZTQSBhcyBpc0ZsdXhTdGFuZGFyZEFjdGlvbixcbiAgaXNGdWxmaWxsZWQsXG4gIGlzSW1tdXRhYmxlRGVmYXVsdCxcbiAgaXNQZW5kaW5nLFxuICBpc1BsYWluLFxuICBpc1JlamVjdGVkLFxuICBpc1JlamVjdGVkV2l0aFZhbHVlLFxuICBscnVNZW1vaXplLFxuICBtaW5pU2VyaWFsaXplRXJyb3IsXG4gIG5hbm9pZCxcbiAgb3JpZ2luYWwyIGFzIG9yaWdpbmFsLFxuICBwcmVwYXJlQXV0b0JhdGNoZWQsXG4gIHJlbW92ZUxpc3RlbmVyLFxuICB1bndyYXBSZXN1bHQsXG4gIHdlYWtNYXBNZW1vaXplMiBhcyB3ZWFrTWFwTWVtb2l6ZVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlZHV4LXRvb2xraXQubW9kZXJuLm1qcy5tYXAiXSwibmFtZXMiOlsiX3JlZ2VuZXJhdG9yUnVudGltZSIsImUiLCJ0IiwiciIsIk9iamVjdCIsInByb3RvdHlwZSIsIm4iLCJoYXNPd25Qcm9wZXJ0eSIsIm8iLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiaSIsIlN5bWJvbCIsImEiLCJpdGVyYXRvciIsImMiLCJhc3luY0l0ZXJhdG9yIiwidSIsInRvU3RyaW5nVGFnIiwiZGVmaW5lIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwid3JhcCIsIkdlbmVyYXRvciIsImNyZWF0ZSIsIkNvbnRleHQiLCJtYWtlSW52b2tlTWV0aG9kIiwidHJ5Q2F0Y2giLCJ0eXBlIiwiYXJnIiwiY2FsbCIsImgiLCJsIiwiZiIsInMiLCJ5IiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsInAiLCJkIiwiZ2V0UHJvdG90eXBlT2YiLCJ2IiwidmFsdWVzIiwiZyIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsImZvckVhY2giLCJfaW52b2tlIiwiQXN5bmNJdGVyYXRvciIsImludm9rZSIsIl90eXBlb2YiLCJyZXNvbHZlIiwiX19hd2FpdCIsInRoZW4iLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsIkVycm9yIiwiZG9uZSIsIm1ldGhvZCIsImRlbGVnYXRlIiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwiVHlwZUVycm9yIiwicmVzdWx0TmFtZSIsIm5leHQiLCJuZXh0TG9jIiwicHVzaFRyeUVudHJ5IiwidHJ5TG9jIiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWZ0ZXJMb2MiLCJ0cnlFbnRyaWVzIiwicHVzaCIsInJlc2V0VHJ5RW50cnkiLCJjb21wbGV0aW9uIiwicmVzZXQiLCJpc05hTiIsImxlbmd0aCIsImRpc3BsYXlOYW1lIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImNvbnN0cnVjdG9yIiwibmFtZSIsIm1hcmsiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsImF3cmFwIiwiYXN5bmMiLCJQcm9taXNlIiwia2V5cyIsInJldmVyc2UiLCJwb3AiLCJwcmV2IiwiY2hhckF0Iiwic2xpY2UiLCJzdG9wIiwicnZhbCIsImhhbmRsZSIsImNvbXBsZXRlIiwiZmluaXNoIiwiX2NhdGNoIiwiZGVsZWdhdGVZaWVsZCIsImFzeW5jR2VuZXJhdG9yU3RlcCIsImdlbiIsInJlamVjdCIsIl9uZXh0IiwiX3Rocm93Iiwia2V5IiwiaW5mbyIsImVycm9yIiwiX2FzeW5jVG9HZW5lcmF0b3IiLCJmbiIsInNlbGYiLCJhcmdzIiwiYXJndW1lbnRzIiwiYXBwbHkiLCJlcnIiLCJ1bmRlZmluZWQiLCJfc2xpY2VkVG9BcnJheSIsImFyciIsIl9hcnJheVdpdGhIb2xlcyIsIl9pdGVyYWJsZVRvQXJyYXlMaW1pdCIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIl9ub25JdGVyYWJsZVJlc3QiLCJBcnJheSIsImlzQXJyYXkiLCJfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlciIsImFsbG93QXJyYXlMaWtlIiwiaXQiLCJGIiwiX2UiLCJub3JtYWxDb21wbGV0aW9uIiwiZGlkRXJyIiwic3RlcCIsIl9lMiIsIl90b0NvbnN1bWFibGVBcnJheSIsIl9hcnJheVdpdGhvdXRIb2xlcyIsIl9pdGVyYWJsZVRvQXJyYXkiLCJfbm9uSXRlcmFibGVTcHJlYWQiLCJtaW5MZW4iLCJfYXJyYXlMaWtlVG9BcnJheSIsInRvU3RyaW5nIiwiZnJvbSIsInRlc3QiLCJpdGVyIiwibGVuIiwiYXJyMiIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJfZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiZGVzY3JpcHRvciIsIl90b1Byb3BlcnR5S2V5IiwiX2NyZWF0ZUNsYXNzIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX2NhbGxTdXBlciIsIl90aGlzIiwiZGVyaXZlZCIsImlzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJzaGFtIiwiUHJveHkiLCJCb29sZWFuIiwidmFsdWVPZiIsIl9nZXRQcm90b3R5cGVPZiIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsIlJlZmVyZW5jZUVycm9yIiwiX2dldCIsImdldCIsImJpbmQiLCJwcm9wZXJ0eSIsInJlY2VpdmVyIiwiYmFzZSIsIl9zdXBlclByb3BCYXNlIiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIm9iamVjdCIsIl9pbmhlcml0cyIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsIl9zZXRQcm90b3R5cGVPZiIsIl93cmFwTmF0aXZlU3VwZXIiLCJDbGFzcyIsIl9jYWNoZSIsIk1hcCIsIl9pc05hdGl2ZUZ1bmN0aW9uIiwiaGFzIiwic2V0IiwiV3JhcHBlciIsIl9jb25zdHJ1Y3QiLCJQYXJlbnQiLCJfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiRnVuY3Rpb24iLCJpbmRleE9mIiwib3duS2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImZpbHRlciIsIl9vYmplY3RTcHJlYWQiLCJfZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsIm9iaiIsIl90b1ByaW1pdGl2ZSIsIlN0cmluZyIsImlucHV0IiwiaGludCIsInByaW0iLCJ0b1ByaW1pdGl2ZSIsInJlcyIsIk51bWJlciIsInByb2R1Y2UiLCJjdXJyZW50IiwiY3VycmVudDMiLCJmcmVlemUiLCJvcmlnaW5hbCIsIm9yaWdpbmFsMiIsImlzRHJhZnQiLCJpc0RyYWZ0NSIsImNyZWF0ZVNlbGVjdG9yIiwiY3JlYXRlU2VsZWN0b3JDcmVhdG9yIiwiY3JlYXRlU2VsZWN0b3JDcmVhdG9yMiIsImxydU1lbW9pemUiLCJ3ZWFrTWFwTWVtb2l6ZSIsIndlYWtNYXBNZW1vaXplMiIsImNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yQ3JlYXRvciIsImNyZWF0ZVNlbGVjdG9yMiIsImNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yMiIsImFzc2lnbiIsInNlbGVjdG9yIiwid3JhcHBlZFNlbGVjdG9yIiwiX2xlbiIsInJlc3QiLCJfa2V5IiwiY29uY2F0Iiwid2l0aFR5cGVzIiwiY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3IiLCJhcHBseU1pZGRsZXdhcmUiLCJjcmVhdGVTdG9yZSIsImNvbXBvc2UiLCJjb21wb3NlMiIsImNvbWJpbmVSZWR1Y2VycyIsImlzUGxhaW5PYmplY3QiLCJpc1BsYWluT2JqZWN0MiIsImNvbXBvc2VXaXRoRGV2VG9vbHMiLCJ3aW5kb3ciLCJfX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9DT01QT1NFX18iLCJkZXZUb29sc0VuaGFuY2VyIiwiX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fXyIsIm5vb3AzIiwidGh1bmsiLCJ0aHVua01pZGRsZXdhcmUiLCJ3aXRoRXh0cmFBcmd1bWVudCIsImlzQWN0aW9uIiwiaGFzTWF0Y2hGdW5jdGlvbiIsIm1hdGNoIiwiY3JlYXRlQWN0aW9uIiwicHJlcGFyZUFjdGlvbiIsImFjdGlvbkNyZWF0b3IiLCJwcmVwYXJlZCIsImZvcm1hdFByb2RFcnJvck1lc3NhZ2UiLCJwYXlsb2FkIiwibWV0YSIsImFjdGlvbiIsImlzQWN0aW9uQ3JlYXRvciIsImlzRlNBIiwiZXZlcnkiLCJpc1ZhbGlkS2V5IiwiZ2V0TWVzc2FnZSIsInNwbGl0VHlwZSIsInNwbGl0IiwiYWN0aW9uTmFtZSIsImNyZWF0ZUFjdGlvbkNyZWF0b3JJbnZhcmlhbnRNaWRkbGV3YXJlIiwib3B0aW9ucyIsIl9vcHRpb25zJGlzQWN0aW9uQ3JlYSIsImlzQWN0aW9uQ3JlYXRvcjIiLCJjb25zb2xlIiwid2FybiIsImNyZWF0ZU5leHRTdGF0ZSIsImlzRHJhZnRhYmxlIiwiZ2V0VGltZU1lYXN1cmVVdGlscyIsIm1heERlbGF5IiwiZm5OYW1lIiwiZWxhcHNlZCIsIm1lYXN1cmVUaW1lIiwic3RhcnRlZCIsIkRhdGUiLCJub3ciLCJmaW5pc2hlZCIsIndhcm5JZkV4Y2VlZGVkIiwiVHVwbGUiLCJfQXJyYXkiLCJfU3ltYm9sJHNwZWNpZXMiLCJfVHVwbGUiLCJfdGhpczIiLCJfbGVuMiIsIml0ZW1zIiwiX2tleTIiLCJfbGVuMyIsIl9rZXkzIiwicHJlcGVuZCIsIl9sZW40IiwiX2tleTQiLCJzcGVjaWVzIiwiZnJlZXplRHJhZnRhYmxlIiwidmFsIiwiZ2V0T3JJbnNlcnRDb21wdXRlZCIsIm1hcCIsImNvbXB1dGUiLCJpc0ltbXV0YWJsZURlZmF1bHQiLCJpc0Zyb3plbiIsInRyYWNrRm9yTXV0YXRpb25zIiwiaXNJbW11dGFibGUiLCJpZ25vcmVQYXRocyIsInRyYWNrZWRQcm9wZXJ0aWVzIiwidHJhY2tQcm9wZXJ0aWVzIiwiZGV0ZWN0TXV0YXRpb25zIiwicGF0aCIsImNoZWNrZWRPYmplY3RzIiwiU2V0IiwidHJhY2tlZCIsImFkZCIsImNoaWxkcmVuIiwiY2hpbGRQYXRoIiwiaWdub3JlZFBhdGhzIiwidHJhY2tlZFByb3BlcnR5Iiwic2FtZVBhcmVudFJlZiIsInByZXZPYmoiLCJzYW1lUmVmIiwid2FzTXV0YXRlZCIsImtleXNUb0RldGVjdCIsImhhc0lnbm9yZWRQYXRocyIsIl9sb29wIiwibmVzdGVkUGF0aCIsImhhc01hdGNoZXMiLCJzb21lIiwiaWdub3JlZCIsIlJlZ0V4cCIsInJlc3VsdCIsIl9yZXQiLCJjcmVhdGVJbW11dGFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUiLCJzdHJpbmdpZnkyIiwic2VyaWFsaXplciIsImluZGVudCIsImRlY3ljbGVyIiwiSlNPTiIsInN0cmluZ2lmeSIsImdldFNlcmlhbGl6ZTIiLCJzdGFjayIsIl8iLCJqb2luIiwidGhpc1BvcyIsInNwbGljZSIsIkluZmluaXR5IiwiZ2V0U2VyaWFsaXplIiwiX29wdGlvbnMkaXNJbW11dGFibGUiLCJfb3B0aW9ucyR3YXJuQWZ0ZXIiLCJ3YXJuQWZ0ZXIiLCJ0cmFjayIsIl9yZWYiLCJnZXRTdGF0ZSIsInN0YXRlIiwidHJhY2tlciIsIm1lYXN1cmVVdGlscyIsImRpc3BhdGNoZWRBY3Rpb24iLCJpc0FjdGlvbjIiLCJpc1BsYWluIiwiZmluZE5vblNlcmlhbGl6YWJsZVZhbHVlIiwiaXNTZXJpYWxpemFibGUiLCJnZXRFbnRyaWVzIiwiY2FjaGUiLCJmb3VuZE5lc3RlZFNlcmlhbGl6YWJsZSIsImtleVBhdGgiLCJlbnRyaWVzIiwiX2l0ZXJhdG9yIiwiX3N0ZXAiLCJfbG9vcDIiLCJfc3RlcCR2YWx1ZSIsIm5lc3RlZFZhbHVlIiwiX3JldDIiLCJpc05lc3RlZEZyb3plbiIsIl9pIiwiX09iamVjdCR2YWx1ZXMiLCJjcmVhdGVTZXJpYWxpemFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUiLCJfb3B0aW9ucyRpc1NlcmlhbGl6YWIiLCJfb3B0aW9ucyRpZ25vcmVkQWN0aW8iLCJpZ25vcmVkQWN0aW9ucyIsIl9vcHRpb25zJGlnbm9yZWRBY3RpbzIiLCJpZ25vcmVkQWN0aW9uUGF0aHMiLCJfb3B0aW9ucyRpZ25vcmVkUGF0aHMiLCJfb3B0aW9ucyR3YXJuQWZ0ZXIyIiwiX29wdGlvbnMkaWdub3JlU3RhdGUiLCJpZ25vcmVTdGF0ZSIsIl9vcHRpb25zJGlnbm9yZUFjdGlvbiIsImlnbm9yZUFjdGlvbnMiLCJfb3B0aW9ucyRkaXNhYmxlQ2FjaGUiLCJkaXNhYmxlQ2FjaGUiLCJXZWFrU2V0Iiwic3RvcmVBUEkiLCJmb3VuZEFjdGlvbk5vblNlcmlhbGl6YWJsZVZhbHVlIiwiZm91bmRTdGF0ZU5vblNlcmlhbGl6YWJsZVZhbHVlIiwiaXNCb29sZWFuIiwieCIsImJ1aWxkR2V0RGVmYXVsdE1pZGRsZXdhcmUiLCJnZXREZWZhdWx0TWlkZGxld2FyZSIsIl9yZWYyIiwiX3JlZjIkdGh1bmsiLCJfcmVmMiRpbW11dGFibGVDaGVjayIsImltbXV0YWJsZUNoZWNrIiwiX3JlZjIkc2VyaWFsaXphYmxlQ2hlIiwic2VyaWFsaXphYmxlQ2hlY2siLCJfcmVmMiRhY3Rpb25DcmVhdG9yQ2giLCJhY3Rpb25DcmVhdG9yQ2hlY2siLCJtaWRkbGV3YXJlQXJyYXkiLCJleHRyYUFyZ3VtZW50IiwiaW1tdXRhYmxlT3B0aW9ucyIsInVuc2hpZnQiLCJzZXJpYWxpemFibGVPcHRpb25zIiwiYWN0aW9uQ3JlYXRvck9wdGlvbnMiLCJTSE9VTERfQVVUT0JBVENIIiwicHJlcGFyZUF1dG9CYXRjaGVkIiwiY3JlYXRlUXVldWVXaXRoVGltZXIiLCJ0aW1lb3V0Iiwibm90aWZ5Iiwic2V0VGltZW91dCIsImF1dG9CYXRjaEVuaGFuY2VyIiwic3RvcmUiLCJub3RpZnlpbmciLCJzaG91bGROb3RpZnlBdEVuZE9mVGljayIsIm5vdGlmaWNhdGlvblF1ZXVlZCIsImxpc3RlbmVycyIsInF1ZXVlQ2FsbGJhY2siLCJxdWV1ZU1pY3JvdGFzayIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInF1ZXVlTm90aWZpY2F0aW9uIiwibm90aWZ5TGlzdGVuZXJzIiwic3Vic2NyaWJlIiwibGlzdGVuZXIyIiwid3JhcHBlZExpc3RlbmVyIiwidW5zdWJzY3JpYmUiLCJkaXNwYXRjaCIsIl9hY3Rpb24kbWV0YSIsImJ1aWxkR2V0RGVmYXVsdEVuaGFuY2VycyIsIm1pZGRsZXdhcmVFbmhhbmNlciIsImdldERlZmF1bHRFbmhhbmNlcnMiLCJfcmVmMyIsIl9yZWYzJGF1dG9CYXRjaCIsImF1dG9CYXRjaCIsImVuaGFuY2VyQXJyYXkiLCJjb25maWd1cmVTdG9yZSIsIl9yZWY0IiwiX3JlZjQkcmVkdWNlciIsInJlZHVjZXIiLCJtaWRkbGV3YXJlIiwiX3JlZjQkZGV2VG9vbHMiLCJkZXZUb29scyIsIl9yZWY0JHByZWxvYWRlZFN0YXRlIiwicHJlbG9hZGVkU3RhdGUiLCJfcmVmNCRlbmhhbmNlcnMiLCJlbmhhbmNlcnMiLCJyb290UmVkdWNlciIsImZpbmFsTWlkZGxld2FyZSIsIml0ZW0iLCJmaW5hbENvbXBvc2UiLCJ0cmFjZSIsInN0b3JlRW5oYW5jZXJzIiwiaW5jbHVkZXMiLCJjb21wb3NlZEVuaGFuY2VyIiwiY3JlYXRlTmV4dFN0YXRlMiIsImlzRHJhZnQyIiwiaXNEcmFmdGFibGUyIiwiZXhlY3V0ZVJlZHVjZXJCdWlsZGVyQ2FsbGJhY2siLCJidWlsZGVyQ2FsbGJhY2siLCJhY3Rpb25zTWFwIiwiYWN0aW9uTWF0Y2hlcnMiLCJkZWZhdWx0Q2FzZVJlZHVjZXIiLCJidWlsZGVyIiwiYWRkQ2FzZSIsInR5cGVPckFjdGlvbkNyZWF0b3IiLCJhZGRNYXRjaGVyIiwibWF0Y2hlciIsImFkZERlZmF1bHRDYXNlIiwiaXNTdGF0ZUZ1bmN0aW9uIiwiY3JlYXRlUmVkdWNlciIsImluaXRpYWxTdGF0ZSIsIm1hcE9yQnVpbGRlckNhbGxiYWNrIiwiX2V4ZWN1dGVSZWR1Y2VyQnVpbGRlIiwiX2V4ZWN1dGVSZWR1Y2VyQnVpbGRlMiIsImZpbmFsQWN0aW9uTWF0Y2hlcnMiLCJmaW5hbERlZmF1bHRDYXNlUmVkdWNlciIsImdldEluaXRpYWxTdGF0ZSIsImZyb3plbkluaXRpYWxTdGF0ZSIsImNhc2VSZWR1Y2VycyIsIl9yZWY1IiwiX3JlZjYiLCJyZWR1Y2VyMiIsImNyIiwicmVkdWNlIiwicHJldmlvdXNTdGF0ZSIsImNhc2VSZWR1Y2VyIiwiZHJhZnQiLCJtYXRjaGVzIiwiaXNBbnlPZiIsIl9sZW41IiwibWF0Y2hlcnMiLCJfa2V5NyIsImlzQWxsT2YiLCJfbGVuNiIsIl9rZXk4IiwiaGFzRXhwZWN0ZWRSZXF1ZXN0TWV0YWRhdGEiLCJ2YWxpZFN0YXR1cyIsImhhc1ZhbGlkUmVxdWVzdElkIiwicmVxdWVzdElkIiwiaGFzVmFsaWRSZXF1ZXN0U3RhdHVzIiwicmVxdWVzdFN0YXR1cyIsImlzQXN5bmNUaHVua0FycmF5IiwiaXNQZW5kaW5nIiwiX2xlbjciLCJhc3luY1RodW5rcyIsIl9rZXk5IiwiYXN5bmNUaHVuayIsInBlbmRpbmciLCJpc1JlamVjdGVkIiwiX2xlbjgiLCJfa2V5MTAiLCJyZWplY3RlZCIsImlzUmVqZWN0ZWRXaXRoVmFsdWUiLCJoYXNGbGFnIiwicmVqZWN0ZWRXaXRoVmFsdWUiLCJfbGVuOSIsIl9rZXkxMSIsImlzRnVsZmlsbGVkIiwiX2xlbjEwIiwiX2tleTEyIiwiZnVsZmlsbGVkIiwiaXNBc3luY1RodW5rQWN0aW9uIiwiX2xlbjExIiwiX2tleTEzIiwiZmxhdE1hcCIsInVybEFscGhhYmV0IiwibmFub2lkIiwic2l6ZSIsImlkIiwiTWF0aCIsInJhbmRvbSIsImNvbW1vblByb3BlcnRpZXMiLCJSZWplY3RXaXRoVmFsdWUiLCJGdWxmaWxsV2l0aE1ldGEiLCJtaW5pU2VyaWFsaXplRXJyb3IiLCJzaW1wbGVFcnJvciIsIl9pMiIsIl9jb21tb25Qcm9wZXJ0aWVzIiwibWVzc2FnZSIsImV4dGVybmFsQWJvcnRNZXNzYWdlIiwiY3JlYXRlQXN5bmNUaHVuayIsImNyZWF0ZUFzeW5jVGh1bmsyIiwidHlwZVByZWZpeCIsInBheWxvYWRDcmVhdG9yIiwic2VyaWFsaXplRXJyb3IiLCJhYm9ydGVkIiwiY29uZGl0aW9uIiwiX3JlZjciLCJzaWduYWwiLCJleHRyYSIsImlkR2VuZXJhdG9yIiwiYWJvcnRDb250cm9sbGVyIiwiQWJvcnRDb250cm9sbGVyIiwiYWJvcnRIYW5kbGVyIiwiYWJvcnRSZWFzb24iLCJhYm9ydCIsInJlYXNvbiIsImFkZEV2ZW50TGlzdGVuZXIiLCJvbmNlIiwicHJvbWlzZSIsIl9jYWxsZWUiLCJmaW5hbEFjdGlvbiIsIl9vcHRpb25zJGNvbmRpdGlvbiIsIl9vcHRpb25zJGdldFBlbmRpbmdNZSIsImNvbmRpdGlvblJlc3VsdCIsImFib3J0ZWRQcm9taXNlIiwic2tpcERpc3BhdGNoIiwiX2NhbGxlZSQiLCJfY29udGV4dCIsImlzVGhlbmFibGUiLCJnZXRQZW5kaW5nTWV0YSIsInJhY2UiLCJyZWplY3RXaXRoVmFsdWUiLCJmdWxmaWxsV2l0aFZhbHVlIiwidDAiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZGlzcGF0Y2hDb25kaXRpb25SZWplY3Rpb24iLCJ1bndyYXAiLCJ1bndyYXBSZXN1bHQiLCJzZXR0bGVkIiwiYXN5bmNUaHVua1N5bWJvbCIsImFzeW5jVGh1bmtDcmVhdG9yIiwiUmVkdWNlclR5cGUiLCJSZWR1Y2VyVHlwZTIiLCJnZXRUeXBlIiwiYWN0aW9uS2V5IiwiYnVpbGRDcmVhdGVTbGljZSIsIl9jcmVhdG9ycyRhc3luY1RodW5rIiwiX3JlZjkiLCJjcmVhdG9ycyIsImNBVCIsImNyZWF0ZVNsaWNlMiIsIl9vcHRpb25zJHJlZHVjZXJQYXRoIiwicmVkdWNlclBhdGgiLCJwcm9jZXNzIiwicmVkdWNlcnMiLCJidWlsZFJlZHVjZXJDcmVhdG9ycyIsInJlZHVjZXJOYW1lcyIsImNvbnRleHQiLCJzbGljZUNhc2VSZWR1Y2Vyc0J5TmFtZSIsInNsaWNlQ2FzZVJlZHVjZXJzQnlUeXBlIiwiYWN0aW9uQ3JlYXRvcnMiLCJzbGljZU1hdGNoZXJzIiwiY29udGV4dE1ldGhvZHMiLCJleHBvc2VBY3Rpb24iLCJuYW1lMiIsImV4cG9zZUNhc2VSZWR1Y2VyIiwicmVkdWNlck5hbWUiLCJyZWR1Y2VyRGVmaW5pdGlvbiIsInJlZHVjZXJEZXRhaWxzIiwiY3JlYXRlTm90YXRpb24iLCJpc0FzeW5jVGh1bmtTbGljZVJlZHVjZXJEZWZpbml0aW9uIiwiaGFuZGxlVGh1bmtDYXNlUmVkdWNlckRlZmluaXRpb24iLCJoYW5kbGVOb3JtYWxSZWR1Y2VyRGVmaW5pdGlvbiIsImJ1aWxkUmVkdWNlciIsImV4dHJhUmVkdWNlcnMiLCJfcmVmMTAiLCJfcmVmMTEiLCJfcmVmMTEkIiwiX3JlZjExJDIiLCJfcmVmMTEkMyIsImZpbmFsQ2FzZVJlZHVjZXJzIiwiX2l0ZXJhdG9yMiIsIl9zdGVwMiIsInNNIiwiX2l0ZXJhdG9yMyIsIl9zdGVwMyIsIm0iLCJzZWxlY3RTZWxmIiwiaW5qZWN0ZWRTZWxlY3RvckNhY2hlIiwiX3JlZHVjZXIiLCJtYWtlU2VsZWN0b3JQcm9wcyIsInJlZHVjZXJQYXRoMiIsImluamVjdGVkIiwic2VsZWN0U2xpY2UiLCJzbGljZVN0YXRlIiwiZ2V0U2VsZWN0b3JzIiwic2VsZWN0U3RhdGUiLCJzZWxlY3RvckNhY2hlIiwiV2Vha01hcCIsIl9pMyIsIl9PYmplY3QkZW50cmllcyIsIl9vcHRpb25zJHNlbGVjdG9ycyIsInNlbGVjdG9ycyIsIl9PYmplY3QkZW50cmllcyRfaSIsIndyYXBTZWxlY3RvciIsImFjdGlvbnMiLCJpbmplY3RJbnRvIiwiaW5qZWN0YWJsZSIsIl9yZWYxMiIsInBhdGhPcHQiLCJjb25maWciLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJfZXhjbHVkZWQiLCJuZXdSZWR1Y2VyUGF0aCIsImluamVjdCIsIndyYXBwZXIiLCJyb290U3RhdGUiLCJfbGVuMTIiLCJfa2V5MTQiLCJ1bndyYXBwZWQiLCJjcmVhdGVTbGljZSIsIl9yZWR1Y2VyRGVmaW5pdGlvblR5cGUiLCJwcmVwYXJlZFJlZHVjZXIiLCJwcmVwYXJlIiwiX3JlZjEzIiwibWF5YmVSZWR1Y2VyV2l0aFByZXBhcmUiLCJwcmVwYXJlQ2FsbGJhY2siLCJpc0Nhc2VSZWR1Y2VyV2l0aFByZXBhcmVEZWZpbml0aW9uIiwiX3JlZjE0Iiwibm9vcCIsImdldEluaXRpYWxFbnRpdHlTdGF0ZSIsImlkcyIsImVudGl0aWVzIiwiY3JlYXRlSW5pdGlhbFN0YXRlRmFjdG9yeSIsInN0YXRlQWRhcHRlciIsImFkZGl0aW9uYWxTdGF0ZSIsInNldEFsbCIsImNyZWF0ZVNlbGVjdG9yc0ZhY3RvcnkiLCJfb3B0aW9ucyRjcmVhdGVTZWxlY3QiLCJzZWxlY3RJZHMiLCJzZWxlY3RFbnRpdGllcyIsInNlbGVjdEFsbCIsInNlbGVjdElkIiwic2VsZWN0QnlJZCIsInNlbGVjdFRvdGFsIiwic2VsZWN0R2xvYmFsaXplZEVudGl0aWVzIiwiY3JlYXRlTmV4dFN0YXRlMyIsImlzRHJhZnQzIiwiaXNEcmFmdFR5cGVkIiwiY3JlYXRlU2luZ2xlQXJndW1lbnRTdGF0ZU9wZXJhdG9yIiwibXV0YXRvciIsIm9wZXJhdG9yIiwiY3JlYXRlU3RhdGVPcGVyYXRvciIsIm9wZXJhdGlvbiIsImlzUGF5bG9hZEFjdGlvbkFyZ3VtZW50IiwiYXJnMiIsInJ1bk11dGF0b3IiLCJjdXJyZW50MiIsImlzRHJhZnQ0Iiwic2VsZWN0SWRWYWx1ZSIsImVudGl0eSIsImVuc3VyZUVudGl0aWVzQXJyYXkiLCJnZXRDdXJyZW50Iiwic3BsaXRBZGRlZFVwZGF0ZWRFbnRpdGllcyIsIm5ld0VudGl0aWVzIiwiZXhpc3RpbmdJZHNBcnJheSIsImV4aXN0aW5nSWRzIiwiYWRkZWQiLCJ1cGRhdGVkIiwiX2l0ZXJhdG9yNCIsIl9zdGVwNCIsImNoYW5nZXMiLCJjcmVhdGVVbnNvcnRlZFN0YXRlQWRhcHRlciIsImFkZE9uZU11dGFibHkiLCJhZGRNYW55TXV0YWJseSIsIl9pdGVyYXRvcjUiLCJfc3RlcDUiLCJzZXRPbmVNdXRhYmx5Iiwic2V0TWFueU11dGFibHkiLCJfaXRlcmF0b3I2IiwiX3N0ZXA2Iiwic2V0QWxsTXV0YWJseSIsInJlbW92ZU9uZU11dGFibHkiLCJyZW1vdmVNYW55TXV0YWJseSIsImRpZE11dGF0ZSIsInJlbW92ZUFsbE11dGFibHkiLCJ0YWtlTmV3S2V5IiwidXBkYXRlIiwib3JpZ2luYWwzIiwibmV3S2V5IiwiaGFzTmV3S2V5IiwidXBkYXRlT25lTXV0YWJseSIsInVwZGF0ZU1hbnlNdXRhYmx5IiwidXBkYXRlcyIsIm5ld0tleXMiLCJ1cGRhdGVzUGVyRW50aXR5IiwiX3VwZGF0ZXNQZXJFbnRpdHkkdXBkIiwiZGlkTXV0YXRlRW50aXRpZXMiLCJkaWRNdXRhdGVJZHMiLCJ1cHNlcnRPbmVNdXRhYmx5IiwidXBzZXJ0TWFueU11dGFibHkiLCJfc3BsaXRBZGRlZFVwZGF0ZWRFbnQiLCJfc3BsaXRBZGRlZFVwZGF0ZWRFbnQyIiwicmVtb3ZlQWxsIiwiYWRkT25lIiwiYWRkTWFueSIsInNldE9uZSIsInNldE1hbnkiLCJ1cGRhdGVPbmUiLCJ1cGRhdGVNYW55IiwidXBzZXJ0T25lIiwidXBzZXJ0TWFueSIsInJlbW92ZU9uZSIsInJlbW92ZU1hbnkiLCJmaW5kSW5zZXJ0SW5kZXgiLCJzb3J0ZWRJdGVtcyIsImNvbXBhcmlzb25GdW5jdGlvbiIsImxvd0luZGV4IiwiaGlnaEluZGV4IiwibWlkZGxlSW5kZXgiLCJjdXJyZW50SXRlbSIsImluc2VydCIsImluc2VydEF0SW5kZXgiLCJjcmVhdGVTb3J0ZWRTdGF0ZUFkYXB0ZXIiLCJjb21wYXJlciIsIl9jcmVhdGVVbnNvcnRlZFN0YXRlQSIsImV4aXN0aW5nS2V5cyIsIm1vZGVscyIsIm1vZGVsIiwibWVyZ2VGdW5jdGlvbiIsIl9pdGVyYXRvcjciLCJfc3RlcDciLCJhcHBsaWVkVXBkYXRlcyIsInJlcGxhY2VkSWRzIiwiX2l0ZXJhdG9yOCIsIl9zdGVwOCIsIm5ld0lkIiwib2xkSW5kZXgiLCJfc3BsaXRBZGRlZFVwZGF0ZWRFbnQzIiwiX3NwbGl0QWRkZWRVcGRhdGVkRW50NCIsImFyZUFycmF5c0VxdWFsIiwiYiIsImFkZGVkSXRlbXMiLCJjdXJyZW50RW50aXRpZXMiLCJjdXJyZW50SWRzIiwic3RhdGVFbnRpdGllcyIsInNvcnRlZEVudGl0aWVzIiwiX2l0ZXJhdG9yOSIsIl9zdGVwOSIsIndhc1ByZXZpb3VzbHlFbXB0eSIsIl9pdGVyYXRvcjEwIiwiX3N0ZXAxMCIsInNvcnQiLCJuZXdTb3J0ZWRJZHMiLCJjcmVhdGVFbnRpdHlBZGFwdGVyIiwiX3NvcnRDb21wYXJlciRzZWxlY3RJIiwic29ydENvbXBhcmVyIiwic3RhdGVGYWN0b3J5Iiwic2VsZWN0b3JzRmFjdG9yeSIsImlzQWN0aW9uMyIsInRhc2siLCJsaXN0ZW5lciIsImNvbXBsZXRlZCIsImNhbmNlbGxlZCIsInRhc2tDYW5jZWxsZWQiLCJ0YXNrQ29tcGxldGVkIiwibGlzdGVuZXJDYW5jZWxsZWQiLCJsaXN0ZW5lckNvbXBsZXRlZCIsIlRhc2tBYm9ydEVycm9yIiwiY29kZSIsImFzc2VydEZ1bmN0aW9uIiwiZnVuYyIsImV4cGVjdGVkIiwibm9vcDIiLCJjYXRjaFJlamVjdGlvbiIsIm9uRXJyb3IiLCJhZGRBYm9ydFNpZ25hbExpc3RlbmVyIiwiYWJvcnRTaWduYWwiLCJjYWxsYmFjayIsImFib3J0Q29udHJvbGxlcldpdGhSZWFzb24iLCJ2YWxpZGF0ZUFjdGl2ZSIsInJhY2VXaXRoU2lnbmFsIiwiY2xlYW51cCIsIm5vdGlmeVJlamVjdGlvbiIsInJ1blRhc2siLCJfcmVmMTUiLCJfY2FsbGVlMiIsInRhc2syIiwiY2xlYW5VcCIsIl9jYWxsZWUyJCIsIl9jb250ZXh0MiIsInN0YXR1cyIsIl94IiwiX3gyIiwiY3JlYXRlUGF1c2UiLCJvdXRwdXQiLCJjcmVhdGVEZWxheSIsInBhdXNlIiwidGltZW91dE1zIiwiSU5URVJOQUxfTklMX1RPS0VOIiwiYWxtIiwiY3JlYXRlRm9yayIsInBhcmVudEFib3J0U2lnbmFsIiwicGFyZW50QmxvY2tpbmdQcm9taXNlcyIsImxpbmtDb250cm9sbGVycyIsImNvbnRyb2xsZXIiLCJ0YXNrRXhlY3V0b3IiLCJvcHRzIiwiY2hpbGRBYm9ydENvbnRyb2xsZXIiLCJfY2FsbGVlMyIsInJlc3VsdDIiLCJfY2FsbGVlMyQiLCJfY29udGV4dDMiLCJkZWxheSIsImF1dG9Kb2luIiwiY2FuY2VsIiwiY3JlYXRlVGFrZVBhdHRlcm4iLCJzdGFydExpc3RlbmluZyIsInRha2UiLCJfcmVmMTYiLCJfY2FsbGVlNCIsInByZWRpY2F0ZSIsInR1cGxlUHJvbWlzZSIsInByb21pc2VzIiwiX2NhbGxlZTQkIiwiX2NvbnRleHQ0Iiwic3RvcExpc3RlbmluZyIsImVmZmVjdCIsImxpc3RlbmVyQXBpIiwiZ2V0T3JpZ2luYWxTdGF0ZSIsIl94MyIsIl94NCIsImdldExpc3RlbmVyRW50cnlQcm9wc0Zyb20iLCJjcmVhdGVMaXN0ZW5lckVudHJ5IiwiX2dldExpc3RlbmVyRW50cnlQcm9wIiwiZW50cnkiLCJmaW5kTGlzdGVuZXJFbnRyeSIsImxpc3RlbmVyTWFwIiwiX2dldExpc3RlbmVyRW50cnlQcm9wMiIsImZpbmQiLCJtYXRjaFByZWRpY2F0ZU9yVHlwZSIsImNhbmNlbEFjdGl2ZUxpc3RlbmVycyIsImNyZWF0ZUNsZWFyTGlzdGVuZXJNaWRkbGV3YXJlIiwiY2xlYXIiLCJzYWZlbHlOb3RpZnlFcnJvciIsImVycm9ySGFuZGxlciIsImVycm9yVG9Ob3RpZnkiLCJlcnJvckluZm8iLCJlcnJvckhhbmRsZXJFcnJvciIsImFkZExpc3RlbmVyIiwiY2xlYXJBbGxMaXN0ZW5lcnMiLCJyZW1vdmVMaXN0ZW5lciIsImRlZmF1bHRFcnJvckhhbmRsZXIiLCJfY29uc29sZSIsIl9sZW4xMyIsIl9rZXkxNSIsImNyZWF0ZUxpc3RlbmVyTWlkZGxld2FyZSIsIm1pZGRsZXdhcmVPcHRpb25zIiwiX21pZGRsZXdhcmVPcHRpb25zJG9uIiwiaW5zZXJ0RW50cnkiLCJjYW5jZWxPcHRpb25zIiwiY2FuY2VsQWN0aXZlIiwiX2ZpbmRMaXN0ZW5lckVudHJ5Iiwibm90aWZ5TGlzdGVuZXIiLCJfcmVmMTciLCJfY2FsbGVlNSIsImFwaSIsImludGVybmFsVGFza0NvbnRyb2xsZXIiLCJhdXRvSm9pblByb21pc2VzIiwiX2NhbGxlZTUkIiwiX2NvbnRleHQ1IiwiZm9yayIsInRocm93SWZDYW5jZWxsZWQiLCJyYWlzZWRCeSIsImFsbCIsIl94NSIsIl94NiIsIl94NyIsIl94OCIsImNsZWFyTGlzdGVuZXJNaWRkbGV3YXJlIiwib3JpZ2luYWxTdGF0ZSIsImN1cnJlbnRTdGF0ZSIsImxpc3RlbmVyRW50cmllcyIsIl9pNCIsIl9saXN0ZW5lckVudHJpZXMiLCJydW5MaXN0ZW5lciIsInByZWRpY2F0ZUVycm9yIiwiY2xlYXJMaXN0ZW5lcnMiLCJjb21wb3NlMyIsImNyZWF0ZU1pZGRsZXdhcmVFbnRyeSIsImFwcGxpZWQiLCJtYXRjaEluc3RhbmNlIiwiaW5zdGFuY2VJZCIsIl9hY3Rpb24kbWV0YTIiLCJjcmVhdGVEeW5hbWljTWlkZGxld2FyZSIsIm1pZGRsZXdhcmVNYXAiLCJ3aXRoTWlkZGxld2FyZSIsIl9sZW4xNCIsIm1pZGRsZXdhcmVzIiwiX2tleTE2IiwiYWRkTWlkZGxld2FyZSIsImFkZE1pZGRsZXdhcmUyIiwiX2xlbjE1IiwiX2tleTE3IiwibWlkZGxld2FyZTIiLCJnZXRGaW5hbE1pZGRsZXdhcmUiLCJhcHBsaWVkTWlkZGxld2FyZSIsImlzV2l0aE1pZGRsZXdhcmUiLCJjb21iaW5lUmVkdWNlcnMyIiwiaXNTbGljZUxpa2UiLCJtYXliZVNsaWNlTGlrZSIsImdldFJlZHVjZXJzIiwic2xpY2VzIiwic2xpY2VPck1hcCIsIk9SSUdJTkFMX1NUQVRFIiwiaXNTdGF0ZVByb3h5Iiwic3RhdGVQcm94eU1hcCIsImNyZWF0ZVN0YXRlUHJveHkiLCJyZWR1Y2VyTWFwIiwicHJvcCIsInJlZHVjZXJSZXN1bHQiLCJub29wUmVkdWNlciIsImNvbWJpbmVTbGljZXMiLCJfbGVuMTYiLCJfa2V5MTgiLCJmcm9tRW50cmllcyIsImdldFJlZHVjZXIiLCJjb21iaW5lZFJlZHVjZXIiLCJ3aXRoTGF6eUxvYWRlZFNsaWNlcyIsInJlZHVjZXJUb0luamVjdCIsImN1cnJlbnRSZWR1Y2VyIiwib3ZlcnJpZGVFeGlzdGluZyIsIm1ha2VTZWxlY3RvciIsInNlbGVjdG9yRm4iLCJzZWxlY3RvcjIiLCJfbGVuMTciLCJfa2V5MTkiLCJpc0ZsdXhTdGFuZGFyZEFjdGlvbiJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs\n");

/***/ })

};
;