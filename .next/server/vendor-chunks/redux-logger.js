/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/redux-logger";
exports.ids = ["vendor-chunks/redux-logger"];
exports.modules = {

/***/ "(ssr)/./node_modules/redux-logger/dist/redux-logger.js":
/*!********************************************************!*\
  !*** ./node_modules/redux-logger/dist/redux-logger.js ***!
  \********************************************************/
/***/ (function(module, exports) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\n!function (e, t) {\n  \"object\" == ( false ? 0 : _typeof(exports)) && \"undefined\" != \"object\" ? t(exports) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (t),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;\n}(this, function (e) {\n  \"use strict\";\n\n  function t(e, t) {\n    e.super_ = t, e.prototype = Object.create(t.prototype, {\n      constructor: {\n        value: e,\n        enumerable: !1,\n        writable: !0,\n        configurable: !0\n      }\n    });\n  }\n  function r(e, t) {\n    Object.defineProperty(this, \"kind\", {\n      value: e,\n      enumerable: !0\n    }), t && t.length && Object.defineProperty(this, \"path\", {\n      value: t,\n      enumerable: !0\n    });\n  }\n  function n(e, t, r) {\n    n.super_.call(this, \"E\", e), Object.defineProperty(this, \"lhs\", {\n      value: t,\n      enumerable: !0\n    }), Object.defineProperty(this, \"rhs\", {\n      value: r,\n      enumerable: !0\n    });\n  }\n  function o(e, t) {\n    o.super_.call(this, \"N\", e), Object.defineProperty(this, \"rhs\", {\n      value: t,\n      enumerable: !0\n    });\n  }\n  function i(e, t) {\n    i.super_.call(this, \"D\", e), Object.defineProperty(this, \"lhs\", {\n      value: t,\n      enumerable: !0\n    });\n  }\n  function a(e, t, r) {\n    a.super_.call(this, \"A\", e), Object.defineProperty(this, \"index\", {\n      value: t,\n      enumerable: !0\n    }), Object.defineProperty(this, \"item\", {\n      value: r,\n      enumerable: !0\n    });\n  }\n  function f(e, t, r) {\n    var n = e.slice((r || t) + 1 || e.length);\n    return e.length = t < 0 ? e.length + t : t, e.push.apply(e, n), e;\n  }\n  function u(e) {\n    var t = \"undefined\" == typeof e ? \"undefined\" : N(e);\n    return \"object\" !== t ? t : e === Math ? \"math\" : null === e ? \"null\" : Array.isArray(e) ? \"array\" : \"[object Date]\" === Object.prototype.toString.call(e) ? \"date\" : \"function\" == typeof e.toString && /^\\/.*\\//.test(e.toString()) ? \"regexp\" : \"object\";\n  }\n  function l(e, t, r, c, s, d, p) {\n    s = s || [], p = p || [];\n    var g = s.slice(0);\n    if (\"undefined\" != typeof d) {\n      if (c) {\n        if (\"function\" == typeof c && c(g, d)) return;\n        if (\"object\" === (\"undefined\" == typeof c ? \"undefined\" : N(c))) {\n          if (c.prefilter && c.prefilter(g, d)) return;\n          if (c.normalize) {\n            var h = c.normalize(g, d, e, t);\n            h && (e = h[0], t = h[1]);\n          }\n        }\n      }\n      g.push(d);\n    }\n    \"regexp\" === u(e) && \"regexp\" === u(t) && (e = e.toString(), t = t.toString());\n    var y = \"undefined\" == typeof e ? \"undefined\" : N(e),\n      v = \"undefined\" == typeof t ? \"undefined\" : N(t),\n      b = \"undefined\" !== y || p && p[p.length - 1].lhs && p[p.length - 1].lhs.hasOwnProperty(d),\n      m = \"undefined\" !== v || p && p[p.length - 1].rhs && p[p.length - 1].rhs.hasOwnProperty(d);\n    if (!b && m) r(new o(g, t));else if (!m && b) r(new i(g, e));else if (u(e) !== u(t)) r(new n(g, e, t));else if (\"date\" === u(e) && e - t !== 0) r(new n(g, e, t));else if (\"object\" === y && null !== e && null !== t) {\n      if (p.filter(function (t) {\n        return t.lhs === e;\n      }).length) e !== t && r(new n(g, e, t));else {\n        if (p.push({\n          lhs: e,\n          rhs: t\n        }), Array.isArray(e)) {\n          var w;\n          e.length;\n          for (w = 0; w < e.length; w++) w >= t.length ? r(new a(g, w, new i(void 0, e[w]))) : l(e[w], t[w], r, c, g, w, p);\n          for (; w < t.length;) r(new a(g, w, new o(void 0, t[w++])));\n        } else {\n          var x = Object.keys(e),\n            S = Object.keys(t);\n          x.forEach(function (n, o) {\n            var i = S.indexOf(n);\n            i >= 0 ? (l(e[n], t[n], r, c, g, n, p), S = f(S, i)) : l(e[n], void 0, r, c, g, n, p);\n          }), S.forEach(function (e) {\n            l(void 0, t[e], r, c, g, e, p);\n          });\n        }\n        p.length = p.length - 1;\n      }\n    } else e !== t && (\"number\" === y && isNaN(e) && isNaN(t) || r(new n(g, e, t)));\n  }\n  function c(e, t, r, n) {\n    return n = n || [], l(e, t, function (e) {\n      e && n.push(e);\n    }, r), n.length ? n : void 0;\n  }\n  function s(e, t, r) {\n    if (r.path && r.path.length) {\n      var n,\n        o = e[t],\n        i = r.path.length - 1;\n      for (n = 0; n < i; n++) o = o[r.path[n]];\n      switch (r.kind) {\n        case \"A\":\n          s(o[r.path[n]], r.index, r.item);\n          break;\n        case \"D\":\n          delete o[r.path[n]];\n          break;\n        case \"E\":\n        case \"N\":\n          o[r.path[n]] = r.rhs;\n      }\n    } else switch (r.kind) {\n      case \"A\":\n        s(e[t], r.index, r.item);\n        break;\n      case \"D\":\n        e = f(e, t);\n        break;\n      case \"E\":\n      case \"N\":\n        e[t] = r.rhs;\n    }\n    return e;\n  }\n  function d(e, t, r) {\n    if (e && t && r && r.kind) {\n      for (var n = e, o = -1, i = r.path ? r.path.length - 1 : 0; ++o < i;) \"undefined\" == typeof n[r.path[o]] && (n[r.path[o]] = \"number\" == typeof r.path[o] ? [] : {}), n = n[r.path[o]];\n      switch (r.kind) {\n        case \"A\":\n          s(r.path ? n[r.path[o]] : n, r.index, r.item);\n          break;\n        case \"D\":\n          delete n[r.path[o]];\n          break;\n        case \"E\":\n        case \"N\":\n          n[r.path[o]] = r.rhs;\n      }\n    }\n  }\n  function p(e, t, r) {\n    if (r.path && r.path.length) {\n      var n,\n        o = e[t],\n        i = r.path.length - 1;\n      for (n = 0; n < i; n++) o = o[r.path[n]];\n      switch (r.kind) {\n        case \"A\":\n          p(o[r.path[n]], r.index, r.item);\n          break;\n        case \"D\":\n          o[r.path[n]] = r.lhs;\n          break;\n        case \"E\":\n          o[r.path[n]] = r.lhs;\n          break;\n        case \"N\":\n          delete o[r.path[n]];\n      }\n    } else switch (r.kind) {\n      case \"A\":\n        p(e[t], r.index, r.item);\n        break;\n      case \"D\":\n        e[t] = r.lhs;\n        break;\n      case \"E\":\n        e[t] = r.lhs;\n        break;\n      case \"N\":\n        e = f(e, t);\n    }\n    return e;\n  }\n  function g(e, t, r) {\n    if (e && t && r && r.kind) {\n      var n,\n        o,\n        i = e;\n      for (o = r.path.length - 1, n = 0; n < o; n++) \"undefined\" == typeof i[r.path[n]] && (i[r.path[n]] = {}), i = i[r.path[n]];\n      switch (r.kind) {\n        case \"A\":\n          p(i[r.path[n]], r.index, r.item);\n          break;\n        case \"D\":\n          i[r.path[n]] = r.lhs;\n          break;\n        case \"E\":\n          i[r.path[n]] = r.lhs;\n          break;\n        case \"N\":\n          delete i[r.path[n]];\n      }\n    }\n  }\n  function h(e, t, r) {\n    if (e && t) {\n      var n = function n(_n) {\n        r && !r(e, t, _n) || d(e, t, _n);\n      };\n      l(e, t, n);\n    }\n  }\n  function y(e) {\n    return \"color: \" + F[e].color + \"; font-weight: bold\";\n  }\n  function v(e) {\n    var t = e.kind,\n      r = e.path,\n      n = e.lhs,\n      o = e.rhs,\n      i = e.index,\n      a = e.item;\n    switch (t) {\n      case \"E\":\n        return [r.join(\".\"), n, \"→\", o];\n      case \"N\":\n        return [r.join(\".\"), o];\n      case \"D\":\n        return [r.join(\".\")];\n      case \"A\":\n        return [r.join(\".\") + \"[\" + i + \"]\", a];\n      default:\n        return [];\n    }\n  }\n  function b(e, t, r, n) {\n    var o = c(e, t);\n    try {\n      n ? r.groupCollapsed(\"diff\") : r.group(\"diff\");\n    } catch (e) {\n      r.log(\"diff\");\n    }\n    o ? o.forEach(function (e) {\n      var t = e.kind,\n        n = v(e);\n      r.log.apply(r, [\"%c \" + F[t].text, y(t)].concat(P(n)));\n    }) : r.log(\"—— no diff ——\");\n    try {\n      r.groupEnd();\n    } catch (e) {\n      r.log(\"—— diff end —— \");\n    }\n  }\n  function m(e, t, r, n) {\n    switch (\"undefined\" == typeof e ? \"undefined\" : N(e)) {\n      case \"object\":\n        return \"function\" == typeof e[n] ? e[n].apply(e, P(r)) : e[n];\n      case \"function\":\n        return e(t);\n      default:\n        return e;\n    }\n  }\n  function w(e) {\n    var t = e.timestamp,\n      r = e.duration;\n    return function (e, n, o) {\n      var i = [\"action\"];\n      return i.push(\"%c\" + String(e.type)), t && i.push(\"%c@ \" + n), r && i.push(\"%c(in \" + o.toFixed(2) + \" ms)\"), i.join(\" \");\n    };\n  }\n  function x(e, t) {\n    var r = t.logger,\n      n = t.actionTransformer,\n      o = t.titleFormatter,\n      i = void 0 === o ? w(t) : o,\n      a = t.collapsed,\n      f = t.colors,\n      u = t.level,\n      l = t.diff,\n      c = \"undefined\" == typeof t.titleFormatter;\n    e.forEach(function (o, s) {\n      var d = o.started,\n        p = o.startedTime,\n        g = o.action,\n        h = o.prevState,\n        y = o.error,\n        v = o.took,\n        w = o.nextState,\n        x = e[s + 1];\n      x && (w = x.prevState, v = x.started - d);\n      var S = n(g),\n        k = \"function\" == typeof a ? a(function () {\n          return w;\n        }, g, o) : a,\n        j = D(p),\n        E = f.title ? \"color: \" + f.title(S) + \";\" : \"\",\n        A = [\"color: gray; font-weight: lighter;\"];\n      A.push(E), t.timestamp && A.push(\"color: gray; font-weight: lighter;\"), t.duration && A.push(\"color: gray; font-weight: lighter;\");\n      var O = i(S, j, v);\n      try {\n        k ? f.title && c ? r.groupCollapsed.apply(r, [\"%c \" + O].concat(A)) : r.groupCollapsed(O) : f.title && c ? r.group.apply(r, [\"%c \" + O].concat(A)) : r.group(O);\n      } catch (e) {\n        r.log(O);\n      }\n      var N = m(u, S, [h], \"prevState\"),\n        P = m(u, S, [S], \"action\"),\n        C = m(u, S, [y, h], \"error\"),\n        F = m(u, S, [w], \"nextState\");\n      if (N) if (f.prevState) {\n        var L = \"color: \" + f.prevState(h) + \"; font-weight: bold\";\n        r[N](\"%c prev state\", L, h);\n      } else r[N](\"prev state\", h);\n      if (P) if (f.action) {\n        var T = \"color: \" + f.action(S) + \"; font-weight: bold\";\n        r[P](\"%c action    \", T, S);\n      } else r[P](\"action    \", S);\n      if (y && C) if (f.error) {\n        var M = \"color: \" + f.error(y, h) + \"; font-weight: bold;\";\n        r[C](\"%c error     \", M, y);\n      } else r[C](\"error     \", y);\n      if (F) if (f.nextState) {\n        var _ = \"color: \" + f.nextState(w) + \"; font-weight: bold\";\n        r[F](\"%c next state\", _, w);\n      } else r[F](\"next state\", w);\n      l && b(h, w, r, k);\n      try {\n        r.groupEnd();\n      } catch (e) {\n        r.log(\"—— log end ——\");\n      }\n    });\n  }\n  function S() {\n    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},\n      t = Object.assign({}, L, e),\n      r = t.logger,\n      n = t.stateTransformer,\n      o = t.errorTransformer,\n      i = t.predicate,\n      a = t.logErrors,\n      f = t.diffPredicate;\n    if (\"undefined\" == typeof r) return function () {\n      return function (e) {\n        return function (t) {\n          return e(t);\n        };\n      };\n    };\n    if (e.getState && e.dispatch) return console.error(\"[redux-logger] redux-logger not installed. Make sure to pass logger instance as middleware:\\n// Logger with default options\\nimport { logger } from 'redux-logger'\\nconst store = createStore(\\n  reducer,\\n  applyMiddleware(logger)\\n)\\n// Or you can create your own logger with custom options http://bit.ly/redux-logger-options\\nimport createLogger from 'redux-logger'\\nconst logger = createLogger({\\n  // ...options\\n});\\nconst store = createStore(\\n  reducer,\\n  applyMiddleware(logger)\\n)\\n\"), function () {\n      return function (e) {\n        return function (t) {\n          return e(t);\n        };\n      };\n    };\n    var u = [];\n    return function (e) {\n      var r = e.getState;\n      return function (e) {\n        return function (l) {\n          if (\"function\" == typeof i && !i(r, l)) return e(l);\n          var c = {};\n          u.push(c), c.started = O.now(), c.startedTime = new Date(), c.prevState = n(r()), c.action = l;\n          var s = void 0;\n          if (a) try {\n            s = e(l);\n          } catch (e) {\n            c.error = o(e);\n          } else s = e(l);\n          c.took = O.now() - c.started, c.nextState = n(r());\n          var d = t.diff && \"function\" == typeof f ? f(r, l) : t.diff;\n          if (x(u, Object.assign({}, t, {\n            diff: d\n          })), u.length = 0, c.error) throw c.error;\n          return s;\n        };\n      };\n    };\n  }\n  var k,\n    j,\n    E = function E(e, t) {\n      return new Array(t + 1).join(e);\n    },\n    A = function A(e, t) {\n      return E(\"0\", t - e.toString().length) + e;\n    },\n    D = function D(e) {\n      return A(e.getHours(), 2) + \":\" + A(e.getMinutes(), 2) + \":\" + A(e.getSeconds(), 2) + \".\" + A(e.getMilliseconds(), 3);\n    },\n    O = \"undefined\" != typeof performance && null !== performance && \"function\" == typeof performance.now ? performance : Date,\n    N = \"function\" == typeof Symbol && \"symbol\" == _typeof(Symbol.iterator) ? function (e) {\n      return _typeof(e);\n    } : function (e) {\n      return e && \"function\" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? \"symbol\" : _typeof(e);\n    },\n    P = function P(e) {\n      if (Array.isArray(e)) {\n        for (var t = 0, r = Array(e.length); t < e.length; t++) r[t] = e[t];\n        return r;\n      }\n      return Array.from(e);\n    },\n    C = [];\n  k = \"object\" === (\"undefined\" == typeof global ? \"undefined\" : N(global)) && global ? global :  false ? 0 : {}, j = k.DeepDiff, j && C.push(function () {\n    \"undefined\" != typeof j && k.DeepDiff === c && (k.DeepDiff = j, j = void 0);\n  }), t(n, r), t(o, r), t(i, r), t(a, r), Object.defineProperties(c, {\n    diff: {\n      value: c,\n      enumerable: !0\n    },\n    observableDiff: {\n      value: l,\n      enumerable: !0\n    },\n    applyDiff: {\n      value: h,\n      enumerable: !0\n    },\n    applyChange: {\n      value: d,\n      enumerable: !0\n    },\n    revertChange: {\n      value: g,\n      enumerable: !0\n    },\n    isConflict: {\n      value: function value() {\n        return \"undefined\" != typeof j;\n      },\n      enumerable: !0\n    },\n    noConflict: {\n      value: function value() {\n        return C && (C.forEach(function (e) {\n          e();\n        }), C = null), c;\n      },\n      enumerable: !0\n    }\n  });\n  var F = {\n      E: {\n        color: \"#2196F3\",\n        text: \"CHANGED:\"\n      },\n      N: {\n        color: \"#4CAF50\",\n        text: \"ADDED:\"\n      },\n      D: {\n        color: \"#F44336\",\n        text: \"DELETED:\"\n      },\n      A: {\n        color: \"#2196F3\",\n        text: \"ARRAY:\"\n      }\n    },\n    L = {\n      level: \"log\",\n      logger: console,\n      logErrors: !0,\n      collapsed: void 0,\n      predicate: void 0,\n      duration: !1,\n      timestamp: !0,\n      stateTransformer: function stateTransformer(e) {\n        return e;\n      },\n      actionTransformer: function actionTransformer(e) {\n        return e;\n      },\n      errorTransformer: function errorTransformer(e) {\n        return e;\n      },\n      colors: {\n        title: function title() {\n          return \"inherit\";\n        },\n        prevState: function prevState() {\n          return \"#9E9E9E\";\n        },\n        action: function action() {\n          return \"#03A9F4\";\n        },\n        nextState: function nextState() {\n          return \"#4CAF50\";\n        },\n        error: function error() {\n          return \"#F20404\";\n        }\n      },\n      diff: !1,\n      diffPredicate: void 0,\n      transformer: void 0\n    },\n    T = function T() {\n      var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},\n        t = e.dispatch,\n        r = e.getState;\n      return \"function\" == typeof t || \"function\" == typeof r ? S()({\n        dispatch: t,\n        getState: r\n      }) : void console.error(\"\\n[redux-logger v3] BREAKING CHANGE\\n[redux-logger v3] Since 3.0.0 redux-logger exports by default logger with default settings.\\n[redux-logger v3] Change\\n[redux-logger v3] import createLogger from 'redux-logger'\\n[redux-logger v3] to\\n[redux-logger v3] import { createLogger } from 'redux-logger'\\n\");\n    };\n  e.defaults = L, e.createLogger = S, e.logger = T, e[\"default\"] = T, Object.defineProperty(e, \"__esModule\", {\n    value: !0\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/redux-logger/dist/redux-logger.js\n");

/***/ })

};
;