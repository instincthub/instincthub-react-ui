"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/prosemirror-transform";
exports.ids = ["vendor-chunks/prosemirror-transform"];
exports.modules = {

/***/ "(ssr)/./node_modules/prosemirror-transform/dist/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/prosemirror-transform/dist/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AddMarkStep: () => (/* binding */ AddMarkStep),\n/* harmony export */   AddNodeMarkStep: () => (/* binding */ AddNodeMarkStep),\n/* harmony export */   AttrStep: () => (/* binding */ AttrStep),\n/* harmony export */   DocAttrStep: () => (/* binding */ DocAttrStep),\n/* harmony export */   MapResult: () => (/* binding */ MapResult),\n/* harmony export */   Mapping: () => (/* binding */ Mapping),\n/* harmony export */   RemoveMarkStep: () => (/* binding */ RemoveMarkStep),\n/* harmony export */   RemoveNodeMarkStep: () => (/* binding */ RemoveNodeMarkStep),\n/* harmony export */   ReplaceAroundStep: () => (/* binding */ ReplaceAroundStep),\n/* harmony export */   ReplaceStep: () => (/* binding */ ReplaceStep),\n/* harmony export */   Step: () => (/* binding */ Step),\n/* harmony export */   StepMap: () => (/* binding */ StepMap),\n/* harmony export */   StepResult: () => (/* binding */ StepResult),\n/* harmony export */   Transform: () => (/* binding */ Transform),\n/* harmony export */   TransformError: () => (/* binding */ TransformError),\n/* harmony export */   canJoin: () => (/* binding */ canJoin),\n/* harmony export */   canSplit: () => (/* binding */ canSplit),\n/* harmony export */   dropPoint: () => (/* binding */ dropPoint),\n/* harmony export */   findWrapping: () => (/* binding */ findWrapping),\n/* harmony export */   insertPoint: () => (/* binding */ insertPoint),\n/* harmony export */   joinPoint: () => (/* binding */ joinPoint),\n/* harmony export */   liftTarget: () => (/* binding */ liftTarget),\n/* harmony export */   replaceStep: () => (/* binding */ replaceStep)\n/* harmony export */ });\n/* harmony import */ var prosemirror_model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-model */ \"(ssr)/./node_modules/prosemirror-model/dist/index.js\");\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct.bind(); } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\nfunction _callSuper(_this, derived, args) {\n  function isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n      return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    } catch (e) {\n      return false;\n    }\n  }\n  derived = _getPrototypeOf(derived);\n  return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));\n}\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\n\n// Recovery values encode a range index and an offset. They are\n// represented as numbers, because tons of them will be created when\n// mapping, for example, a large number of decorations. The number's\n// lower 16 bits provide the index, the remaining bits the offset.\n//\n// Note: We intentionally don't use bit shift operators to en- and\n// decode these, since those clip to 32 bits, which we might in rare\n// cases want to overflow. A 64-bit float can represent 48-bit\n// integers precisely.\nvar lower16 = 0xffff;\nvar factor16 = Math.pow(2, 16);\nfunction makeRecover(index, offset) {\n  return index + offset * factor16;\n}\nfunction recoverIndex(value) {\n  return value & lower16;\n}\nfunction recoverOffset(value) {\n  return (value - (value & lower16)) / factor16;\n}\nvar DEL_BEFORE = 1,\n  DEL_AFTER = 2,\n  DEL_ACROSS = 4,\n  DEL_SIDE = 8;\n/**\nAn object representing a mapped position with extra\ninformation.\n*/\nvar MapResult = /*#__PURE__*/function () {\n  /**\n  @internal\n  */\n  function MapResult(\n  /**\n  The mapped version of the position.\n  */\n  pos,\n  /**\n  @internal\n  */\n  delInfo,\n  /**\n  @internal\n  */\n  recover) {\n    _classCallCheck(this, MapResult);\n    this.pos = pos;\n    this.delInfo = delInfo;\n    this.recover = recover;\n  }\n  /**\n  Tells you whether the position was deleted, that is, whether the\n  step removed the token on the side queried (via the `assoc`)\n  argument from the document.\n  */\n  return _createClass(MapResult, [{\n    key: \"deleted\",\n    get: function get() {\n      return (this.delInfo & DEL_SIDE) > 0;\n    }\n    /**\n    Tells you whether the token before the mapped position was deleted.\n    */\n  }, {\n    key: \"deletedBefore\",\n    get: function get() {\n      return (this.delInfo & (DEL_BEFORE | DEL_ACROSS)) > 0;\n    }\n    /**\n    True when the token after the mapped position was deleted.\n    */\n  }, {\n    key: \"deletedAfter\",\n    get: function get() {\n      return (this.delInfo & (DEL_AFTER | DEL_ACROSS)) > 0;\n    }\n    /**\n    Tells whether any of the steps mapped through deletes across the\n    position (including both the token before and after the\n    position).\n    */\n  }, {\n    key: \"deletedAcross\",\n    get: function get() {\n      return (this.delInfo & DEL_ACROSS) > 0;\n    }\n  }]);\n}();\n/**\nA map describing the deletions and insertions made by a step, which\ncan be used to find the correspondence between positions in the\npre-step version of a document and the same position in the\npost-step version.\n*/\nvar StepMap = /*#__PURE__*/function () {\n  /**\n  Create a position map. The modifications to the document are\n  represented as an array of numbers, in which each group of three\n  represents a modified chunk as `[start, oldSize, newSize]`.\n  */\n  function StepMap(\n  /**\n  @internal\n  */\n  ranges) {\n    var inverted = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    _classCallCheck(this, StepMap);\n    this.ranges = ranges;\n    this.inverted = inverted;\n    if (!ranges.length && StepMap.empty) return StepMap.empty;\n  }\n  /**\n  @internal\n  */\n  return _createClass(StepMap, [{\n    key: \"recover\",\n    value: function recover(value) {\n      var diff = 0,\n        index = recoverIndex(value);\n      if (!this.inverted) for (var i = 0; i < index; i++) diff += this.ranges[i * 3 + 2] - this.ranges[i * 3 + 1];\n      return this.ranges[index * 3] + diff + recoverOffset(value);\n    }\n  }, {\n    key: \"mapResult\",\n    value: function mapResult(pos) {\n      var assoc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      return this._map(pos, assoc, false);\n    }\n  }, {\n    key: \"map\",\n    value: function map(pos) {\n      var assoc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      return this._map(pos, assoc, true);\n    }\n    /**\n    @internal\n    */\n  }, {\n    key: \"_map\",\n    value: function _map(pos, assoc, simple) {\n      var diff = 0,\n        oldIndex = this.inverted ? 2 : 1,\n        newIndex = this.inverted ? 1 : 2;\n      for (var i = 0; i < this.ranges.length; i += 3) {\n        var start = this.ranges[i] - (this.inverted ? diff : 0);\n        if (start > pos) break;\n        var oldSize = this.ranges[i + oldIndex],\n          newSize = this.ranges[i + newIndex],\n          end = start + oldSize;\n        if (pos <= end) {\n          var side = !oldSize ? assoc : pos == start ? -1 : pos == end ? 1 : assoc;\n          var result = start + diff + (side < 0 ? 0 : newSize);\n          if (simple) return result;\n          var recover = pos == (assoc < 0 ? start : end) ? null : makeRecover(i / 3, pos - start);\n          var del = pos == start ? DEL_AFTER : pos == end ? DEL_BEFORE : DEL_ACROSS;\n          if (assoc < 0 ? pos != start : pos != end) del |= DEL_SIDE;\n          return new MapResult(result, del, recover);\n        }\n        diff += newSize - oldSize;\n      }\n      return simple ? pos + diff : new MapResult(pos + diff, 0, null);\n    }\n    /**\n    @internal\n    */\n  }, {\n    key: \"touches\",\n    value: function touches(pos, recover) {\n      var diff = 0,\n        index = recoverIndex(recover);\n      var oldIndex = this.inverted ? 2 : 1,\n        newIndex = this.inverted ? 1 : 2;\n      for (var i = 0; i < this.ranges.length; i += 3) {\n        var start = this.ranges[i] - (this.inverted ? diff : 0);\n        if (start > pos) break;\n        var oldSize = this.ranges[i + oldIndex],\n          end = start + oldSize;\n        if (pos <= end && i == index * 3) return true;\n        diff += this.ranges[i + newIndex] - oldSize;\n      }\n      return false;\n    }\n    /**\n    Calls the given function on each of the changed ranges included in\n    this map.\n    */\n  }, {\n    key: \"forEach\",\n    value: function forEach(f) {\n      var oldIndex = this.inverted ? 2 : 1,\n        newIndex = this.inverted ? 1 : 2;\n      for (var i = 0, diff = 0; i < this.ranges.length; i += 3) {\n        var start = this.ranges[i],\n          oldStart = start - (this.inverted ? diff : 0),\n          newStart = start + (this.inverted ? 0 : diff);\n        var oldSize = this.ranges[i + oldIndex],\n          newSize = this.ranges[i + newIndex];\n        f(oldStart, oldStart + oldSize, newStart, newStart + newSize);\n        diff += newSize - oldSize;\n      }\n    }\n    /**\n    Create an inverted version of this map. The result can be used to\n    map positions in the post-step document to the pre-step document.\n    */\n  }, {\n    key: \"invert\",\n    value: function invert() {\n      return new StepMap(this.ranges, !this.inverted);\n    }\n    /**\n    @internal\n    */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return (this.inverted ? \"-\" : \"\") + JSON.stringify(this.ranges);\n    }\n    /**\n    Create a map that moves all positions by offset `n` (which may be\n    negative). This can be useful when applying steps meant for a\n    sub-document to a larger document, or vice-versa.\n    */\n  }], [{\n    key: \"offset\",\n    value: function offset(n) {\n      return n == 0 ? StepMap.empty : new StepMap(n < 0 ? [0, -n, 0] : [0, 0, n]);\n    }\n  }]);\n}();\n/**\nA StepMap that contains no changed ranges.\n*/\nStepMap.empty = new StepMap([]);\n/**\nA mapping represents a pipeline of zero or more [step\nmaps](https://prosemirror.net/docs/ref/#transform.StepMap). It has special provisions for losslessly\nhandling mapping positions through a series of steps in which some\nsteps are inverted versions of earlier steps. (This comes up when\n‘[rebasing](https://prosemirror.net/docs/guide/#transform.rebasing)’ steps for\ncollaboration or history management.)\n*/\nvar Mapping = /*#__PURE__*/function () {\n  /**\n  Create a new mapping with the given position maps.\n  */\n  function Mapping(maps,\n  /**\n  @internal\n  */\n  mirror) {\n    var from = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var to = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : maps ? maps.length : 0;\n    _classCallCheck(this, Mapping);\n    this.mirror = mirror;\n    this.from = from;\n    this.to = to;\n    this._maps = maps || [];\n    this.ownData = !(maps || mirror);\n  }\n  /**\n  The step maps in this mapping.\n  */\n  return _createClass(Mapping, [{\n    key: \"maps\",\n    get: function get() {\n      return this._maps;\n    }\n    /**\n    Create a mapping that maps only through a part of this one.\n    */\n  }, {\n    key: \"slice\",\n    value: function slice() {\n      var from = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.maps.length;\n      return new Mapping(this._maps, this.mirror, from, to);\n    }\n    /**\n    Add a step map to the end of this mapping. If `mirrors` is\n    given, it should be the index of the step map that is the mirror\n    image of this one.\n    */\n  }, {\n    key: \"appendMap\",\n    value: function appendMap(map, mirrors) {\n      if (!this.ownData) {\n        this._maps = this._maps.slice();\n        this.mirror = this.mirror && this.mirror.slice();\n        this.ownData = true;\n      }\n      this.to = this._maps.push(map);\n      if (mirrors != null) this.setMirror(this._maps.length - 1, mirrors);\n    }\n    /**\n    Add all the step maps in a given mapping to this one (preserving\n    mirroring information).\n    */\n  }, {\n    key: \"appendMapping\",\n    value: function appendMapping(mapping) {\n      for (var i = 0, startSize = this._maps.length; i < mapping._maps.length; i++) {\n        var mirr = mapping.getMirror(i);\n        this.appendMap(mapping._maps[i], mirr != null && mirr < i ? startSize + mirr : undefined);\n      }\n    }\n    /**\n    Finds the offset of the step map that mirrors the map at the\n    given offset, in this mapping (as per the second argument to\n    `appendMap`).\n    */\n  }, {\n    key: \"getMirror\",\n    value: function getMirror(n) {\n      if (this.mirror) for (var i = 0; i < this.mirror.length; i++) if (this.mirror[i] == n) return this.mirror[i + (i % 2 ? -1 : 1)];\n    }\n    /**\n    @internal\n    */\n  }, {\n    key: \"setMirror\",\n    value: function setMirror(n, m) {\n      if (!this.mirror) this.mirror = [];\n      this.mirror.push(n, m);\n    }\n    /**\n    Append the inverse of the given mapping to this one.\n    */\n  }, {\n    key: \"appendMappingInverted\",\n    value: function appendMappingInverted(mapping) {\n      for (var i = mapping.maps.length - 1, totalSize = this._maps.length + mapping._maps.length; i >= 0; i--) {\n        var mirr = mapping.getMirror(i);\n        this.appendMap(mapping._maps[i].invert(), mirr != null && mirr > i ? totalSize - mirr - 1 : undefined);\n      }\n    }\n    /**\n    Create an inverted version of this mapping.\n    */\n  }, {\n    key: \"invert\",\n    value: function invert() {\n      var inverse = new Mapping();\n      inverse.appendMappingInverted(this);\n      return inverse;\n    }\n    /**\n    Map a position through this mapping.\n    */\n  }, {\n    key: \"map\",\n    value: function map(pos) {\n      var assoc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      if (this.mirror) return this._map(pos, assoc, true);\n      for (var i = this.from; i < this.to; i++) pos = this._maps[i].map(pos, assoc);\n      return pos;\n    }\n    /**\n    Map a position through this mapping, returning a mapping\n    result.\n    */\n  }, {\n    key: \"mapResult\",\n    value: function mapResult(pos) {\n      var assoc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      return this._map(pos, assoc, false);\n    }\n    /**\n    @internal\n    */\n  }, {\n    key: \"_map\",\n    value: function _map(pos, assoc, simple) {\n      var delInfo = 0;\n      for (var i = this.from; i < this.to; i++) {\n        var map = this._maps[i],\n          result = map.mapResult(pos, assoc);\n        if (result.recover != null) {\n          var corr = this.getMirror(i);\n          if (corr != null && corr > i && corr < this.to) {\n            i = corr;\n            pos = this._maps[corr].recover(result.recover);\n            continue;\n          }\n        }\n        delInfo |= result.delInfo;\n        pos = result.pos;\n      }\n      return simple ? pos : new MapResult(pos, delInfo, null);\n    }\n  }]);\n}();\nvar stepsByID = Object.create(null);\n/**\nA step object represents an atomic change. It generally applies\nonly to the document it was created for, since the positions\nstored in it will only make sense for that document.\n\nNew steps are defined by creating classes that extend `Step`,\noverriding the `apply`, `invert`, `map`, `getMap` and `fromJSON`\nmethods, and registering your class with a unique\nJSON-serialization identifier using\n[`Step.jsonID`](https://prosemirror.net/docs/ref/#transform.Step^jsonID).\n*/\nvar Step = /*#__PURE__*/function () {\n  function Step() {\n    _classCallCheck(this, Step);\n  }\n  return _createClass(Step, [{\n    key: \"getMap\",\n    value:\n    /**\n    Get the step map that represents the changes made by this step,\n    and which can be used to transform between positions in the old\n    and the new document.\n    */\n    function getMap() {\n      return StepMap.empty;\n    }\n    /**\n    Try to merge this step with another one, to be applied directly\n    after it. Returns the merged step when possible, null if the\n    steps can't be merged.\n    */\n  }, {\n    key: \"merge\",\n    value: function merge(other) {\n      return null;\n    }\n    /**\n    Deserialize a step from its JSON representation. Will call\n    through to the step class' own implementation of this method.\n    */\n  }], [{\n    key: \"fromJSON\",\n    value: function fromJSON(schema, json) {\n      if (!json || !json.stepType) throw new RangeError(\"Invalid input for Step.fromJSON\");\n      var type = stepsByID[json.stepType];\n      if (!type) throw new RangeError(\"No step type \".concat(json.stepType, \" defined\"));\n      return type.fromJSON(schema, json);\n    }\n    /**\n    To be able to serialize steps to JSON, each step needs a string\n    ID to attach to its JSON representation. Use this method to\n    register an ID for your step classes. Try to pick something\n    that's unlikely to clash with steps from other modules.\n    */\n  }, {\n    key: \"jsonID\",\n    value: function jsonID(id, stepClass) {\n      if (id in stepsByID) throw new RangeError(\"Duplicate use of step JSON ID \" + id);\n      stepsByID[id] = stepClass;\n      stepClass.prototype.jsonID = id;\n      return stepClass;\n    }\n  }]);\n}();\n/**\nThe result of [applying](https://prosemirror.net/docs/ref/#transform.Step.apply) a step. Contains either a\nnew document or a failure value.\n*/\nvar StepResult = /*#__PURE__*/function () {\n  /**\n  @internal\n  */\n  function StepResult(\n  /**\n  The transformed document, if successful.\n  */\n  doc,\n  /**\n  The failure message, if unsuccessful.\n  */\n  failed) {\n    _classCallCheck(this, StepResult);\n    this.doc = doc;\n    this.failed = failed;\n  }\n  /**\n  Create a successful step result.\n  */\n  return _createClass(StepResult, null, [{\n    key: \"ok\",\n    value: function ok(doc) {\n      return new StepResult(doc, null);\n    }\n    /**\n    Create a failed step result.\n    */\n  }, {\n    key: \"fail\",\n    value: function fail(message) {\n      return new StepResult(null, message);\n    }\n    /**\n    Call [`Node.replace`](https://prosemirror.net/docs/ref/#model.Node.replace) with the given\n    arguments. Create a successful result if it succeeds, and a\n    failed one if it throws a `ReplaceError`.\n    */\n  }, {\n    key: \"fromReplace\",\n    value: function fromReplace(doc, from, to, slice) {\n      try {\n        return StepResult.ok(doc.replace(from, to, slice));\n      } catch (e) {\n        if (e instanceof prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.ReplaceError) return StepResult.fail(e.message);\n        throw e;\n      }\n    }\n  }]);\n}();\nfunction mapFragment(fragment, f, parent) {\n  var mapped = [];\n  for (var i = 0; i < fragment.childCount; i++) {\n    var child = fragment.child(i);\n    if (child.content.size) child = child.copy(mapFragment(child.content, f, child));\n    if (child.isInline) child = f(child, parent, i);\n    mapped.push(child);\n  }\n  return prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.fromArray(mapped);\n}\n/**\nAdd a mark to all inline content between two positions.\n*/\nvar AddMarkStep = /*#__PURE__*/function (_Step) {\n  /**\n  Create a mark step.\n  */\n  function AddMarkStep(\n  /**\n  The start of the marked range.\n  */\n  from,\n  /**\n  The end of the marked range.\n  */\n  to,\n  /**\n  The mark to add.\n  */\n  mark) {\n    var _this2;\n    _classCallCheck(this, AddMarkStep);\n    _this2 = _callSuper(this, AddMarkStep);\n    _this2.from = from;\n    _this2.to = to;\n    _this2.mark = mark;\n    return _this2;\n  }\n  _inherits(AddMarkStep, _Step);\n  return _createClass(AddMarkStep, [{\n    key: \"apply\",\n    value: function apply(doc) {\n      var _this3 = this;\n      var oldSlice = doc.slice(this.from, this.to),\n        $from = doc.resolve(this.from);\n      var parent = $from.node($from.sharedDepth(this.to));\n      var slice = new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(mapFragment(oldSlice.content, function (node, parent) {\n        if (!node.isAtom || !parent.type.allowsMarkType(_this3.mark.type)) return node;\n        return node.mark(_this3.mark.addToSet(node.marks));\n      }, parent), oldSlice.openStart, oldSlice.openEnd);\n      return StepResult.fromReplace(doc, this.from, this.to, slice);\n    }\n  }, {\n    key: \"invert\",\n    value: function invert() {\n      return new RemoveMarkStep(this.from, this.to, this.mark);\n    }\n  }, {\n    key: \"map\",\n    value: function map(mapping) {\n      var from = mapping.mapResult(this.from, 1),\n        to = mapping.mapResult(this.to, -1);\n      if (from.deleted && to.deleted || from.pos >= to.pos) return null;\n      return new AddMarkStep(from.pos, to.pos, this.mark);\n    }\n  }, {\n    key: \"merge\",\n    value: function merge(other) {\n      if (other instanceof AddMarkStep && other.mark.eq(this.mark) && this.from <= other.to && this.to >= other.from) return new AddMarkStep(Math.min(this.from, other.from), Math.max(this.to, other.to), this.mark);\n      return null;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        stepType: \"addMark\",\n        mark: this.mark.toJSON(),\n        from: this.from,\n        to: this.to\n      };\n    }\n    /**\n    @internal\n    */\n  }], [{\n    key: \"fromJSON\",\n    value: function fromJSON(schema, json) {\n      if (typeof json.from != \"number\" || typeof json.to != \"number\") throw new RangeError(\"Invalid input for AddMarkStep.fromJSON\");\n      return new AddMarkStep(json.from, json.to, schema.markFromJSON(json.mark));\n    }\n  }]);\n}(Step);\nStep.jsonID(\"addMark\", AddMarkStep);\n/**\nRemove a mark from all inline content between two positions.\n*/\nvar RemoveMarkStep = /*#__PURE__*/function (_Step2) {\n  /**\n  Create a mark-removing step.\n  */\n  function RemoveMarkStep(\n  /**\n  The start of the unmarked range.\n  */\n  from,\n  /**\n  The end of the unmarked range.\n  */\n  to,\n  /**\n  The mark to remove.\n  */\n  mark) {\n    var _this4;\n    _classCallCheck(this, RemoveMarkStep);\n    _this4 = _callSuper(this, RemoveMarkStep);\n    _this4.from = from;\n    _this4.to = to;\n    _this4.mark = mark;\n    return _this4;\n  }\n  _inherits(RemoveMarkStep, _Step2);\n  return _createClass(RemoveMarkStep, [{\n    key: \"apply\",\n    value: function apply(doc) {\n      var _this5 = this;\n      var oldSlice = doc.slice(this.from, this.to);\n      var slice = new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(mapFragment(oldSlice.content, function (node) {\n        return node.mark(_this5.mark.removeFromSet(node.marks));\n      }, doc), oldSlice.openStart, oldSlice.openEnd);\n      return StepResult.fromReplace(doc, this.from, this.to, slice);\n    }\n  }, {\n    key: \"invert\",\n    value: function invert() {\n      return new AddMarkStep(this.from, this.to, this.mark);\n    }\n  }, {\n    key: \"map\",\n    value: function map(mapping) {\n      var from = mapping.mapResult(this.from, 1),\n        to = mapping.mapResult(this.to, -1);\n      if (from.deleted && to.deleted || from.pos >= to.pos) return null;\n      return new RemoveMarkStep(from.pos, to.pos, this.mark);\n    }\n  }, {\n    key: \"merge\",\n    value: function merge(other) {\n      if (other instanceof RemoveMarkStep && other.mark.eq(this.mark) && this.from <= other.to && this.to >= other.from) return new RemoveMarkStep(Math.min(this.from, other.from), Math.max(this.to, other.to), this.mark);\n      return null;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        stepType: \"removeMark\",\n        mark: this.mark.toJSON(),\n        from: this.from,\n        to: this.to\n      };\n    }\n    /**\n    @internal\n    */\n  }], [{\n    key: \"fromJSON\",\n    value: function fromJSON(schema, json) {\n      if (typeof json.from != \"number\" || typeof json.to != \"number\") throw new RangeError(\"Invalid input for RemoveMarkStep.fromJSON\");\n      return new RemoveMarkStep(json.from, json.to, schema.markFromJSON(json.mark));\n    }\n  }]);\n}(Step);\nStep.jsonID(\"removeMark\", RemoveMarkStep);\n/**\nAdd a mark to a specific node.\n*/\nvar AddNodeMarkStep = /*#__PURE__*/function (_Step3) {\n  /**\n  Create a node mark step.\n  */\n  function AddNodeMarkStep(\n  /**\n  The position of the target node.\n  */\n  pos,\n  /**\n  The mark to add.\n  */\n  mark) {\n    var _this6;\n    _classCallCheck(this, AddNodeMarkStep);\n    _this6 = _callSuper(this, AddNodeMarkStep);\n    _this6.pos = pos;\n    _this6.mark = mark;\n    return _this6;\n  }\n  _inherits(AddNodeMarkStep, _Step3);\n  return _createClass(AddNodeMarkStep, [{\n    key: \"apply\",\n    value: function apply(doc) {\n      var node = doc.nodeAt(this.pos);\n      if (!node) return StepResult.fail(\"No node at mark step's position\");\n      var updated = node.type.create(node.attrs, null, this.mark.addToSet(node.marks));\n      return StepResult.fromReplace(doc, this.pos, this.pos + 1, new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(updated), 0, node.isLeaf ? 0 : 1));\n    }\n  }, {\n    key: \"invert\",\n    value: function invert(doc) {\n      var node = doc.nodeAt(this.pos);\n      if (node) {\n        var newSet = this.mark.addToSet(node.marks);\n        if (newSet.length == node.marks.length) {\n          for (var i = 0; i < node.marks.length; i++) if (!node.marks[i].isInSet(newSet)) return new AddNodeMarkStep(this.pos, node.marks[i]);\n          return new AddNodeMarkStep(this.pos, this.mark);\n        }\n      }\n      return new RemoveNodeMarkStep(this.pos, this.mark);\n    }\n  }, {\n    key: \"map\",\n    value: function map(mapping) {\n      var pos = mapping.mapResult(this.pos, 1);\n      return pos.deletedAfter ? null : new AddNodeMarkStep(pos.pos, this.mark);\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        stepType: \"addNodeMark\",\n        pos: this.pos,\n        mark: this.mark.toJSON()\n      };\n    }\n    /**\n    @internal\n    */\n  }], [{\n    key: \"fromJSON\",\n    value: function fromJSON(schema, json) {\n      if (typeof json.pos != \"number\") throw new RangeError(\"Invalid input for AddNodeMarkStep.fromJSON\");\n      return new AddNodeMarkStep(json.pos, schema.markFromJSON(json.mark));\n    }\n  }]);\n}(Step);\nStep.jsonID(\"addNodeMark\", AddNodeMarkStep);\n/**\nRemove a mark from a specific node.\n*/\nvar RemoveNodeMarkStep = /*#__PURE__*/function (_Step4) {\n  /**\n  Create a mark-removing step.\n  */\n  function RemoveNodeMarkStep(\n  /**\n  The position of the target node.\n  */\n  pos,\n  /**\n  The mark to remove.\n  */\n  mark) {\n    var _this7;\n    _classCallCheck(this, RemoveNodeMarkStep);\n    _this7 = _callSuper(this, RemoveNodeMarkStep);\n    _this7.pos = pos;\n    _this7.mark = mark;\n    return _this7;\n  }\n  _inherits(RemoveNodeMarkStep, _Step4);\n  return _createClass(RemoveNodeMarkStep, [{\n    key: \"apply\",\n    value: function apply(doc) {\n      var node = doc.nodeAt(this.pos);\n      if (!node) return StepResult.fail(\"No node at mark step's position\");\n      var updated = node.type.create(node.attrs, null, this.mark.removeFromSet(node.marks));\n      return StepResult.fromReplace(doc, this.pos, this.pos + 1, new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(updated), 0, node.isLeaf ? 0 : 1));\n    }\n  }, {\n    key: \"invert\",\n    value: function invert(doc) {\n      var node = doc.nodeAt(this.pos);\n      if (!node || !this.mark.isInSet(node.marks)) return this;\n      return new AddNodeMarkStep(this.pos, this.mark);\n    }\n  }, {\n    key: \"map\",\n    value: function map(mapping) {\n      var pos = mapping.mapResult(this.pos, 1);\n      return pos.deletedAfter ? null : new RemoveNodeMarkStep(pos.pos, this.mark);\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        stepType: \"removeNodeMark\",\n        pos: this.pos,\n        mark: this.mark.toJSON()\n      };\n    }\n    /**\n    @internal\n    */\n  }], [{\n    key: \"fromJSON\",\n    value: function fromJSON(schema, json) {\n      if (typeof json.pos != \"number\") throw new RangeError(\"Invalid input for RemoveNodeMarkStep.fromJSON\");\n      return new RemoveNodeMarkStep(json.pos, schema.markFromJSON(json.mark));\n    }\n  }]);\n}(Step);\nStep.jsonID(\"removeNodeMark\", RemoveNodeMarkStep);\n\n/**\nReplace a part of the document with a slice of new content.\n*/\nvar ReplaceStep = /*#__PURE__*/function (_Step5) {\n  /**\n  The given `slice` should fit the 'gap' between `from` and\n  `to`—the depths must line up, and the surrounding nodes must be\n  able to be joined with the open sides of the slice. When\n  `structure` is true, the step will fail if the content between\n  from and to is not just a sequence of closing and then opening\n  tokens (this is to guard against rebased replace steps\n  overwriting something they weren't supposed to).\n  */\n  function ReplaceStep(\n  /**\n  The start position of the replaced range.\n  */\n  from,\n  /**\n  The end position of the replaced range.\n  */\n  to,\n  /**\n  The slice to insert.\n  */\n  slice) {\n    var _this8;\n    var structure = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    _classCallCheck(this, ReplaceStep);\n    _this8 = _callSuper(this, ReplaceStep);\n    _this8.from = from;\n    _this8.to = to;\n    _this8.slice = slice;\n    _this8.structure = structure;\n    return _this8;\n  }\n  _inherits(ReplaceStep, _Step5);\n  return _createClass(ReplaceStep, [{\n    key: \"apply\",\n    value: function apply(doc) {\n      if (this.structure && contentBetween(doc, this.from, this.to)) return StepResult.fail(\"Structure replace would overwrite content\");\n      return StepResult.fromReplace(doc, this.from, this.to, this.slice);\n    }\n  }, {\n    key: \"getMap\",\n    value: function getMap() {\n      return new StepMap([this.from, this.to - this.from, this.slice.size]);\n    }\n  }, {\n    key: \"invert\",\n    value: function invert(doc) {\n      return new ReplaceStep(this.from, this.from + this.slice.size, doc.slice(this.from, this.to));\n    }\n  }, {\n    key: \"map\",\n    value: function map(mapping) {\n      var from = mapping.mapResult(this.from, 1),\n        to = mapping.mapResult(this.to, -1);\n      if (from.deletedAcross && to.deletedAcross) return null;\n      return new ReplaceStep(from.pos, Math.max(from.pos, to.pos), this.slice);\n    }\n  }, {\n    key: \"merge\",\n    value: function merge(other) {\n      if (!(other instanceof ReplaceStep) || other.structure || this.structure) return null;\n      if (this.from + this.slice.size == other.from && !this.slice.openEnd && !other.slice.openStart) {\n        var slice = this.slice.size + other.slice.size == 0 ? prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.empty : new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(this.slice.content.append(other.slice.content), this.slice.openStart, other.slice.openEnd);\n        return new ReplaceStep(this.from, this.to + (other.to - other.from), slice, this.structure);\n      } else if (other.to == this.from && !this.slice.openStart && !other.slice.openEnd) {\n        var _slice = this.slice.size + other.slice.size == 0 ? prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.empty : new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(other.slice.content.append(this.slice.content), other.slice.openStart, this.slice.openEnd);\n        return new ReplaceStep(other.from, this.to, _slice, this.structure);\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var json = {\n        stepType: \"replace\",\n        from: this.from,\n        to: this.to\n      };\n      if (this.slice.size) json.slice = this.slice.toJSON();\n      if (this.structure) json.structure = true;\n      return json;\n    }\n    /**\n    @internal\n    */\n  }], [{\n    key: \"fromJSON\",\n    value: function fromJSON(schema, json) {\n      if (typeof json.from != \"number\" || typeof json.to != \"number\") throw new RangeError(\"Invalid input for ReplaceStep.fromJSON\");\n      return new ReplaceStep(json.from, json.to, prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.fromJSON(schema, json.slice), !!json.structure);\n    }\n  }]);\n}(Step);\nStep.jsonID(\"replace\", ReplaceStep);\n/**\nReplace a part of the document with a slice of content, but\npreserve a range of the replaced content by moving it into the\nslice.\n*/\nvar ReplaceAroundStep = /*#__PURE__*/function (_Step6) {\n  /**\n  Create a replace-around step with the given range and gap.\n  `insert` should be the point in the slice into which the content\n  of the gap should be moved. `structure` has the same meaning as\n  it has in the [`ReplaceStep`](https://prosemirror.net/docs/ref/#transform.ReplaceStep) class.\n  */\n  function ReplaceAroundStep(\n  /**\n  The start position of the replaced range.\n  */\n  from,\n  /**\n  The end position of the replaced range.\n  */\n  to,\n  /**\n  The start of preserved range.\n  */\n  gapFrom,\n  /**\n  The end of preserved range.\n  */\n  gapTo,\n  /**\n  The slice to insert.\n  */\n  slice,\n  /**\n  The position in the slice where the preserved range should be\n  inserted.\n  */\n  insert) {\n    var _this9;\n    var structure = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    _classCallCheck(this, ReplaceAroundStep);\n    _this9 = _callSuper(this, ReplaceAroundStep);\n    _this9.from = from;\n    _this9.to = to;\n    _this9.gapFrom = gapFrom;\n    _this9.gapTo = gapTo;\n    _this9.slice = slice;\n    _this9.insert = insert;\n    _this9.structure = structure;\n    return _this9;\n  }\n  _inherits(ReplaceAroundStep, _Step6);\n  return _createClass(ReplaceAroundStep, [{\n    key: \"apply\",\n    value: function apply(doc) {\n      if (this.structure && (contentBetween(doc, this.from, this.gapFrom) || contentBetween(doc, this.gapTo, this.to))) return StepResult.fail(\"Structure gap-replace would overwrite content\");\n      var gap = doc.slice(this.gapFrom, this.gapTo);\n      if (gap.openStart || gap.openEnd) return StepResult.fail(\"Gap is not a flat range\");\n      var inserted = this.slice.insertAt(this.insert, gap.content);\n      if (!inserted) return StepResult.fail(\"Content does not fit in gap\");\n      return StepResult.fromReplace(doc, this.from, this.to, inserted);\n    }\n  }, {\n    key: \"getMap\",\n    value: function getMap() {\n      return new StepMap([this.from, this.gapFrom - this.from, this.insert, this.gapTo, this.to - this.gapTo, this.slice.size - this.insert]);\n    }\n  }, {\n    key: \"invert\",\n    value: function invert(doc) {\n      var gap = this.gapTo - this.gapFrom;\n      return new ReplaceAroundStep(this.from, this.from + this.slice.size + gap, this.from + this.insert, this.from + this.insert + gap, doc.slice(this.from, this.to).removeBetween(this.gapFrom - this.from, this.gapTo - this.from), this.gapFrom - this.from, this.structure);\n    }\n  }, {\n    key: \"map\",\n    value: function map(mapping) {\n      var from = mapping.mapResult(this.from, 1),\n        to = mapping.mapResult(this.to, -1);\n      var gapFrom = this.from == this.gapFrom ? from.pos : mapping.map(this.gapFrom, -1);\n      var gapTo = this.to == this.gapTo ? to.pos : mapping.map(this.gapTo, 1);\n      if (from.deletedAcross && to.deletedAcross || gapFrom < from.pos || gapTo > to.pos) return null;\n      return new ReplaceAroundStep(from.pos, to.pos, gapFrom, gapTo, this.slice, this.insert, this.structure);\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var json = {\n        stepType: \"replaceAround\",\n        from: this.from,\n        to: this.to,\n        gapFrom: this.gapFrom,\n        gapTo: this.gapTo,\n        insert: this.insert\n      };\n      if (this.slice.size) json.slice = this.slice.toJSON();\n      if (this.structure) json.structure = true;\n      return json;\n    }\n    /**\n    @internal\n    */\n  }], [{\n    key: \"fromJSON\",\n    value: function fromJSON(schema, json) {\n      if (typeof json.from != \"number\" || typeof json.to != \"number\" || typeof json.gapFrom != \"number\" || typeof json.gapTo != \"number\" || typeof json.insert != \"number\") throw new RangeError(\"Invalid input for ReplaceAroundStep.fromJSON\");\n      return new ReplaceAroundStep(json.from, json.to, json.gapFrom, json.gapTo, prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.fromJSON(schema, json.slice), json.insert, !!json.structure);\n    }\n  }]);\n}(Step);\nStep.jsonID(\"replaceAround\", ReplaceAroundStep);\nfunction contentBetween(doc, from, to) {\n  var $from = doc.resolve(from),\n    dist = to - from,\n    depth = $from.depth;\n  while (dist > 0 && depth > 0 && $from.indexAfter(depth) == $from.node(depth).childCount) {\n    depth--;\n    dist--;\n  }\n  if (dist > 0) {\n    var next = $from.node(depth).maybeChild($from.indexAfter(depth));\n    while (dist > 0) {\n      if (!next || next.isLeaf) return true;\n      next = next.firstChild;\n      dist--;\n    }\n  }\n  return false;\n}\nfunction _addMark(tr, from, to, mark) {\n  var removed = [],\n    added = [];\n  var removing, adding;\n  tr.doc.nodesBetween(from, to, function (node, pos, parent) {\n    if (!node.isInline) return;\n    var marks = node.marks;\n    if (!mark.isInSet(marks) && parent.type.allowsMarkType(mark.type)) {\n      var start = Math.max(pos, from),\n        end = Math.min(pos + node.nodeSize, to);\n      var newSet = mark.addToSet(marks);\n      for (var i = 0; i < marks.length; i++) {\n        if (!marks[i].isInSet(newSet)) {\n          if (removing && removing.to == start && removing.mark.eq(marks[i])) removing.to = end;else removed.push(removing = new RemoveMarkStep(start, end, marks[i]));\n        }\n      }\n      if (adding && adding.to == start) adding.to = end;else added.push(adding = new AddMarkStep(start, end, mark));\n    }\n  });\n  removed.forEach(function (s) {\n    return tr.step(s);\n  });\n  added.forEach(function (s) {\n    return tr.step(s);\n  });\n}\nfunction _removeMark(tr, from, to, mark) {\n  var matched = [],\n    step = 0;\n  tr.doc.nodesBetween(from, to, function (node, pos) {\n    if (!node.isInline) return;\n    step++;\n    var toRemove = null;\n    if (mark instanceof prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.MarkType) {\n      var set = node.marks,\n        found;\n      while (found = mark.isInSet(set)) {\n        (toRemove || (toRemove = [])).push(found);\n        set = found.removeFromSet(set);\n      }\n    } else if (mark) {\n      if (mark.isInSet(node.marks)) toRemove = [mark];\n    } else {\n      toRemove = node.marks;\n    }\n    if (toRemove && toRemove.length) {\n      var end = Math.min(pos + node.nodeSize, to);\n      for (var i = 0; i < toRemove.length; i++) {\n        var style = toRemove[i],\n          _found = void 0;\n        for (var j = 0; j < matched.length; j++) {\n          var m = matched[j];\n          if (m.step == step - 1 && style.eq(matched[j].style)) _found = m;\n        }\n        if (_found) {\n          _found.to = end;\n          _found.step = step;\n        } else {\n          matched.push({\n            style: style,\n            from: Math.max(pos, from),\n            to: end,\n            step: step\n          });\n        }\n      }\n    }\n  });\n  matched.forEach(function (m) {\n    return tr.step(new RemoveMarkStep(m.from, m.to, m.style));\n  });\n}\nfunction _clearIncompatible(tr, pos, parentType) {\n  var match = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : parentType.contentMatch;\n  var clearNewlines = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n  var node = tr.doc.nodeAt(pos);\n  var replSteps = [],\n    cur = pos + 1;\n  for (var i = 0; i < node.childCount; i++) {\n    var child = node.child(i),\n      end = cur + child.nodeSize;\n    var allowed = match.matchType(child.type);\n    if (!allowed) {\n      replSteps.push(new ReplaceStep(cur, end, prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.empty));\n    } else {\n      match = allowed;\n      for (var j = 0; j < child.marks.length; j++) if (!parentType.allowsMarkType(child.marks[j].type)) tr.step(new RemoveMarkStep(cur, end, child.marks[j]));\n      if (clearNewlines && child.isText && parentType.whitespace != \"pre\") {\n        var m = void 0,\n          newline = /\\r?\\n|\\r/g,\n          slice = void 0;\n        while (m = newline.exec(child.text)) {\n          if (!slice) slice = new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(parentType.schema.text(\" \", parentType.allowedMarks(child.marks))), 0, 0);\n          replSteps.push(new ReplaceStep(cur + m.index, cur + m.index + m[0].length, slice));\n        }\n      }\n    }\n    cur = end;\n  }\n  if (!match.validEnd) {\n    var fill = match.fillBefore(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty, true);\n    tr.replace(cur, cur, new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(fill, 0, 0));\n  }\n  for (var _i = replSteps.length - 1; _i >= 0; _i--) tr.step(replSteps[_i]);\n}\nfunction canCut(node, start, end) {\n  return (start == 0 || node.canReplace(start, node.childCount)) && (end == node.childCount || node.canReplace(0, end));\n}\n/**\nTry to find a target depth to which the content in the given range\ncan be lifted. Will not go across\n[isolating](https://prosemirror.net/docs/ref/#model.NodeSpec.isolating) parent nodes.\n*/\nfunction liftTarget(range) {\n  var parent = range.parent;\n  var content = parent.content.cutByIndex(range.startIndex, range.endIndex);\n  for (var depth = range.depth;; --depth) {\n    var node = range.$from.node(depth);\n    var index = range.$from.index(depth),\n      endIndex = range.$to.indexAfter(depth);\n    if (depth < range.depth && node.canReplace(index, endIndex, content)) return depth;\n    if (depth == 0 || node.type.spec.isolating || !canCut(node, index, endIndex)) break;\n  }\n  return null;\n}\nfunction _lift(tr, range, target) {\n  var $from = range.$from,\n    $to = range.$to,\n    depth = range.depth;\n  var gapStart = $from.before(depth + 1),\n    gapEnd = $to.after(depth + 1);\n  var start = gapStart,\n    end = gapEnd;\n  var before = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty,\n    openStart = 0;\n  for (var d = depth, splitting = false; d > target; d--) if (splitting || $from.index(d) > 0) {\n    splitting = true;\n    before = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from($from.node(d).copy(before));\n    openStart++;\n  } else {\n    start--;\n  }\n  var after = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty,\n    openEnd = 0;\n  for (var _d = depth, _splitting = false; _d > target; _d--) if (_splitting || $to.after(_d + 1) < $to.end(_d)) {\n    _splitting = true;\n    after = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from($to.node(_d).copy(after));\n    openEnd++;\n  } else {\n    end++;\n  }\n  tr.step(new ReplaceAroundStep(start, end, gapStart, gapEnd, new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(before.append(after), openStart, openEnd), before.size - openStart, true));\n}\n/**\nTry to find a valid way to wrap the content in the given range in a\nnode of the given type. May introduce extra nodes around and inside\nthe wrapper node, if necessary. Returns null if no valid wrapping\ncould be found. When `innerRange` is given, that range's content is\nused as the content to fit into the wrapping, instead of the\ncontent of `range`.\n*/\nfunction findWrapping(range, nodeType) {\n  var attrs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var innerRange = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : range;\n  var around = findWrappingOutside(range, nodeType);\n  var inner = around && findWrappingInside(innerRange, nodeType);\n  if (!inner) return null;\n  return around.map(withAttrs).concat({\n    type: nodeType,\n    attrs: attrs\n  }).concat(inner.map(withAttrs));\n}\nfunction withAttrs(type) {\n  return {\n    type: type,\n    attrs: null\n  };\n}\nfunction findWrappingOutside(range, type) {\n  var parent = range.parent,\n    startIndex = range.startIndex,\n    endIndex = range.endIndex;\n  var around = parent.contentMatchAt(startIndex).findWrapping(type);\n  if (!around) return null;\n  var outer = around.length ? around[0] : type;\n  return parent.canReplaceWith(startIndex, endIndex, outer) ? around : null;\n}\nfunction findWrappingInside(range, type) {\n  var parent = range.parent,\n    startIndex = range.startIndex,\n    endIndex = range.endIndex;\n  var inner = parent.child(startIndex);\n  var inside = type.contentMatch.findWrapping(inner.type);\n  if (!inside) return null;\n  var lastType = inside.length ? inside[inside.length - 1] : type;\n  var innerMatch = lastType.contentMatch;\n  for (var i = startIndex; innerMatch && i < endIndex; i++) innerMatch = innerMatch.matchType(parent.child(i).type);\n  if (!innerMatch || !innerMatch.validEnd) return null;\n  return inside;\n}\nfunction _wrap2(tr, range, wrappers) {\n  var content = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty;\n  for (var i = wrappers.length - 1; i >= 0; i--) {\n    if (content.size) {\n      var match = wrappers[i].type.contentMatch.matchFragment(content);\n      if (!match || !match.validEnd) throw new RangeError(\"Wrapper type given to Transform.wrap does not form valid content of its parent wrapper\");\n    }\n    content = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(wrappers[i].type.create(wrappers[i].attrs, content));\n  }\n  var start = range.start,\n    end = range.end;\n  tr.step(new ReplaceAroundStep(start, end, start, end, new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(content, 0, 0), wrappers.length, true));\n}\nfunction _setBlockType(tr, from, to, type, attrs) {\n  if (!type.isTextblock) throw new RangeError(\"Type given to setBlockType should be a textblock\");\n  var mapFrom = tr.steps.length;\n  tr.doc.nodesBetween(from, to, function (node, pos) {\n    var attrsHere = typeof attrs == \"function\" ? attrs(node) : attrs;\n    if (node.isTextblock && !node.hasMarkup(type, attrsHere) && canChangeType(tr.doc, tr.mapping.slice(mapFrom).map(pos), type)) {\n      var convertNewlines = null;\n      if (type.schema.linebreakReplacement) {\n        var pre = type.whitespace == \"pre\",\n          supportLinebreak = !!type.contentMatch.matchType(type.schema.linebreakReplacement);\n        if (pre && !supportLinebreak) convertNewlines = false;else if (!pre && supportLinebreak) convertNewlines = true;\n      }\n      // Ensure all markup that isn't allowed in the new node type is cleared\n      if (convertNewlines === false) replaceLinebreaks(tr, node, pos, mapFrom);\n      _clearIncompatible(tr, tr.mapping.slice(mapFrom).map(pos, 1), type, undefined, convertNewlines === null);\n      var mapping = tr.mapping.slice(mapFrom);\n      var startM = mapping.map(pos, 1),\n        endM = mapping.map(pos + node.nodeSize, 1);\n      tr.step(new ReplaceAroundStep(startM, endM, startM + 1, endM - 1, new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(type.create(attrsHere, null, node.marks)), 0, 0), 1, true));\n      if (convertNewlines === true) replaceNewlines(tr, node, pos, mapFrom);\n      return false;\n    }\n  });\n}\nfunction replaceNewlines(tr, node, pos, mapFrom) {\n  node.forEach(function (child, offset) {\n    if (child.isText) {\n      var m,\n        newline = /\\r?\\n|\\r/g;\n      while (m = newline.exec(child.text)) {\n        var start = tr.mapping.slice(mapFrom).map(pos + 1 + offset + m.index);\n        tr.replaceWith(start, start + 1, node.type.schema.linebreakReplacement.create());\n      }\n    }\n  });\n}\nfunction replaceLinebreaks(tr, node, pos, mapFrom) {\n  node.forEach(function (child, offset) {\n    if (child.type == child.type.schema.linebreakReplacement) {\n      var start = tr.mapping.slice(mapFrom).map(pos + 1 + offset);\n      tr.replaceWith(start, start + 1, node.type.schema.text(\"\\n\"));\n    }\n  });\n}\nfunction canChangeType(doc, pos, type) {\n  var $pos = doc.resolve(pos),\n    index = $pos.index();\n  return $pos.parent.canReplaceWith(index, index + 1, type);\n}\n/**\nChange the type, attributes, and/or marks of the node at `pos`.\nWhen `type` isn't given, the existing node type is preserved,\n*/\nfunction _setNodeMarkup(tr, pos, type, attrs, marks) {\n  var node = tr.doc.nodeAt(pos);\n  if (!node) throw new RangeError(\"No node at given position\");\n  if (!type) type = node.type;\n  var newNode = type.create(attrs, null, marks || node.marks);\n  if (node.isLeaf) return tr.replaceWith(pos, pos + node.nodeSize, newNode);\n  if (!type.validContent(node.content)) throw new RangeError(\"Invalid content for node type \" + type.name);\n  tr.step(new ReplaceAroundStep(pos, pos + node.nodeSize, pos + 1, pos + node.nodeSize - 1, new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(newNode), 0, 0), 1, true));\n}\n/**\nCheck whether splitting at the given position is allowed.\n*/\nfunction canSplit(doc, pos) {\n  var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var typesAfter = arguments.length > 3 ? arguments[3] : undefined;\n  var $pos = doc.resolve(pos),\n    base = $pos.depth - depth;\n  var innerType = typesAfter && typesAfter[typesAfter.length - 1] || $pos.parent;\n  if (base < 0 || $pos.parent.type.spec.isolating || !$pos.parent.canReplace($pos.index(), $pos.parent.childCount) || !innerType.type.validContent($pos.parent.content.cutByIndex($pos.index(), $pos.parent.childCount))) return false;\n  for (var d = $pos.depth - 1, i = depth - 2; d > base; d--, i--) {\n    var node = $pos.node(d),\n      _index = $pos.index(d);\n    if (node.type.spec.isolating) return false;\n    var rest = node.content.cutByIndex(_index, node.childCount);\n    var overrideChild = typesAfter && typesAfter[i + 1];\n    if (overrideChild) rest = rest.replaceChild(0, overrideChild.type.create(overrideChild.attrs));\n    var after = typesAfter && typesAfter[i] || node;\n    if (!node.canReplace(_index + 1, node.childCount) || !after.type.validContent(rest)) return false;\n  }\n  var index = $pos.indexAfter(base);\n  var baseType = typesAfter && typesAfter[0];\n  return $pos.node(base).canReplaceWith(index, index, baseType ? baseType.type : $pos.node(base + 1).type);\n}\nfunction _split(tr, pos) {\n  var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var typesAfter = arguments.length > 3 ? arguments[3] : undefined;\n  var $pos = tr.doc.resolve(pos),\n    before = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty,\n    after = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty;\n  for (var d = $pos.depth, e = $pos.depth - depth, i = depth - 1; d > e; d--, i--) {\n    before = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from($pos.node(d).copy(before));\n    var typeAfter = typesAfter && typesAfter[i];\n    after = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(typeAfter ? typeAfter.type.create(typeAfter.attrs, after) : $pos.node(d).copy(after));\n  }\n  tr.step(new ReplaceStep(pos, pos, new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(before.append(after), depth, depth), true));\n}\n/**\nTest whether the blocks before and after a given position can be\njoined.\n*/\nfunction canJoin(doc, pos) {\n  var $pos = doc.resolve(pos),\n    index = $pos.index();\n  return joinable($pos.nodeBefore, $pos.nodeAfter) && $pos.parent.canReplace(index, index + 1);\n}\nfunction canAppendWithSubstitutedLinebreaks(a, b) {\n  if (!b.content.size) a.type.compatibleContent(b.type);\n  var match = a.contentMatchAt(a.childCount);\n  var linebreakReplacement = a.type.schema.linebreakReplacement;\n  for (var i = 0; i < b.childCount; i++) {\n    var child = b.child(i);\n    var type = child.type == linebreakReplacement ? a.type.schema.nodes.text : child.type;\n    match = match.matchType(type);\n    if (!match) return false;\n    if (!a.type.allowsMarks(child.marks)) return false;\n  }\n  return match.validEnd;\n}\nfunction joinable(a, b) {\n  return !!(a && b && !a.isLeaf && canAppendWithSubstitutedLinebreaks(a, b));\n}\n/**\nFind an ancestor of the given position that can be joined to the\nblock before (or after if `dir` is positive). Returns the joinable\npoint, if any.\n*/\nfunction joinPoint(doc, pos) {\n  var dir = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n  var $pos = doc.resolve(pos);\n  for (var d = $pos.depth;; d--) {\n    var before = void 0,\n      after = void 0,\n      index = $pos.index(d);\n    if (d == $pos.depth) {\n      before = $pos.nodeBefore;\n      after = $pos.nodeAfter;\n    } else if (dir > 0) {\n      before = $pos.node(d + 1);\n      index++;\n      after = $pos.node(d).maybeChild(index);\n    } else {\n      before = $pos.node(d).maybeChild(index - 1);\n      after = $pos.node(d + 1);\n    }\n    if (before && !before.isTextblock && joinable(before, after) && $pos.node(d).canReplace(index, index + 1)) return pos;\n    if (d == 0) break;\n    pos = dir < 0 ? $pos.before(d) : $pos.after(d);\n  }\n}\nfunction _join(tr, pos, depth) {\n  var convertNewlines = null;\n  var linebreakReplacement = tr.doc.type.schema.linebreakReplacement;\n  var $before = tr.doc.resolve(pos - depth),\n    beforeType = $before.node().type;\n  if (linebreakReplacement && beforeType.inlineContent) {\n    var pre = beforeType.whitespace == \"pre\";\n    var supportLinebreak = !!beforeType.contentMatch.matchType(linebreakReplacement);\n    if (pre && !supportLinebreak) convertNewlines = false;else if (!pre && supportLinebreak) convertNewlines = true;\n  }\n  var mapFrom = tr.steps.length;\n  if (convertNewlines === false) {\n    var $after = tr.doc.resolve(pos + depth);\n    replaceLinebreaks(tr, $after.node(), $after.before(), mapFrom);\n  }\n  if (beforeType.inlineContent) _clearIncompatible(tr, pos + depth - 1, beforeType, $before.node().contentMatchAt($before.index()), convertNewlines == null);\n  var mapping = tr.mapping.slice(mapFrom),\n    start = mapping.map(pos - depth);\n  tr.step(new ReplaceStep(start, mapping.map(pos + depth, -1), prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.empty, true));\n  if (convertNewlines === true) {\n    var $full = tr.doc.resolve(start);\n    replaceNewlines(tr, $full.node(), $full.before(), tr.steps.length);\n  }\n  return tr;\n}\n/**\nTry to find a point where a node of the given type can be inserted\nnear `pos`, by searching up the node hierarchy when `pos` itself\nisn't a valid place but is at the start or end of a node. Return\nnull if no position was found.\n*/\nfunction insertPoint(doc, pos, nodeType) {\n  var $pos = doc.resolve(pos);\n  if ($pos.parent.canReplaceWith($pos.index(), $pos.index(), nodeType)) return pos;\n  if ($pos.parentOffset == 0) for (var d = $pos.depth - 1; d >= 0; d--) {\n    var index = $pos.index(d);\n    if ($pos.node(d).canReplaceWith(index, index, nodeType)) return $pos.before(d + 1);\n    if (index > 0) return null;\n  }\n  if ($pos.parentOffset == $pos.parent.content.size) for (var _d2 = $pos.depth - 1; _d2 >= 0; _d2--) {\n    var _index2 = $pos.indexAfter(_d2);\n    if ($pos.node(_d2).canReplaceWith(_index2, _index2, nodeType)) return $pos.after(_d2 + 1);\n    if (_index2 < $pos.node(_d2).childCount) return null;\n  }\n  return null;\n}\n/**\nFinds a position at or around the given position where the given\nslice can be inserted. Will look at parent nodes' nearest boundary\nand try there, even if the original position wasn't directly at the\nstart or end of that node. Returns null when no position was found.\n*/\nfunction dropPoint(doc, pos, slice) {\n  var $pos = doc.resolve(pos);\n  if (!slice.content.size) return pos;\n  var content = slice.content;\n  for (var i = 0; i < slice.openStart; i++) content = content.firstChild.content;\n  for (var pass = 1; pass <= (slice.openStart == 0 && slice.size ? 2 : 1); pass++) {\n    for (var d = $pos.depth; d >= 0; d--) {\n      var bias = d == $pos.depth ? 0 : $pos.pos <= ($pos.start(d + 1) + $pos.end(d + 1)) / 2 ? -1 : 1;\n      var insertPos = $pos.index(d) + (bias > 0 ? 1 : 0);\n      var parent = $pos.node(d),\n        fits = false;\n      if (pass == 1) {\n        fits = parent.canReplace(insertPos, insertPos, content);\n      } else {\n        var wrapping = parent.contentMatchAt(insertPos).findWrapping(content.firstChild.type);\n        fits = wrapping && parent.canReplaceWith(insertPos, insertPos, wrapping[0]);\n      }\n      if (fits) return bias == 0 ? $pos.pos : bias < 0 ? $pos.before(d + 1) : $pos.after(d + 1);\n    }\n  }\n  return null;\n}\n\n/**\n‘Fit’ a slice into a given position in the document, producing a\n[step](https://prosemirror.net/docs/ref/#transform.Step) that inserts it. Will return null if\nthere's no meaningful way to insert the slice here, or inserting it\nwould be a no-op (an empty slice over an empty range).\n*/\nfunction replaceStep(doc, from) {\n  var to = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : from;\n  var slice = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.empty;\n  if (from == to && !slice.size) return null;\n  var $from = doc.resolve(from),\n    $to = doc.resolve(to);\n  // Optimization -- avoid work if it's obvious that it's not needed.\n  if (fitsTrivially($from, $to, slice)) return new ReplaceStep(from, to, slice);\n  return new Fitter($from, $to, slice).fit();\n}\nfunction fitsTrivially($from, $to, slice) {\n  return !slice.openStart && !slice.openEnd && $from.start() == $to.start() && $from.parent.canReplace($from.index(), $to.index(), slice.content);\n}\n// Algorithm for 'placing' the elements of a slice into a gap:\n//\n// We consider the content of each node that is open to the left to be\n// independently placeable. I.e. in <p(\"foo\"), p(\"bar\")>, when the\n// paragraph on the left is open, \"foo\" can be placed (somewhere on\n// the left side of the replacement gap) independently from p(\"bar\").\n//\n// This class tracks the state of the placement progress in the\n// following properties:\n//\n//  - `frontier` holds a stack of `{type, match}` objects that\n//    represent the open side of the replacement. It starts at\n//    `$from`, then moves forward as content is placed, and is finally\n//    reconciled with `$to`.\n//\n//  - `unplaced` is a slice that represents the content that hasn't\n//    been placed yet.\n//\n//  - `placed` is a fragment of placed content. Its open-start value\n//    is implicit in `$from`, and its open-end value in `frontier`.\nvar Fitter = /*#__PURE__*/function () {\n  function Fitter($from, $to, unplaced) {\n    _classCallCheck(this, Fitter);\n    this.$from = $from;\n    this.$to = $to;\n    this.unplaced = unplaced;\n    this.frontier = [];\n    this.placed = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty;\n    for (var i = 0; i <= $from.depth; i++) {\n      var node = $from.node(i);\n      this.frontier.push({\n        type: node.type,\n        match: node.contentMatchAt($from.indexAfter(i))\n      });\n    }\n    for (var _i2 = $from.depth; _i2 > 0; _i2--) this.placed = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from($from.node(_i2).copy(this.placed));\n  }\n  return _createClass(Fitter, [{\n    key: \"depth\",\n    get: function get() {\n      return this.frontier.length - 1;\n    }\n  }, {\n    key: \"fit\",\n    value: function fit() {\n      // As long as there's unplaced content, try to place some of it.\n      // If that fails, either increase the open score of the unplaced\n      // slice, or drop nodes from it, and then try again.\n      while (this.unplaced.size) {\n        var _fit = this.findFittable();\n        if (_fit) this.placeNodes(_fit);else this.openMore() || this.dropNode();\n      }\n      // When there's inline content directly after the frontier _and_\n      // directly after `this.$to`, we must generate a `ReplaceAround`\n      // step that pulls that content into the node after the frontier.\n      // That means the fitting must be done to the end of the textblock\n      // node after `this.$to`, not `this.$to` itself.\n      var moveInline = this.mustMoveInline(),\n        placedSize = this.placed.size - this.depth - this.$from.depth;\n      var $from = this.$from,\n        $to = this.close(moveInline < 0 ? this.$to : $from.doc.resolve(moveInline));\n      if (!$to) return null;\n      // If closing to `$to` succeeded, create a step\n      var content = this.placed,\n        openStart = $from.depth,\n        openEnd = $to.depth;\n      while (openStart && openEnd && content.childCount == 1) {\n        // Normalize by dropping open parent nodes\n        content = content.firstChild.content;\n        openStart--;\n        openEnd--;\n      }\n      var slice = new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(content, openStart, openEnd);\n      if (moveInline > -1) return new ReplaceAroundStep($from.pos, moveInline, this.$to.pos, this.$to.end(), slice, placedSize);\n      if (slice.size || $from.pos != this.$to.pos)\n        // Don't generate no-op steps\n        return new ReplaceStep($from.pos, $to.pos, slice);\n      return null;\n    }\n    // Find a position on the start spine of `this.unplaced` that has\n    // content that can be moved somewhere on the frontier. Returns two\n    // depths, one for the slice and one for the frontier.\n  }, {\n    key: \"findFittable\",\n    value: function findFittable() {\n      var startDepth = this.unplaced.openStart;\n      for (var cur = this.unplaced.content, d = 0, openEnd = this.unplaced.openEnd; d < startDepth; d++) {\n        var node = cur.firstChild;\n        if (cur.childCount > 1) openEnd = 0;\n        if (node.type.spec.isolating && openEnd <= d) {\n          startDepth = d;\n          break;\n        }\n        cur = node.content;\n      }\n      // Only try wrapping nodes (pass 2) after finding a place without\n      // wrapping failed.\n      for (var pass = 1; pass <= 2; pass++) {\n        for (var sliceDepth = pass == 1 ? startDepth : this.unplaced.openStart; sliceDepth >= 0; sliceDepth--) {\n          var fragment = void 0,\n            parent = null;\n          if (sliceDepth) {\n            parent = contentAt(this.unplaced.content, sliceDepth - 1).firstChild;\n            fragment = parent.content;\n          } else {\n            fragment = this.unplaced.content;\n          }\n          var first = fragment.firstChild;\n          for (var frontierDepth = this.depth; frontierDepth >= 0; frontierDepth--) {\n            var _this$frontier$fronti = this.frontier[frontierDepth],\n              type = _this$frontier$fronti.type,\n              match = _this$frontier$fronti.match,\n              _wrap = void 0,\n              inject = null;\n            // In pass 1, if the next node matches, or there is no next\n            // node but the parents look compatible, we've found a\n            // place.\n            if (pass == 1 && (first ? match.matchType(first.type) || (inject = match.fillBefore(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(first), false)) : parent && type.compatibleContent(parent.type))) return {\n              sliceDepth: sliceDepth,\n              frontierDepth: frontierDepth,\n              parent: parent,\n              inject: inject\n            };\n            // In pass 2, look for a set of wrapping nodes that make\n            // `first` fit here.\n            else if (pass == 2 && first && (_wrap = match.findWrapping(first.type))) return {\n              sliceDepth: sliceDepth,\n              frontierDepth: frontierDepth,\n              parent: parent,\n              wrap: _wrap\n            };\n            // Don't continue looking further up if the parent node\n            // would fit here.\n            if (parent && match.matchType(parent.type)) break;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"openMore\",\n    value: function openMore() {\n      var _this$unplaced = this.unplaced,\n        content = _this$unplaced.content,\n        openStart = _this$unplaced.openStart,\n        openEnd = _this$unplaced.openEnd;\n      var inner = contentAt(content, openStart);\n      if (!inner.childCount || inner.firstChild.isLeaf) return false;\n      this.unplaced = new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(content, openStart + 1, Math.max(openEnd, inner.size + openStart >= content.size - openEnd ? openStart + 1 : 0));\n      return true;\n    }\n  }, {\n    key: \"dropNode\",\n    value: function dropNode() {\n      var _this$unplaced2 = this.unplaced,\n        content = _this$unplaced2.content,\n        openStart = _this$unplaced2.openStart,\n        openEnd = _this$unplaced2.openEnd;\n      var inner = contentAt(content, openStart);\n      if (inner.childCount <= 1 && openStart > 0) {\n        var openAtEnd = content.size - openStart <= openStart + inner.size;\n        this.unplaced = new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(dropFromFragment(content, openStart - 1, 1), openStart - 1, openAtEnd ? openStart - 1 : openEnd);\n      } else {\n        this.unplaced = new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(dropFromFragment(content, openStart, 1), openStart, openEnd);\n      }\n    }\n    // Move content from the unplaced slice at `sliceDepth` to the\n    // frontier node at `frontierDepth`. Close that frontier node when\n    // applicable.\n  }, {\n    key: \"placeNodes\",\n    value: function placeNodes(_ref) {\n      var sliceDepth = _ref.sliceDepth,\n        frontierDepth = _ref.frontierDepth,\n        parent = _ref.parent,\n        inject = _ref.inject,\n        wrap = _ref.wrap;\n      while (this.depth > frontierDepth) this.closeFrontierNode();\n      if (wrap) for (var i = 0; i < wrap.length; i++) this.openFrontierNode(wrap[i]);\n      var slice = this.unplaced,\n        fragment = parent ? parent.content : slice.content;\n      var openStart = slice.openStart - sliceDepth;\n      var taken = 0,\n        add = [];\n      var _this$frontier$fronti2 = this.frontier[frontierDepth],\n        match = _this$frontier$fronti2.match,\n        type = _this$frontier$fronti2.type;\n      if (inject) {\n        for (var _i3 = 0; _i3 < inject.childCount; _i3++) add.push(inject.child(_i3));\n        match = match.matchFragment(inject);\n      }\n      // Computes the amount of (end) open nodes at the end of the\n      // fragment. When 0, the parent is open, but no more. When\n      // negative, nothing is open.\n      var openEndCount = fragment.size + sliceDepth - (slice.content.size - slice.openEnd);\n      // Scan over the fragment, fitting as many child nodes as\n      // possible.\n      while (taken < fragment.childCount) {\n        var next = fragment.child(taken),\n          matches = match.matchType(next.type);\n        if (!matches) break;\n        taken++;\n        if (taken > 1 || openStart == 0 || next.content.size) {\n          // Drop empty open nodes\n          match = matches;\n          add.push(closeNodeStart(next.mark(type.allowedMarks(next.marks)), taken == 1 ? openStart : 0, taken == fragment.childCount ? openEndCount : -1));\n        }\n      }\n      var toEnd = taken == fragment.childCount;\n      if (!toEnd) openEndCount = -1;\n      this.placed = addToFragment(this.placed, frontierDepth, prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(add));\n      this.frontier[frontierDepth].match = match;\n      // If the parent types match, and the entire node was moved, and\n      // it's not open, close this frontier node right away.\n      if (toEnd && openEndCount < 0 && parent && parent.type == this.frontier[this.depth].type && this.frontier.length > 1) this.closeFrontierNode();\n      // Add new frontier nodes for any open nodes at the end.\n      for (var _i4 = 0, cur = fragment; _i4 < openEndCount; _i4++) {\n        var node = cur.lastChild;\n        this.frontier.push({\n          type: node.type,\n          match: node.contentMatchAt(node.childCount)\n        });\n        cur = node.content;\n      }\n      // Update `this.unplaced`. Drop the entire node from which we\n      // placed it we got to its end, otherwise just drop the placed\n      // nodes.\n      this.unplaced = !toEnd ? new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(dropFromFragment(slice.content, sliceDepth, taken), slice.openStart, slice.openEnd) : sliceDepth == 0 ? prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.empty : new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(dropFromFragment(slice.content, sliceDepth - 1, 1), sliceDepth - 1, openEndCount < 0 ? slice.openEnd : sliceDepth - 1);\n    }\n  }, {\n    key: \"mustMoveInline\",\n    value: function mustMoveInline() {\n      if (!this.$to.parent.isTextblock) return -1;\n      var top = this.frontier[this.depth],\n        level;\n      if (!top.type.isTextblock || !contentAfterFits(this.$to, this.$to.depth, top.type, top.match, false) || this.$to.depth == this.depth && (level = this.findCloseLevel(this.$to)) && level.depth == this.depth) return -1;\n      var depth = this.$to.depth,\n        after = this.$to.after(depth);\n      while (depth > 1 && after == this.$to.end(--depth)) ++after;\n      return after;\n    }\n  }, {\n    key: \"findCloseLevel\",\n    value: function findCloseLevel($to) {\n      scan: for (var i = Math.min(this.depth, $to.depth); i >= 0; i--) {\n        var _this$frontier$i = this.frontier[i],\n          match = _this$frontier$i.match,\n          type = _this$frontier$i.type;\n        var dropInner = i < $to.depth && $to.end(i + 1) == $to.pos + ($to.depth - (i + 1));\n        var fit = contentAfterFits($to, i, type, match, dropInner);\n        if (!fit) continue;\n        for (var d = i - 1; d >= 0; d--) {\n          var _this$frontier$d = this.frontier[d],\n            _match = _this$frontier$d.match,\n            _type = _this$frontier$d.type;\n          var matches = contentAfterFits($to, d, _type, _match, true);\n          if (!matches || matches.childCount) continue scan;\n        }\n        return {\n          depth: i,\n          fit: fit,\n          move: dropInner ? $to.doc.resolve($to.after(i + 1)) : $to\n        };\n      }\n    }\n  }, {\n    key: \"close\",\n    value: function close($to) {\n      var close = this.findCloseLevel($to);\n      if (!close) return null;\n      while (this.depth > close.depth) this.closeFrontierNode();\n      if (close.fit.childCount) this.placed = addToFragment(this.placed, close.depth, close.fit);\n      $to = close.move;\n      for (var d = close.depth + 1; d <= $to.depth; d++) {\n        var node = $to.node(d),\n          add = node.type.contentMatch.fillBefore(node.content, true, $to.index(d));\n        this.openFrontierNode(node.type, node.attrs, add);\n      }\n      return $to;\n    }\n  }, {\n    key: \"openFrontierNode\",\n    value: function openFrontierNode(type) {\n      var attrs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var content = arguments.length > 2 ? arguments[2] : undefined;\n      var top = this.frontier[this.depth];\n      top.match = top.match.matchType(type);\n      this.placed = addToFragment(this.placed, this.depth, prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(type.create(attrs, content)));\n      this.frontier.push({\n        type: type,\n        match: type.contentMatch\n      });\n    }\n  }, {\n    key: \"closeFrontierNode\",\n    value: function closeFrontierNode() {\n      var open = this.frontier.pop();\n      var add = open.match.fillBefore(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty, true);\n      if (add.childCount) this.placed = addToFragment(this.placed, this.frontier.length, add);\n    }\n  }]);\n}();\nfunction dropFromFragment(fragment, depth, count) {\n  if (depth == 0) return fragment.cutByIndex(count, fragment.childCount);\n  return fragment.replaceChild(0, fragment.firstChild.copy(dropFromFragment(fragment.firstChild.content, depth - 1, count)));\n}\nfunction addToFragment(fragment, depth, content) {\n  if (depth == 0) return fragment.append(content);\n  return fragment.replaceChild(fragment.childCount - 1, fragment.lastChild.copy(addToFragment(fragment.lastChild.content, depth - 1, content)));\n}\nfunction contentAt(fragment, depth) {\n  for (var i = 0; i < depth; i++) fragment = fragment.firstChild.content;\n  return fragment;\n}\nfunction closeNodeStart(node, openStart, openEnd) {\n  if (openStart <= 0) return node;\n  var frag = node.content;\n  if (openStart > 1) frag = frag.replaceChild(0, closeNodeStart(frag.firstChild, openStart - 1, frag.childCount == 1 ? openEnd - 1 : 0));\n  if (openStart > 0) {\n    frag = node.type.contentMatch.fillBefore(frag).append(frag);\n    if (openEnd <= 0) frag = frag.append(node.type.contentMatch.matchFragment(frag).fillBefore(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty, true));\n  }\n  return node.copy(frag);\n}\nfunction contentAfterFits($to, depth, type, match, open) {\n  var node = $to.node(depth),\n    index = open ? $to.indexAfter(depth) : $to.index(depth);\n  if (index == node.childCount && !type.compatibleContent(node.type)) return null;\n  var fit = match.fillBefore(node.content, true, index);\n  return fit && !invalidMarks(type, node.content, index) ? fit : null;\n}\nfunction invalidMarks(type, fragment, start) {\n  for (var i = start; i < fragment.childCount; i++) if (!type.allowsMarks(fragment.child(i).marks)) return true;\n  return false;\n}\nfunction definesContent(type) {\n  return type.spec.defining || type.spec.definingForContent;\n}\nfunction _replaceRange(tr, from, to, slice) {\n  if (!slice.size) return tr.deleteRange(from, to);\n  var $from = tr.doc.resolve(from),\n    $to = tr.doc.resolve(to);\n  if (fitsTrivially($from, $to, slice)) return tr.step(new ReplaceStep(from, to, slice));\n  var targetDepths = coveredDepths($from, tr.doc.resolve(to));\n  // Can't replace the whole document, so remove 0 if it's present\n  if (targetDepths[targetDepths.length - 1] == 0) targetDepths.pop();\n  // Negative numbers represent not expansion over the whole node at\n  // that depth, but replacing from $from.before(-D) to $to.pos.\n  var preferredTarget = -($from.depth + 1);\n  targetDepths.unshift(preferredTarget);\n  // This loop picks a preferred target depth, if one of the covering\n  // depths is not outside of a defining node, and adds negative\n  // depths for any depth that has $from at its start and does not\n  // cross a defining node.\n  for (var d = $from.depth, pos = $from.pos - 1; d > 0; d--, pos--) {\n    var spec = $from.node(d).type.spec;\n    if (spec.defining || spec.definingAsContext || spec.isolating) break;\n    if (targetDepths.indexOf(d) > -1) preferredTarget = d;else if ($from.before(d) == pos) targetDepths.splice(1, 0, -d);\n  }\n  // Try to fit each possible depth of the slice into each possible\n  // target depth, starting with the preferred depths.\n  var preferredTargetIndex = targetDepths.indexOf(preferredTarget);\n  var leftNodes = [],\n    preferredDepth = slice.openStart;\n  for (var content = slice.content, i = 0;; i++) {\n    var node = content.firstChild;\n    leftNodes.push(node);\n    if (i == slice.openStart) break;\n    content = node.content;\n  }\n  // Back up preferredDepth to cover defining textblocks directly\n  // above it, possibly skipping a non-defining textblock.\n  for (var _d3 = preferredDepth - 1; _d3 >= 0; _d3--) {\n    var leftNode = leftNodes[_d3],\n      def = definesContent(leftNode.type);\n    if (def && !leftNode.sameMarkup($from.node(Math.abs(preferredTarget) - 1))) preferredDepth = _d3;else if (def || !leftNode.type.isTextblock) break;\n  }\n  for (var j = slice.openStart; j >= 0; j--) {\n    var openDepth = (j + preferredDepth + 1) % (slice.openStart + 1);\n    var insert = leftNodes[openDepth];\n    if (!insert) continue;\n    for (var _i5 = 0; _i5 < targetDepths.length; _i5++) {\n      // Loop over possible expansion levels, starting with the\n      // preferred one\n      var targetDepth = targetDepths[(_i5 + preferredTargetIndex) % targetDepths.length],\n        expand = true;\n      if (targetDepth < 0) {\n        expand = false;\n        targetDepth = -targetDepth;\n      }\n      var parent = $from.node(targetDepth - 1),\n        index = $from.index(targetDepth - 1);\n      if (parent.canReplaceWith(index, index, insert.type, insert.marks)) return tr.replace($from.before(targetDepth), expand ? $to.after(targetDepth) : to, new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(closeFragment(slice.content, 0, slice.openStart, openDepth), openDepth, slice.openEnd));\n    }\n  }\n  var startSteps = tr.steps.length;\n  for (var _i6 = targetDepths.length - 1; _i6 >= 0; _i6--) {\n    tr.replace(from, to, slice);\n    if (tr.steps.length > startSteps) break;\n    var depth = targetDepths[_i6];\n    if (depth < 0) continue;\n    from = $from.before(depth);\n    to = $to.after(depth);\n  }\n}\nfunction closeFragment(fragment, depth, oldOpen, newOpen, parent) {\n  if (depth < oldOpen) {\n    var first = fragment.firstChild;\n    fragment = fragment.replaceChild(0, first.copy(closeFragment(first.content, depth + 1, oldOpen, newOpen, first)));\n  }\n  if (depth > newOpen) {\n    var match = parent.contentMatchAt(0);\n    var start = match.fillBefore(fragment).append(fragment);\n    fragment = start.append(match.matchFragment(start).fillBefore(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty, true));\n  }\n  return fragment;\n}\nfunction _replaceRangeWith(tr, from, to, node) {\n  if (!node.isInline && from == to && tr.doc.resolve(from).parent.content.size) {\n    var point = insertPoint(tr.doc, from, node.type);\n    if (point != null) from = to = point;\n  }\n  tr.replaceRange(from, to, new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(node), 0, 0));\n}\nfunction _deleteRange(tr, from, to) {\n  var $from = tr.doc.resolve(from),\n    $to = tr.doc.resolve(to);\n  var covered = coveredDepths($from, $to);\n  for (var i = 0; i < covered.length; i++) {\n    var depth = covered[i],\n      last = i == covered.length - 1;\n    if (last && depth == 0 || $from.node(depth).type.contentMatch.validEnd) return tr[\"delete\"]($from.start(depth), $to.end(depth));\n    if (depth > 0 && (last || $from.node(depth - 1).canReplace($from.index(depth - 1), $to.indexAfter(depth - 1)))) return tr[\"delete\"]($from.before(depth), $to.after(depth));\n  }\n  for (var d = 1; d <= $from.depth && d <= $to.depth; d++) {\n    if (from - $from.start(d) == $from.depth - d && to > $from.end(d) && $to.end(d) - to != $to.depth - d && $from.start(d - 1) == $to.start(d - 1) && $from.node(d - 1).canReplace($from.index(d - 1), $to.index(d - 1))) return tr[\"delete\"]($from.before(d), to);\n  }\n  tr[\"delete\"](from, to);\n}\n// Returns an array of all depths for which $from - $to spans the\n// whole content of the nodes at that depth.\nfunction coveredDepths($from, $to) {\n  var result = [],\n    minDepth = Math.min($from.depth, $to.depth);\n  for (var d = minDepth; d >= 0; d--) {\n    var start = $from.start(d);\n    if (start < $from.pos - ($from.depth - d) || $to.end(d) > $to.pos + ($to.depth - d) || $from.node(d).type.spec.isolating || $to.node(d).type.spec.isolating) break;\n    if (start == $to.start(d) || d == $from.depth && d == $to.depth && $from.parent.inlineContent && $to.parent.inlineContent && d && $to.start(d - 1) == start - 1) result.push(d);\n  }\n  return result;\n}\n\n/**\nUpdate an attribute in a specific node.\n*/\nvar AttrStep = /*#__PURE__*/function (_Step7) {\n  /**\n  Construct an attribute step.\n  */\n  function AttrStep(\n  /**\n  The position of the target node.\n  */\n  pos,\n  /**\n  The attribute to set.\n  */\n  attr,\n  // The attribute's new value.\n  value) {\n    var _this10;\n    _classCallCheck(this, AttrStep);\n    _this10 = _callSuper(this, AttrStep);\n    _this10.pos = pos;\n    _this10.attr = attr;\n    _this10.value = value;\n    return _this10;\n  }\n  _inherits(AttrStep, _Step7);\n  return _createClass(AttrStep, [{\n    key: \"apply\",\n    value: function apply(doc) {\n      var node = doc.nodeAt(this.pos);\n      if (!node) return StepResult.fail(\"No node at attribute step's position\");\n      var attrs = Object.create(null);\n      for (var name in node.attrs) attrs[name] = node.attrs[name];\n      attrs[this.attr] = this.value;\n      var updated = node.type.create(attrs, null, node.marks);\n      return StepResult.fromReplace(doc, this.pos, this.pos + 1, new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(updated), 0, node.isLeaf ? 0 : 1));\n    }\n  }, {\n    key: \"getMap\",\n    value: function getMap() {\n      return StepMap.empty;\n    }\n  }, {\n    key: \"invert\",\n    value: function invert(doc) {\n      return new AttrStep(this.pos, this.attr, doc.nodeAt(this.pos).attrs[this.attr]);\n    }\n  }, {\n    key: \"map\",\n    value: function map(mapping) {\n      var pos = mapping.mapResult(this.pos, 1);\n      return pos.deletedAfter ? null : new AttrStep(pos.pos, this.attr, this.value);\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        stepType: \"attr\",\n        pos: this.pos,\n        attr: this.attr,\n        value: this.value\n      };\n    }\n  }], [{\n    key: \"fromJSON\",\n    value: function fromJSON(schema, json) {\n      if (typeof json.pos != \"number\" || typeof json.attr != \"string\") throw new RangeError(\"Invalid input for AttrStep.fromJSON\");\n      return new AttrStep(json.pos, json.attr, json.value);\n    }\n  }]);\n}(Step);\nStep.jsonID(\"attr\", AttrStep);\n/**\nUpdate an attribute in the doc node.\n*/\nvar DocAttrStep = /*#__PURE__*/function (_Step8) {\n  /**\n  Construct an attribute step.\n  */\n  function DocAttrStep(\n  /**\n  The attribute to set.\n  */\n  attr,\n  // The attribute's new value.\n  value) {\n    var _this11;\n    _classCallCheck(this, DocAttrStep);\n    _this11 = _callSuper(this, DocAttrStep);\n    _this11.attr = attr;\n    _this11.value = value;\n    return _this11;\n  }\n  _inherits(DocAttrStep, _Step8);\n  return _createClass(DocAttrStep, [{\n    key: \"apply\",\n    value: function apply(doc) {\n      var attrs = Object.create(null);\n      for (var name in doc.attrs) attrs[name] = doc.attrs[name];\n      attrs[this.attr] = this.value;\n      var updated = doc.type.create(attrs, doc.content, doc.marks);\n      return StepResult.ok(updated);\n    }\n  }, {\n    key: \"getMap\",\n    value: function getMap() {\n      return StepMap.empty;\n    }\n  }, {\n    key: \"invert\",\n    value: function invert(doc) {\n      return new DocAttrStep(this.attr, doc.attrs[this.attr]);\n    }\n  }, {\n    key: \"map\",\n    value: function map(mapping) {\n      return this;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        stepType: \"docAttr\",\n        attr: this.attr,\n        value: this.value\n      };\n    }\n  }], [{\n    key: \"fromJSON\",\n    value: function fromJSON(schema, json) {\n      if (typeof json.attr != \"string\") throw new RangeError(\"Invalid input for DocAttrStep.fromJSON\");\n      return new DocAttrStep(json.attr, json.value);\n    }\n  }]);\n}(Step);\nStep.jsonID(\"docAttr\", DocAttrStep);\n\n/**\n@internal\n*/\nvar TransformError = /*#__PURE__*/function (_Error) {\n  function TransformError() {\n    _classCallCheck(this, TransformError);\n    return _callSuper(this, TransformError, arguments);\n  }\n  _inherits(TransformError, _Error);\n  return _createClass(TransformError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nTransformError = function TransformError(message) {\n  var err = Error.call(this, message);\n  err.__proto__ = TransformError.prototype;\n  return err;\n};\nTransformError.prototype = Object.create(Error.prototype);\nTransformError.prototype.constructor = TransformError;\nTransformError.prototype.name = \"TransformError\";\n/**\nAbstraction to build up and track an array of\n[steps](https://prosemirror.net/docs/ref/#transform.Step) representing a document transformation.\n\nMost transforming methods return the `Transform` object itself, so\nthat they can be chained.\n*/\nvar Transform = /*#__PURE__*/function () {\n  /**\n  Create a transform that starts with the given document.\n  */\n  function Transform(\n  /**\n  The current document (the result of applying the steps in the\n  transform).\n  */\n  doc) {\n    _classCallCheck(this, Transform);\n    this.doc = doc;\n    /**\n    The steps in this transform.\n    */\n    this.steps = [];\n    /**\n    The documents before each of the steps.\n    */\n    this.docs = [];\n    /**\n    A mapping with the maps for each of the steps in this transform.\n    */\n    this.mapping = new Mapping();\n  }\n  /**\n  The starting document.\n  */\n  return _createClass(Transform, [{\n    key: \"before\",\n    get: function get() {\n      return this.docs.length ? this.docs[0] : this.doc;\n    }\n    /**\n    Apply a new step in this transform, saving the result. Throws an\n    error when the step fails.\n    */\n  }, {\n    key: \"step\",\n    value: function step(_step) {\n      var result = this.maybeStep(_step);\n      if (result.failed) throw new TransformError(result.failed);\n      return this;\n    }\n    /**\n    Try to apply a step in this transformation, ignoring it if it\n    fails. Returns the step result.\n    */\n  }, {\n    key: \"maybeStep\",\n    value: function maybeStep(step) {\n      var result = step.apply(this.doc);\n      if (!result.failed) this.addStep(step, result.doc);\n      return result;\n    }\n    /**\n    True when the document has been changed (when there are any\n    steps).\n    */\n  }, {\n    key: \"docChanged\",\n    get: function get() {\n      return this.steps.length > 0;\n    }\n    /**\n    @internal\n    */\n  }, {\n    key: \"addStep\",\n    value: function addStep(step, doc) {\n      this.docs.push(this.doc);\n      this.steps.push(step);\n      this.mapping.appendMap(step.getMap());\n      this.doc = doc;\n    }\n    /**\n    Replace the part of the document between `from` and `to` with the\n    given `slice`.\n    */\n  }, {\n    key: \"replace\",\n    value: function replace(from) {\n      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : from;\n      var slice = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.empty;\n      var step = replaceStep(this.doc, from, to, slice);\n      if (step) this.step(step);\n      return this;\n    }\n    /**\n    Replace the given range with the given content, which may be a\n    fragment, node, or array of nodes.\n    */\n  }, {\n    key: \"replaceWith\",\n    value: function replaceWith(from, to, content) {\n      return this.replace(from, to, new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(content), 0, 0));\n    }\n    /**\n    Delete the content between the given positions.\n    */\n  }, {\n    key: \"delete\",\n    value: function _delete(from, to) {\n      return this.replace(from, to, prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.empty);\n    }\n    /**\n    Insert the given content at the given position.\n    */\n  }, {\n    key: \"insert\",\n    value: function insert(pos, content) {\n      return this.replaceWith(pos, pos, content);\n    }\n    /**\n    Replace a range of the document with a given slice, using\n    `from`, `to`, and the slice's\n    [`openStart`](https://prosemirror.net/docs/ref/#model.Slice.openStart) property as hints, rather\n    than fixed start and end points. This method may grow the\n    replaced area or close open nodes in the slice in order to get a\n    fit that is more in line with WYSIWYG expectations, by dropping\n    fully covered parent nodes of the replaced region when they are\n    marked [non-defining as\n    context](https://prosemirror.net/docs/ref/#model.NodeSpec.definingAsContext), or including an\n    open parent node from the slice that _is_ marked as [defining\n    its content](https://prosemirror.net/docs/ref/#model.NodeSpec.definingForContent).\n    \n    This is the method, for example, to handle paste. The similar\n    [`replace`](https://prosemirror.net/docs/ref/#transform.Transform.replace) method is a more\n    primitive tool which will _not_ move the start and end of its given\n    range, and is useful in situations where you need more precise\n    control over what happens.\n    */\n  }, {\n    key: \"replaceRange\",\n    value: function replaceRange(from, to, slice) {\n      _replaceRange(this, from, to, slice);\n      return this;\n    }\n    /**\n    Replace the given range with a node, but use `from` and `to` as\n    hints, rather than precise positions. When from and to are the same\n    and are at the start or end of a parent node in which the given\n    node doesn't fit, this method may _move_ them out towards a parent\n    that does allow the given node to be placed. When the given range\n    completely covers a parent node, this method may completely replace\n    that parent node.\n    */\n  }, {\n    key: \"replaceRangeWith\",\n    value: function replaceRangeWith(from, to, node) {\n      _replaceRangeWith(this, from, to, node);\n      return this;\n    }\n    /**\n    Delete the given range, expanding it to cover fully covered\n    parent nodes until a valid replace is found.\n    */\n  }, {\n    key: \"deleteRange\",\n    value: function deleteRange(from, to) {\n      _deleteRange(this, from, to);\n      return this;\n    }\n    /**\n    Split the content in the given range off from its parent, if there\n    is sibling content before or after it, and move it up the tree to\n    the depth specified by `target`. You'll probably want to use\n    [`liftTarget`](https://prosemirror.net/docs/ref/#transform.liftTarget) to compute `target`, to make\n    sure the lift is valid.\n    */\n  }, {\n    key: \"lift\",\n    value: function lift(range, target) {\n      _lift(this, range, target);\n      return this;\n    }\n    /**\n    Join the blocks around the given position. If depth is 2, their\n    last and first siblings are also joined, and so on.\n    */\n  }, {\n    key: \"join\",\n    value: function join(pos) {\n      var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      _join(this, pos, depth);\n      return this;\n    }\n    /**\n    Wrap the given [range](https://prosemirror.net/docs/ref/#model.NodeRange) in the given set of wrappers.\n    The wrappers are assumed to be valid in this position, and should\n    probably be computed with [`findWrapping`](https://prosemirror.net/docs/ref/#transform.findWrapping).\n    */\n  }, {\n    key: \"wrap\",\n    value: function wrap(range, wrappers) {\n      _wrap2(this, range, wrappers);\n      return this;\n    }\n    /**\n    Set the type of all textblocks (partly) between `from` and `to` to\n    the given node type with the given attributes.\n    */\n  }, {\n    key: \"setBlockType\",\n    value: function setBlockType(from) {\n      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : from;\n      var type = arguments.length > 2 ? arguments[2] : undefined;\n      var attrs = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      _setBlockType(this, from, to, type, attrs);\n      return this;\n    }\n    /**\n    Change the type, attributes, and/or marks of the node at `pos`.\n    When `type` isn't given, the existing node type is preserved,\n    */\n  }, {\n    key: \"setNodeMarkup\",\n    value: function setNodeMarkup(pos, type) {\n      var attrs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var marks = arguments.length > 3 ? arguments[3] : undefined;\n      _setNodeMarkup(this, pos, type, attrs, marks);\n      return this;\n    }\n    /**\n    Set a single attribute on a given node to a new value.\n    The `pos` addresses the document content. Use `setDocAttribute`\n    to set attributes on the document itself.\n    */\n  }, {\n    key: \"setNodeAttribute\",\n    value: function setNodeAttribute(pos, attr, value) {\n      this.step(new AttrStep(pos, attr, value));\n      return this;\n    }\n    /**\n    Set a single attribute on the document to a new value.\n    */\n  }, {\n    key: \"setDocAttribute\",\n    value: function setDocAttribute(attr, value) {\n      this.step(new DocAttrStep(attr, value));\n      return this;\n    }\n    /**\n    Add a mark to the node at position `pos`.\n    */\n  }, {\n    key: \"addNodeMark\",\n    value: function addNodeMark(pos, mark) {\n      this.step(new AddNodeMarkStep(pos, mark));\n      return this;\n    }\n    /**\n    Remove a mark (or a mark of the given type) from the node at\n    position `pos`.\n    */\n  }, {\n    key: \"removeNodeMark\",\n    value: function removeNodeMark(pos, mark) {\n      if (!(mark instanceof prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Mark)) {\n        var node = this.doc.nodeAt(pos);\n        if (!node) throw new RangeError(\"No node at position \" + pos);\n        mark = mark.isInSet(node.marks);\n        if (!mark) return this;\n      }\n      this.step(new RemoveNodeMarkStep(pos, mark));\n      return this;\n    }\n    /**\n    Split the node at the given position, and optionally, if `depth` is\n    greater than one, any number of nodes above that. By default, the\n    parts split off will inherit the node type of the original node.\n    This can be changed by passing an array of types and attributes to\n    use after the split (with the outermost nodes coming first).\n    */\n  }, {\n    key: \"split\",\n    value: function split(pos) {\n      var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var typesAfter = arguments.length > 2 ? arguments[2] : undefined;\n      _split(this, pos, depth, typesAfter);\n      return this;\n    }\n    /**\n    Add the given mark to the inline content between `from` and `to`.\n    */\n  }, {\n    key: \"addMark\",\n    value: function addMark(from, to, mark) {\n      _addMark(this, from, to, mark);\n      return this;\n    }\n    /**\n    Remove marks from inline nodes between `from` and `to`. When\n    `mark` is a single mark, remove precisely that mark. When it is\n    a mark type, remove all marks of that type. When it is null,\n    remove all marks of any type.\n    */\n  }, {\n    key: \"removeMark\",\n    value: function removeMark(from, to, mark) {\n      _removeMark(this, from, to, mark);\n      return this;\n    }\n    /**\n    Removes all marks and nodes from the content of the node at\n    `pos` that don't match the given new parent node type. Accepts\n    an optional starting [content match](https://prosemirror.net/docs/ref/#model.ContentMatch) as\n    third argument.\n    */\n  }, {\n    key: \"clearIncompatible\",\n    value: function clearIncompatible(pos, parentType, match) {\n      _clearIncompatible(this, pos, parentType, match);\n      return this;\n    }\n  }]);\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/prosemirror-transform/dist/index.js\n");

/***/ })

};
;