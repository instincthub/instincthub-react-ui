"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/marked";
exports.ids = ["vendor-chunks/marked"];
exports.modules = {

/***/ "(ssr)/./node_modules/marked/lib/marked.esm.js":
/*!***********************************************!*\
  !*** ./node_modules/marked/lib/marked.esm.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Hooks: () => (/* binding */ _Hooks),\n/* harmony export */   Lexer: () => (/* binding */ _Lexer),\n/* harmony export */   Marked: () => (/* binding */ Marked),\n/* harmony export */   Parser: () => (/* binding */ _Parser),\n/* harmony export */   Renderer: () => (/* binding */ _Renderer),\n/* harmony export */   TextRenderer: () => (/* binding */ _TextRenderer),\n/* harmony export */   Tokenizer: () => (/* binding */ _Tokenizer),\n/* harmony export */   defaults: () => (/* binding */ _defaults),\n/* harmony export */   getDefaults: () => (/* binding */ _getDefaults),\n/* harmony export */   lexer: () => (/* binding */ lexer),\n/* harmony export */   marked: () => (/* binding */ marked),\n/* harmony export */   options: () => (/* binding */ options),\n/* harmony export */   parse: () => (/* binding */ parse),\n/* harmony export */   parseInline: () => (/* binding */ parseInline),\n/* harmony export */   parser: () => (/* binding */ parser),\n/* harmony export */   setOptions: () => (/* binding */ setOptions),\n/* harmony export */   use: () => (/* binding */ use),\n/* harmony export */   walkTokens: () => (/* binding */ walkTokens)\n/* harmony export */ });\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _readOnlyError(name) { throw new TypeError(\"\\\"\" + name + \"\\\" is read-only\"); }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n/**\n * marked v15.0.7 - a markdown parser\n * Copyright (c) 2011-2025, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\n/**\n * Gets the original marked default options.\n */\nfunction _getDefaults() {\n  return {\n    async: false,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    hooks: null,\n    pedantic: false,\n    renderer: null,\n    silent: false,\n    tokenizer: null,\n    walkTokens: null\n  };\n}\nvar _defaults = _getDefaults();\nfunction changeDefaults(newDefaults) {\n  _defaults = newDefaults;\n}\nvar noopTest = {\n  exec: function exec() {\n    return null;\n  }\n};\nfunction edit(regex) {\n  var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var source = typeof regex === 'string' ? regex : regex.source;\n  var obj = {\n    replace: function replace(name, val) {\n      var valSource = typeof val === 'string' ? val : val.source;\n      valSource = valSource.replace(other.caret, '$1');\n      source = source.replace(name, valSource);\n      return obj;\n    },\n    getRegex: function getRegex() {\n      return new RegExp(source, opt);\n    }\n  };\n  return obj;\n}\nvar other = {\n  codeRemoveIndent: /^(?: {1,4}| {0,3}\\t)/gm,\n  outputLinkReplace: /\\\\([\\[\\]])/g,\n  indentCodeCompensation: /^(\\s+)(?:```)/,\n  beginningSpace: /^\\s+/,\n  endingHash: /#$/,\n  startingSpaceChar: /^ /,\n  endingSpaceChar: / $/,\n  nonSpaceChar: /[^ ]/,\n  newLineCharGlobal: /\\n/g,\n  tabCharGlobal: /\\t/g,\n  multipleSpaceGlobal: /\\s+/g,\n  blankLine: /^[ \\t]*$/,\n  doubleBlankLine: /\\n[ \\t]*\\n[ \\t]*$/,\n  blockquoteStart: /^ {0,3}>/,\n  blockquoteSetextReplace: /\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g,\n  blockquoteSetextReplace2: /^ {0,3}>[ \\t]?/gm,\n  listReplaceTabs: /^\\t+/,\n  listReplaceNesting: /^ {1,4}(?=( {4})*[^ ])/g,\n  listIsTask: /^\\[[ xX]\\] /,\n  listReplaceTask: /^\\[[ xX]\\] +/,\n  anyLine: /\\n.*\\n/,\n  hrefBrackets: /^<(.*)>$/,\n  tableDelimiter: /[:|]/,\n  tableAlignChars: /^\\||\\| *$/g,\n  tableRowBlankLine: /\\n[ \\t]*$/,\n  tableAlignRight: /^ *-+: *$/,\n  tableAlignCenter: /^ *:-+: *$/,\n  tableAlignLeft: /^ *:-+ *$/,\n  startATag: /^<a /i,\n  endATag: /^<\\/a>/i,\n  startPreScriptTag: /^<(pre|code|kbd|script)(\\s|>)/i,\n  endPreScriptTag: /^<\\/(pre|code|kbd|script)(\\s|>)/i,\n  startAngleBracket: /^</,\n  endAngleBracket: />$/,\n  pedanticHrefTitle: /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/,\n  unicodeAlphaNumeric: /(?:[0-9A-Za-z\\xAA\\xB2\\xB3\\xB5\\xB9\\xBA\\xBC-\\xBE\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u0660-\\u0669\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07C0-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u0870-\\u0887\\u0889-\\u088E\\u08A0-\\u08C9\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0966-\\u096F\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09E6-\\u09F1\\u09F4-\\u09F9\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A6F\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AE6-\\u0AEF\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B66-\\u0B6F\\u0B71-\\u0B77\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0BE6-\\u0BF2\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C5D\\u0C60\\u0C61\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDD\\u0CDE\\u0CE0\\u0CE1\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D04-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D58-\\u0D61\\u0D66-\\u0D78\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DE6-\\u0DEF\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F20-\\u0F33\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F-\\u1049\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u1090-\\u1099\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1369-\\u137C\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u1711\\u171F-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1820-\\u1878\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4C\\u1B50-\\u1B59\\u1B83-\\u1BA0\\u1BAE-\\u1BE5\\u1C00-\\u1C23\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1C80-\\u1C8A\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2070\\u2071\\u2074-\\u2079\\u207F-\\u2089\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2150-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2C00-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2CFD\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u3192-\\u3195\\u31A0-\\u31BF\\u31F0-\\u31FF\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\u3400-\\u4DBF\\u4E00-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7CD\\uA7D0\\uA7D1\\uA7D3\\uA7D5-\\uA7DC\\uA7F2-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA830-\\uA835\\uA840-\\uA873\\uA882-\\uA8B3\\uA8D0-\\uA8D9\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA900-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF-\\uA9D9\\uA9E0-\\uA9E4\\uA9E6-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB69\\uAB70-\\uABE2\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD07-\\uDD33\\uDD40-\\uDD78\\uDD8A\\uDD8B\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE1-\\uDEFB\\uDF00-\\uDF23\\uDF2D-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDD70-\\uDD7A\\uDD7C-\\uDD8A\\uDD8C-\\uDD92\\uDD94\\uDD95\\uDD97-\\uDDA1\\uDDA3-\\uDDB1\\uDDB3-\\uDDB9\\uDDBB\\uDDBC\\uDDC0-\\uDDF3\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67\\uDF80-\\uDF85\\uDF87-\\uDFB0\\uDFB2-\\uDFBA]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC58-\\uDC76\\uDC79-\\uDC9E\\uDCA7-\\uDCAF\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDCFB-\\uDD1B\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBC-\\uDDCF\\uDDD2-\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE40-\\uDE48\\uDE60-\\uDE7E\\uDE80-\\uDE9F\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDEEB-\\uDEEF\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF58-\\uDF72\\uDF78-\\uDF91\\uDFA9-\\uDFAF]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDCFA-\\uDD23\\uDD30-\\uDD39\\uDD40-\\uDD65\\uDD6F-\\uDD85\\uDE60-\\uDE7E\\uDE80-\\uDEA9\\uDEB0\\uDEB1\\uDEC2-\\uDEC4\\uDF00-\\uDF27\\uDF30-\\uDF45\\uDF51-\\uDF54\\uDF70-\\uDF81\\uDFB0-\\uDFCB\\uDFE0-\\uDFF6]|\\uD804[\\uDC03-\\uDC37\\uDC52-\\uDC6F\\uDC71\\uDC72\\uDC75\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD03-\\uDD26\\uDD36-\\uDD3F\\uDD44\\uDD47\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDD0-\\uDDDA\\uDDDC\\uDDE1-\\uDDF4\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE3F\\uDE40\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDEF0-\\uDEF9\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61\\uDF80-\\uDF89\\uDF8B\\uDF8E\\uDF90-\\uDFB5\\uDFB7\\uDFD1\\uDFD3]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC50-\\uDC59\\uDC5F-\\uDC61\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEAA\\uDEB8\\uDEC0-\\uDEC9\\uDED0-\\uDEE3\\uDF00-\\uDF1A\\uDF30-\\uDF3B\\uDF40-\\uDF46]|\\uD806[\\uDC00-\\uDC2B\\uDCA0-\\uDCF2\\uDCFF-\\uDD06\\uDD09\\uDD0C-\\uDD13\\uDD15\\uDD16\\uDD18-\\uDD2F\\uDD3F\\uDD41\\uDD50-\\uDD59\\uDDA0-\\uDDA7\\uDDAA-\\uDDD0\\uDDE1\\uDDE3\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE89\\uDE9D\\uDEB0-\\uDEF8\\uDFC0-\\uDFE0\\uDFF0-\\uDFF9]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC50-\\uDC6C\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46\\uDD50-\\uDD59\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD89\\uDD98\\uDDA0-\\uDDA9\\uDEE0-\\uDEF2\\uDF02\\uDF04-\\uDF10\\uDF12-\\uDF33\\uDF50-\\uDF59\\uDFB0\\uDFC0-\\uDFD4]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|\\uD80B[\\uDF90-\\uDFF0]|[\\uD80C\\uD80E\\uD80F\\uD81C-\\uD820\\uD822\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879\\uD880-\\uD883\\uD885-\\uD887][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2F\\uDC41-\\uDC46\\uDC60-\\uDFFF]|\\uD810[\\uDC00-\\uDFFA]|\\uD811[\\uDC00-\\uDE46]|\\uD818[\\uDD00-\\uDD1D\\uDD30-\\uDD39]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDE70-\\uDEBE\\uDEC0-\\uDEC9\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF5B-\\uDF61\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDD40-\\uDD6C\\uDD70-\\uDD79\\uDE40-\\uDE96\\uDF00-\\uDF4A\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1\\uDFE3]|\\uD821[\\uDC00-\\uDFF7]|\\uD823[\\uDC00-\\uDCD5\\uDCFF-\\uDD08]|\\uD82B[\\uDFF0-\\uDFF3\\uDFF5-\\uDFFB\\uDFFD\\uDFFE]|\\uD82C[\\uDC00-\\uDD22\\uDD32\\uDD50-\\uDD52\\uDD55\\uDD64-\\uDD67\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD833[\\uDCF0-\\uDCF9]|\\uD834[\\uDEC0-\\uDED3\\uDEE0-\\uDEF3\\uDF60-\\uDF78]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD837[\\uDF00-\\uDF1E\\uDF25-\\uDF2A]|\\uD838[\\uDC30-\\uDC6D\\uDD00-\\uDD2C\\uDD37-\\uDD3D\\uDD40-\\uDD49\\uDD4E\\uDE90-\\uDEAD\\uDEC0-\\uDEEB\\uDEF0-\\uDEF9]|\\uD839[\\uDCD0-\\uDCEB\\uDCF0-\\uDCF9\\uDDD0-\\uDDED\\uDDF0-\\uDDFA\\uDFE0-\\uDFE6\\uDFE8-\\uDFEB\\uDFED\\uDFEE\\uDFF0-\\uDFFE]|\\uD83A[\\uDC00-\\uDCC4\\uDCC7-\\uDCCF\\uDD00-\\uDD43\\uDD4B\\uDD50-\\uDD59]|\\uD83B[\\uDC71-\\uDCAB\\uDCAD-\\uDCAF\\uDCB1-\\uDCB4\\uDD01-\\uDD2D\\uDD2F-\\uDD3D\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD83C[\\uDD00-\\uDD0C]|\\uD83E[\\uDFF0-\\uDFF9]|\\uD869[\\uDC00-\\uDEDF\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF39\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0\\uDFF0-\\uDFFF]|\\uD87B[\\uDC00-\\uDE5D]|\\uD87E[\\uDC00-\\uDE1D]|\\uD884[\\uDC00-\\uDF4A\\uDF50-\\uDFFF]|\\uD888[\\uDC00-\\uDFAF])/,\n  escapeTest: /[&<>\"']/,\n  escapeReplace: /[&<>\"']/g,\n  escapeTestNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/,\n  escapeReplaceNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/g,\n  unescapeTest: /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig,\n  caret: /(^|[^\\[])\\^/g,\n  percentDecode: /%25/g,\n  findPipe: /\\|/g,\n  splitPipe: / \\|/,\n  slashPipe: /\\\\\\|/g,\n  carriageReturn: /\\r\\n|\\r/g,\n  spaceLine: /^ +$/gm,\n  notSpaceStart: /^\\S*/,\n  endingNewline: /\\n$/,\n  listItemRegex: function listItemRegex(bull) {\n    return new RegExp(\"^( {0,3}\".concat(bull, \")((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))\"));\n  },\n  nextBulletRegex: function nextBulletRegex(indent) {\n    return new RegExp(\"^ {0,\".concat(Math.min(3, indent - 1), \"}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))\"));\n  },\n  hrRegex: function hrRegex(indent) {\n    return new RegExp(\"^ {0,\".concat(Math.min(3, indent - 1), \"}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)\"));\n  },\n  fencesBeginRegex: function fencesBeginRegex(indent) {\n    return new RegExp(\"^ {0,\".concat(Math.min(3, indent - 1), \"}(?:```|~~~)\"));\n  },\n  headingBeginRegex: function headingBeginRegex(indent) {\n    return new RegExp(\"^ {0,\".concat(Math.min(3, indent - 1), \"}#\"));\n  },\n  htmlBeginRegex: function htmlBeginRegex(indent) {\n    return new RegExp(\"^ {0,\".concat(Math.min(3, indent - 1), \"}<(?:[a-z].*>|!--)\"), 'i');\n  }\n};\n/**\n * Block-Level Grammar\n */\nvar newline = /^(?:[ \\t]*(?:\\n|$))+/;\nvar blockCode = /^((?: {4}| {0,3}\\t)[^\\n]+(?:\\n(?:[ \\t]*(?:\\n|$))*)?)+/;\nvar fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\nvar hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\nvar heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\nvar bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nvar lheadingCore = /^(?!bull |blockCode|fences|blockquote|heading|html|table)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html|table))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/;\nvar lheading = edit(lheadingCore).replace(/bull/g, bullet) // lists can interrupt\n.replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n.replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n.replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n.replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n.replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n.replace(/\\|table/g, '') // table not in commonmark\n.getRegex();\nvar lheadingGfm = edit(lheadingCore).replace(/bull/g, bullet) // lists can interrupt\n.replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n.replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n.replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n.replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n.replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n.replace(/table/g, / {0,3}\\|?(?:[:\\- ]*\\|)+[\\:\\- ]*\\n/) // table can interrupt\n.getRegex();\nvar _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\nvar blockText = /^[^\\n]+/;\nvar _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nvar def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n[ \\t]*)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n[ \\t]*)?| *\\n[ \\t]*)(title))? *(?:\\n+|$)/).replace('label', _blockLabel).replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/).getRegex();\nvar list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/).replace(/bull/g, bullet).getRegex();\nvar _tag = 'address|article|aside|base|basefont|blockquote|body|caption' + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption' + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe' + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option' + '|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title' + '|tr|track|ul';\nvar _comment = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/;\nvar html = edit('^ {0,3}(?:' // optional indentation\n+ '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n+ '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n+ '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n+ '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n+ '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n+ '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (6)\n+ '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) open tag\n+ '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) closing tag\n+ ')', 'i').replace('comment', _comment).replace('tag', _tag).replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/).getRegex();\nvar paragraph = edit(_paragraph).replace('hr', hr).replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)').replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n.replace('|table', '').replace('blockquote', ' {0,3}>').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n.replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n.getRegex();\nvar blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/).replace('paragraph', paragraph).getRegex();\n/**\n * Normal Block Grammar\n */\nvar blockNormal = {\n  blockquote: blockquote,\n  code: blockCode,\n  def: def,\n  fences: fences,\n  heading: heading,\n  hr: hr,\n  html: html,\n  lheading: lheading,\n  list: list,\n  newline: newline,\n  paragraph: paragraph,\n  table: noopTest,\n  text: blockText\n};\n/**\n * GFM Block Grammar\n */\nvar gfmTable = edit('^ *([^\\\\n ].*)\\\\n' // Header\n+ ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n+ '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n.replace('hr', hr).replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)').replace('blockquote', ' {0,3}>').replace('code', '(?: {4}| {0,3}\\t)[^\\\\n]').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n.replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n.getRegex();\nvar blockGfm = _objectSpread(_objectSpread({}, blockNormal), {}, {\n  lheading: lheadingGfm,\n  table: gfmTable,\n  paragraph: edit(_paragraph).replace('hr', hr).replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)').replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n  .replace('table', gfmTable) // interrupt paragraphs with table\n  .replace('blockquote', ' {0,3}>').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n  .getRegex()\n});\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\nvar blockPedantic = _objectSpread(_objectSpread({}, blockNormal), {}, {\n  html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)' + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n  + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))').replace('comment', _comment).replace(/tag/g, '(?!(?:' + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub' + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)' + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b').getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest,\n  // fences not supported\n  lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  paragraph: edit(_paragraph).replace('hr', hr).replace('heading', ' *#{1,6} *[^\\n]').replace('lheading', lheading).replace('|table', '').replace('blockquote', ' {0,3}>').replace('|fences', '').replace('|list', '').replace('|html', '').replace('|tag', '').getRegex()\n});\n/**\n * Inline-Level Grammar\n */\nvar escape$1 = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\nvar inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\nvar br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\nvar inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\nvar _punctuation = /(?:[!-\\/:-@\\[-`\\{-~\\xA1-\\xA9\\xAB\\xAC\\xAE-\\xB1\\xB4\\xB6-\\xB8\\xBB\\xBF\\xD7\\xF7\\u02C2-\\u02C5\\u02D2-\\u02DF\\u02E5-\\u02EB\\u02ED\\u02EF-\\u02FF\\u0375\\u037E\\u0384\\u0385\\u0387\\u03F6\\u0482\\u055A-\\u055F\\u0589\\u058A\\u058D-\\u058F\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0606-\\u060F\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u06DE\\u06E9\\u06FD\\u06FE\\u0700-\\u070D\\u07F6-\\u07F9\\u07FE\\u07FF\\u0830-\\u083E\\u085E\\u0888\\u0964\\u0965\\u0970\\u09F2\\u09F3\\u09FA\\u09FB\\u09FD\\u0A76\\u0AF0\\u0AF1\\u0B70\\u0BF3-\\u0BFA\\u0C77\\u0C7F\\u0C84\\u0D4F\\u0D79\\u0DF4\\u0E3F\\u0E4F\\u0E5A\\u0E5B\\u0F01-\\u0F17\\u0F1A-\\u0F1F\\u0F34\\u0F36\\u0F38\\u0F3A-\\u0F3D\\u0F85\\u0FBE-\\u0FC5\\u0FC7-\\u0FCC\\u0FCE-\\u0FDA\\u104A-\\u104F\\u109E\\u109F\\u10FB\\u1360-\\u1368\\u1390-\\u1399\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DB\\u1800-\\u180A\\u1940\\u1944\\u1945\\u19DE-\\u19FF\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B4E\\u1B4F\\u1B5A-\\u1B6A\\u1B74-\\u1B7F\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u1FBD\\u1FBF-\\u1FC1\\u1FCD-\\u1FCF\\u1FDD-\\u1FDF\\u1FED-\\u1FEF\\u1FFD\\u1FFE\\u2010-\\u2027\\u2030-\\u205E\\u207A-\\u207E\\u208A-\\u208E\\u20A0-\\u20C0\\u2100\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116-\\u2118\\u211E-\\u2123\\u2125\\u2127\\u2129\\u212E\\u213A\\u213B\\u2140-\\u2144\\u214A-\\u214D\\u214F\\u218A\\u218B\\u2190-\\u2429\\u2440-\\u244A\\u249C-\\u24E9\\u2500-\\u2775\\u2794-\\u2B73\\u2B76-\\u2B95\\u2B97-\\u2BFF\\u2CE5-\\u2CEA\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E5D\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u2FF0-\\u2FFF\\u3001-\\u3004\\u3008-\\u3020\\u3030\\u3036\\u3037\\u303D-\\u303F\\u309B\\u309C\\u30A0\\u30FB\\u3190\\u3191\\u3196-\\u319F\\u31C0-\\u31E5\\u31EF\\u3200-\\u321E\\u322A-\\u3247\\u3250\\u3260-\\u327F\\u328A-\\u32B0\\u32C0-\\u33FF\\u4DC0-\\u4DFF\\uA490-\\uA4C6\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA700-\\uA716\\uA720\\uA721\\uA789\\uA78A\\uA828-\\uA82B\\uA836-\\uA839\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAA77-\\uAA79\\uAADE\\uAADF\\uAAF0\\uAAF1\\uAB5B\\uAB6A\\uAB6B\\uABEB\\uFB29\\uFBB2-\\uFBC2\\uFD3E-\\uFD4F\\uFDCF\\uFDFC-\\uFDFF\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE66\\uFE68-\\uFE6B\\uFF01-\\uFF0F\\uFF1A-\\uFF20\\uFF3B-\\uFF40\\uFF5B-\\uFF65\\uFFE0-\\uFFE6\\uFFE8-\\uFFEE\\uFFFC\\uFFFD]|\\uD800[\\uDD00-\\uDD02\\uDD37-\\uDD3F\\uDD79-\\uDD89\\uDD8C-\\uDD8E\\uDD90-\\uDD9C\\uDDA0\\uDDD0-\\uDDFC\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDC77\\uDC78\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEC8\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD803[\\uDD6E\\uDD8E\\uDD8F\\uDEAD\\uDF55-\\uDF59\\uDF86-\\uDF89]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC8\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9\\uDFD4\\uDFD5\\uDFD7\\uDFD8]|\\uD805[\\uDC4B-\\uDC4F\\uDC5A\\uDC5B\\uDC5D\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDE60-\\uDE6C\\uDEB9\\uDF3C-\\uDF3F]|\\uD806[\\uDC3B\\uDD44-\\uDD46\\uDDE2\\uDE3F-\\uDE46\\uDE9A-\\uDE9C\\uDE9E-\\uDEA2\\uDF00-\\uDF09\\uDFE1]|\\uD807[\\uDC41-\\uDC45\\uDC70\\uDC71\\uDEF7\\uDEF8\\uDF43-\\uDF4F\\uDFD5-\\uDFF1\\uDFFF]|\\uD809[\\uDC70-\\uDC74]|\\uD80B[\\uDFF1\\uDFF2]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3F\\uDF44\\uDF45]|\\uD81B[\\uDD6D-\\uDD6F\\uDE97-\\uDE9A\\uDFE2]|\\uD82F[\\uDC9C\\uDC9F]|\\uD833[\\uDC00-\\uDCEF\\uDD00-\\uDEB3\\uDF50-\\uDFC3]|\\uD834[\\uDC00-\\uDCF5\\uDD00-\\uDD26\\uDD29-\\uDD64\\uDD6A-\\uDD6C\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDDEA\\uDE00-\\uDE41\\uDE45\\uDF00-\\uDF56]|\\uD835[\\uDEC1\\uDEDB\\uDEFB\\uDF15\\uDF35\\uDF4F\\uDF6F\\uDF89\\uDFA9\\uDFC3]|\\uD836[\\uDC00-\\uDDFF\\uDE37-\\uDE3A\\uDE6D-\\uDE74\\uDE76-\\uDE83\\uDE85-\\uDE8B]|\\uD838[\\uDD4F\\uDEFF]|\\uD839\\uDDFF|\\uD83A[\\uDD5E\\uDD5F]|\\uD83B[\\uDCAC\\uDCB0\\uDD2E\\uDEF0\\uDEF1]|\\uD83C[\\uDC00-\\uDC2B\\uDC30-\\uDC93\\uDCA0-\\uDCAE\\uDCB1-\\uDCBF\\uDCC1-\\uDCCF\\uDCD1-\\uDCF5\\uDD0D-\\uDDAD\\uDDE6-\\uDE02\\uDE10-\\uDE3B\\uDE40-\\uDE48\\uDE50\\uDE51\\uDE60-\\uDE65\\uDF00-\\uDFFF]|\\uD83D[\\uDC00-\\uDED7\\uDEDC-\\uDEEC\\uDEF0-\\uDEFC\\uDF00-\\uDF76\\uDF7B-\\uDFD9\\uDFE0-\\uDFEB\\uDFF0]|\\uD83E[\\uDC00-\\uDC0B\\uDC10-\\uDC47\\uDC50-\\uDC59\\uDC60-\\uDC87\\uDC90-\\uDCAD\\uDCB0-\\uDCBB\\uDCC0\\uDCC1\\uDD00-\\uDE53\\uDE60-\\uDE6D\\uDE70-\\uDE7C\\uDE80-\\uDE89\\uDE8F-\\uDEC6\\uDECE-\\uDEDC\\uDEDF-\\uDEE9\\uDEF0-\\uDEF8\\uDF00-\\uDF92\\uDF94-\\uDFEF])/;\nvar _punctuationOrSpace = /(?:[\\t-\\r -\\/:-@\\[-`\\{-~\\xA0-\\xA9\\xAB\\xAC\\xAE-\\xB1\\xB4\\xB6-\\xB8\\xBB\\xBF\\xD7\\xF7\\u02C2-\\u02C5\\u02D2-\\u02DF\\u02E5-\\u02EB\\u02ED\\u02EF-\\u02FF\\u0375\\u037E\\u0384\\u0385\\u0387\\u03F6\\u0482\\u055A-\\u055F\\u0589\\u058A\\u058D-\\u058F\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0606-\\u060F\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u06DE\\u06E9\\u06FD\\u06FE\\u0700-\\u070D\\u07F6-\\u07F9\\u07FE\\u07FF\\u0830-\\u083E\\u085E\\u0888\\u0964\\u0965\\u0970\\u09F2\\u09F3\\u09FA\\u09FB\\u09FD\\u0A76\\u0AF0\\u0AF1\\u0B70\\u0BF3-\\u0BFA\\u0C77\\u0C7F\\u0C84\\u0D4F\\u0D79\\u0DF4\\u0E3F\\u0E4F\\u0E5A\\u0E5B\\u0F01-\\u0F17\\u0F1A-\\u0F1F\\u0F34\\u0F36\\u0F38\\u0F3A-\\u0F3D\\u0F85\\u0FBE-\\u0FC5\\u0FC7-\\u0FCC\\u0FCE-\\u0FDA\\u104A-\\u104F\\u109E\\u109F\\u10FB\\u1360-\\u1368\\u1390-\\u1399\\u1400\\u166D\\u166E\\u1680\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DB\\u1800-\\u180A\\u1940\\u1944\\u1945\\u19DE-\\u19FF\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B4E\\u1B4F\\u1B5A-\\u1B6A\\u1B74-\\u1B7F\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u1FBD\\u1FBF-\\u1FC1\\u1FCD-\\u1FCF\\u1FDD-\\u1FDF\\u1FED-\\u1FEF\\u1FFD\\u1FFE\\u2000-\\u200A\\u2010-\\u2029\\u202F-\\u205F\\u207A-\\u207E\\u208A-\\u208E\\u20A0-\\u20C0\\u2100\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116-\\u2118\\u211E-\\u2123\\u2125\\u2127\\u2129\\u212E\\u213A\\u213B\\u2140-\\u2144\\u214A-\\u214D\\u214F\\u218A\\u218B\\u2190-\\u2429\\u2440-\\u244A\\u249C-\\u24E9\\u2500-\\u2775\\u2794-\\u2B73\\u2B76-\\u2B95\\u2B97-\\u2BFF\\u2CE5-\\u2CEA\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E5D\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u2FF0-\\u3004\\u3008-\\u3020\\u3030\\u3036\\u3037\\u303D-\\u303F\\u309B\\u309C\\u30A0\\u30FB\\u3190\\u3191\\u3196-\\u319F\\u31C0-\\u31E5\\u31EF\\u3200-\\u321E\\u322A-\\u3247\\u3250\\u3260-\\u327F\\u328A-\\u32B0\\u32C0-\\u33FF\\u4DC0-\\u4DFF\\uA490-\\uA4C6\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA700-\\uA716\\uA720\\uA721\\uA789\\uA78A\\uA828-\\uA82B\\uA836-\\uA839\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAA77-\\uAA79\\uAADE\\uAADF\\uAAF0\\uAAF1\\uAB5B\\uAB6A\\uAB6B\\uABEB\\uFB29\\uFBB2-\\uFBC2\\uFD3E-\\uFD4F\\uFDCF\\uFDFC-\\uFDFF\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE66\\uFE68-\\uFE6B\\uFEFF\\uFF01-\\uFF0F\\uFF1A-\\uFF20\\uFF3B-\\uFF40\\uFF5B-\\uFF65\\uFFE0-\\uFFE6\\uFFE8-\\uFFEE\\uFFFC\\uFFFD]|\\uD800[\\uDD00-\\uDD02\\uDD37-\\uDD3F\\uDD79-\\uDD89\\uDD8C-\\uDD8E\\uDD90-\\uDD9C\\uDDA0\\uDDD0-\\uDDFC\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDC77\\uDC78\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEC8\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD803[\\uDD6E\\uDD8E\\uDD8F\\uDEAD\\uDF55-\\uDF59\\uDF86-\\uDF89]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC8\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9\\uDFD4\\uDFD5\\uDFD7\\uDFD8]|\\uD805[\\uDC4B-\\uDC4F\\uDC5A\\uDC5B\\uDC5D\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDE60-\\uDE6C\\uDEB9\\uDF3C-\\uDF3F]|\\uD806[\\uDC3B\\uDD44-\\uDD46\\uDDE2\\uDE3F-\\uDE46\\uDE9A-\\uDE9C\\uDE9E-\\uDEA2\\uDF00-\\uDF09\\uDFE1]|\\uD807[\\uDC41-\\uDC45\\uDC70\\uDC71\\uDEF7\\uDEF8\\uDF43-\\uDF4F\\uDFD5-\\uDFF1\\uDFFF]|\\uD809[\\uDC70-\\uDC74]|\\uD80B[\\uDFF1\\uDFF2]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3F\\uDF44\\uDF45]|\\uD81B[\\uDD6D-\\uDD6F\\uDE97-\\uDE9A\\uDFE2]|\\uD82F[\\uDC9C\\uDC9F]|\\uD833[\\uDC00-\\uDCEF\\uDD00-\\uDEB3\\uDF50-\\uDFC3]|\\uD834[\\uDC00-\\uDCF5\\uDD00-\\uDD26\\uDD29-\\uDD64\\uDD6A-\\uDD6C\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDDEA\\uDE00-\\uDE41\\uDE45\\uDF00-\\uDF56]|\\uD835[\\uDEC1\\uDEDB\\uDEFB\\uDF15\\uDF35\\uDF4F\\uDF6F\\uDF89\\uDFA9\\uDFC3]|\\uD836[\\uDC00-\\uDDFF\\uDE37-\\uDE3A\\uDE6D-\\uDE74\\uDE76-\\uDE83\\uDE85-\\uDE8B]|\\uD838[\\uDD4F\\uDEFF]|\\uD839\\uDDFF|\\uD83A[\\uDD5E\\uDD5F]|\\uD83B[\\uDCAC\\uDCB0\\uDD2E\\uDEF0\\uDEF1]|\\uD83C[\\uDC00-\\uDC2B\\uDC30-\\uDC93\\uDCA0-\\uDCAE\\uDCB1-\\uDCBF\\uDCC1-\\uDCCF\\uDCD1-\\uDCF5\\uDD0D-\\uDDAD\\uDDE6-\\uDE02\\uDE10-\\uDE3B\\uDE40-\\uDE48\\uDE50\\uDE51\\uDE60-\\uDE65\\uDF00-\\uDFFF]|\\uD83D[\\uDC00-\\uDED7\\uDEDC-\\uDEEC\\uDEF0-\\uDEFC\\uDF00-\\uDF76\\uDF7B-\\uDFD9\\uDFE0-\\uDFEB\\uDFF0]|\\uD83E[\\uDC00-\\uDC0B\\uDC10-\\uDC47\\uDC50-\\uDC59\\uDC60-\\uDC87\\uDC90-\\uDCAD\\uDCB0-\\uDCBB\\uDCC0\\uDCC1\\uDD00-\\uDE53\\uDE60-\\uDE6D\\uDE70-\\uDE7C\\uDE80-\\uDE89\\uDE8F-\\uDEC6\\uDECE-\\uDEDC\\uDEDF-\\uDEE9\\uDEF0-\\uDEF8\\uDF00-\\uDF92\\uDF94-\\uDFEF])/;\nvar _notPunctuationOrSpace = /(?:[\\0-\\x08\\x0E-\\x1F0-9A-Za-z\\x7F-\\x9F\\xAA\\xAD\\xB2\\xB3\\xB5\\xB9\\xBA\\xBC-\\xBE\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376-\\u037D\\u037F-\\u0383\\u0386\\u0388-\\u03F5\\u03F7-\\u0481\\u0483-\\u0559\\u0560-\\u0588\\u058B\\u058C\\u0590-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7-\\u05F2\\u05F5-\\u0605\\u0610-\\u061A\\u061C\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DD\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u070E-\\u07F5\\u07FA-\\u07FD\\u0800-\\u082F\\u083F-\\u085D\\u085F-\\u0887\\u0889-\\u0963\\u0966-\\u096F\\u0971-\\u09F1\\u09F4-\\u09F9\\u09FC\\u09FE-\\u0A75\\u0A77-\\u0AEF\\u0AF2-\\u0B6F\\u0B71-\\u0BF2\\u0BFB-\\u0C76\\u0C78-\\u0C7E\\u0C80-\\u0C83\\u0C85-\\u0D4E\\u0D50-\\u0D78\\u0D7A-\\u0DF3\\u0DF5-\\u0E3E\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E5C-\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F33\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F84\\u0F86-\\u0FBD\\u0FC6\\u0FCD\\u0FDB-\\u1049\\u1050-\\u109D\\u10A0-\\u10FA\\u10FC-\\u135F\\u1369-\\u138F\\u139A-\\u13FF\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u169D-\\u16EA\\u16EE-\\u1734\\u1737-\\u17D3\\u17D7\\u17DC-\\u17FF\\u180B-\\u193F\\u1941-\\u1943\\u1946-\\u19DD\\u1A00-\\u1A1D\\u1A20-\\u1A9F\\u1AA7\\u1AAE-\\u1B4D\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BFB\\u1C00-\\u1C3A\\u1C40-\\u1C7D\\u1C80-\\u1CBF\\u1CC8-\\u1CD2\\u1CD4-\\u1FBC\\u1FBE\\u1FC2-\\u1FCC\\u1FD0-\\u1FDC\\u1FE0-\\u1FEC\\u1FF0-\\u1FFC\\u1FFF\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u2079\\u207F-\\u2089\\u208F-\\u209F\\u20C1-\\u20FF\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2150-\\u2189\\u218C-\\u218F\\u242A-\\u243F\\u244B-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2B74\\u2B75\\u2B96\\u2C00-\\u2CE4\\u2CEB-\\u2CF8\\u2CFD\\u2D00-\\u2D6F\\u2D71-\\u2DFF\\u2E2F\\u2E5E-\\u2E7F\\u2E9A\\u2EF4-\\u2EFF\\u2FD6-\\u2FEF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3040-\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u318F\\u3192-\\u3195\\u31A0-\\u31BF\\u31E6-\\u31EE\\u31F0-\\u31FF\\u321F-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\u3400-\\u4DBF\\u4E00-\\uA48F\\uA4C7-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA672\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA6F8-\\uA6FF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA827\\uA82C-\\uA835\\uA83A-\\uA873\\uA878-\\uA8CD\\uA8D0-\\uA8F7\\uA8FB\\uA8FD-\\uA92D\\uA930-\\uA95E\\uA960-\\uA9C0\\uA9CE-\\uA9DD\\uA9E0-\\uAA5B\\uAA60-\\uAA76\\uAA7A-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAB5A\\uAB5C-\\uAB69\\uAB6C-\\uABEA\\uABEC-\\uD7FF\\uE000-\\uFB28\\uFB2A-\\uFBB1\\uFBC3-\\uFD3D\\uFD50-\\uFDCE\\uFDD0-\\uFDFB\\uFE00-\\uFE0F\\uFE1A-\\uFE2F\\uFE53\\uFE67\\uFE6C-\\uFEFE\\uFF00\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFDF\\uFFE7\\uFFEF-\\uFFFB\\uFFFE\\uFFFF]|\\uD800[\\uDC00-\\uDCFF\\uDD03-\\uDD36\\uDD40-\\uDD78\\uDD8A\\uDD8B\\uDD8F\\uDD9D-\\uDD9F\\uDDA1-\\uDDCF\\uDDFD-\\uDF9E\\uDFA0-\\uDFCF\\uDFD1-\\uDFFF]|\\uD801[\\uDC00-\\uDD6E\\uDD70-\\uDFFF]|\\uD802[\\uDC00-\\uDC56\\uDC58-\\uDC76\\uDC79-\\uDD1E\\uDD20-\\uDD3E\\uDD40-\\uDE4F\\uDE59-\\uDE7E\\uDE80-\\uDEC7\\uDEC9-\\uDEEF\\uDEF7-\\uDF38\\uDF40-\\uDF98\\uDF9D-\\uDFFF]|\\uD803[\\uDC00-\\uDD6D\\uDD6F-\\uDD8D\\uDD90-\\uDEAC\\uDEAE-\\uDF54\\uDF5A-\\uDF85\\uDF8A-\\uDFFF]|\\uD804[\\uDC00-\\uDC46\\uDC4E-\\uDCBA\\uDCBD\\uDCC2-\\uDD3F\\uDD44-\\uDD73\\uDD76-\\uDDC4\\uDDC9-\\uDDCC\\uDDCE-\\uDDDA\\uDDDC\\uDDE0-\\uDE37\\uDE3E-\\uDEA8\\uDEAA-\\uDFD3\\uDFD6\\uDFD9-\\uDFFF]|\\uD805[\\uDC00-\\uDC4A\\uDC50-\\uDC59\\uDC5C\\uDC5E-\\uDCC5\\uDCC7-\\uDDC0\\uDDD8-\\uDE40\\uDE44-\\uDE5F\\uDE6D-\\uDEB8\\uDEBA-\\uDF3B\\uDF40-\\uDFFF]|\\uD806[\\uDC00-\\uDC3A\\uDC3C-\\uDD43\\uDD47-\\uDDE1\\uDDE3-\\uDE3E\\uDE47-\\uDE99\\uDE9D\\uDEA3-\\uDEFF\\uDF0A-\\uDFE0\\uDFE2-\\uDFFF]|\\uD807[\\uDC00-\\uDC40\\uDC46-\\uDC6F\\uDC72-\\uDEF6\\uDEF9-\\uDF42\\uDF50-\\uDFD4\\uDFF2-\\uDFFE]|[\\uD808\\uD80A\\uD80C-\\uD819\\uD81C-\\uD82E\\uD830-\\uD832\\uD837\\uD83F-\\uDBFF][\\uDC00-\\uDFFF]|\\uD809[\\uDC00-\\uDC6F\\uDC75-\\uDFFF]|\\uD80B[\\uDC00-\\uDFF0\\uDFF3-\\uDFFF]|\\uD81A[\\uDC00-\\uDE6D\\uDE70-\\uDEF4\\uDEF6-\\uDF36\\uDF40-\\uDF43\\uDF46-\\uDFFF]|\\uD81B[\\uDC00-\\uDD6C\\uDD70-\\uDE96\\uDE9B-\\uDFE1\\uDFE3-\\uDFFF]|\\uD82F[\\uDC00-\\uDC9B\\uDC9D\\uDC9E\\uDCA0-\\uDFFF]|\\uD833[\\uDCF0-\\uDCFF\\uDEB4-\\uDF4F\\uDFC4-\\uDFFF]|\\uD834[\\uDCF6-\\uDCFF\\uDD27\\uDD28\\uDD65-\\uDD69\\uDD6D-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDDEB-\\uDDFF\\uDE42-\\uDE44\\uDE46-\\uDEFF\\uDF57-\\uDFFF]|\\uD835[\\uDC00-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE8C-\\uDFFF]|\\uD838[\\uDC00-\\uDD4E\\uDD50-\\uDEFE\\uDF00-\\uDFFF]|\\uD839[\\uDC00-\\uDDFE\\uDE00-\\uDFFF]|\\uD83A[\\uDC00-\\uDD5D\\uDD60-\\uDFFF]|\\uD83B[\\uDC00-\\uDCAB\\uDCAD-\\uDCAF\\uDCB1-\\uDD2D\\uDD2F-\\uDEEF\\uDEF2-\\uDFFF]|\\uD83C[\\uDC2C-\\uDC2F\\uDC94-\\uDC9F\\uDCAF\\uDCB0\\uDCC0\\uDCD0\\uDCF6-\\uDD0C\\uDDAE-\\uDDE5\\uDE03-\\uDE0F\\uDE3C-\\uDE3F\\uDE49-\\uDE4F\\uDE52-\\uDE5F\\uDE66-\\uDEFF]|\\uD83D[\\uDED8-\\uDEDB\\uDEED-\\uDEEF\\uDEFD-\\uDEFF\\uDF77-\\uDF7A\\uDFDA-\\uDFDF\\uDFEC-\\uDFEF\\uDFF1-\\uDFFF]|\\uD83E[\\uDC0C-\\uDC0F\\uDC48-\\uDC4F\\uDC5A-\\uDC5F\\uDC88-\\uDC8F\\uDCAE\\uDCAF\\uDCBC-\\uDCBF\\uDCC2-\\uDCFF\\uDE54-\\uDE5F\\uDE6E\\uDE6F\\uDE7D-\\uDE7F\\uDE8A-\\uDE8E\\uDEC7-\\uDECD\\uDEDD\\uDEDE\\uDEEA-\\uDEEF\\uDEF9-\\uDEFF\\uDF93\\uDFF0-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])/;\nvar punctuation = edit(/^((?![*_])punctSpace)/, 'u').replace(/punctSpace/g, _punctuationOrSpace).getRegex();\n// GFM allows ~ inside strong and em for strikethrough\nvar _punctuationGfmStrongEm = /(?!~)(?:[!-\\/:-@\\[-`\\{-~\\xA1-\\xA9\\xAB\\xAC\\xAE-\\xB1\\xB4\\xB6-\\xB8\\xBB\\xBF\\xD7\\xF7\\u02C2-\\u02C5\\u02D2-\\u02DF\\u02E5-\\u02EB\\u02ED\\u02EF-\\u02FF\\u0375\\u037E\\u0384\\u0385\\u0387\\u03F6\\u0482\\u055A-\\u055F\\u0589\\u058A\\u058D-\\u058F\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0606-\\u060F\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u06DE\\u06E9\\u06FD\\u06FE\\u0700-\\u070D\\u07F6-\\u07F9\\u07FE\\u07FF\\u0830-\\u083E\\u085E\\u0888\\u0964\\u0965\\u0970\\u09F2\\u09F3\\u09FA\\u09FB\\u09FD\\u0A76\\u0AF0\\u0AF1\\u0B70\\u0BF3-\\u0BFA\\u0C77\\u0C7F\\u0C84\\u0D4F\\u0D79\\u0DF4\\u0E3F\\u0E4F\\u0E5A\\u0E5B\\u0F01-\\u0F17\\u0F1A-\\u0F1F\\u0F34\\u0F36\\u0F38\\u0F3A-\\u0F3D\\u0F85\\u0FBE-\\u0FC5\\u0FC7-\\u0FCC\\u0FCE-\\u0FDA\\u104A-\\u104F\\u109E\\u109F\\u10FB\\u1360-\\u1368\\u1390-\\u1399\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DB\\u1800-\\u180A\\u1940\\u1944\\u1945\\u19DE-\\u19FF\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B4E\\u1B4F\\u1B5A-\\u1B6A\\u1B74-\\u1B7F\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u1FBD\\u1FBF-\\u1FC1\\u1FCD-\\u1FCF\\u1FDD-\\u1FDF\\u1FED-\\u1FEF\\u1FFD\\u1FFE\\u2010-\\u2027\\u2030-\\u205E\\u207A-\\u207E\\u208A-\\u208E\\u20A0-\\u20C0\\u2100\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116-\\u2118\\u211E-\\u2123\\u2125\\u2127\\u2129\\u212E\\u213A\\u213B\\u2140-\\u2144\\u214A-\\u214D\\u214F\\u218A\\u218B\\u2190-\\u2429\\u2440-\\u244A\\u249C-\\u24E9\\u2500-\\u2775\\u2794-\\u2B73\\u2B76-\\u2B95\\u2B97-\\u2BFF\\u2CE5-\\u2CEA\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E5D\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u2FF0-\\u2FFF\\u3001-\\u3004\\u3008-\\u3020\\u3030\\u3036\\u3037\\u303D-\\u303F\\u309B\\u309C\\u30A0\\u30FB\\u3190\\u3191\\u3196-\\u319F\\u31C0-\\u31E5\\u31EF\\u3200-\\u321E\\u322A-\\u3247\\u3250\\u3260-\\u327F\\u328A-\\u32B0\\u32C0-\\u33FF\\u4DC0-\\u4DFF\\uA490-\\uA4C6\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA700-\\uA716\\uA720\\uA721\\uA789\\uA78A\\uA828-\\uA82B\\uA836-\\uA839\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAA77-\\uAA79\\uAADE\\uAADF\\uAAF0\\uAAF1\\uAB5B\\uAB6A\\uAB6B\\uABEB\\uFB29\\uFBB2-\\uFBC2\\uFD3E-\\uFD4F\\uFDCF\\uFDFC-\\uFDFF\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE66\\uFE68-\\uFE6B\\uFF01-\\uFF0F\\uFF1A-\\uFF20\\uFF3B-\\uFF40\\uFF5B-\\uFF65\\uFFE0-\\uFFE6\\uFFE8-\\uFFEE\\uFFFC\\uFFFD]|\\uD800[\\uDD00-\\uDD02\\uDD37-\\uDD3F\\uDD79-\\uDD89\\uDD8C-\\uDD8E\\uDD90-\\uDD9C\\uDDA0\\uDDD0-\\uDDFC\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDC77\\uDC78\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEC8\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD803[\\uDD6E\\uDD8E\\uDD8F\\uDEAD\\uDF55-\\uDF59\\uDF86-\\uDF89]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC8\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9\\uDFD4\\uDFD5\\uDFD7\\uDFD8]|\\uD805[\\uDC4B-\\uDC4F\\uDC5A\\uDC5B\\uDC5D\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDE60-\\uDE6C\\uDEB9\\uDF3C-\\uDF3F]|\\uD806[\\uDC3B\\uDD44-\\uDD46\\uDDE2\\uDE3F-\\uDE46\\uDE9A-\\uDE9C\\uDE9E-\\uDEA2\\uDF00-\\uDF09\\uDFE1]|\\uD807[\\uDC41-\\uDC45\\uDC70\\uDC71\\uDEF7\\uDEF8\\uDF43-\\uDF4F\\uDFD5-\\uDFF1\\uDFFF]|\\uD809[\\uDC70-\\uDC74]|\\uD80B[\\uDFF1\\uDFF2]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3F\\uDF44\\uDF45]|\\uD81B[\\uDD6D-\\uDD6F\\uDE97-\\uDE9A\\uDFE2]|\\uD82F[\\uDC9C\\uDC9F]|\\uD833[\\uDC00-\\uDCEF\\uDD00-\\uDEB3\\uDF50-\\uDFC3]|\\uD834[\\uDC00-\\uDCF5\\uDD00-\\uDD26\\uDD29-\\uDD64\\uDD6A-\\uDD6C\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDDEA\\uDE00-\\uDE41\\uDE45\\uDF00-\\uDF56]|\\uD835[\\uDEC1\\uDEDB\\uDEFB\\uDF15\\uDF35\\uDF4F\\uDF6F\\uDF89\\uDFA9\\uDFC3]|\\uD836[\\uDC00-\\uDDFF\\uDE37-\\uDE3A\\uDE6D-\\uDE74\\uDE76-\\uDE83\\uDE85-\\uDE8B]|\\uD838[\\uDD4F\\uDEFF]|\\uD839\\uDDFF|\\uD83A[\\uDD5E\\uDD5F]|\\uD83B[\\uDCAC\\uDCB0\\uDD2E\\uDEF0\\uDEF1]|\\uD83C[\\uDC00-\\uDC2B\\uDC30-\\uDC93\\uDCA0-\\uDCAE\\uDCB1-\\uDCBF\\uDCC1-\\uDCCF\\uDCD1-\\uDCF5\\uDD0D-\\uDDAD\\uDDE6-\\uDE02\\uDE10-\\uDE3B\\uDE40-\\uDE48\\uDE50\\uDE51\\uDE60-\\uDE65\\uDF00-\\uDFFF]|\\uD83D[\\uDC00-\\uDED7\\uDEDC-\\uDEEC\\uDEF0-\\uDEFC\\uDF00-\\uDF76\\uDF7B-\\uDFD9\\uDFE0-\\uDFEB\\uDFF0]|\\uD83E[\\uDC00-\\uDC0B\\uDC10-\\uDC47\\uDC50-\\uDC59\\uDC60-\\uDC87\\uDC90-\\uDCAD\\uDCB0-\\uDCBB\\uDCC0\\uDCC1\\uDD00-\\uDE53\\uDE60-\\uDE6D\\uDE70-\\uDE7C\\uDE80-\\uDE89\\uDE8F-\\uDEC6\\uDECE-\\uDEDC\\uDEDF-\\uDEE9\\uDEF0-\\uDEF8\\uDF00-\\uDF92\\uDF94-\\uDFEF])/;\nvar _punctuationOrSpaceGfmStrongEm = /(?!~)(?:[\\t-\\r -\\/:-@\\[-`\\{-~\\xA0-\\xA9\\xAB\\xAC\\xAE-\\xB1\\xB4\\xB6-\\xB8\\xBB\\xBF\\xD7\\xF7\\u02C2-\\u02C5\\u02D2-\\u02DF\\u02E5-\\u02EB\\u02ED\\u02EF-\\u02FF\\u0375\\u037E\\u0384\\u0385\\u0387\\u03F6\\u0482\\u055A-\\u055F\\u0589\\u058A\\u058D-\\u058F\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0606-\\u060F\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u06DE\\u06E9\\u06FD\\u06FE\\u0700-\\u070D\\u07F6-\\u07F9\\u07FE\\u07FF\\u0830-\\u083E\\u085E\\u0888\\u0964\\u0965\\u0970\\u09F2\\u09F3\\u09FA\\u09FB\\u09FD\\u0A76\\u0AF0\\u0AF1\\u0B70\\u0BF3-\\u0BFA\\u0C77\\u0C7F\\u0C84\\u0D4F\\u0D79\\u0DF4\\u0E3F\\u0E4F\\u0E5A\\u0E5B\\u0F01-\\u0F17\\u0F1A-\\u0F1F\\u0F34\\u0F36\\u0F38\\u0F3A-\\u0F3D\\u0F85\\u0FBE-\\u0FC5\\u0FC7-\\u0FCC\\u0FCE-\\u0FDA\\u104A-\\u104F\\u109E\\u109F\\u10FB\\u1360-\\u1368\\u1390-\\u1399\\u1400\\u166D\\u166E\\u1680\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DB\\u1800-\\u180A\\u1940\\u1944\\u1945\\u19DE-\\u19FF\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B4E\\u1B4F\\u1B5A-\\u1B6A\\u1B74-\\u1B7F\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u1FBD\\u1FBF-\\u1FC1\\u1FCD-\\u1FCF\\u1FDD-\\u1FDF\\u1FED-\\u1FEF\\u1FFD\\u1FFE\\u2000-\\u200A\\u2010-\\u2029\\u202F-\\u205F\\u207A-\\u207E\\u208A-\\u208E\\u20A0-\\u20C0\\u2100\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116-\\u2118\\u211E-\\u2123\\u2125\\u2127\\u2129\\u212E\\u213A\\u213B\\u2140-\\u2144\\u214A-\\u214D\\u214F\\u218A\\u218B\\u2190-\\u2429\\u2440-\\u244A\\u249C-\\u24E9\\u2500-\\u2775\\u2794-\\u2B73\\u2B76-\\u2B95\\u2B97-\\u2BFF\\u2CE5-\\u2CEA\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E5D\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u2FF0-\\u3004\\u3008-\\u3020\\u3030\\u3036\\u3037\\u303D-\\u303F\\u309B\\u309C\\u30A0\\u30FB\\u3190\\u3191\\u3196-\\u319F\\u31C0-\\u31E5\\u31EF\\u3200-\\u321E\\u322A-\\u3247\\u3250\\u3260-\\u327F\\u328A-\\u32B0\\u32C0-\\u33FF\\u4DC0-\\u4DFF\\uA490-\\uA4C6\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA700-\\uA716\\uA720\\uA721\\uA789\\uA78A\\uA828-\\uA82B\\uA836-\\uA839\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAA77-\\uAA79\\uAADE\\uAADF\\uAAF0\\uAAF1\\uAB5B\\uAB6A\\uAB6B\\uABEB\\uFB29\\uFBB2-\\uFBC2\\uFD3E-\\uFD4F\\uFDCF\\uFDFC-\\uFDFF\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE66\\uFE68-\\uFE6B\\uFEFF\\uFF01-\\uFF0F\\uFF1A-\\uFF20\\uFF3B-\\uFF40\\uFF5B-\\uFF65\\uFFE0-\\uFFE6\\uFFE8-\\uFFEE\\uFFFC\\uFFFD]|\\uD800[\\uDD00-\\uDD02\\uDD37-\\uDD3F\\uDD79-\\uDD89\\uDD8C-\\uDD8E\\uDD90-\\uDD9C\\uDDA0\\uDDD0-\\uDDFC\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDC77\\uDC78\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEC8\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD803[\\uDD6E\\uDD8E\\uDD8F\\uDEAD\\uDF55-\\uDF59\\uDF86-\\uDF89]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC8\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9\\uDFD4\\uDFD5\\uDFD7\\uDFD8]|\\uD805[\\uDC4B-\\uDC4F\\uDC5A\\uDC5B\\uDC5D\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDE60-\\uDE6C\\uDEB9\\uDF3C-\\uDF3F]|\\uD806[\\uDC3B\\uDD44-\\uDD46\\uDDE2\\uDE3F-\\uDE46\\uDE9A-\\uDE9C\\uDE9E-\\uDEA2\\uDF00-\\uDF09\\uDFE1]|\\uD807[\\uDC41-\\uDC45\\uDC70\\uDC71\\uDEF7\\uDEF8\\uDF43-\\uDF4F\\uDFD5-\\uDFF1\\uDFFF]|\\uD809[\\uDC70-\\uDC74]|\\uD80B[\\uDFF1\\uDFF2]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3F\\uDF44\\uDF45]|\\uD81B[\\uDD6D-\\uDD6F\\uDE97-\\uDE9A\\uDFE2]|\\uD82F[\\uDC9C\\uDC9F]|\\uD833[\\uDC00-\\uDCEF\\uDD00-\\uDEB3\\uDF50-\\uDFC3]|\\uD834[\\uDC00-\\uDCF5\\uDD00-\\uDD26\\uDD29-\\uDD64\\uDD6A-\\uDD6C\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDDEA\\uDE00-\\uDE41\\uDE45\\uDF00-\\uDF56]|\\uD835[\\uDEC1\\uDEDB\\uDEFB\\uDF15\\uDF35\\uDF4F\\uDF6F\\uDF89\\uDFA9\\uDFC3]|\\uD836[\\uDC00-\\uDDFF\\uDE37-\\uDE3A\\uDE6D-\\uDE74\\uDE76-\\uDE83\\uDE85-\\uDE8B]|\\uD838[\\uDD4F\\uDEFF]|\\uD839\\uDDFF|\\uD83A[\\uDD5E\\uDD5F]|\\uD83B[\\uDCAC\\uDCB0\\uDD2E\\uDEF0\\uDEF1]|\\uD83C[\\uDC00-\\uDC2B\\uDC30-\\uDC93\\uDCA0-\\uDCAE\\uDCB1-\\uDCBF\\uDCC1-\\uDCCF\\uDCD1-\\uDCF5\\uDD0D-\\uDDAD\\uDDE6-\\uDE02\\uDE10-\\uDE3B\\uDE40-\\uDE48\\uDE50\\uDE51\\uDE60-\\uDE65\\uDF00-\\uDFFF]|\\uD83D[\\uDC00-\\uDED7\\uDEDC-\\uDEEC\\uDEF0-\\uDEFC\\uDF00-\\uDF76\\uDF7B-\\uDFD9\\uDFE0-\\uDFEB\\uDFF0]|\\uD83E[\\uDC00-\\uDC0B\\uDC10-\\uDC47\\uDC50-\\uDC59\\uDC60-\\uDC87\\uDC90-\\uDCAD\\uDCB0-\\uDCBB\\uDCC0\\uDCC1\\uDD00-\\uDE53\\uDE60-\\uDE6D\\uDE70-\\uDE7C\\uDE80-\\uDE89\\uDE8F-\\uDEC6\\uDECE-\\uDEDC\\uDEDF-\\uDEE9\\uDEF0-\\uDEF8\\uDF00-\\uDF92\\uDF94-\\uDFEF])/;\nvar _notPunctuationOrSpaceGfmStrongEm = /(?:(?:[\\0-\\x08\\x0E-\\x1F0-9A-Za-z\\x7F-\\x9F\\xAA\\xAD\\xB2\\xB3\\xB5\\xB9\\xBA\\xBC-\\xBE\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376-\\u037D\\u037F-\\u0383\\u0386\\u0388-\\u03F5\\u03F7-\\u0481\\u0483-\\u0559\\u0560-\\u0588\\u058B\\u058C\\u0590-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7-\\u05F2\\u05F5-\\u0605\\u0610-\\u061A\\u061C\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DD\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u070E-\\u07F5\\u07FA-\\u07FD\\u0800-\\u082F\\u083F-\\u085D\\u085F-\\u0887\\u0889-\\u0963\\u0966-\\u096F\\u0971-\\u09F1\\u09F4-\\u09F9\\u09FC\\u09FE-\\u0A75\\u0A77-\\u0AEF\\u0AF2-\\u0B6F\\u0B71-\\u0BF2\\u0BFB-\\u0C76\\u0C78-\\u0C7E\\u0C80-\\u0C83\\u0C85-\\u0D4E\\u0D50-\\u0D78\\u0D7A-\\u0DF3\\u0DF5-\\u0E3E\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E5C-\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F33\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F84\\u0F86-\\u0FBD\\u0FC6\\u0FCD\\u0FDB-\\u1049\\u1050-\\u109D\\u10A0-\\u10FA\\u10FC-\\u135F\\u1369-\\u138F\\u139A-\\u13FF\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u169D-\\u16EA\\u16EE-\\u1734\\u1737-\\u17D3\\u17D7\\u17DC-\\u17FF\\u180B-\\u193F\\u1941-\\u1943\\u1946-\\u19DD\\u1A00-\\u1A1D\\u1A20-\\u1A9F\\u1AA7\\u1AAE-\\u1B4D\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BFB\\u1C00-\\u1C3A\\u1C40-\\u1C7D\\u1C80-\\u1CBF\\u1CC8-\\u1CD2\\u1CD4-\\u1FBC\\u1FBE\\u1FC2-\\u1FCC\\u1FD0-\\u1FDC\\u1FE0-\\u1FEC\\u1FF0-\\u1FFC\\u1FFF\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u2079\\u207F-\\u2089\\u208F-\\u209F\\u20C1-\\u20FF\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2150-\\u2189\\u218C-\\u218F\\u242A-\\u243F\\u244B-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2B74\\u2B75\\u2B96\\u2C00-\\u2CE4\\u2CEB-\\u2CF8\\u2CFD\\u2D00-\\u2D6F\\u2D71-\\u2DFF\\u2E2F\\u2E5E-\\u2E7F\\u2E9A\\u2EF4-\\u2EFF\\u2FD6-\\u2FEF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3040-\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u318F\\u3192-\\u3195\\u31A0-\\u31BF\\u31E6-\\u31EE\\u31F0-\\u31FF\\u321F-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\u3400-\\u4DBF\\u4E00-\\uA48F\\uA4C7-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA672\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA6F8-\\uA6FF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA827\\uA82C-\\uA835\\uA83A-\\uA873\\uA878-\\uA8CD\\uA8D0-\\uA8F7\\uA8FB\\uA8FD-\\uA92D\\uA930-\\uA95E\\uA960-\\uA9C0\\uA9CE-\\uA9DD\\uA9E0-\\uAA5B\\uAA60-\\uAA76\\uAA7A-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAB5A\\uAB5C-\\uAB69\\uAB6C-\\uABEA\\uABEC-\\uD7FF\\uE000-\\uFB28\\uFB2A-\\uFBB1\\uFBC3-\\uFD3D\\uFD50-\\uFDCE\\uFDD0-\\uFDFB\\uFE00-\\uFE0F\\uFE1A-\\uFE2F\\uFE53\\uFE67\\uFE6C-\\uFEFE\\uFF00\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFDF\\uFFE7\\uFFEF-\\uFFFB\\uFFFE\\uFFFF]|\\uD800[\\uDC00-\\uDCFF\\uDD03-\\uDD36\\uDD40-\\uDD78\\uDD8A\\uDD8B\\uDD8F\\uDD9D-\\uDD9F\\uDDA1-\\uDDCF\\uDDFD-\\uDF9E\\uDFA0-\\uDFCF\\uDFD1-\\uDFFF]|\\uD801[\\uDC00-\\uDD6E\\uDD70-\\uDFFF]|\\uD802[\\uDC00-\\uDC56\\uDC58-\\uDC76\\uDC79-\\uDD1E\\uDD20-\\uDD3E\\uDD40-\\uDE4F\\uDE59-\\uDE7E\\uDE80-\\uDEC7\\uDEC9-\\uDEEF\\uDEF7-\\uDF38\\uDF40-\\uDF98\\uDF9D-\\uDFFF]|\\uD803[\\uDC00-\\uDD6D\\uDD6F-\\uDD8D\\uDD90-\\uDEAC\\uDEAE-\\uDF54\\uDF5A-\\uDF85\\uDF8A-\\uDFFF]|\\uD804[\\uDC00-\\uDC46\\uDC4E-\\uDCBA\\uDCBD\\uDCC2-\\uDD3F\\uDD44-\\uDD73\\uDD76-\\uDDC4\\uDDC9-\\uDDCC\\uDDCE-\\uDDDA\\uDDDC\\uDDE0-\\uDE37\\uDE3E-\\uDEA8\\uDEAA-\\uDFD3\\uDFD6\\uDFD9-\\uDFFF]|\\uD805[\\uDC00-\\uDC4A\\uDC50-\\uDC59\\uDC5C\\uDC5E-\\uDCC5\\uDCC7-\\uDDC0\\uDDD8-\\uDE40\\uDE44-\\uDE5F\\uDE6D-\\uDEB8\\uDEBA-\\uDF3B\\uDF40-\\uDFFF]|\\uD806[\\uDC00-\\uDC3A\\uDC3C-\\uDD43\\uDD47-\\uDDE1\\uDDE3-\\uDE3E\\uDE47-\\uDE99\\uDE9D\\uDEA3-\\uDEFF\\uDF0A-\\uDFE0\\uDFE2-\\uDFFF]|\\uD807[\\uDC00-\\uDC40\\uDC46-\\uDC6F\\uDC72-\\uDEF6\\uDEF9-\\uDF42\\uDF50-\\uDFD4\\uDFF2-\\uDFFE]|[\\uD808\\uD80A\\uD80C-\\uD819\\uD81C-\\uD82E\\uD830-\\uD832\\uD837\\uD83F-\\uDBFF][\\uDC00-\\uDFFF]|\\uD809[\\uDC00-\\uDC6F\\uDC75-\\uDFFF]|\\uD80B[\\uDC00-\\uDFF0\\uDFF3-\\uDFFF]|\\uD81A[\\uDC00-\\uDE6D\\uDE70-\\uDEF4\\uDEF6-\\uDF36\\uDF40-\\uDF43\\uDF46-\\uDFFF]|\\uD81B[\\uDC00-\\uDD6C\\uDD70-\\uDE96\\uDE9B-\\uDFE1\\uDFE3-\\uDFFF]|\\uD82F[\\uDC00-\\uDC9B\\uDC9D\\uDC9E\\uDCA0-\\uDFFF]|\\uD833[\\uDCF0-\\uDCFF\\uDEB4-\\uDF4F\\uDFC4-\\uDFFF]|\\uD834[\\uDCF6-\\uDCFF\\uDD27\\uDD28\\uDD65-\\uDD69\\uDD6D-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDDEB-\\uDDFF\\uDE42-\\uDE44\\uDE46-\\uDEFF\\uDF57-\\uDFFF]|\\uD835[\\uDC00-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE8C-\\uDFFF]|\\uD838[\\uDC00-\\uDD4E\\uDD50-\\uDEFE\\uDF00-\\uDFFF]|\\uD839[\\uDC00-\\uDDFE\\uDE00-\\uDFFF]|\\uD83A[\\uDC00-\\uDD5D\\uDD60-\\uDFFF]|\\uD83B[\\uDC00-\\uDCAB\\uDCAD-\\uDCAF\\uDCB1-\\uDD2D\\uDD2F-\\uDEEF\\uDEF2-\\uDFFF]|\\uD83C[\\uDC2C-\\uDC2F\\uDC94-\\uDC9F\\uDCAF\\uDCB0\\uDCC0\\uDCD0\\uDCF6-\\uDD0C\\uDDAE-\\uDDE5\\uDE03-\\uDE0F\\uDE3C-\\uDE3F\\uDE49-\\uDE4F\\uDE52-\\uDE5F\\uDE66-\\uDEFF]|\\uD83D[\\uDED8-\\uDEDB\\uDEED-\\uDEEF\\uDEFD-\\uDEFF\\uDF77-\\uDF7A\\uDFDA-\\uDFDF\\uDFEC-\\uDFEF\\uDFF1-\\uDFFF]|\\uD83E[\\uDC0C-\\uDC0F\\uDC48-\\uDC4F\\uDC5A-\\uDC5F\\uDC88-\\uDC8F\\uDCAE\\uDCAF\\uDCBC-\\uDCBF\\uDCC2-\\uDCFF\\uDE54-\\uDE5F\\uDE6E\\uDE6F\\uDE7D-\\uDE7F\\uDE8A-\\uDE8E\\uDEC7-\\uDECD\\uDEDD\\uDEDE\\uDEEA-\\uDEEF\\uDEF9-\\uDEFF\\uDF93\\uDFF0-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])|~)/;\n// sequences em should skip over [title](link), `code`, <html>\nvar blockSkip = /\\[[^[\\]]*?\\]\\((?:\\\\.|[^\\\\\\(\\)]|\\((?:\\\\.|[^\\\\\\(\\)])*\\))*\\)|`[^`]*?`|<[^<>]*?>/g;\nvar emStrongLDelimCore = /^(?:\\*+(?:((?!\\*)punct)|[^\\s*]))|^_+(?:((?!_)punct)|([^\\s_]))/;\nvar emStrongLDelim = edit(emStrongLDelimCore, 'u').replace(/punct/g, _punctuation).getRegex();\nvar emStrongLDelimGfm = edit(emStrongLDelimCore, 'u').replace(/punct/g, _punctuationGfmStrongEm).getRegex();\nvar emStrongRDelimAstCore = '^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n+ '|[^*]+(?=[^*])' // Consume to delim\n+ '|(?!\\\\*)punct(\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n+ '|notPunctSpace(\\\\*+)(?!\\\\*)(?=punctSpace|$)' // (2) a***#, a*** can only be a Right Delimiter\n+ '|(?!\\\\*)punctSpace(\\\\*+)(?=notPunctSpace)' // (3) #***a, ***a can only be Left Delimiter\n+ '|[\\\\s](\\\\*+)(?!\\\\*)(?=punct)' // (4) ***# can only be Left Delimiter\n+ '|(?!\\\\*)punct(\\\\*+)(?!\\\\*)(?=punct)' // (5) #***# can be either Left or Right Delimiter\n+ '|notPunctSpace(\\\\*+)(?=notPunctSpace)'; // (6) a***a can be either Left or Right Delimiter\nvar emStrongRDelimAst = edit(emStrongRDelimAstCore, 'gu').replace(/notPunctSpace/g, _notPunctuationOrSpace).replace(/punctSpace/g, _punctuationOrSpace).replace(/punct/g, _punctuation).getRegex();\nvar emStrongRDelimAstGfm = edit(emStrongRDelimAstCore, 'gu').replace(/notPunctSpace/g, _notPunctuationOrSpaceGfmStrongEm).replace(/punctSpace/g, _punctuationOrSpaceGfmStrongEm).replace(/punct/g, _punctuationGfmStrongEm).getRegex();\n// (6) Not allowed for _\nvar emStrongRDelimUnd = edit('^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n+ '|[^_]+(?=[^_])' // Consume to delim\n+ '|(?!_)punct(_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n+ '|notPunctSpace(_+)(?!_)(?=punctSpace|$)' // (2) a___#, a___ can only be a Right Delimiter\n+ '|(?!_)punctSpace(_+)(?=notPunctSpace)' // (3) #___a, ___a can only be Left Delimiter\n+ '|[\\\\s](_+)(?!_)(?=punct)' // (4) ___# can only be Left Delimiter\n+ '|(?!_)punct(_+)(?!_)(?=punct)', 'gu') // (5) #___# can be either Left or Right Delimiter\n.replace(/notPunctSpace/g, _notPunctuationOrSpace).replace(/punctSpace/g, _punctuationOrSpace).replace(/punct/g, _punctuation).getRegex();\nvar anyPunctuation = edit(/\\\\(punct)/, 'gu').replace(/punct/g, _punctuation).getRegex();\nvar autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/).replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/).replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/).getRegex();\nvar _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\nvar tag = edit('^comment' + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n+ '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n+ '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n+ '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n+ '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n.replace('comment', _inlineComment).replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/).getRegex();\nvar _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\nvar link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/).replace('label', _inlineLabel).replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/).replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/).getRegex();\nvar reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/).replace('label', _inlineLabel).replace('ref', _blockLabel).getRegex();\nvar nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/).replace('ref', _blockLabel).getRegex();\nvar reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g').replace('reflink', reflink).replace('nolink', nolink).getRegex();\n/**\n * Normal Inline Grammar\n */\nvar inlineNormal = {\n  _backpedal: noopTest,\n  // only used for GFM url\n  anyPunctuation: anyPunctuation,\n  autolink: autolink,\n  blockSkip: blockSkip,\n  br: br,\n  code: inlineCode,\n  del: noopTest,\n  emStrongLDelim: emStrongLDelim,\n  emStrongRDelimAst: emStrongRDelimAst,\n  emStrongRDelimUnd: emStrongRDelimUnd,\n  escape: escape$1,\n  link: link,\n  nolink: nolink,\n  punctuation: punctuation,\n  reflink: reflink,\n  reflinkSearch: reflinkSearch,\n  tag: tag,\n  text: inlineText,\n  url: noopTest\n};\n/**\n * Pedantic Inline Grammar\n */\nvar inlinePedantic = _objectSpread(_objectSpread({}, inlineNormal), {}, {\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/).replace('label', _inlineLabel).getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/).replace('label', _inlineLabel).getRegex()\n});\n/**\n * GFM Inline Grammar\n */\nvar inlineGfm = _objectSpread(_objectSpread({}, inlineNormal), {}, {\n  emStrongRDelimAst: emStrongRDelimAstGfm,\n  emStrongLDelim: emStrongLDelimGfm,\n  url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, 'i').replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/).getRegex(),\n  _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])((?:\\\\.|[^\\\\])*?(?:\\\\.|[^\\s~\\\\]))\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n});\n/**\n * GFM + Line Breaks Inline Grammar\n */\nvar inlineBreaks = _objectSpread(_objectSpread({}, inlineGfm), {}, {\n  br: edit(br).replace('{2,}', '*').getRegex(),\n  text: edit(inlineGfm.text).replace('\\\\b_', '\\\\b_| {2,}\\\\n').replace(/\\{2,\\}/g, '*').getRegex()\n});\n/**\n * exports\n */\nvar block = {\n  normal: blockNormal,\n  gfm: blockGfm,\n  pedantic: blockPedantic\n};\nvar inline = {\n  normal: inlineNormal,\n  gfm: inlineGfm,\n  breaks: inlineBreaks,\n  pedantic: inlinePedantic\n};\n\n/**\n * Helpers\n */\nvar escapeReplacements = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\nvar getEscapeReplacement = function getEscapeReplacement(ch) {\n  return escapeReplacements[ch];\n};\nfunction escape(html, encode) {\n  if (encode) {\n    if (other.escapeTest.test(html)) {\n      return html.replace(other.escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (other.escapeTestNoEncode.test(html)) {\n      return html.replace(other.escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n  return html;\n}\nfunction cleanUrl(href) {\n  try {\n    href = encodeURI(href).replace(other.percentDecode, '%');\n  } catch (_unused) {\n    return null;\n  }\n  return href;\n}\nfunction splitCells(tableRow, count) {\n  var _cells$at;\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  var row = tableRow.replace(other.findPipe, function (match, offset, str) {\n      var escaped = false;\n      var curr = offset;\n      while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n      if (escaped) {\n        // odd number of slashes means | is escaped\n        // so we leave it alone\n        return '|';\n      } else {\n        // add space before unescaped |\n        return ' |';\n      }\n    }),\n    cells = row.split(other.splitPipe);\n  var i = 0;\n  // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n  if (!cells[0].trim()) {\n    cells.shift();\n  }\n  if (cells.length > 0 && !((_cells$at = cells.at(-1)) !== null && _cells$at !== void 0 && _cells$at.trim())) {\n    cells.pop();\n  }\n  if (count) {\n    if (cells.length > count) {\n      cells.splice(count);\n    } else {\n      while (cells.length < count) cells.push('');\n    }\n  }\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(other.slashPipe, '|');\n  }\n  return cells;\n}\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n  var l = str.length;\n  if (l === 0) {\n    return '';\n  }\n  // Length of suffix matching the invert condition.\n  var suffLen = 0;\n  // Step left until we fail to match the invert condition.\n  while (suffLen < l) {\n    var currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && true) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n  return str.slice(0, l - suffLen);\n}\nfunction findClosingBracket(str, b) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n  var level = 0;\n  for (var i = 0; i < str.length; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\nfunction outputLink(cap, link, raw, lexer, rules) {\n  var href = link.href;\n  var title = link.title || null;\n  var text = cap[1].replace(rules.other.outputLinkReplace, '$1');\n  if (cap[0].charAt(0) !== '!') {\n    lexer.state.inLink = true;\n    var token = {\n      type: 'link',\n      raw: raw,\n      href: href,\n      title: title,\n      text: text,\n      tokens: lexer.inlineTokens(text)\n    };\n    lexer.state.inLink = false;\n    return token;\n  }\n  return {\n    type: 'image',\n    raw: raw,\n    href: href,\n    title: title,\n    text: text\n  };\n}\nfunction indentCodeCompensation(raw, text, rules) {\n  var matchIndentToCode = raw.match(rules.other.indentCodeCompensation);\n  if (matchIndentToCode === null) {\n    return text;\n  }\n  var indentToCode = matchIndentToCode[1];\n  return text.split('\\n').map(function (node) {\n    var matchIndentInNode = node.match(rules.other.beginningSpace);\n    if (matchIndentInNode === null) {\n      return node;\n    }\n    var _matchIndentInNode = _slicedToArray(matchIndentInNode, 1),\n      indentInNode = _matchIndentInNode[0];\n    if (indentInNode.length >= indentToCode.length) {\n      return node.slice(indentToCode.length);\n    }\n    return node;\n  }).join('\\n');\n}\n/**\n * Tokenizer\n */\nvar _Tokenizer = /*#__PURE__*/function () {\n  // set by the lexer\n  function _Tokenizer(options) {\n    _classCallCheck(this, _Tokenizer);\n    _defineProperty(this, \"options\", void 0);\n    _defineProperty(this, \"rules\", void 0);\n    // set by the lexer\n    _defineProperty(this, \"lexer\", void 0);\n    this.options = options || _defaults;\n  }\n  return _createClass(_Tokenizer, [{\n    key: \"space\",\n    value: function space(src) {\n      var cap = this.rules.block.newline.exec(src);\n      if (cap && cap[0].length > 0) {\n        return {\n          type: 'space',\n          raw: cap[0]\n        };\n      }\n    }\n  }, {\n    key: \"code\",\n    value: function code(src) {\n      var cap = this.rules.block.code.exec(src);\n      if (cap) {\n        var text = cap[0].replace(this.rules.other.codeRemoveIndent, '');\n        return {\n          type: 'code',\n          raw: cap[0],\n          codeBlockStyle: 'indented',\n          text: !this.options.pedantic ? rtrim(text, '\\n') : text\n        };\n      }\n    }\n  }, {\n    key: \"fences\",\n    value: function fences(src) {\n      var cap = this.rules.block.fences.exec(src);\n      if (cap) {\n        var raw = cap[0];\n        var text = indentCodeCompensation(raw, cap[3] || '', this.rules);\n        return {\n          type: 'code',\n          raw: raw,\n          lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n          text: text\n        };\n      }\n    }\n  }, {\n    key: \"heading\",\n    value: function heading(src) {\n      var cap = this.rules.block.heading.exec(src);\n      if (cap) {\n        var text = cap[2].trim();\n        // remove trailing #s\n        if (this.rules.other.endingHash.test(text)) {\n          var trimmed = rtrim(text, '#');\n          if (this.options.pedantic) {\n            text = trimmed.trim();\n          } else if (!trimmed || this.rules.other.endingSpaceChar.test(trimmed)) {\n            // CommonMark requires space before trailing #s\n            text = trimmed.trim();\n          }\n        }\n        return {\n          type: 'heading',\n          raw: cap[0],\n          depth: cap[1].length,\n          text: text,\n          tokens: this.lexer.inline(text)\n        };\n      }\n    }\n  }, {\n    key: \"hr\",\n    value: function hr(src) {\n      var cap = this.rules.block.hr.exec(src);\n      if (cap) {\n        return {\n          type: 'hr',\n          raw: rtrim(cap[0], '\\n')\n        };\n      }\n    }\n  }, {\n    key: \"blockquote\",\n    value: function blockquote(src) {\n      var cap = this.rules.block.blockquote.exec(src);\n      if (cap) {\n        var lines = rtrim(cap[0], '\\n').split('\\n');\n        var raw = '';\n        var text = '';\n        var tokens = [];\n        while (lines.length > 0) {\n          var inBlockquote = false;\n          var currentLines = [];\n          var i = void 0;\n          for (i = 0; i < lines.length; i++) {\n            // get lines up to a continuation\n            if (this.rules.other.blockquoteStart.test(lines[i])) {\n              currentLines.push(lines[i]);\n              inBlockquote = true;\n            } else if (!inBlockquote) {\n              currentLines.push(lines[i]);\n            } else {\n              break;\n            }\n          }\n          lines = lines.slice(i);\n          var currentRaw = currentLines.join('\\n');\n          var currentText = currentRaw\n          // precede setext continuation with 4 spaces so it isn't a setext\n          .replace(this.rules.other.blockquoteSetextReplace, '\\n    $1').replace(this.rules.other.blockquoteSetextReplace2, '');\n          raw = raw ? \"\".concat(raw, \"\\n\").concat(currentRaw) : currentRaw;\n          text = text ? \"\".concat(text, \"\\n\").concat(currentText) : currentText;\n          // parse blockquote lines as top level tokens\n          // merge paragraphs if this is a continuation\n          var top = this.lexer.state.top;\n          this.lexer.state.top = true;\n          this.lexer.blockTokens(currentText, tokens, true);\n          this.lexer.state.top = top;\n          // if there is no continuation then we are done\n          if (lines.length === 0) {\n            break;\n          }\n          var lastToken = tokens.at(-1);\n          if ((lastToken === null || lastToken === void 0 ? void 0 : lastToken.type) === 'code') {\n            // blockquote continuation cannot be preceded by a code block\n            break;\n          } else if ((lastToken === null || lastToken === void 0 ? void 0 : lastToken.type) === 'blockquote') {\n            // include continuation in nested blockquote\n            var oldToken = lastToken;\n            var newText = oldToken.raw + '\\n' + lines.join('\\n');\n            var newToken = this.blockquote(newText);\n            tokens[tokens.length - 1] = newToken;\n            raw = raw.substring(0, raw.length - oldToken.raw.length) + newToken.raw;\n            text = text.substring(0, text.length - oldToken.text.length) + newToken.text;\n            break;\n          } else if ((lastToken === null || lastToken === void 0 ? void 0 : lastToken.type) === 'list') {\n            // include continuation in nested list\n            var _oldToken = lastToken;\n            var _newText = _oldToken.raw + '\\n' + lines.join('\\n');\n            var _newToken = this.list(_newText);\n            tokens[tokens.length - 1] = _newToken;\n            raw = raw.substring(0, raw.length - lastToken.raw.length) + _newToken.raw;\n            text = text.substring(0, text.length - _oldToken.raw.length) + _newToken.raw;\n            lines = _newText.substring(tokens.at(-1).raw.length).split('\\n');\n            continue;\n          }\n        }\n        return {\n          type: 'blockquote',\n          raw: raw,\n          tokens: tokens,\n          text: text\n        };\n      }\n    }\n  }, {\n    key: \"list\",\n    value: function list(src) {\n      var _this = this;\n      var cap = this.rules.block.list.exec(src);\n      if (cap) {\n        var bull = cap[1].trim();\n        var isordered = bull.length > 1;\n        var _list = {\n          type: 'list',\n          raw: '',\n          ordered: isordered,\n          start: isordered ? +bull.slice(0, -1) : '',\n          loose: false,\n          items: []\n        };\n        bull = isordered ? \"\\\\d{1,9}\\\\\".concat(bull.slice(-1)) : \"\\\\\".concat(bull);\n        if (this.options.pedantic) {\n          bull = isordered ? bull : '[*+-]';\n        }\n        // Get next list item\n        var itemRegex = this.rules.other.listItemRegex(bull);\n        var endsWithBlankLine = false;\n        // Check if current bullet point can start a new List Item\n        while (src) {\n          var endEarly = false;\n          var raw = '';\n          var itemContents = '';\n          if (!(cap = itemRegex.exec(src))) {\n            break;\n          }\n          if (this.rules.block.hr.test(src)) {\n            // End list if bullet was actually HR (possibly move into itemRegex?)\n            break;\n          }\n          raw = cap[0];\n          src = src.substring(raw.length);\n          var line = cap[2].split('\\n', 1)[0].replace(this.rules.other.listReplaceTabs, function (t) {\n            return ' '.repeat(3 * t.length);\n          });\n          var nextLine = src.split('\\n', 1)[0];\n          var blankLine = !line.trim();\n          var indent = 0;\n          if (this.options.pedantic) {\n            indent = 2;\n            itemContents = line.trimStart();\n          } else if (blankLine) {\n            indent = cap[1].length + 1;\n          } else {\n            indent = cap[2].search(this.rules.other.nonSpaceChar); // Find first non-space char\n            indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n            itemContents = line.slice(indent);\n            indent += cap[1].length;\n          }\n          if (blankLine && this.rules.other.blankLine.test(nextLine)) {\n            // Items begin with at most one blank line\n            raw += nextLine + '\\n';\n            src = src.substring(nextLine.length + 1);\n            endEarly = true;\n          }\n          if (!endEarly) {\n            var nextBulletRegex = this.rules.other.nextBulletRegex(indent);\n            var hrRegex = this.rules.other.hrRegex(indent);\n            var fencesBeginRegex = this.rules.other.fencesBeginRegex(indent);\n            var headingBeginRegex = this.rules.other.headingBeginRegex(indent);\n            var htmlBeginRegex = this.rules.other.htmlBeginRegex(indent);\n            // Check if following lines should be included in List Item\n            while (src) {\n              var rawLine = src.split('\\n', 1)[0];\n              var nextLineWithoutTabs = void 0;\n              nextLine = rawLine;\n              // Re-align to follow commonmark nesting rules\n              if (this.options.pedantic) {\n                nextLine = nextLine.replace(this.rules.other.listReplaceNesting, '  ');\n                nextLineWithoutTabs = nextLine;\n              } else {\n                nextLineWithoutTabs = nextLine.replace(this.rules.other.tabCharGlobal, '    ');\n              }\n              // End list item if found code fences\n              if (fencesBeginRegex.test(nextLine)) {\n                break;\n              }\n              // End list item if found start of new heading\n              if (headingBeginRegex.test(nextLine)) {\n                break;\n              }\n              // End list item if found start of html block\n              if (htmlBeginRegex.test(nextLine)) {\n                break;\n              }\n              // End list item if found start of new bullet\n              if (nextBulletRegex.test(nextLine)) {\n                break;\n              }\n              // Horizontal rule found\n              if (hrRegex.test(nextLine)) {\n                break;\n              }\n              if (nextLineWithoutTabs.search(this.rules.other.nonSpaceChar) >= indent || !nextLine.trim()) {\n                // Dedent if possible\n                itemContents += '\\n' + nextLineWithoutTabs.slice(indent);\n              } else {\n                // not enough indentation\n                if (blankLine) {\n                  break;\n                }\n                // paragraph continuation unless last line was a different block level element\n                if (line.replace(this.rules.other.tabCharGlobal, '    ').search(this.rules.other.nonSpaceChar) >= 4) {\n                  // indented code block\n                  break;\n                }\n                if (fencesBeginRegex.test(line)) {\n                  break;\n                }\n                if (headingBeginRegex.test(line)) {\n                  break;\n                }\n                if (hrRegex.test(line)) {\n                  break;\n                }\n                itemContents += '\\n' + nextLine;\n              }\n              if (!blankLine && !nextLine.trim()) {\n                // Check if current line is blank\n                blankLine = true;\n              }\n              raw += rawLine + '\\n';\n              src = src.substring(rawLine.length + 1);\n              line = nextLineWithoutTabs.slice(indent);\n            }\n          }\n          if (!_list.loose) {\n            // If the previous item ended with a blank line, the list is loose\n            if (endsWithBlankLine) {\n              _list.loose = true;\n            } else if (this.rules.other.doubleBlankLine.test(raw)) {\n              endsWithBlankLine = true;\n            }\n          }\n          var istask = null;\n          var ischecked = void 0;\n          // Check for task list items\n          if (this.options.gfm) {\n            istask = this.rules.other.listIsTask.exec(itemContents);\n            if (istask) {\n              ischecked = istask[0] !== '[ ] ';\n              itemContents = itemContents.replace(this.rules.other.listReplaceTask, '');\n            }\n          }\n          _list.items.push({\n            type: 'list_item',\n            raw: raw,\n            task: !!istask,\n            checked: ischecked,\n            loose: false,\n            text: itemContents,\n            tokens: []\n          });\n          _list.raw += raw;\n        }\n        // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n        var lastItem = _list.items.at(-1);\n        if (lastItem) {\n          lastItem.raw = lastItem.raw.trimEnd();\n          lastItem.text = lastItem.text.trimEnd();\n        } else {\n          // not a list since there were no items\n          return;\n        }\n        _list.raw = _list.raw.trimEnd();\n        // Item child tokens handled here at end because we needed to have the final item to trim it first\n        for (var i = 0; i < _list.items.length; i++) {\n          this.lexer.state.top = false;\n          _list.items[i].tokens = this.lexer.blockTokens(_list.items[i].text, []);\n          if (!_list.loose) {\n            // Check if list should be loose\n            var spacers = _list.items[i].tokens.filter(function (t) {\n              return t.type === 'space';\n            });\n            var hasMultipleLineBreaks = spacers.length > 0 && spacers.some(function (t) {\n              return _this.rules.other.anyLine.test(t.raw);\n            });\n            _list.loose = hasMultipleLineBreaks;\n          }\n        }\n        // Set all items to loose if list is loose\n        if (_list.loose) {\n          for (var _i = 0; _i < _list.items.length; _i++) {\n            _list.items[_i].loose = true;\n          }\n        }\n        return _list;\n      }\n    }\n  }, {\n    key: \"html\",\n    value: function html(src) {\n      var cap = this.rules.block.html.exec(src);\n      if (cap) {\n        var token = {\n          type: 'html',\n          block: true,\n          raw: cap[0],\n          pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n          text: cap[0]\n        };\n        return token;\n      }\n    }\n  }, {\n    key: \"def\",\n    value: function def(src) {\n      var cap = this.rules.block.def.exec(src);\n      if (cap) {\n        var _tag2 = cap[1].toLowerCase().replace(this.rules.other.multipleSpaceGlobal, ' ');\n        var href = cap[2] ? cap[2].replace(this.rules.other.hrefBrackets, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n        var title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n        return {\n          type: 'def',\n          tag: _tag2,\n          raw: cap[0],\n          href: href,\n          title: title\n        };\n      }\n    }\n  }, {\n    key: \"table\",\n    value: function table(src) {\n      var _cap$,\n        _this2 = this;\n      var cap = this.rules.block.table.exec(src);\n      if (!cap) {\n        return;\n      }\n      if (!this.rules.other.tableDelimiter.test(cap[2])) {\n        // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n        return;\n      }\n      var headers = splitCells(cap[1]);\n      var aligns = cap[2].replace(this.rules.other.tableAlignChars, '').split('|');\n      var rows = (_cap$ = cap[3]) !== null && _cap$ !== void 0 && _cap$.trim() ? cap[3].replace(this.rules.other.tableRowBlankLine, '').split('\\n') : [];\n      var item = {\n        type: 'table',\n        raw: cap[0],\n        header: [],\n        align: [],\n        rows: []\n      };\n      if (headers.length !== aligns.length) {\n        // header and align columns must be equal, rows can be different.\n        return;\n      }\n      var _iterator = _createForOfIteratorHelper(aligns),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var align = _step.value;\n          if (this.rules.other.tableAlignRight.test(align)) {\n            item.align.push('right');\n          } else if (this.rules.other.tableAlignCenter.test(align)) {\n            item.align.push('center');\n          } else if (this.rules.other.tableAlignLeft.test(align)) {\n            item.align.push('left');\n          } else {\n            item.align.push(null);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      for (var i = 0; i < headers.length; i++) {\n        item.header.push({\n          text: headers[i],\n          tokens: this.lexer.inline(headers[i]),\n          header: true,\n          align: item.align[i]\n        });\n      }\n      var _iterator2 = _createForOfIteratorHelper(rows),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var row = _step2.value;\n          item.rows.push(splitCells(row, item.header.length).map(function (cell, i) {\n            return {\n              text: cell,\n              tokens: _this2.lexer.inline(cell),\n              header: false,\n              align: item.align[i]\n            };\n          }));\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      return item;\n    }\n  }, {\n    key: \"lheading\",\n    value: function lheading(src) {\n      var cap = this.rules.block.lheading.exec(src);\n      if (cap) {\n        return {\n          type: 'heading',\n          raw: cap[0],\n          depth: cap[2].charAt(0) === '=' ? 1 : 2,\n          text: cap[1],\n          tokens: this.lexer.inline(cap[1])\n        };\n      }\n    }\n  }, {\n    key: \"paragraph\",\n    value: function paragraph(src) {\n      var cap = this.rules.block.paragraph.exec(src);\n      if (cap) {\n        var text = cap[1].charAt(cap[1].length - 1) === '\\n' ? cap[1].slice(0, -1) : cap[1];\n        return {\n          type: 'paragraph',\n          raw: cap[0],\n          text: text,\n          tokens: this.lexer.inline(text)\n        };\n      }\n    }\n  }, {\n    key: \"text\",\n    value: function text(src) {\n      var cap = this.rules.block.text.exec(src);\n      if (cap) {\n        return {\n          type: 'text',\n          raw: cap[0],\n          text: cap[0],\n          tokens: this.lexer.inline(cap[0])\n        };\n      }\n    }\n  }, {\n    key: \"escape\",\n    value: function escape(src) {\n      var cap = this.rules.inline.escape.exec(src);\n      if (cap) {\n        return {\n          type: 'escape',\n          raw: cap[0],\n          text: cap[1]\n        };\n      }\n    }\n  }, {\n    key: \"tag\",\n    value: function tag(src) {\n      var cap = this.rules.inline.tag.exec(src);\n      if (cap) {\n        if (!this.lexer.state.inLink && this.rules.other.startATag.test(cap[0])) {\n          this.lexer.state.inLink = true;\n        } else if (this.lexer.state.inLink && this.rules.other.endATag.test(cap[0])) {\n          this.lexer.state.inLink = false;\n        }\n        if (!this.lexer.state.inRawBlock && this.rules.other.startPreScriptTag.test(cap[0])) {\n          this.lexer.state.inRawBlock = true;\n        } else if (this.lexer.state.inRawBlock && this.rules.other.endPreScriptTag.test(cap[0])) {\n          this.lexer.state.inRawBlock = false;\n        }\n        return {\n          type: 'html',\n          raw: cap[0],\n          inLink: this.lexer.state.inLink,\n          inRawBlock: this.lexer.state.inRawBlock,\n          block: false,\n          text: cap[0]\n        };\n      }\n    }\n  }, {\n    key: \"link\",\n    value: function link(src) {\n      var cap = this.rules.inline.link.exec(src);\n      if (cap) {\n        var trimmedUrl = cap[2].trim();\n        if (!this.options.pedantic && this.rules.other.startAngleBracket.test(trimmedUrl)) {\n          // commonmark requires matching angle brackets\n          if (!this.rules.other.endAngleBracket.test(trimmedUrl)) {\n            return;\n          }\n          // ending angle bracket cannot be escaped\n          var rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n          if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n            return;\n          }\n        } else {\n          // find closing parenthesis\n          var lastParenIndex = findClosingBracket(cap[2], '()');\n          if (lastParenIndex > -1) {\n            var start = cap[0].indexOf('!') === 0 ? 5 : 4;\n            var linkLen = start + cap[1].length + lastParenIndex;\n            cap[2] = cap[2].substring(0, lastParenIndex);\n            cap[0] = cap[0].substring(0, linkLen).trim();\n            cap[3] = '';\n          }\n        }\n        var href = cap[2];\n        var title = '';\n        if (this.options.pedantic) {\n          // split pedantic href and title\n          var _link = this.rules.other.pedanticHrefTitle.exec(href);\n          if (_link) {\n            href = _link[1];\n            title = _link[3];\n          }\n        } else {\n          title = cap[3] ? cap[3].slice(1, -1) : '';\n        }\n        href = href.trim();\n        if (this.rules.other.startAngleBracket.test(href)) {\n          if (this.options.pedantic && !this.rules.other.endAngleBracket.test(trimmedUrl)) {\n            // pedantic allows starting angle bracket without ending angle bracket\n            href = href.slice(1);\n          } else {\n            href = href.slice(1, -1);\n          }\n        }\n        return outputLink(cap, {\n          href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n          title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title\n        }, cap[0], this.lexer, this.rules);\n      }\n    }\n  }, {\n    key: \"reflink\",\n    value: function reflink(src, links) {\n      var cap;\n      if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {\n        var linkString = (cap[2] || cap[1]).replace(this.rules.other.multipleSpaceGlobal, ' ');\n        var _link2 = links[linkString.toLowerCase()];\n        if (!_link2) {\n          var text = cap[0].charAt(0);\n          return {\n            type: 'text',\n            raw: text,\n            text: text\n          };\n        }\n        return outputLink(cap, _link2, cap[0], this.lexer, this.rules);\n      }\n    }\n  }, {\n    key: \"emStrong\",\n    value: function emStrong(src, maskedSrc) {\n      var prevChar = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n      var match = this.rules.inline.emStrongLDelim.exec(src);\n      if (!match) return;\n      // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n      if (match[3] && prevChar.match(this.rules.other.unicodeAlphaNumeric)) return;\n      var nextChar = match[1] || match[2] || '';\n      if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n        // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n        var lLength = _toConsumableArray(match[0]).length - 1;\n        var rDelim,\n          rLength,\n          delimTotal = lLength,\n          midDelimTotal = 0;\n        var endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n        endReg.lastIndex = 0;\n        // Clip maskedSrc to same section of string as src (move to lexer?)\n        maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n        while ((match = endReg.exec(maskedSrc)) != null) {\n          rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n          if (!rDelim) continue; // skip single * in __abc*abc__\n          rLength = _toConsumableArray(rDelim).length;\n          if (match[3] || match[4]) {\n            // found another Left Delim\n            delimTotal += rLength;\n            continue;\n          } else if (match[5] || match[6]) {\n            // either Left or Right Delim\n            if (lLength % 3 && !((lLength + rLength) % 3)) {\n              midDelimTotal += rLength;\n              continue; // CommonMark Emphasis Rules 9-10\n            }\n          }\n\n          delimTotal -= rLength;\n          if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n          // Remove extra characters. *a*** -> *a*\n          rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n          // char length can be >1 for unicode characters;\n          var lastCharLength = _toConsumableArray(match[0])[0].length;\n          var raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n          // Create `em` if smallest delimiter has odd char count. *a***\n          if (Math.min(lLength, rLength) % 2) {\n            var _text = raw.slice(1, -1);\n            return {\n              type: 'em',\n              raw: raw,\n              text: _text,\n              tokens: this.lexer.inlineTokens(_text)\n            };\n          }\n          // Create 'strong' if smallest delimiter has even char count. **a***\n          var text = raw.slice(2, -2);\n          return {\n            type: 'strong',\n            raw: raw,\n            text: text,\n            tokens: this.lexer.inlineTokens(text)\n          };\n        }\n      }\n    }\n  }, {\n    key: \"codespan\",\n    value: function codespan(src) {\n      var cap = this.rules.inline.code.exec(src);\n      if (cap) {\n        var text = cap[2].replace(this.rules.other.newLineCharGlobal, ' ');\n        var hasNonSpaceChars = this.rules.other.nonSpaceChar.test(text);\n        var hasSpaceCharsOnBothEnds = this.rules.other.startingSpaceChar.test(text) && this.rules.other.endingSpaceChar.test(text);\n        if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n          text = text.substring(1, text.length - 1);\n        }\n        return {\n          type: 'codespan',\n          raw: cap[0],\n          text: text\n        };\n      }\n    }\n  }, {\n    key: \"br\",\n    value: function br(src) {\n      var cap = this.rules.inline.br.exec(src);\n      if (cap) {\n        return {\n          type: 'br',\n          raw: cap[0]\n        };\n      }\n    }\n  }, {\n    key: \"del\",\n    value: function del(src) {\n      var cap = this.rules.inline.del.exec(src);\n      if (cap) {\n        return {\n          type: 'del',\n          raw: cap[0],\n          text: cap[2],\n          tokens: this.lexer.inlineTokens(cap[2])\n        };\n      }\n    }\n  }, {\n    key: \"autolink\",\n    value: function autolink(src) {\n      var cap = this.rules.inline.autolink.exec(src);\n      if (cap) {\n        var text, href;\n        if (cap[2] === '@') {\n          text = cap[1];\n          href = 'mailto:' + text;\n        } else {\n          text = cap[1];\n          href = text;\n        }\n        return {\n          type: 'link',\n          raw: cap[0],\n          text: text,\n          href: href,\n          tokens: [{\n            type: 'text',\n            raw: text,\n            text: text\n          }]\n        };\n      }\n    }\n  }, {\n    key: \"url\",\n    value: function url(src) {\n      var cap;\n      if (cap = this.rules.inline.url.exec(src)) {\n        var text, href;\n        if (cap[2] === '@') {\n          text = cap[0];\n          href = 'mailto:' + text;\n        } else {\n          // do extended autolink path validation\n          var prevCapZero;\n          do {\n            var _this$rules$inline$_b, _this$rules$inline$_b2;\n            prevCapZero = cap[0];\n            cap[0] = (_this$rules$inline$_b = (_this$rules$inline$_b2 = this.rules.inline._backpedal.exec(cap[0])) === null || _this$rules$inline$_b2 === void 0 ? void 0 : _this$rules$inline$_b2[0]) !== null && _this$rules$inline$_b !== void 0 ? _this$rules$inline$_b : '';\n          } while (prevCapZero !== cap[0]);\n          text = cap[0];\n          if (cap[1] === 'www.') {\n            href = 'http://' + cap[0];\n          } else {\n            href = cap[0];\n          }\n        }\n        return {\n          type: 'link',\n          raw: cap[0],\n          text: text,\n          href: href,\n          tokens: [{\n            type: 'text',\n            raw: text,\n            text: text\n          }]\n        };\n      }\n    }\n  }, {\n    key: \"inlineText\",\n    value: function inlineText(src) {\n      var cap = this.rules.inline.text.exec(src);\n      if (cap) {\n        var escaped = this.lexer.state.inRawBlock;\n        return {\n          type: 'text',\n          raw: cap[0],\n          text: cap[0],\n          escaped: escaped\n        };\n      }\n    }\n  }]);\n}();\n/**\n * Block Lexer\n */\nvar _Lexer = /*#__PURE__*/function () {\n  function _Lexer(options) {\n    _classCallCheck(this, _Lexer);\n    _defineProperty(this, \"tokens\", void 0);\n    _defineProperty(this, \"options\", void 0);\n    _defineProperty(this, \"state\", void 0);\n    _defineProperty(this, \"tokenizer\", void 0);\n    _defineProperty(this, \"inlineQueue\", void 0);\n    // TokenList cannot be created in one go\n    this.tokens = [];\n    this.tokens.links = Object.create(null);\n    this.options = options || _defaults;\n    this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true\n    };\n    var rules = {\n      other: other,\n      block: block.normal,\n      inline: inline.normal\n    };\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n  /**\n   * Expose Rules\n   */\n  return _createClass(_Lexer, [{\n    key: \"lex\",\n    value:\n    /**\n     * Preprocessing\n     */\n    function lex(src) {\n      src = src.replace(other.carriageReturn, '\\n');\n      this.blockTokens(src, this.tokens);\n      for (var i = 0; i < this.inlineQueue.length; i++) {\n        var next = this.inlineQueue[i];\n        this.inlineTokens(next.src, next.tokens);\n      }\n      this.inlineQueue = [];\n      return this.tokens;\n    }\n  }, {\n    key: \"blockTokens\",\n    value: function blockTokens(src) {\n      var _this3 = this;\n      var tokens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var lastParagraphClipped = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      if (this.options.pedantic) {\n        src = src.replace(other.tabCharGlobal, '    ').replace(other.spaceLine, '');\n      }\n      var _loop = function _loop() {\n          var _this3$options$extens, _this3$options$extens2;\n          var token;\n          if ((_this3$options$extens = _this3.options.extensions) !== null && _this3$options$extens !== void 0 && (_this3$options$extens = _this3$options$extens.block) !== null && _this3$options$extens !== void 0 && _this3$options$extens.some(function (extTokenizer) {\n            if (token = extTokenizer.call({\n              lexer: _this3\n            }, src, tokens)) {\n              src = src.substring(token.raw.length);\n              tokens.push(token);\n              return true;\n            }\n            return false;\n          })) {\n            return 0; // continue\n          }\n          // newline\n          if (token = _this3.tokenizer.space(src)) {\n            src = src.substring(token.raw.length);\n            var lastToken = tokens.at(-1);\n            if (token.raw.length === 1 && lastToken !== undefined) {\n              // if there's a single \\n as a spacer, it's terminating the last line,\n              // so move it there so that we don't get unnecessary paragraph tags\n              lastToken.raw += '\\n';\n            } else {\n              tokens.push(token);\n            }\n            return 0; // continue\n          }\n          // code\n          if (token = _this3.tokenizer.code(src)) {\n            src = src.substring(token.raw.length);\n            var _lastToken = tokens.at(-1);\n            // An indented code block cannot interrupt a paragraph.\n            if ((_lastToken === null || _lastToken === void 0 ? void 0 : _lastToken.type) === 'paragraph' || (_lastToken === null || _lastToken === void 0 ? void 0 : _lastToken.type) === 'text') {\n              _lastToken.raw += '\\n' + token.raw;\n              _lastToken.text += '\\n' + token.text;\n              _this3.inlineQueue.at(-1).src = _lastToken.text;\n            } else {\n              tokens.push(token);\n            }\n            return 0; // continue\n          }\n          // fences\n          if (token = _this3.tokenizer.fences(src)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return 0; // continue\n          }\n          // heading\n          if (token = _this3.tokenizer.heading(src)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return 0; // continue\n          }\n          // hr\n          if (token = _this3.tokenizer.hr(src)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return 0; // continue\n          }\n          // blockquote\n          if (token = _this3.tokenizer.blockquote(src)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return 0; // continue\n          }\n          // list\n          if (token = _this3.tokenizer.list(src)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return 0; // continue\n          }\n          // html\n          if (token = _this3.tokenizer.html(src)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return 0; // continue\n          }\n          // def\n          if (token = _this3.tokenizer.def(src)) {\n            src = src.substring(token.raw.length);\n            var _lastToken2 = tokens.at(-1);\n            if ((_lastToken2 === null || _lastToken2 === void 0 ? void 0 : _lastToken2.type) === 'paragraph' || (_lastToken2 === null || _lastToken2 === void 0 ? void 0 : _lastToken2.type) === 'text') {\n              _lastToken2.raw += '\\n' + token.raw;\n              _lastToken2.text += '\\n' + token.raw;\n              _this3.inlineQueue.at(-1).src = _lastToken2.text;\n            } else if (!_this3.tokens.links[token.tag]) {\n              _this3.tokens.links[token.tag] = {\n                href: token.href,\n                title: token.title\n              };\n            }\n            return 0; // continue\n          }\n          // table (gfm)\n          if (token = _this3.tokenizer.table(src)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return 0; // continue\n          }\n          // lheading\n          if (token = _this3.tokenizer.lheading(src)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return 0; // continue\n          }\n          // top-level paragraph\n          // prevent paragraph consuming extensions by clipping 'src' to extension start\n          var cutSrc = src;\n          if ((_this3$options$extens2 = _this3.options.extensions) !== null && _this3$options$extens2 !== void 0 && _this3$options$extens2.startBlock) {\n            var startIndex = Infinity;\n            var tempSrc = src.slice(1);\n            var tempStart;\n            _this3.options.extensions.startBlock.forEach(function (getStartIndex) {\n              tempStart = getStartIndex.call({\n                lexer: _this3\n              }, tempSrc);\n              if (typeof tempStart === 'number' && tempStart >= 0) {\n                startIndex = Math.min(startIndex, tempStart);\n              }\n            });\n            if (startIndex < Infinity && startIndex >= 0) {\n              cutSrc = src.substring(0, startIndex + 1);\n            }\n          }\n          if (_this3.state.top && (token = _this3.tokenizer.paragraph(cutSrc))) {\n            var _lastToken3 = tokens.at(-1);\n            if (lastParagraphClipped && (_lastToken3 === null || _lastToken3 === void 0 ? void 0 : _lastToken3.type) === 'paragraph') {\n              _lastToken3.raw += '\\n' + token.raw;\n              _lastToken3.text += '\\n' + token.text;\n              _this3.inlineQueue.pop();\n              _this3.inlineQueue.at(-1).src = _lastToken3.text;\n            } else {\n              tokens.push(token);\n            }\n            lastParagraphClipped = cutSrc.length !== src.length;\n            src = src.substring(token.raw.length);\n            return 0; // continue\n          }\n          // text\n          if (token = _this3.tokenizer.text(src)) {\n            src = src.substring(token.raw.length);\n            var _lastToken4 = tokens.at(-1);\n            if ((_lastToken4 === null || _lastToken4 === void 0 ? void 0 : _lastToken4.type) === 'text') {\n              _lastToken4.raw += '\\n' + token.raw;\n              _lastToken4.text += '\\n' + token.text;\n              _this3.inlineQueue.pop();\n              _this3.inlineQueue.at(-1).src = _lastToken4.text;\n            } else {\n              tokens.push(token);\n            }\n            return 0; // continue\n          }\n          if (src) {\n            var errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n            if (_this3.options.silent) {\n              console.error(errMsg);\n              return 1; // break\n            } else {\n              throw new Error(errMsg);\n            }\n          }\n        },\n        _ret;\n      while (src) {\n        _ret = _loop();\n        if (_ret === 0) continue;\n        if (_ret === 1) break;\n      }\n      this.state.top = true;\n      return tokens;\n    }\n  }, {\n    key: \"inline\",\n    value: function inline(src) {\n      var tokens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      this.inlineQueue.push({\n        src: src,\n        tokens: tokens\n      });\n      return tokens;\n    }\n    /**\n     * Lexing/Compiling\n     */\n  }, {\n    key: \"inlineTokens\",\n    value: function inlineTokens(src) {\n      var _this4 = this;\n      var tokens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      // String with links masked to avoid interference with em and strong\n      var maskedSrc = src;\n      var match = null;\n      // Mask out reflinks\n      if (this.tokens.links) {\n        var links = Object.keys(this.tokens.links);\n        if (links.length > 0) {\n          while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n            if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n              maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n            }\n          }\n        }\n      }\n      // Mask out other blocks\n      while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n        maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n      }\n      // Mask out escaped characters\n      while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n        maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n      }\n      var keepPrevChar = false;\n      var prevChar = '';\n      var _loop2 = function _loop2() {\n          var _this4$options$extens, _this4$options$extens2;\n          if (!keepPrevChar) {\n            prevChar = '';\n          }\n          keepPrevChar = false;\n          var token;\n          // extensions\n          if ((_this4$options$extens = _this4.options.extensions) !== null && _this4$options$extens !== void 0 && (_this4$options$extens = _this4$options$extens.inline) !== null && _this4$options$extens !== void 0 && _this4$options$extens.some(function (extTokenizer) {\n            if (token = extTokenizer.call({\n              lexer: _this4\n            }, src, tokens)) {\n              src = src.substring(token.raw.length);\n              tokens.push(token);\n              return true;\n            }\n            return false;\n          })) {\n            return 0; // continue\n          }\n          // escape\n          if (token = _this4.tokenizer.escape(src)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return 0; // continue\n          }\n          // tag\n          if (token = _this4.tokenizer.tag(src)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return 0; // continue\n          }\n          // link\n          if (token = _this4.tokenizer.link(src)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return 0; // continue\n          }\n          // reflink, nolink\n          if (token = _this4.tokenizer.reflink(src, _this4.tokens.links)) {\n            src = src.substring(token.raw.length);\n            var lastToken = tokens.at(-1);\n            if (token.type === 'text' && (lastToken === null || lastToken === void 0 ? void 0 : lastToken.type) === 'text') {\n              lastToken.raw += token.raw;\n              lastToken.text += token.text;\n            } else {\n              tokens.push(token);\n            }\n            return 0; // continue\n          }\n          // em & strong\n          if (token = _this4.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return 0; // continue\n          }\n          // code\n          if (token = _this4.tokenizer.codespan(src)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return 0; // continue\n          }\n          // br\n          if (token = _this4.tokenizer.br(src)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return 0; // continue\n          }\n          // del (gfm)\n          if (token = _this4.tokenizer.del(src)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return 0; // continue\n          }\n          // autolink\n          if (token = _this4.tokenizer.autolink(src)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return 0; // continue\n          }\n          // url (gfm)\n          if (!_this4.state.inLink && (token = _this4.tokenizer.url(src))) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return 0; // continue\n          }\n          // text\n          // prevent inlineText consuming extensions by clipping 'src' to extension start\n          var cutSrc = src;\n          if ((_this4$options$extens2 = _this4.options.extensions) !== null && _this4$options$extens2 !== void 0 && _this4$options$extens2.startInline) {\n            var startIndex = Infinity;\n            var tempSrc = src.slice(1);\n            var tempStart;\n            _this4.options.extensions.startInline.forEach(function (getStartIndex) {\n              tempStart = getStartIndex.call({\n                lexer: _this4\n              }, tempSrc);\n              if (typeof tempStart === 'number' && tempStart >= 0) {\n                startIndex = Math.min(startIndex, tempStart);\n              }\n            });\n            if (startIndex < Infinity && startIndex >= 0) {\n              cutSrc = src.substring(0, startIndex + 1);\n            }\n          }\n          if (token = _this4.tokenizer.inlineText(cutSrc)) {\n            src = src.substring(token.raw.length);\n            if (token.raw.slice(-1) !== '_') {\n              // Track prevChar before string of ____ started\n              prevChar = token.raw.slice(-1);\n            }\n            keepPrevChar = true;\n            var _lastToken5 = tokens.at(-1);\n            if ((_lastToken5 === null || _lastToken5 === void 0 ? void 0 : _lastToken5.type) === 'text') {\n              _lastToken5.raw += token.raw;\n              _lastToken5.text += token.text;\n            } else {\n              tokens.push(token);\n            }\n            return 0; // continue\n          }\n          if (src) {\n            var errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n            if (_this4.options.silent) {\n              console.error(errMsg);\n              return 1; // break\n            } else {\n              throw new Error(errMsg);\n            }\n          }\n        },\n        _ret2;\n      while (src) {\n        _ret2 = _loop2();\n        if (_ret2 === 0) continue;\n        if (_ret2 === 1) break;\n      }\n      return tokens;\n    }\n  }], [{\n    key: \"rules\",\n    get: function get() {\n      return {\n        block: block,\n        inline: inline\n      };\n    }\n    /**\n     * Static Lex Method\n     */\n  }, {\n    key: \"lex\",\n    value: function lex(src, options) {\n      var lexer = new _Lexer(options);\n      return lexer.lex(src);\n    }\n    /**\n     * Static Lex Inline Method\n     */\n  }, {\n    key: \"lexInline\",\n    value: function lexInline(src, options) {\n      var lexer = new _Lexer(options);\n      return lexer.inlineTokens(src);\n    }\n  }]);\n}();\n/**\n * Renderer\n */\nvar _Renderer = /*#__PURE__*/function () {\n  // set by the parser\n  function _Renderer(options) {\n    _classCallCheck(this, _Renderer);\n    _defineProperty(this, \"options\", void 0);\n    _defineProperty(this, \"parser\", void 0);\n    this.options = options || _defaults;\n  }\n  return _createClass(_Renderer, [{\n    key: \"space\",\n    value: function space(token) {\n      return '';\n    }\n  }, {\n    key: \"code\",\n    value: function code(_ref) {\n      var _match;\n      var text = _ref.text,\n        lang = _ref.lang,\n        escaped = _ref.escaped;\n      var langString = (_match = (lang || '').match(other.notSpaceStart)) === null || _match === void 0 ? void 0 : _match[0];\n      var code = text.replace(other.endingNewline, '') + '\\n';\n      if (!langString) {\n        return '<pre><code>' + (escaped ? code : escape(code, true)) + '</code></pre>\\n';\n      }\n      return '<pre><code class=\"language-' + escape(langString) + '\">' + (escaped ? code : escape(code, true)) + '</code></pre>\\n';\n    }\n  }, {\n    key: \"blockquote\",\n    value: function blockquote(_ref2) {\n      var tokens = _ref2.tokens;\n      var body = this.parser.parse(tokens);\n      return \"<blockquote>\\n\".concat(body, \"</blockquote>\\n\");\n    }\n  }, {\n    key: \"html\",\n    value: function html(_ref3) {\n      var text = _ref3.text;\n      return text;\n    }\n  }, {\n    key: \"heading\",\n    value: function heading(_ref4) {\n      var tokens = _ref4.tokens,\n        depth = _ref4.depth;\n      return \"<h\".concat(depth, \">\").concat(this.parser.parseInline(tokens), \"</h\").concat(depth, \">\\n\");\n    }\n  }, {\n    key: \"hr\",\n    value: function hr(token) {\n      return '<hr>\\n';\n    }\n  }, {\n    key: \"list\",\n    value: function list(token) {\n      var ordered = token.ordered;\n      var start = token.start;\n      var body = '';\n      for (var j = 0; j < token.items.length; j++) {\n        var item = token.items[j];\n        body += this.listitem(item);\n      }\n      var type = ordered ? 'ol' : 'ul';\n      var startAttr = ordered && start !== 1 ? ' start=\"' + start + '\"' : '';\n      return '<' + type + startAttr + '>\\n' + body + '</' + type + '>\\n';\n    }\n  }, {\n    key: \"listitem\",\n    value: function listitem(item) {\n      var itemBody = '';\n      if (item.task) {\n        var checkbox = this.checkbox({\n          checked: !!item.checked\n        });\n        if (item.loose) {\n          var _item$tokens$;\n          if (((_item$tokens$ = item.tokens[0]) === null || _item$tokens$ === void 0 ? void 0 : _item$tokens$.type) === 'paragraph') {\n            item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n            if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n              item.tokens[0].tokens[0].text = checkbox + ' ' + escape(item.tokens[0].tokens[0].text);\n              item.tokens[0].tokens[0].escaped = true;\n            }\n          } else {\n            item.tokens.unshift({\n              type: 'text',\n              raw: checkbox + ' ',\n              text: checkbox + ' ',\n              escaped: true\n            });\n          }\n        } else {\n          itemBody += checkbox + ' ';\n        }\n      }\n      itemBody += this.parser.parse(item.tokens, !!item.loose);\n      return \"<li>\".concat(itemBody, \"</li>\\n\");\n    }\n  }, {\n    key: \"checkbox\",\n    value: function checkbox(_ref5) {\n      var checked = _ref5.checked;\n      return '<input ' + (checked ? 'checked=\"\" ' : '') + 'disabled=\"\" type=\"checkbox\">';\n    }\n  }, {\n    key: \"paragraph\",\n    value: function paragraph(_ref6) {\n      var tokens = _ref6.tokens;\n      return \"<p>\".concat(this.parser.parseInline(tokens), \"</p>\\n\");\n    }\n  }, {\n    key: \"table\",\n    value: function table(token) {\n      var header = '';\n      // header\n      var cell = '';\n      for (var j = 0; j < token.header.length; j++) {\n        cell += this.tablecell(token.header[j]);\n      }\n      header += this.tablerow({\n        text: cell\n      });\n      var body = '';\n      for (var _j = 0; _j < token.rows.length; _j++) {\n        var row = token.rows[_j];\n        cell = '';\n        for (var k = 0; k < row.length; k++) {\n          cell += this.tablecell(row[k]);\n        }\n        body += this.tablerow({\n          text: cell\n        });\n      }\n      if (body) body = \"<tbody>\".concat(body, \"</tbody>\");\n      return '<table>\\n' + '<thead>\\n' + header + '</thead>\\n' + body + '</table>\\n';\n    }\n  }, {\n    key: \"tablerow\",\n    value: function tablerow(_ref7) {\n      var text = _ref7.text;\n      return \"<tr>\\n\".concat(text, \"</tr>\\n\");\n    }\n  }, {\n    key: \"tablecell\",\n    value: function tablecell(token) {\n      var content = this.parser.parseInline(token.tokens);\n      var type = token.header ? 'th' : 'td';\n      var tag = token.align ? \"<\".concat(type, \" align=\\\"\").concat(token.align, \"\\\">\") : \"<\".concat(type, \">\");\n      return tag + content + \"</\".concat(type, \">\\n\");\n    }\n    /**\n     * span level renderer\n     */\n  }, {\n    key: \"strong\",\n    value: function strong(_ref8) {\n      var tokens = _ref8.tokens;\n      return \"<strong>\".concat(this.parser.parseInline(tokens), \"</strong>\");\n    }\n  }, {\n    key: \"em\",\n    value: function em(_ref9) {\n      var tokens = _ref9.tokens;\n      return \"<em>\".concat(this.parser.parseInline(tokens), \"</em>\");\n    }\n  }, {\n    key: \"codespan\",\n    value: function codespan(_ref10) {\n      var text = _ref10.text;\n      return \"<code>\".concat(escape(text, true), \"</code>\");\n    }\n  }, {\n    key: \"br\",\n    value: function br(token) {\n      return '<br>';\n    }\n  }, {\n    key: \"del\",\n    value: function del(_ref11) {\n      var tokens = _ref11.tokens;\n      return \"<del>\".concat(this.parser.parseInline(tokens), \"</del>\");\n    }\n  }, {\n    key: \"link\",\n    value: function link(_ref12) {\n      var href = _ref12.href,\n        title = _ref12.title,\n        tokens = _ref12.tokens;\n      var text = this.parser.parseInline(tokens);\n      var cleanHref = cleanUrl(href);\n      if (cleanHref === null) {\n        return text;\n      }\n      href = cleanHref;\n      var out = '<a href=\"' + href + '\"';\n      if (title) {\n        out += ' title=\"' + escape(title) + '\"';\n      }\n      out += '>' + text + '</a>';\n      return out;\n    }\n  }, {\n    key: \"image\",\n    value: function image(_ref13) {\n      var href = _ref13.href,\n        title = _ref13.title,\n        text = _ref13.text;\n      var cleanHref = cleanUrl(href);\n      if (cleanHref === null) {\n        return escape(text);\n      }\n      href = cleanHref;\n      var out = \"<img src=\\\"\".concat(href, \"\\\" alt=\\\"\").concat(text, \"\\\"\");\n      if (title) {\n        out += \" title=\\\"\".concat(escape(title), \"\\\"\");\n      }\n      out += '>';\n      return out;\n    }\n  }, {\n    key: \"text\",\n    value: function text(token) {\n      return 'tokens' in token && token.tokens ? this.parser.parseInline(token.tokens) : 'escaped' in token && token.escaped ? token.text : escape(token.text);\n    }\n  }]);\n}();\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nvar _TextRenderer = /*#__PURE__*/function () {\n  function _TextRenderer() {\n    _classCallCheck(this, _TextRenderer);\n  }\n  return _createClass(_TextRenderer, [{\n    key: \"strong\",\n    value:\n    // no need for block level renderers\n    function strong(_ref14) {\n      var text = _ref14.text;\n      return text;\n    }\n  }, {\n    key: \"em\",\n    value: function em(_ref15) {\n      var text = _ref15.text;\n      return text;\n    }\n  }, {\n    key: \"codespan\",\n    value: function codespan(_ref16) {\n      var text = _ref16.text;\n      return text;\n    }\n  }, {\n    key: \"del\",\n    value: function del(_ref17) {\n      var text = _ref17.text;\n      return text;\n    }\n  }, {\n    key: \"html\",\n    value: function html(_ref18) {\n      var text = _ref18.text;\n      return text;\n    }\n  }, {\n    key: \"text\",\n    value: function text(_ref19) {\n      var _text2 = _ref19.text;\n      return _text2;\n    }\n  }, {\n    key: \"link\",\n    value: function link(_ref20) {\n      var text = _ref20.text;\n      return '' + text;\n    }\n  }, {\n    key: \"image\",\n    value: function image(_ref21) {\n      var text = _ref21.text;\n      return '' + text;\n    }\n  }, {\n    key: \"br\",\n    value: function br() {\n      return '';\n    }\n  }]);\n}();\n/**\n * Parsing & Compiling\n */\nvar _Parser = /*#__PURE__*/function () {\n  function _Parser(options) {\n    _classCallCheck(this, _Parser);\n    _defineProperty(this, \"options\", void 0);\n    _defineProperty(this, \"renderer\", void 0);\n    _defineProperty(this, \"textRenderer\", void 0);\n    this.options = options || _defaults;\n    this.options.renderer = this.options.renderer || new _Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.renderer.parser = this;\n    this.textRenderer = new _TextRenderer();\n  }\n  /**\n   * Static Parse Method\n   */\n  return _createClass(_Parser, [{\n    key: \"parse\",\n    value:\n    /**\n     * Parse Loop\n     */\n    function parse(tokens) {\n      var top = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var out = '';\n      for (var i = 0; i < tokens.length; i++) {\n        var _this$options$extensi;\n        var anyToken = tokens[i];\n        // Run any renderer extensions\n        if ((_this$options$extensi = this.options.extensions) !== null && _this$options$extensi !== void 0 && (_this$options$extensi = _this$options$extensi.renderers) !== null && _this$options$extensi !== void 0 && _this$options$extensi[anyToken.type]) {\n          var genericToken = anyToken;\n          var ret = this.options.extensions.renderers[genericToken.type].call({\n            parser: this\n          }, genericToken);\n          if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n            out += ret || '';\n            continue;\n          }\n        }\n        var token = anyToken;\n        switch (token.type) {\n          case 'space':\n            {\n              out += this.renderer.space(token);\n              continue;\n            }\n          case 'hr':\n            {\n              out += this.renderer.hr(token);\n              continue;\n            }\n          case 'heading':\n            {\n              out += this.renderer.heading(token);\n              continue;\n            }\n          case 'code':\n            {\n              out += this.renderer.code(token);\n              continue;\n            }\n          case 'table':\n            {\n              out += this.renderer.table(token);\n              continue;\n            }\n          case 'blockquote':\n            {\n              out += this.renderer.blockquote(token);\n              continue;\n            }\n          case 'list':\n            {\n              out += this.renderer.list(token);\n              continue;\n            }\n          case 'html':\n            {\n              out += this.renderer.html(token);\n              continue;\n            }\n          case 'paragraph':\n            {\n              out += this.renderer.paragraph(token);\n              continue;\n            }\n          case 'text':\n            {\n              var textToken = token;\n              var body = this.renderer.text(textToken);\n              while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n                textToken = tokens[++i];\n                body += '\\n' + this.renderer.text(textToken);\n              }\n              if (top) {\n                out += this.renderer.paragraph({\n                  type: 'paragraph',\n                  raw: body,\n                  text: body,\n                  tokens: [{\n                    type: 'text',\n                    raw: body,\n                    text: body,\n                    escaped: true\n                  }]\n                });\n              } else {\n                out += body;\n              }\n              continue;\n            }\n          default:\n            {\n              var errMsg = 'Token with \"' + token.type + '\" type was not found.';\n              if (this.options.silent) {\n                console.error(errMsg);\n                return '';\n              } else {\n                throw new Error(errMsg);\n              }\n            }\n        }\n      }\n      return out;\n    }\n    /**\n     * Parse Inline Tokens\n     */\n  }, {\n    key: \"parseInline\",\n    value: function parseInline(tokens) {\n      var renderer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.renderer;\n      var out = '';\n      for (var i = 0; i < tokens.length; i++) {\n        var _this$options$extensi2;\n        var anyToken = tokens[i];\n        // Run any renderer extensions\n        if ((_this$options$extensi2 = this.options.extensions) !== null && _this$options$extensi2 !== void 0 && (_this$options$extensi2 = _this$options$extensi2.renderers) !== null && _this$options$extensi2 !== void 0 && _this$options$extensi2[anyToken.type]) {\n          var ret = this.options.extensions.renderers[anyToken.type].call({\n            parser: this\n          }, anyToken);\n          if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(anyToken.type)) {\n            out += ret || '';\n            continue;\n          }\n        }\n        var token = anyToken;\n        switch (token.type) {\n          case 'escape':\n            {\n              out += renderer.text(token);\n              break;\n            }\n          case 'html':\n            {\n              out += renderer.html(token);\n              break;\n            }\n          case 'link':\n            {\n              out += renderer.link(token);\n              break;\n            }\n          case 'image':\n            {\n              out += renderer.image(token);\n              break;\n            }\n          case 'strong':\n            {\n              out += renderer.strong(token);\n              break;\n            }\n          case 'em':\n            {\n              out += renderer.em(token);\n              break;\n            }\n          case 'codespan':\n            {\n              out += renderer.codespan(token);\n              break;\n            }\n          case 'br':\n            {\n              out += renderer.br(token);\n              break;\n            }\n          case 'del':\n            {\n              out += renderer.del(token);\n              break;\n            }\n          case 'text':\n            {\n              out += renderer.text(token);\n              break;\n            }\n          default:\n            {\n              var errMsg = 'Token with \"' + token.type + '\" type was not found.';\n              if (this.options.silent) {\n                console.error(errMsg);\n                return '';\n              } else {\n                throw new Error(errMsg);\n              }\n            }\n        }\n      }\n      return out;\n    }\n  }], [{\n    key: \"parse\",\n    value: function parse(tokens, options) {\n      var parser = new _Parser(options);\n      return parser.parse(tokens);\n    }\n    /**\n     * Static Parse Inline Method\n     */\n  }, {\n    key: \"parseInline\",\n    value: function parseInline(tokens, options) {\n      var parser = new _Parser(options);\n      return parser.parseInline(tokens);\n    }\n  }]);\n}();\nvar _Hooks = /*#__PURE__*/function () {\n  function _Hooks(options) {\n    _classCallCheck(this, _Hooks);\n    _defineProperty(this, \"options\", void 0);\n    _defineProperty(this, \"block\", void 0);\n    this.options = options || _defaults;\n  }\n  return _createClass(_Hooks, [{\n    key: \"preprocess\",\n    value:\n    /**\n     * Process markdown before marked\n     */\n    function preprocess(markdown) {\n      return markdown;\n    }\n    /**\n     * Process HTML after marked is finished\n     */\n  }, {\n    key: \"postprocess\",\n    value: function postprocess(html) {\n      return html;\n    }\n    /**\n     * Process all tokens before walk tokens\n     */\n  }, {\n    key: \"processAllTokens\",\n    value: function processAllTokens(tokens) {\n      return tokens;\n    }\n    /**\n     * Provide function to tokenize markdown\n     */\n  }, {\n    key: \"provideLexer\",\n    value: function provideLexer() {\n      return this.block ? _Lexer.lex : _Lexer.lexInline;\n    }\n    /**\n     * Provide function to parse tokens\n     */\n  }, {\n    key: \"provideParser\",\n    value: function provideParser() {\n      return this.block ? _Parser.parse : _Parser.parseInline;\n    }\n  }]);\n}();\n_defineProperty(_Hooks, \"passThroughHooks\", new Set(['preprocess', 'postprocess', 'processAllTokens']));\nvar Marked = /*#__PURE__*/function () {\n  function Marked() {\n    _classCallCheck(this, Marked);\n    _defineProperty(this, \"defaults\", _getDefaults());\n    _defineProperty(this, \"options\", this.setOptions);\n    _defineProperty(this, \"parse\", this.parseMarkdown(true));\n    _defineProperty(this, \"parseInline\", this.parseMarkdown(false));\n    _defineProperty(this, \"Parser\", _Parser);\n    _defineProperty(this, \"Renderer\", _Renderer);\n    _defineProperty(this, \"TextRenderer\", _TextRenderer);\n    _defineProperty(this, \"Lexer\", _Lexer);\n    _defineProperty(this, \"Tokenizer\", _Tokenizer);\n    _defineProperty(this, \"Hooks\", _Hooks);\n    this.use.apply(this, arguments);\n  }\n  /**\n   * Run callback for every token\n   */\n  return _createClass(Marked, [{\n    key: \"walkTokens\",\n    value: function walkTokens(tokens, callback) {\n      var _this5 = this;\n      var values = [];\n      var _iterator3 = _createForOfIteratorHelper(tokens),\n        _step3;\n      try {\n        var _loop3 = function _loop3() {\n          var token = _step3.value;\n          values = values.concat(callback.call(_this5, token));\n          switch (token.type) {\n            case 'table':\n              {\n                var tableToken = token;\n                var _iterator4 = _createForOfIteratorHelper(tableToken.header),\n                  _step4;\n                try {\n                  for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                    var cell = _step4.value;\n                    values = values.concat(_this5.walkTokens(cell.tokens, callback));\n                  }\n                } catch (err) {\n                  _iterator4.e(err);\n                } finally {\n                  _iterator4.f();\n                }\n                var _iterator5 = _createForOfIteratorHelper(tableToken.rows),\n                  _step5;\n                try {\n                  for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                    var row = _step5.value;\n                    var _iterator6 = _createForOfIteratorHelper(row),\n                      _step6;\n                    try {\n                      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n                        var _cell = _step6.value;\n                        values = values.concat(_this5.walkTokens(_cell.tokens, callback));\n                      }\n                    } catch (err) {\n                      _iterator6.e(err);\n                    } finally {\n                      _iterator6.f();\n                    }\n                  }\n                } catch (err) {\n                  _iterator5.e(err);\n                } finally {\n                  _iterator5.f();\n                }\n                break;\n              }\n            case 'list':\n              {\n                var listToken = token;\n                values = values.concat(_this5.walkTokens(listToken.items, callback));\n                break;\n              }\n            default:\n              {\n                var _this5$defaults$exten;\n                var genericToken = token;\n                if ((_this5$defaults$exten = _this5.defaults.extensions) !== null && _this5$defaults$exten !== void 0 && (_this5$defaults$exten = _this5$defaults$exten.childTokens) !== null && _this5$defaults$exten !== void 0 && _this5$defaults$exten[genericToken.type]) {\n                  _this5.defaults.extensions.childTokens[genericToken.type].forEach(function (childTokens) {\n                    var tokens = genericToken[childTokens].flat(Infinity);\n                    values = values.concat(_this5.walkTokens(tokens, callback));\n                  });\n                } else if (genericToken.tokens) {\n                  values = values.concat(_this5.walkTokens(genericToken.tokens, callback));\n                }\n              }\n          }\n        };\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          _loop3();\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      return values;\n    }\n  }, {\n    key: \"use\",\n    value: function use() {\n      var _this6 = this;\n      var extensions = this.defaults.extensions || {\n        renderers: {},\n        childTokens: {}\n      };\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      args.forEach(function (pack) {\n        // copy options to new object\n        var opts = _objectSpread({}, pack);\n        // set async to true if it was set to true before\n        opts.async = _this6.defaults.async || opts.async || false;\n        // ==-- Parse \"addon\" extensions --== //\n        if (pack.extensions) {\n          pack.extensions.forEach(function (ext) {\n            if (!ext.name) {\n              throw new Error('extension name required');\n            }\n            if ('renderer' in ext) {\n              // Renderer extensions\n              var prevRenderer = extensions.renderers[ext.name];\n              if (prevRenderer) {\n                // Replace extension with func to run new extension but fall back if false\n                extensions.renderers[ext.name] = function () {\n                  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n                    args[_key2] = arguments[_key2];\n                  }\n                  var ret = ext.renderer.apply(this, args);\n                  if (ret === false) {\n                    ret = prevRenderer.apply(this, args);\n                  }\n                  return ret;\n                };\n              } else {\n                extensions.renderers[ext.name] = ext.renderer;\n              }\n            }\n            if ('tokenizer' in ext) {\n              // Tokenizer Extensions\n              if (!ext.level || ext.level !== 'block' && ext.level !== 'inline') {\n                throw new Error(\"extension level must be 'block' or 'inline'\");\n              }\n              var extLevel = extensions[ext.level];\n              if (extLevel) {\n                extLevel.unshift(ext.tokenizer);\n              } else {\n                extensions[ext.level] = [ext.tokenizer];\n              }\n              if (ext.start) {\n                // Function to check for start of token\n                if (ext.level === 'block') {\n                  if (extensions.startBlock) {\n                    extensions.startBlock.push(ext.start);\n                  } else {\n                    extensions.startBlock = [ext.start];\n                  }\n                } else if (ext.level === 'inline') {\n                  if (extensions.startInline) {\n                    extensions.startInline.push(ext.start);\n                  } else {\n                    extensions.startInline = [ext.start];\n                  }\n                }\n              }\n            }\n            if ('childTokens' in ext && ext.childTokens) {\n              // Child tokens to be visited by walkTokens\n              extensions.childTokens[ext.name] = ext.childTokens;\n            }\n          });\n          opts.extensions = extensions;\n        }\n        // ==-- Parse \"overwrite\" extensions --== //\n        if (pack.renderer) {\n          var renderer = _this6.defaults.renderer || new _Renderer(_this6.defaults);\n          var _loop4 = function _loop4() {\n            if (!(prop in renderer)) {\n              throw new Error(\"renderer '\".concat(prop, \"' does not exist\"));\n            }\n            if (['options', 'parser'].includes(prop)) {\n              // ignore options property\n              return 1; // continue\n            }\n            var rendererProp = prop;\n            var rendererFunc = pack.renderer[rendererProp];\n            var prevRenderer = renderer[rendererProp];\n            // Replace renderer with func to run extension, but fall back if false\n            renderer[rendererProp] = function () {\n              for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n                args[_key3] = arguments[_key3];\n              }\n              var ret = rendererFunc.apply(renderer, args);\n              if (ret === false) {\n                ret = prevRenderer.apply(renderer, args);\n              }\n              return ret || '';\n            };\n          };\n          for (var prop in pack.renderer) {\n            if (_loop4()) continue;\n          }\n          opts.renderer = renderer;\n        }\n        if (pack.tokenizer) {\n          var tokenizer = _this6.defaults.tokenizer || new _Tokenizer(_this6.defaults);\n          var _loop5 = function _loop5() {\n            if (!(_prop in tokenizer)) {\n              throw new Error(\"tokenizer '\".concat(_prop, \"' does not exist\"));\n            }\n            if (['options', 'rules', 'lexer'].includes(_prop)) {\n              // ignore options, rules, and lexer properties\n              return 1; // continue\n            }\n            var tokenizerProp = _prop;\n            var tokenizerFunc = pack.tokenizer[tokenizerProp];\n            var prevTokenizer = tokenizer[tokenizerProp];\n            // Replace tokenizer with func to run extension, but fall back if false\n            // @ts-expect-error cannot type tokenizer function dynamically\n            tokenizer[tokenizerProp] = function () {\n              for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n                args[_key4] = arguments[_key4];\n              }\n              var ret = tokenizerFunc.apply(tokenizer, args);\n              if (ret === false) {\n                ret = prevTokenizer.apply(tokenizer, args);\n              }\n              return ret;\n            };\n          };\n          for (var _prop in pack.tokenizer) {\n            if (_loop5()) continue;\n          }\n          opts.tokenizer = tokenizer;\n        }\n        // ==-- Parse Hooks extensions --== //\n        if (pack.hooks) {\n          var hooks = _this6.defaults.hooks || new _Hooks();\n          var _loop6 = function _loop6() {\n            if (!(_prop2 in hooks)) {\n              throw new Error(\"hook '\".concat(_prop2, \"' does not exist\"));\n            }\n            if (['options', 'block'].includes(_prop2)) {\n              // ignore options and block properties\n              return 1; // continue\n            }\n            var hooksProp = _prop2;\n            var hooksFunc = pack.hooks[hooksProp];\n            var prevHook = hooks[hooksProp];\n            if (_Hooks.passThroughHooks.has(_prop2)) {\n              // @ts-expect-error cannot type hook function dynamically\n              hooks[hooksProp] = function (arg) {\n                if (_this6.defaults.async) {\n                  return Promise.resolve(hooksFunc.call(hooks, arg)).then(function (ret) {\n                    return prevHook.call(hooks, ret);\n                  });\n                }\n                var ret = hooksFunc.call(hooks, arg);\n                return prevHook.call(hooks, ret);\n              };\n            } else {\n              // @ts-expect-error cannot type hook function dynamically\n              hooks[hooksProp] = function () {\n                for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n                  args[_key5] = arguments[_key5];\n                }\n                var ret = hooksFunc.apply(hooks, args);\n                if (ret === false) {\n                  ret = prevHook.apply(hooks, args);\n                }\n                return ret;\n              };\n            }\n          };\n          for (var _prop2 in pack.hooks) {\n            if (_loop6()) continue;\n          }\n          opts.hooks = hooks;\n        }\n        // ==-- Parse WalkTokens extensions --== //\n        if (pack.walkTokens) {\n          var _walkTokens = _this6.defaults.walkTokens;\n          var packWalktokens = pack.walkTokens;\n          opts.walkTokens = function (token) {\n            var values = [];\n            values.push(packWalktokens.call(this, token));\n            if (_walkTokens) {\n              values = values.concat(_walkTokens.call(this, token));\n            }\n            return values;\n          };\n        }\n        _this6.defaults = _objectSpread(_objectSpread({}, _this6.defaults), opts);\n      });\n      return this;\n    }\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(opt) {\n      this.defaults = _objectSpread(_objectSpread({}, this.defaults), opt);\n      return this;\n    }\n  }, {\n    key: \"lexer\",\n    value: function lexer(src, options) {\n      return _Lexer.lex(src, options !== null && options !== void 0 ? options : this.defaults);\n    }\n  }, {\n    key: \"parser\",\n    value: function parser(tokens, options) {\n      return _Parser.parse(tokens, options !== null && options !== void 0 ? options : this.defaults);\n    }\n  }, {\n    key: \"parseMarkdown\",\n    value: function parseMarkdown(blockType) {\n      var _this7 = this;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      var parse = function parse(src, options) {\n        var origOpt = _objectSpread({}, options);\n        var opt = _objectSpread(_objectSpread({}, _this7.defaults), origOpt);\n        var throwError = _this7.onError(!!opt.silent, !!opt.async);\n        // throw error if an extension set async to true but parse was called with async: false\n        if (_this7.defaults.async === true && origOpt.async === false) {\n          return throwError(new Error('marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise.'));\n        }\n        // throw error in case of non string input\n        if (typeof src === 'undefined' || src === null) {\n          return throwError(new Error('marked(): input parameter is undefined or null'));\n        }\n        if (typeof src !== 'string') {\n          return throwError(new Error('marked(): input parameter is of type ' + Object.prototype.toString.call(src) + ', string expected'));\n        }\n        if (opt.hooks) {\n          opt.hooks.options = opt;\n          opt.hooks.block = blockType;\n        }\n        var lexer = opt.hooks ? opt.hooks.provideLexer() : blockType ? _Lexer.lex : _Lexer.lexInline;\n        var parser = opt.hooks ? opt.hooks.provideParser() : blockType ? _Parser.parse : _Parser.parseInline;\n        if (opt.async) {\n          return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src).then(function (src) {\n            return lexer(src, opt);\n          }).then(function (tokens) {\n            return opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens;\n          }).then(function (tokens) {\n            return opt.walkTokens ? Promise.all(_this7.walkTokens(tokens, opt.walkTokens)).then(function () {\n              return tokens;\n            }) : tokens;\n          }).then(function (tokens) {\n            return parser(tokens, opt);\n          }).then(function (html) {\n            return opt.hooks ? opt.hooks.postprocess(html) : html;\n          })[\"catch\"](throwError);\n        }\n        try {\n          if (opt.hooks) {\n            src = opt.hooks.preprocess(src);\n          }\n          var tokens = lexer(src, opt);\n          if (opt.hooks) {\n            tokens = opt.hooks.processAllTokens(tokens);\n          }\n          if (opt.walkTokens) {\n            _this7.walkTokens(tokens, opt.walkTokens);\n          }\n          var _html = parser(tokens, opt);\n          if (opt.hooks) {\n            _html = opt.hooks.postprocess(_html);\n          }\n          return _html;\n        } catch (e) {\n          return throwError(e);\n        }\n      };\n      return parse;\n    }\n  }, {\n    key: \"onError\",\n    value: function onError(silent, async) {\n      return function (e) {\n        e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n        if (silent) {\n          var msg = '<p>An error occurred:</p><pre>' + escape(e.message + '', true) + '</pre>';\n          if (async) {\n            return Promise.resolve(msg);\n          }\n          return msg;\n        }\n        if (async) {\n          return Promise.reject(e);\n        }\n        throw e;\n      };\n    }\n  }]);\n}();\nvar markedInstance = new Marked();\nfunction marked(src, opt) {\n  return markedInstance.parse(src, opt);\n}\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options = marked.setOptions = function (options) {\n  markedInstance.setOptions(options);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\nmarked.defaults = _defaults;\n/**\n * Use Extension\n */\nmarked.use = function () {\n  markedInstance.use.apply(markedInstance, arguments);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\n/**\n * Run callback for every token\n */\nmarked.walkTokens = function (tokens, callback) {\n  return markedInstance.walkTokens(tokens, callback);\n};\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nvar options = marked.options;\nvar setOptions = marked.setOptions;\nvar use = marked.use;\nvar walkTokens = marked.walkTokens;\nvar parseInline = marked.parseInline;\nvar parse = marked;\nvar parser = _Parser.parse;\nvar lexer = _Lexer.lex;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/marked/lib/marked.esm.js\n");

/***/ })

};
;