"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/prosemirror-view";
exports.ids = ["vendor-chunks/prosemirror-view"];
exports.modules = {

/***/ "(ssr)/./node_modules/prosemirror-view/dist/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/prosemirror-view/dist/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Decoration: () => (/* binding */ Decoration),\n/* harmony export */   DecorationSet: () => (/* binding */ DecorationSet),\n/* harmony export */   EditorView: () => (/* binding */ EditorView),\n/* harmony export */   __endComposition: () => (/* binding */ __endComposition),\n/* harmony export */   __parseFromClipboard: () => (/* binding */ __parseFromClipboard)\n/* harmony export */ });\n/* harmony import */ var prosemirror_state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prosemirror-state */ \"(ssr)/./node_modules/prosemirror-state/dist/index.js\");\n/* harmony import */ var prosemirror_model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-model */ \"(ssr)/./node_modules/prosemirror-model/dist/index.js\");\n/* harmony import */ var prosemirror_transform__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prosemirror-transform */ \"(ssr)/./node_modules/prosemirror-transform/dist/index.js\");\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _callSuper(_this, derived, args) {\n  function isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n      return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    } catch (e) {\n      return false;\n    }\n  }\n  derived = _getPrototypeOf(derived);\n  return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));\n}\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _get() { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\n\n\nvar domIndex = function domIndex(node) {\n  for (var index = 0;; index++) {\n    node = node.previousSibling;\n    if (!node) return index;\n  }\n};\nvar parentNode = function parentNode(node) {\n  var parent = node.assignedSlot || node.parentNode;\n  return parent && parent.nodeType == 11 ? parent.host : parent;\n};\nvar reusedRange = null;\n// Note that this will always return the same range, because DOM range\n// objects are every expensive, and keep slowing down subsequent DOM\n// updates, for some reason.\nvar textRange = function textRange(node, from, to) {\n  var range = reusedRange || (reusedRange = document.createRange());\n  range.setEnd(node, to == null ? node.nodeValue.length : to);\n  range.setStart(node, from || 0);\n  return range;\n};\nvar clearReusedRange = function clearReusedRange() {\n  reusedRange = null;\n};\n// Scans forward and backward through DOM positions equivalent to the\n// given one to see if the two are in the same place (i.e. after a\n// text node vs at the end of that text node)\nvar isEquivalentPosition = function isEquivalentPosition(node, off, targetNode, targetOff) {\n  return targetNode && (scanFor(node, off, targetNode, targetOff, -1) || scanFor(node, off, targetNode, targetOff, 1));\n};\nvar atomElements = /^(img|br|input|textarea|hr)$/i;\nfunction scanFor(node, off, targetNode, targetOff, dir) {\n  for (;;) {\n    if (node == targetNode && off == targetOff) return true;\n    if (off == (dir < 0 ? 0 : nodeSize(node))) {\n      var parent = node.parentNode;\n      if (!parent || parent.nodeType != 1 || hasBlockDesc(node) || atomElements.test(node.nodeName) || node.contentEditable == \"false\") return false;\n      off = domIndex(node) + (dir < 0 ? 0 : 1);\n      node = parent;\n    } else if (node.nodeType == 1) {\n      node = node.childNodes[off + (dir < 0 ? -1 : 0)];\n      if (node.contentEditable == \"false\") return false;\n      off = dir < 0 ? nodeSize(node) : 0;\n    } else {\n      return false;\n    }\n  }\n}\nfunction nodeSize(node) {\n  return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;\n}\nfunction textNodeBefore$1(node, offset) {\n  for (;;) {\n    if (node.nodeType == 3 && offset) return node;\n    if (node.nodeType == 1 && offset > 0) {\n      if (node.contentEditable == \"false\") return null;\n      node = node.childNodes[offset - 1];\n      offset = nodeSize(node);\n    } else if (node.parentNode && !hasBlockDesc(node)) {\n      offset = domIndex(node);\n      node = node.parentNode;\n    } else {\n      return null;\n    }\n  }\n}\nfunction textNodeAfter$1(node, offset) {\n  for (;;) {\n    if (node.nodeType == 3 && offset < node.nodeValue.length) return node;\n    if (node.nodeType == 1 && offset < node.childNodes.length) {\n      if (node.contentEditable == \"false\") return null;\n      node = node.childNodes[offset];\n      offset = 0;\n    } else if (node.parentNode && !hasBlockDesc(node)) {\n      offset = domIndex(node) + 1;\n      node = node.parentNode;\n    } else {\n      return null;\n    }\n  }\n}\nfunction isOnEdge(node, offset, parent) {\n  for (var atStart = offset == 0, atEnd = offset == nodeSize(node); atStart || atEnd;) {\n    if (node == parent) return true;\n    var index = domIndex(node);\n    node = node.parentNode;\n    if (!node) return false;\n    atStart = atStart && index == 0;\n    atEnd = atEnd && index == nodeSize(node);\n  }\n}\nfunction hasBlockDesc(dom) {\n  var desc;\n  for (var cur = dom; cur; cur = cur.parentNode) if (desc = cur.pmViewDesc) break;\n  return desc && desc.node && desc.node.isBlock && (desc.dom == dom || desc.contentDOM == dom);\n}\n// Work around Chrome issue https://bugs.chromium.org/p/chromium/issues/detail?id=447523\n// (isCollapsed inappropriately returns true in shadow dom)\nvar selectionCollapsed = function selectionCollapsed(domSel) {\n  return domSel.focusNode && isEquivalentPosition(domSel.focusNode, domSel.focusOffset, domSel.anchorNode, domSel.anchorOffset);\n};\nfunction keyEvent(keyCode, key) {\n  var event = document.createEvent(\"Event\");\n  event.initEvent(\"keydown\", true, true);\n  event.keyCode = keyCode;\n  event.key = event.code = key;\n  return event;\n}\nfunction deepActiveElement(doc) {\n  var elt = doc.activeElement;\n  while (elt && elt.shadowRoot) elt = elt.shadowRoot.activeElement;\n  return elt;\n}\nfunction caretFromPoint(doc, x, y) {\n  if (doc.caretPositionFromPoint) {\n    try {\n      // Firefox throws for this call in hard-to-predict circumstances (#994)\n      var pos = doc.caretPositionFromPoint(x, y);\n      // Clip the offset, because Chrome will return a text offset\n      // into <input> nodes, which can't be treated as a regular DOM\n      // offset\n      if (pos) return {\n        node: pos.offsetNode,\n        offset: Math.min(nodeSize(pos.offsetNode), pos.offset)\n      };\n    } catch (_) {}\n  }\n  if (doc.caretRangeFromPoint) {\n    var range = doc.caretRangeFromPoint(x, y);\n    if (range) return {\n      node: range.startContainer,\n      offset: Math.min(nodeSize(range.startContainer), range.startOffset)\n    };\n  }\n}\nvar nav = typeof navigator != \"undefined\" ? navigator : null;\nvar doc = typeof document != \"undefined\" ? document : null;\nvar agent = nav && nav.userAgent || \"\";\nvar ie_edge = /Edge\\/(\\d+)/.exec(agent);\nvar ie_upto10 = /MSIE \\d/.exec(agent);\nvar ie_11up = /Trident\\/(?:[7-9]|\\d{2,})\\..*rv:(\\d+)/.exec(agent);\nvar ie = !!(ie_upto10 || ie_11up || ie_edge);\nvar ie_version = ie_upto10 ? document.documentMode : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0;\nvar gecko = !ie && /gecko\\/(\\d+)/i.test(agent);\ngecko && +(/Firefox\\/(\\d+)/.exec(agent) || [0, 0])[1];\nvar _chrome = !ie && /Chrome\\/(\\d+)/.exec(agent);\nvar chrome = !!_chrome;\nvar chrome_version = _chrome ? +_chrome[1] : 0;\nvar safari = !ie && !!nav && /Apple Computer/.test(nav.vendor);\n// Is true for both iOS and iPadOS for convenience\nvar ios = safari && (/Mobile\\/\\w+/.test(agent) || !!nav && nav.maxTouchPoints > 2);\nvar mac = ios || (nav ? /Mac/.test(nav.platform) : false);\nvar windows = nav ? /Win/.test(nav.platform) : false;\nvar android = /Android \\d/.test(agent);\nvar webkit = !!doc && \"webkitFontSmoothing\" in doc.documentElement.style;\nvar webkit_version = webkit ? +(/\\bAppleWebKit\\/(\\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0;\nfunction windowRect(doc) {\n  var vp = doc.defaultView && doc.defaultView.visualViewport;\n  if (vp) return {\n    left: 0,\n    right: vp.width,\n    top: 0,\n    bottom: vp.height\n  };\n  return {\n    left: 0,\n    right: doc.documentElement.clientWidth,\n    top: 0,\n    bottom: doc.documentElement.clientHeight\n  };\n}\nfunction getSide(value, side) {\n  return typeof value == \"number\" ? value : value[side];\n}\nfunction clientRect(node) {\n  var rect = node.getBoundingClientRect();\n  // Adjust for elements with style \"transform: scale()\"\n  var scaleX = rect.width / node.offsetWidth || 1;\n  var scaleY = rect.height / node.offsetHeight || 1;\n  // Make sure scrollbar width isn't included in the rectangle\n  return {\n    left: rect.left,\n    right: rect.left + node.clientWidth * scaleX,\n    top: rect.top,\n    bottom: rect.top + node.clientHeight * scaleY\n  };\n}\nfunction scrollRectIntoView(view, rect, startDOM) {\n  var scrollThreshold = view.someProp(\"scrollThreshold\") || 0,\n    scrollMargin = view.someProp(\"scrollMargin\") || 5;\n  var doc = view.dom.ownerDocument;\n  for (var parent = startDOM || view.dom;;) {\n    if (!parent) break;\n    if (parent.nodeType != 1) {\n      parent = parentNode(parent);\n      continue;\n    }\n    var elt = parent;\n    var atTop = elt == doc.body;\n    var bounding = atTop ? windowRect(doc) : clientRect(elt);\n    var moveX = 0,\n      moveY = 0;\n    if (rect.top < bounding.top + getSide(scrollThreshold, \"top\")) moveY = -(bounding.top - rect.top + getSide(scrollMargin, \"top\"));else if (rect.bottom > bounding.bottom - getSide(scrollThreshold, \"bottom\")) moveY = rect.bottom - rect.top > bounding.bottom - bounding.top ? rect.top + getSide(scrollMargin, \"top\") - bounding.top : rect.bottom - bounding.bottom + getSide(scrollMargin, \"bottom\");\n    if (rect.left < bounding.left + getSide(scrollThreshold, \"left\")) moveX = -(bounding.left - rect.left + getSide(scrollMargin, \"left\"));else if (rect.right > bounding.right - getSide(scrollThreshold, \"right\")) moveX = rect.right - bounding.right + getSide(scrollMargin, \"right\");\n    if (moveX || moveY) {\n      if (atTop) {\n        doc.defaultView.scrollBy(moveX, moveY);\n      } else {\n        var startX = elt.scrollLeft,\n          startY = elt.scrollTop;\n        if (moveY) elt.scrollTop += moveY;\n        if (moveX) elt.scrollLeft += moveX;\n        var dX = elt.scrollLeft - startX,\n          dY = elt.scrollTop - startY;\n        rect = {\n          left: rect.left - dX,\n          top: rect.top - dY,\n          right: rect.right - dX,\n          bottom: rect.bottom - dY\n        };\n      }\n    }\n    var pos = atTop ? \"fixed\" : getComputedStyle(parent).position;\n    if (/^(fixed|sticky)$/.test(pos)) break;\n    parent = pos == \"absolute\" ? parent.offsetParent : parentNode(parent);\n  }\n}\n// Store the scroll position of the editor's parent nodes, along with\n// the top position of an element near the top of the editor, which\n// will be used to make sure the visible viewport remains stable even\n// when the size of the content above changes.\nfunction storeScrollPos(view) {\n  var rect = view.dom.getBoundingClientRect(),\n    startY = Math.max(0, rect.top);\n  var refDOM, refTop;\n  for (var x = (rect.left + rect.right) / 2, y = startY + 1; y < Math.min(innerHeight, rect.bottom); y += 5) {\n    var dom = view.root.elementFromPoint(x, y);\n    if (!dom || dom == view.dom || !view.dom.contains(dom)) continue;\n    var localRect = dom.getBoundingClientRect();\n    if (localRect.top >= startY - 20) {\n      refDOM = dom;\n      refTop = localRect.top;\n      break;\n    }\n  }\n  return {\n    refDOM: refDOM,\n    refTop: refTop,\n    stack: scrollStack(view.dom)\n  };\n}\nfunction scrollStack(dom) {\n  var stack = [],\n    doc = dom.ownerDocument;\n  for (var cur = dom; cur; cur = parentNode(cur)) {\n    stack.push({\n      dom: cur,\n      top: cur.scrollTop,\n      left: cur.scrollLeft\n    });\n    if (dom == doc) break;\n  }\n  return stack;\n}\n// Reset the scroll position of the editor's parent nodes to that what\n// it was before, when storeScrollPos was called.\nfunction resetScrollPos(_ref) {\n  var refDOM = _ref.refDOM,\n    refTop = _ref.refTop,\n    stack = _ref.stack;\n  var newRefTop = refDOM ? refDOM.getBoundingClientRect().top : 0;\n  restoreScrollStack(stack, newRefTop == 0 ? 0 : newRefTop - refTop);\n}\nfunction restoreScrollStack(stack, dTop) {\n  for (var i = 0; i < stack.length; i++) {\n    var _stack$i = stack[i],\n      dom = _stack$i.dom,\n      top = _stack$i.top,\n      left = _stack$i.left;\n    if (dom.scrollTop != top + dTop) dom.scrollTop = top + dTop;\n    if (dom.scrollLeft != left) dom.scrollLeft = left;\n  }\n}\nvar preventScrollSupported = null;\n// Feature-detects support for .focus({preventScroll: true}), and uses\n// a fallback kludge when not supported.\nfunction focusPreventScroll(dom) {\n  if (dom.setActive) return dom.setActive(); // in IE\n  if (preventScrollSupported) return dom.focus(preventScrollSupported);\n  var stored = scrollStack(dom);\n  dom.focus(preventScrollSupported == null ? {\n    get preventScroll() {\n      preventScrollSupported = {\n        preventScroll: true\n      };\n      return true;\n    }\n  } : undefined);\n  if (!preventScrollSupported) {\n    preventScrollSupported = false;\n    restoreScrollStack(stored, 0);\n  }\n}\nfunction findOffsetInNode(node, coords) {\n  var closest,\n    dxClosest = 2e8,\n    coordsClosest,\n    offset = 0;\n  var rowBot = coords.top,\n    rowTop = coords.top;\n  var firstBelow, coordsBelow;\n  for (var child = node.firstChild, childIndex = 0; child; child = child.nextSibling, childIndex++) {\n    var rects = void 0;\n    if (child.nodeType == 1) rects = child.getClientRects();else if (child.nodeType == 3) rects = textRange(child).getClientRects();else continue;\n    for (var i = 0; i < rects.length; i++) {\n      var rect = rects[i];\n      if (rect.top <= rowBot && rect.bottom >= rowTop) {\n        rowBot = Math.max(rect.bottom, rowBot);\n        rowTop = Math.min(rect.top, rowTop);\n        var dx = rect.left > coords.left ? rect.left - coords.left : rect.right < coords.left ? coords.left - rect.right : 0;\n        if (dx < dxClosest) {\n          closest = child;\n          dxClosest = dx;\n          coordsClosest = dx && closest.nodeType == 3 ? {\n            left: rect.right < coords.left ? rect.right : rect.left,\n            top: coords.top\n          } : coords;\n          if (child.nodeType == 1 && dx) offset = childIndex + (coords.left >= (rect.left + rect.right) / 2 ? 1 : 0);\n          continue;\n        }\n      } else if (rect.top > coords.top && !firstBelow && rect.left <= coords.left && rect.right >= coords.left) {\n        firstBelow = child;\n        coordsBelow = {\n          left: Math.max(rect.left, Math.min(rect.right, coords.left)),\n          top: rect.top\n        };\n      }\n      if (!closest && (coords.left >= rect.right && coords.top >= rect.top || coords.left >= rect.left && coords.top >= rect.bottom)) offset = childIndex + 1;\n    }\n  }\n  if (!closest && firstBelow) {\n    closest = firstBelow;\n    coordsClosest = coordsBelow;\n    dxClosest = 0;\n  }\n  if (closest && closest.nodeType == 3) return findOffsetInText(closest, coordsClosest);\n  if (!closest || dxClosest && closest.nodeType == 1) return {\n    node: node,\n    offset: offset\n  };\n  return findOffsetInNode(closest, coordsClosest);\n}\nfunction findOffsetInText(node, coords) {\n  var len = node.nodeValue.length;\n  var range = document.createRange();\n  for (var i = 0; i < len; i++) {\n    range.setEnd(node, i + 1);\n    range.setStart(node, i);\n    var rect = singleRect(range, 1);\n    if (rect.top == rect.bottom) continue;\n    if (inRect(coords, rect)) return {\n      node: node,\n      offset: i + (coords.left >= (rect.left + rect.right) / 2 ? 1 : 0)\n    };\n  }\n  return {\n    node: node,\n    offset: 0\n  };\n}\nfunction inRect(coords, rect) {\n  return coords.left >= rect.left - 1 && coords.left <= rect.right + 1 && coords.top >= rect.top - 1 && coords.top <= rect.bottom + 1;\n}\nfunction targetKludge(dom, coords) {\n  var parent = dom.parentNode;\n  if (parent && /^li$/i.test(parent.nodeName) && coords.left < dom.getBoundingClientRect().left) return parent;\n  return dom;\n}\nfunction posFromElement(view, elt, coords) {\n  var _findOffsetInNode = findOffsetInNode(elt, coords),\n    node = _findOffsetInNode.node,\n    offset = _findOffsetInNode.offset,\n    bias = -1;\n  if (node.nodeType == 1 && !node.firstChild) {\n    var rect = node.getBoundingClientRect();\n    bias = rect.left != rect.right && coords.left > (rect.left + rect.right) / 2 ? 1 : -1;\n  }\n  return view.docView.posFromDOM(node, offset, bias);\n}\nfunction posFromCaret(view, node, offset, coords) {\n  // Browser (in caretPosition/RangeFromPoint) will agressively\n  // normalize towards nearby inline nodes. Since we are interested in\n  // positions between block nodes too, we first walk up the hierarchy\n  // of nodes to see if there are block nodes that the coordinates\n  // fall outside of. If so, we take the position before/after that\n  // block. If not, we call `posFromDOM` on the raw node/offset.\n  var outsideBlock = -1;\n  for (var cur = node, sawBlock = false;;) {\n    if (cur == view.dom) break;\n    var desc = view.docView.nearestDesc(cur, true),\n      rect = void 0;\n    if (!desc) return null;\n    if (desc.dom.nodeType == 1 && (desc.node.isBlock && desc.parent || !desc.contentDOM) && (\n    // Ignore elements with zero-size bounding rectangles\n    (rect = desc.dom.getBoundingClientRect()).width || rect.height)) {\n      if (desc.node.isBlock && desc.parent) {\n        // Only apply the horizontal test to the innermost block. Vertical for any parent.\n        if (!sawBlock && rect.left > coords.left || rect.top > coords.top) outsideBlock = desc.posBefore;else if (!sawBlock && rect.right < coords.left || rect.bottom < coords.top) outsideBlock = desc.posAfter;\n        sawBlock = true;\n      }\n      if (!desc.contentDOM && outsideBlock < 0 && !desc.node.isText) {\n        // If we are inside a leaf, return the side of the leaf closer to the coords\n        var before = desc.node.isBlock ? coords.top < (rect.top + rect.bottom) / 2 : coords.left < (rect.left + rect.right) / 2;\n        return before ? desc.posBefore : desc.posAfter;\n      }\n    }\n    cur = desc.dom.parentNode;\n  }\n  return outsideBlock > -1 ? outsideBlock : view.docView.posFromDOM(node, offset, -1);\n}\nfunction elementFromPoint(element, coords, box) {\n  var len = element.childNodes.length;\n  if (len && box.top < box.bottom) {\n    for (var startI = Math.max(0, Math.min(len - 1, Math.floor(len * (coords.top - box.top) / (box.bottom - box.top)) - 2)), i = startI;;) {\n      var child = element.childNodes[i];\n      if (child.nodeType == 1) {\n        var rects = child.getClientRects();\n        for (var j = 0; j < rects.length; j++) {\n          var rect = rects[j];\n          if (inRect(coords, rect)) return elementFromPoint(child, coords, rect);\n        }\n      }\n      if ((i = (i + 1) % len) == startI) break;\n    }\n  }\n  return element;\n}\n// Given an x,y position on the editor, get the position in the document.\nfunction _posAtCoords(view, coords) {\n  var doc = view.dom.ownerDocument,\n    node,\n    offset = 0;\n  var caret = caretFromPoint(doc, coords.left, coords.top);\n  if (caret) {\n    node = caret.node;\n    offset = caret.offset;\n  }\n  var elt = (view.root.elementFromPoint ? view.root : doc).elementFromPoint(coords.left, coords.top);\n  var pos;\n  if (!elt || !view.dom.contains(elt.nodeType != 1 ? elt.parentNode : elt)) {\n    var box = view.dom.getBoundingClientRect();\n    if (!inRect(coords, box)) return null;\n    elt = elementFromPoint(view.dom, coords, box);\n    if (!elt) return null;\n  }\n  // Safari's caretRangeFromPoint returns nonsense when on a draggable element\n  if (safari) {\n    for (var p = elt; node && p; p = parentNode(p)) if (p.draggable) node = undefined;\n  }\n  elt = targetKludge(elt, coords);\n  if (node) {\n    if (gecko && node.nodeType == 1) {\n      // Firefox will sometimes return offsets into <input> nodes, which\n      // have no actual children, from caretPositionFromPoint (#953)\n      offset = Math.min(offset, node.childNodes.length);\n      // It'll also move the returned position before image nodes,\n      // even if those are behind it.\n      if (offset < node.childNodes.length) {\n        var next = node.childNodes[offset],\n          _box;\n        if (next.nodeName == \"IMG\" && (_box = next.getBoundingClientRect()).right <= coords.left && _box.bottom > coords.top) offset++;\n      }\n    }\n    var prev;\n    // When clicking above the right side of an uneditable node, Chrome will report a cursor position after that node.\n    if (webkit && offset && node.nodeType == 1 && (prev = node.childNodes[offset - 1]).nodeType == 1 && prev.contentEditable == \"false\" && prev.getBoundingClientRect().top >= coords.top) offset--;\n    // Suspiciously specific kludge to work around caret*FromPoint\n    // never returning a position at the end of the document\n    if (node == view.dom && offset == node.childNodes.length - 1 && node.lastChild.nodeType == 1 && coords.top > node.lastChild.getBoundingClientRect().bottom) pos = view.state.doc.content.size;\n    // Ignore positions directly after a BR, since caret*FromPoint\n    // 'round up' positions that would be more accurately placed\n    // before the BR node.\n    else if (offset == 0 || node.nodeType != 1 || node.childNodes[offset - 1].nodeName != \"BR\") pos = posFromCaret(view, node, offset, coords);\n  }\n  if (pos == null) pos = posFromElement(view, elt, coords);\n  var desc = view.docView.nearestDesc(elt, true);\n  return {\n    pos: pos,\n    inside: desc ? desc.posAtStart - desc.border : -1\n  };\n}\nfunction nonZero(rect) {\n  return rect.top < rect.bottom || rect.left < rect.right;\n}\nfunction singleRect(target, bias) {\n  var rects = target.getClientRects();\n  if (rects.length) {\n    var first = rects[bias < 0 ? 0 : rects.length - 1];\n    if (nonZero(first)) return first;\n  }\n  return Array.prototype.find.call(rects, nonZero) || target.getBoundingClientRect();\n}\nvar BIDI = /[\\u0590-\\u05f4\\u0600-\\u06ff\\u0700-\\u08ac]/;\n// Given a position in the document model, get a bounding box of the\n// character at that position, relative to the window.\nfunction _coordsAtPos(view, pos, side) {\n  var _view$docView$domFrom = view.docView.domFromPos(pos, side < 0 ? -1 : 1),\n    node = _view$docView$domFrom.node,\n    offset = _view$docView$domFrom.offset,\n    atom = _view$docView$domFrom.atom;\n  var supportEmptyRange = webkit || gecko;\n  if (node.nodeType == 3) {\n    // These browsers support querying empty text ranges. Prefer that in\n    // bidi context or when at the end of a node.\n    if (supportEmptyRange && (BIDI.test(node.nodeValue) || (side < 0 ? !offset : offset == node.nodeValue.length))) {\n      var rect = singleRect(textRange(node, offset, offset), side);\n      // Firefox returns bad results (the position before the space)\n      // when querying a position directly after line-broken\n      // whitespace. Detect this situation and and kludge around it\n      if (gecko && offset && /\\s/.test(node.nodeValue[offset - 1]) && offset < node.nodeValue.length) {\n        var rectBefore = singleRect(textRange(node, offset - 1, offset - 1), -1);\n        if (rectBefore.top == rect.top) {\n          var rectAfter = singleRect(textRange(node, offset, offset + 1), -1);\n          if (rectAfter.top != rect.top) return flattenV(rectAfter, rectAfter.left < rectBefore.left);\n        }\n      }\n      return rect;\n    } else {\n      var from = offset,\n        to = offset,\n        takeSide = side < 0 ? 1 : -1;\n      if (side < 0 && !offset) {\n        to++;\n        takeSide = -1;\n      } else if (side >= 0 && offset == node.nodeValue.length) {\n        from--;\n        takeSide = 1;\n      } else if (side < 0) {\n        from--;\n      } else {\n        to++;\n      }\n      return flattenV(singleRect(textRange(node, from, to), takeSide), takeSide < 0);\n    }\n  }\n  var $dom = view.state.doc.resolve(pos - (atom || 0));\n  // Return a horizontal line in block context\n  if (!$dom.parent.inlineContent) {\n    if (atom == null && offset && (side < 0 || offset == nodeSize(node))) {\n      var before = node.childNodes[offset - 1];\n      if (before.nodeType == 1) return flattenH(before.getBoundingClientRect(), false);\n    }\n    if (atom == null && offset < nodeSize(node)) {\n      var after = node.childNodes[offset];\n      if (after.nodeType == 1) return flattenH(after.getBoundingClientRect(), true);\n    }\n    return flattenH(node.getBoundingClientRect(), side >= 0);\n  }\n  // Inline, not in text node (this is not Bidi-safe)\n  if (atom == null && offset && (side < 0 || offset == nodeSize(node))) {\n    var _before = node.childNodes[offset - 1];\n    var target = _before.nodeType == 3 ? textRange(_before, nodeSize(_before) - (supportEmptyRange ? 0 : 1))\n    // BR nodes tend to only return the rectangle before them.\n    // Only use them if they are the last element in their parent\n    : _before.nodeType == 1 && (_before.nodeName != \"BR\" || !_before.nextSibling) ? _before : null;\n    if (target) return flattenV(singleRect(target, 1), false);\n  }\n  if (atom == null && offset < nodeSize(node)) {\n    var _after = node.childNodes[offset];\n    while (_after.pmViewDesc && _after.pmViewDesc.ignoreForCoords) _after = _after.nextSibling;\n    var _target = !_after ? null : _after.nodeType == 3 ? textRange(_after, 0, supportEmptyRange ? 0 : 1) : _after.nodeType == 1 ? _after : null;\n    if (_target) return flattenV(singleRect(_target, -1), true);\n  }\n  // All else failed, just try to get a rectangle for the target node\n  return flattenV(singleRect(node.nodeType == 3 ? textRange(node) : node, -side), side >= 0);\n}\nfunction flattenV(rect, left) {\n  if (rect.width == 0) return rect;\n  var x = left ? rect.left : rect.right;\n  return {\n    top: rect.top,\n    bottom: rect.bottom,\n    left: x,\n    right: x\n  };\n}\nfunction flattenH(rect, top) {\n  if (rect.height == 0) return rect;\n  var y = top ? rect.top : rect.bottom;\n  return {\n    top: y,\n    bottom: y,\n    left: rect.left,\n    right: rect.right\n  };\n}\nfunction withFlushedState(view, state, f) {\n  var viewState = view.state,\n    active = view.root.activeElement;\n  if (viewState != state) view.updateState(state);\n  if (active != view.dom) view.focus();\n  try {\n    return f();\n  } finally {\n    if (viewState != state) view.updateState(viewState);\n    if (active != view.dom && active) active.focus();\n  }\n}\n// Whether vertical position motion in a given direction\n// from a position would leave a text block.\nfunction endOfTextblockVertical(view, state, dir) {\n  var sel = state.selection;\n  var $pos = dir == \"up\" ? sel.$from : sel.$to;\n  return withFlushedState(view, state, function () {\n    var _view$docView$domFrom2 = view.docView.domFromPos($pos.pos, dir == \"up\" ? -1 : 1),\n      dom = _view$docView$domFrom2.node;\n    for (;;) {\n      var nearest = view.docView.nearestDesc(dom, true);\n      if (!nearest) break;\n      if (nearest.node.isBlock) {\n        dom = nearest.contentDOM || nearest.dom;\n        break;\n      }\n      dom = nearest.dom.parentNode;\n    }\n    var coords = _coordsAtPos(view, $pos.pos, 1);\n    for (var child = dom.firstChild; child; child = child.nextSibling) {\n      var boxes = void 0;\n      if (child.nodeType == 1) boxes = child.getClientRects();else if (child.nodeType == 3) boxes = textRange(child, 0, child.nodeValue.length).getClientRects();else continue;\n      for (var i = 0; i < boxes.length; i++) {\n        var box = boxes[i];\n        if (box.bottom > box.top + 1 && (dir == \"up\" ? coords.top - box.top > (box.bottom - coords.top) * 2 : box.bottom - coords.bottom > (coords.bottom - box.top) * 2)) return false;\n      }\n    }\n    return true;\n  });\n}\nvar maybeRTL = /[\\u0590-\\u08ac]/;\nfunction endOfTextblockHorizontal(view, state, dir) {\n  var $head = state.selection.$head;\n  if (!$head.parent.isTextblock) return false;\n  var offset = $head.parentOffset,\n    atStart = !offset,\n    atEnd = offset == $head.parent.content.size;\n  var sel = view.domSelection();\n  if (!sel) return $head.pos == $head.start() || $head.pos == $head.end();\n  // If the textblock is all LTR, or the browser doesn't support\n  // Selection.modify (Edge), fall back to a primitive approach\n  if (!maybeRTL.test($head.parent.textContent) || !sel.modify) return dir == \"left\" || dir == \"backward\" ? atStart : atEnd;\n  return withFlushedState(view, state, function () {\n    // This is a huge hack, but appears to be the best we can\n    // currently do: use `Selection.modify` to move the selection by\n    // one character, and see if that moves the cursor out of the\n    // textblock (or doesn't move it at all, when at the start/end of\n    // the document).\n    var _view$domSelectionRan = view.domSelectionRange(),\n      oldNode = _view$domSelectionRan.focusNode,\n      oldOff = _view$domSelectionRan.focusOffset,\n      anchorNode = _view$domSelectionRan.anchorNode,\n      anchorOffset = _view$domSelectionRan.anchorOffset;\n    var oldBidiLevel = sel.caretBidiLevel // Only for Firefox\n    ;\n\n    sel.modify(\"move\", dir, \"character\");\n    var parentDOM = $head.depth ? view.docView.domAfterPos($head.before()) : view.dom;\n    var _view$domSelectionRan2 = view.domSelectionRange(),\n      newNode = _view$domSelectionRan2.focusNode,\n      newOff = _view$domSelectionRan2.focusOffset;\n    var result = newNode && !parentDOM.contains(newNode.nodeType == 1 ? newNode : newNode.parentNode) || oldNode == newNode && oldOff == newOff;\n    // Restore the previous selection\n    try {\n      sel.collapse(anchorNode, anchorOffset);\n      if (oldNode && (oldNode != anchorNode || oldOff != anchorOffset) && sel.extend) sel.extend(oldNode, oldOff);\n    } catch (_) {}\n    if (oldBidiLevel != null) sel.caretBidiLevel = oldBidiLevel;\n    return result;\n  });\n}\nvar cachedState = null;\nvar cachedDir = null;\nvar cachedResult = false;\nfunction _endOfTextblock(view, state, dir) {\n  if (cachedState == state && cachedDir == dir) return cachedResult;\n  cachedState = state;\n  cachedDir = dir;\n  return cachedResult = dir == \"up\" || dir == \"down\" ? endOfTextblockVertical(view, state, dir) : endOfTextblockHorizontal(view, state, dir);\n}\n\n// View descriptions are data structures that describe the DOM that is\n// used to represent the editor's content. They are used for:\n//\n// - Incremental redrawing when the document changes\n//\n// - Figuring out what part of the document a given DOM position\n//   corresponds to\n//\n// - Wiring in custom implementations of the editing interface for a\n//   given node\n//\n// They form a doubly-linked mutable tree, starting at `view.docView`.\nvar NOT_DIRTY = 0,\n  CHILD_DIRTY = 1,\n  CONTENT_DIRTY = 2,\n  NODE_DIRTY = 3;\n// Superclass for the various kinds of descriptions. Defines their\n// basic structure and shared methods.\nvar ViewDesc = /*#__PURE__*/function () {\n  function ViewDesc(parent, children, dom,\n  // This is the node that holds the child views. It may be null for\n  // descs that don't have children.\n  contentDOM) {\n    _classCallCheck(this, ViewDesc);\n    this.parent = parent;\n    this.children = children;\n    this.dom = dom;\n    this.contentDOM = contentDOM;\n    this.dirty = NOT_DIRTY;\n    // An expando property on the DOM node provides a link back to its\n    // description.\n    dom.pmViewDesc = this;\n  }\n  // Used to check whether a given description corresponds to a\n  // widget/mark/node.\n  return _createClass(ViewDesc, [{\n    key: \"matchesWidget\",\n    value: function matchesWidget(widget) {\n      return false;\n    }\n  }, {\n    key: \"matchesMark\",\n    value: function matchesMark(mark) {\n      return false;\n    }\n  }, {\n    key: \"matchesNode\",\n    value: function matchesNode(node, outerDeco, innerDeco) {\n      return false;\n    }\n  }, {\n    key: \"matchesHack\",\n    value: function matchesHack(nodeName) {\n      return false;\n    }\n    // When parsing in-editor content (in domchange.js), we allow\n    // descriptions to determine the parse rules that should be used to\n    // parse them.\n  }, {\n    key: \"parseRule\",\n    value: function parseRule() {\n      return null;\n    }\n    // Used by the editor's event handler to ignore events that come\n    // from certain descs.\n  }, {\n    key: \"stopEvent\",\n    value: function stopEvent(event) {\n      return false;\n    }\n    // The size of the content represented by this desc.\n  }, {\n    key: \"size\",\n    get: function get() {\n      var size = 0;\n      for (var i = 0; i < this.children.length; i++) size += this.children[i].size;\n      return size;\n    }\n    // For block nodes, this represents the space taken up by their\n    // start/end tokens.\n  }, {\n    key: \"border\",\n    get: function get() {\n      return 0;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.parent = undefined;\n      if (this.dom.pmViewDesc == this) this.dom.pmViewDesc = undefined;\n      for (var i = 0; i < this.children.length; i++) this.children[i].destroy();\n    }\n  }, {\n    key: \"posBeforeChild\",\n    value: function posBeforeChild(child) {\n      for (var i = 0, pos = this.posAtStart;; i++) {\n        var cur = this.children[i];\n        if (cur == child) return pos;\n        pos += cur.size;\n      }\n    }\n  }, {\n    key: \"posBefore\",\n    get: function get() {\n      return this.parent.posBeforeChild(this);\n    }\n  }, {\n    key: \"posAtStart\",\n    get: function get() {\n      return this.parent ? this.parent.posBeforeChild(this) + this.border : 0;\n    }\n  }, {\n    key: \"posAfter\",\n    get: function get() {\n      return this.posBefore + this.size;\n    }\n  }, {\n    key: \"posAtEnd\",\n    get: function get() {\n      return this.posAtStart + this.size - 2 * this.border;\n    }\n  }, {\n    key: \"localPosFromDOM\",\n    value: function localPosFromDOM(dom, offset, bias) {\n      // If the DOM position is in the content, use the child desc after\n      // it to figure out a position.\n      if (this.contentDOM && this.contentDOM.contains(dom.nodeType == 1 ? dom : dom.parentNode)) {\n        if (bias < 0) {\n          var domBefore, desc;\n          if (dom == this.contentDOM) {\n            domBefore = dom.childNodes[offset - 1];\n          } else {\n            while (dom.parentNode != this.contentDOM) dom = dom.parentNode;\n            domBefore = dom.previousSibling;\n          }\n          while (domBefore && !((desc = domBefore.pmViewDesc) && desc.parent == this)) domBefore = domBefore.previousSibling;\n          return domBefore ? this.posBeforeChild(desc) + desc.size : this.posAtStart;\n        } else {\n          var domAfter, _desc;\n          if (dom == this.contentDOM) {\n            domAfter = dom.childNodes[offset];\n          } else {\n            while (dom.parentNode != this.contentDOM) dom = dom.parentNode;\n            domAfter = dom.nextSibling;\n          }\n          while (domAfter && !((_desc = domAfter.pmViewDesc) && _desc.parent == this)) domAfter = domAfter.nextSibling;\n          return domAfter ? this.posBeforeChild(_desc) : this.posAtEnd;\n        }\n      }\n      // Otherwise, use various heuristics, falling back on the bias\n      // parameter, to determine whether to return the position at the\n      // start or at the end of this view desc.\n      var atEnd;\n      if (dom == this.dom && this.contentDOM) {\n        atEnd = offset > domIndex(this.contentDOM);\n      } else if (this.contentDOM && this.contentDOM != this.dom && this.dom.contains(this.contentDOM)) {\n        atEnd = dom.compareDocumentPosition(this.contentDOM) & 2;\n      } else if (this.dom.firstChild) {\n        if (offset == 0) for (var search = dom;; search = search.parentNode) {\n          if (search == this.dom) {\n            atEnd = false;\n            break;\n          }\n          if (search.previousSibling) break;\n        }\n        if (atEnd == null && offset == dom.childNodes.length) for (var _search = dom;; _search = _search.parentNode) {\n          if (_search == this.dom) {\n            atEnd = true;\n            break;\n          }\n          if (_search.nextSibling) break;\n        }\n      }\n      return (atEnd == null ? bias > 0 : atEnd) ? this.posAtEnd : this.posAtStart;\n    }\n  }, {\n    key: \"nearestDesc\",\n    value: function nearestDesc(dom) {\n      var onlyNodes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      for (var first = true, cur = dom; cur; cur = cur.parentNode) {\n        var desc = this.getDesc(cur),\n          nodeDOM = void 0;\n        if (desc && (!onlyNodes || desc.node)) {\n          // If dom is outside of this desc's nodeDOM, don't count it.\n          if (first && (nodeDOM = desc.nodeDOM) && !(nodeDOM.nodeType == 1 ? nodeDOM.contains(dom.nodeType == 1 ? dom : dom.parentNode) : nodeDOM == dom)) first = false;else return desc;\n        }\n      }\n    }\n  }, {\n    key: \"getDesc\",\n    value: function getDesc(dom) {\n      var desc = dom.pmViewDesc;\n      for (var cur = desc; cur; cur = cur.parent) if (cur == this) return desc;\n    }\n  }, {\n    key: \"posFromDOM\",\n    value: function posFromDOM(dom, offset, bias) {\n      for (var scan = dom; scan; scan = scan.parentNode) {\n        var desc = this.getDesc(scan);\n        if (desc) return desc.localPosFromDOM(dom, offset, bias);\n      }\n      return -1;\n    }\n    // Find the desc for the node after the given pos, if any. (When a\n    // parent node overrode rendering, there might not be one.)\n  }, {\n    key: \"descAt\",\n    value: function descAt(pos) {\n      for (var i = 0, offset = 0; i < this.children.length; i++) {\n        var child = this.children[i],\n          end = offset + child.size;\n        if (offset == pos && end != offset) {\n          while (!child.border && child.children.length) {\n            for (var _i = 0; _i < child.children.length; _i++) {\n              var inner = child.children[_i];\n              if (inner.size) {\n                child = inner;\n                break;\n              }\n            }\n          }\n          return child;\n        }\n        if (pos < end) return child.descAt(pos - offset - child.border);\n        offset = end;\n      }\n    }\n  }, {\n    key: \"domFromPos\",\n    value: function domFromPos(pos, side) {\n      if (!this.contentDOM) return {\n        node: this.dom,\n        offset: 0,\n        atom: pos + 1\n      };\n      // First find the position in the child array\n      var i = 0,\n        offset = 0;\n      for (var curPos = 0; i < this.children.length; i++) {\n        var child = this.children[i],\n          end = curPos + child.size;\n        if (end > pos || child instanceof TrailingHackViewDesc) {\n          offset = pos - curPos;\n          break;\n        }\n        curPos = end;\n      }\n      // If this points into the middle of a child, call through\n      if (offset) return this.children[i].domFromPos(offset - this.children[i].border, side);\n      // Go back if there were any zero-length widgets with side >= 0 before this point\n      for (var prev; i && !(prev = this.children[i - 1]).size && prev instanceof WidgetViewDesc && prev.side >= 0; i--) {}\n      // Scan towards the first useable node\n      if (side <= 0) {\n        var _prev,\n          enter = true;\n        for (;; i--, enter = false) {\n          _prev = i ? this.children[i - 1] : null;\n          if (!_prev || _prev.dom.parentNode == this.contentDOM) break;\n        }\n        if (_prev && side && enter && !_prev.border && !_prev.domAtom) return _prev.domFromPos(_prev.size, side);\n        return {\n          node: this.contentDOM,\n          offset: _prev ? domIndex(_prev.dom) + 1 : 0\n        };\n      } else {\n        var next,\n          _enter = true;\n        for (;; i++, _enter = false) {\n          next = i < this.children.length ? this.children[i] : null;\n          if (!next || next.dom.parentNode == this.contentDOM) break;\n        }\n        if (next && _enter && !next.border && !next.domAtom) return next.domFromPos(0, side);\n        return {\n          node: this.contentDOM,\n          offset: next ? domIndex(next.dom) : this.contentDOM.childNodes.length\n        };\n      }\n    }\n    // Used to find a DOM range in a single parent for a given changed\n    // range.\n  }, {\n    key: \"parseRange\",\n    value: function parseRange(from, to) {\n      var base = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      if (this.children.length == 0) return {\n        node: this.contentDOM,\n        from: from,\n        to: to,\n        fromOffset: 0,\n        toOffset: this.contentDOM.childNodes.length\n      };\n      var fromOffset = -1,\n        toOffset = -1;\n      for (var offset = base, i = 0;; i++) {\n        var child = this.children[i],\n          end = offset + child.size;\n        if (fromOffset == -1 && from <= end) {\n          var childBase = offset + child.border;\n          // FIXME maybe descend mark views to parse a narrower range?\n          if (from >= childBase && to <= end - child.border && child.node && child.contentDOM && this.contentDOM.contains(child.contentDOM)) return child.parseRange(from, to, childBase);\n          from = offset;\n          for (var j = i; j > 0; j--) {\n            var prev = this.children[j - 1];\n            if (prev.size && prev.dom.parentNode == this.contentDOM && !prev.emptyChildAt(1)) {\n              fromOffset = domIndex(prev.dom) + 1;\n              break;\n            }\n            from -= prev.size;\n          }\n          if (fromOffset == -1) fromOffset = 0;\n        }\n        if (fromOffset > -1 && (end > to || i == this.children.length - 1)) {\n          to = end;\n          for (var _j = i + 1; _j < this.children.length; _j++) {\n            var next = this.children[_j];\n            if (next.size && next.dom.parentNode == this.contentDOM && !next.emptyChildAt(-1)) {\n              toOffset = domIndex(next.dom);\n              break;\n            }\n            to += next.size;\n          }\n          if (toOffset == -1) toOffset = this.contentDOM.childNodes.length;\n          break;\n        }\n        offset = end;\n      }\n      return {\n        node: this.contentDOM,\n        from: from,\n        to: to,\n        fromOffset: fromOffset,\n        toOffset: toOffset\n      };\n    }\n  }, {\n    key: \"emptyChildAt\",\n    value: function emptyChildAt(side) {\n      if (this.border || !this.contentDOM || !this.children.length) return false;\n      var child = this.children[side < 0 ? 0 : this.children.length - 1];\n      return child.size == 0 || child.emptyChildAt(side);\n    }\n  }, {\n    key: \"domAfterPos\",\n    value: function domAfterPos(pos) {\n      var _this$domFromPos = this.domFromPos(pos, 0),\n        node = _this$domFromPos.node,\n        offset = _this$domFromPos.offset;\n      if (node.nodeType != 1 || offset == node.childNodes.length) throw new RangeError(\"No node after pos \" + pos);\n      return node.childNodes[offset];\n    }\n    // View descs are responsible for setting any selection that falls\n    // entirely inside of them, so that custom implementations can do\n    // custom things with the selection. Note that this falls apart when\n    // a selection starts in such a node and ends in another, in which\n    // case we just use whatever domFromPos produces as a best effort.\n  }, {\n    key: \"setSelection\",\n    value: function setSelection(anchor, head, view) {\n      var force = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      // If the selection falls entirely in a child, give it to that child\n      var from = Math.min(anchor, head),\n        to = Math.max(anchor, head);\n      for (var i = 0, offset = 0; i < this.children.length; i++) {\n        var child = this.children[i],\n          end = offset + child.size;\n        if (from > offset && to < end) return child.setSelection(anchor - offset - child.border, head - offset - child.border, view, force);\n        offset = end;\n      }\n      var anchorDOM = this.domFromPos(anchor, anchor ? -1 : 1);\n      var headDOM = head == anchor ? anchorDOM : this.domFromPos(head, head ? -1 : 1);\n      var domSel = view.root.getSelection();\n      var selRange = view.domSelectionRange();\n      var brKludge = false;\n      // On Firefox, using Selection.collapse to put the cursor after a\n      // BR node for some reason doesn't always work (#1073). On Safari,\n      // the cursor sometimes inexplicable visually lags behind its\n      // reported position in such situations (#1092).\n      if ((gecko || safari) && anchor == head) {\n        var _anchorDOM = anchorDOM,\n          node = _anchorDOM.node,\n          _offset = _anchorDOM.offset;\n        if (node.nodeType == 3) {\n          brKludge = !!(_offset && node.nodeValue[_offset - 1] == \"\\n\");\n          // Issue #1128\n          if (brKludge && _offset == node.nodeValue.length) {\n            for (var scan = node, after; scan; scan = scan.parentNode) {\n              if (after = scan.nextSibling) {\n                if (after.nodeName == \"BR\") anchorDOM = headDOM = {\n                  node: after.parentNode,\n                  offset: domIndex(after) + 1\n                };\n                break;\n              }\n              var desc = scan.pmViewDesc;\n              if (desc && desc.node && desc.node.isBlock) break;\n            }\n          }\n        } else {\n          var prev = node.childNodes[_offset - 1];\n          brKludge = prev && (prev.nodeName == \"BR\" || prev.contentEditable == \"false\");\n        }\n      }\n      // Firefox can act strangely when the selection is in front of an\n      // uneditable node. See #1163 and https://bugzilla.mozilla.org/show_bug.cgi?id=1709536\n      if (gecko && selRange.focusNode && selRange.focusNode != headDOM.node && selRange.focusNode.nodeType == 1) {\n        var _after2 = selRange.focusNode.childNodes[selRange.focusOffset];\n        if (_after2 && _after2.contentEditable == \"false\") force = true;\n      }\n      if (!(force || brKludge && safari) && isEquivalentPosition(anchorDOM.node, anchorDOM.offset, selRange.anchorNode, selRange.anchorOffset) && isEquivalentPosition(headDOM.node, headDOM.offset, selRange.focusNode, selRange.focusOffset)) return;\n      // Selection.extend can be used to create an 'inverted' selection\n      // (one where the focus is before the anchor), but not all\n      // browsers support it yet.\n      var domSelExtended = false;\n      if ((domSel.extend || anchor == head) && !brKludge) {\n        domSel.collapse(anchorDOM.node, anchorDOM.offset);\n        try {\n          if (anchor != head) domSel.extend(headDOM.node, headDOM.offset);\n          domSelExtended = true;\n        } catch (_) {\n          // In some cases with Chrome the selection is empty after calling\n          // collapse, even when it should be valid. This appears to be a bug, but\n          // it is difficult to isolate. If this happens fallback to the old path\n          // without using extend.\n          // Similarly, this could crash on Safari if the editor is hidden, and\n          // there was no selection.\n        }\n      }\n      if (!domSelExtended) {\n        if (anchor > head) {\n          var tmp = anchorDOM;\n          anchorDOM = headDOM;\n          headDOM = tmp;\n        }\n        var range = document.createRange();\n        range.setEnd(headDOM.node, headDOM.offset);\n        range.setStart(anchorDOM.node, anchorDOM.offset);\n        domSel.removeAllRanges();\n        domSel.addRange(range);\n      }\n    }\n  }, {\n    key: \"ignoreMutation\",\n    value: function ignoreMutation(mutation) {\n      return !this.contentDOM && mutation.type != \"selection\";\n    }\n  }, {\n    key: \"contentLost\",\n    get: function get() {\n      return this.contentDOM && this.contentDOM != this.dom && !this.dom.contains(this.contentDOM);\n    }\n    // Remove a subtree of the element tree that has been touched\n    // by a DOM change, so that the next update will redraw it.\n  }, {\n    key: \"markDirty\",\n    value: function markDirty(from, to) {\n      for (var offset = 0, i = 0; i < this.children.length; i++) {\n        var child = this.children[i],\n          end = offset + child.size;\n        if (offset == end ? from <= end && to >= offset : from < end && to > offset) {\n          var startInside = offset + child.border,\n            endInside = end - child.border;\n          if (from >= startInside && to <= endInside) {\n            this.dirty = from == offset || to == end ? CONTENT_DIRTY : CHILD_DIRTY;\n            if (from == startInside && to == endInside && (child.contentLost || child.dom.parentNode != this.contentDOM)) child.dirty = NODE_DIRTY;else child.markDirty(from - startInside, to - startInside);\n            return;\n          } else {\n            child.dirty = child.dom == child.contentDOM && child.dom.parentNode == this.contentDOM && !child.children.length ? CONTENT_DIRTY : NODE_DIRTY;\n          }\n        }\n        offset = end;\n      }\n      this.dirty = CONTENT_DIRTY;\n    }\n  }, {\n    key: \"markParentsDirty\",\n    value: function markParentsDirty() {\n      var level = 1;\n      for (var node = this.parent; node; node = node.parent, level++) {\n        var dirty = level == 1 ? CONTENT_DIRTY : CHILD_DIRTY;\n        if (node.dirty < dirty) node.dirty = dirty;\n      }\n    }\n  }, {\n    key: \"domAtom\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"ignoreForCoords\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"isText\",\n    value: function isText(text) {\n      return false;\n    }\n  }]);\n}(); // A widget desc represents a widget decoration, which is a DOM node\n// drawn between the document nodes.\nvar WidgetViewDesc = /*#__PURE__*/function (_ViewDesc) {\n  function WidgetViewDesc(parent, widget, view, pos) {\n    var _this2;\n    _classCallCheck(this, WidgetViewDesc);\n    var self,\n      dom = widget.type.toDOM;\n    if (typeof dom == \"function\") dom = dom(view, function () {\n      if (!self) return pos;\n      if (self.parent) return self.parent.posBeforeChild(self);\n    });\n    if (!widget.type.spec.raw) {\n      if (dom.nodeType != 1) {\n        var wrap = document.createElement(\"span\");\n        wrap.appendChild(dom);\n        dom = wrap;\n      }\n      dom.contentEditable = \"false\";\n      dom.classList.add(\"ProseMirror-widget\");\n    }\n    _this2 = _callSuper(this, WidgetViewDesc, [parent, [], dom, null]);\n    _this2.widget = widget;\n    _this2.widget = widget;\n    self = _this2;\n    return _this2;\n  }\n  _inherits(WidgetViewDesc, _ViewDesc);\n  return _createClass(WidgetViewDesc, [{\n    key: \"matchesWidget\",\n    value: function matchesWidget(widget) {\n      return this.dirty == NOT_DIRTY && widget.type.eq(this.widget.type);\n    }\n  }, {\n    key: \"parseRule\",\n    value: function parseRule() {\n      return {\n        ignore: true\n      };\n    }\n  }, {\n    key: \"stopEvent\",\n    value: function stopEvent(event) {\n      var stop = this.widget.spec.stopEvent;\n      return stop ? stop(event) : false;\n    }\n  }, {\n    key: \"ignoreMutation\",\n    value: function ignoreMutation(mutation) {\n      return mutation.type != \"selection\" || this.widget.spec.ignoreSelection;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.widget.type.destroy(this.dom);\n      _get(_getPrototypeOf(WidgetViewDesc.prototype), \"destroy\", this).call(this);\n    }\n  }, {\n    key: \"domAtom\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"side\",\n    get: function get() {\n      return this.widget.type.side;\n    }\n  }]);\n}(ViewDesc);\nvar CompositionViewDesc = /*#__PURE__*/function (_ViewDesc2) {\n  function CompositionViewDesc(parent, dom, textDOM, text) {\n    var _this3;\n    _classCallCheck(this, CompositionViewDesc);\n    _this3 = _callSuper(this, CompositionViewDesc, [parent, [], dom, null]);\n    _this3.textDOM = textDOM;\n    _this3.text = text;\n    return _this3;\n  }\n  _inherits(CompositionViewDesc, _ViewDesc2);\n  return _createClass(CompositionViewDesc, [{\n    key: \"size\",\n    get: function get() {\n      return this.text.length;\n    }\n  }, {\n    key: \"localPosFromDOM\",\n    value: function localPosFromDOM(dom, offset) {\n      if (dom != this.textDOM) return this.posAtStart + (offset ? this.size : 0);\n      return this.posAtStart + offset;\n    }\n  }, {\n    key: \"domFromPos\",\n    value: function domFromPos(pos) {\n      return {\n        node: this.textDOM,\n        offset: pos\n      };\n    }\n  }, {\n    key: \"ignoreMutation\",\n    value: function ignoreMutation(mut) {\n      return mut.type === 'characterData' && mut.target.nodeValue == mut.oldValue;\n    }\n  }]);\n}(ViewDesc); // A mark desc represents a mark. May have multiple children,\n// depending on how the mark is split. Note that marks are drawn using\n// a fixed nesting order, for simplicity and predictability, so in\n// some cases they will be split more often than would appear\n// necessary.\nvar MarkViewDesc = /*#__PURE__*/function (_ViewDesc3) {\n  function MarkViewDesc(parent, mark, dom, contentDOM, spec) {\n    var _this4;\n    _classCallCheck(this, MarkViewDesc);\n    _this4 = _callSuper(this, MarkViewDesc, [parent, [], dom, contentDOM]);\n    _this4.mark = mark;\n    _this4.spec = spec;\n    return _this4;\n  }\n  _inherits(MarkViewDesc, _ViewDesc3);\n  return _createClass(MarkViewDesc, [{\n    key: \"parseRule\",\n    value: function parseRule() {\n      if (this.dirty & NODE_DIRTY || this.mark.type.spec.reparseInView) return null;\n      return {\n        mark: this.mark.type.name,\n        attrs: this.mark.attrs,\n        contentElement: this.contentDOM\n      };\n    }\n  }, {\n    key: \"matchesMark\",\n    value: function matchesMark(mark) {\n      return this.dirty != NODE_DIRTY && this.mark.eq(mark);\n    }\n  }, {\n    key: \"markDirty\",\n    value: function markDirty(from, to) {\n      _get(_getPrototypeOf(MarkViewDesc.prototype), \"markDirty\", this).call(this, from, to);\n      // Move dirty info to nearest node view\n      if (this.dirty != NOT_DIRTY) {\n        var parent = this.parent;\n        while (!parent.node) parent = parent.parent;\n        if (parent.dirty < this.dirty) parent.dirty = this.dirty;\n        this.dirty = NOT_DIRTY;\n      }\n    }\n  }, {\n    key: \"slice\",\n    value: function slice(from, to, view) {\n      var copy = MarkViewDesc.create(this.parent, this.mark, true, view);\n      var nodes = this.children,\n        size = this.size;\n      if (to < size) nodes = replaceNodes(nodes, to, size, view);\n      if (from > 0) nodes = replaceNodes(nodes, 0, from, view);\n      for (var i = 0; i < nodes.length; i++) nodes[i].parent = copy;\n      copy.children = nodes;\n      return copy;\n    }\n  }, {\n    key: \"ignoreMutation\",\n    value: function ignoreMutation(mutation) {\n      return this.spec.ignoreMutation ? this.spec.ignoreMutation(mutation) : _get(_getPrototypeOf(MarkViewDesc.prototype), \"ignoreMutation\", this).call(this, mutation);\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.spec.destroy) this.spec.destroy();\n      _get(_getPrototypeOf(MarkViewDesc.prototype), \"destroy\", this).call(this);\n    }\n  }], [{\n    key: \"create\",\n    value: function create(parent, mark, inline, view) {\n      var custom = view.nodeViews[mark.type.name];\n      var spec = custom && custom(mark, view, inline);\n      if (!spec || !spec.dom) spec = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.DOMSerializer.renderSpec(document, mark.type.spec.toDOM(mark, inline), null, mark.attrs);\n      return new MarkViewDesc(parent, mark, spec.dom, spec.contentDOM || spec.dom, spec);\n    }\n  }]);\n}(ViewDesc); // Node view descs are the main, most common type of view desc, and\n// correspond to an actual node in the document. Unlike mark descs,\n// they populate their child array themselves.\nvar NodeViewDesc = /*#__PURE__*/function (_ViewDesc4) {\n  function NodeViewDesc(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, view, pos) {\n    var _this5;\n    _classCallCheck(this, NodeViewDesc);\n    _this5 = _callSuper(this, NodeViewDesc, [parent, [], dom, contentDOM]);\n    _this5.node = node;\n    _this5.outerDeco = outerDeco;\n    _this5.innerDeco = innerDeco;\n    _this5.nodeDOM = nodeDOM;\n    return _this5;\n  }\n  // By default, a node is rendered using the `toDOM` method from the\n  // node type spec. But client code can use the `nodeViews` spec to\n  // supply a custom node view, which can influence various aspects of\n  // the way the node works.\n  //\n  // (Using subclassing for this was intentionally decided against,\n  // since it'd require exposing a whole slew of finicky\n  // implementation details to the user code that they probably will\n  // never need.)\n  _inherits(NodeViewDesc, _ViewDesc4);\n  return _createClass(NodeViewDesc, [{\n    key: \"parseRule\",\n    value: function parseRule() {\n      var _this6 = this;\n      // Experimental kludge to allow opt-in re-parsing of nodes\n      if (this.node.type.spec.reparseInView) return null;\n      // FIXME the assumption that this can always return the current\n      // attrs means that if the user somehow manages to change the\n      // attrs in the dom, that won't be picked up. Not entirely sure\n      // whether this is a problem\n      var rule = {\n        node: this.node.type.name,\n        attrs: this.node.attrs\n      };\n      if (this.node.type.whitespace == \"pre\") rule.preserveWhitespace = \"full\";\n      if (!this.contentDOM) {\n        rule.getContent = function () {\n          return _this6.node.content;\n        };\n      } else if (!this.contentLost) {\n        rule.contentElement = this.contentDOM;\n      } else {\n        // Chrome likes to randomly recreate parent nodes when\n        // backspacing things. When that happens, this tries to find the\n        // new parent.\n        for (var i = this.children.length - 1; i >= 0; i--) {\n          var child = this.children[i];\n          if (this.dom.contains(child.dom.parentNode)) {\n            rule.contentElement = child.dom.parentNode;\n            break;\n          }\n        }\n        if (!rule.contentElement) rule.getContent = function () {\n          return prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty;\n        };\n      }\n      return rule;\n    }\n  }, {\n    key: \"matchesNode\",\n    value: function matchesNode(node, outerDeco, innerDeco) {\n      return this.dirty == NOT_DIRTY && node.eq(this.node) && sameOuterDeco(outerDeco, this.outerDeco) && innerDeco.eq(this.innerDeco);\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this.node.nodeSize;\n    }\n  }, {\n    key: \"border\",\n    get: function get() {\n      return this.node.isLeaf ? 0 : 1;\n    }\n    // Syncs `this.children` to match `this.node.content` and the local\n    // decorations, possibly introducing nesting for marks. Then, in a\n    // separate step, syncs the DOM inside `this.contentDOM` to\n    // `this.children`.\n  }, {\n    key: \"updateChildren\",\n    value: function updateChildren(view, pos) {\n      var _this7 = this;\n      var inline = this.node.inlineContent,\n        off = pos;\n      var composition = view.composing ? this.localCompositionInfo(view, pos) : null;\n      var localComposition = composition && composition.pos > -1 ? composition : null;\n      var compositionInChild = composition && composition.pos < 0;\n      var updater = new ViewTreeUpdater(this, localComposition && localComposition.node, view);\n      iterDeco(this.node, this.innerDeco, function (widget, i, insideNode) {\n        if (widget.spec.marks) updater.syncToMarks(widget.spec.marks, inline, view);else if (widget.type.side >= 0 && !insideNode) updater.syncToMarks(i == _this7.node.childCount ? prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Mark.none : _this7.node.child(i).marks, inline, view);\n        // If the next node is a desc matching this widget, reuse it,\n        // otherwise insert the widget as a new view desc.\n        updater.placeWidget(widget, view, off);\n      }, function (child, outerDeco, innerDeco, i) {\n        // Make sure the wrapping mark descs match the node's marks.\n        updater.syncToMarks(child.marks, inline, view);\n        // Try several strategies for drawing this node\n        var compIndex;\n        if (updater.findNodeMatch(child, outerDeco, innerDeco, i)) ;else if (compositionInChild && view.state.selection.from > off && view.state.selection.to < off + child.nodeSize && (compIndex = updater.findIndexWithChild(composition.node)) > -1 && updater.updateNodeAt(child, outerDeco, innerDeco, compIndex, view)) ;else if (updater.updateNextNode(child, outerDeco, innerDeco, view, i, off)) ;else {\n          // Add it as a new view\n          updater.addNode(child, outerDeco, innerDeco, view, off);\n        }\n        off += child.nodeSize;\n      });\n      // Drop all remaining descs after the current position.\n      updater.syncToMarks([], inline, view);\n      if (this.node.isTextblock) updater.addTextblockHacks();\n      updater.destroyRest();\n      // Sync the DOM if anything changed\n      if (updater.changed || this.dirty == CONTENT_DIRTY) {\n        // May have to protect focused DOM from being changed if a composition is active\n        if (localComposition) this.protectLocalComposition(view, localComposition);\n        renderDescs(this.contentDOM, this.children, view);\n        if (ios) iosHacks(this.dom);\n      }\n    }\n  }, {\n    key: \"localCompositionInfo\",\n    value: function localCompositionInfo(view, pos) {\n      // Only do something if both the selection and a focused text node\n      // are inside of this node\n      var _view$state$selection = view.state.selection,\n        from = _view$state$selection.from,\n        to = _view$state$selection.to;\n      if (!(view.state.selection instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection) || from < pos || to > pos + this.node.content.size) return null;\n      var textNode = view.input.compositionNode;\n      if (!textNode || !this.dom.contains(textNode.parentNode)) return null;\n      if (this.node.inlineContent) {\n        // Find the text in the focused node in the node, stop if it's not\n        // there (may have been modified through other means, in which\n        // case it should overwritten)\n        var text = textNode.nodeValue;\n        var textPos = findTextInFragment(this.node.content, text, from - pos, to - pos);\n        return textPos < 0 ? null : {\n          node: textNode,\n          pos: textPos,\n          text: text\n        };\n      } else {\n        return {\n          node: textNode,\n          pos: -1,\n          text: \"\"\n        };\n      }\n    }\n  }, {\n    key: \"protectLocalComposition\",\n    value: function protectLocalComposition(view, _ref2) {\n      var node = _ref2.node,\n        pos = _ref2.pos,\n        text = _ref2.text;\n      // The node is already part of a local view desc, leave it there\n      if (this.getDesc(node)) return;\n      // Create a composition view for the orphaned nodes\n      var topNode = node;\n      for (;; topNode = topNode.parentNode) {\n        if (topNode.parentNode == this.contentDOM) break;\n        while (topNode.previousSibling) topNode.parentNode.removeChild(topNode.previousSibling);\n        while (topNode.nextSibling) topNode.parentNode.removeChild(topNode.nextSibling);\n        if (topNode.pmViewDesc) topNode.pmViewDesc = undefined;\n      }\n      var desc = new CompositionViewDesc(this, topNode, node, text);\n      view.input.compositionNodes.push(desc);\n      // Patch up this.children to contain the composition view\n      this.children = replaceNodes(this.children, pos, pos + text.length, view, desc);\n    }\n    // If this desc must be updated to match the given node decoration,\n    // do so and return true.\n  }, {\n    key: \"update\",\n    value: function update(node, outerDeco, innerDeco, view) {\n      if (this.dirty == NODE_DIRTY || !node.sameMarkup(this.node)) return false;\n      this.updateInner(node, outerDeco, innerDeco, view);\n      return true;\n    }\n  }, {\n    key: \"updateInner\",\n    value: function updateInner(node, outerDeco, innerDeco, view) {\n      this.updateOuterDeco(outerDeco);\n      this.node = node;\n      this.innerDeco = innerDeco;\n      if (this.contentDOM) this.updateChildren(view, this.posAtStart);\n      this.dirty = NOT_DIRTY;\n    }\n  }, {\n    key: \"updateOuterDeco\",\n    value: function updateOuterDeco(outerDeco) {\n      if (sameOuterDeco(outerDeco, this.outerDeco)) return;\n      var needsWrap = this.nodeDOM.nodeType != 1;\n      var oldDOM = this.dom;\n      this.dom = patchOuterDeco(this.dom, this.nodeDOM, computeOuterDeco(this.outerDeco, this.node, needsWrap), computeOuterDeco(outerDeco, this.node, needsWrap));\n      if (this.dom != oldDOM) {\n        oldDOM.pmViewDesc = undefined;\n        this.dom.pmViewDesc = this;\n      }\n      this.outerDeco = outerDeco;\n    }\n    // Mark this node as being the selected node.\n  }, {\n    key: \"selectNode\",\n    value: function selectNode() {\n      if (this.nodeDOM.nodeType == 1) this.nodeDOM.classList.add(\"ProseMirror-selectednode\");\n      if (this.contentDOM || !this.node.type.spec.draggable) this.dom.draggable = true;\n    }\n    // Remove selected node marking from this node.\n  }, {\n    key: \"deselectNode\",\n    value: function deselectNode() {\n      if (this.nodeDOM.nodeType == 1) {\n        this.nodeDOM.classList.remove(\"ProseMirror-selectednode\");\n        if (this.contentDOM || !this.node.type.spec.draggable) this.dom.removeAttribute(\"draggable\");\n      }\n    }\n  }, {\n    key: \"domAtom\",\n    get: function get() {\n      return this.node.isAtom;\n    }\n  }], [{\n    key: \"create\",\n    value: function create(parent, node, outerDeco, innerDeco, view, pos) {\n      var custom = view.nodeViews[node.type.name],\n        descObj;\n      var spec = custom && custom(node, view, function () {\n        // (This is a function that allows the custom view to find its\n        // own position)\n        if (!descObj) return pos;\n        if (descObj.parent) return descObj.parent.posBeforeChild(descObj);\n      }, outerDeco, innerDeco);\n      var dom = spec && spec.dom,\n        contentDOM = spec && spec.contentDOM;\n      if (node.isText) {\n        if (!dom) dom = document.createTextNode(node.text);else if (dom.nodeType != 3) throw new RangeError(\"Text must be rendered as a DOM text node\");\n      } else if (!dom) {\n        var _spec = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.DOMSerializer.renderSpec(document, node.type.spec.toDOM(node), null, node.attrs);\n        dom = _spec.dom;\n        contentDOM = _spec.contentDOM;\n      }\n      if (!contentDOM && !node.isText && dom.nodeName != \"BR\") {\n        // Chrome gets confused by <br contenteditable=false>\n        if (!dom.hasAttribute(\"contenteditable\")) dom.contentEditable = \"false\";\n        if (node.type.spec.draggable) dom.draggable = true;\n      }\n      var nodeDOM = dom;\n      dom = applyOuterDeco(dom, outerDeco, node);\n      if (spec) return descObj = new CustomNodeViewDesc(parent, node, outerDeco, innerDeco, dom, contentDOM || null, nodeDOM, spec, view, pos + 1);else if (node.isText) return new TextViewDesc(parent, node, outerDeco, innerDeco, dom, nodeDOM, view);else return new NodeViewDesc(parent, node, outerDeco, innerDeco, dom, contentDOM || null, nodeDOM, view, pos + 1);\n    }\n  }]);\n}(ViewDesc); // Create a view desc for the top-level document node, to be exported\n// and used by the view class.\nfunction docViewDesc(doc, outerDeco, innerDeco, dom, view) {\n  applyOuterDeco(dom, outerDeco, doc);\n  var docView = new NodeViewDesc(undefined, doc, outerDeco, innerDeco, dom, dom, dom, view, 0);\n  if (docView.contentDOM) docView.updateChildren(view, 0);\n  return docView;\n}\nvar TextViewDesc = /*#__PURE__*/function (_NodeViewDesc) {\n  function TextViewDesc(parent, node, outerDeco, innerDeco, dom, nodeDOM, view) {\n    _classCallCheck(this, TextViewDesc);\n    return _callSuper(this, TextViewDesc, [parent, node, outerDeco, innerDeco, dom, null, nodeDOM, view, 0]);\n  }\n  _inherits(TextViewDesc, _NodeViewDesc);\n  return _createClass(TextViewDesc, [{\n    key: \"parseRule\",\n    value: function parseRule() {\n      var skip = this.nodeDOM.parentNode;\n      while (skip && skip != this.dom && !skip.pmIsDeco) skip = skip.parentNode;\n      return {\n        skip: skip || true\n      };\n    }\n  }, {\n    key: \"update\",\n    value: function update(node, outerDeco, innerDeco, view) {\n      if (this.dirty == NODE_DIRTY || this.dirty != NOT_DIRTY && !this.inParent() || !node.sameMarkup(this.node)) return false;\n      this.updateOuterDeco(outerDeco);\n      if ((this.dirty != NOT_DIRTY || node.text != this.node.text) && node.text != this.nodeDOM.nodeValue) {\n        this.nodeDOM.nodeValue = node.text;\n        if (view.trackWrites == this.nodeDOM) view.trackWrites = null;\n      }\n      this.node = node;\n      this.dirty = NOT_DIRTY;\n      return true;\n    }\n  }, {\n    key: \"inParent\",\n    value: function inParent() {\n      var parentDOM = this.parent.contentDOM;\n      for (var n = this.nodeDOM; n; n = n.parentNode) if (n == parentDOM) return true;\n      return false;\n    }\n  }, {\n    key: \"domFromPos\",\n    value: function domFromPos(pos) {\n      return {\n        node: this.nodeDOM,\n        offset: pos\n      };\n    }\n  }, {\n    key: \"localPosFromDOM\",\n    value: function localPosFromDOM(dom, offset, bias) {\n      if (dom == this.nodeDOM) return this.posAtStart + Math.min(offset, this.node.text.length);\n      return _get(_getPrototypeOf(TextViewDesc.prototype), \"localPosFromDOM\", this).call(this, dom, offset, bias);\n    }\n  }, {\n    key: \"ignoreMutation\",\n    value: function ignoreMutation(mutation) {\n      return mutation.type != \"characterData\" && mutation.type != \"selection\";\n    }\n  }, {\n    key: \"slice\",\n    value: function slice(from, to, view) {\n      var node = this.node.cut(from, to),\n        dom = document.createTextNode(node.text);\n      return new TextViewDesc(this.parent, node, this.outerDeco, this.innerDeco, dom, dom, view);\n    }\n  }, {\n    key: \"markDirty\",\n    value: function markDirty(from, to) {\n      _get(_getPrototypeOf(TextViewDesc.prototype), \"markDirty\", this).call(this, from, to);\n      if (this.dom != this.nodeDOM && (from == 0 || to == this.nodeDOM.nodeValue.length)) this.dirty = NODE_DIRTY;\n    }\n  }, {\n    key: \"domAtom\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"isText\",\n    value: function isText(text) {\n      return this.node.text == text;\n    }\n  }]);\n}(NodeViewDesc); // A dummy desc used to tag trailing BR or IMG nodes created to work\n// around contentEditable terribleness.\nvar TrailingHackViewDesc = /*#__PURE__*/function (_ViewDesc5) {\n  function TrailingHackViewDesc() {\n    _classCallCheck(this, TrailingHackViewDesc);\n    return _callSuper(this, TrailingHackViewDesc, arguments);\n  }\n  _inherits(TrailingHackViewDesc, _ViewDesc5);\n  return _createClass(TrailingHackViewDesc, [{\n    key: \"parseRule\",\n    value: function parseRule() {\n      return {\n        ignore: true\n      };\n    }\n  }, {\n    key: \"matchesHack\",\n    value: function matchesHack(nodeName) {\n      return this.dirty == NOT_DIRTY && this.dom.nodeName == nodeName;\n    }\n  }, {\n    key: \"domAtom\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"ignoreForCoords\",\n    get: function get() {\n      return this.dom.nodeName == \"IMG\";\n    }\n  }]);\n}(ViewDesc); // A separate subclass is used for customized node views, so that the\n// extra checks only have to be made for nodes that are actually\n// customized.\nvar CustomNodeViewDesc = /*#__PURE__*/function (_NodeViewDesc2) {\n  function CustomNodeViewDesc(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, spec, view, pos) {\n    var _this8;\n    _classCallCheck(this, CustomNodeViewDesc);\n    _this8 = _callSuper(this, CustomNodeViewDesc, [parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, view, pos]);\n    _this8.spec = spec;\n    return _this8;\n  }\n  // A custom `update` method gets to decide whether the update goes\n  // through. If it does, and there's a `contentDOM` node, our logic\n  // updates the children.\n  _inherits(CustomNodeViewDesc, _NodeViewDesc2);\n  return _createClass(CustomNodeViewDesc, [{\n    key: \"update\",\n    value: function update(node, outerDeco, innerDeco, view) {\n      if (this.dirty == NODE_DIRTY) return false;\n      if (this.spec.update && (this.node.type == node.type || this.spec.multiType)) {\n        var result = this.spec.update(node, outerDeco, innerDeco);\n        if (result) this.updateInner(node, outerDeco, innerDeco, view);\n        return result;\n      } else if (!this.contentDOM && !node.isLeaf) {\n        return false;\n      } else {\n        return _get(_getPrototypeOf(CustomNodeViewDesc.prototype), \"update\", this).call(this, node, outerDeco, innerDeco, view);\n      }\n    }\n  }, {\n    key: \"selectNode\",\n    value: function selectNode() {\n      this.spec.selectNode ? this.spec.selectNode() : _get(_getPrototypeOf(CustomNodeViewDesc.prototype), \"selectNode\", this).call(this);\n    }\n  }, {\n    key: \"deselectNode\",\n    value: function deselectNode() {\n      this.spec.deselectNode ? this.spec.deselectNode() : _get(_getPrototypeOf(CustomNodeViewDesc.prototype), \"deselectNode\", this).call(this);\n    }\n  }, {\n    key: \"setSelection\",\n    value: function setSelection(anchor, head, view, force) {\n      this.spec.setSelection ? this.spec.setSelection(anchor, head, view.root) : _get(_getPrototypeOf(CustomNodeViewDesc.prototype), \"setSelection\", this).call(this, anchor, head, view, force);\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.spec.destroy) this.spec.destroy();\n      _get(_getPrototypeOf(CustomNodeViewDesc.prototype), \"destroy\", this).call(this);\n    }\n  }, {\n    key: \"stopEvent\",\n    value: function stopEvent(event) {\n      return this.spec.stopEvent ? this.spec.stopEvent(event) : false;\n    }\n  }, {\n    key: \"ignoreMutation\",\n    value: function ignoreMutation(mutation) {\n      return this.spec.ignoreMutation ? this.spec.ignoreMutation(mutation) : _get(_getPrototypeOf(CustomNodeViewDesc.prototype), \"ignoreMutation\", this).call(this, mutation);\n    }\n  }]);\n}(NodeViewDesc); // Sync the content of the given DOM node with the nodes associated\n// with the given array of view descs, recursing into mark descs\n// because this should sync the subtree for a whole node at a time.\nfunction renderDescs(parentDOM, descs, view) {\n  var dom = parentDOM.firstChild,\n    written = false;\n  for (var i = 0; i < descs.length; i++) {\n    var desc = descs[i],\n      childDOM = desc.dom;\n    if (childDOM.parentNode == parentDOM) {\n      while (childDOM != dom) {\n        dom = rm(dom);\n        written = true;\n      }\n      dom = dom.nextSibling;\n    } else {\n      written = true;\n      parentDOM.insertBefore(childDOM, dom);\n    }\n    if (desc instanceof MarkViewDesc) {\n      var pos = dom ? dom.previousSibling : parentDOM.lastChild;\n      renderDescs(desc.contentDOM, desc.children, view);\n      dom = pos ? pos.nextSibling : parentDOM.firstChild;\n    }\n  }\n  while (dom) {\n    dom = rm(dom);\n    written = true;\n  }\n  if (written && view.trackWrites == parentDOM) view.trackWrites = null;\n}\nvar OuterDecoLevel = function OuterDecoLevel(nodeName) {\n  if (nodeName) this.nodeName = nodeName;\n};\nOuterDecoLevel.prototype = Object.create(null);\nvar noDeco = [new OuterDecoLevel()];\nfunction computeOuterDeco(outerDeco, node, needsWrap) {\n  if (outerDeco.length == 0) return noDeco;\n  var top = needsWrap ? noDeco[0] : new OuterDecoLevel(),\n    result = [top];\n  for (var i = 0; i < outerDeco.length; i++) {\n    var attrs = outerDeco[i].type.attrs;\n    if (!attrs) continue;\n    if (attrs.nodeName) result.push(top = new OuterDecoLevel(attrs.nodeName));\n    for (var name in attrs) {\n      var val = attrs[name];\n      if (val == null) continue;\n      if (needsWrap && result.length == 1) result.push(top = new OuterDecoLevel(node.isInline ? \"span\" : \"div\"));\n      if (name == \"class\") top[\"class\"] = (top[\"class\"] ? top[\"class\"] + \" \" : \"\") + val;else if (name == \"style\") top.style = (top.style ? top.style + \";\" : \"\") + val;else if (name != \"nodeName\") top[name] = val;\n    }\n  }\n  return result;\n}\nfunction patchOuterDeco(outerDOM, nodeDOM, prevComputed, curComputed) {\n  // Shortcut for trivial case\n  if (prevComputed == noDeco && curComputed == noDeco) return nodeDOM;\n  var curDOM = nodeDOM;\n  for (var i = 0; i < curComputed.length; i++) {\n    var deco = curComputed[i],\n      prev = prevComputed[i];\n    if (i) {\n      var parent = void 0;\n      if (prev && prev.nodeName == deco.nodeName && curDOM != outerDOM && (parent = curDOM.parentNode) && parent.nodeName.toLowerCase() == deco.nodeName) {\n        curDOM = parent;\n      } else {\n        parent = document.createElement(deco.nodeName);\n        parent.pmIsDeco = true;\n        parent.appendChild(curDOM);\n        prev = noDeco[0];\n        curDOM = parent;\n      }\n    }\n    patchAttributes(curDOM, prev || noDeco[0], deco);\n  }\n  return curDOM;\n}\nfunction patchAttributes(dom, prev, cur) {\n  for (var name in prev) if (name != \"class\" && name != \"style\" && name != \"nodeName\" && !(name in cur)) dom.removeAttribute(name);\n  for (var _name in cur) if (_name != \"class\" && _name != \"style\" && _name != \"nodeName\" && cur[_name] != prev[_name]) dom.setAttribute(_name, cur[_name]);\n  if (prev[\"class\"] != cur[\"class\"]) {\n    var prevList = prev[\"class\"] ? prev[\"class\"].split(\" \").filter(Boolean) : [];\n    var curList = cur[\"class\"] ? cur[\"class\"].split(\" \").filter(Boolean) : [];\n    for (var i = 0; i < prevList.length; i++) if (curList.indexOf(prevList[i]) == -1) dom.classList.remove(prevList[i]);\n    for (var _i2 = 0; _i2 < curList.length; _i2++) if (prevList.indexOf(curList[_i2]) == -1) dom.classList.add(curList[_i2]);\n    if (dom.classList.length == 0) dom.removeAttribute(\"class\");\n  }\n  if (prev.style != cur.style) {\n    if (prev.style) {\n      var prop = /\\s*([\\w\\-\\xa1-\\uffff]+)\\s*:(?:\"(?:\\\\.|[^\"])*\"|'(?:\\\\.|[^'])*'|\\(.*?\\)|[^;])*/g,\n        m;\n      while (m = prop.exec(prev.style)) dom.style.removeProperty(m[1]);\n    }\n    if (cur.style) dom.style.cssText += cur.style;\n  }\n}\nfunction applyOuterDeco(dom, deco, node) {\n  return patchOuterDeco(dom, dom, noDeco, computeOuterDeco(deco, node, dom.nodeType != 1));\n}\nfunction sameOuterDeco(a, b) {\n  if (a.length != b.length) return false;\n  for (var i = 0; i < a.length; i++) if (!a[i].type.eq(b[i].type)) return false;\n  return true;\n}\n// Remove a DOM node and return its next sibling.\nfunction rm(dom) {\n  var next = dom.nextSibling;\n  dom.parentNode.removeChild(dom);\n  return next;\n}\n// Helper class for incrementally updating a tree of mark descs and\n// the widget and node descs inside of them.\nvar ViewTreeUpdater = /*#__PURE__*/function () {\n  function ViewTreeUpdater(top, lock, view) {\n    _classCallCheck(this, ViewTreeUpdater);\n    this.lock = lock;\n    this.view = view;\n    // Index into `this.top`'s child array, represents the current\n    // update position.\n    this.index = 0;\n    // When entering a mark, the current top and index are pushed\n    // onto this.\n    this.stack = [];\n    // Tracks whether anything was changed\n    this.changed = false;\n    this.top = top;\n    this.preMatch = preMatch(top.node.content, top);\n  }\n  // Destroy and remove the children between the given indices in\n  // `this.top`.\n  return _createClass(ViewTreeUpdater, [{\n    key: \"destroyBetween\",\n    value: function destroyBetween(start, end) {\n      if (start == end) return;\n      for (var i = start; i < end; i++) this.top.children[i].destroy();\n      this.top.children.splice(start, end - start);\n      this.changed = true;\n    }\n    // Destroy all remaining children in `this.top`.\n  }, {\n    key: \"destroyRest\",\n    value: function destroyRest() {\n      this.destroyBetween(this.index, this.top.children.length);\n    }\n    // Sync the current stack of mark descs with the given array of\n    // marks, reusing existing mark descs when possible.\n  }, {\n    key: \"syncToMarks\",\n    value: function syncToMarks(marks, inline, view) {\n      var keep = 0,\n        depth = this.stack.length >> 1;\n      var maxKeep = Math.min(depth, marks.length);\n      while (keep < maxKeep && (keep == depth - 1 ? this.top : this.stack[keep + 1 << 1]).matchesMark(marks[keep]) && marks[keep].type.spec.spanning !== false) keep++;\n      while (keep < depth) {\n        this.destroyRest();\n        this.top.dirty = NOT_DIRTY;\n        this.index = this.stack.pop();\n        this.top = this.stack.pop();\n        depth--;\n      }\n      while (depth < marks.length) {\n        this.stack.push(this.top, this.index + 1);\n        var found = -1;\n        for (var i = this.index; i < Math.min(this.index + 3, this.top.children.length); i++) {\n          var next = this.top.children[i];\n          if (next.matchesMark(marks[depth]) && !this.isLocked(next.dom)) {\n            found = i;\n            break;\n          }\n        }\n        if (found > -1) {\n          if (found > this.index) {\n            this.changed = true;\n            this.destroyBetween(this.index, found);\n          }\n          this.top = this.top.children[this.index];\n        } else {\n          var markDesc = MarkViewDesc.create(this.top, marks[depth], inline, view);\n          this.top.children.splice(this.index, 0, markDesc);\n          this.top = markDesc;\n          this.changed = true;\n        }\n        this.index = 0;\n        depth++;\n      }\n    }\n    // Try to find a node desc matching the given data. Skip over it and\n    // return true when successful.\n  }, {\n    key: \"findNodeMatch\",\n    value: function findNodeMatch(node, outerDeco, innerDeco, index) {\n      var found = -1,\n        targetDesc;\n      if (index >= this.preMatch.index && (targetDesc = this.preMatch.matches[index - this.preMatch.index]).parent == this.top && targetDesc.matchesNode(node, outerDeco, innerDeco)) {\n        found = this.top.children.indexOf(targetDesc, this.index);\n      } else {\n        for (var i = this.index, e = Math.min(this.top.children.length, i + 5); i < e; i++) {\n          var child = this.top.children[i];\n          if (child.matchesNode(node, outerDeco, innerDeco) && !this.preMatch.matched.has(child)) {\n            found = i;\n            break;\n          }\n        }\n      }\n      if (found < 0) return false;\n      this.destroyBetween(this.index, found);\n      this.index++;\n      return true;\n    }\n  }, {\n    key: \"updateNodeAt\",\n    value: function updateNodeAt(node, outerDeco, innerDeco, index, view) {\n      var child = this.top.children[index];\n      if (child.dirty == NODE_DIRTY && child.dom == child.contentDOM) child.dirty = CONTENT_DIRTY;\n      if (!child.update(node, outerDeco, innerDeco, view)) return false;\n      this.destroyBetween(this.index, index);\n      this.index++;\n      return true;\n    }\n  }, {\n    key: \"findIndexWithChild\",\n    value: function findIndexWithChild(domNode) {\n      for (;;) {\n        var parent = domNode.parentNode;\n        if (!parent) return -1;\n        if (parent == this.top.contentDOM) {\n          var desc = domNode.pmViewDesc;\n          if (desc) for (var i = this.index; i < this.top.children.length; i++) {\n            if (this.top.children[i] == desc) return i;\n          }\n          return -1;\n        }\n        domNode = parent;\n      }\n    }\n    // Try to update the next node, if any, to the given data. Checks\n    // pre-matches to avoid overwriting nodes that could still be used.\n  }, {\n    key: \"updateNextNode\",\n    value: function updateNextNode(node, outerDeco, innerDeco, view, index, pos) {\n      for (var i = this.index; i < this.top.children.length; i++) {\n        var next = this.top.children[i];\n        if (next instanceof NodeViewDesc) {\n          var _preMatch = this.preMatch.matched.get(next);\n          if (_preMatch != null && _preMatch != index) return false;\n          var nextDOM = next.dom,\n            updated = void 0;\n          // Can't update if nextDOM is or contains this.lock, except if\n          // it's a text node whose content already matches the new text\n          // and whose decorations match the new ones.\n          var locked = this.isLocked(nextDOM) && !(node.isText && next.node && next.node.isText && next.nodeDOM.nodeValue == node.text && next.dirty != NODE_DIRTY && sameOuterDeco(outerDeco, next.outerDeco));\n          if (!locked && next.update(node, outerDeco, innerDeco, view)) {\n            this.destroyBetween(this.index, i);\n            if (next.dom != nextDOM) this.changed = true;\n            this.index++;\n            return true;\n          } else if (!locked && (updated = this.recreateWrapper(next, node, outerDeco, innerDeco, view, pos))) {\n            this.destroyBetween(this.index, i);\n            this.top.children[this.index] = updated;\n            if (updated.contentDOM) {\n              updated.dirty = CONTENT_DIRTY;\n              updated.updateChildren(view, pos + 1);\n              updated.dirty = NOT_DIRTY;\n            }\n            this.changed = true;\n            this.index++;\n            return true;\n          }\n          break;\n        }\n      }\n      return false;\n    }\n    // When a node with content is replaced by a different node with\n    // identical content, move over its children.\n  }, {\n    key: \"recreateWrapper\",\n    value: function recreateWrapper(next, node, outerDeco, innerDeco, view, pos) {\n      if (next.dirty || node.isAtom || !next.children.length || !next.node.content.eq(node.content) || !sameOuterDeco(outerDeco, next.outerDeco) || !innerDeco.eq(next.innerDeco)) return null;\n      var wrapper = NodeViewDesc.create(this.top, node, outerDeco, innerDeco, view, pos);\n      if (wrapper.contentDOM) {\n        wrapper.children = next.children;\n        next.children = [];\n        var _iterator = _createForOfIteratorHelper(wrapper.children),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var ch = _step.value;\n            ch.parent = wrapper;\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n      next.destroy();\n      return wrapper;\n    }\n    // Insert the node as a newly created node desc.\n  }, {\n    key: \"addNode\",\n    value: function addNode(node, outerDeco, innerDeco, view, pos) {\n      var desc = NodeViewDesc.create(this.top, node, outerDeco, innerDeco, view, pos);\n      if (desc.contentDOM) desc.updateChildren(view, pos + 1);\n      this.top.children.splice(this.index++, 0, desc);\n      this.changed = true;\n    }\n  }, {\n    key: \"placeWidget\",\n    value: function placeWidget(widget, view, pos) {\n      var next = this.index < this.top.children.length ? this.top.children[this.index] : null;\n      if (next && next.matchesWidget(widget) && (widget == next.widget || !next.widget.type.toDOM.parentNode)) {\n        this.index++;\n      } else {\n        var desc = new WidgetViewDesc(this.top, widget, view, pos);\n        this.top.children.splice(this.index++, 0, desc);\n        this.changed = true;\n      }\n    }\n    // Make sure a textblock looks and behaves correctly in\n    // contentEditable.\n  }, {\n    key: \"addTextblockHacks\",\n    value: function addTextblockHacks() {\n      var lastChild = this.top.children[this.index - 1],\n        parent = this.top;\n      while (lastChild instanceof MarkViewDesc) {\n        parent = lastChild;\n        lastChild = parent.children[parent.children.length - 1];\n      }\n      if (!lastChild ||\n      // Empty textblock\n      !(lastChild instanceof TextViewDesc) || /\\n$/.test(lastChild.node.text) || this.view.requiresGeckoHackNode && /\\s$/.test(lastChild.node.text)) {\n        // Avoid bugs in Safari's cursor drawing (#1165) and Chrome's mouse selection (#1152)\n        if ((safari || chrome) && lastChild && lastChild.dom.contentEditable == \"false\") this.addHackNode(\"IMG\", parent);\n        this.addHackNode(\"BR\", this.top);\n      }\n    }\n  }, {\n    key: \"addHackNode\",\n    value: function addHackNode(nodeName, parent) {\n      if (parent == this.top && this.index < parent.children.length && parent.children[this.index].matchesHack(nodeName)) {\n        this.index++;\n      } else {\n        var dom = document.createElement(nodeName);\n        if (nodeName == \"IMG\") {\n          dom.className = \"ProseMirror-separator\";\n          dom.alt = \"\";\n        }\n        if (nodeName == \"BR\") dom.className = \"ProseMirror-trailingBreak\";\n        var hack = new TrailingHackViewDesc(this.top, [], dom, null);\n        if (parent != this.top) parent.children.push(hack);else parent.children.splice(this.index++, 0, hack);\n        this.changed = true;\n      }\n    }\n  }, {\n    key: \"isLocked\",\n    value: function isLocked(node) {\n      return this.lock && (node == this.lock || node.nodeType == 1 && node.contains(this.lock.parentNode));\n    }\n  }]);\n}(); // Iterate from the end of the fragment and array of descs to find\n// directly matching ones, in order to avoid overeagerly reusing those\n// for other nodes. Returns the fragment index of the first node that\n// is part of the sequence of matched nodes at the end of the\n// fragment.\nfunction preMatch(frag, parentDesc) {\n  var curDesc = parentDesc,\n    descI = curDesc.children.length;\n  var fI = frag.childCount,\n    matched = new Map(),\n    matches = [];\n  outer: while (fI > 0) {\n    var desc = void 0;\n    for (;;) {\n      if (descI) {\n        var next = curDesc.children[descI - 1];\n        if (next instanceof MarkViewDesc) {\n          curDesc = next;\n          descI = next.children.length;\n        } else {\n          desc = next;\n          descI--;\n          break;\n        }\n      } else if (curDesc == parentDesc) {\n        break outer;\n      } else {\n        // FIXME\n        descI = curDesc.parent.children.indexOf(curDesc);\n        curDesc = curDesc.parent;\n      }\n    }\n    var node = desc.node;\n    if (!node) continue;\n    if (node != frag.child(fI - 1)) break;\n    --fI;\n    matched.set(desc, fI);\n    matches.push(desc);\n  }\n  return {\n    index: fI,\n    matched: matched,\n    matches: matches.reverse()\n  };\n}\nfunction compareSide(a, b) {\n  return a.type.side - b.type.side;\n}\n// This function abstracts iterating over the nodes and decorations in\n// a fragment. Calls `onNode` for each node, with its local and child\n// decorations. Splits text nodes when there is a decoration starting\n// or ending inside of them. Calls `onWidget` for each widget.\nfunction iterDeco(parent, deco, onWidget, onNode) {\n  var locals = deco.locals(parent),\n    offset = 0;\n  // Simple, cheap variant for when there are no local decorations\n  if (locals.length == 0) {\n    for (var i = 0; i < parent.childCount; i++) {\n      var child = parent.child(i);\n      onNode(child, locals, deco.forChild(offset, child), i);\n      offset += child.nodeSize;\n    }\n    return;\n  }\n  var decoIndex = 0,\n    active = [],\n    restNode = null;\n  for (var parentIndex = 0;;) {\n    var widget = void 0,\n      widgets = void 0;\n    while (decoIndex < locals.length && locals[decoIndex].to == offset) {\n      var next = locals[decoIndex++];\n      if (next.widget) {\n        if (!widget) widget = next;else (widgets || (widgets = [widget])).push(next);\n      }\n    }\n    if (widget) {\n      if (widgets) {\n        widgets.sort(compareSide);\n        for (var _i3 = 0; _i3 < widgets.length; _i3++) onWidget(widgets[_i3], parentIndex, !!restNode);\n      } else {\n        onWidget(widget, parentIndex, !!restNode);\n      }\n    }\n    var _child = void 0,\n      index = void 0;\n    if (restNode) {\n      index = -1;\n      _child = restNode;\n      restNode = null;\n    } else if (parentIndex < parent.childCount) {\n      index = parentIndex;\n      _child = parent.child(parentIndex++);\n    } else {\n      break;\n    }\n    for (var _i4 = 0; _i4 < active.length; _i4++) if (active[_i4].to <= offset) active.splice(_i4--, 1);\n    while (decoIndex < locals.length && locals[decoIndex].from <= offset && locals[decoIndex].to > offset) active.push(locals[decoIndex++]);\n    var end = offset + _child.nodeSize;\n    if (_child.isText) {\n      var cutAt = end;\n      if (decoIndex < locals.length && locals[decoIndex].from < cutAt) cutAt = locals[decoIndex].from;\n      for (var _i5 = 0; _i5 < active.length; _i5++) if (active[_i5].to < cutAt) cutAt = active[_i5].to;\n      if (cutAt < end) {\n        restNode = _child.cut(cutAt - offset);\n        _child = _child.cut(0, cutAt - offset);\n        end = cutAt;\n        index = -1;\n      }\n    } else {\n      while (decoIndex < locals.length && locals[decoIndex].to < end) decoIndex++;\n    }\n    var outerDeco = _child.isInline && !_child.isLeaf ? active.filter(function (d) {\n      return !d.inline;\n    }) : active.slice();\n    onNode(_child, outerDeco, deco.forChild(offset, _child), index);\n    offset = end;\n  }\n}\n// List markers in Mobile Safari will mysteriously disappear\n// sometimes. This works around that.\nfunction iosHacks(dom) {\n  if (dom.nodeName == \"UL\" || dom.nodeName == \"OL\") {\n    var oldCSS = dom.style.cssText;\n    dom.style.cssText = oldCSS + \"; list-style: square !important\";\n    window.getComputedStyle(dom).listStyle;\n    dom.style.cssText = oldCSS;\n  }\n}\n// Find a piece of text in an inline fragment, overlapping from-to\nfunction findTextInFragment(frag, text, from, to) {\n  for (var i = 0, pos = 0; i < frag.childCount && pos <= to;) {\n    var child = frag.child(i++),\n      childStart = pos;\n    pos += child.nodeSize;\n    if (!child.isText) continue;\n    var str = child.text;\n    while (i < frag.childCount) {\n      var next = frag.child(i++);\n      pos += next.nodeSize;\n      if (!next.isText) break;\n      str += next.text;\n    }\n    if (pos >= from) {\n      if (pos >= to && str.slice(to - text.length - childStart, to - childStart) == text) return to - text.length;\n      var found = childStart < to ? str.lastIndexOf(text, to - childStart - 1) : -1;\n      if (found >= 0 && found + text.length + childStart >= from) return childStart + found;\n      if (from == to && str.length >= to + text.length - childStart && str.slice(to - childStart, to - childStart + text.length) == text) return to;\n    }\n  }\n  return -1;\n}\n// Replace range from-to in an array of view descs with replacement\n// (may be null to just delete). This goes very much against the grain\n// of the rest of this code, which tends to create nodes with the\n// right shape in one go, rather than messing with them after\n// creation, but is necessary in the composition hack.\nfunction replaceNodes(nodes, from, to, view, replacement) {\n  var result = [];\n  for (var i = 0, off = 0; i < nodes.length; i++) {\n    var child = nodes[i],\n      start = off,\n      end = off += child.size;\n    if (start >= to || end <= from) {\n      result.push(child);\n    } else {\n      if (start < from) result.push(child.slice(0, from - start, view));\n      if (replacement) {\n        result.push(replacement);\n        replacement = undefined;\n      }\n      if (end > to) result.push(child.slice(to - start, child.size, view));\n    }\n  }\n  return result;\n}\nfunction selectionFromDOM(view) {\n  var origin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var domSel = view.domSelectionRange(),\n    doc = view.state.doc;\n  if (!domSel.focusNode) return null;\n  var nearestDesc = view.docView.nearestDesc(domSel.focusNode),\n    inWidget = nearestDesc && nearestDesc.size == 0;\n  var head = view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset, 1);\n  if (head < 0) return null;\n  var $head = doc.resolve(head),\n    anchor,\n    selection;\n  if (selectionCollapsed(domSel)) {\n    anchor = head;\n    while (nearestDesc && !nearestDesc.node) nearestDesc = nearestDesc.parent;\n    var nearestDescNode = nearestDesc.node;\n    if (nearestDesc && nearestDescNode.isAtom && prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.isSelectable(nearestDescNode) && nearestDesc.parent && !(nearestDescNode.isInline && isOnEdge(domSel.focusNode, domSel.focusOffset, nearestDesc.dom))) {\n      var pos = nearestDesc.posBefore;\n      selection = new prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection(head == pos ? $head : doc.resolve(pos));\n    }\n  } else {\n    if (domSel instanceof view.dom.ownerDocument.defaultView.Selection && domSel.rangeCount > 1) {\n      var min = head,\n        max = head;\n      for (var i = 0; i < domSel.rangeCount; i++) {\n        var range = domSel.getRangeAt(i);\n        min = Math.min(min, view.docView.posFromDOM(range.startContainer, range.startOffset, 1));\n        max = Math.max(max, view.docView.posFromDOM(range.endContainer, range.endOffset, -1));\n      }\n      if (min < 0) return null;\n      var _ref3 = max == view.state.selection.anchor ? [max, min] : [min, max];\n      var _ref4 = _slicedToArray(_ref3, 2);\n      anchor = _ref4[0];\n      head = _ref4[1];\n      $head = doc.resolve(head);\n    } else {\n      anchor = view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset, 1);\n    }\n    if (anchor < 0) return null;\n  }\n  var $anchor = doc.resolve(anchor);\n  if (!selection) {\n    var bias = origin == \"pointer\" || view.state.selection.head < $head.pos && !inWidget ? 1 : -1;\n    selection = selectionBetween(view, $anchor, $head, bias);\n  }\n  return selection;\n}\nfunction editorOwnsSelection(view) {\n  return view.editable ? view.hasFocus() : hasSelection(view) && document.activeElement && document.activeElement.contains(view.dom);\n}\nfunction selectionToDOM(view) {\n  var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var sel = view.state.selection;\n  syncNodeSelection(view, sel);\n  if (!editorOwnsSelection(view)) return;\n  // The delayed drag selection causes issues with Cell Selections\n  // in Safari. And the drag selection delay is to workarond issues\n  // which only present in Chrome.\n  if (!force && view.input.mouseDown && view.input.mouseDown.allowDefault && chrome) {\n    var domSel = view.domSelectionRange(),\n      curSel = view.domObserver.currentSelection;\n    if (domSel.anchorNode && curSel.anchorNode && isEquivalentPosition(domSel.anchorNode, domSel.anchorOffset, curSel.anchorNode, curSel.anchorOffset)) {\n      view.input.mouseDown.delayedSelectionSync = true;\n      view.domObserver.setCurSelection();\n      return;\n    }\n  }\n  view.domObserver.disconnectSelection();\n  if (view.cursorWrapper) {\n    selectCursorWrapper(view);\n  } else {\n    var anchor = sel.anchor,\n      head = sel.head,\n      resetEditableFrom,\n      resetEditableTo;\n    if (brokenSelectBetweenUneditable && !(sel instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection)) {\n      if (!sel.$from.parent.inlineContent) resetEditableFrom = temporarilyEditableNear(view, sel.from);\n      if (!sel.empty && !sel.$from.parent.inlineContent) resetEditableTo = temporarilyEditableNear(view, sel.to);\n    }\n    view.docView.setSelection(anchor, head, view, force);\n    if (brokenSelectBetweenUneditable) {\n      if (resetEditableFrom) resetEditable(resetEditableFrom);\n      if (resetEditableTo) resetEditable(resetEditableTo);\n    }\n    if (sel.visible) {\n      view.dom.classList.remove(\"ProseMirror-hideselection\");\n    } else {\n      view.dom.classList.add(\"ProseMirror-hideselection\");\n      if (\"onselectionchange\" in document) removeClassOnSelectionChange(view);\n    }\n  }\n  view.domObserver.setCurSelection();\n  view.domObserver.connectSelection();\n}\n// Kludge to work around Webkit not allowing a selection to start/end\n// between non-editable block nodes. We briefly make something\n// editable, set the selection, then set it uneditable again.\nvar brokenSelectBetweenUneditable = safari || chrome && chrome_version < 63;\nfunction temporarilyEditableNear(view, pos) {\n  var _view$docView$domFrom3 = view.docView.domFromPos(pos, 0),\n    node = _view$docView$domFrom3.node,\n    offset = _view$docView$domFrom3.offset;\n  var after = offset < node.childNodes.length ? node.childNodes[offset] : null;\n  var before = offset ? node.childNodes[offset - 1] : null;\n  if (safari && after && after.contentEditable == \"false\") return setEditable(after);\n  if ((!after || after.contentEditable == \"false\") && (!before || before.contentEditable == \"false\")) {\n    if (after) return setEditable(after);else if (before) return setEditable(before);\n  }\n}\nfunction setEditable(element) {\n  element.contentEditable = \"true\";\n  if (safari && element.draggable) {\n    element.draggable = false;\n    element.wasDraggable = true;\n  }\n  return element;\n}\nfunction resetEditable(element) {\n  element.contentEditable = \"false\";\n  if (element.wasDraggable) {\n    element.draggable = true;\n    element.wasDraggable = null;\n  }\n}\nfunction removeClassOnSelectionChange(view) {\n  var doc = view.dom.ownerDocument;\n  doc.removeEventListener(\"selectionchange\", view.input.hideSelectionGuard);\n  var domSel = view.domSelectionRange();\n  var node = domSel.anchorNode,\n    offset = domSel.anchorOffset;\n  doc.addEventListener(\"selectionchange\", view.input.hideSelectionGuard = function () {\n    if (domSel.anchorNode != node || domSel.anchorOffset != offset) {\n      doc.removeEventListener(\"selectionchange\", view.input.hideSelectionGuard);\n      setTimeout(function () {\n        if (!editorOwnsSelection(view) || view.state.selection.visible) view.dom.classList.remove(\"ProseMirror-hideselection\");\n      }, 20);\n    }\n  });\n}\nfunction selectCursorWrapper(view) {\n  var domSel = view.domSelection(),\n    range = document.createRange();\n  if (!domSel) return;\n  var node = view.cursorWrapper.dom,\n    img = node.nodeName == \"IMG\";\n  if (img) range.setStart(node.parentNode, domIndex(node) + 1);else range.setStart(node, 0);\n  range.collapse(true);\n  domSel.removeAllRanges();\n  domSel.addRange(range);\n  // Kludge to kill 'control selection' in IE11 when selecting an\n  // invisible cursor wrapper, since that would result in those weird\n  // resize handles and a selection that considers the absolutely\n  // positioned wrapper, rather than the root editable node, the\n  // focused element.\n  if (!img && !view.state.selection.visible && ie && ie_version <= 11) {\n    node.disabled = true;\n    node.disabled = false;\n  }\n}\nfunction syncNodeSelection(view, sel) {\n  if (sel instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection) {\n    var desc = view.docView.descAt(sel.from);\n    if (desc != view.lastSelectedViewDesc) {\n      clearNodeSelection(view);\n      if (desc) desc.selectNode();\n      view.lastSelectedViewDesc = desc;\n    }\n  } else {\n    clearNodeSelection(view);\n  }\n}\n// Clear all DOM statefulness of the last node selection.\nfunction clearNodeSelection(view) {\n  if (view.lastSelectedViewDesc) {\n    if (view.lastSelectedViewDesc.parent) view.lastSelectedViewDesc.deselectNode();\n    view.lastSelectedViewDesc = undefined;\n  }\n}\nfunction selectionBetween(view, $anchor, $head, bias) {\n  return view.someProp(\"createSelectionBetween\", function (f) {\n    return f(view, $anchor, $head);\n  }) || prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection.between($anchor, $head, bias);\n}\nfunction hasFocusAndSelection(view) {\n  if (view.editable && !view.hasFocus()) return false;\n  return hasSelection(view);\n}\nfunction hasSelection(view) {\n  var sel = view.domSelectionRange();\n  if (!sel.anchorNode) return false;\n  try {\n    // Firefox will raise 'permission denied' errors when accessing\n    // properties of `sel.anchorNode` when it's in a generated CSS\n    // element.\n    return view.dom.contains(sel.anchorNode.nodeType == 3 ? sel.anchorNode.parentNode : sel.anchorNode) && (view.editable || view.dom.contains(sel.focusNode.nodeType == 3 ? sel.focusNode.parentNode : sel.focusNode));\n  } catch (_) {\n    return false;\n  }\n}\nfunction anchorInRightPlace(view) {\n  var anchorDOM = view.docView.domFromPos(view.state.selection.anchor, 0);\n  var domSel = view.domSelectionRange();\n  return isEquivalentPosition(anchorDOM.node, anchorDOM.offset, domSel.anchorNode, domSel.anchorOffset);\n}\nfunction moveSelectionBlock(state, dir) {\n  var _state$selection = state.selection,\n    $anchor = _state$selection.$anchor,\n    $head = _state$selection.$head;\n  var $side = dir > 0 ? $anchor.max($head) : $anchor.min($head);\n  var $start = !$side.parent.inlineContent ? $side : $side.depth ? state.doc.resolve(dir > 0 ? $side.after() : $side.before()) : null;\n  return $start && prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.Selection.findFrom($start, dir);\n}\nfunction apply(view, sel) {\n  view.dispatch(view.state.tr.setSelection(sel).scrollIntoView());\n  return true;\n}\nfunction selectHorizontally(view, dir, mods) {\n  var sel = view.state.selection;\n  if (sel instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection) {\n    if (mods.indexOf(\"s\") > -1) {\n      var $head = sel.$head,\n        node = $head.textOffset ? null : dir < 0 ? $head.nodeBefore : $head.nodeAfter;\n      if (!node || node.isText || !node.isLeaf) return false;\n      var $newHead = view.state.doc.resolve($head.pos + node.nodeSize * (dir < 0 ? -1 : 1));\n      return apply(view, new prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection(sel.$anchor, $newHead));\n    } else if (!sel.empty) {\n      return false;\n    } else if (view.endOfTextblock(dir > 0 ? \"forward\" : \"backward\")) {\n      var next = moveSelectionBlock(view.state, dir);\n      if (next && next instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection) return apply(view, next);\n      return false;\n    } else if (!(mac && mods.indexOf(\"m\") > -1)) {\n      var _$head = sel.$head,\n        _node = _$head.textOffset ? null : dir < 0 ? _$head.nodeBefore : _$head.nodeAfter,\n        desc;\n      if (!_node || _node.isText) return false;\n      var nodePos = dir < 0 ? _$head.pos - _node.nodeSize : _$head.pos;\n      if (!(_node.isAtom || (desc = view.docView.descAt(nodePos)) && !desc.contentDOM)) return false;\n      if (prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.isSelectable(_node)) {\n        return apply(view, new prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection(dir < 0 ? view.state.doc.resolve(_$head.pos - _node.nodeSize) : _$head));\n      } else if (webkit) {\n        // Chrome and Safari will introduce extra pointless cursor\n        // positions around inline uneditable nodes, so we have to\n        // take over and move the cursor past them (#937)\n        return apply(view, new prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection(view.state.doc.resolve(dir < 0 ? nodePos : nodePos + _node.nodeSize)));\n      } else {\n        return false;\n      }\n    }\n  } else if (sel instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection && sel.node.isInline) {\n    return apply(view, new prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection(dir > 0 ? sel.$to : sel.$from));\n  } else {\n    var _next = moveSelectionBlock(view.state, dir);\n    if (_next) return apply(view, _next);\n    return false;\n  }\n}\nfunction nodeLen(node) {\n  return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;\n}\nfunction isIgnorable(dom, dir) {\n  var desc = dom.pmViewDesc;\n  return desc && desc.size == 0 && (dir < 0 || dom.nextSibling || dom.nodeName != \"BR\");\n}\nfunction skipIgnoredNodes(view, dir) {\n  return dir < 0 ? skipIgnoredNodesBefore(view) : skipIgnoredNodesAfter(view);\n}\n// Make sure the cursor isn't directly after one or more ignored\n// nodes, which will confuse the browser's cursor motion logic.\nfunction skipIgnoredNodesBefore(view) {\n  var sel = view.domSelectionRange();\n  var node = sel.focusNode,\n    offset = sel.focusOffset;\n  if (!node) return;\n  var moveNode,\n    moveOffset,\n    force = false;\n  // Gecko will do odd things when the selection is directly in front\n  // of a non-editable node, so in that case, move it into the next\n  // node if possible. Issue prosemirror/prosemirror#832.\n  if (gecko && node.nodeType == 1 && offset < nodeLen(node) && isIgnorable(node.childNodes[offset], -1)) force = true;\n  for (;;) {\n    if (offset > 0) {\n      if (node.nodeType != 1) {\n        break;\n      } else {\n        var before = node.childNodes[offset - 1];\n        if (isIgnorable(before, -1)) {\n          moveNode = node;\n          moveOffset = --offset;\n        } else if (before.nodeType == 3) {\n          node = before;\n          offset = node.nodeValue.length;\n        } else break;\n      }\n    } else if (isBlockNode(node)) {\n      break;\n    } else {\n      var prev = node.previousSibling;\n      while (prev && isIgnorable(prev, -1)) {\n        moveNode = node.parentNode;\n        moveOffset = domIndex(prev);\n        prev = prev.previousSibling;\n      }\n      if (!prev) {\n        node = node.parentNode;\n        if (node == view.dom) break;\n        offset = 0;\n      } else {\n        node = prev;\n        offset = nodeLen(node);\n      }\n    }\n  }\n  if (force) setSelFocus(view, node, offset);else if (moveNode) setSelFocus(view, moveNode, moveOffset);\n}\n// Make sure the cursor isn't directly before one or more ignored\n// nodes.\nfunction skipIgnoredNodesAfter(view) {\n  var sel = view.domSelectionRange();\n  var node = sel.focusNode,\n    offset = sel.focusOffset;\n  if (!node) return;\n  var len = nodeLen(node);\n  var moveNode, moveOffset;\n  for (;;) {\n    if (offset < len) {\n      if (node.nodeType != 1) break;\n      var after = node.childNodes[offset];\n      if (isIgnorable(after, 1)) {\n        moveNode = node;\n        moveOffset = ++offset;\n      } else break;\n    } else if (isBlockNode(node)) {\n      break;\n    } else {\n      var next = node.nextSibling;\n      while (next && isIgnorable(next, 1)) {\n        moveNode = next.parentNode;\n        moveOffset = domIndex(next) + 1;\n        next = next.nextSibling;\n      }\n      if (!next) {\n        node = node.parentNode;\n        if (node == view.dom) break;\n        offset = len = 0;\n      } else {\n        node = next;\n        offset = 0;\n        len = nodeLen(node);\n      }\n    }\n  }\n  if (moveNode) setSelFocus(view, moveNode, moveOffset);\n}\nfunction isBlockNode(dom) {\n  var desc = dom.pmViewDesc;\n  return desc && desc.node && desc.node.isBlock;\n}\nfunction textNodeAfter(node, offset) {\n  while (node && offset == node.childNodes.length && !hasBlockDesc(node)) {\n    offset = domIndex(node) + 1;\n    node = node.parentNode;\n  }\n  while (node && offset < node.childNodes.length) {\n    var next = node.childNodes[offset];\n    if (next.nodeType == 3) return next;\n    if (next.nodeType == 1 && next.contentEditable == \"false\") break;\n    node = next;\n    offset = 0;\n  }\n}\nfunction textNodeBefore(node, offset) {\n  while (node && !offset && !hasBlockDesc(node)) {\n    offset = domIndex(node);\n    node = node.parentNode;\n  }\n  while (node && offset) {\n    var next = node.childNodes[offset - 1];\n    if (next.nodeType == 3) return next;\n    if (next.nodeType == 1 && next.contentEditable == \"false\") break;\n    node = next;\n    offset = node.childNodes.length;\n  }\n}\nfunction setSelFocus(view, node, offset) {\n  if (node.nodeType != 3) {\n    var before, after;\n    if (after = textNodeAfter(node, offset)) {\n      node = after;\n      offset = 0;\n    } else if (before = textNodeBefore(node, offset)) {\n      node = before;\n      offset = before.nodeValue.length;\n    }\n  }\n  var sel = view.domSelection();\n  if (!sel) return;\n  if (selectionCollapsed(sel)) {\n    var range = document.createRange();\n    range.setEnd(node, offset);\n    range.setStart(node, offset);\n    sel.removeAllRanges();\n    sel.addRange(range);\n  } else if (sel.extend) {\n    sel.extend(node, offset);\n  }\n  view.domObserver.setCurSelection();\n  var state = view.state;\n  // If no state update ends up happening, reset the selection.\n  setTimeout(function () {\n    if (view.state == state) selectionToDOM(view);\n  }, 50);\n}\nfunction findDirection(view, pos) {\n  var $pos = view.state.doc.resolve(pos);\n  if (!(chrome || windows) && $pos.parent.inlineContent) {\n    var coords = view.coordsAtPos(pos);\n    if (pos > $pos.start()) {\n      var before = view.coordsAtPos(pos - 1);\n      var mid = (before.top + before.bottom) / 2;\n      if (mid > coords.top && mid < coords.bottom && Math.abs(before.left - coords.left) > 1) return before.left < coords.left ? \"ltr\" : \"rtl\";\n    }\n    if (pos < $pos.end()) {\n      var after = view.coordsAtPos(pos + 1);\n      var _mid = (after.top + after.bottom) / 2;\n      if (_mid > coords.top && _mid < coords.bottom && Math.abs(after.left - coords.left) > 1) return after.left > coords.left ? \"ltr\" : \"rtl\";\n    }\n  }\n  var computed = getComputedStyle(view.dom).direction;\n  return computed == \"rtl\" ? \"rtl\" : \"ltr\";\n}\n// Check whether vertical selection motion would involve node\n// selections. If so, apply it (if not, the result is left to the\n// browser)\nfunction selectVertically(view, dir, mods) {\n  var sel = view.state.selection;\n  if (sel instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection && !sel.empty || mods.indexOf(\"s\") > -1) return false;\n  if (mac && mods.indexOf(\"m\") > -1) return false;\n  var $from = sel.$from,\n    $to = sel.$to;\n  if (!$from.parent.inlineContent || view.endOfTextblock(dir < 0 ? \"up\" : \"down\")) {\n    var next = moveSelectionBlock(view.state, dir);\n    if (next && next instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection) return apply(view, next);\n  }\n  if (!$from.parent.inlineContent) {\n    var side = dir < 0 ? $from : $to;\n    var beyond = sel instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.AllSelection ? prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.Selection.near(side, dir) : prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.Selection.findFrom(side, dir);\n    return beyond ? apply(view, beyond) : false;\n  }\n  return false;\n}\nfunction stopNativeHorizontalDelete(view, dir) {\n  if (!(view.state.selection instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection)) return true;\n  var _view$state$selection2 = view.state.selection,\n    $head = _view$state$selection2.$head,\n    $anchor = _view$state$selection2.$anchor,\n    empty = _view$state$selection2.empty;\n  if (!$head.sameParent($anchor)) return true;\n  if (!empty) return false;\n  if (view.endOfTextblock(dir > 0 ? \"forward\" : \"backward\")) return true;\n  var nextNode = !$head.textOffset && (dir < 0 ? $head.nodeBefore : $head.nodeAfter);\n  if (nextNode && !nextNode.isText) {\n    var tr = view.state.tr;\n    if (dir < 0) tr[\"delete\"]($head.pos - nextNode.nodeSize, $head.pos);else tr[\"delete\"]($head.pos, $head.pos + nextNode.nodeSize);\n    view.dispatch(tr);\n    return true;\n  }\n  return false;\n}\nfunction switchEditable(view, node, state) {\n  view.domObserver.stop();\n  node.contentEditable = state;\n  view.domObserver.start();\n}\n// Issue #867 / #1090 / https://bugs.chromium.org/p/chromium/issues/detail?id=903821\n// In which Safari (and at some point in the past, Chrome) does really\n// wrong things when the down arrow is pressed when the cursor is\n// directly at the start of a textblock and has an uneditable node\n// after it\nfunction safariDownArrowBug(view) {\n  if (!safari || view.state.selection.$head.parentOffset > 0) return false;\n  var _view$domSelectionRan3 = view.domSelectionRange(),\n    focusNode = _view$domSelectionRan3.focusNode,\n    focusOffset = _view$domSelectionRan3.focusOffset;\n  if (focusNode && focusNode.nodeType == 1 && focusOffset == 0 && focusNode.firstChild && focusNode.firstChild.contentEditable == \"false\") {\n    var child = focusNode.firstChild;\n    switchEditable(view, child, \"true\");\n    setTimeout(function () {\n      return switchEditable(view, child, \"false\");\n    }, 20);\n  }\n  return false;\n}\n// A backdrop key mapping used to make sure we always suppress keys\n// that have a dangerous default effect, even if the commands they are\n// bound to return false, and to make sure that cursor-motion keys\n// find a cursor (as opposed to a node selection) when pressed. For\n// cursor-motion keys, the code in the handlers also takes care of\n// block selections.\nfunction getMods(event) {\n  var result = \"\";\n  if (event.ctrlKey) result += \"c\";\n  if (event.metaKey) result += \"m\";\n  if (event.altKey) result += \"a\";\n  if (event.shiftKey) result += \"s\";\n  return result;\n}\nfunction captureKeyDown(view, event) {\n  var code = event.keyCode,\n    mods = getMods(event);\n  if (code == 8 || mac && code == 72 && mods == \"c\") {\n    // Backspace, Ctrl-h on Mac\n    return stopNativeHorizontalDelete(view, -1) || skipIgnoredNodes(view, -1);\n  } else if (code == 46 && !event.shiftKey || mac && code == 68 && mods == \"c\") {\n    // Delete, Ctrl-d on Mac\n    return stopNativeHorizontalDelete(view, 1) || skipIgnoredNodes(view, 1);\n  } else if (code == 13 || code == 27) {\n    // Enter, Esc\n    return true;\n  } else if (code == 37 || mac && code == 66 && mods == \"c\") {\n    // Left arrow, Ctrl-b on Mac\n    var dir = code == 37 ? findDirection(view, view.state.selection.from) == \"ltr\" ? -1 : 1 : -1;\n    return selectHorizontally(view, dir, mods) || skipIgnoredNodes(view, dir);\n  } else if (code == 39 || mac && code == 70 && mods == \"c\") {\n    // Right arrow, Ctrl-f on Mac\n    var _dir = code == 39 ? findDirection(view, view.state.selection.from) == \"ltr\" ? 1 : -1 : 1;\n    return selectHorizontally(view, _dir, mods) || skipIgnoredNodes(view, _dir);\n  } else if (code == 38 || mac && code == 80 && mods == \"c\") {\n    // Up arrow, Ctrl-p on Mac\n    return selectVertically(view, -1, mods) || skipIgnoredNodes(view, -1);\n  } else if (code == 40 || mac && code == 78 && mods == \"c\") {\n    // Down arrow, Ctrl-n on Mac\n    return safariDownArrowBug(view) || selectVertically(view, 1, mods) || skipIgnoredNodes(view, 1);\n  } else if (mods == (mac ? \"m\" : \"c\") && (code == 66 || code == 73 || code == 89 || code == 90)) {\n    // Mod-[biyz]\n    return true;\n  }\n  return false;\n}\nfunction _serializeForClipboard(view, slice) {\n  view.someProp(\"transformCopied\", function (f) {\n    slice = f(slice, view);\n  });\n  var context = [],\n    _slice = slice,\n    content = _slice.content,\n    openStart = _slice.openStart,\n    openEnd = _slice.openEnd;\n  while (openStart > 1 && openEnd > 1 && content.childCount == 1 && content.firstChild.childCount == 1) {\n    openStart--;\n    openEnd--;\n    var node = content.firstChild;\n    context.push(node.type.name, node.attrs != node.type.defaultAttrs ? node.attrs : null);\n    content = node.content;\n  }\n  var serializer = view.someProp(\"clipboardSerializer\") || prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.DOMSerializer.fromSchema(view.state.schema);\n  var doc = detachedDoc(),\n    wrap = doc.createElement(\"div\");\n  wrap.appendChild(serializer.serializeFragment(content, {\n    document: doc\n  }));\n  var firstChild = wrap.firstChild,\n    needsWrap,\n    wrappers = 0;\n  while (firstChild && firstChild.nodeType == 1 && (needsWrap = wrapMap[firstChild.nodeName.toLowerCase()])) {\n    for (var i = needsWrap.length - 1; i >= 0; i--) {\n      var wrapper = doc.createElement(needsWrap[i]);\n      while (wrap.firstChild) wrapper.appendChild(wrap.firstChild);\n      wrap.appendChild(wrapper);\n      wrappers++;\n    }\n    firstChild = wrap.firstChild;\n  }\n  if (firstChild && firstChild.nodeType == 1) firstChild.setAttribute(\"data-pm-slice\", \"\".concat(openStart, \" \").concat(openEnd).concat(wrappers ? \" -\".concat(wrappers) : \"\", \" \").concat(JSON.stringify(context)));\n  var text = view.someProp(\"clipboardTextSerializer\", function (f) {\n    return f(slice, view);\n  }) || slice.content.textBetween(0, slice.content.size, \"\\n\\n\");\n  return {\n    dom: wrap,\n    text: text,\n    slice: slice\n  };\n}\n// Read a slice of content from the clipboard (or drop data).\nfunction parseFromClipboard(view, text, html, plainText, $context) {\n  var inCode = $context.parent.type.spec.code;\n  var dom, slice;\n  if (!html && !text) return null;\n  var asText = text && (plainText || inCode || !html);\n  if (asText) {\n    view.someProp(\"transformPastedText\", function (f) {\n      text = f(text, inCode || plainText, view);\n    });\n    if (inCode) return text ? new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(view.state.schema.text(text.replace(/\\r\\n?/g, \"\\n\"))), 0, 0) : prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.empty;\n    var parsed = view.someProp(\"clipboardTextParser\", function (f) {\n      return f(text, $context, plainText, view);\n    });\n    if (parsed) {\n      slice = parsed;\n    } else {\n      var marks = $context.marks();\n      var schema = view.state.schema,\n        serializer = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.DOMSerializer.fromSchema(schema);\n      dom = document.createElement(\"div\");\n      text.split(/(?:\\r\\n?|\\n)+/).forEach(function (block) {\n        var p = dom.appendChild(document.createElement(\"p\"));\n        if (block) p.appendChild(serializer.serializeNode(schema.text(block, marks)));\n      });\n    }\n  } else {\n    view.someProp(\"transformPastedHTML\", function (f) {\n      html = f(html, view);\n    });\n    dom = readHTML(html);\n    if (webkit) restoreReplacedSpaces(dom);\n  }\n  var contextNode = dom && dom.querySelector(\"[data-pm-slice]\");\n  var sliceData = contextNode && /^(\\d+) (\\d+)(?: -(\\d+))? (.*)/.exec(contextNode.getAttribute(\"data-pm-slice\") || \"\");\n  if (sliceData && sliceData[3]) for (var i = +sliceData[3]; i > 0; i--) {\n    var child = dom.firstChild;\n    while (child && child.nodeType != 1) child = child.nextSibling;\n    if (!child) break;\n    dom = child;\n  }\n  if (!slice) {\n    var parser = view.someProp(\"clipboardParser\") || view.someProp(\"domParser\") || prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.DOMParser.fromSchema(view.state.schema);\n    slice = parser.parseSlice(dom, {\n      preserveWhitespace: !!(asText || sliceData),\n      context: $context,\n      ruleFromNode: function ruleFromNode(dom) {\n        if (dom.nodeName == \"BR\" && !dom.nextSibling && dom.parentNode && !inlineParents.test(dom.parentNode.nodeName)) return {\n          ignore: true\n        };\n        return null;\n      }\n    });\n  }\n  if (sliceData) {\n    slice = addContext(closeSlice(slice, +sliceData[1], +sliceData[2]), sliceData[4]);\n  } else {\n    // HTML wasn't created by ProseMirror. Make sure top-level siblings are coherent\n    slice = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.maxOpen(normalizeSiblings(slice.content, $context), true);\n    if (slice.openStart || slice.openEnd) {\n      var openStart = 0,\n        openEnd = 0;\n      for (var node = slice.content.firstChild; openStart < slice.openStart && !node.type.spec.isolating; openStart++, node = node.firstChild) {}\n      for (var _node2 = slice.content.lastChild; openEnd < slice.openEnd && !_node2.type.spec.isolating; openEnd++, _node2 = _node2.lastChild) {}\n      slice = closeSlice(slice, openStart, openEnd);\n    }\n  }\n  view.someProp(\"transformPasted\", function (f) {\n    slice = f(slice, view);\n  });\n  return slice;\n}\nvar inlineParents = /^(a|abbr|acronym|b|cite|code|del|em|i|ins|kbd|label|output|q|ruby|s|samp|span|strong|sub|sup|time|u|tt|var)$/i;\n// Takes a slice parsed with parseSlice, which means there hasn't been\n// any content-expression checking done on the top nodes, tries to\n// find a parent node in the current context that might fit the nodes,\n// and if successful, rebuilds the slice so that it fits into that parent.\n//\n// This addresses the problem that Transform.replace expects a\n// coherent slice, and will fail to place a set of siblings that don't\n// fit anywhere in the schema.\nfunction normalizeSiblings(fragment, $context) {\n  if (fragment.childCount < 2) return fragment;\n  var _loop = function _loop() {\n      var parent = $context.node(d);\n      var match = parent.contentMatchAt($context.index(d));\n      var lastWrap,\n        result = [];\n      fragment.forEach(function (node) {\n        if (!result) return;\n        var wrap = match.findWrapping(node.type),\n          inLast;\n        if (!wrap) return result = null;\n        if (inLast = result.length && lastWrap.length && addToSibling(wrap, lastWrap, node, result[result.length - 1], 0)) {\n          result[result.length - 1] = inLast;\n        } else {\n          if (result.length) result[result.length - 1] = closeRight(result[result.length - 1], lastWrap.length);\n          var wrapped = withWrappers(node, wrap);\n          result.push(wrapped);\n          match = match.matchType(wrapped.type);\n          lastWrap = wrap;\n        }\n      });\n      if (result) return {\n        v: prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(result)\n      };\n    },\n    _ret;\n  for (var d = $context.depth; d >= 0; d--) {\n    _ret = _loop();\n    if (_ret) return _ret.v;\n  }\n  return fragment;\n}\nfunction withWrappers(node, wrap) {\n  var from = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  for (var i = wrap.length - 1; i >= from; i--) node = wrap[i].create(null, prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(node));\n  return node;\n}\n// Used to group adjacent nodes wrapped in similar parents by\n// normalizeSiblings into the same parent node\nfunction addToSibling(wrap, lastWrap, node, sibling, depth) {\n  if (depth < wrap.length && depth < lastWrap.length && wrap[depth] == lastWrap[depth]) {\n    var inner = addToSibling(wrap, lastWrap, node, sibling.lastChild, depth + 1);\n    if (inner) return sibling.copy(sibling.content.replaceChild(sibling.childCount - 1, inner));\n    var match = sibling.contentMatchAt(sibling.childCount);\n    if (match.matchType(depth == wrap.length - 1 ? node.type : wrap[depth + 1])) return sibling.copy(sibling.content.append(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(withWrappers(node, wrap, depth + 1))));\n  }\n}\nfunction closeRight(node, depth) {\n  if (depth == 0) return node;\n  var fragment = node.content.replaceChild(node.childCount - 1, closeRight(node.lastChild, depth - 1));\n  var fill = node.contentMatchAt(node.childCount).fillBefore(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty, true);\n  return node.copy(fragment.append(fill));\n}\nfunction closeRange(fragment, side, from, to, depth, openEnd) {\n  var node = side < 0 ? fragment.firstChild : fragment.lastChild,\n    inner = node.content;\n  if (fragment.childCount > 1) openEnd = 0;\n  if (depth < to - 1) inner = closeRange(inner, side, from, to, depth + 1, openEnd);\n  if (depth >= from) inner = side < 0 ? node.contentMatchAt(0).fillBefore(inner, openEnd <= depth).append(inner) : inner.append(node.contentMatchAt(node.childCount).fillBefore(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty, true));\n  return fragment.replaceChild(side < 0 ? 0 : fragment.childCount - 1, node.copy(inner));\n}\nfunction closeSlice(slice, openStart, openEnd) {\n  if (openStart < slice.openStart) slice = new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(closeRange(slice.content, -1, openStart, slice.openStart, 0, slice.openEnd), openStart, slice.openEnd);\n  if (openEnd < slice.openEnd) slice = new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(closeRange(slice.content, 1, openEnd, slice.openEnd, 0, 0), slice.openStart, openEnd);\n  return slice;\n}\n// Trick from jQuery -- some elements must be wrapped in other\n// elements for innerHTML to work. I.e. if you do `div.innerHTML =\n// \"<td>..</td>\"` the table cells are ignored.\nvar wrapMap = {\n  thead: [\"table\"],\n  tbody: [\"table\"],\n  tfoot: [\"table\"],\n  caption: [\"table\"],\n  colgroup: [\"table\"],\n  col: [\"table\", \"colgroup\"],\n  tr: [\"table\", \"tbody\"],\n  td: [\"table\", \"tbody\", \"tr\"],\n  th: [\"table\", \"tbody\", \"tr\"]\n};\nvar _detachedDoc = null;\nfunction detachedDoc() {\n  return _detachedDoc || (_detachedDoc = document.implementation.createHTMLDocument(\"title\"));\n}\nvar _policy = null;\nfunction maybeWrapTrusted(html) {\n  var trustedTypes = window.trustedTypes;\n  if (!trustedTypes) return html;\n  // With the require-trusted-types-for CSP, Chrome will block\n  // innerHTML, even on a detached document. This wraps the string in\n  // a way that makes the browser allow us to use its parser again.\n  if (!_policy) _policy = trustedTypes.createPolicy(\"ProseMirrorClipboard\", {\n    createHTML: function createHTML(s) {\n      return s;\n    }\n  });\n  return _policy.createHTML(html);\n}\nfunction readHTML(html) {\n  var metas = /^(\\s*<meta [^>]*>)*/.exec(html);\n  if (metas) html = html.slice(metas[0].length);\n  var elt = detachedDoc().createElement(\"div\");\n  var firstTag = /<([a-z][^>\\s]+)/i.exec(html),\n    wrap;\n  if (wrap = firstTag && wrapMap[firstTag[1].toLowerCase()]) html = wrap.map(function (n) {\n    return \"<\" + n + \">\";\n  }).join(\"\") + html + wrap.map(function (n) {\n    return \"</\" + n + \">\";\n  }).reverse().join(\"\");\n  elt.innerHTML = maybeWrapTrusted(html);\n  if (wrap) for (var i = 0; i < wrap.length; i++) elt = elt.querySelector(wrap[i]) || elt;\n  return elt;\n}\n// Webkit browsers do some hard-to-predict replacement of regular\n// spaces with non-breaking spaces when putting content on the\n// clipboard. This tries to convert such non-breaking spaces (which\n// will be wrapped in a plain span on Chrome, a span with class\n// Apple-converted-space on Safari) back to regular spaces.\nfunction restoreReplacedSpaces(dom) {\n  var nodes = dom.querySelectorAll(chrome ? \"span:not([class]):not([style])\" : \"span.Apple-converted-space\");\n  for (var i = 0; i < nodes.length; i++) {\n    var node = nodes[i];\n    if (node.childNodes.length == 1 && node.textContent == \"\\xA0\" && node.parentNode) node.parentNode.replaceChild(dom.ownerDocument.createTextNode(\" \"), node);\n  }\n}\nfunction addContext(slice, context) {\n  if (!slice.size) return slice;\n  var schema = slice.content.firstChild.type.schema,\n    array;\n  try {\n    array = JSON.parse(context);\n  } catch (e) {\n    return slice;\n  }\n  var content = slice.content,\n    openStart = slice.openStart,\n    openEnd = slice.openEnd;\n  for (var i = array.length - 2; i >= 0; i -= 2) {\n    var type = schema.nodes[array[i]];\n    if (!type || type.hasRequiredAttrs()) break;\n    content = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(type.create(array[i + 1], content));\n    openStart++;\n    openEnd++;\n  }\n  return new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(content, openStart, openEnd);\n}\n\n// A collection of DOM events that occur within the editor, and callback functions\n// to invoke when the event fires.\nvar handlers = {};\nvar editHandlers = {};\nvar passiveHandlers = {\n  touchstart: true,\n  touchmove: true\n};\nvar InputState = /*#__PURE__*/_createClass(function InputState() {\n  _classCallCheck(this, InputState);\n  this.shiftKey = false;\n  this.mouseDown = null;\n  this.lastKeyCode = null;\n  this.lastKeyCodeTime = 0;\n  this.lastClick = {\n    time: 0,\n    x: 0,\n    y: 0,\n    type: \"\"\n  };\n  this.lastSelectionOrigin = null;\n  this.lastSelectionTime = 0;\n  this.lastIOSEnter = 0;\n  this.lastIOSEnterFallbackTimeout = -1;\n  this.lastFocus = 0;\n  this.lastTouch = 0;\n  this.lastChromeDelete = 0;\n  this.composing = false;\n  this.compositionNode = null;\n  this.composingTimeout = -1;\n  this.compositionNodes = [];\n  this.compositionEndedAt = -2e8;\n  this.compositionID = 1;\n  // Set to a composition ID when there are pending changes at compositionend\n  this.compositionPendingChanges = 0;\n  this.domChangeCount = 0;\n  this.eventHandlers = Object.create(null);\n  this.hideSelectionGuard = null;\n});\nfunction initInput(view) {\n  var _loop2 = function _loop2() {\n    var handler = handlers[event];\n    view.dom.addEventListener(event, view.input.eventHandlers[event] = function (event) {\n      if (eventBelongsToView(view, event) && !runCustomHandler(view, event) && (view.editable || !(event.type in editHandlers))) handler(view, event);\n    }, passiveHandlers[event] ? {\n      passive: true\n    } : undefined);\n  };\n  for (var event in handlers) {\n    _loop2();\n  }\n  // On Safari, for reasons beyond my understanding, adding an input\n  // event handler makes an issue where the composition vanishes when\n  // you press enter go away.\n  if (safari) view.dom.addEventListener(\"input\", function () {\n    return null;\n  });\n  ensureListeners(view);\n}\nfunction setSelectionOrigin(view, origin) {\n  view.input.lastSelectionOrigin = origin;\n  view.input.lastSelectionTime = Date.now();\n}\nfunction destroyInput(view) {\n  view.domObserver.stop();\n  for (var type in view.input.eventHandlers) view.dom.removeEventListener(type, view.input.eventHandlers[type]);\n  clearTimeout(view.input.composingTimeout);\n  clearTimeout(view.input.lastIOSEnterFallbackTimeout);\n}\nfunction ensureListeners(view) {\n  view.someProp(\"handleDOMEvents\", function (currentHandlers) {\n    for (var type in currentHandlers) if (!view.input.eventHandlers[type]) view.dom.addEventListener(type, view.input.eventHandlers[type] = function (event) {\n      return runCustomHandler(view, event);\n    });\n  });\n}\nfunction runCustomHandler(view, event) {\n  return view.someProp(\"handleDOMEvents\", function (handlers) {\n    var handler = handlers[event.type];\n    return handler ? handler(view, event) || event.defaultPrevented : false;\n  });\n}\nfunction eventBelongsToView(view, event) {\n  if (!event.bubbles) return true;\n  if (event.defaultPrevented) return false;\n  for (var node = event.target; node != view.dom; node = node.parentNode) if (!node || node.nodeType == 11 || node.pmViewDesc && node.pmViewDesc.stopEvent(event)) return false;\n  return true;\n}\nfunction _dispatchEvent(view, event) {\n  if (!runCustomHandler(view, event) && handlers[event.type] && (view.editable || !(event.type in editHandlers))) handlers[event.type](view, event);\n}\neditHandlers.keydown = function (view, _event) {\n  var event = _event;\n  view.input.shiftKey = event.keyCode == 16 || event.shiftKey;\n  if (inOrNearComposition(view, event)) return;\n  view.input.lastKeyCode = event.keyCode;\n  view.input.lastKeyCodeTime = Date.now();\n  // Suppress enter key events on Chrome Android, because those tend\n  // to be part of a confused sequence of composition events fired,\n  // and handling them eagerly tends to corrupt the input.\n  if (android && chrome && event.keyCode == 13) return;\n  if (event.keyCode != 229) view.domObserver.forceFlush();\n  // On iOS, if we preventDefault enter key presses, the virtual\n  // keyboard gets confused. So the hack here is to set a flag that\n  // makes the DOM change code recognize that what just happens should\n  // be replaced by whatever the Enter key handlers do.\n  if (ios && event.keyCode == 13 && !event.ctrlKey && !event.altKey && !event.metaKey) {\n    var now = Date.now();\n    view.input.lastIOSEnter = now;\n    view.input.lastIOSEnterFallbackTimeout = setTimeout(function () {\n      if (view.input.lastIOSEnter == now) {\n        view.someProp(\"handleKeyDown\", function (f) {\n          return f(view, keyEvent(13, \"Enter\"));\n        });\n        view.input.lastIOSEnter = 0;\n      }\n    }, 200);\n  } else if (view.someProp(\"handleKeyDown\", function (f) {\n    return f(view, event);\n  }) || captureKeyDown(view, event)) {\n    event.preventDefault();\n  } else {\n    setSelectionOrigin(view, \"key\");\n  }\n};\neditHandlers.keyup = function (view, event) {\n  if (event.keyCode == 16) view.input.shiftKey = false;\n};\neditHandlers.keypress = function (view, _event) {\n  var event = _event;\n  if (inOrNearComposition(view, event) || !event.charCode || event.ctrlKey && !event.altKey || mac && event.metaKey) return;\n  if (view.someProp(\"handleKeyPress\", function (f) {\n    return f(view, event);\n  })) {\n    event.preventDefault();\n    return;\n  }\n  var sel = view.state.selection;\n  if (!(sel instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection) || !sel.$from.sameParent(sel.$to)) {\n    var text = String.fromCharCode(event.charCode);\n    if (!/[\\r\\n]/.test(text) && !view.someProp(\"handleTextInput\", function (f) {\n      return f(view, sel.$from.pos, sel.$to.pos, text);\n    })) view.dispatch(view.state.tr.insertText(text).scrollIntoView());\n    event.preventDefault();\n  }\n};\nfunction eventCoords(event) {\n  return {\n    left: event.clientX,\n    top: event.clientY\n  };\n}\nfunction isNear(event, click) {\n  var dx = click.x - event.clientX,\n    dy = click.y - event.clientY;\n  return dx * dx + dy * dy < 100;\n}\nfunction runHandlerOnContext(view, propName, pos, inside, event) {\n  if (inside == -1) return false;\n  var $pos = view.state.doc.resolve(inside);\n  var _loop3 = function _loop3(i) {\n      if (view.someProp(propName, function (f) {\n        return i > $pos.depth ? f(view, pos, $pos.nodeAfter, $pos.before(i), event, true) : f(view, pos, $pos.node(i), $pos.before(i), event, false);\n      })) return {\n        v: true\n      };\n    },\n    _ret2;\n  for (var i = $pos.depth + 1; i > 0; i--) {\n    _ret2 = _loop3(i);\n    if (_ret2) return _ret2.v;\n  }\n  return false;\n}\nfunction updateSelection(view, selection, origin) {\n  if (!view.focused) view.focus();\n  if (view.state.selection.eq(selection)) return;\n  var tr = view.state.tr.setSelection(selection);\n  if (origin == \"pointer\") tr.setMeta(\"pointer\", true);\n  view.dispatch(tr);\n}\nfunction selectClickedLeaf(view, inside) {\n  if (inside == -1) return false;\n  var $pos = view.state.doc.resolve(inside),\n    node = $pos.nodeAfter;\n  if (node && node.isAtom && prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.isSelectable(node)) {\n    updateSelection(view, new prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection($pos), \"pointer\");\n    return true;\n  }\n  return false;\n}\nfunction selectClickedNode(view, inside) {\n  if (inside == -1) return false;\n  var sel = view.state.selection,\n    selectedNode,\n    selectAt;\n  if (sel instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection) selectedNode = sel.node;\n  var $pos = view.state.doc.resolve(inside);\n  for (var i = $pos.depth + 1; i > 0; i--) {\n    var node = i > $pos.depth ? $pos.nodeAfter : $pos.node(i);\n    if (prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.isSelectable(node)) {\n      if (selectedNode && sel.$from.depth > 0 && i >= sel.$from.depth && $pos.before(sel.$from.depth + 1) == sel.$from.pos) selectAt = $pos.before(sel.$from.depth);else selectAt = $pos.before(i);\n      break;\n    }\n  }\n  if (selectAt != null) {\n    updateSelection(view, prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.create(view.state.doc, selectAt), \"pointer\");\n    return true;\n  } else {\n    return false;\n  }\n}\nfunction handleSingleClick(view, pos, inside, event, selectNode) {\n  return runHandlerOnContext(view, \"handleClickOn\", pos, inside, event) || view.someProp(\"handleClick\", function (f) {\n    return f(view, pos, event);\n  }) || (selectNode ? selectClickedNode(view, inside) : selectClickedLeaf(view, inside));\n}\nfunction handleDoubleClick(view, pos, inside, event) {\n  return runHandlerOnContext(view, \"handleDoubleClickOn\", pos, inside, event) || view.someProp(\"handleDoubleClick\", function (f) {\n    return f(view, pos, event);\n  });\n}\nfunction handleTripleClick(view, pos, inside, event) {\n  return runHandlerOnContext(view, \"handleTripleClickOn\", pos, inside, event) || view.someProp(\"handleTripleClick\", function (f) {\n    return f(view, pos, event);\n  }) || defaultTripleClick(view, inside, event);\n}\nfunction defaultTripleClick(view, inside, event) {\n  if (event.button != 0) return false;\n  var doc = view.state.doc;\n  if (inside == -1) {\n    if (doc.inlineContent) {\n      updateSelection(view, prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection.create(doc, 0, doc.content.size), \"pointer\");\n      return true;\n    }\n    return false;\n  }\n  var $pos = doc.resolve(inside);\n  for (var i = $pos.depth + 1; i > 0; i--) {\n    var node = i > $pos.depth ? $pos.nodeAfter : $pos.node(i);\n    var nodePos = $pos.before(i);\n    if (node.inlineContent) updateSelection(view, prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection.create(doc, nodePos + 1, nodePos + 1 + node.content.size), \"pointer\");else if (prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.isSelectable(node)) updateSelection(view, prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.create(doc, nodePos), \"pointer\");else continue;\n    return true;\n  }\n}\nfunction forceDOMFlush(view) {\n  return endComposition(view);\n}\nvar selectNodeModifier = mac ? \"metaKey\" : \"ctrlKey\";\nhandlers.mousedown = function (view, _event) {\n  var event = _event;\n  view.input.shiftKey = event.shiftKey;\n  var flushed = forceDOMFlush(view);\n  var now = Date.now(),\n    type = \"singleClick\";\n  if (now - view.input.lastClick.time < 500 && isNear(event, view.input.lastClick) && !event[selectNodeModifier]) {\n    if (view.input.lastClick.type == \"singleClick\") type = \"doubleClick\";else if (view.input.lastClick.type == \"doubleClick\") type = \"tripleClick\";\n  }\n  view.input.lastClick = {\n    time: now,\n    x: event.clientX,\n    y: event.clientY,\n    type: type\n  };\n  var pos = view.posAtCoords(eventCoords(event));\n  if (!pos) return;\n  if (type == \"singleClick\") {\n    if (view.input.mouseDown) view.input.mouseDown.done();\n    view.input.mouseDown = new MouseDown(view, pos, event, !!flushed);\n  } else if ((type == \"doubleClick\" ? handleDoubleClick : handleTripleClick)(view, pos.pos, pos.inside, event)) {\n    event.preventDefault();\n  } else {\n    setSelectionOrigin(view, \"pointer\");\n  }\n};\nvar MouseDown = /*#__PURE__*/function () {\n  function MouseDown(view, pos, event, flushed) {\n    var _this9 = this;\n    _classCallCheck(this, MouseDown);\n    this.view = view;\n    this.pos = pos;\n    this.event = event;\n    this.flushed = flushed;\n    this.delayedSelectionSync = false;\n    this.mightDrag = null;\n    this.startDoc = view.state.doc;\n    this.selectNode = !!event[selectNodeModifier];\n    this.allowDefault = event.shiftKey;\n    var targetNode, targetPos;\n    if (pos.inside > -1) {\n      targetNode = view.state.doc.nodeAt(pos.inside);\n      targetPos = pos.inside;\n    } else {\n      var $pos = view.state.doc.resolve(pos.pos);\n      targetNode = $pos.parent;\n      targetPos = $pos.depth ? $pos.before() : 0;\n    }\n    var target = flushed ? null : event.target;\n    var targetDesc = target ? view.docView.nearestDesc(target, true) : null;\n    this.target = targetDesc && targetDesc.dom.nodeType == 1 ? targetDesc.dom : null;\n    var selection = view.state.selection;\n    if (event.button == 0 && targetNode.type.spec.draggable && targetNode.type.spec.selectable !== false || selection instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection && selection.from <= targetPos && selection.to > targetPos) this.mightDrag = {\n      node: targetNode,\n      pos: targetPos,\n      addAttr: !!(this.target && !this.target.draggable),\n      setUneditable: !!(this.target && gecko && !this.target.hasAttribute(\"contentEditable\"))\n    };\n    if (this.target && this.mightDrag && (this.mightDrag.addAttr || this.mightDrag.setUneditable)) {\n      this.view.domObserver.stop();\n      if (this.mightDrag.addAttr) this.target.draggable = true;\n      if (this.mightDrag.setUneditable) setTimeout(function () {\n        if (_this9.view.input.mouseDown == _this9) _this9.target.setAttribute(\"contentEditable\", \"false\");\n      }, 20);\n      this.view.domObserver.start();\n    }\n    view.root.addEventListener(\"mouseup\", this.up = this.up.bind(this));\n    view.root.addEventListener(\"mousemove\", this.move = this.move.bind(this));\n    setSelectionOrigin(view, \"pointer\");\n  }\n  return _createClass(MouseDown, [{\n    key: \"done\",\n    value: function done() {\n      var _this10 = this;\n      this.view.root.removeEventListener(\"mouseup\", this.up);\n      this.view.root.removeEventListener(\"mousemove\", this.move);\n      if (this.mightDrag && this.target) {\n        this.view.domObserver.stop();\n        if (this.mightDrag.addAttr) this.target.removeAttribute(\"draggable\");\n        if (this.mightDrag.setUneditable) this.target.removeAttribute(\"contentEditable\");\n        this.view.domObserver.start();\n      }\n      if (this.delayedSelectionSync) setTimeout(function () {\n        return selectionToDOM(_this10.view);\n      });\n      this.view.input.mouseDown = null;\n    }\n  }, {\n    key: \"up\",\n    value: function up(event) {\n      this.done();\n      if (!this.view.dom.contains(event.target)) return;\n      var pos = this.pos;\n      if (this.view.state.doc != this.startDoc) pos = this.view.posAtCoords(eventCoords(event));\n      this.updateAllowDefault(event);\n      if (this.allowDefault || !pos) {\n        setSelectionOrigin(this.view, \"pointer\");\n      } else if (handleSingleClick(this.view, pos.pos, pos.inside, event, this.selectNode)) {\n        event.preventDefault();\n      } else if (event.button == 0 && (this.flushed ||\n      // Safari ignores clicks on draggable elements\n      safari && this.mightDrag && !this.mightDrag.node.isAtom ||\n      // Chrome will sometimes treat a node selection as a\n      // cursor, but still report that the node is selected\n      // when asked through getSelection. You'll then get a\n      // situation where clicking at the point where that\n      // (hidden) cursor is doesn't change the selection, and\n      // thus doesn't get a reaction from ProseMirror. This\n      // works around that.\n      chrome && !this.view.state.selection.visible && Math.min(Math.abs(pos.pos - this.view.state.selection.from), Math.abs(pos.pos - this.view.state.selection.to)) <= 2)) {\n        updateSelection(this.view, prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.Selection.near(this.view.state.doc.resolve(pos.pos)), \"pointer\");\n        event.preventDefault();\n      } else {\n        setSelectionOrigin(this.view, \"pointer\");\n      }\n    }\n  }, {\n    key: \"move\",\n    value: function move(event) {\n      this.updateAllowDefault(event);\n      setSelectionOrigin(this.view, \"pointer\");\n      if (event.buttons == 0) this.done();\n    }\n  }, {\n    key: \"updateAllowDefault\",\n    value: function updateAllowDefault(event) {\n      if (!this.allowDefault && (Math.abs(this.event.x - event.clientX) > 4 || Math.abs(this.event.y - event.clientY) > 4)) this.allowDefault = true;\n    }\n  }]);\n}();\nhandlers.touchstart = function (view) {\n  view.input.lastTouch = Date.now();\n  forceDOMFlush(view);\n  setSelectionOrigin(view, \"pointer\");\n};\nhandlers.touchmove = function (view) {\n  view.input.lastTouch = Date.now();\n  setSelectionOrigin(view, \"pointer\");\n};\nhandlers.contextmenu = function (view) {\n  return forceDOMFlush(view);\n};\nfunction inOrNearComposition(view, event) {\n  if (view.composing) return true;\n  // See https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/.\n  // On Japanese input method editors (IMEs), the Enter key is used to confirm character\n  // selection. On Safari, when Enter is pressed, compositionend and keydown events are\n  // emitted. The keydown event triggers newline insertion, which we don't want.\n  // This method returns true if the keydown event should be ignored.\n  // We only ignore it once, as pressing Enter a second time *should* insert a newline.\n  // Furthermore, the keydown event timestamp must be close to the compositionEndedAt timestamp.\n  // This guards against the case where compositionend is triggered without the keyboard\n  // (e.g. character confirmation may be done with the mouse), and keydown is triggered\n  // afterwards- we wouldn't want to ignore the keydown event in this case.\n  if (safari && Math.abs(event.timeStamp - view.input.compositionEndedAt) < 500) {\n    view.input.compositionEndedAt = -2e8;\n    return true;\n  }\n  return false;\n}\n// Drop active composition after 5 seconds of inactivity on Android\nvar timeoutComposition = android ? 5000 : -1;\neditHandlers.compositionstart = editHandlers.compositionupdate = function (view) {\n  if (!view.composing) {\n    view.domObserver.flush();\n    var state = view.state,\n      $pos = state.selection.$to;\n    if (state.selection instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection && (state.storedMarks || !$pos.textOffset && $pos.parentOffset && $pos.nodeBefore.marks.some(function (m) {\n      return m.type.spec.inclusive === false;\n    }))) {\n      // Need to wrap the cursor in mark nodes different from the ones in the DOM context\n      view.markCursor = view.state.storedMarks || $pos.marks();\n      endComposition(view, true);\n      view.markCursor = null;\n    } else {\n      endComposition(view, !state.selection.empty);\n      // In firefox, if the cursor is after but outside a marked node,\n      // the inserted text won't inherit the marks. So this moves it\n      // inside if necessary.\n      if (gecko && state.selection.empty && $pos.parentOffset && !$pos.textOffset && $pos.nodeBefore.marks.length) {\n        var sel = view.domSelectionRange();\n        for (var node = sel.focusNode, offset = sel.focusOffset; node && node.nodeType == 1 && offset != 0;) {\n          var before = offset < 0 ? node.lastChild : node.childNodes[offset - 1];\n          if (!before) break;\n          if (before.nodeType == 3) {\n            var _sel = view.domSelection();\n            if (_sel) _sel.collapse(before, before.nodeValue.length);\n            break;\n          } else {\n            node = before;\n            offset = -1;\n          }\n        }\n      }\n    }\n    view.input.composing = true;\n  }\n  scheduleComposeEnd(view, timeoutComposition);\n};\neditHandlers.compositionend = function (view, event) {\n  if (view.composing) {\n    view.input.composing = false;\n    view.input.compositionEndedAt = event.timeStamp;\n    view.input.compositionPendingChanges = view.domObserver.pendingRecords().length ? view.input.compositionID : 0;\n    view.input.compositionNode = null;\n    if (view.input.compositionPendingChanges) Promise.resolve().then(function () {\n      return view.domObserver.flush();\n    });\n    view.input.compositionID++;\n    scheduleComposeEnd(view, 20);\n  }\n};\nfunction scheduleComposeEnd(view, delay) {\n  clearTimeout(view.input.composingTimeout);\n  if (delay > -1) view.input.composingTimeout = setTimeout(function () {\n    return endComposition(view);\n  }, delay);\n}\nfunction clearComposition(view) {\n  if (view.composing) {\n    view.input.composing = false;\n    view.input.compositionEndedAt = timestampFromCustomEvent();\n  }\n  while (view.input.compositionNodes.length > 0) view.input.compositionNodes.pop().markParentsDirty();\n}\nfunction findCompositionNode(view) {\n  var sel = view.domSelectionRange();\n  if (!sel.focusNode) return null;\n  var textBefore = textNodeBefore$1(sel.focusNode, sel.focusOffset);\n  var textAfter = textNodeAfter$1(sel.focusNode, sel.focusOffset);\n  if (textBefore && textAfter && textBefore != textAfter) {\n    var descAfter = textAfter.pmViewDesc,\n      lastChanged = view.domObserver.lastChangedTextNode;\n    if (textBefore == lastChanged || textAfter == lastChanged) return lastChanged;\n    if (!descAfter || !descAfter.isText(textAfter.nodeValue)) {\n      return textAfter;\n    } else if (view.input.compositionNode == textAfter) {\n      var descBefore = textBefore.pmViewDesc;\n      if (!(!descBefore || !descBefore.isText(textBefore.nodeValue))) return textAfter;\n    }\n  }\n  return textBefore || textAfter;\n}\nfunction timestampFromCustomEvent() {\n  var event = document.createEvent(\"Event\");\n  event.initEvent(\"event\", true, true);\n  return event.timeStamp;\n}\n/**\n@internal\n*/\nfunction endComposition(view) {\n  var restarting = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  if (android && view.domObserver.flushingSoon >= 0) return;\n  view.domObserver.forceFlush();\n  clearComposition(view);\n  if (restarting || view.docView && view.docView.dirty) {\n    var sel = selectionFromDOM(view);\n    if (sel && !sel.eq(view.state.selection)) view.dispatch(view.state.tr.setSelection(sel));else if ((view.markCursor || restarting) && !view.state.selection.empty) view.dispatch(view.state.tr.deleteSelection());else view.updateState(view.state);\n    return true;\n  }\n  return false;\n}\nfunction captureCopy(view, dom) {\n  // The extra wrapper is somehow necessary on IE/Edge to prevent the\n  // content from being mangled when it is put onto the clipboard\n  if (!view.dom.parentNode) return;\n  var wrap = view.dom.parentNode.appendChild(document.createElement(\"div\"));\n  wrap.appendChild(dom);\n  wrap.style.cssText = \"position: fixed; left: -10000px; top: 10px\";\n  var sel = getSelection(),\n    range = document.createRange();\n  range.selectNodeContents(dom);\n  // Done because IE will fire a selectionchange moving the selection\n  // to its start when removeAllRanges is called and the editor still\n  // has focus (which will mess up the editor's selection state).\n  view.dom.blur();\n  sel.removeAllRanges();\n  sel.addRange(range);\n  setTimeout(function () {\n    if (wrap.parentNode) wrap.parentNode.removeChild(wrap);\n    view.focus();\n  }, 50);\n}\n// This is very crude, but unfortunately both these browsers _pretend_\n// that they have a clipboard API—all the objects and methods are\n// there, they just don't work, and they are hard to test.\nvar brokenClipboardAPI = ie && ie_version < 15 || ios && webkit_version < 604;\nhandlers.copy = editHandlers.cut = function (view, _event) {\n  var event = _event;\n  var sel = view.state.selection,\n    cut = event.type == \"cut\";\n  if (sel.empty) return;\n  // IE and Edge's clipboard interface is completely broken\n  var data = brokenClipboardAPI ? null : event.clipboardData;\n  var slice = sel.content(),\n    _serializeForClipboar = _serializeForClipboard(view, slice),\n    dom = _serializeForClipboar.dom,\n    text = _serializeForClipboar.text;\n  if (data) {\n    event.preventDefault();\n    data.clearData();\n    data.setData(\"text/html\", dom.innerHTML);\n    data.setData(\"text/plain\", text);\n  } else {\n    captureCopy(view, dom);\n  }\n  if (cut) view.dispatch(view.state.tr.deleteSelection().scrollIntoView().setMeta(\"uiEvent\", \"cut\"));\n};\nfunction sliceSingleNode(slice) {\n  return slice.openStart == 0 && slice.openEnd == 0 && slice.content.childCount == 1 ? slice.content.firstChild : null;\n}\nfunction capturePaste(view, event) {\n  if (!view.dom.parentNode) return;\n  var plainText = view.input.shiftKey || view.state.selection.$from.parent.type.spec.code;\n  var target = view.dom.parentNode.appendChild(document.createElement(plainText ? \"textarea\" : \"div\"));\n  if (!plainText) target.contentEditable = \"true\";\n  target.style.cssText = \"position: fixed; left: -10000px; top: 10px\";\n  target.focus();\n  var plain = view.input.shiftKey && view.input.lastKeyCode != 45;\n  setTimeout(function () {\n    view.focus();\n    if (target.parentNode) target.parentNode.removeChild(target);\n    if (plainText) doPaste(view, target.value, null, plain, event);else doPaste(view, target.textContent, target.innerHTML, plain, event);\n  }, 50);\n}\nfunction doPaste(view, text, html, preferPlain, event) {\n  var slice = parseFromClipboard(view, text, html, preferPlain, view.state.selection.$from);\n  if (view.someProp(\"handlePaste\", function (f) {\n    return f(view, event, slice || prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.empty);\n  })) return true;\n  if (!slice) return false;\n  var singleNode = sliceSingleNode(slice);\n  var tr = singleNode ? view.state.tr.replaceSelectionWith(singleNode, preferPlain) : view.state.tr.replaceSelection(slice);\n  view.dispatch(tr.scrollIntoView().setMeta(\"paste\", true).setMeta(\"uiEvent\", \"paste\"));\n  return true;\n}\nfunction getText(clipboardData) {\n  var text = clipboardData.getData(\"text/plain\") || clipboardData.getData(\"Text\");\n  if (text) return text;\n  var uris = clipboardData.getData(\"text/uri-list\");\n  return uris ? uris.replace(/\\r?\\n/g, \" \") : \"\";\n}\neditHandlers.paste = function (view, _event) {\n  var event = _event;\n  // Handling paste from JavaScript during composition is very poorly\n  // handled by browsers, so as a dodgy but preferable kludge, we just\n  // let the browser do its native thing there, except on Android,\n  // where the editor is almost always composing.\n  if (view.composing && !android) return;\n  var data = brokenClipboardAPI ? null : event.clipboardData;\n  var plain = view.input.shiftKey && view.input.lastKeyCode != 45;\n  if (data && doPaste(view, getText(data), data.getData(\"text/html\"), plain, event)) event.preventDefault();else capturePaste(view, event);\n};\nvar Dragging = /*#__PURE__*/_createClass(function Dragging(slice, move, node) {\n  _classCallCheck(this, Dragging);\n  this.slice = slice;\n  this.move = move;\n  this.node = node;\n});\nvar dragCopyModifier = mac ? \"altKey\" : \"ctrlKey\";\nhandlers.dragstart = function (view, _event) {\n  var event = _event;\n  var mouseDown = view.input.mouseDown;\n  if (mouseDown) mouseDown.done();\n  if (!event.dataTransfer) return;\n  var sel = view.state.selection;\n  var pos = sel.empty ? null : view.posAtCoords(eventCoords(event));\n  var node;\n  if (pos && pos.pos >= sel.from && pos.pos <= (sel instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection ? sel.to - 1 : sel.to)) ;else if (mouseDown && mouseDown.mightDrag) {\n    node = prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.create(view.state.doc, mouseDown.mightDrag.pos);\n  } else if (event.target && event.target.nodeType == 1) {\n    var desc = view.docView.nearestDesc(event.target, true);\n    if (desc && desc.node.type.spec.draggable && desc != view.docView) node = prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.create(view.state.doc, desc.posBefore);\n  }\n  var draggedSlice = (node || view.state.selection).content();\n  var _serializeForClipboar2 = _serializeForClipboard(view, draggedSlice),\n    dom = _serializeForClipboar2.dom,\n    text = _serializeForClipboar2.text,\n    slice = _serializeForClipboar2.slice;\n  // Pre-120 Chrome versions clear files when calling `clearData` (#1472)\n  if (!event.dataTransfer.files.length || !chrome || chrome_version > 120) event.dataTransfer.clearData();\n  event.dataTransfer.setData(brokenClipboardAPI ? \"Text\" : \"text/html\", dom.innerHTML);\n  // See https://github.com/ProseMirror/prosemirror/issues/1156\n  event.dataTransfer.effectAllowed = \"copyMove\";\n  if (!brokenClipboardAPI) event.dataTransfer.setData(\"text/plain\", text);\n  view.dragging = new Dragging(slice, !event[dragCopyModifier], node);\n};\nhandlers.dragend = function (view) {\n  var dragging = view.dragging;\n  window.setTimeout(function () {\n    if (view.dragging == dragging) view.dragging = null;\n  }, 50);\n};\neditHandlers.dragover = editHandlers.dragenter = function (_, e) {\n  return e.preventDefault();\n};\neditHandlers.drop = function (view, _event) {\n  var event = _event;\n  var dragging = view.dragging;\n  view.dragging = null;\n  if (!event.dataTransfer) return;\n  var eventPos = view.posAtCoords(eventCoords(event));\n  if (!eventPos) return;\n  var $mouse = view.state.doc.resolve(eventPos.pos);\n  var slice = dragging && dragging.slice;\n  if (slice) {\n    view.someProp(\"transformPasted\", function (f) {\n      slice = f(slice, view);\n    });\n  } else {\n    slice = parseFromClipboard(view, getText(event.dataTransfer), brokenClipboardAPI ? null : event.dataTransfer.getData(\"text/html\"), false, $mouse);\n  }\n  var move = !!(dragging && !event[dragCopyModifier]);\n  if (view.someProp(\"handleDrop\", function (f) {\n    return f(view, event, slice || prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.empty, move);\n  })) {\n    event.preventDefault();\n    return;\n  }\n  if (!slice) return;\n  event.preventDefault();\n  var insertPos = slice ? (0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_2__.dropPoint)(view.state.doc, $mouse.pos, slice) : $mouse.pos;\n  if (insertPos == null) insertPos = $mouse.pos;\n  var tr = view.state.tr;\n  if (move) {\n    var node = dragging.node;\n    if (node) node.replace(tr);else tr.deleteSelection();\n  }\n  var pos = tr.mapping.map(insertPos);\n  var isNode = slice.openStart == 0 && slice.openEnd == 0 && slice.content.childCount == 1;\n  var beforeInsert = tr.doc;\n  if (isNode) tr.replaceRangeWith(pos, pos, slice.content.firstChild);else tr.replaceRange(pos, pos, slice);\n  if (tr.doc.eq(beforeInsert)) return;\n  var $pos = tr.doc.resolve(pos);\n  if (isNode && prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.isSelectable(slice.content.firstChild) && $pos.nodeAfter && $pos.nodeAfter.sameMarkup(slice.content.firstChild)) {\n    tr.setSelection(new prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection($pos));\n  } else {\n    var end = tr.mapping.map(insertPos);\n    tr.mapping.maps[tr.mapping.maps.length - 1].forEach(function (_from, _to, _newFrom, newTo) {\n      return end = newTo;\n    });\n    tr.setSelection(selectionBetween(view, $pos, tr.doc.resolve(end)));\n  }\n  view.focus();\n  view.dispatch(tr.setMeta(\"uiEvent\", \"drop\"));\n};\nhandlers.focus = function (view) {\n  view.input.lastFocus = Date.now();\n  if (!view.focused) {\n    view.domObserver.stop();\n    view.dom.classList.add(\"ProseMirror-focused\");\n    view.domObserver.start();\n    view.focused = true;\n    setTimeout(function () {\n      if (view.docView && view.hasFocus() && !view.domObserver.currentSelection.eq(view.domSelectionRange())) selectionToDOM(view);\n    }, 20);\n  }\n};\nhandlers.blur = function (view, _event) {\n  var event = _event;\n  if (view.focused) {\n    view.domObserver.stop();\n    view.dom.classList.remove(\"ProseMirror-focused\");\n    view.domObserver.start();\n    if (event.relatedTarget && view.dom.contains(event.relatedTarget)) view.domObserver.currentSelection.clear();\n    view.focused = false;\n  }\n};\nhandlers.beforeinput = function (view, _event) {\n  var event = _event;\n  // We should probably do more with beforeinput events, but support\n  // is so spotty that I'm still waiting to see where they are going.\n  // Very specific hack to deal with backspace sometimes failing on\n  // Chrome Android when after an uneditable node.\n  if (chrome && android && event.inputType == \"deleteContentBackward\") {\n    view.domObserver.flushSoon();\n    var domChangeCount = view.input.domChangeCount;\n    setTimeout(function () {\n      if (view.input.domChangeCount != domChangeCount) return; // Event already had some effect\n      // This bug tends to close the virtual keyboard, so we refocus\n      view.dom.blur();\n      view.focus();\n      if (view.someProp(\"handleKeyDown\", function (f) {\n        return f(view, keyEvent(8, \"Backspace\"));\n      })) return;\n      var $cursor = view.state.selection.$cursor;\n      // Crude approximation of backspace behavior when no command handled it\n      if ($cursor && $cursor.pos > 0) view.dispatch(view.state.tr[\"delete\"]($cursor.pos - 1, $cursor.pos).scrollIntoView());\n    }, 50);\n  }\n};\n// Make sure all handlers get registered\nfor (var prop in editHandlers) handlers[prop] = editHandlers[prop];\nfunction compareObjs(a, b) {\n  if (a == b) return true;\n  for (var p in a) if (a[p] !== b[p]) return false;\n  for (var _p in b) if (!(_p in a)) return false;\n  return true;\n}\nvar WidgetType = /*#__PURE__*/function () {\n  function WidgetType(toDOM, spec) {\n    _classCallCheck(this, WidgetType);\n    this.toDOM = toDOM;\n    this.spec = spec || noSpec;\n    this.side = this.spec.side || 0;\n  }\n  return _createClass(WidgetType, [{\n    key: \"map\",\n    value: function map(mapping, span, offset, oldOffset) {\n      var _mapping$mapResult = mapping.mapResult(span.from + oldOffset, this.side < 0 ? -1 : 1),\n        pos = _mapping$mapResult.pos,\n        deleted = _mapping$mapResult.deleted;\n      return deleted ? null : new Decoration(pos - offset, pos - offset, this);\n    }\n  }, {\n    key: \"valid\",\n    value: function valid() {\n      return true;\n    }\n  }, {\n    key: \"eq\",\n    value: function eq(other) {\n      return this == other || other instanceof WidgetType && (this.spec.key && this.spec.key == other.spec.key || this.toDOM == other.toDOM && compareObjs(this.spec, other.spec));\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy(node) {\n      if (this.spec.destroy) this.spec.destroy(node);\n    }\n  }]);\n}();\nvar InlineType = /*#__PURE__*/function () {\n  function InlineType(attrs, spec) {\n    _classCallCheck(this, InlineType);\n    this.attrs = attrs;\n    this.spec = spec || noSpec;\n  }\n  return _createClass(InlineType, [{\n    key: \"map\",\n    value: function map(mapping, span, offset, oldOffset) {\n      var from = mapping.map(span.from + oldOffset, this.spec.inclusiveStart ? -1 : 1) - offset;\n      var to = mapping.map(span.to + oldOffset, this.spec.inclusiveEnd ? 1 : -1) - offset;\n      return from >= to ? null : new Decoration(from, to, this);\n    }\n  }, {\n    key: \"valid\",\n    value: function valid(_, span) {\n      return span.from < span.to;\n    }\n  }, {\n    key: \"eq\",\n    value: function eq(other) {\n      return this == other || other instanceof InlineType && compareObjs(this.attrs, other.attrs) && compareObjs(this.spec, other.spec);\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {}\n  }], [{\n    key: \"is\",\n    value: function is(span) {\n      return span.type instanceof InlineType;\n    }\n  }]);\n}();\nvar NodeType = /*#__PURE__*/function () {\n  function NodeType(attrs, spec) {\n    _classCallCheck(this, NodeType);\n    this.attrs = attrs;\n    this.spec = spec || noSpec;\n  }\n  return _createClass(NodeType, [{\n    key: \"map\",\n    value: function map(mapping, span, offset, oldOffset) {\n      var from = mapping.mapResult(span.from + oldOffset, 1);\n      if (from.deleted) return null;\n      var to = mapping.mapResult(span.to + oldOffset, -1);\n      if (to.deleted || to.pos <= from.pos) return null;\n      return new Decoration(from.pos - offset, to.pos - offset, this);\n    }\n  }, {\n    key: \"valid\",\n    value: function valid(node, span) {\n      var _node$content$findInd = node.content.findIndex(span.from),\n        index = _node$content$findInd.index,\n        offset = _node$content$findInd.offset,\n        child;\n      return offset == span.from && !(child = node.child(index)).isText && offset + child.nodeSize == span.to;\n    }\n  }, {\n    key: \"eq\",\n    value: function eq(other) {\n      return this == other || other instanceof NodeType && compareObjs(this.attrs, other.attrs) && compareObjs(this.spec, other.spec);\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {}\n  }]);\n}();\n/**\nDecoration objects can be provided to the view through the\n[`decorations` prop](https://prosemirror.net/docs/ref/#view.EditorProps.decorations). They come in\nseveral variants—see the static members of this class for details.\n*/\nvar Decoration = /*#__PURE__*/function () {\n  /**\n  @internal\n  */\n  function Decoration(\n  /**\n  The start position of the decoration.\n  */\n  from,\n  /**\n  The end position. Will be the same as `from` for [widget\n  decorations](https://prosemirror.net/docs/ref/#view.Decoration^widget).\n  */\n  to,\n  /**\n  @internal\n  */\n  type) {\n    _classCallCheck(this, Decoration);\n    this.from = from;\n    this.to = to;\n    this.type = type;\n  }\n  /**\n  @internal\n  */\n  return _createClass(Decoration, [{\n    key: \"copy\",\n    value: function copy(from, to) {\n      return new Decoration(from, to, this.type);\n    }\n    /**\n    @internal\n    */\n  }, {\n    key: \"eq\",\n    value: function eq(other) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return this.type.eq(other.type) && this.from + offset == other.from && this.to + offset == other.to;\n    }\n    /**\n    @internal\n    */\n  }, {\n    key: \"map\",\n    value: function map(mapping, offset, oldOffset) {\n      return this.type.map(mapping, this, offset, oldOffset);\n    }\n    /**\n    Creates a widget decoration, which is a DOM node that's shown in\n    the document at the given position. It is recommended that you\n    delay rendering the widget by passing a function that will be\n    called when the widget is actually drawn in a view, but you can\n    also directly pass a DOM node. `getPos` can be used to find the\n    widget's current document position.\n    */\n  }, {\n    key: \"spec\",\n    get:\n    /**\n    The spec provided when creating this decoration. Can be useful\n    if you've stored extra information in that object.\n    */\n    function get() {\n      return this.type.spec;\n    }\n    /**\n    @internal\n    */\n  }, {\n    key: \"inline\",\n    get: function get() {\n      return this.type instanceof InlineType;\n    }\n    /**\n    @internal\n    */\n  }, {\n    key: \"widget\",\n    get: function get() {\n      return this.type instanceof WidgetType;\n    }\n  }], [{\n    key: \"widget\",\n    value: function widget(pos, toDOM, spec) {\n      return new Decoration(pos, pos, new WidgetType(toDOM, spec));\n    }\n    /**\n    Creates an inline decoration, which adds the given attributes to\n    each inline node between `from` and `to`.\n    */\n  }, {\n    key: \"inline\",\n    value: function inline(from, to, attrs, spec) {\n      return new Decoration(from, to, new InlineType(attrs, spec));\n    }\n    /**\n    Creates a node decoration. `from` and `to` should point precisely\n    before and after a node in the document. That node, and only that\n    node, will receive the given attributes.\n    */\n  }, {\n    key: \"node\",\n    value: function node(from, to, attrs, spec) {\n      return new Decoration(from, to, new NodeType(attrs, spec));\n    }\n  }]);\n}();\nvar none = [],\n  noSpec = {};\n/**\nA collection of [decorations](https://prosemirror.net/docs/ref/#view.Decoration), organized in such\na way that the drawing algorithm can efficiently use and compare\nthem. This is a persistent data structure—it is not modified,\nupdates create a new value.\n*/\nvar DecorationSet = /*#__PURE__*/function () {\n  /**\n  @internal\n  */\n  function DecorationSet(local, children) {\n    _classCallCheck(this, DecorationSet);\n    this.local = local.length ? local : none;\n    this.children = children.length ? children : none;\n  }\n  /**\n  Create a set of decorations, using the structure of the given\n  document. This will consume (modify) the `decorations` array, so\n  you must make a copy if you want need to preserve that.\n  */\n  return _createClass(DecorationSet, [{\n    key: \"find\",\n    value:\n    /**\n    Find all decorations in this set which touch the given range\n    (including decorations that start or end directly at the\n    boundaries) and match the given predicate on their spec. When\n    `start` and `end` are omitted, all decorations in the set are\n    considered. When `predicate` isn't given, all decorations are\n    assumed to match.\n    */\n    function find(start, end, predicate) {\n      var result = [];\n      this.findInner(start == null ? 0 : start, end == null ? 1e9 : end, result, 0, predicate);\n      return result;\n    }\n  }, {\n    key: \"findInner\",\n    value: function findInner(start, end, result, offset, predicate) {\n      for (var i = 0; i < this.local.length; i++) {\n        var span = this.local[i];\n        if (span.from <= end && span.to >= start && (!predicate || predicate(span.spec))) result.push(span.copy(span.from + offset, span.to + offset));\n      }\n      for (var _i6 = 0; _i6 < this.children.length; _i6 += 3) {\n        if (this.children[_i6] < end && this.children[_i6 + 1] > start) {\n          var childOff = this.children[_i6] + 1;\n          this.children[_i6 + 2].findInner(start - childOff, end - childOff, result, offset + childOff, predicate);\n        }\n      }\n    }\n    /**\n    Map the set of decorations in response to a change in the\n    document.\n    */\n  }, {\n    key: \"map\",\n    value: function map(mapping, doc, options) {\n      if (this == empty || mapping.maps.length == 0) return this;\n      return this.mapInner(mapping, doc, 0, 0, options || noSpec);\n    }\n    /**\n    @internal\n    */\n  }, {\n    key: \"mapInner\",\n    value: function mapInner(mapping, node, offset, oldOffset, options) {\n      var newLocal;\n      for (var i = 0; i < this.local.length; i++) {\n        var mapped = this.local[i].map(mapping, offset, oldOffset);\n        if (mapped && mapped.type.valid(node, mapped)) (newLocal || (newLocal = [])).push(mapped);else if (options.onRemove) options.onRemove(this.local[i].spec);\n      }\n      if (this.children.length) return mapChildren(this.children, newLocal || [], mapping, node, offset, oldOffset, options);else return newLocal ? new DecorationSet(newLocal.sort(byPos), none) : empty;\n    }\n    /**\n    Add the given array of decorations to the ones in the set,\n    producing a new set. Consumes the `decorations` array. Needs\n    access to the current document to create the appropriate tree\n    structure.\n    */\n  }, {\n    key: \"add\",\n    value: function add(doc, decorations) {\n      if (!decorations.length) return this;\n      if (this == empty) return DecorationSet.create(doc, decorations);\n      return this.addInner(doc, decorations, 0);\n    }\n  }, {\n    key: \"addInner\",\n    value: function addInner(doc, decorations, offset) {\n      var _this11 = this;\n      var children,\n        childIndex = 0;\n      doc.forEach(function (childNode, childOffset) {\n        var baseOffset = childOffset + offset,\n          found;\n        if (!(found = takeSpansForNode(decorations, childNode, baseOffset))) return;\n        if (!children) children = _this11.children.slice();\n        while (childIndex < children.length && children[childIndex] < childOffset) childIndex += 3;\n        if (children[childIndex] == childOffset) children[childIndex + 2] = children[childIndex + 2].addInner(childNode, found, baseOffset + 1);else children.splice(childIndex, 0, childOffset, childOffset + childNode.nodeSize, buildTree(found, childNode, baseOffset + 1, noSpec));\n        childIndex += 3;\n      });\n      var local = moveSpans(childIndex ? withoutNulls(decorations) : decorations, -offset);\n      for (var i = 0; i < local.length; i++) if (!local[i].type.valid(doc, local[i])) local.splice(i--, 1);\n      return new DecorationSet(local.length ? this.local.concat(local).sort(byPos) : this.local, children || this.children);\n    }\n    /**\n    Create a new set that contains the decorations in this set, minus\n    the ones in the given array.\n    */\n  }, {\n    key: \"remove\",\n    value: function remove(decorations) {\n      if (decorations.length == 0 || this == empty) return this;\n      return this.removeInner(decorations, 0);\n    }\n  }, {\n    key: \"removeInner\",\n    value: function removeInner(decorations, offset) {\n      var children = this.children,\n        local = this.local;\n      for (var i = 0; i < children.length; i += 3) {\n        var found = void 0;\n        var from = children[i] + offset,\n          to = children[i + 1] + offset;\n        for (var j = 0, span; j < decorations.length; j++) if (span = decorations[j]) {\n          if (span.from > from && span.to < to) {\n            decorations[j] = null;\n            (found || (found = [])).push(span);\n          }\n        }\n        if (!found) continue;\n        if (children == this.children) children = this.children.slice();\n        var removed = children[i + 2].removeInner(found, from + 1);\n        if (removed != empty) {\n          children[i + 2] = removed;\n        } else {\n          children.splice(i, 3);\n          i -= 3;\n        }\n      }\n      if (local.length) for (var _i7 = 0, _span; _i7 < decorations.length; _i7++) if (_span = decorations[_i7]) {\n        for (var _j2 = 0; _j2 < local.length; _j2++) if (local[_j2].eq(_span, offset)) {\n          if (local == this.local) local = this.local.slice();\n          local.splice(_j2--, 1);\n        }\n      }\n      if (children == this.children && local == this.local) return this;\n      return local.length || children.length ? new DecorationSet(local, children) : empty;\n    }\n  }, {\n    key: \"forChild\",\n    value: function forChild(offset, node) {\n      if (this == empty) return this;\n      if (node.isLeaf) return DecorationSet.empty;\n      var child, local;\n      for (var i = 0; i < this.children.length; i += 3) if (this.children[i] >= offset) {\n        if (this.children[i] == offset) child = this.children[i + 2];\n        break;\n      }\n      var start = offset + 1,\n        end = start + node.content.size;\n      for (var _i8 = 0; _i8 < this.local.length; _i8++) {\n        var dec = this.local[_i8];\n        if (dec.from < end && dec.to > start && dec.type instanceof InlineType) {\n          var from = Math.max(start, dec.from) - start,\n            to = Math.min(end, dec.to) - start;\n          if (from < to) (local || (local = [])).push(dec.copy(from, to));\n        }\n      }\n      if (local) {\n        var localSet = new DecorationSet(local.sort(byPos), none);\n        return child ? new DecorationGroup([localSet, child]) : localSet;\n      }\n      return child || empty;\n    }\n    /**\n    @internal\n    */\n  }, {\n    key: \"eq\",\n    value: function eq(other) {\n      if (this == other) return true;\n      if (!(other instanceof DecorationSet) || this.local.length != other.local.length || this.children.length != other.children.length) return false;\n      for (var i = 0; i < this.local.length; i++) if (!this.local[i].eq(other.local[i])) return false;\n      for (var _i9 = 0; _i9 < this.children.length; _i9 += 3) if (this.children[_i9] != other.children[_i9] || this.children[_i9 + 1] != other.children[_i9 + 1] || !this.children[_i9 + 2].eq(other.children[_i9 + 2])) return false;\n      return true;\n    }\n    /**\n    @internal\n    */\n  }, {\n    key: \"locals\",\n    value: function locals(node) {\n      return removeOverlap(this.localsInner(node));\n    }\n    /**\n    @internal\n    */\n  }, {\n    key: \"localsInner\",\n    value: function localsInner(node) {\n      if (this == empty) return none;\n      if (node.inlineContent || !this.local.some(InlineType.is)) return this.local;\n      var result = [];\n      for (var i = 0; i < this.local.length; i++) {\n        if (!(this.local[i].type instanceof InlineType)) result.push(this.local[i]);\n      }\n      return result;\n    }\n  }, {\n    key: \"forEachSet\",\n    value: function forEachSet(f) {\n      f(this);\n    }\n  }], [{\n    key: \"create\",\n    value: function create(doc, decorations) {\n      return decorations.length ? buildTree(decorations, doc, 0, noSpec) : empty;\n    }\n  }]);\n}();\n/**\nThe empty set of decorations.\n*/\nDecorationSet.empty = new DecorationSet([], []);\n/**\n@internal\n*/\nDecorationSet.removeOverlap = removeOverlap;\nvar empty = DecorationSet.empty;\n// An abstraction that allows the code dealing with decorations to\n// treat multiple DecorationSet objects as if it were a single object\n// with (a subset of) the same interface.\nvar DecorationGroup = /*#__PURE__*/function () {\n  function DecorationGroup(members) {\n    _classCallCheck(this, DecorationGroup);\n    this.members = members;\n  }\n  return _createClass(DecorationGroup, [{\n    key: \"map\",\n    value: function map(mapping, doc) {\n      var mappedDecos = this.members.map(function (member) {\n        return member.map(mapping, doc, noSpec);\n      });\n      return DecorationGroup.from(mappedDecos);\n    }\n  }, {\n    key: \"forChild\",\n    value: function forChild(offset, child) {\n      if (child.isLeaf) return DecorationSet.empty;\n      var found = [];\n      for (var i = 0; i < this.members.length; i++) {\n        var result = this.members[i].forChild(offset, child);\n        if (result == empty) continue;\n        if (result instanceof DecorationGroup) found = found.concat(result.members);else found.push(result);\n      }\n      return DecorationGroup.from(found);\n    }\n  }, {\n    key: \"eq\",\n    value: function eq(other) {\n      if (!(other instanceof DecorationGroup) || other.members.length != this.members.length) return false;\n      for (var i = 0; i < this.members.length; i++) if (!this.members[i].eq(other.members[i])) return false;\n      return true;\n    }\n  }, {\n    key: \"locals\",\n    value: function locals(node) {\n      var result,\n        sorted = true;\n      for (var i = 0; i < this.members.length; i++) {\n        var _locals = this.members[i].localsInner(node);\n        if (!_locals.length) continue;\n        if (!result) {\n          result = _locals;\n        } else {\n          if (sorted) {\n            result = result.slice();\n            sorted = false;\n          }\n          for (var j = 0; j < _locals.length; j++) result.push(_locals[j]);\n        }\n      }\n      return result ? removeOverlap(sorted ? result : result.sort(byPos)) : none;\n    }\n    // Create a group for the given array of decoration sets, or return\n    // a single set when possible.\n  }, {\n    key: \"forEachSet\",\n    value: function forEachSet(f) {\n      for (var i = 0; i < this.members.length; i++) this.members[i].forEachSet(f);\n    }\n  }], [{\n    key: \"from\",\n    value: function from(members) {\n      switch (members.length) {\n        case 0:\n          return empty;\n        case 1:\n          return members[0];\n        default:\n          return new DecorationGroup(members.every(function (m) {\n            return m instanceof DecorationSet;\n          }) ? members : members.reduce(function (r, m) {\n            return r.concat(m instanceof DecorationSet ? m : m.members);\n          }, []));\n      }\n    }\n  }]);\n}();\nfunction mapChildren(oldChildren, newLocal, mapping, node, offset, oldOffset, options) {\n  var children = oldChildren.slice();\n  // Mark the children that are directly touched by changes, and\n  // move those that are after the changes.\n  var _loop4 = function _loop4(_baseOffset) {\n    var moved = 0;\n    mapping.maps[i].forEach(function (oldStart, oldEnd, newStart, newEnd) {\n      var dSize = newEnd - newStart - (oldEnd - oldStart);\n      for (var _i13 = 0; _i13 < children.length; _i13 += 3) {\n        var end = children[_i13 + 1];\n        if (end < 0 || oldStart > end + _baseOffset - moved) continue;\n        var start = children[_i13] + _baseOffset - moved;\n        if (oldEnd >= start) {\n          children[_i13 + 1] = oldStart <= start ? -2 : -1;\n        } else if (oldStart >= _baseOffset && dSize) {\n          children[_i13] += dSize;\n          children[_i13 + 1] += dSize;\n        }\n      }\n      moved += dSize;\n    });\n    _baseOffset = mapping.maps[i].map(_baseOffset, -1);\n    baseOffset = _baseOffset;\n  };\n  for (var i = 0, baseOffset = oldOffset; i < mapping.maps.length; i++) {\n    _loop4(baseOffset);\n  }\n  // Find the child nodes that still correspond to a single node,\n  // recursively call mapInner on them and update their positions.\n  var mustRebuild = false;\n  for (var _i10 = 0; _i10 < children.length; _i10 += 3) if (children[_i10 + 1] < 0) {\n    // Touched nodes\n    if (children[_i10 + 1] == -2) {\n      mustRebuild = true;\n      children[_i10 + 1] = -1;\n      continue;\n    }\n    var from = mapping.map(oldChildren[_i10] + oldOffset),\n      fromLocal = from - offset;\n    if (fromLocal < 0 || fromLocal >= node.content.size) {\n      mustRebuild = true;\n      continue;\n    }\n    // Must read oldChildren because children was tagged with -1\n    var to = mapping.map(oldChildren[_i10 + 1] + oldOffset, -1),\n      toLocal = to - offset;\n    var _node$content$findInd2 = node.content.findIndex(fromLocal),\n      index = _node$content$findInd2.index,\n      childOffset = _node$content$findInd2.offset;\n    var childNode = node.maybeChild(index);\n    if (childNode && childOffset == fromLocal && childOffset + childNode.nodeSize == toLocal) {\n      var mapped = children[_i10 + 2].mapInner(mapping, childNode, from + 1, oldChildren[_i10] + oldOffset + 1, options);\n      if (mapped != empty) {\n        children[_i10] = fromLocal;\n        children[_i10 + 1] = toLocal;\n        children[_i10 + 2] = mapped;\n      } else {\n        children[_i10 + 1] = -2;\n        mustRebuild = true;\n      }\n    } else {\n      mustRebuild = true;\n    }\n  }\n  // Remaining children must be collected and rebuilt into the appropriate structure\n  if (mustRebuild) {\n    var decorations = mapAndGatherRemainingDecorations(children, oldChildren, newLocal, mapping, offset, oldOffset, options);\n    var built = buildTree(decorations, node, 0, options);\n    newLocal = built.local;\n    for (var _i11 = 0; _i11 < children.length; _i11 += 3) if (children[_i11 + 1] < 0) {\n      children.splice(_i11, 3);\n      _i11 -= 3;\n    }\n    for (var _i12 = 0, j = 0; _i12 < built.children.length; _i12 += 3) {\n      var _from2 = built.children[_i12];\n      while (j < children.length && children[j] < _from2) j += 3;\n      children.splice(j, 0, built.children[_i12], built.children[_i12 + 1], built.children[_i12 + 2]);\n    }\n  }\n  return new DecorationSet(newLocal.sort(byPos), children);\n}\nfunction moveSpans(spans, offset) {\n  if (!offset || !spans.length) return spans;\n  var result = [];\n  for (var i = 0; i < spans.length; i++) {\n    var span = spans[i];\n    result.push(new Decoration(span.from + offset, span.to + offset, span.type));\n  }\n  return result;\n}\nfunction mapAndGatherRemainingDecorations(children, oldChildren, decorations, mapping, offset, oldOffset, options) {\n  // Gather all decorations from the remaining marked children\n  function gather(set, oldOffset) {\n    for (var i = 0; i < set.local.length; i++) {\n      var mapped = set.local[i].map(mapping, offset, oldOffset);\n      if (mapped) decorations.push(mapped);else if (options.onRemove) options.onRemove(set.local[i].spec);\n    }\n    for (var _i14 = 0; _i14 < set.children.length; _i14 += 3) gather(set.children[_i14 + 2], set.children[_i14] + oldOffset + 1);\n  }\n  for (var i = 0; i < children.length; i += 3) if (children[i + 1] == -1) gather(children[i + 2], oldChildren[i] + oldOffset + 1);\n  return decorations;\n}\nfunction takeSpansForNode(spans, node, offset) {\n  if (node.isLeaf) return null;\n  var end = offset + node.nodeSize,\n    found = null;\n  for (var i = 0, span; i < spans.length; i++) {\n    if ((span = spans[i]) && span.from > offset && span.to < end) {\n      (found || (found = [])).push(span);\n      spans[i] = null;\n    }\n  }\n  return found;\n}\nfunction withoutNulls(array) {\n  var result = [];\n  for (var i = 0; i < array.length; i++) if (array[i] != null) result.push(array[i]);\n  return result;\n}\n// Build up a tree that corresponds to a set of decorations. `offset`\n// is a base offset that should be subtracted from the `from` and `to`\n// positions in the spans (so that we don't have to allocate new spans\n// for recursive calls).\nfunction buildTree(spans, node, offset, options) {\n  var children = [],\n    hasNulls = false;\n  node.forEach(function (childNode, localStart) {\n    var found = takeSpansForNode(spans, childNode, localStart + offset);\n    if (found) {\n      hasNulls = true;\n      var subtree = buildTree(found, childNode, offset + localStart + 1, options);\n      if (subtree != empty) children.push(localStart, localStart + childNode.nodeSize, subtree);\n    }\n  });\n  var locals = moveSpans(hasNulls ? withoutNulls(spans) : spans, -offset).sort(byPos);\n  for (var i = 0; i < locals.length; i++) if (!locals[i].type.valid(node, locals[i])) {\n    if (options.onRemove) options.onRemove(locals[i].spec);\n    locals.splice(i--, 1);\n  }\n  return locals.length || children.length ? new DecorationSet(locals, children) : empty;\n}\n// Used to sort decorations so that ones with a low start position\n// come first, and within a set with the same start position, those\n// with an smaller end position come first.\nfunction byPos(a, b) {\n  return a.from - b.from || a.to - b.to;\n}\n// Scan a sorted array of decorations for partially overlapping spans,\n// and split those so that only fully overlapping spans are left (to\n// make subsequent rendering easier). Will return the input array if\n// no partially overlapping spans are found (the common case).\nfunction removeOverlap(spans) {\n  var working = spans;\n  for (var i = 0; i < working.length - 1; i++) {\n    var span = working[i];\n    if (span.from != span.to) for (var j = i + 1; j < working.length; j++) {\n      var next = working[j];\n      if (next.from == span.from) {\n        if (next.to != span.to) {\n          if (working == spans) working = spans.slice();\n          // Followed by a partially overlapping larger span. Split that\n          // span.\n          working[j] = next.copy(next.from, span.to);\n          insertAhead(working, j + 1, next.copy(span.to, next.to));\n        }\n        continue;\n      } else {\n        if (next.from < span.to) {\n          if (working == spans) working = spans.slice();\n          // The end of this one overlaps with a subsequent span. Split\n          // this one.\n          working[i] = span.copy(span.from, next.from);\n          insertAhead(working, j, span.copy(next.from, span.to));\n        }\n        break;\n      }\n    }\n  }\n  return working;\n}\nfunction insertAhead(array, i, deco) {\n  while (i < array.length && byPos(deco, array[i]) > 0) i++;\n  array.splice(i, 0, deco);\n}\n// Get the decorations associated with the current props of a view.\nfunction viewDecorations(view) {\n  var found = [];\n  view.someProp(\"decorations\", function (f) {\n    var result = f(view.state);\n    if (result && result != empty) found.push(result);\n  });\n  if (view.cursorWrapper) found.push(DecorationSet.create(view.state.doc, [view.cursorWrapper.deco]));\n  return DecorationGroup.from(found);\n}\nvar observeOptions = {\n  childList: true,\n  characterData: true,\n  characterDataOldValue: true,\n  attributes: true,\n  attributeOldValue: true,\n  subtree: true\n};\n// IE11 has very broken mutation observers, so we also listen to DOMCharacterDataModified\nvar useCharData = ie && ie_version <= 11;\nvar SelectionState = /*#__PURE__*/function () {\n  function SelectionState() {\n    _classCallCheck(this, SelectionState);\n    this.anchorNode = null;\n    this.anchorOffset = 0;\n    this.focusNode = null;\n    this.focusOffset = 0;\n  }\n  return _createClass(SelectionState, [{\n    key: \"set\",\n    value: function set(sel) {\n      this.anchorNode = sel.anchorNode;\n      this.anchorOffset = sel.anchorOffset;\n      this.focusNode = sel.focusNode;\n      this.focusOffset = sel.focusOffset;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.anchorNode = this.focusNode = null;\n    }\n  }, {\n    key: \"eq\",\n    value: function eq(sel) {\n      return sel.anchorNode == this.anchorNode && sel.anchorOffset == this.anchorOffset && sel.focusNode == this.focusNode && sel.focusOffset == this.focusOffset;\n    }\n  }]);\n}();\nvar DOMObserver = /*#__PURE__*/function () {\n  function DOMObserver(view, handleDOMChange) {\n    var _this12 = this;\n    _classCallCheck(this, DOMObserver);\n    this.view = view;\n    this.handleDOMChange = handleDOMChange;\n    this.queue = [];\n    this.flushingSoon = -1;\n    this.observer = null;\n    this.currentSelection = new SelectionState();\n    this.onCharData = null;\n    this.suppressingSelectionUpdates = false;\n    this.lastChangedTextNode = null;\n    this.observer = window.MutationObserver && new window.MutationObserver(function (mutations) {\n      for (var i = 0; i < mutations.length; i++) _this12.queue.push(mutations[i]);\n      // IE11 will sometimes (on backspacing out a single character\n      // text node after a BR node) call the observer callback\n      // before actually updating the DOM, which will cause\n      // ProseMirror to miss the change (see #930)\n      if (ie && ie_version <= 11 && mutations.some(function (m) {\n        return m.type == \"childList\" && m.removedNodes.length || m.type == \"characterData\" && m.oldValue.length > m.target.nodeValue.length;\n      })) _this12.flushSoon();else _this12.flush();\n    });\n    if (useCharData) {\n      this.onCharData = function (e) {\n        _this12.queue.push({\n          target: e.target,\n          type: \"characterData\",\n          oldValue: e.prevValue\n        });\n        _this12.flushSoon();\n      };\n    }\n    this.onSelectionChange = this.onSelectionChange.bind(this);\n  }\n  return _createClass(DOMObserver, [{\n    key: \"flushSoon\",\n    value: function flushSoon() {\n      var _this13 = this;\n      if (this.flushingSoon < 0) this.flushingSoon = window.setTimeout(function () {\n        _this13.flushingSoon = -1;\n        _this13.flush();\n      }, 20);\n    }\n  }, {\n    key: \"forceFlush\",\n    value: function forceFlush() {\n      if (this.flushingSoon > -1) {\n        window.clearTimeout(this.flushingSoon);\n        this.flushingSoon = -1;\n        this.flush();\n      }\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      if (this.observer) {\n        this.observer.takeRecords();\n        this.observer.observe(this.view.dom, observeOptions);\n      }\n      if (this.onCharData) this.view.dom.addEventListener(\"DOMCharacterDataModified\", this.onCharData);\n      this.connectSelection();\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      var _this14 = this;\n      if (this.observer) {\n        var take = this.observer.takeRecords();\n        if (take.length) {\n          for (var i = 0; i < take.length; i++) this.queue.push(take[i]);\n          window.setTimeout(function () {\n            return _this14.flush();\n          }, 20);\n        }\n        this.observer.disconnect();\n      }\n      if (this.onCharData) this.view.dom.removeEventListener(\"DOMCharacterDataModified\", this.onCharData);\n      this.disconnectSelection();\n    }\n  }, {\n    key: \"connectSelection\",\n    value: function connectSelection() {\n      this.view.dom.ownerDocument.addEventListener(\"selectionchange\", this.onSelectionChange);\n    }\n  }, {\n    key: \"disconnectSelection\",\n    value: function disconnectSelection() {\n      this.view.dom.ownerDocument.removeEventListener(\"selectionchange\", this.onSelectionChange);\n    }\n  }, {\n    key: \"suppressSelectionUpdates\",\n    value: function suppressSelectionUpdates() {\n      var _this15 = this;\n      this.suppressingSelectionUpdates = true;\n      setTimeout(function () {\n        return _this15.suppressingSelectionUpdates = false;\n      }, 50);\n    }\n  }, {\n    key: \"onSelectionChange\",\n    value: function onSelectionChange() {\n      if (!hasFocusAndSelection(this.view)) return;\n      if (this.suppressingSelectionUpdates) return selectionToDOM(this.view);\n      // Deletions on IE11 fire their events in the wrong order, giving\n      // us a selection change event before the DOM changes are\n      // reported.\n      if (ie && ie_version <= 11 && !this.view.state.selection.empty) {\n        var sel = this.view.domSelectionRange();\n        // Selection.isCollapsed isn't reliable on IE\n        if (sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset)) return this.flushSoon();\n      }\n      this.flush();\n    }\n  }, {\n    key: \"setCurSelection\",\n    value: function setCurSelection() {\n      this.currentSelection.set(this.view.domSelectionRange());\n    }\n  }, {\n    key: \"ignoreSelectionChange\",\n    value: function ignoreSelectionChange(sel) {\n      if (!sel.focusNode) return true;\n      var ancestors = new Set(),\n        container;\n      for (var scan = sel.focusNode; scan; scan = parentNode(scan)) ancestors.add(scan);\n      for (var _scan = sel.anchorNode; _scan; _scan = parentNode(_scan)) if (ancestors.has(_scan)) {\n        container = _scan;\n        break;\n      }\n      var desc = container && this.view.docView.nearestDesc(container);\n      if (desc && desc.ignoreMutation({\n        type: \"selection\",\n        target: container.nodeType == 3 ? container.parentNode : container\n      })) {\n        this.setCurSelection();\n        return true;\n      }\n    }\n  }, {\n    key: \"pendingRecords\",\n    value: function pendingRecords() {\n      if (this.observer) {\n        var _iterator2 = _createForOfIteratorHelper(this.observer.takeRecords()),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var mut = _step2.value;\n            this.queue.push(mut);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n      return this.queue;\n    }\n  }, {\n    key: \"flush\",\n    value: function flush() {\n      var view = this.view;\n      if (!view.docView || this.flushingSoon > -1) return;\n      var mutations = this.pendingRecords();\n      if (mutations.length) this.queue = [];\n      var sel = view.domSelectionRange();\n      var newSel = !this.suppressingSelectionUpdates && !this.currentSelection.eq(sel) && hasFocusAndSelection(view) && !this.ignoreSelectionChange(sel);\n      var from = -1,\n        to = -1,\n        typeOver = false,\n        added = [];\n      if (view.editable) {\n        for (var i = 0; i < mutations.length; i++) {\n          var result = this.registerMutation(mutations[i], added);\n          if (result) {\n            from = from < 0 ? result.from : Math.min(result.from, from);\n            to = to < 0 ? result.to : Math.max(result.to, to);\n            if (result.typeOver) typeOver = true;\n          }\n        }\n      }\n      if (gecko && added.length) {\n        var brs = added.filter(function (n) {\n          return n.nodeName == \"BR\";\n        });\n        if (brs.length == 2) {\n          var _brs = _slicedToArray(brs, 2),\n            a = _brs[0],\n            b = _brs[1];\n          if (a.parentNode && a.parentNode.parentNode == b.parentNode) b.remove();else a.remove();\n        } else {\n          var focusNode = this.currentSelection.focusNode;\n          var _iterator3 = _createForOfIteratorHelper(brs),\n            _step3;\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var br = _step3.value;\n              var parent = br.parentNode;\n              if (parent && parent.nodeName == \"LI\" && (!focusNode || blockParent(view, focusNode) != parent)) br.remove();\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n        }\n      }\n      var readSel = null;\n      // If it looks like the browser has reset the selection to the\n      // start of the document after focus, restore the selection from\n      // the state\n      if (from < 0 && newSel && view.input.lastFocus > Date.now() - 200 && Math.max(view.input.lastTouch, view.input.lastClick.time) < Date.now() - 300 && selectionCollapsed(sel) && (readSel = selectionFromDOM(view)) && readSel.eq(prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.Selection.near(view.state.doc.resolve(0), 1))) {\n        view.input.lastFocus = 0;\n        selectionToDOM(view);\n        this.currentSelection.set(sel);\n        view.scrollToSelection();\n      } else if (from > -1 || newSel) {\n        if (from > -1) {\n          view.docView.markDirty(from, to);\n          checkCSS(view);\n        }\n        this.handleDOMChange(from, to, typeOver, added);\n        if (view.docView && view.docView.dirty) view.updateState(view.state);else if (!this.currentSelection.eq(sel)) selectionToDOM(view);\n        this.currentSelection.set(sel);\n      }\n    }\n  }, {\n    key: \"registerMutation\",\n    value: function registerMutation(mut, added) {\n      // Ignore mutations inside nodes that were already noted as inserted\n      if (added.indexOf(mut.target) > -1) return null;\n      var desc = this.view.docView.nearestDesc(mut.target);\n      if (mut.type == \"attributes\" && (desc == this.view.docView || mut.attributeName == \"contenteditable\" ||\n      // Firefox sometimes fires spurious events for null/empty styles\n      mut.attributeName == \"style\" && !mut.oldValue && !mut.target.getAttribute(\"style\"))) return null;\n      if (!desc || desc.ignoreMutation(mut)) return null;\n      if (mut.type == \"childList\") {\n        for (var i = 0; i < mut.addedNodes.length; i++) {\n          var node = mut.addedNodes[i];\n          added.push(node);\n          if (node.nodeType == 3) this.lastChangedTextNode = node;\n        }\n        if (desc.contentDOM && desc.contentDOM != desc.dom && !desc.contentDOM.contains(mut.target)) return {\n          from: desc.posBefore,\n          to: desc.posAfter\n        };\n        var prev = mut.previousSibling,\n          next = mut.nextSibling;\n        if (ie && ie_version <= 11 && mut.addedNodes.length) {\n          // IE11 gives us incorrect next/prev siblings for some\n          // insertions, so if there are added nodes, recompute those\n          for (var _i15 = 0; _i15 < mut.addedNodes.length; _i15++) {\n            var _mut$addedNodes$_i = mut.addedNodes[_i15],\n              previousSibling = _mut$addedNodes$_i.previousSibling,\n              nextSibling = _mut$addedNodes$_i.nextSibling;\n            if (!previousSibling || Array.prototype.indexOf.call(mut.addedNodes, previousSibling) < 0) prev = previousSibling;\n            if (!nextSibling || Array.prototype.indexOf.call(mut.addedNodes, nextSibling) < 0) next = nextSibling;\n          }\n        }\n        var fromOffset = prev && prev.parentNode == mut.target ? domIndex(prev) + 1 : 0;\n        var from = desc.localPosFromDOM(mut.target, fromOffset, -1);\n        var toOffset = next && next.parentNode == mut.target ? domIndex(next) : mut.target.childNodes.length;\n        var to = desc.localPosFromDOM(mut.target, toOffset, 1);\n        return {\n          from: from,\n          to: to\n        };\n      } else if (mut.type == \"attributes\") {\n        return {\n          from: desc.posAtStart - desc.border,\n          to: desc.posAtEnd + desc.border\n        };\n      } else {\n        // \"characterData\"\n        this.lastChangedTextNode = mut.target;\n        return {\n          from: desc.posAtStart,\n          to: desc.posAtEnd,\n          // An event was generated for a text change that didn't change\n          // any text. Mark the dom change to fall back to assuming the\n          // selection was typed over with an identical value if it can't\n          // find another change.\n          typeOver: mut.target.nodeValue == mut.oldValue\n        };\n      }\n    }\n  }]);\n}();\nvar cssChecked = new WeakMap();\nvar cssCheckWarned = false;\nfunction checkCSS(view) {\n  if (cssChecked.has(view)) return;\n  cssChecked.set(view, null);\n  if (['normal', 'nowrap', 'pre-line'].indexOf(getComputedStyle(view.dom).whiteSpace) !== -1) {\n    view.requiresGeckoHackNode = gecko;\n    if (cssCheckWarned) return;\n    console[\"warn\"](\"ProseMirror expects the CSS white-space property to be set, preferably to 'pre-wrap'. It is recommended to load style/prosemirror.css from the prosemirror-view package.\");\n    cssCheckWarned = true;\n  }\n}\nfunction rangeToSelectionRange(view, range) {\n  var anchorNode = range.startContainer,\n    anchorOffset = range.startOffset;\n  var focusNode = range.endContainer,\n    focusOffset = range.endOffset;\n  var currentAnchor = view.domAtPos(view.state.selection.anchor);\n  // Since such a range doesn't distinguish between anchor and head,\n  // use a heuristic that flips it around if its end matches the\n  // current anchor.\n  if (isEquivalentPosition(currentAnchor.node, currentAnchor.offset, focusNode, focusOffset)) {\n    var _ref5 = [focusNode, focusOffset, anchorNode, anchorOffset];\n    anchorNode = _ref5[0];\n    anchorOffset = _ref5[1];\n    focusNode = _ref5[2];\n    focusOffset = _ref5[3];\n  }\n  return {\n    anchorNode: anchorNode,\n    anchorOffset: anchorOffset,\n    focusNode: focusNode,\n    focusOffset: focusOffset\n  };\n}\n// Used to work around a Safari Selection/shadow DOM bug\n// Based on https://github.com/codemirror/dev/issues/414 fix\nfunction safariShadowSelectionRange(view, selection) {\n  if (selection.getComposedRanges) {\n    var range = selection.getComposedRanges(view.root)[0];\n    if (range) return rangeToSelectionRange(view, range);\n  }\n  var found;\n  function read(event) {\n    event.preventDefault();\n    event.stopImmediatePropagation();\n    found = event.getTargetRanges()[0];\n  }\n  // Because Safari (at least in 2018-2022) doesn't provide regular\n  // access to the selection inside a shadowRoot, we have to perform a\n  // ridiculous hack to get at it—using `execCommand` to trigger a\n  // `beforeInput` event so that we can read the target range from the\n  // event.\n  view.dom.addEventListener(\"beforeinput\", read, true);\n  document.execCommand(\"indent\");\n  view.dom.removeEventListener(\"beforeinput\", read, true);\n  return found ? rangeToSelectionRange(view, found) : null;\n}\nfunction blockParent(view, node) {\n  for (var p = node.parentNode; p && p != view.dom; p = p.parentNode) {\n    var desc = view.docView.nearestDesc(p, true);\n    if (desc && desc.node.isBlock) return p;\n  }\n  return null;\n}\n\n// Note that all referencing and parsing is done with the\n// start-of-operation selection and document, since that's the one\n// that the DOM represents. If any changes came in in the meantime,\n// the modification is mapped over those before it is applied, in\n// readDOMChange.\nfunction parseBetween(view, from_, to_) {\n  var _view$docView$parseRa = view.docView.parseRange(from_, to_),\n    parent = _view$docView$parseRa.node,\n    fromOffset = _view$docView$parseRa.fromOffset,\n    toOffset = _view$docView$parseRa.toOffset,\n    from = _view$docView$parseRa.from,\n    to = _view$docView$parseRa.to;\n  var domSel = view.domSelectionRange();\n  var find;\n  var anchor = domSel.anchorNode;\n  if (anchor && view.dom.contains(anchor.nodeType == 1 ? anchor : anchor.parentNode)) {\n    find = [{\n      node: anchor,\n      offset: domSel.anchorOffset\n    }];\n    if (!selectionCollapsed(domSel)) find.push({\n      node: domSel.focusNode,\n      offset: domSel.focusOffset\n    });\n  }\n  // Work around issue in Chrome where backspacing sometimes replaces\n  // the deleted content with a random BR node (issues #799, #831)\n  if (chrome && view.input.lastKeyCode === 8) {\n    for (var off = toOffset; off > fromOffset; off--) {\n      var node = parent.childNodes[off - 1],\n        desc = node.pmViewDesc;\n      if (node.nodeName == \"BR\" && !desc) {\n        toOffset = off;\n        break;\n      }\n      if (!desc || desc.size) break;\n    }\n  }\n  var startDoc = view.state.doc;\n  var parser = view.someProp(\"domParser\") || prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.DOMParser.fromSchema(view.state.schema);\n  var $from = startDoc.resolve(from);\n  var sel = null,\n    doc = parser.parse(parent, {\n      topNode: $from.parent,\n      topMatch: $from.parent.contentMatchAt($from.index()),\n      topOpen: true,\n      from: fromOffset,\n      to: toOffset,\n      preserveWhitespace: $from.parent.type.whitespace == \"pre\" ? \"full\" : true,\n      findPositions: find,\n      ruleFromNode: ruleFromNode,\n      context: $from\n    });\n  if (find && find[0].pos != null) {\n    var _anchor = find[0].pos,\n      head = find[1] && find[1].pos;\n    if (head == null) head = _anchor;\n    sel = {\n      anchor: _anchor + from,\n      head: head + from\n    };\n  }\n  return {\n    doc: doc,\n    sel: sel,\n    from: from,\n    to: to\n  };\n}\nfunction ruleFromNode(dom) {\n  var desc = dom.pmViewDesc;\n  if (desc) {\n    return desc.parseRule();\n  } else if (dom.nodeName == \"BR\" && dom.parentNode) {\n    // Safari replaces the list item or table cell with a BR\n    // directly in the list node (?!) if you delete the last\n    // character in a list item or table cell (#708, #862)\n    if (safari && /^(ul|ol)$/i.test(dom.parentNode.nodeName)) {\n      var skip = document.createElement(\"div\");\n      skip.appendChild(document.createElement(\"li\"));\n      return {\n        skip: skip\n      };\n    } else if (dom.parentNode.lastChild == dom || safari && /^(tr|table)$/i.test(dom.parentNode.nodeName)) {\n      return {\n        ignore: true\n      };\n    }\n  } else if (dom.nodeName == \"IMG\" && dom.getAttribute(\"mark-placeholder\")) {\n    return {\n      ignore: true\n    };\n  }\n  return null;\n}\nvar isInline = /^(a|abbr|acronym|b|bd[io]|big|br|button|cite|code|data(list)?|del|dfn|em|i|ins|kbd|label|map|mark|meter|output|q|ruby|s|samp|small|span|strong|su[bp]|time|u|tt|var)$/i;\nfunction readDOMChange(view, from, to, typeOver, addedNodes) {\n  var compositionID = view.input.compositionPendingChanges || (view.composing ? view.input.compositionID : 0);\n  view.input.compositionPendingChanges = 0;\n  if (from < 0) {\n    var origin = view.input.lastSelectionTime > Date.now() - 50 ? view.input.lastSelectionOrigin : null;\n    var newSel = selectionFromDOM(view, origin);\n    if (newSel && !view.state.selection.eq(newSel)) {\n      if (chrome && android && view.input.lastKeyCode === 13 && Date.now() - 100 < view.input.lastKeyCodeTime && view.someProp(\"handleKeyDown\", function (f) {\n        return f(view, keyEvent(13, \"Enter\"));\n      })) return;\n      var _tr = view.state.tr.setSelection(newSel);\n      if (origin == \"pointer\") _tr.setMeta(\"pointer\", true);else if (origin == \"key\") _tr.scrollIntoView();\n      if (compositionID) _tr.setMeta(\"composition\", compositionID);\n      view.dispatch(_tr);\n    }\n    return;\n  }\n  var $before = view.state.doc.resolve(from);\n  var shared = $before.sharedDepth(to);\n  from = $before.before(shared + 1);\n  to = view.state.doc.resolve(to).after(shared + 1);\n  var sel = view.state.selection;\n  var parse = parseBetween(view, from, to);\n  var doc = view.state.doc,\n    compare = doc.slice(parse.from, parse.to);\n  var preferredPos, preferredSide;\n  // Prefer anchoring to end when Backspace is pressed\n  if (view.input.lastKeyCode === 8 && Date.now() - 100 < view.input.lastKeyCodeTime) {\n    preferredPos = view.state.selection.to;\n    preferredSide = \"end\";\n  } else {\n    preferredPos = view.state.selection.from;\n    preferredSide = \"start\";\n  }\n  view.input.lastKeyCode = null;\n  var change = findDiff(compare.content, parse.doc.content, parse.from, preferredPos, preferredSide);\n  if (change) view.input.domChangeCount++;\n  if ((ios && view.input.lastIOSEnter > Date.now() - 225 || android) && addedNodes.some(function (n) {\n    return n.nodeType == 1 && !isInline.test(n.nodeName);\n  }) && (!change || change.endA >= change.endB) && view.someProp(\"handleKeyDown\", function (f) {\n    return f(view, keyEvent(13, \"Enter\"));\n  })) {\n    view.input.lastIOSEnter = 0;\n    return;\n  }\n  if (!change) {\n    if (typeOver && sel instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection && !sel.empty && sel.$head.sameParent(sel.$anchor) && !view.composing && !(parse.sel && parse.sel.anchor != parse.sel.head)) {\n      change = {\n        start: sel.from,\n        endA: sel.to,\n        endB: sel.to\n      };\n    } else {\n      if (parse.sel) {\n        var _sel2 = resolveSelection(view, view.state.doc, parse.sel);\n        if (_sel2 && !_sel2.eq(view.state.selection)) {\n          var _tr2 = view.state.tr.setSelection(_sel2);\n          if (compositionID) _tr2.setMeta(\"composition\", compositionID);\n          view.dispatch(_tr2);\n        }\n      }\n      return;\n    }\n  }\n  // Handle the case where overwriting a selection by typing matches\n  // the start or end of the selected content, creating a change\n  // that's smaller than what was actually overwritten.\n  if (view.state.selection.from < view.state.selection.to && change.start == change.endB && view.state.selection instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection) {\n    if (change.start > view.state.selection.from && change.start <= view.state.selection.from + 2 && view.state.selection.from >= parse.from) {\n      change.start = view.state.selection.from;\n    } else if (change.endA < view.state.selection.to && change.endA >= view.state.selection.to - 2 && view.state.selection.to <= parse.to) {\n      change.endB += view.state.selection.to - change.endA;\n      change.endA = view.state.selection.to;\n    }\n  }\n  // IE11 will insert a non-breaking space _ahead_ of the space after\n  // the cursor space when adding a space before another space. When\n  // that happened, adjust the change to cover the space instead.\n  if (ie && ie_version <= 11 && change.endB == change.start + 1 && change.endA == change.start && change.start > parse.from && parse.doc.textBetween(change.start - parse.from - 1, change.start - parse.from + 1) == \" \\xA0\") {\n    change.start--;\n    change.endA--;\n    change.endB--;\n  }\n  var $from = parse.doc.resolveNoCache(change.start - parse.from);\n  var $to = parse.doc.resolveNoCache(change.endB - parse.from);\n  var $fromA = doc.resolve(change.start);\n  var inlineChange = $from.sameParent($to) && $from.parent.inlineContent && $fromA.end() >= change.endA;\n  var nextSel;\n  // If this looks like the effect of pressing Enter (or was recorded\n  // as being an iOS enter press), just dispatch an Enter key instead.\n  if ((ios && view.input.lastIOSEnter > Date.now() - 225 && (!inlineChange || addedNodes.some(function (n) {\n    return n.nodeName == \"DIV\" || n.nodeName == \"P\";\n  })) || !inlineChange && $from.pos < parse.doc.content.size && !$from.sameParent($to) && (nextSel = prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.Selection.findFrom(parse.doc.resolve($from.pos + 1), 1, true)) && nextSel.head == $to.pos) && view.someProp(\"handleKeyDown\", function (f) {\n    return f(view, keyEvent(13, \"Enter\"));\n  })) {\n    view.input.lastIOSEnter = 0;\n    return;\n  }\n  // Same for backspace\n  if (view.state.selection.anchor > change.start && looksLikeBackspace(doc, change.start, change.endA, $from, $to) && view.someProp(\"handleKeyDown\", function (f) {\n    return f(view, keyEvent(8, \"Backspace\"));\n  })) {\n    if (android && chrome) view.domObserver.suppressSelectionUpdates(); // #820\n    return;\n  }\n  // Chrome will occasionally, during composition, delete the\n  // entire composition and then immediately insert it again. This is\n  // used to detect that situation.\n  if (chrome && change.endB == change.start) view.input.lastChromeDelete = Date.now();\n  // This tries to detect Android virtual keyboard\n  // enter-and-pick-suggestion action. That sometimes (see issue\n  // #1059) first fires a DOM mutation, before moving the selection to\n  // the newly created block. And then, because ProseMirror cleans up\n  // the DOM selection, it gives up moving the selection entirely,\n  // leaving the cursor in the wrong place. When that happens, we drop\n  // the new paragraph from the initial change, and fire a simulated\n  // enter key afterwards.\n  if (android && !inlineChange && $from.start() != $to.start() && $to.parentOffset == 0 && $from.depth == $to.depth && parse.sel && parse.sel.anchor == parse.sel.head && parse.sel.head == change.endA) {\n    change.endB -= 2;\n    $to = parse.doc.resolveNoCache(change.endB - parse.from);\n    setTimeout(function () {\n      view.someProp(\"handleKeyDown\", function (f) {\n        return f(view, keyEvent(13, \"Enter\"));\n      });\n    }, 20);\n  }\n  var chFrom = change.start,\n    chTo = change.endA;\n  var tr, storedMarks, markChange;\n  if (inlineChange) {\n    if ($from.pos == $to.pos) {\n      // Deletion\n      // IE11 sometimes weirdly moves the DOM selection around after\n      // backspacing out the first element in a textblock\n      if (ie && ie_version <= 11 && $from.parentOffset == 0) {\n        view.domObserver.suppressSelectionUpdates();\n        setTimeout(function () {\n          return selectionToDOM(view);\n        }, 20);\n      }\n      tr = view.state.tr[\"delete\"](chFrom, chTo);\n      storedMarks = doc.resolve(change.start).marksAcross(doc.resolve(change.endA));\n    } else if (\n    // Adding or removing a mark\n    change.endA == change.endB && (markChange = isMarkChange($from.parent.content.cut($from.parentOffset, $to.parentOffset), $fromA.parent.content.cut($fromA.parentOffset, change.endA - $fromA.start())))) {\n      tr = view.state.tr;\n      if (markChange.type == \"add\") tr.addMark(chFrom, chTo, markChange.mark);else tr.removeMark(chFrom, chTo, markChange.mark);\n    } else if ($from.parent.child($from.index()).isText && $from.index() == $to.index() - ($to.textOffset ? 0 : 1)) {\n      // Both positions in the same text node -- simply insert text\n      var text = $from.parent.textBetween($from.parentOffset, $to.parentOffset);\n      if (view.someProp(\"handleTextInput\", function (f) {\n        return f(view, chFrom, chTo, text);\n      })) return;\n      tr = view.state.tr.insertText(text, chFrom, chTo);\n    }\n  }\n  if (!tr) tr = view.state.tr.replace(chFrom, chTo, parse.doc.slice(change.start - parse.from, change.endB - parse.from));\n  if (parse.sel) {\n    var _sel3 = resolveSelection(view, tr.doc, parse.sel);\n    // Chrome will sometimes, during composition, report the\n    // selection in the wrong place. If it looks like that is\n    // happening, don't update the selection.\n    // Edge just doesn't move the cursor forward when you start typing\n    // in an empty block or between br nodes.\n    if (_sel3 && !(chrome && view.composing && _sel3.empty && (change.start != change.endB || view.input.lastChromeDelete < Date.now() - 100) && (_sel3.head == chFrom || _sel3.head == tr.mapping.map(chTo) - 1) || ie && _sel3.empty && _sel3.head == chFrom)) tr.setSelection(_sel3);\n  }\n  if (storedMarks) tr.ensureMarks(storedMarks);\n  if (compositionID) tr.setMeta(\"composition\", compositionID);\n  view.dispatch(tr.scrollIntoView());\n}\nfunction resolveSelection(view, doc, parsedSel) {\n  if (Math.max(parsedSel.anchor, parsedSel.head) > doc.content.size) return null;\n  return selectionBetween(view, doc.resolve(parsedSel.anchor), doc.resolve(parsedSel.head));\n}\n// Given two same-length, non-empty fragments of inline content,\n// determine whether the first could be created from the second by\n// removing or adding a single mark type.\nfunction isMarkChange(cur, prev) {\n  var curMarks = cur.firstChild.marks,\n    prevMarks = prev.firstChild.marks;\n  var added = curMarks,\n    removed = prevMarks,\n    type,\n    mark,\n    update;\n  for (var i = 0; i < prevMarks.length; i++) added = prevMarks[i].removeFromSet(added);\n  for (var _i16 = 0; _i16 < curMarks.length; _i16++) removed = curMarks[_i16].removeFromSet(removed);\n  if (added.length == 1 && removed.length == 0) {\n    mark = added[0];\n    type = \"add\";\n    update = function update(node) {\n      return node.mark(mark.addToSet(node.marks));\n    };\n  } else if (added.length == 0 && removed.length == 1) {\n    mark = removed[0];\n    type = \"remove\";\n    update = function update(node) {\n      return node.mark(mark.removeFromSet(node.marks));\n    };\n  } else {\n    return null;\n  }\n  var updated = [];\n  for (var _i17 = 0; _i17 < prev.childCount; _i17++) updated.push(update(prev.child(_i17)));\n  if (prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(updated).eq(cur)) return {\n    mark: mark,\n    type: type\n  };\n}\nfunction looksLikeBackspace(old, start, end, $newStart, $newEnd) {\n  if (\n  // The content must have shrunk\n  end - start <= $newEnd.pos - $newStart.pos ||\n  // newEnd must point directly at or after the end of the block that newStart points into\n  skipClosingAndOpening($newStart, true, false) < $newEnd.pos) return false;\n  var $start = old.resolve(start);\n  // Handle the case where, rather than joining blocks, the change just removed an entire block\n  if (!$newStart.parent.isTextblock) {\n    var after = $start.nodeAfter;\n    return after != null && end == start + after.nodeSize;\n  }\n  // Start must be at the end of a block\n  if ($start.parentOffset < $start.parent.content.size || !$start.parent.isTextblock) return false;\n  var $next = old.resolve(skipClosingAndOpening($start, true, true));\n  // The next textblock must start before end and end near it\n  if (!$next.parent.isTextblock || $next.pos > end || skipClosingAndOpening($next, true, false) < end) return false;\n  // The fragments after the join point must match\n  return $newStart.parent.content.cut($newStart.parentOffset).eq($next.parent.content);\n}\nfunction skipClosingAndOpening($pos, fromEnd, mayOpen) {\n  var depth = $pos.depth,\n    end = fromEnd ? $pos.end() : $pos.pos;\n  while (depth > 0 && (fromEnd || $pos.indexAfter(depth) == $pos.node(depth).childCount)) {\n    depth--;\n    end++;\n    fromEnd = false;\n  }\n  if (mayOpen) {\n    var next = $pos.node(depth).maybeChild($pos.indexAfter(depth));\n    while (next && !next.isLeaf) {\n      next = next.firstChild;\n      end++;\n    }\n  }\n  return end;\n}\nfunction findDiff(a, b, pos, preferredPos, preferredSide) {\n  var start = a.findDiffStart(b, pos);\n  if (start == null) return null;\n  var _a$findDiffEnd = a.findDiffEnd(b, pos + a.size, pos + b.size),\n    endA = _a$findDiffEnd.a,\n    endB = _a$findDiffEnd.b;\n  if (preferredSide == \"end\") {\n    var adjust = Math.max(0, start - Math.min(endA, endB));\n    preferredPos -= endA + adjust - start;\n  }\n  if (endA < start && a.size < b.size) {\n    var move = preferredPos <= start && preferredPos >= endA ? start - preferredPos : 0;\n    start -= move;\n    if (start && start < b.size && isSurrogatePair(b.textBetween(start - 1, start + 1))) start += move ? 1 : -1;\n    endB = start + (endB - endA);\n    endA = start;\n  } else if (endB < start) {\n    var _move = preferredPos <= start && preferredPos >= endB ? start - preferredPos : 0;\n    start -= _move;\n    if (start && start < a.size && isSurrogatePair(a.textBetween(start - 1, start + 1))) start += _move ? 1 : -1;\n    endA = start + (endA - endB);\n    endB = start;\n  }\n  return {\n    start: start,\n    endA: endA,\n    endB: endB\n  };\n}\nfunction isSurrogatePair(str) {\n  if (str.length != 2) return false;\n  var a = str.charCodeAt(0),\n    b = str.charCodeAt(1);\n  return a >= 0xDC00 && a <= 0xDFFF && b >= 0xD800 && b <= 0xDBFF;\n}\n\n/**\n@internal\n*/\nvar __parseFromClipboard = parseFromClipboard;\n/**\n@internal\n*/\nvar __endComposition = endComposition;\n/**\nAn editor view manages the DOM structure that represents an\neditable document. Its state and behavior are determined by its\n[props](https://prosemirror.net/docs/ref/#view.DirectEditorProps).\n*/\nvar EditorView = /*#__PURE__*/function () {\n  /**\n  Create a view. `place` may be a DOM node that the editor should\n  be appended to, a function that will place it into the document,\n  or an object whose `mount` property holds the node to use as the\n  document container. If it is `null`, the editor will not be\n  added to the document.\n  */\n  function EditorView(place, props) {\n    var _this16 = this;\n    _classCallCheck(this, EditorView);\n    this._root = null;\n    /**\n    @internal\n    */\n    this.focused = false;\n    /**\n    Kludge used to work around a Chrome bug @internal\n    */\n    this.trackWrites = null;\n    this.mounted = false;\n    /**\n    @internal\n    */\n    this.markCursor = null;\n    /**\n    @internal\n    */\n    this.cursorWrapper = null;\n    /**\n    @internal\n    */\n    this.lastSelectedViewDesc = undefined;\n    /**\n    @internal\n    */\n    this.input = new InputState();\n    this.prevDirectPlugins = [];\n    this.pluginViews = [];\n    /**\n    Holds `true` when a hack node is needed in Firefox to prevent the\n    [space is eaten issue](https://github.com/ProseMirror/prosemirror/issues/651)\n    @internal\n    */\n    this.requiresGeckoHackNode = false;\n    /**\n    When editor content is being dragged, this object contains\n    information about the dragged slice and whether it is being\n    copied or moved. At any other time, it is null.\n    */\n    this.dragging = null;\n    this._props = props;\n    this.state = props.state;\n    this.directPlugins = props.plugins || [];\n    this.directPlugins.forEach(checkStateComponent);\n    this.dispatch = this.dispatch.bind(this);\n    this.dom = place && place.mount || document.createElement(\"div\");\n    if (place) {\n      if (place.appendChild) place.appendChild(this.dom);else if (typeof place == \"function\") place(this.dom);else if (place.mount) this.mounted = true;\n    }\n    this.editable = getEditable(this);\n    updateCursorWrapper(this);\n    this.nodeViews = buildNodeViews(this);\n    this.docView = docViewDesc(this.state.doc, computeDocDeco(this), viewDecorations(this), this.dom, this);\n    this.domObserver = new DOMObserver(this, function (from, to, typeOver, added) {\n      return readDOMChange(_this16, from, to, typeOver, added);\n    });\n    this.domObserver.start();\n    initInput(this);\n    this.updatePluginViews();\n  }\n  /**\n  Holds `true` when a\n  [composition](https://w3c.github.io/uievents/#events-compositionevents)\n  is active.\n  */\n  return _createClass(EditorView, [{\n    key: \"composing\",\n    get: function get() {\n      return this.input.composing;\n    }\n    /**\n    The view's current [props](https://prosemirror.net/docs/ref/#view.EditorProps).\n    */\n  }, {\n    key: \"props\",\n    get: function get() {\n      if (this._props.state != this.state) {\n        var prev = this._props;\n        this._props = {};\n        for (var name in prev) this._props[name] = prev[name];\n        this._props.state = this.state;\n      }\n      return this._props;\n    }\n    /**\n    Update the view's props. Will immediately cause an update to\n    the DOM.\n    */\n  }, {\n    key: \"update\",\n    value: function update(props) {\n      if (props.handleDOMEvents != this._props.handleDOMEvents) ensureListeners(this);\n      var prevProps = this._props;\n      this._props = props;\n      if (props.plugins) {\n        props.plugins.forEach(checkStateComponent);\n        this.directPlugins = props.plugins;\n      }\n      this.updateStateInner(props.state, prevProps);\n    }\n    /**\n    Update the view by updating existing props object with the object\n    given as argument. Equivalent to `view.update(Object.assign({},\n    view.props, props))`.\n    */\n  }, {\n    key: \"setProps\",\n    value: function setProps(props) {\n      var updated = {};\n      for (var name in this._props) updated[name] = this._props[name];\n      updated.state = this.state;\n      for (var _name2 in props) updated[_name2] = props[_name2];\n      this.update(updated);\n    }\n    /**\n    Update the editor's `state` prop, without touching any of the\n    other props.\n    */\n  }, {\n    key: \"updateState\",\n    value: function updateState(state) {\n      this.updateStateInner(state, this._props);\n    }\n  }, {\n    key: \"updateStateInner\",\n    value: function updateStateInner(state, prevProps) {\n      var _a;\n      var prev = this.state,\n        redraw = false,\n        updateSel = false;\n      // When stored marks are added, stop composition, so that they can\n      // be displayed.\n      if (state.storedMarks && this.composing) {\n        clearComposition(this);\n        updateSel = true;\n      }\n      this.state = state;\n      var pluginsChanged = prev.plugins != state.plugins || this._props.plugins != prevProps.plugins;\n      if (pluginsChanged || this._props.plugins != prevProps.plugins || this._props.nodeViews != prevProps.nodeViews) {\n        var nodeViews = buildNodeViews(this);\n        if (changedNodeViews(nodeViews, this.nodeViews)) {\n          this.nodeViews = nodeViews;\n          redraw = true;\n        }\n      }\n      if (pluginsChanged || prevProps.handleDOMEvents != this._props.handleDOMEvents) {\n        ensureListeners(this);\n      }\n      this.editable = getEditable(this);\n      updateCursorWrapper(this);\n      var innerDeco = viewDecorations(this),\n        outerDeco = computeDocDeco(this);\n      var scroll = prev.plugins != state.plugins && !prev.doc.eq(state.doc) ? \"reset\" : state.scrollToSelection > prev.scrollToSelection ? \"to selection\" : \"preserve\";\n      var updateDoc = redraw || !this.docView.matchesNode(state.doc, outerDeco, innerDeco);\n      if (updateDoc || !state.selection.eq(prev.selection)) updateSel = true;\n      var oldScrollPos = scroll == \"preserve\" && updateSel && this.dom.style.overflowAnchor == null && storeScrollPos(this);\n      if (updateSel) {\n        this.domObserver.stop();\n        // Work around an issue in Chrome, IE, and Edge where changing\n        // the DOM around an active selection puts it into a broken\n        // state where the thing the user sees differs from the\n        // selection reported by the Selection object (#710, #973,\n        // #1011, #1013, #1035).\n        var forceSelUpdate = updateDoc && (ie || chrome) && !this.composing && !prev.selection.empty && !state.selection.empty && selectionContextChanged(prev.selection, state.selection);\n        if (updateDoc) {\n          // If the node that the selection points into is written to,\n          // Chrome sometimes starts misreporting the selection, so this\n          // tracks that and forces a selection reset when our update\n          // did write to the node.\n          var chromeKludge = chrome ? this.trackWrites = this.domSelectionRange().focusNode : null;\n          if (this.composing) this.input.compositionNode = findCompositionNode(this);\n          if (redraw || !this.docView.update(state.doc, outerDeco, innerDeco, this)) {\n            this.docView.updateOuterDeco(outerDeco);\n            this.docView.destroy();\n            this.docView = docViewDesc(state.doc, outerDeco, innerDeco, this.dom, this);\n          }\n          if (chromeKludge && !this.trackWrites) forceSelUpdate = true;\n        }\n        // Work around for an issue where an update arriving right between\n        // a DOM selection change and the \"selectionchange\" event for it\n        // can cause a spurious DOM selection update, disrupting mouse\n        // drag selection.\n        if (forceSelUpdate || !(this.input.mouseDown && this.domObserver.currentSelection.eq(this.domSelectionRange()) && anchorInRightPlace(this))) {\n          selectionToDOM(this, forceSelUpdate);\n        } else {\n          syncNodeSelection(this, state.selection);\n          this.domObserver.setCurSelection();\n        }\n        this.domObserver.start();\n      }\n      this.updatePluginViews(prev);\n      if (((_a = this.dragging) === null || _a === void 0 ? void 0 : _a.node) && !prev.doc.eq(state.doc)) this.updateDraggedNode(this.dragging, prev);\n      if (scroll == \"reset\") {\n        this.dom.scrollTop = 0;\n      } else if (scroll == \"to selection\") {\n        this.scrollToSelection();\n      } else if (oldScrollPos) {\n        resetScrollPos(oldScrollPos);\n      }\n    }\n    /**\n    @internal\n    */\n  }, {\n    key: \"scrollToSelection\",\n    value: function scrollToSelection() {\n      var _this17 = this;\n      var startDOM = this.domSelectionRange().focusNode;\n      if (!startDOM || !this.dom.contains(startDOM.nodeType == 1 ? startDOM : startDOM.parentNode)) ;else if (this.someProp(\"handleScrollToSelection\", function (f) {\n        return f(_this17);\n      })) ;else if (this.state.selection instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection) {\n        var target = this.docView.domAfterPos(this.state.selection.from);\n        if (target.nodeType == 1) scrollRectIntoView(this, target.getBoundingClientRect(), startDOM);\n      } else {\n        scrollRectIntoView(this, this.coordsAtPos(this.state.selection.head, 1), startDOM);\n      }\n    }\n  }, {\n    key: \"destroyPluginViews\",\n    value: function destroyPluginViews() {\n      var view;\n      while (view = this.pluginViews.pop()) if (view.destroy) view.destroy();\n    }\n  }, {\n    key: \"updatePluginViews\",\n    value: function updatePluginViews(prevState) {\n      if (!prevState || prevState.plugins != this.state.plugins || this.directPlugins != this.prevDirectPlugins) {\n        this.prevDirectPlugins = this.directPlugins;\n        this.destroyPluginViews();\n        for (var i = 0; i < this.directPlugins.length; i++) {\n          var plugin = this.directPlugins[i];\n          if (plugin.spec.view) this.pluginViews.push(plugin.spec.view(this));\n        }\n        for (var _i18 = 0; _i18 < this.state.plugins.length; _i18++) {\n          var _plugin = this.state.plugins[_i18];\n          if (_plugin.spec.view) this.pluginViews.push(_plugin.spec.view(this));\n        }\n      } else {\n        for (var _i19 = 0; _i19 < this.pluginViews.length; _i19++) {\n          var pluginView = this.pluginViews[_i19];\n          if (pluginView.update) pluginView.update(this, prevState);\n        }\n      }\n    }\n  }, {\n    key: \"updateDraggedNode\",\n    value: function updateDraggedNode(dragging, prev) {\n      var sel = dragging.node,\n        found = -1;\n      if (this.state.doc.nodeAt(sel.from) == sel.node) {\n        found = sel.from;\n      } else {\n        var movedPos = sel.from + (this.state.doc.content.size - prev.doc.content.size);\n        var moved = movedPos > 0 && this.state.doc.nodeAt(movedPos);\n        if (moved == sel.node) found = movedPos;\n      }\n      this.dragging = new Dragging(dragging.slice, dragging.move, found < 0 ? undefined : prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.create(this.state.doc, found));\n    }\n  }, {\n    key: \"someProp\",\n    value: function someProp(propName, f) {\n      var prop = this._props && this._props[propName],\n        value;\n      if (prop != null && (value = f ? f(prop) : prop)) return value;\n      for (var i = 0; i < this.directPlugins.length; i++) {\n        var _prop = this.directPlugins[i].props[propName];\n        if (_prop != null && (value = f ? f(_prop) : _prop)) return value;\n      }\n      var plugins = this.state.plugins;\n      if (plugins) for (var _i20 = 0; _i20 < plugins.length; _i20++) {\n        var _prop2 = plugins[_i20].props[propName];\n        if (_prop2 != null && (value = f ? f(_prop2) : _prop2)) return value;\n      }\n    }\n    /**\n    Query whether the view has focus.\n    */\n  }, {\n    key: \"hasFocus\",\n    value: function hasFocus() {\n      // Work around IE not handling focus correctly if resize handles are shown.\n      // If the cursor is inside an element with resize handles, activeElement\n      // will be that element instead of this.dom.\n      if (ie) {\n        // If activeElement is within this.dom, and there are no other elements\n        // setting `contenteditable` to false in between, treat it as focused.\n        var node = this.root.activeElement;\n        if (node == this.dom) return true;\n        if (!node || !this.dom.contains(node)) return false;\n        while (node && this.dom != node && this.dom.contains(node)) {\n          if (node.contentEditable == 'false') return false;\n          node = node.parentElement;\n        }\n        return true;\n      }\n      return this.root.activeElement == this.dom;\n    }\n    /**\n    Focus the editor.\n    */\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this.domObserver.stop();\n      if (this.editable) focusPreventScroll(this.dom);\n      selectionToDOM(this);\n      this.domObserver.start();\n    }\n    /**\n    Get the document root in which the editor exists. This will\n    usually be the top-level `document`, but might be a [shadow\n    DOM](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Shadow_DOM)\n    root if the editor is inside one.\n    */\n  }, {\n    key: \"root\",\n    get: function get() {\n      var _this18 = this;\n      var cached = this._root;\n      if (cached == null) {\n        var _loop5 = function _loop5(search) {\n            if (search.nodeType == 9 || search.nodeType == 11 && search.host) {\n              if (!search.getSelection) Object.getPrototypeOf(search).getSelection = function () {\n                return search.ownerDocument.getSelection();\n              };\n              return {\n                v: _this18._root = search\n              };\n            }\n          },\n          _ret3;\n        for (var search = this.dom.parentNode; search; search = search.parentNode) {\n          _ret3 = _loop5(search);\n          if (_ret3) return _ret3.v;\n        }\n      }\n      return cached || document;\n    }\n    /**\n    When an existing editor view is moved to a new document or\n    shadow tree, call this to make it recompute its root.\n    */\n  }, {\n    key: \"updateRoot\",\n    value: function updateRoot() {\n      this._root = null;\n    }\n    /**\n    Given a pair of viewport coordinates, return the document\n    position that corresponds to them. May return null if the given\n    coordinates aren't inside of the editor. When an object is\n    returned, its `pos` property is the position nearest to the\n    coordinates, and its `inside` property holds the position of the\n    inner node that the position falls inside of, or -1 if it is at\n    the top level, not in any node.\n    */\n  }, {\n    key: \"posAtCoords\",\n    value: function posAtCoords(coords) {\n      return _posAtCoords(this, coords);\n    }\n    /**\n    Returns the viewport rectangle at a given document position.\n    `left` and `right` will be the same number, as this returns a\n    flat cursor-ish rectangle. If the position is between two things\n    that aren't directly adjacent, `side` determines which element\n    is used. When < 0, the element before the position is used,\n    otherwise the element after.\n    */\n  }, {\n    key: \"coordsAtPos\",\n    value: function coordsAtPos(pos) {\n      var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      return _coordsAtPos(this, pos, side);\n    }\n    /**\n    Find the DOM position that corresponds to the given document\n    position. When `side` is negative, find the position as close as\n    possible to the content before the position. When positive,\n    prefer positions close to the content after the position. When\n    zero, prefer as shallow a position as possible.\n    \n    Note that you should **not** mutate the editor's internal DOM,\n    only inspect it (and even that is usually not necessary).\n    */\n  }, {\n    key: \"domAtPos\",\n    value: function domAtPos(pos) {\n      var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return this.docView.domFromPos(pos, side);\n    }\n    /**\n    Find the DOM node that represents the document node after the\n    given position. May return `null` when the position doesn't point\n    in front of a node or if the node is inside an opaque node view.\n    \n    This is intended to be able to call things like\n    `getBoundingClientRect` on that DOM node. Do **not** mutate the\n    editor DOM directly, or add styling this way, since that will be\n    immediately overriden by the editor as it redraws the node.\n    */\n  }, {\n    key: \"nodeDOM\",\n    value: function nodeDOM(pos) {\n      var desc = this.docView.descAt(pos);\n      return desc ? desc.nodeDOM : null;\n    }\n    /**\n    Find the document position that corresponds to a given DOM\n    position. (Whenever possible, it is preferable to inspect the\n    document structure directly, rather than poking around in the\n    DOM, but sometimes—for example when interpreting an event\n    target—you don't have a choice.)\n    \n    The `bias` parameter can be used to influence which side of a DOM\n    node to use when the position is inside a leaf node.\n    */\n  }, {\n    key: \"posAtDOM\",\n    value: function posAtDOM(node, offset) {\n      var bias = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n      var pos = this.docView.posFromDOM(node, offset, bias);\n      if (pos == null) throw new RangeError(\"DOM position not inside the editor\");\n      return pos;\n    }\n    /**\n    Find out whether the selection is at the end of a textblock when\n    moving in a given direction. When, for example, given `\"left\"`,\n    it will return true if moving left from the current cursor\n    position would leave that position's parent textblock. Will apply\n    to the view's current state by default, but it is possible to\n    pass a different state.\n    */\n  }, {\n    key: \"endOfTextblock\",\n    value: function endOfTextblock(dir, state) {\n      return _endOfTextblock(this, state || this.state, dir);\n    }\n    /**\n    Run the editor's paste logic with the given HTML string. The\n    `event`, if given, will be passed to the\n    [`handlePaste`](https://prosemirror.net/docs/ref/#view.EditorProps.handlePaste) hook.\n    */\n  }, {\n    key: \"pasteHTML\",\n    value: function pasteHTML(html, event) {\n      return doPaste(this, \"\", html, false, event || new ClipboardEvent(\"paste\"));\n    }\n    /**\n    Run the editor's paste logic with the given plain-text input.\n    */\n  }, {\n    key: \"pasteText\",\n    value: function pasteText(text, event) {\n      return doPaste(this, text, null, true, event || new ClipboardEvent(\"paste\"));\n    }\n    /**\n    Serialize the given slice as it would be if it was copied from\n    this editor. Returns a DOM element that contains a\n    representation of the slice as its children, a textual\n    representation, and the transformed slice (which can be\n    different from the given input due to hooks like\n    [`transformCopied`](https://prosemirror.net/docs/ref/#view.EditorProps.transformCopied)).\n    */\n  }, {\n    key: \"serializeForClipboard\",\n    value: function serializeForClipboard(slice) {\n      return _serializeForClipboard(this, slice);\n    }\n    /**\n    Removes the editor from the DOM and destroys all [node\n    views](https://prosemirror.net/docs/ref/#view.NodeView).\n    */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (!this.docView) return;\n      destroyInput(this);\n      this.destroyPluginViews();\n      if (this.mounted) {\n        this.docView.update(this.state.doc, [], viewDecorations(this), this);\n        this.dom.textContent = \"\";\n      } else if (this.dom.parentNode) {\n        this.dom.parentNode.removeChild(this.dom);\n      }\n      this.docView.destroy();\n      this.docView = null;\n      clearReusedRange();\n    }\n    /**\n    This is true when the view has been\n    [destroyed](https://prosemirror.net/docs/ref/#view.EditorView.destroy) (and thus should not be\n    used anymore).\n    */\n  }, {\n    key: \"isDestroyed\",\n    get: function get() {\n      return this.docView == null;\n    }\n    /**\n    Used for testing.\n    */\n  }, {\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(event) {\n      return _dispatchEvent(this, event);\n    }\n    /**\n    Dispatch a transaction. Will call\n    [`dispatchTransaction`](https://prosemirror.net/docs/ref/#view.DirectEditorProps.dispatchTransaction)\n    when given, and otherwise defaults to applying the transaction to\n    the current state and calling\n    [`updateState`](https://prosemirror.net/docs/ref/#view.EditorView.updateState) with the result.\n    This method is bound to the view instance, so that it can be\n    easily passed around.\n    */\n  }, {\n    key: \"dispatch\",\n    value: function dispatch(tr) {\n      var dispatchTransaction = this._props.dispatchTransaction;\n      if (dispatchTransaction) dispatchTransaction.call(this, tr);else this.updateState(this.state.apply(tr));\n    }\n    /**\n    @internal\n    */\n  }, {\n    key: \"domSelectionRange\",\n    value: function domSelectionRange() {\n      var sel = this.domSelection();\n      if (!sel) return {\n        focusNode: null,\n        focusOffset: 0,\n        anchorNode: null,\n        anchorOffset: 0\n      };\n      return safari && this.root.nodeType === 11 && deepActiveElement(this.dom.ownerDocument) == this.dom && safariShadowSelectionRange(this, sel) || sel;\n    }\n    /**\n    @internal\n    */\n  }, {\n    key: \"domSelection\",\n    value: function domSelection() {\n      return this.root.getSelection();\n    }\n  }]);\n}();\nfunction computeDocDeco(view) {\n  var attrs = Object.create(null);\n  attrs[\"class\"] = \"ProseMirror\";\n  attrs.contenteditable = String(view.editable);\n  view.someProp(\"attributes\", function (value) {\n    if (typeof value == \"function\") value = value(view.state);\n    if (value) for (var attr in value) {\n      if (attr == \"class\") attrs[\"class\"] += \" \" + value[attr];else if (attr == \"style\") attrs.style = (attrs.style ? attrs.style + \";\" : \"\") + value[attr];else if (!attrs[attr] && attr != \"contenteditable\" && attr != \"nodeName\") attrs[attr] = String(value[attr]);\n    }\n  });\n  if (!attrs.translate) attrs.translate = \"no\";\n  return [Decoration.node(0, view.state.doc.content.size, attrs)];\n}\nfunction updateCursorWrapper(view) {\n  if (view.markCursor) {\n    var dom = document.createElement(\"img\");\n    dom.className = \"ProseMirror-separator\";\n    dom.setAttribute(\"mark-placeholder\", \"true\");\n    dom.setAttribute(\"alt\", \"\");\n    view.cursorWrapper = {\n      dom: dom,\n      deco: Decoration.widget(view.state.selection.from, dom, {\n        raw: true,\n        marks: view.markCursor\n      })\n    };\n  } else {\n    view.cursorWrapper = null;\n  }\n}\nfunction getEditable(view) {\n  return !view.someProp(\"editable\", function (value) {\n    return value(view.state) === false;\n  });\n}\nfunction selectionContextChanged(sel1, sel2) {\n  var depth = Math.min(sel1.$anchor.sharedDepth(sel1.head), sel2.$anchor.sharedDepth(sel2.head));\n  return sel1.$anchor.start(depth) != sel2.$anchor.start(depth);\n}\nfunction buildNodeViews(view) {\n  var result = Object.create(null);\n  function add(obj) {\n    for (var _prop3 in obj) if (!Object.prototype.hasOwnProperty.call(result, _prop3)) result[_prop3] = obj[_prop3];\n  }\n  view.someProp(\"nodeViews\", add);\n  view.someProp(\"markViews\", add);\n  return result;\n}\nfunction changedNodeViews(a, b) {\n  var nA = 0,\n    nB = 0;\n  for (var _prop4 in a) {\n    if (a[_prop4] != b[_prop4]) return true;\n    nA++;\n  }\n  for (var _ in b) nB++;\n  return nA != nB;\n}\nfunction checkStateComponent(plugin) {\n  if (plugin.spec.state || plugin.spec.filterTransaction || plugin.spec.appendTransaction) throw new RangeError(\"Plugins passed directly to the view must not have a state component\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/prosemirror-view/dist/index.js\n");

/***/ })

};
;