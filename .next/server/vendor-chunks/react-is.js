"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-is";
exports.ids = ["vendor-chunks/react-is"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-is/cjs/react-is.development.js":
/*!***********************************************************!*\
  !*** ./node_modules/react-is/cjs/react-is.development.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/**\n * @license React\n * react-is.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\n true && function () {\n  function typeOf(object) {\n    if (\"object\" === _typeof(object) && null !== object) {\n      var $$typeof = object.$$typeof;\n      switch ($$typeof) {\n        case REACT_ELEMENT_TYPE:\n          switch (object = object.type, object) {\n            case REACT_FRAGMENT_TYPE:\n            case REACT_PROFILER_TYPE:\n            case REACT_STRICT_MODE_TYPE:\n            case REACT_SUSPENSE_TYPE:\n            case REACT_SUSPENSE_LIST_TYPE:\n              return object;\n            default:\n              switch (object = object && object.$$typeof, object) {\n                case REACT_CONTEXT_TYPE:\n                case REACT_FORWARD_REF_TYPE:\n                case REACT_LAZY_TYPE:\n                case REACT_MEMO_TYPE:\n                  return object;\n                case REACT_CONSUMER_TYPE:\n                  return object;\n                default:\n                  return $$typeof;\n              }\n          }\n        case REACT_PORTAL_TYPE:\n          return $$typeof;\n      }\n    }\n  }\n  var REACT_ELEMENT_TYPE = Symbol[\"for\"](\"react.transitional.element\"),\n    REACT_PORTAL_TYPE = Symbol[\"for\"](\"react.portal\"),\n    REACT_FRAGMENT_TYPE = Symbol[\"for\"](\"react.fragment\"),\n    REACT_STRICT_MODE_TYPE = Symbol[\"for\"](\"react.strict_mode\"),\n    REACT_PROFILER_TYPE = Symbol[\"for\"](\"react.profiler\");\n  Symbol[\"for\"](\"react.provider\");\n  var REACT_CONSUMER_TYPE = Symbol[\"for\"](\"react.consumer\"),\n    REACT_CONTEXT_TYPE = Symbol[\"for\"](\"react.context\"),\n    REACT_FORWARD_REF_TYPE = Symbol[\"for\"](\"react.forward_ref\"),\n    REACT_SUSPENSE_TYPE = Symbol[\"for\"](\"react.suspense\"),\n    REACT_SUSPENSE_LIST_TYPE = Symbol[\"for\"](\"react.suspense_list\"),\n    REACT_MEMO_TYPE = Symbol[\"for\"](\"react.memo\"),\n    REACT_LAZY_TYPE = Symbol[\"for\"](\"react.lazy\"),\n    REACT_OFFSCREEN_TYPE = Symbol[\"for\"](\"react.offscreen\"),\n    REACT_CLIENT_REFERENCE = Symbol[\"for\"](\"react.client.reference\");\n  exports.ContextConsumer = REACT_CONSUMER_TYPE;\n  exports.ContextProvider = REACT_CONTEXT_TYPE;\n  exports.Element = REACT_ELEMENT_TYPE;\n  exports.ForwardRef = REACT_FORWARD_REF_TYPE;\n  exports.Fragment = REACT_FRAGMENT_TYPE;\n  exports.Lazy = REACT_LAZY_TYPE;\n  exports.Memo = REACT_MEMO_TYPE;\n  exports.Portal = REACT_PORTAL_TYPE;\n  exports.Profiler = REACT_PROFILER_TYPE;\n  exports.StrictMode = REACT_STRICT_MODE_TYPE;\n  exports.Suspense = REACT_SUSPENSE_TYPE;\n  exports.SuspenseList = REACT_SUSPENSE_LIST_TYPE;\n  exports.isContextConsumer = function (object) {\n    return typeOf(object) === REACT_CONSUMER_TYPE;\n  };\n  exports.isContextProvider = function (object) {\n    return typeOf(object) === REACT_CONTEXT_TYPE;\n  };\n  exports.isElement = function (object) {\n    return \"object\" === _typeof(object) && null !== object && object.$$typeof === REACT_ELEMENT_TYPE;\n  };\n  exports.isForwardRef = function (object) {\n    return typeOf(object) === REACT_FORWARD_REF_TYPE;\n  };\n  exports.isFragment = function (object) {\n    return typeOf(object) === REACT_FRAGMENT_TYPE;\n  };\n  exports.isLazy = function (object) {\n    return typeOf(object) === REACT_LAZY_TYPE;\n  };\n  exports.isMemo = function (object) {\n    return typeOf(object) === REACT_MEMO_TYPE;\n  };\n  exports.isPortal = function (object) {\n    return typeOf(object) === REACT_PORTAL_TYPE;\n  };\n  exports.isProfiler = function (object) {\n    return typeOf(object) === REACT_PROFILER_TYPE;\n  };\n  exports.isStrictMode = function (object) {\n    return typeOf(object) === REACT_STRICT_MODE_TYPE;\n  };\n  exports.isSuspense = function (object) {\n    return typeOf(object) === REACT_SUSPENSE_TYPE;\n  };\n  exports.isSuspenseList = function (object) {\n    return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;\n  };\n  exports.isValidElementType = function (type) {\n    return \"string\" === typeof type || \"function\" === typeof type || type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_OFFSCREEN_TYPE || \"object\" === _typeof(type) && null !== type && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_CONSUMER_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_CLIENT_REFERENCE || void 0 !== type.getModuleId) ? !0 : !1;\n  };\n  exports.typeOf = typeOf;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-is/cjs/react-is.development.js\n");

/***/ })

};
;